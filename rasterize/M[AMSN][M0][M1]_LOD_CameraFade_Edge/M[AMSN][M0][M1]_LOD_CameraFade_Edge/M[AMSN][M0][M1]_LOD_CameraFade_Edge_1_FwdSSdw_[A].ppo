#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _900;
float _3289;
float _3290;
float _3291;
float _3292;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _289 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _295 = _289.w;
    float _296 = _289.x * cbMtdParam._m0[9u].x;
    float _297 = _289.y * cbMtdParam._m0[9u].y;
    float _298 = _289.z * cbMtdParam._m0[9u].z;
    vec4 _310 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _314 = _310.z;
    float _318 = (_310.x * 2.0) + (-1.0);
    float _320 = (_310.y * 2.0) + (-1.0);
    float _321 = dot(vec2(_318, _320), vec2(_318, _320));
    float _3301 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _327 = sqrt(1.0 - (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))));
    float _339 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].x;
    float _343 = gl_FragCoord.x * 0.125;
    float _345 = gl_FragCoord.y * 0.125;
    float _356 = fma(_327, _213, fma(_320, _205 * TANGENT.x, (_191 * _184) * _318));
    float _359 = fma(_327, _214, fma(_320, _205 * TANGENT.y, (_191 * _185) * _318));
    float _362 = fma(_327, _215, fma(_320, _205 * TANGENT.z, (_191 * _186) * _318));
    float _366 = inversesqrt(dot(vec3(_356, _359, _362), vec3(_356, _359, _362)));
    float _367 = _366 * _356;
    float _368 = _366 * _359;
    float _369 = _366 * _362;
    float _3317 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _370 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _3328 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3339 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3350 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    if (!(((sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271)) - cbMtdParam._m0[10u].x) / (isnan(0.001000000047497451305389404296875) ? _339 : (isnan(_339) ? 0.001000000047497451305389404296875 : max(_339, 0.001000000047497451305389404296875)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_343, _345)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _393 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _442 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _433);
    float _443 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _433);
    float _444 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _433);
    float _448 = inversesqrt(dot(vec3(_442, _443, _444), vec3(_442, _443, _444)));
    float _449 = _442 * _448;
    float _450 = _443 * _448;
    float _451 = _444 * _448;
    vec4 _453 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_343, _345));
    float _455 = _453.w;
    float _461 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _462 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _483 = fma(_369, cbSceneParam._m0[5u].z, fma(_368, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _367));
    float _486 = fma(_369, cbSceneParam._m0[6u].z, fma(_368, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _367));
    float _489 = fma(_369, cbSceneParam._m0[7u].z, fma(_368, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _367));
    uint _502 = uint(roundEven(NORMAL.w)) * 13u;
    uint _504 = _502 + 9u;
    uint _505 = _504 + uint(cbMatDynParam._m0[0u].w);
    float _511 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0)))) * cbInstanceData._m0[_505].x;
    float _512 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0)))) * cbInstanceData._m0[_505].y;
    float _513 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0)))) * cbInstanceData._m0[_505].z;
    float _3361 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _514 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _3372 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _3383 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _516 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    vec4 _525 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _461, cbSceneParam._m0[86u].y * _462));
    float _528 = _525.x * TEXCOORD.z;
    float _529 = dot(vec3(_367, _368, _369), vec3(_449, _450, _451));
    float _532 = _529 * 2.0;
    float _536 = (_532 * _367) - _449;
    float _537 = (_532 * _368) - _450;
    float _538 = (_532 * _369) - _451;
    float _542 = abs(dot(vec3(_449, _450, _451), vec3(_367, _368, _369)));
    float _3394 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _544 = sqrt(_370);
    float _557 = exp2((_544 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_544 * 3.0));
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _593 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _597 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _899;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _624 = fma(_597, cbModelParam._m0[26u].z, fma(_593, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _589));
        float _628 = fma(_597, cbModelParam._m0[27u].z, fma(_593, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _589));
        float _632 = fma(_597, cbModelParam._m0[28u].z, fma(_593, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _589));
        float _657 = _589 + _367;
        float _658 = _593 + _368;
        float _659 = _597 + _369;
        float _669 = fma(_659, cbModelParam._m0[26u].z, fma(_658, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _657)) - _624;
        float _670 = fma(_659, cbModelParam._m0[27u].z, fma(_658, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _657)) - _628;
        float _671 = fma(_659, cbModelParam._m0[28u].z, fma(_658, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _657)) - _632;
        float _675 = inversesqrt(dot(vec3(_669, _670, _671), vec3(_669, _670, _671)));
        float _688 = ((_675 * _669) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_624 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _689 = ((_675 * _670) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_628 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _690 = ((_675 * _671) / cbModelParam._m0[34u].z) + ((((((_632 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        float _727 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_693.x + (-0.5));
        float _729 = _727 * (_693.y + (-0.5));
        float _730 = _727 * (_693.z + (-0.5));
        float _737 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_700.x + (-0.5));
        float _739 = _737 * (_700.y + (-0.5));
        float _740 = _737 * (_700.z + (-0.5));
        float _747 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_707.x + (-0.5));
        float _749 = _747 * (_707.y + (-0.5));
        float _750 = _747 * (_707.z + (-0.5));
        float _757 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_714.x + (-0.5));
        float _759 = _757 * (_714.y + (-0.5));
        float _760 = _757 * (_714.z + (-0.5));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = _728 * 0.5;
        float _765 = _738 * 0.5;
        float _766 = _748 * 0.5;
        float _767 = dot(vec3(_764, _765, _766), vec3(_764, _765, _766));
        float _772 = (_767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_767);
        float _781 = (dot(vec3(_367, _368, _369), vec3(_772 * _764, _772 * _765, _772 * _766)) + 1.0) * 0.5;
        float _3420 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _791 = sqrt(((_765 * _765) + (_764 * _764)) + (_766 * _766)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3431 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _793 = _792 * 2.0;
        float _797 = (1.0 - _792) / (_792 + 1.0);
        float _3442 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _807 = ((((1.0 - _798) * (_793 + 2.0)) * exp2(log2(isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * (_793 + 1.0))) + _798) * _761;
        float _808 = _729 * 0.5;
        float _809 = _739 * 0.5;
        float _810 = _749 * 0.5;
        float _811 = dot(vec3(_808, _809, _810), vec3(_808, _809, _810));
        float _816 = (_811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_811);
        float _824 = (dot(vec3(_367, _368, _369), vec3(_816 * _808, _816 * _809, _816 * _810)) + 1.0) * 0.5;
        float _3453 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _833 = sqrt(((_809 * _809) + (_808 * _808)) + (_810 * _810)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3464 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3475 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * (_835 + 1.0))) + _840) * _762;
        float _850 = _730 * 0.5;
        float _851 = _740 * 0.5;
        float _852 = _750 * 0.5;
        float _853 = dot(vec3(_850, _851, _852), vec3(_850, _851, _852));
        float _858 = (_853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_853);
        float _866 = (dot(vec3(_367, _368, _369), vec3(_858 * _850, _858 * _851, _858 * _852)) + 1.0) * 0.5;
        float _3486 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _875 = sqrt(((_851 * _851) + (_850 * _850)) + (_852 * _852)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3497 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _877 = _876 * 2.0;
        float _881 = (1.0 - _876) / (_876 + 1.0);
        float _3508 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _891 = ((((1.0 - _882) * (_877 + 2.0)) * exp2(log2(isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * (_877 + 1.0))) + _882) * _763;
        _899 = _730;
        _901 = _729;
        _902 = _728;
        _903 = _740;
        _904 = _739;
        _905 = _738;
        _906 = _750;
        _907 = _749;
        _908 = _748;
        _909 = _763;
        _910 = _762;
        _911 = _761;
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)));
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)));
    }
    else
    {
        _899 = _900;
        _901 = _900;
        _902 = _900;
        _903 = _900;
        _904 = _900;
        _905 = _900;
        _906 = _900;
        _907 = _900;
        _908 = _900;
        _909 = _900;
        _910 = _900;
        _911 = _900;
        _912 = 0.0;
        _913 = 0.0;
        _914 = 0.0;
    }
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _940 = fma(_597, cbModelParam._m0[30u].z, fma(_593, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _589));
        float _944 = fma(_597, cbModelParam._m0[31u].z, fma(_593, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _589));
        float _948 = fma(_597, cbModelParam._m0[32u].z, fma(_593, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _589));
        float _971 = _589 + _367;
        float _972 = _593 + _368;
        float _973 = _597 + _369;
        float _983 = fma(_973, cbModelParam._m0[30u].z, fma(_972, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _971)) - _940;
        float _984 = fma(_973, cbModelParam._m0[31u].z, fma(_972, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _971)) - _944;
        float _985 = fma(_973, cbModelParam._m0[32u].z, fma(_972, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _971)) - _948;
        float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
        float _1002 = ((_989 * _983) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_940 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_989 * _984) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_944 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_989 * _985) / cbModelParam._m0[35u].z) + ((((((_948 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        float _1039 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1006.x + (-0.5));
        float _1041 = _1039 * (_1006.y + (-0.5));
        float _1042 = _1039 * (_1006.z + (-0.5));
        float _1049 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1013.x + (-0.5));
        float _1051 = _1049 * (_1013.y + (-0.5));
        float _1052 = _1049 * (_1013.z + (-0.5));
        float _1059 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1020.x + (-0.5));
        float _1061 = _1059 * (_1020.y + (-0.5));
        float _1062 = _1059 * (_1020.z + (-0.5));
        float _1069 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1027.x + (-0.5));
        float _1071 = _1069 * (_1027.y + (-0.5));
        float _1072 = _1069 * (_1027.z + (-0.5));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = _1040 * 0.5;
        float _1077 = _1050 * 0.5;
        float _1078 = _1060 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_367, _368, _369), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3549 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3560 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3571 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_1103 + 1.0))) + _1108) * _1073;
        float _1118 = _1041 * 0.5;
        float _1119 = _1051 * 0.5;
        float _1120 = _1061 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_367, _368, _369), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3582 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3593 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3604 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (_1145 + 1.0))) + _1150) * _1074;
        float _1160 = _1042 * 0.5;
        float _1161 = _1052 * 0.5;
        float _1162 = _1062 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_367, _368, _369), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3615 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3626 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3637 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * (_1187 + 1.0))) + _1192) * _1075;
        _1209 = _1042;
        _1210 = _1041;
        _1211 = _1040;
        _1212 = _1052;
        _1213 = _1051;
        _1214 = _1050;
        _1215 = _1062;
        _1216 = _1061;
        _1217 = _1060;
        _1218 = _1075;
        _1219 = _1074;
        _1220 = _1073;
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
    }
    else
    {
        _1209 = _900;
        _1210 = _900;
        _1211 = _900;
        _1212 = _900;
        _1213 = _900;
        _1214 = _900;
        _1215 = _900;
        _1216 = _900;
        _1217 = _900;
        _1218 = _900;
        _1219 = _900;
        _1220 = _900;
        _1221 = 0.0;
        _1222 = 0.0;
        _1223 = 0.0;
    }
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _912)) + _912;
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _913)) + _913;
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _914)) + _914;
    float _1256 = fma(_1235, cbSceneParam._m0[89u].z, fma(_1234, cbSceneParam._m0[89u].y, _1233 * cbSceneParam._m0[89u].x));
    float _1259 = fma(_1235, cbSceneParam._m0[90u].z, fma(_1234, cbSceneParam._m0[90u].y, _1233 * cbSceneParam._m0[90u].x));
    float _1262 = fma(_1235, cbSceneParam._m0[91u].z, fma(_1234, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1233));
    float _1277 = _536 * 0.5;
    float _1278 = _537 * 0.5;
    float _1279 = _538 * 0.5;
    float _1280 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1283 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1286 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1320;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1293 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_899, _903, _906, _909));
        float _1297 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_901, _904, _907, _910));
        float _1301 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_902, _905, _908, _911));
        float _1308 = dot(vec4(cbModelParam._m0[39u]), vec4(_1277, _1278, _1279, 1.0));
        _1320 = dot(vec3(isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1308) ? 0.0 : (isnan(0.0) ? _1308 : max(0.0, _1308))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1320 = 1.0;
    }
    float _1331;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1322 = dot(vec4(cbModelParam._m0[40u]), vec4(_1277, _1278, _1279, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1322) ? 0.0 : (isnan(0.0) ? _1322 : max(0.0, _1322))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1335 = (_1331 * cbModelParam._m0[1u].x) + (_1320 * (1.0 - cbModelParam._m0[1u].x));
    float _1345 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _370);
    float _1346 = isnan(_1345) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1345 : min(cbModelParam._m0[25u].z, _1345));
    float _1428;
    float _1430;
    float _1432;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1395 = fma(_597, cbModelParam._m0[13u].z, fma(_593, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _589)) + cbModelParam._m0[13u].w;
        float _1399 = fma(_597, cbModelParam._m0[14u].z, fma(_593, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _589)) + cbModelParam._m0[14u].w;
        float _1403 = fma(_597, cbModelParam._m0[15u].z, fma(_593, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _589)) + cbModelParam._m0[15u].w;
        float _1406 = fma(_538, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _536));
        float _1409 = fma(_538, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _536));
        float _1412 = fma(_538, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _536));
        float _1440;
        if (_1406 > 0.0)
        {
            _1440 = abs((1.0 - _1395) / _1406);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1395 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1440 = frontier_phi_18_16_ladder;
        }
        float _1667;
        if (_1409 > 0.0)
        {
            _1667 = abs((1.0 - _1399) / _1409);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1399 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1667 = frontier_phi_27_23_ladder;
        }
        float _1913;
        if (_1412 > 0.0)
        {
            _1913 = abs((1.0 - _1403) / _1412);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1403 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1913 = frontier_phi_39_34_ladder;
        }
        float _1915 = isnan(_1667) ? _1440 : (isnan(_1440) ? _1667 : min(_1440, _1667));
        float _1916 = isnan(_1913) ? _1915 : (isnan(_1915) ? _1913 : min(_1915, _1913));
        float _1920 = (_1916 * _1406) + _1395;
        float _1921 = (_1916 * _1409) + _1399;
        float _1922 = (_1916 * _1412) + _1403;
        float _1923 = _1916 * 9.9999997473787516355514526367188e-05;
        float _1925 = (-1.0) - _1923;
        float _1927 = _1923 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1922 > _1927) || ((_1922 < _1925) || ((_1921 > _1927) || ((_1921 < _1925) || ((_1920 < _1925) || (_1920 > _1927))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2046 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1922, cbModelParam._m0[9u].z, fma(_1921, cbModelParam._m0[9u].y, _1920 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1922, cbModelParam._m0[10u].z, fma(_1921, cbModelParam._m0[10u].y, _1920 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1922, cbModelParam._m0[11u].z, fma(_1921, cbModelParam._m0[11u].y, _1920 * cbModelParam._m0[11u].x))), _1346);
            frontier_phi_17_39_ladder = _2046.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2046.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2046.x * cbModelParam._m0[1u].y;
        }
        _1428 = frontier_phi_17_39_ladder_2;
        _1430 = frontier_phi_17_39_ladder_1;
        _1432 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1416 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_536, _537, _538), _1346);
        _1428 = _1416.x * cbModelParam._m0[1u].y;
        _1430 = _1416.y * cbModelParam._m0[1u].y;
        _1432 = _1416.z * cbModelParam._m0[1u].y;
    }
    float _1436 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _370);
    float _1437 = isnan(_1436) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1436 : min(cbModelParam._m0[25u].w, _1436));
    float _1530;
    float _1532;
    float _1534;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1494 = fma(_597, cbModelParam._m0[21u].z, fma(_593, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _589)) + cbModelParam._m0[21u].w;
        float _1498 = fma(_597, cbModelParam._m0[22u].z, fma(_593, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _589)) + cbModelParam._m0[22u].w;
        float _1502 = fma(_597, cbModelParam._m0[23u].z, fma(_593, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _589)) + cbModelParam._m0[23u].w;
        float _1505 = fma(_538, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _536));
        float _1508 = fma(_538, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _536));
        float _1511 = fma(_538, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _536));
        float _1672;
        if (_1505 > 0.0)
        {
            _1672 = abs((1.0 - _1494) / _1505);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1494 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1672 = frontier_phi_29_25_ladder;
        }
        float _1940;
        if (_1508 > 0.0)
        {
            _1940 = abs((1.0 - _1498) / _1508);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1498 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1940 = frontier_phi_41_36_ladder;
        }
        float _2145;
        if (_1511 > 0.0)
        {
            _2145 = abs((1.0 - _1502) / _1511);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1502 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2145 = frontier_phi_50_47_ladder;
        }
        float _2147 = isnan(_1940) ? _1672 : (isnan(_1672) ? _1940 : min(_1672, _1940));
        float _2148 = isnan(_2145) ? _2147 : (isnan(_2147) ? _2145 : min(_2147, _2145));
        float _2152 = (_2148 * _1505) + _1494;
        float _2153 = (_2148 * _1508) + _1498;
        float _2154 = (_2148 * _1511) + _1502;
        float _2155 = _2148 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2155;
        float _2158 = _2155 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2154 > _2158) || ((_2154 < _2156) || ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 < _2156) || (_2152 > _2158))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2154, cbModelParam._m0[17u].z, fma(_2153, cbModelParam._m0[17u].y, _2152 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2154, cbModelParam._m0[18u].z, fma(_2153, cbModelParam._m0[18u].y, _2152 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2154, cbModelParam._m0[19u].z, fma(_2153, cbModelParam._m0[19u].y, _2152 * cbModelParam._m0[19u].x))), _1437);
            frontier_phi_26_50_ladder = _2352.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2352.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2352.x * cbModelParam._m0[1u].z;
        }
        _1530 = frontier_phi_26_50_ladder_2;
        _1532 = frontier_phi_26_50_ladder_1;
        _1534 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_536, _537, _538), _1437);
        _1530 = _1514.x * cbModelParam._m0[1u].z;
        _1532 = _1514.y * cbModelParam._m0[1u].z;
        _1534 = _1514.z * cbModelParam._m0[1u].z;
    }
    float _1546 = ((((1.0 - _557) * ((_544 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_557 * _544)) * _528;
    float _1547 = _1546 * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1548 = _1546 * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1549 = _1546 * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1552 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1548, cbSceneParam._m0[89u].y, _1547 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1548, cbSceneParam._m0[90u].y, _1547 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1548, cbSceneParam._m0[91u].y, _1547 * cbSceneParam._m0[91u].x));
    vec4 _1566 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_461, _462));
    float _1568 = _1566.w;
    float _1580 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1568);
    float _1581 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1568);
    float _1582 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1568);
    uvec4 _1586 = floatBitsToUint(cbInstanceData._m0[_502 + 5u]);
    uint _1588 = _1586.x * 14u;
    uint _1589 = _1588 + 13u;
    float _1596 = _528 + (-1.0);
    float _1601 = (cbLight._m0[_1589].x * _1596) + 1.0;
    float _1602 = (cbLight._m0[_1589].y * _1596) + 1.0;
    float _1603 = (cbLight._m0[_1589].z * _1596) + 1.0;
    float _1604 = (cbLight._m0[_1589].w * _1596) + 1.0;
    uint _1605 = _1588 + 5u;
    float _1611 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
    uint _1615 = _1588 + 4u;
    float _1625 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
    uint _1629 = _1588 | 1u;
    float _1640 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_367, _368, _369));
    float _1643 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_367, _368, _369));
    float _3773 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _3784 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1648 = (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * 0.3183098733425140380859375;
    float _1650 = (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * 0.3183098733425140380859375;
    float _1657 = ((cbLight._m0[_1605].x * _1611) * _1650) + (((cbLight._m0[_1615].x * _1580) * _1625) * _1648);
    float _1658 = ((_1611 * cbLight._m0[_1605].y) * _1650) + (((cbLight._m0[_1615].y * _1581) * _1625) * _1648);
    float _1659 = ((_1611 * cbLight._m0[_1605].z) * _1650) + (((cbLight._m0[_1615].z * _1582) * _1625) * _1648);
    uvec4 _1664 = floatBitsToUint(cbLight._m0[_1588 + 12u]);
    bool _1666 = _1664.x == 0u;
    float _1677;
    float _1679;
    float _1681;
    if (_1666)
    {
        _1677 = _1657;
        _1679 = _1658;
        _1681 = _1659;
    }
    else
    {
        uint _1685 = _1588 + 6u;
        float _1701 = (dot(vec3(cbLight._m0[_1588 + 2u].xyz), vec3(_367, _368, _369)) * 0.5) + 0.5;
        float _1702 = _1701 * _1701;
        float _3795 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1704 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _1677 = (((cbLight._m0[_1685].x * 0.3183098733425140380859375) * _1703) * _1704) + _1657;
        _1679 = (((cbLight._m0[_1685].y * 0.3183098733425140380859375) * _1703) * _1704) + _1658;
        _1681 = (((cbLight._m0[_1685].z * 0.3183098733425140380859375) * _1703) * _1704) + _1659;
    }
    bool _1684 = _1664.y == 0u;
    float _1722;
    float _1724;
    float _1726;
    if (_1684)
    {
        _1722 = _1677;
        _1724 = _1679;
        _1726 = _1681;
    }
    else
    {
        uint _1884 = _1588 + 7u;
        float _1900 = (dot(vec3(cbLight._m0[_1588 + 3u].xyz), vec3(_367, _368, _369)) * 0.5) + 0.5;
        float _1901 = _1900 * _1900;
        float _3811 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1902 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1903 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
        _1722 = (((cbLight._m0[_1884].x * 0.3183098733425140380859375) * _1902) * _1903) + _1677;
        _1724 = (((cbLight._m0[_1884].y * 0.3183098733425140380859375) * _1902) * _1903) + _1679;
        _1726 = (((cbLight._m0[_1884].z * 0.3183098733425140380859375) * _1902) * _1903) + _1681;
    }
    uint _1729 = _1588 + 8u;
    float _1742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1588].w)) * _370) * 0.949999988079071044921875);
    float _1743 = _1742 * _1742;
    float _1744 = cbLight._m0[_1588].x + _449;
    float _1745 = cbLight._m0[_1588].y + _450;
    float _1746 = cbLight._m0[_1588].z + _451;
    float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
    float _1751 = _1750 * _1744;
    float _1752 = _1750 * _1745;
    float _1753 = _1750 * _1746;
    float _1754 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_1588].xyz));
    float _3827 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _1758 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _1759 = dot(vec3(_367, _368, _369), vec3(_1751, _1752, _1753));
    float _3849 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1762 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _1763 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_1751, _1752, _1753));
    float _3860 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1767 = _1743 * _1743;
    float _1771 = ((_1762 * _1762) * (_1767 + (-1.0))) + 1.0;
    float _1782 = (exp2(log2(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1783 = 1.0 - _1743;
    float _1794 = (0.5 / (((_1758 * ((_1757 * _1783) + _1743)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1783) + _1743) * _1757))) * _1757;
    float _3871 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1796 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1767 / ((_1771 * _1771) * 3.141590118408203125));
    uint _1810 = _1588 + 9u;
    float _1821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1629].w)) * _370) * 0.949999988079071044921875);
    float _1822 = _1821 * _1821;
    float _1823 = cbLight._m0[_1629].x + _449;
    float _1824 = cbLight._m0[_1629].y + _450;
    float _1825 = cbLight._m0[_1629].z + _451;
    float _1829 = inversesqrt(dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825)));
    float _1830 = _1829 * _1823;
    float _1831 = _1829 * _1824;
    float _1832 = _1829 * _1825;
    float _1833 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_1629].xyz));
    float _3882 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _1837 = dot(vec3(_367, _368, _369), vec3(_1830, _1831, _1832));
    float _3893 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _1841 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_1830, _1831, _1832));
    float _3904 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1845 = _1822 * _1822;
    float _1849 = ((_1840 * _1840) * (_1845 + (-1.0))) + 1.0;
    float _1858 = (exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1859 = 1.0 - _1822;
    float _1869 = (0.5 / (((_1758 * ((_1836 * _1859) + _1822)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1859) + _1822) * _1836))) * _1836;
    float _3915 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1871 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1845 / ((_1849 * _1849) * 3.141590118408203125));
    float _1881 = (((_1858 * cbLight._m0[_1810].x) * _1871) * _1611) + ((((cbLight._m0[_1729].x * _1580) * _1782) * _1796) * _1625);
    float _1882 = (((_1858 * cbLight._m0[_1810].y) * _1871) * _1611) + ((((cbLight._m0[_1729].y * _1581) * _1782) * _1796) * _1625);
    float _1883 = (((_1858 * cbLight._m0[_1810].z) * _1871) * _1611) + ((((cbLight._m0[_1729].z * _1582) * _1782) * _1796) * _1625);
    float _1945;
    float _1947;
    float _1949;
    if (_1666)
    {
        _1945 = _1881;
        _1947 = _1882;
        _1949 = _1883;
    }
    else
    {
        uint _1951 = _1588 + 2u;
        uint _1955 = _1588 + 10u;
        float _1969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1951].w)) * _370) * 0.949999988079071044921875);
        float _1970 = _1969 * _1969;
        float _1971 = cbLight._m0[_1951].x + _449;
        float _1972 = cbLight._m0[_1951].y + _450;
        float _1973 = cbLight._m0[_1951].z + _451;
        float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
        float _1978 = _1977 * _1971;
        float _1979 = _1977 * _1972;
        float _1980 = _1977 * _1973;
        float _1981 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_1951].xyz));
        float _3926 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1984 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1985 = dot(vec3(_367, _368, _369), vec3(_1978, _1979, _1980));
        float _3937 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1988 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1989 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_1978, _1979, _1980));
        float _3948 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1993 = _1970 * _1970;
        float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
        float _2006 = (exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2007 = 1.0 - _1970;
        float _2017 = (0.5 / (((_1758 * ((_1984 * _2007) + _1970)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2007) + _1970) * _1984))) * _1984;
        float _3959 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2019 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
        float _2020 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _1945 = (((_2006 * cbLight._m0[_1955].x) * _2019) * _2020) + _1881;
        _1947 = (((_2006 * cbLight._m0[_1955].y) * _2019) * _2020) + _1882;
        _1949 = (((_2006 * cbLight._m0[_1955].z) * _2019) * _2020) + _1883;
    }
    float _2055;
    float _2057;
    float _2059;
    if (_1684)
    {
        _2055 = _1945;
        _2057 = _1947;
        _2059 = _1949;
    }
    else
    {
        uint _2066 = _1588 + 3u;
        uint _2070 = _1588 + 11u;
        float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _370) * 0.949999988079071044921875);
        float _2085 = _2084 * _2084;
        float _2086 = cbLight._m0[_2066].x + _449;
        float _2087 = cbLight._m0[_2066].y + _450;
        float _2088 = cbLight._m0[_2066].z + _451;
        float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
        float _2093 = _2092 * _2086;
        float _2094 = _2092 * _2087;
        float _2095 = _2092 * _2088;
        float _2096 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_2066].xyz));
        float _3975 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _2100 = dot(vec3(_367, _368, _369), vec3(_2093, _2094, _2095));
        float _3986 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _2104 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2093, _2094, _2095));
        float _3997 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2108 = _2085 * _2085;
        float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
        float _2121 = (exp2(log2(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2122 = 1.0 - _2085;
        float _2132 = (0.5 / (((_1758 * ((_2099 * _2122) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2122) + _2085) * _2099))) * _2099;
        float _4008 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2134 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
        float _2135 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
        _2055 = (((_2121 * cbLight._m0[_2070].x) * _2134) * _2135) + _1945;
        _2057 = (((_2121 * cbLight._m0[_2070].y) * _2134) * _2135) + _1947;
        _2059 = (((_2121 * cbLight._m0[_2070].z) * _2134) * _2135) + _1949;
    }
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    if (_1586.y == 0u)
    {
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2210;
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2210;
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2210;
        uvec4 _2225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2226 = _2225.x;
        uint _2237 = uint((float(_2225.y) * floor(float(uint(cbSceneParam._m0[85u].y * _462) / _2226))) + floor(float(uint(cbSceneParam._m0[85u].x * _461) / _2226)));
        float _2247 = (log2(_2213 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2248 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        uint _2251 = uint(isnan(14.0) ? _2248 : (isnan(_2248) ? 14.0 : min(_2248, 14.0)));
        uvec4 _2256 = texelFetch(g_lightClusterGridBuffer, int(((_2251 << 2u) + (_2237 << 6u)) >> 2u));
        uint _2257 = _2256.x;
        uint _2258 = _2225.z;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        if (((((1u << ((_2258 >> 4u) & 15u)) + 4294967295u) & _2257) == 0u) || ((_2258 & 240u) == 0u))
        {
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
        }
        else
        {
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            uint _2515 = 0u;
            uint _2524;
            bool _2525;
            for (;;)
            {
                _2524 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2515 << 2u)) >> 2u)).x;
                _2525 = _2524 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2525)
                {
                    frontier_phi_67_pred = _2511;
                    frontier_phi_67_pred_1 = _2514;
                    frontier_phi_67_pred_2 = _2513;
                    frontier_phi_67_pred_3 = _2512;
                    frontier_phi_67_pred_4 = _2510;
                    frontier_phi_67_pred_5 = _2509;
                }
                else
                {
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    uint _2660;
                    _2654 = _2509;
                    _2655 = _2510;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2514;
                    _2660 = _2524;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    for (;;)
                    {
                        uint _2664 = uint(findLSB(_2660)) + (_2515 << 5u);
                        uint _2661 = (_2660 + 4294967295u) & _2660;
                        uint _2666 = _2664 * 48u;
                        vec4 _2680 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 3u)).x));
                        uint _2686 = (_2664 * 48u) + 4u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2686)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 3u)).x));
                        uint _2705 = (_2664 * 48u) + 8u;
                        vec3 _2716 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x));
                        float _2720 = _2680.x - _2211;
                        float _2721 = _2680.y - _2212;
                        float _2722 = _2680.z - _2213;
                        float _2723 = dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722));
                        float _2726 = inversesqrt(_2723);
                        float _2727 = _2726 * _2720;
                        float _2728 = _2726 * _2721;
                        float _2729 = _2726 * _2722;
                        float _2730 = dot(vec3(_483, _486, _489), vec3(_2727, _2728, _2729));
                        float _2735 = 1.0 - (_2723 * _2680.w);
                        float _4034 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2736 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                        float _2737 = sqrt(_2723) * _2699.w;
                        float _2740 = 1.39999997615814208984375 / (_2737 + 1.39999997615814208984375);
                        float _2741 = _2740 * _2740;
                        float _2744 = ((1.0 - _2741) * _2730) + _2741;
                        float _2747 = _2737 * _2737;
                        float _2751 = ((isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))) * _2736) / ((_2747 * 0.699999988079071044921875) + 1.0);
                        float _2755 = (-0.0) - _2211;
                        float _2756 = (-0.0) - _2212;
                        float _2757 = (-0.0) - _2213;
                        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
                        float _2762 = _2761 * _2755;
                        float _2763 = _2761 * _2756;
                        float _2764 = _2761 * _2757;
                        float _2772 = exp2(log2(1.0 / ((_2747 * 3.5) + 5.0)) * 0.25);
                        float _2773 = 1.0 - _544;
                        float _2780 = sqrt(1.0 - ((1.0 - (_2773 * _2773)) * (1.0 - (_2772 * _2772))));
                        float _2781 = _2780 * _2780;
                        float _2782 = _2781 * _2781;
                        float _2783 = _2762 + _2727;
                        float _2784 = _2763 + _2728;
                        float _2785 = _2764 + _2729;
                        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
                        float _2793 = dot(vec3(_483, _486, _489), vec3(_2762, _2763, _2764));
                        float _4050 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2796 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                        float _2797 = dot(vec3(_483, _486, _489), vec3(_2789 * _2783, _2789 * _2784, _2789 * _2785));
                        float _4061 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2800 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                        float _2804 = ((_2800 * _2800) * (_2782 + (-1.0))) + 1.0;
                        float _2805 = _2740 * _2781;
                        float _2806 = _2805 * _2805;
                        float _2809 = ((1.0 - _2806) * _2730) + _2806;
                        float _4072 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2810 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                        float _2811 = 1.0 - _2781;
                        float _2821 = (0.5 / (((_2810 * ((_2796 * _2811) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2810 * _2811) + _2781) * _2796))) * _2810;
                        float _4083 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2832 = (((_2782 * 3.1415927410125732421875) * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) / ((_2804 * _2804) * ((_2747 * 2.1991131305694580078125) + 3.141590118408203125))) * _2736;
                        _2584 = (_2751 * _2699.x) + _2657;
                        _2585 = (_2751 * _2699.y) + _2658;
                        _2586 = (_2751 * _2699.z) + _2659;
                        _2581 = (_2832 * _2716.x) + _2654;
                        _2582 = (_2832 * _2716.y) + _2655;
                        _2583 = (_2832 * _2716.z) + _2656;
                        if (_2661 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2654 = _2581;
                            _2655 = _2582;
                            _2656 = _2583;
                            _2657 = _2584;
                            _2658 = _2585;
                            _2659 = _2586;
                            _2660 = _2661;
                        }
                    }
                    frontier_phi_67_pred = _2583;
                    frontier_phi_67_pred_1 = _2586;
                    frontier_phi_67_pred_2 = _2585;
                    frontier_phi_67_pred_3 = _2584;
                    frontier_phi_67_pred_4 = _2582;
                    frontier_phi_67_pred_5 = _2581;
                }
                _2362 = frontier_phi_67_pred;
                _2368 = frontier_phi_67_pred_1;
                _2366 = frontier_phi_67_pred_2;
                _2364 = frontier_phi_67_pred_3;
                _2360 = frontier_phi_67_pred_4;
                _2358 = frontier_phi_67_pred_5;
                uint _2516 = _2515 + 1u;
                if (_2516 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2509 = _2358;
                    _2510 = _2360;
                    _2511 = _2362;
                    _2512 = _2364;
                    _2513 = _2366;
                    _2514 = _2368;
                    _2515 = _2516;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
        }
        uvec4 _2371 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2372 = _2371.z;
        uint _2374 = (_2372 >> 8u) & 15u;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        if (((4294967295u << _2374) & _2257) == 0u)
        {
            _2477 = _2357;
            _2479 = _2359;
            _2481 = _2361;
            _2483 = _2363;
            _2485 = _2365;
            _2487 = _2367;
        }
        else
        {
            float _2502 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
            float _2503 = _2502 * _2211;
            float _2504 = _2502 * _2212;
            float _2505 = _2502 * _2213;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2374 < ((_2372 >> 12u) & 15u))
            {
                float _2478;
                float _2480;
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2637 = _2357;
                float _2638 = _2359;
                float _2639 = _2361;
                float _2640 = _2363;
                float _2641 = _2365;
                float _2642 = _2367;
                uint _2643 = _2374;
                uint _2652;
                bool _2653;
                for (;;)
                {
                    _2652 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2643 << 2u)) >> 2u)).x;
                    _2653 = _2652 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2653)
                    {
                        frontier_phi_78_pred = _2642;
                        frontier_phi_78_pred_1 = _2641;
                        frontier_phi_78_pred_2 = _2640;
                        frontier_phi_78_pred_3 = _2639;
                        frontier_phi_78_pred_4 = _2638;
                        frontier_phi_78_pred_5 = _2637;
                    }
                    else
                    {
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _2859 = _2637;
                        float _2860 = _2638;
                        float _2861 = _2639;
                        float _2862 = _2640;
                        float _2863 = _2641;
                        float _2864 = _2642;
                        uint _2865 = _2652;
                        uint _2866;
                        vec4 _2891;
                        float _2892;
                        vec4 _2907;
                        vec3 _2919;
                        vec4 _2935;
                        vec4 _2951;
                        float _2998;
                        bool _2999;
                        for (;;)
                        {
                            uint _2876 = ((_2643 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2865));
                            _2866 = (_2865 + 4294967295u) & _2865;
                            uint _2878 = _2876 * 40u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            _2892 = _2891.w;
                            uint _2894 = (_2876 * 40u) + 4u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2909 = (_2876 * 40u) + 8u;
                            _2919 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x));
                            uint _2922 = (_2876 * 40u) + 16u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            uint _2938 = (_2876 * 40u) + 20u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2954 = (_2876 * 40u) + 24u;
                            vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2973 = (_2876 * 40u) + 28u;
                            vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            _2998 = fma(_2213, _2986.z, fma(_2212, _2986.y, _2986.x * _2211)) + _2986.w;
                            _2999 = !((fma(_2213, _2967.z, fma(_2212, _2967.y, _2967.x * _2211)) + _2967.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_2999)
                            {
                                float _3026 = _2891.x - _2211;
                                float _3027 = _2891.y - _2212;
                                float _3028 = _2891.z - _2213;
                                float _3029 = dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028));
                                float _3032 = inversesqrt(_3029);
                                float _3033 = _3032 * _3026;
                                float _3034 = _3032 * _3027;
                                float _3035 = _3032 * _3028;
                                float _3039 = 1.0 - (_3029 / (_2892 * _2892));
                                float _4094 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3040 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3044 = sqrt(_3029) * _2907.w;
                                float _3046 = 1.39999997615814208984375 / (_3044 + 1.39999997615814208984375);
                                float _3047 = _3046 * _3046;
                                float _3050 = ((1.0 - _3047) * dot(vec3(_3033, _3034, _3035), vec3(_483, _486, _489))) + _3047;
                                float _3053 = _3044 * _3044;
                                float _3057 = (fma(_2213, _2935.z, fma(_2212, _2935.y, _2935.x * _2211)) + _2935.w) / _2998;
                                float _3058 = (fma(_2213, _2951.z, fma(_2212, _2951.y, _2951.x * _2211)) + _2951.w) / _2998;
                                float _3062 = 1.0 - dot(vec2(_3057, _3058), vec2(_3057, _3058));
                                float _4110 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                                float _3063 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3064 = _3063 * (((isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0))) * _3040) / ((_3053 * 0.699999988079071044921875) + 1.0));
                                float _3076 = exp2(log2(1.0 / ((_3053 * 3.5) + 5.0)) * 0.25);
                                float _3077 = 1.0 - _544;
                                float _3084 = sqrt(1.0 - ((1.0 - (_3077 * _3077)) * (1.0 - (_3076 * _3076))));
                                float _3085 = _3084 * _3084;
                                float _3086 = _3085 * _3085;
                                float _3087 = _3033 - _2503;
                                float _3088 = _3034 - _2504;
                                float _3089 = _3035 - _2505;
                                float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
                                float _3097 = dot(vec3(_483, _486, _489), vec3((-0.0) - _2503, (-0.0) - _2504, (-0.0) - _2505));
                                float _4121 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3100 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3101 = dot(vec3(_483, _486, _489), vec3(_3093 * _3087, _3093 * _3088, _3093 * _3089));
                                float _4132 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3104 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3108 = ((_3104 * _3104) * (_3086 + (-1.0))) + 1.0;
                                float _3109 = _3046 * _3085;
                                float _3110 = _3109 * _3109;
                                float _3116 = ((1.0 - _3110) * dot(vec3(_483, _486, _489), vec3(_3033, _3034, _3035))) + _3110;
                                float _4143 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3117 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                                float _3118 = 1.0 - _3085;
                                float _3128 = (0.5 / (((_3117 * ((_3100 * _3118) + _3085)) + 9.9999999392252902907785028219223e-09) + (((_3117 * _3118) + _3085) * _3100))) * _3117;
                                float _4154 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3138 = (_3063 * _3040) * (((_3086 * 3.1415927410125732421875) * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) / ((_3108 * _3108) * ((_3053 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3064 * _2907.z;
                                frontier_phi_84_pred_1 = _3064 * _2907.y;
                                frontier_phi_84_pred_2 = _3064 * _2907.x;
                                frontier_phi_84_pred_3 = _3138 * _2919.z;
                                frontier_phi_84_pred_4 = _3138 * _2919.y;
                                frontier_phi_84_pred_5 = _3138 * _2919.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3147 = frontier_phi_84_pred;
                            _3146 = frontier_phi_84_pred_1;
                            _3145 = frontier_phi_84_pred_2;
                            _3144 = frontier_phi_84_pred_3;
                            _3143 = frontier_phi_84_pred_4;
                            _3142 = frontier_phi_84_pred_5;
                            _2849 = _3145 + _2862;
                            _2850 = _3146 + _2863;
                            _2851 = _3147 + _2864;
                            _2846 = _3142 + _2859;
                            _2847 = _3143 + _2860;
                            _2848 = _3144 + _2861;
                            if (_2866 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2866;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2851;
                        frontier_phi_78_pred_1 = _2850;
                        frontier_phi_78_pred_2 = _2849;
                        frontier_phi_78_pred_3 = _2848;
                        frontier_phi_78_pred_4 = _2847;
                        frontier_phi_78_pred_5 = _2846;
                    }
                    _2488 = frontier_phi_78_pred;
                    _2486 = frontier_phi_78_pred_1;
                    _2484 = frontier_phi_78_pred_2;
                    _2482 = frontier_phi_78_pred_3;
                    _2480 = frontier_phi_78_pred_4;
                    _2478 = frontier_phi_78_pred_5;
                    uint _2644 = _2643 + 1u;
                    if (_2644 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2637 = _2478;
                        _2638 = _2480;
                        _2639 = _2482;
                        _2640 = _2484;
                        _2641 = _2486;
                        _2642 = _2488;
                        _2643 = _2644;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2484;
                frontier_phi_59_60_ladder_1 = _2488;
                frontier_phi_59_60_ladder_2 = _2486;
                frontier_phi_59_60_ladder_3 = _2482;
                frontier_phi_59_60_ladder_4 = _2480;
                frontier_phi_59_60_ladder_5 = _2478;
            }
            else
            {
                frontier_phi_59_60_ladder = _2363;
                frontier_phi_59_60_ladder_1 = _2367;
                frontier_phi_59_60_ladder_2 = _2365;
                frontier_phi_59_60_ladder_3 = _2361;
                frontier_phi_59_60_ladder_4 = _2359;
                frontier_phi_59_60_ladder_5 = _2357;
            }
            _2477 = frontier_phi_59_60_ladder_5;
            _2479 = frontier_phi_59_60_ladder_4;
            _2481 = frontier_phi_59_60_ladder_3;
            _2483 = frontier_phi_59_60_ladder;
            _2485 = frontier_phi_59_60_ladder_2;
            _2487 = frontier_phi_59_60_ladder_1;
        }
        float _2492 = isnan(1.0) ? _528 : (isnan(_528) ? 1.0 : min(_528, 1.0));
        _2269 = (_2492 * _2483) + _1722;
        _2271 = (_2492 * _2485) + _1724;
        _2273 = (_2492 * _2487) + _1726;
        _2275 = ((_2477 * 0.039999999105930328369140625) * _2492) + _2055;
        _2277 = ((_2479 * 0.039999999105930328369140625) * _2492) + _2057;
        _2279 = ((_2481 * 0.039999999105930328369140625) * _2492) + _2059;
    }
    else
    {
        _2269 = _1722;
        _2271 = _1724;
        _2273 = _1726;
        _2275 = _2055;
        _2277 = _2057;
        _2279 = _2059;
    }
    float _4170 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4181 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _4192 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _2296 = ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2269 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _528))) + ((_2275 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1335)) * cbPerFrame._m0[3u].x);
    float _2297 = ((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2271 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _528))) + ((_2277 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1335)) * cbPerFrame._m0[3u].x);
    float _2298 = ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2273 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _528))) + ((_2279 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1335)) * cbPerFrame._m0[3u].x);
    uint _2299 = _502 + 6u;
    float _2307 = _461 / cbSceneParam._m0[86u].x;
    float _2308 = _462 / cbSceneParam._m0[86u].y;
    vec4 _2322 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, (log2((isnan(cbSceneParam._m0[77u].w) ? _393 : (isnan(_393) ? cbSceneParam._m0[77u].w : min(_393, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2324 = _2322.x;
    float _2325 = _2322.y;
    float _2326 = _2322.z;
    float _2327 = _2322.w;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    if (_393 > cbSceneParam._m0[78u].w)
    {
        float _2382 = isnan(_393) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _393 : min(cbSceneParam._m0[80u].w, _393));
        float _2383 = _2382 / _393;
        float _2394 = _2383 * _442;
        float _2395 = _443 * _2383;
        float _2396 = (-0.0) - _2395;
        float _2397 = _2383 * _444;
        float _2399 = (cbSceneParam._m0[77u].w * _2396) / _2382;
        float _2400 = _2399 + cbSceneParam._m0[79u].w;
        float _2401 = cbSceneParam._m0[79u].w - _2395;
        float _2407 = sqrt(((_2394 * _2394) + (_2395 * _2395)) + (_2397 * _2397));
        float _2410 = (1.0 - (cbSceneParam._m0[77u].w / _2382)) * _2407;
        float _2415 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2417 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2594;
        if (abs((_2396 - _2399) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2594 = ((((_2400 > 0.0) ? exp2(_2415 * _2400) : (2.0 - exp2(_2417 * _2400))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2410;
        }
        else
        {
            float _2538 = 1.0 / cbSceneParam._m0[80u].x;
            float _2539 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : max(_2400, _2401));
            float _2540 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : min(_2400, _2401));
            float _2549 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : min(_2539, 0.0));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            _2594 = ((abs(_2407 / _2396) * cbSceneParam._m0[80u].y) * ((((_2549 - _2550) * 2.0) - ((exp2(_2415 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0)))) - exp2(_2415 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0))))) * _2538)) - ((exp2(_2417 * _2549) - exp2(_2417 * _2550)) * _2538))) + (_2410 * cbSceneParam._m0[80u].z);
        }
        vec4 _2596 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, 1.0), 0.0);
        float _2605 = exp2((_2594 * (-1.44269502162933349609375)) * (1.0 - _2596.w));
        float _2606 = log2(_2605);
        float _2622 = log2(_2327);
        _2419 = (exp2(_2622 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].x)) * _2596.x) / cbSceneParam._m0[78u].x)) + _2324;
        _2421 = (exp2(_2622 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].y)) * _2596.y) / cbSceneParam._m0[78u].y)) + _2325;
        _2423 = (exp2(_2622 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].z)) * _2596.z) / cbSceneParam._m0[78u].z)) + _2326;
        _2425 = _2605 * _2327;
    }
    else
    {
        _2419 = _2324;
        _2421 = _2325;
        _2423 = _2326;
        _2425 = _2327;
    }
    bool _2632;
    vec4 _2435;
    vec4 _2457;
    float _2459;
    float _2463;
    float _2464;
    float _2465;
    float _2466;
    bool _2476;
    for (;;)
    {
        _2435 = cbMatDynParam._m0[0u];
        float _2437 = roundEven(_2435.y);
        bool _2438 = _2437 == 3.0;
        float _2439 = log2(_2425);
        float _2446 = exp2(_2439 * cbSceneParam._m0[78u].x) * _2296;
        float _2447 = exp2(_2439 * cbSceneParam._m0[78u].y) * _2297;
        float _2448 = exp2(_2439 * cbSceneParam._m0[78u].z) * _2298;
        float _2455 = _455 + (-0.5);
        _2457 = cbMtdParam._m0[1u];
        _2459 = _2457.y * _2455;
        float _2462 = (_2437 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2463 = _2462 * (_2438 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2419)));
        _2464 = _2462 * (_2438 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2421)));
        _2465 = _2462 * (_2438 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2423)));
        _2466 = _2455 * 0.999000012874603271484375;
        _2476 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2476)
        {
            if ((cbInstanceData._m0[_502 + 7u].x + _2466) < 0.5)
            {
                _2632 = true;
                break;
            }
        }
        uint _2573 = _504 + uint(_2435.w);
        if ((cbInstanceData._m0[_2573].w < 1.0) && ((cbInstanceData._m0[_2573].w + _2466) < 0.5))
        {
            _2632 = true;
            break;
        }
        if ((_2459 + _295) < _2457.x)
        {
            _2632 = true;
            break;
        }
        _2632 = false;
        break;
    }
    float _2837;
    if (_2632)
    {
        discard_state = true;
        _2837 = 0.0;
    }
    else
    {
        _2837 = cbInstanceData._m0[_2299].w;
    }
    SV_Target.x = _2463;
    SV_Target.y = _2464;
    SV_Target.z = _2465;
    SV_Target.w = _2837;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2299].w;
    discard_exit();
}


