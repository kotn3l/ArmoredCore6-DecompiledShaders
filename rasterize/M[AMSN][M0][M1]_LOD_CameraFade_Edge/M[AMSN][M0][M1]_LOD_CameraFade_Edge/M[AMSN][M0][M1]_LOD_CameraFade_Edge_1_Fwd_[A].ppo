#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _898;
float _3263;
float _3264;
float _3265;
float _3266;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _287 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _293 = _287.w;
    float _294 = _287.x * cbMtdParam._m0[9u].x;
    float _295 = _287.y * cbMtdParam._m0[9u].y;
    float _296 = _287.z * cbMtdParam._m0[9u].z;
    vec4 _308 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _312 = _308.z;
    float _316 = (_308.x * 2.0) + (-1.0);
    float _318 = (_308.y * 2.0) + (-1.0);
    float _319 = dot(vec2(_316, _318), vec2(_316, _318));
    float _3275 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _325 = sqrt(1.0 - (isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0))));
    float _337 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].x;
    float _341 = gl_FragCoord.x * 0.125;
    float _343 = gl_FragCoord.y * 0.125;
    float _354 = fma(_325, _211, fma(_318, _203 * TANGENT.x, (_189 * _182) * _316));
    float _357 = fma(_325, _212, fma(_318, _203 * TANGENT.y, (_189 * _183) * _316));
    float _360 = fma(_325, _213, fma(_318, _203 * TANGENT.z, (_189 * _184) * _316));
    float _364 = inversesqrt(dot(vec3(_354, _357, _360), vec3(_354, _357, _360)));
    float _365 = _364 * _354;
    float _366 = _364 * _357;
    float _367 = _364 * _360;
    float _3291 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _368 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _3313 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _3324 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    if (!(((sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269)) - cbMtdParam._m0[10u].x) / (isnan(0.001000000047497451305389404296875) ? _337 : (isnan(_337) ? 0.001000000047497451305389404296875 : max(_337, 0.001000000047497451305389404296875)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_341, _343)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _391 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _440 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _431);
    float _441 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _431);
    float _442 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _431);
    float _446 = inversesqrt(dot(vec3(_440, _441, _442), vec3(_440, _441, _442)));
    float _447 = _440 * _446;
    float _448 = _441 * _446;
    float _449 = _442 * _446;
    vec4 _451 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_341, _343));
    float _453 = _451.w;
    float _459 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _460 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _481 = fma(_367, cbSceneParam._m0[5u].z, fma(_366, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _365));
    float _484 = fma(_367, cbSceneParam._m0[6u].z, fma(_366, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _365));
    float _487 = fma(_367, cbSceneParam._m0[7u].z, fma(_366, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _365));
    uint _500 = uint(roundEven(NORMAL.w)) * 13u;
    uint _502 = _500 + 9u;
    uint _503 = _502 + uint(cbMatDynParam._m0[0u].w);
    float _509 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0)))) * cbInstanceData._m0[_503].x;
    float _510 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * cbInstanceData._m0[_503].y;
    float _511 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * cbInstanceData._m0[_503].z;
    float _3335 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _512 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _3346 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _513 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _3357 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _514 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    vec4 _523 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _459, cbSceneParam._m0[86u].y * _460));
    float _526 = _523.x * TEXCOORD.z;
    float _527 = dot(vec3(_365, _366, _367), vec3(_447, _448, _449));
    float _530 = _527 * 2.0;
    float _534 = (_530 * _365) - _447;
    float _535 = (_530 * _366) - _448;
    float _536 = (_530 * _367) - _449;
    float _540 = abs(dot(vec3(_447, _448, _449), vec3(_365, _366, _367)));
    float _3368 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _542 = sqrt(_368);
    float _555 = exp2((_542 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_542 * 3.0));
    float _587 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _591 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _595 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _897;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _622 = fma(_595, cbModelParam._m0[26u].z, fma(_591, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _587));
        float _626 = fma(_595, cbModelParam._m0[27u].z, fma(_591, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _587));
        float _630 = fma(_595, cbModelParam._m0[28u].z, fma(_591, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _587));
        float _655 = _587 + _365;
        float _656 = _591 + _366;
        float _657 = _595 + _367;
        float _667 = fma(_657, cbModelParam._m0[26u].z, fma(_656, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _655)) - _622;
        float _668 = fma(_657, cbModelParam._m0[27u].z, fma(_656, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _655)) - _626;
        float _669 = fma(_657, cbModelParam._m0[28u].z, fma(_656, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _655)) - _630;
        float _673 = inversesqrt(dot(vec3(_667, _668, _669), vec3(_667, _668, _669)));
        float _686 = ((_673 * _667) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_622 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _687 = ((_673 * _668) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_626 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _688 = ((_673 * _669) / cbModelParam._m0[34u].z) + ((((((_630 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        float _725 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_691.x + (-0.5));
        float _727 = _725 * (_691.y + (-0.5));
        float _728 = _725 * (_691.z + (-0.5));
        float _735 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_698.x + (-0.5));
        float _737 = _735 * (_698.y + (-0.5));
        float _738 = _735 * (_698.z + (-0.5));
        float _745 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_705.x + (-0.5));
        float _747 = _745 * (_705.y + (-0.5));
        float _748 = _745 * (_705.z + (-0.5));
        float _755 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_712.x + (-0.5));
        float _757 = _755 * (_712.y + (-0.5));
        float _758 = _755 * (_712.z + (-0.5));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = _726 * 0.5;
        float _763 = _736 * 0.5;
        float _764 = _746 * 0.5;
        float _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
        float _770 = (_765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_765);
        float _779 = (dot(vec3(_365, _366, _367), vec3(_770 * _762, _770 * _763, _770 * _764)) + 1.0) * 0.5;
        float _3394 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _789 = sqrt(((_763 * _763) + (_762 * _762)) + (_764 * _764)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3405 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _791 = _790 * 2.0;
        float _795 = (1.0 - _790) / (_790 + 1.0);
        float _3416 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _805 = ((((1.0 - _796) * (_791 + 2.0)) * exp2(log2(isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * (_791 + 1.0))) + _796) * _759;
        float _806 = _727 * 0.5;
        float _807 = _737 * 0.5;
        float _808 = _747 * 0.5;
        float _809 = dot(vec3(_806, _807, _808), vec3(_806, _807, _808));
        float _814 = (_809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_809);
        float _822 = (dot(vec3(_365, _366, _367), vec3(_814 * _806, _814 * _807, _814 * _808)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _831 = sqrt(((_807 * _807) + (_806 * _806)) + (_808 * _808)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3449 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_833 + 1.0))) + _838) * _760;
        float _848 = _728 * 0.5;
        float _849 = _738 * 0.5;
        float _850 = _748 * 0.5;
        float _851 = dot(vec3(_848, _849, _850), vec3(_848, _849, _850));
        float _856 = (_851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_851);
        float _864 = (dot(vec3(_365, _366, _367), vec3(_856 * _848, _856 * _849, _856 * _850)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _873 = sqrt(((_849 * _849) + (_848 * _848)) + (_850 * _850)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _875 = _874 * 2.0;
        float _879 = (1.0 - _874) / (_874 + 1.0);
        float _3482 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _889 = ((((1.0 - _880) * (_875 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_875 + 1.0))) + _880) * _761;
        _897 = _728;
        _899 = _727;
        _900 = _726;
        _901 = _738;
        _902 = _737;
        _903 = _736;
        _904 = _748;
        _905 = _747;
        _906 = _746;
        _907 = _761;
        _908 = _760;
        _909 = _759;
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0)));
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0)));
    }
    else
    {
        _897 = _898;
        _899 = _898;
        _900 = _898;
        _901 = _898;
        _902 = _898;
        _903 = _898;
        _904 = _898;
        _905 = _898;
        _906 = _898;
        _907 = _898;
        _908 = _898;
        _909 = _898;
        _910 = 0.0;
        _911 = 0.0;
        _912 = 0.0;
    }
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _938 = fma(_595, cbModelParam._m0[30u].z, fma(_591, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _587));
        float _942 = fma(_595, cbModelParam._m0[31u].z, fma(_591, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _587));
        float _946 = fma(_595, cbModelParam._m0[32u].z, fma(_591, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _587));
        float _969 = _587 + _365;
        float _970 = _591 + _366;
        float _971 = _595 + _367;
        float _981 = fma(_971, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _969)) - _938;
        float _982 = fma(_971, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _969)) - _942;
        float _983 = fma(_971, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _969)) - _946;
        float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
        float _1000 = ((_987 * _981) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_938 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_987 * _982) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_942 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_987 * _983) / cbModelParam._m0[35u].z) + ((((((_946 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        float _1037 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1004.x + (-0.5));
        float _1039 = _1037 * (_1004.y + (-0.5));
        float _1040 = _1037 * (_1004.z + (-0.5));
        float _1047 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1011.x + (-0.5));
        float _1049 = _1047 * (_1011.y + (-0.5));
        float _1050 = _1047 * (_1011.z + (-0.5));
        float _1057 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1018.x + (-0.5));
        float _1059 = _1057 * (_1018.y + (-0.5));
        float _1060 = _1057 * (_1018.z + (-0.5));
        float _1067 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1025.x + (-0.5));
        float _1069 = _1067 * (_1025.y + (-0.5));
        float _1070 = _1067 * (_1025.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_365, _366, _367), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3545 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_1101 + 1.0))) + _1106) * _1071;
        float _1116 = _1039 * 0.5;
        float _1117 = _1049 * 0.5;
        float _1118 = _1059 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_365, _366, _367), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3578 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1143 + 1.0))) + _1148) * _1072;
        float _1158 = _1040 * 0.5;
        float _1159 = _1050 * 0.5;
        float _1160 = _1060 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_365, _366, _367), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3611 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1185 + 1.0))) + _1190) * _1073;
        _1207 = _1040;
        _1208 = _1039;
        _1209 = _1038;
        _1210 = _1050;
        _1211 = _1049;
        _1212 = _1048;
        _1213 = _1060;
        _1214 = _1059;
        _1215 = _1058;
        _1216 = _1073;
        _1217 = _1072;
        _1218 = _1071;
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _898;
        _1208 = _898;
        _1209 = _898;
        _1210 = _898;
        _1211 = _898;
        _1212 = _898;
        _1213 = _898;
        _1214 = _898;
        _1215 = _898;
        _1216 = _898;
        _1217 = _898;
        _1218 = _898;
        _1219 = 0.0;
        _1220 = 0.0;
        _1221 = 0.0;
    }
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _910)) + _910;
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _911)) + _911;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _912)) + _912;
    float _1254 = fma(_1233, cbSceneParam._m0[89u].z, fma(_1232, cbSceneParam._m0[89u].y, _1231 * cbSceneParam._m0[89u].x));
    float _1257 = fma(_1233, cbSceneParam._m0[90u].z, fma(_1232, cbSceneParam._m0[90u].y, _1231 * cbSceneParam._m0[90u].x));
    float _1260 = fma(_1233, cbSceneParam._m0[91u].z, fma(_1232, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1231));
    float _1275 = _534 * 0.5;
    float _1276 = _535 * 0.5;
    float _1277 = _536 * 0.5;
    float _1278 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1281 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1284 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1318;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1291 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_897, _901, _904, _907));
        float _1295 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_899, _902, _905, _908));
        float _1299 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_900, _903, _906, _909));
        float _1306 = dot(vec4(cbModelParam._m0[39u]), vec4(_1275, _1276, _1277, 1.0));
        _1318 = dot(vec3(isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1318 = 1.0;
    }
    float _1329;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1320 = dot(vec4(cbModelParam._m0[40u]), vec4(_1275, _1276, _1277, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1320) ? 0.0 : (isnan(0.0) ? _1320 : max(0.0, _1320))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1333 = (_1329 * cbModelParam._m0[1u].x) + (_1318 * (1.0 - cbModelParam._m0[1u].x));
    float _1343 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _368);
    float _1344 = isnan(_1343) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1343 : min(cbModelParam._m0[25u].z, _1343));
    float _1426;
    float _1428;
    float _1430;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1393 = fma(_595, cbModelParam._m0[13u].z, fma(_591, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _587)) + cbModelParam._m0[13u].w;
        float _1397 = fma(_595, cbModelParam._m0[14u].z, fma(_591, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _587)) + cbModelParam._m0[14u].w;
        float _1401 = fma(_595, cbModelParam._m0[15u].z, fma(_591, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _587)) + cbModelParam._m0[15u].w;
        float _1404 = fma(_536, cbModelParam._m0[13u].z, fma(_535, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _534));
        float _1407 = fma(_536, cbModelParam._m0[14u].z, fma(_535, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _534));
        float _1410 = fma(_536, cbModelParam._m0[15u].z, fma(_535, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _534));
        float _1438;
        if (_1404 > 0.0)
        {
            _1438 = abs((1.0 - _1393) / _1404);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1393 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1438 = frontier_phi_18_16_ladder;
        }
        float _1644;
        if (_1407 > 0.0)
        {
            _1644 = abs((1.0 - _1397) / _1407);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1397 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1644 = frontier_phi_27_23_ladder;
        }
        float _1887;
        if (_1410 > 0.0)
        {
            _1887 = abs((1.0 - _1401) / _1410);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1401 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1887 = frontier_phi_39_34_ladder;
        }
        float _1889 = isnan(_1644) ? _1438 : (isnan(_1438) ? _1644 : min(_1438, _1644));
        float _1890 = isnan(_1887) ? _1889 : (isnan(_1889) ? _1887 : min(_1889, _1887));
        float _1894 = (_1890 * _1404) + _1393;
        float _1895 = (_1890 * _1407) + _1397;
        float _1896 = (_1890 * _1410) + _1401;
        float _1897 = _1890 * 9.9999997473787516355514526367188e-05;
        float _1899 = (-1.0) - _1897;
        float _1901 = _1897 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1896 > _1901) || ((_1896 < _1899) || ((_1895 > _1901) || ((_1895 < _1899) || ((_1894 < _1899) || (_1894 > _1901))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1896, cbModelParam._m0[9u].z, fma(_1895, cbModelParam._m0[9u].y, _1894 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1896, cbModelParam._m0[10u].z, fma(_1895, cbModelParam._m0[10u].y, _1894 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1896, cbModelParam._m0[11u].z, fma(_1895, cbModelParam._m0[11u].y, _1894 * cbModelParam._m0[11u].x))), _1344);
            frontier_phi_17_39_ladder = _2020.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2020.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2020.x * cbModelParam._m0[1u].y;
        }
        _1426 = frontier_phi_17_39_ladder_2;
        _1428 = frontier_phi_17_39_ladder_1;
        _1430 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1414 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_534, _535, _536), _1344);
        _1426 = _1414.x * cbModelParam._m0[1u].y;
        _1428 = _1414.y * cbModelParam._m0[1u].y;
        _1430 = _1414.z * cbModelParam._m0[1u].y;
    }
    float _1434 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _368);
    float _1435 = isnan(_1434) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1434 : min(cbModelParam._m0[25u].w, _1434));
    float _1528;
    float _1530;
    float _1532;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1492 = fma(_595, cbModelParam._m0[21u].z, fma(_591, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _587)) + cbModelParam._m0[21u].w;
        float _1496 = fma(_595, cbModelParam._m0[22u].z, fma(_591, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _587)) + cbModelParam._m0[22u].w;
        float _1500 = fma(_595, cbModelParam._m0[23u].z, fma(_591, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _587)) + cbModelParam._m0[23u].w;
        float _1503 = fma(_536, cbModelParam._m0[21u].z, fma(_535, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _534));
        float _1506 = fma(_536, cbModelParam._m0[22u].z, fma(_535, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _534));
        float _1509 = fma(_536, cbModelParam._m0[23u].z, fma(_535, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _534));
        float _1649;
        if (_1503 > 0.0)
        {
            _1649 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1649 = frontier_phi_29_25_ladder;
        }
        float _1914;
        if (_1506 > 0.0)
        {
            _1914 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1914 = frontier_phi_41_36_ladder;
        }
        float _2119;
        if (_1509 > 0.0)
        {
            _2119 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2119 = frontier_phi_50_47_ladder;
        }
        float _2121 = isnan(_1914) ? _1649 : (isnan(_1649) ? _1914 : min(_1649, _1914));
        float _2122 = isnan(_2119) ? _2121 : (isnan(_2121) ? _2119 : min(_2121, _2119));
        float _2126 = (_2122 * _1503) + _1492;
        float _2127 = (_2122 * _1506) + _1496;
        float _2128 = (_2122 * _1509) + _1500;
        float _2129 = _2122 * 9.9999997473787516355514526367188e-05;
        float _2130 = (-1.0) - _2129;
        float _2132 = _2129 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2128 > _2132) || ((_2128 < _2130) || ((_2127 > _2132) || ((_2127 < _2130) || ((_2126 < _2130) || (_2126 > _2132))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2326 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2128, cbModelParam._m0[17u].z, fma(_2127, cbModelParam._m0[17u].y, _2126 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2128, cbModelParam._m0[18u].z, fma(_2127, cbModelParam._m0[18u].y, _2126 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2128, cbModelParam._m0[19u].z, fma(_2127, cbModelParam._m0[19u].y, _2126 * cbModelParam._m0[19u].x))), _1435);
            frontier_phi_26_50_ladder = _2326.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2326.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2326.x * cbModelParam._m0[1u].z;
        }
        _1528 = frontier_phi_26_50_ladder_2;
        _1530 = frontier_phi_26_50_ladder_1;
        _1532 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_534, _535, _536), _1435);
        _1528 = _1512.x * cbModelParam._m0[1u].z;
        _1530 = _1512.y * cbModelParam._m0[1u].z;
        _1532 = _1512.z * cbModelParam._m0[1u].z;
    }
    float _1544 = ((((1.0 - _555) * ((_542 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_555 * _542)) * _526;
    float _1545 = _1544 * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1546 = _1544 * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1547 = _1544 * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1550 = fma(_1547, cbSceneParam._m0[89u].z, fma(_1546, cbSceneParam._m0[89u].y, _1545 * cbSceneParam._m0[89u].x));
    float _1553 = fma(_1547, cbSceneParam._m0[90u].z, fma(_1546, cbSceneParam._m0[90u].y, _1545 * cbSceneParam._m0[90u].x));
    float _1556 = fma(_1547, cbSceneParam._m0[91u].z, fma(_1546, cbSceneParam._m0[91u].y, _1545 * cbSceneParam._m0[91u].x));
    uvec4 _1566 = floatBitsToUint(cbInstanceData._m0[_500 + 5u]);
    uint _1568 = _1566.x * 14u;
    uint _1569 = _1568 + 13u;
    float _1576 = _526 + (-1.0);
    float _1581 = (cbLight._m0[_1569].x * _1576) + 1.0;
    float _1582 = (cbLight._m0[_1569].y * _1576) + 1.0;
    float _1583 = (cbLight._m0[_1569].z * _1576) + 1.0;
    float _1584 = (cbLight._m0[_1569].w * _1576) + 1.0;
    uint _1585 = _1568 + 5u;
    float _1591 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
    uint _1595 = _1568 + 4u;
    float _1602 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
    uint _1606 = _1568 | 1u;
    float _1617 = dot(vec3(cbLight._m0[_1568].xyz), vec3(_365, _366, _367));
    float _1620 = dot(vec3(cbLight._m0[_1606].xyz), vec3(_365, _366, _367));
    float _3747 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _3758 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1625 = (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 0.3183098733425140380859375;
    float _1627 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 0.3183098733425140380859375;
    float _1634 = ((cbLight._m0[_1585].x * _1591) * _1627) + ((cbLight._m0[_1595].x * _1602) * _1625);
    float _1635 = ((_1591 * cbLight._m0[_1585].y) * _1627) + ((_1602 * cbLight._m0[_1595].y) * _1625);
    float _1636 = ((_1591 * cbLight._m0[_1585].z) * _1627) + ((_1602 * cbLight._m0[_1595].z) * _1625);
    uvec4 _1641 = floatBitsToUint(cbLight._m0[_1568 + 12u]);
    bool _1643 = _1641.x == 0u;
    float _1654;
    float _1656;
    float _1658;
    if (_1643)
    {
        _1654 = _1634;
        _1656 = _1635;
        _1658 = _1636;
    }
    else
    {
        uint _1662 = _1568 + 6u;
        float _1678 = (dot(vec3(cbLight._m0[_1568 + 2u].xyz), vec3(_365, _366, _367)) * 0.5) + 0.5;
        float _1679 = _1678 * _1678;
        float _3769 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1681 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
        _1654 = (((cbLight._m0[_1662].x * 0.3183098733425140380859375) * _1680) * _1681) + _1634;
        _1656 = (((cbLight._m0[_1662].y * 0.3183098733425140380859375) * _1680) * _1681) + _1635;
        _1658 = (((cbLight._m0[_1662].z * 0.3183098733425140380859375) * _1680) * _1681) + _1636;
    }
    bool _1661 = _1641.y == 0u;
    float _1699;
    float _1701;
    float _1703;
    if (_1661)
    {
        _1699 = _1654;
        _1701 = _1656;
        _1703 = _1658;
    }
    else
    {
        uint _1858 = _1568 + 7u;
        float _1874 = (dot(vec3(cbLight._m0[_1568 + 3u].xyz), vec3(_365, _366, _367)) * 0.5) + 0.5;
        float _1875 = _1874 * _1874;
        float _3785 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1877 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
        _1699 = (((cbLight._m0[_1858].x * 0.3183098733425140380859375) * _1876) * _1877) + _1654;
        _1701 = (((cbLight._m0[_1858].y * 0.3183098733425140380859375) * _1876) * _1877) + _1656;
        _1703 = (((cbLight._m0[_1858].z * 0.3183098733425140380859375) * _1876) * _1877) + _1658;
    }
    uint _1706 = _1568 + 8u;
    float _1719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1568].w)) * _368) * 0.949999988079071044921875);
    float _1720 = _1719 * _1719;
    float _1721 = cbLight._m0[_1568].x + _447;
    float _1722 = cbLight._m0[_1568].y + _448;
    float _1723 = cbLight._m0[_1568].z + _449;
    float _1727 = inversesqrt(dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723)));
    float _1728 = _1727 * _1721;
    float _1729 = _1727 * _1722;
    float _1730 = _1727 * _1723;
    float _1731 = dot(vec3(_365, _366, _367), vec3(cbLight._m0[_1568].xyz));
    float _3801 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1734 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _1735 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1736 = dot(vec3(_365, _366, _367), vec3(_1728, _1729, _1730));
    float _3823 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1740 = dot(vec3(cbLight._m0[_1568].xyz), vec3(_1728, _1729, _1730));
    float _3834 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1744 = _1720 * _1720;
    float _1748 = ((_1739 * _1739) * (_1744 + (-1.0))) + 1.0;
    float _1759 = (exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1760 = 1.0 - _1720;
    float _1771 = (0.5 / (((_1735 * ((_1734 * _1760) + _1720)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1760) + _1720) * _1734))) * _1734;
    float _3845 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1773 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1744 / ((_1748 * _1748) * 3.141590118408203125));
    uint _1784 = _1568 + 9u;
    float _1795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1606].w)) * _368) * 0.949999988079071044921875);
    float _1796 = _1795 * _1795;
    float _1797 = cbLight._m0[_1606].x + _447;
    float _1798 = cbLight._m0[_1606].y + _448;
    float _1799 = cbLight._m0[_1606].z + _449;
    float _1803 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
    float _1804 = _1803 * _1797;
    float _1805 = _1803 * _1798;
    float _1806 = _1803 * _1799;
    float _1807 = dot(vec3(_365, _366, _367), vec3(cbLight._m0[_1606].xyz));
    float _3856 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1810 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _1811 = dot(vec3(_365, _366, _367), vec3(_1804, _1805, _1806));
    float _3867 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _1815 = dot(vec3(cbLight._m0[_1606].xyz), vec3(_1804, _1805, _1806));
    float _3878 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1819 = _1796 * _1796;
    float _1823 = ((_1814 * _1814) * (_1819 + (-1.0))) + 1.0;
    float _1832 = (exp2(log2(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1833 = 1.0 - _1796;
    float _1843 = (0.5 / (((_1735 * ((_1810 * _1833) + _1796)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1833) + _1796) * _1810))) * _1810;
    float _3889 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1845 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1819 / ((_1823 * _1823) * 3.141590118408203125));
    float _1855 = (((_1832 * cbLight._m0[_1784].x) * _1845) * _1591) + (((_1759 * cbLight._m0[_1706].x) * _1773) * _1602);
    float _1856 = (((_1832 * cbLight._m0[_1784].y) * _1845) * _1591) + (((_1759 * cbLight._m0[_1706].y) * _1773) * _1602);
    float _1857 = (((_1832 * cbLight._m0[_1784].z) * _1845) * _1591) + (((_1759 * cbLight._m0[_1706].z) * _1773) * _1602);
    float _1919;
    float _1921;
    float _1923;
    if (_1643)
    {
        _1919 = _1855;
        _1921 = _1856;
        _1923 = _1857;
    }
    else
    {
        uint _1925 = _1568 + 2u;
        uint _1929 = _1568 + 10u;
        float _1943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1925].w)) * _368) * 0.949999988079071044921875);
        float _1944 = _1943 * _1943;
        float _1945 = cbLight._m0[_1925].x + _447;
        float _1946 = cbLight._m0[_1925].y + _448;
        float _1947 = cbLight._m0[_1925].z + _449;
        float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
        float _1952 = _1951 * _1945;
        float _1953 = _1951 * _1946;
        float _1954 = _1951 * _1947;
        float _1955 = dot(vec3(_365, _366, _367), vec3(cbLight._m0[_1925].xyz));
        float _3900 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1958 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1959 = dot(vec3(_365, _366, _367), vec3(_1952, _1953, _1954));
        float _3911 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1962 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1963 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_1952, _1953, _1954));
        float _3922 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1967 = _1944 * _1944;
        float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
        float _1980 = (exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1981 = 1.0 - _1944;
        float _1991 = (0.5 / (((_1735 * ((_1958 * _1981) + _1944)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1981) + _1944) * _1958))) * _1958;
        float _3933 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1993 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
        float _1994 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
        _1919 = (((_1980 * cbLight._m0[_1929].x) * _1993) * _1994) + _1855;
        _1921 = (((_1980 * cbLight._m0[_1929].y) * _1993) * _1994) + _1856;
        _1923 = (((_1980 * cbLight._m0[_1929].z) * _1993) * _1994) + _1857;
    }
    float _2029;
    float _2031;
    float _2033;
    if (_1661)
    {
        _2029 = _1919;
        _2031 = _1921;
        _2033 = _1923;
    }
    else
    {
        uint _2040 = _1568 + 3u;
        uint _2044 = _1568 + 11u;
        float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _368) * 0.949999988079071044921875);
        float _2059 = _2058 * _2058;
        float _2060 = cbLight._m0[_2040].x + _447;
        float _2061 = cbLight._m0[_2040].y + _448;
        float _2062 = cbLight._m0[_2040].z + _449;
        float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
        float _2067 = _2066 * _2060;
        float _2068 = _2066 * _2061;
        float _2069 = _2066 * _2062;
        float _2070 = dot(vec3(_365, _366, _367), vec3(cbLight._m0[_2040].xyz));
        float _3949 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _2074 = dot(vec3(_365, _366, _367), vec3(_2067, _2068, _2069));
        float _3960 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2077 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _2078 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2067, _2068, _2069));
        float _3971 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2082 = _2059 * _2059;
        float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
        float _2095 = (exp2(log2(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2096 = 1.0 - _2059;
        float _2106 = (0.5 / (((_1735 * ((_2073 * _2096) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _2096) + _2059) * _2073))) * _2073;
        float _3982 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2108 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
        float _2109 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
        _2029 = (((_2095 * cbLight._m0[_2044].x) * _2108) * _2109) + _1919;
        _2031 = (((_2095 * cbLight._m0[_2044].y) * _2108) * _2109) + _1921;
        _2033 = (((_2095 * cbLight._m0[_2044].z) * _2108) * _2109) + _1923;
    }
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    if (_1566.y == 0u)
    {
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2185 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2184;
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2184;
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2184;
        uvec4 _2199 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2200 = _2199.x;
        uint _2211 = uint((float(_2199.y) * floor(float(uint(cbSceneParam._m0[85u].y * _460) / _2200))) + floor(float(uint(cbSceneParam._m0[85u].x * _459) / _2200)));
        float _2221 = (log2(_2187 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2222 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        uint _2225 = uint(isnan(14.0) ? _2222 : (isnan(_2222) ? 14.0 : min(_2222, 14.0)));
        uvec4 _2230 = texelFetch(g_lightClusterGridBuffer, int(((_2225 << 2u) + (_2211 << 6u)) >> 2u));
        uint _2231 = _2230.x;
        uint _2232 = _2199.z;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        if (((((1u << ((_2232 >> 4u) & 15u)) + 4294967295u) & _2231) == 0u) || ((_2232 & 240u) == 0u))
        {
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
        }
        else
        {
            float _2332;
            float _2334;
            float _2336;
            float _2338;
            float _2340;
            float _2342;
            float _2483 = 0.0;
            float _2484 = 0.0;
            float _2485 = 0.0;
            float _2486 = 0.0;
            float _2487 = 0.0;
            float _2488 = 0.0;
            uint _2489 = 0u;
            uint _2498;
            bool _2499;
            for (;;)
            {
                _2498 = texelFetch(g_lightClassification, int((((_2225 << 5u) + (_2211 << 9u)) + (_2489 << 2u)) >> 2u)).x;
                _2499 = _2498 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2499)
                {
                    frontier_phi_67_pred = _2485;
                    frontier_phi_67_pred_1 = _2488;
                    frontier_phi_67_pred_2 = _2487;
                    frontier_phi_67_pred_3 = _2486;
                    frontier_phi_67_pred_4 = _2484;
                    frontier_phi_67_pred_5 = _2483;
                }
                else
                {
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    uint _2634;
                    _2628 = _2483;
                    _2629 = _2484;
                    _2630 = _2485;
                    _2631 = _2486;
                    _2632 = _2487;
                    _2633 = _2488;
                    _2634 = _2498;
                    float _2555;
                    float _2556;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    for (;;)
                    {
                        uint _2638 = uint(findLSB(_2634)) + (_2489 << 5u);
                        uint _2635 = (_2634 + 4294967295u) & _2634;
                        uint _2640 = _2638 * 48u;
                        vec4 _2654 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2640)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 3u)).x));
                        uint _2660 = (_2638 * 48u) + 4u;
                        vec4 _2673 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2660)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 3u)).x));
                        uint _2679 = (_2638 * 48u) + 8u;
                        vec3 _2690 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x));
                        float _2694 = _2654.x - _2185;
                        float _2695 = _2654.y - _2186;
                        float _2696 = _2654.z - _2187;
                        float _2697 = dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696));
                        float _2700 = inversesqrt(_2697);
                        float _2701 = _2700 * _2694;
                        float _2702 = _2700 * _2695;
                        float _2703 = _2700 * _2696;
                        float _2704 = dot(vec3(_481, _484, _487), vec3(_2701, _2702, _2703));
                        float _2709 = 1.0 - (_2697 * _2654.w);
                        float _4008 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2710 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                        float _2711 = sqrt(_2697) * _2673.w;
                        float _2714 = 1.39999997615814208984375 / (_2711 + 1.39999997615814208984375);
                        float _2715 = _2714 * _2714;
                        float _2718 = ((1.0 - _2715) * _2704) + _2715;
                        float _2721 = _2711 * _2711;
                        float _2725 = ((isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0))) * _2710) / ((_2721 * 0.699999988079071044921875) + 1.0);
                        float _2729 = (-0.0) - _2185;
                        float _2730 = (-0.0) - _2186;
                        float _2731 = (-0.0) - _2187;
                        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
                        float _2736 = _2735 * _2729;
                        float _2737 = _2735 * _2730;
                        float _2738 = _2735 * _2731;
                        float _2746 = exp2(log2(1.0 / ((_2721 * 3.5) + 5.0)) * 0.25);
                        float _2747 = 1.0 - _542;
                        float _2754 = sqrt(1.0 - ((1.0 - (_2747 * _2747)) * (1.0 - (_2746 * _2746))));
                        float _2755 = _2754 * _2754;
                        float _2756 = _2755 * _2755;
                        float _2757 = _2736 + _2701;
                        float _2758 = _2737 + _2702;
                        float _2759 = _2738 + _2703;
                        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
                        float _2767 = dot(vec3(_481, _484, _487), vec3(_2736, _2737, _2738));
                        float _4024 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2770 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2771 = dot(vec3(_481, _484, _487), vec3(_2763 * _2757, _2763 * _2758, _2763 * _2759));
                        float _4035 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2774 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                        float _2778 = ((_2774 * _2774) * (_2756 + (-1.0))) + 1.0;
                        float _2779 = _2714 * _2755;
                        float _2780 = _2779 * _2779;
                        float _2783 = ((1.0 - _2780) * _2704) + _2780;
                        float _4046 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2784 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                        float _2785 = 1.0 - _2755;
                        float _2795 = (0.5 / (((_2784 * ((_2770 * _2785) + _2755)) + 9.9999999392252902907785028219223e-09) + (((_2784 * _2785) + _2755) * _2770))) * _2784;
                        float _4057 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2806 = (((_2756 * 3.1415927410125732421875) * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) / ((_2778 * _2778) * ((_2721 * 2.1991131305694580078125) + 3.141590118408203125))) * _2710;
                        _2558 = (_2725 * _2673.x) + _2631;
                        _2559 = (_2725 * _2673.y) + _2632;
                        _2560 = (_2725 * _2673.z) + _2633;
                        _2555 = (_2806 * _2690.x) + _2628;
                        _2556 = (_2806 * _2690.y) + _2629;
                        _2557 = (_2806 * _2690.z) + _2630;
                        if (_2635 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2628 = _2555;
                            _2629 = _2556;
                            _2630 = _2557;
                            _2631 = _2558;
                            _2632 = _2559;
                            _2633 = _2560;
                            _2634 = _2635;
                        }
                    }
                    frontier_phi_67_pred = _2557;
                    frontier_phi_67_pred_1 = _2560;
                    frontier_phi_67_pred_2 = _2559;
                    frontier_phi_67_pred_3 = _2558;
                    frontier_phi_67_pred_4 = _2556;
                    frontier_phi_67_pred_5 = _2555;
                }
                _2336 = frontier_phi_67_pred;
                _2342 = frontier_phi_67_pred_1;
                _2340 = frontier_phi_67_pred_2;
                _2338 = frontier_phi_67_pred_3;
                _2334 = frontier_phi_67_pred_4;
                _2332 = frontier_phi_67_pred_5;
                uint _2490 = _2489 + 1u;
                if (_2490 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2483 = _2332;
                    _2484 = _2334;
                    _2485 = _2336;
                    _2486 = _2338;
                    _2487 = _2340;
                    _2488 = _2342;
                    _2489 = _2490;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
        }
        uvec4 _2345 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2346 = _2345.z;
        uint _2348 = (_2346 >> 8u) & 15u;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        if (((4294967295u << _2348) & _2231) == 0u)
        {
            _2451 = _2331;
            _2453 = _2333;
            _2455 = _2335;
            _2457 = _2337;
            _2459 = _2339;
            _2461 = _2341;
        }
        else
        {
            float _2476 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
            float _2477 = _2476 * _2185;
            float _2478 = _2476 * _2186;
            float _2479 = _2476 * _2187;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2348 < ((_2346 >> 12u) & 15u))
            {
                float _2452;
                float _2454;
                float _2456;
                float _2458;
                float _2460;
                float _2462;
                float _2611 = _2331;
                float _2612 = _2333;
                float _2613 = _2335;
                float _2614 = _2337;
                float _2615 = _2339;
                float _2616 = _2341;
                uint _2617 = _2348;
                uint _2626;
                bool _2627;
                for (;;)
                {
                    _2626 = texelFetch(g_lightClassification, int((((_2225 << 5u) + (_2211 << 9u)) + (_2617 << 2u)) >> 2u)).x;
                    _2627 = _2626 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2627)
                    {
                        frontier_phi_78_pred = _2616;
                        frontier_phi_78_pred_1 = _2615;
                        frontier_phi_78_pred_2 = _2614;
                        frontier_phi_78_pred_3 = _2613;
                        frontier_phi_78_pred_4 = _2612;
                        frontier_phi_78_pred_5 = _2611;
                    }
                    else
                    {
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _2825;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _2833 = _2611;
                        float _2834 = _2612;
                        float _2835 = _2613;
                        float _2836 = _2614;
                        float _2837 = _2615;
                        float _2838 = _2616;
                        uint _2839 = _2626;
                        uint _2840;
                        vec4 _2865;
                        float _2866;
                        vec4 _2881;
                        vec3 _2893;
                        vec4 _2909;
                        vec4 _2925;
                        float _2972;
                        bool _2973;
                        for (;;)
                        {
                            uint _2850 = ((_2617 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2839));
                            _2840 = (_2839 + 4294967295u) & _2839;
                            uint _2852 = _2850 * 40u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            _2866 = _2865.w;
                            uint _2868 = (_2850 * 40u) + 4u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            uint _2883 = (_2850 * 40u) + 8u;
                            _2893 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x));
                            uint _2896 = (_2850 * 40u) + 16u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2912 = (_2850 * 40u) + 20u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2928 = (_2850 * 40u) + 24u;
                            vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2947 = (_2850 * 40u) + 28u;
                            vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            _2972 = fma(_2187, _2960.z, fma(_2186, _2960.y, _2960.x * _2185)) + _2960.w;
                            _2973 = !((fma(_2187, _2941.z, fma(_2186, _2941.y, _2941.x * _2185)) + _2941.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_2973)
                            {
                                float _3000 = _2865.x - _2185;
                                float _3001 = _2865.y - _2186;
                                float _3002 = _2865.z - _2187;
                                float _3003 = dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002));
                                float _3006 = inversesqrt(_3003);
                                float _3007 = _3006 * _3000;
                                float _3008 = _3006 * _3001;
                                float _3009 = _3006 * _3002;
                                float _3013 = 1.0 - (_3003 / (_2866 * _2866));
                                float _4068 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3014 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3018 = sqrt(_3003) * _2881.w;
                                float _3020 = 1.39999997615814208984375 / (_3018 + 1.39999997615814208984375);
                                float _3021 = _3020 * _3020;
                                float _3024 = ((1.0 - _3021) * dot(vec3(_3007, _3008, _3009), vec3(_481, _484, _487))) + _3021;
                                float _3027 = _3018 * _3018;
                                float _3031 = (fma(_2187, _2909.z, fma(_2186, _2909.y, _2909.x * _2185)) + _2909.w) / _2972;
                                float _3032 = (fma(_2187, _2925.z, fma(_2186, _2925.y, _2925.x * _2185)) + _2925.w) / _2972;
                                float _3036 = 1.0 - dot(vec2(_3031, _3032), vec2(_3031, _3032));
                                float _4084 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3037 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3038 = _3037 * (((isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0))) * _3014) / ((_3027 * 0.699999988079071044921875) + 1.0));
                                float _3050 = exp2(log2(1.0 / ((_3027 * 3.5) + 5.0)) * 0.25);
                                float _3051 = 1.0 - _542;
                                float _3058 = sqrt(1.0 - ((1.0 - (_3051 * _3051)) * (1.0 - (_3050 * _3050))));
                                float _3059 = _3058 * _3058;
                                float _3060 = _3059 * _3059;
                                float _3061 = _3007 - _2477;
                                float _3062 = _3008 - _2478;
                                float _3063 = _3009 - _2479;
                                float _3067 = inversesqrt(dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063)));
                                float _3071 = dot(vec3(_481, _484, _487), vec3((-0.0) - _2477, (-0.0) - _2478, (-0.0) - _2479));
                                float _4095 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3074 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3075 = dot(vec3(_481, _484, _487), vec3(_3067 * _3061, _3067 * _3062, _3067 * _3063));
                                float _4106 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3078 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                                float _3082 = ((_3078 * _3078) * (_3060 + (-1.0))) + 1.0;
                                float _3083 = _3020 * _3059;
                                float _3084 = _3083 * _3083;
                                float _3090 = ((1.0 - _3084) * dot(vec3(_481, _484, _487), vec3(_3007, _3008, _3009))) + _3084;
                                float _4117 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3091 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                                float _3092 = 1.0 - _3059;
                                float _3102 = (0.5 / (((_3091 * ((_3074 * _3092) + _3059)) + 9.9999999392252902907785028219223e-09) + (((_3091 * _3092) + _3059) * _3074))) * _3091;
                                float _4128 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3112 = (_3037 * _3014) * (((_3060 * 3.1415927410125732421875) * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) / ((_3082 * _3082) * ((_3027 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3038 * _2881.z;
                                frontier_phi_84_pred_1 = _3038 * _2881.y;
                                frontier_phi_84_pred_2 = _3038 * _2881.x;
                                frontier_phi_84_pred_3 = _3112 * _2893.z;
                                frontier_phi_84_pred_4 = _3112 * _2893.y;
                                frontier_phi_84_pred_5 = _3112 * _2893.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3121 = frontier_phi_84_pred;
                            _3120 = frontier_phi_84_pred_1;
                            _3119 = frontier_phi_84_pred_2;
                            _3118 = frontier_phi_84_pred_3;
                            _3117 = frontier_phi_84_pred_4;
                            _3116 = frontier_phi_84_pred_5;
                            _2823 = _3119 + _2836;
                            _2824 = _3120 + _2837;
                            _2825 = _3121 + _2838;
                            _2820 = _3116 + _2833;
                            _2821 = _3117 + _2834;
                            _2822 = _3118 + _2835;
                            if (_2840 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2840;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2825;
                        frontier_phi_78_pred_1 = _2824;
                        frontier_phi_78_pred_2 = _2823;
                        frontier_phi_78_pred_3 = _2822;
                        frontier_phi_78_pred_4 = _2821;
                        frontier_phi_78_pred_5 = _2820;
                    }
                    _2462 = frontier_phi_78_pred;
                    _2460 = frontier_phi_78_pred_1;
                    _2458 = frontier_phi_78_pred_2;
                    _2456 = frontier_phi_78_pred_3;
                    _2454 = frontier_phi_78_pred_4;
                    _2452 = frontier_phi_78_pred_5;
                    uint _2618 = _2617 + 1u;
                    if (_2618 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2611 = _2452;
                        _2612 = _2454;
                        _2613 = _2456;
                        _2614 = _2458;
                        _2615 = _2460;
                        _2616 = _2462;
                        _2617 = _2618;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2458;
                frontier_phi_59_60_ladder_1 = _2462;
                frontier_phi_59_60_ladder_2 = _2460;
                frontier_phi_59_60_ladder_3 = _2456;
                frontier_phi_59_60_ladder_4 = _2454;
                frontier_phi_59_60_ladder_5 = _2452;
            }
            else
            {
                frontier_phi_59_60_ladder = _2337;
                frontier_phi_59_60_ladder_1 = _2341;
                frontier_phi_59_60_ladder_2 = _2339;
                frontier_phi_59_60_ladder_3 = _2335;
                frontier_phi_59_60_ladder_4 = _2333;
                frontier_phi_59_60_ladder_5 = _2331;
            }
            _2451 = frontier_phi_59_60_ladder_5;
            _2453 = frontier_phi_59_60_ladder_4;
            _2455 = frontier_phi_59_60_ladder_3;
            _2457 = frontier_phi_59_60_ladder;
            _2459 = frontier_phi_59_60_ladder_2;
            _2461 = frontier_phi_59_60_ladder_1;
        }
        float _2466 = isnan(1.0) ? _526 : (isnan(_526) ? 1.0 : min(_526, 1.0));
        _2243 = (_2466 * _2457) + _1699;
        _2245 = (_2466 * _2459) + _1701;
        _2247 = (_2466 * _2461) + _1703;
        _2249 = ((_2451 * 0.039999999105930328369140625) * _2466) + _2029;
        _2251 = ((_2453 * 0.039999999105930328369140625) * _2466) + _2031;
        _2253 = ((_2455 * 0.039999999105930328369140625) * _2466) + _2033;
    }
    else
    {
        _2243 = _1699;
        _2245 = _1701;
        _2247 = _1703;
        _2249 = _2029;
        _2251 = _2031;
        _2253 = _2033;
    }
    float _4144 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4155 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4166 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _2270 = ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2243 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _526))) + ((_2249 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    float _2271 = ((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2245 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _526))) + ((_2251 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    float _2272 = ((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2247 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _526))) + ((_2253 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    uint _2273 = _500 + 6u;
    float _2281 = _459 / cbSceneParam._m0[86u].x;
    float _2282 = _460 / cbSceneParam._m0[86u].y;
    vec4 _2296 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2281, _2282, (log2((isnan(cbSceneParam._m0[77u].w) ? _391 : (isnan(_391) ? cbSceneParam._m0[77u].w : min(_391, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2298 = _2296.x;
    float _2299 = _2296.y;
    float _2300 = _2296.z;
    float _2301 = _2296.w;
    float _2393;
    float _2395;
    float _2397;
    float _2399;
    if (_391 > cbSceneParam._m0[78u].w)
    {
        float _2356 = isnan(_391) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _391 : min(cbSceneParam._m0[80u].w, _391));
        float _2357 = _2356 / _391;
        float _2368 = _2357 * _440;
        float _2369 = _441 * _2357;
        float _2370 = (-0.0) - _2369;
        float _2371 = _2357 * _442;
        float _2373 = (cbSceneParam._m0[77u].w * _2370) / _2356;
        float _2374 = _2373 + cbSceneParam._m0[79u].w;
        float _2375 = cbSceneParam._m0[79u].w - _2369;
        float _2381 = sqrt(((_2368 * _2368) + (_2369 * _2369)) + (_2371 * _2371));
        float _2384 = (1.0 - (cbSceneParam._m0[77u].w / _2356)) * _2381;
        float _2389 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2391 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2568;
        if (abs((_2370 - _2373) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2568 = ((((_2374 > 0.0) ? exp2(_2389 * _2374) : (2.0 - exp2(_2391 * _2374))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2384;
        }
        else
        {
            float _2512 = 1.0 / cbSceneParam._m0[80u].x;
            float _2513 = isnan(_2375) ? _2374 : (isnan(_2374) ? _2375 : max(_2374, _2375));
            float _2514 = isnan(_2375) ? _2374 : (isnan(_2374) ? _2375 : min(_2374, _2375));
            float _2523 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : min(_2513, 0.0));
            float _2524 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : min(_2514, 0.0));
            _2568 = ((abs(_2381 / _2370) * cbSceneParam._m0[80u].y) * ((((_2523 - _2524) * 2.0) - ((exp2(_2389 * (isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0)))) - exp2(_2389 * (isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0))))) * _2512)) - ((exp2(_2391 * _2523) - exp2(_2391 * _2524)) * _2512))) + (_2384 * cbSceneParam._m0[80u].z);
        }
        vec4 _2570 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2281, _2282, 1.0), 0.0);
        float _2579 = exp2((_2568 * (-1.44269502162933349609375)) * (1.0 - _2570.w));
        float _2580 = log2(_2579);
        float _2596 = log2(_2301);
        _2393 = (exp2(_2596 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2580 * cbSceneParam._m0[78u].x)) * _2570.x) / cbSceneParam._m0[78u].x)) + _2298;
        _2395 = (exp2(_2596 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2580 * cbSceneParam._m0[78u].y)) * _2570.y) / cbSceneParam._m0[78u].y)) + _2299;
        _2397 = (exp2(_2596 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2580 * cbSceneParam._m0[78u].z)) * _2570.z) / cbSceneParam._m0[78u].z)) + _2300;
        _2399 = _2579 * _2301;
    }
    else
    {
        _2393 = _2298;
        _2395 = _2299;
        _2397 = _2300;
        _2399 = _2301;
    }
    bool _2606;
    vec4 _2409;
    vec4 _2431;
    float _2433;
    float _2437;
    float _2438;
    float _2439;
    float _2440;
    bool _2450;
    for (;;)
    {
        _2409 = cbMatDynParam._m0[0u];
        float _2411 = roundEven(_2409.y);
        bool _2412 = _2411 == 3.0;
        float _2413 = log2(_2399);
        float _2420 = exp2(_2413 * cbSceneParam._m0[78u].x) * _2270;
        float _2421 = exp2(_2413 * cbSceneParam._m0[78u].y) * _2271;
        float _2422 = exp2(_2413 * cbSceneParam._m0[78u].z) * _2272;
        float _2429 = _453 + (-0.5);
        _2431 = cbMtdParam._m0[1u];
        _2433 = _2431.y * _2429;
        float _2436 = (_2411 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2437 = _2436 * (_2412 ? _2420 : (_2420 + (cbSceneParam._m0[72u].w * _2393)));
        _2438 = _2436 * (_2412 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2395)));
        _2439 = _2436 * (_2412 ? _2422 : (_2422 + (cbSceneParam._m0[72u].w * _2397)));
        _2440 = _2429 * 0.999000012874603271484375;
        _2450 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2450)
        {
            if ((cbInstanceData._m0[_500 + 7u].x + _2440) < 0.5)
            {
                _2606 = true;
                break;
            }
        }
        uint _2547 = _502 + uint(_2409.w);
        if ((cbInstanceData._m0[_2547].w < 1.0) && ((cbInstanceData._m0[_2547].w + _2440) < 0.5))
        {
            _2606 = true;
            break;
        }
        if ((_2433 + _293) < _2431.x)
        {
            _2606 = true;
            break;
        }
        _2606 = false;
        break;
    }
    float _2811;
    if (_2606)
    {
        discard_state = true;
        _2811 = 0.0;
    }
    else
    {
        _2811 = cbInstanceData._m0[_2273].w;
    }
    SV_Target.x = _2437;
    SV_Target.y = _2438;
    SV_Target.z = _2439;
    SV_Target.w = _2811;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2273].w;
    discard_exit();
}


