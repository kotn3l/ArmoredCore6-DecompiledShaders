#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _935;
float _3345;
float _3346;
float _3347;
float _3348;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _291 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _297 = _291.w;
    float _298 = _291.x * cbMtdParam._m0[9u].x;
    float _299 = _291.y * cbMtdParam._m0[9u].y;
    float _300 = _291.z * cbMtdParam._m0[9u].z;
    vec4 _312 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _314 = _312.x;
    vec4 _326 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _330 = _326.z;
    float _334 = (_326.x * 2.0) + (-1.0);
    float _336 = (_326.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3357 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _343 = sqrt(1.0 - (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))));
    float _355 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].x;
    float _359 = gl_FragCoord.x * 0.125;
    float _361 = gl_FragCoord.y * 0.125;
    float _372 = fma(_343, _215, fma(_336, _207 * TANGENT.x, (_193 * _186) * _334));
    float _375 = fma(_343, _216, fma(_336, _207 * TANGENT.y, (_193 * _187) * _334));
    float _378 = fma(_343, _217, fma(_336, _207 * TANGENT.z, (_193 * _188) * _334));
    float _382 = inversesqrt(dot(vec3(_372, _375, _378), vec3(_372, _375, _378)));
    float _383 = _382 * _372;
    float _384 = _382 * _375;
    float _385 = _382 * _378;
    float _3373 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _386 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    float _3384 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3395 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3406 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3417 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _390 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    if (!(((sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273)) - cbMtdParam._m0[10u].x) / (isnan(0.001000000047497451305389404296875) ? _355 : (isnan(_355) ? 0.001000000047497451305389404296875 : max(_355, 0.001000000047497451305389404296875)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_359, _361)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _410 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _450 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _459 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _450);
    float _460 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _450);
    float _461 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _450);
    float _465 = inversesqrt(dot(vec3(_459, _460, _461), vec3(_459, _460, _461)));
    float _466 = _459 * _465;
    float _467 = _460 * _465;
    float _468 = _461 * _465;
    vec4 _470 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_359, _361));
    float _472 = _470.w;
    float _478 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _479 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _500 = fma(_385, cbSceneParam._m0[5u].z, fma(_384, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _383));
    float _503 = fma(_385, cbSceneParam._m0[6u].z, fma(_384, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _383));
    float _506 = fma(_385, cbSceneParam._m0[7u].z, fma(_384, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _383));
    uint _519 = uint(roundEven(NORMAL.w)) * 13u;
    uint _521 = _519 + 9u;
    uint _522 = _521 + uint(cbMatDynParam._m0[0u].w);
    float _528 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) * cbInstanceData._m0[_522].x;
    float _529 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) * cbInstanceData._m0[_522].y;
    float _530 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * cbInstanceData._m0[_522].z;
    float _3428 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _3439 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _3450 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _533 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _534 = 1.0 - _390;
    float _535 = _531 * _534;
    float _536 = _532 * _534;
    float _537 = _533 * _534;
    float _542 = (_531 + (-0.039999999105930328369140625)) * _390;
    float _543 = (_532 + (-0.039999999105930328369140625)) * _390;
    float _544 = (_533 + (-0.039999999105930328369140625)) * _390;
    float _545 = _542 + 0.039999999105930328369140625;
    float _547 = _543 + 0.039999999105930328369140625;
    float _548 = _544 + 0.039999999105930328369140625;
    vec4 _557 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _478, cbSceneParam._m0[86u].y * _479));
    float _560 = _557.x * TEXCOORD.z;
    float _561 = dot(vec3(_383, _384, _385), vec3(_466, _467, _468));
    float _564 = _561 * 2.0;
    float _568 = (_564 * _383) - _466;
    float _569 = (_564 * _384) - _467;
    float _570 = (_564 * _385) - _468;
    float _574 = abs(dot(vec3(_466, _467, _468), vec3(_383, _384, _385)));
    float _3461 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _576 = sqrt(_386);
    float _589 = exp2((_576 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_576 * 3.0));
    float _595 = (1.0 - _589) * ((_576 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _596 = _589 * _576;
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _934;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _659 = fma(_632, cbModelParam._m0[26u].z, fma(_628, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _624));
        float _663 = fma(_632, cbModelParam._m0[27u].z, fma(_628, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _624));
        float _667 = fma(_632, cbModelParam._m0[28u].z, fma(_628, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _624));
        float _692 = _624 + _383;
        float _693 = _628 + _384;
        float _694 = _632 + _385;
        float _704 = fma(_694, cbModelParam._m0[26u].z, fma(_693, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _692)) - _659;
        float _705 = fma(_694, cbModelParam._m0[27u].z, fma(_693, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _692)) - _663;
        float _706 = fma(_694, cbModelParam._m0[28u].z, fma(_693, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _692)) - _667;
        float _710 = inversesqrt(dot(vec3(_704, _705, _706), vec3(_704, _705, _706)));
        float _723 = ((_710 * _704) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_659 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _724 = ((_710 * _705) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_663 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _725 = ((_710 * _706) / cbModelParam._m0[34u].z) + ((((((_667 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_723, _724, _725), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_723, _724, _725), 0.0);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_723, _724, _725), 0.0);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_723, _724, _725), 0.0);
        float _762 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_728.x + (-0.5));
        float _764 = _762 * (_728.y + (-0.5));
        float _765 = _762 * (_728.z + (-0.5));
        float _772 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _773 = _772 * (_735.x + (-0.5));
        float _774 = _772 * (_735.y + (-0.5));
        float _775 = _772 * (_735.z + (-0.5));
        float _782 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _783 = _782 * (_742.x + (-0.5));
        float _784 = _782 * (_742.y + (-0.5));
        float _785 = _782 * (_742.z + (-0.5));
        float _792 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _793 = _792 * (_749.x + (-0.5));
        float _794 = _792 * (_749.y + (-0.5));
        float _795 = _792 * (_749.z + (-0.5));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _799 = _763 * 0.5;
        float _800 = _773 * 0.5;
        float _801 = _783 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _816 = (dot(vec3(_383, _384, _385), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3487 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _826 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3498 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3509 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * (_828 + 1.0))) + _833) * _796;
        float _843 = _764 * 0.5;
        float _844 = _774 * 0.5;
        float _845 = _784 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _859 = (dot(vec3(_383, _384, _385), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _868 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3542 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_870 + 1.0))) + _875) * _797;
        float _885 = _765 * 0.5;
        float _886 = _775 * 0.5;
        float _887 = _785 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _901 = (dot(vec3(_383, _384, _385), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _910 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_798 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _912 = _911 * 2.0;
        float _916 = (1.0 - _911) / (_911 + 1.0);
        float _3575 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _926 = ((((1.0 - _917) * (_912 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_912 + 1.0))) + _917) * _798;
        _934 = _765;
        _936 = _764;
        _937 = _763;
        _938 = _775;
        _939 = _774;
        _940 = _773;
        _941 = _785;
        _942 = _784;
        _943 = _783;
        _944 = _798;
        _945 = _797;
        _946 = _796;
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
        _949 = cbModelParam._m0[36u].z * (isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)));
    }
    else
    {
        _934 = _935;
        _936 = _935;
        _937 = _935;
        _938 = _935;
        _939 = _935;
        _940 = _935;
        _941 = _935;
        _942 = _935;
        _943 = _935;
        _944 = _935;
        _945 = _935;
        _946 = _935;
        _947 = 0.0;
        _948 = 0.0;
        _949 = 0.0;
    }
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _975 = fma(_632, cbModelParam._m0[30u].z, fma(_628, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _624));
        float _979 = fma(_632, cbModelParam._m0[31u].z, fma(_628, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _624));
        float _983 = fma(_632, cbModelParam._m0[32u].z, fma(_628, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _624));
        float _1006 = _624 + _383;
        float _1007 = _628 + _384;
        float _1008 = _632 + _385;
        float _1018 = fma(_1008, cbModelParam._m0[30u].z, fma(_1007, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006)) - _975;
        float _1019 = fma(_1008, cbModelParam._m0[31u].z, fma(_1007, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006)) - _979;
        float _1020 = fma(_1008, cbModelParam._m0[32u].z, fma(_1007, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006)) - _983;
        float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
        float _1037 = ((_1024 * _1018) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_975 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1024 * _1019) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_979 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1024 * _1020) / cbModelParam._m0[35u].z) + ((((((_983 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        float _1074 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1041.x + (-0.5));
        float _1076 = _1074 * (_1041.y + (-0.5));
        float _1077 = _1074 * (_1041.z + (-0.5));
        float _1084 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1048.x + (-0.5));
        float _1086 = _1084 * (_1048.y + (-0.5));
        float _1087 = _1084 * (_1048.z + (-0.5));
        float _1094 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1055.x + (-0.5));
        float _1096 = _1094 * (_1055.y + (-0.5));
        float _1097 = _1094 * (_1055.z + (-0.5));
        float _1104 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1062.x + (-0.5));
        float _1106 = _1104 * (_1062.y + (-0.5));
        float _1107 = _1104 * (_1062.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_383, _384, _385), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3638 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1138 + 1.0))) + _1143) * _1108;
        float _1153 = _1076 * 0.5;
        float _1154 = _1086 * 0.5;
        float _1155 = _1096 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_383, _384, _385), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3671 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1180 + 1.0))) + _1185) * _1109;
        float _1195 = _1077 * 0.5;
        float _1196 = _1087 * 0.5;
        float _1197 = _1097 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_383, _384, _385), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3704 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1222 + 1.0))) + _1227) * _1110;
        _1244 = _1077;
        _1245 = _1076;
        _1246 = _1075;
        _1247 = _1087;
        _1248 = _1086;
        _1249 = _1085;
        _1250 = _1097;
        _1251 = _1096;
        _1252 = _1095;
        _1253 = _1110;
        _1254 = _1109;
        _1255 = _1108;
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
    }
    else
    {
        _1244 = _935;
        _1245 = _935;
        _1246 = _935;
        _1247 = _935;
        _1248 = _935;
        _1249 = _935;
        _1250 = _935;
        _1251 = _935;
        _1252 = _935;
        _1253 = _935;
        _1254 = _935;
        _1255 = _935;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
    }
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _947)) + _947;
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _948)) + _948;
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _949)) + _949;
    float _1291 = fma(_1270, cbSceneParam._m0[89u].z, fma(_1269, cbSceneParam._m0[89u].y, _1268 * cbSceneParam._m0[89u].x));
    float _1294 = fma(_1270, cbSceneParam._m0[90u].z, fma(_1269, cbSceneParam._m0[90u].y, _1268 * cbSceneParam._m0[90u].x));
    float _1297 = fma(_1270, cbSceneParam._m0[91u].z, fma(_1269, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1268));
    float _1312 = _568 * 0.5;
    float _1313 = _569 * 0.5;
    float _1314 = _570 * 0.5;
    float _1315 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1318 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1321 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1355;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1328 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_934, _938, _941, _944));
        float _1332 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_936, _939, _942, _945));
        float _1336 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_937, _940, _943, _946));
        float _1343 = dot(vec4(cbModelParam._m0[39u]), vec4(_1312, _1313, _1314, 1.0));
        _1355 = dot(vec3(isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1343) ? 0.0 : (isnan(0.0) ? _1343 : max(0.0, _1343))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1355 = 1.0;
    }
    float _1366;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1357 = dot(vec4(cbModelParam._m0[40u]), vec4(_1312, _1313, _1314, 1.0));
        _1366 = dot(vec3(isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1357) ? 0.0 : (isnan(0.0) ? _1357 : max(0.0, _1357))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1366 = 1.0;
    }
    float _1370 = (_1366 * cbModelParam._m0[1u].x) + (_1355 * (1.0 - cbModelParam._m0[1u].x));
    float _1380 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _386);
    float _1381 = isnan(_1380) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1380 : min(cbModelParam._m0[25u].z, _1380));
    float _1463;
    float _1465;
    float _1467;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1430 = fma(_632, cbModelParam._m0[13u].z, fma(_628, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _624)) + cbModelParam._m0[13u].w;
        float _1434 = fma(_632, cbModelParam._m0[14u].z, fma(_628, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _624)) + cbModelParam._m0[14u].w;
        float _1438 = fma(_632, cbModelParam._m0[15u].z, fma(_628, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _624)) + cbModelParam._m0[15u].w;
        float _1441 = fma(_570, cbModelParam._m0[13u].z, fma(_569, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _568));
        float _1444 = fma(_570, cbModelParam._m0[14u].z, fma(_569, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _568));
        float _1447 = fma(_570, cbModelParam._m0[15u].z, fma(_569, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _568));
        float _1475;
        if (_1441 > 0.0)
        {
            _1475 = abs((1.0 - _1430) / _1441);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1430 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1475 = frontier_phi_18_16_ladder;
        }
        float _1704;
        if (_1444 > 0.0)
        {
            _1704 = abs((1.0 - _1434) / _1444);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1434 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1704 = frontier_phi_27_23_ladder;
        }
        float _1961;
        if (_1447 > 0.0)
        {
            _1961 = abs((1.0 - _1438) / _1447);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1438 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1961 = frontier_phi_39_34_ladder;
        }
        float _1963 = isnan(_1704) ? _1475 : (isnan(_1475) ? _1704 : min(_1475, _1704));
        float _1964 = isnan(_1961) ? _1963 : (isnan(_1963) ? _1961 : min(_1963, _1961));
        float _1968 = (_1964 * _1441) + _1430;
        float _1969 = (_1964 * _1444) + _1434;
        float _1970 = (_1964 * _1447) + _1438;
        float _1971 = _1964 * 9.9999997473787516355514526367188e-05;
        float _1973 = (-1.0) - _1971;
        float _1975 = _1971 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1970 > _1975) || ((_1970 < _1973) || ((_1969 > _1975) || ((_1969 < _1973) || ((_1968 < _1973) || (_1968 > _1975))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2098 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1970, cbModelParam._m0[9u].z, fma(_1969, cbModelParam._m0[9u].y, _1968 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1970, cbModelParam._m0[10u].z, fma(_1969, cbModelParam._m0[10u].y, _1968 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1970, cbModelParam._m0[11u].z, fma(_1969, cbModelParam._m0[11u].y, _1968 * cbModelParam._m0[11u].x))), _1381);
            frontier_phi_17_39_ladder = _2098.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2098.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2098.x * cbModelParam._m0[1u].y;
        }
        _1463 = frontier_phi_17_39_ladder_2;
        _1465 = frontier_phi_17_39_ladder_1;
        _1467 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1451 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_568, _569, _570), _1381);
        _1463 = _1451.x * cbModelParam._m0[1u].y;
        _1465 = _1451.y * cbModelParam._m0[1u].y;
        _1467 = _1451.z * cbModelParam._m0[1u].y;
    }
    float _1471 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _386);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1471 : min(cbModelParam._m0[25u].w, _1471));
    float _1565;
    float _1567;
    float _1569;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1529 = fma(_632, cbModelParam._m0[21u].z, fma(_628, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _624)) + cbModelParam._m0[21u].w;
        float _1533 = fma(_632, cbModelParam._m0[22u].z, fma(_628, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _624)) + cbModelParam._m0[22u].w;
        float _1537 = fma(_632, cbModelParam._m0[23u].z, fma(_628, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _624)) + cbModelParam._m0[23u].w;
        float _1540 = fma(_570, cbModelParam._m0[21u].z, fma(_569, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _568));
        float _1543 = fma(_570, cbModelParam._m0[22u].z, fma(_569, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _568));
        float _1546 = fma(_570, cbModelParam._m0[23u].z, fma(_569, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _568));
        float _1709;
        if (_1540 > 0.0)
        {
            _1709 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1709 = frontier_phi_29_25_ladder;
        }
        float _1988;
        if (_1543 > 0.0)
        {
            _1988 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1988 = frontier_phi_41_36_ladder;
        }
        float _2201;
        if (_1546 > 0.0)
        {
            _2201 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2201 = frontier_phi_50_47_ladder;
        }
        float _2203 = isnan(_1988) ? _1709 : (isnan(_1709) ? _1988 : min(_1709, _1988));
        float _2204 = isnan(_2201) ? _2203 : (isnan(_2203) ? _2201 : min(_2203, _2201));
        float _2208 = (_2204 * _1540) + _1529;
        float _2209 = (_2204 * _1543) + _1533;
        float _2210 = (_2204 * _1546) + _1537;
        float _2211 = _2204 * 9.9999997473787516355514526367188e-05;
        float _2212 = (-1.0) - _2211;
        float _2214 = _2211 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2210 > _2214) || ((_2210 < _2212) || ((_2209 > _2214) || ((_2209 < _2212) || ((_2208 < _2212) || (_2208 > _2214))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2408 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2210, cbModelParam._m0[17u].z, fma(_2209, cbModelParam._m0[17u].y, _2208 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2210, cbModelParam._m0[18u].z, fma(_2209, cbModelParam._m0[18u].y, _2208 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2210, cbModelParam._m0[19u].z, fma(_2209, cbModelParam._m0[19u].y, _2208 * cbModelParam._m0[19u].x))), _1472);
            frontier_phi_26_50_ladder = _2408.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2408.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2408.x * cbModelParam._m0[1u].z;
        }
        _1565 = frontier_phi_26_50_ladder_2;
        _1567 = frontier_phi_26_50_ladder_1;
        _1569 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1549 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_568, _569, _570), _1472);
        _1565 = _1549.x * cbModelParam._m0[1u].z;
        _1567 = _1549.y * cbModelParam._m0[1u].z;
        _1569 = _1549.z * cbModelParam._m0[1u].z;
    }
    float _1582 = (((_595 * _545) + _596) * _560) * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1584 = (((_595 * _547) + _596) * _560) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1586 = (((_595 * _548) + _596) * _560) * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1589 = fma(_1586, cbSceneParam._m0[89u].z, fma(_1584, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1592 = fma(_1586, cbSceneParam._m0[90u].z, fma(_1584, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1595 = fma(_1586, cbSceneParam._m0[91u].z, fma(_1584, cbSceneParam._m0[91u].y, _1582 * cbSceneParam._m0[91u].x));
    vec4 _1603 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_478, _479));
    float _1605 = _1603.w;
    float _1617 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1605);
    float _1618 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1605);
    float _1619 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1605);
    uvec4 _1623 = floatBitsToUint(cbInstanceData._m0[_519 + 5u]);
    uint _1625 = _1623.x * 14u;
    uint _1626 = _1625 + 13u;
    float _1633 = _560 + (-1.0);
    float _1638 = (cbLight._m0[_1626].x * _1633) + 1.0;
    float _1639 = (cbLight._m0[_1626].y * _1633) + 1.0;
    float _1640 = (cbLight._m0[_1626].z * _1633) + 1.0;
    float _1641 = (cbLight._m0[_1626].w * _1633) + 1.0;
    uint _1642 = _1625 + 5u;
    float _1648 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
    uint _1652 = _1625 + 4u;
    float _1662 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
    uint _1666 = _1625 | 1u;
    float _1677 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_383, _384, _385));
    float _1680 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_383, _384, _385));
    float _3840 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _3851 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1685 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * 0.3183098733425140380859375;
    float _1687 = (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * 0.3183098733425140380859375;
    float _1694 = ((cbLight._m0[_1642].x * _1648) * _1687) + (((cbLight._m0[_1652].x * _1617) * _1662) * _1685);
    float _1695 = ((_1648 * cbLight._m0[_1642].y) * _1687) + (((cbLight._m0[_1652].y * _1618) * _1662) * _1685);
    float _1696 = ((_1648 * cbLight._m0[_1642].z) * _1687) + (((cbLight._m0[_1652].z * _1619) * _1662) * _1685);
    uvec4 _1701 = floatBitsToUint(cbLight._m0[_1625 + 12u]);
    bool _1703 = _1701.x == 0u;
    float _1714;
    float _1716;
    float _1718;
    if (_1703)
    {
        _1714 = _1694;
        _1716 = _1695;
        _1718 = _1696;
    }
    else
    {
        uint _1722 = _1625 + 6u;
        float _1738 = (dot(vec3(cbLight._m0[_1625 + 2u].xyz), vec3(_383, _384, _385)) * 0.5) + 0.5;
        float _1739 = _1738 * _1738;
        float _3862 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1741 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _1714 = (((cbLight._m0[_1722].x * 0.3183098733425140380859375) * _1740) * _1741) + _1694;
        _1716 = (((cbLight._m0[_1722].y * 0.3183098733425140380859375) * _1740) * _1741) + _1695;
        _1718 = (((cbLight._m0[_1722].z * 0.3183098733425140380859375) * _1740) * _1741) + _1696;
    }
    bool _1721 = _1701.y == 0u;
    float _1759;
    float _1761;
    float _1763;
    if (_1721)
    {
        _1759 = _1714;
        _1761 = _1716;
        _1763 = _1718;
    }
    else
    {
        uint _1932 = _1625 + 7u;
        float _1948 = (dot(vec3(cbLight._m0[_1625 + 3u].xyz), vec3(_383, _384, _385)) * 0.5) + 0.5;
        float _1949 = _1948 * _1948;
        float _3878 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1950 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1951 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
        _1759 = (((cbLight._m0[_1932].x * 0.3183098733425140380859375) * _1950) * _1951) + _1714;
        _1761 = (((cbLight._m0[_1932].y * 0.3183098733425140380859375) * _1950) * _1951) + _1716;
        _1763 = (((cbLight._m0[_1932].z * 0.3183098733425140380859375) * _1950) * _1951) + _1718;
    }
    uint _1766 = _1625 + 8u;
    float _1779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1625].w)) * _386) * 0.949999988079071044921875);
    float _1780 = _1779 * _1779;
    float _1781 = cbLight._m0[_1625].x + _466;
    float _1782 = cbLight._m0[_1625].y + _467;
    float _1783 = cbLight._m0[_1625].z + _468;
    float _1787 = inversesqrt(dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783)));
    float _1788 = _1787 * _1781;
    float _1789 = _1787 * _1782;
    float _1790 = _1787 * _1783;
    float _1791 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1625].xyz));
    float _3894 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _1795 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _1796 = dot(vec3(_383, _384, _385), vec3(_1788, _1789, _1790));
    float _3916 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _1800 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_1788, _1789, _1790));
    float _3927 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1804 = _1780 * _1780;
    float _1808 = ((_1799 * _1799) * (_1804 + (-1.0))) + 1.0;
    float _1816 = exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0);
    float _1817 = 0.959999978542327880859375 - _542;
    float _1819 = 0.959999978542327880859375 - _543;
    float _1820 = 0.959999978542327880859375 - _544;
    float _1827 = 1.0 - _1780;
    float _1838 = (0.5 / (((_1795 * ((_1794 * _1827) + _1780)) + 9.9999999392252902907785028219223e-09) + (((_1795 * _1827) + _1780) * _1794))) * _1794;
    float _3938 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1804 / ((_1808 * _1808) * 3.141590118408203125));
    uint _1854 = _1625 + 9u;
    float _1865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1666].w)) * _386) * 0.949999988079071044921875);
    float _1866 = _1865 * _1865;
    float _1867 = cbLight._m0[_1666].x + _466;
    float _1868 = cbLight._m0[_1666].y + _467;
    float _1869 = cbLight._m0[_1666].z + _468;
    float _1873 = inversesqrt(dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869)));
    float _1874 = _1873 * _1867;
    float _1875 = _1873 * _1868;
    float _1876 = _1873 * _1869;
    float _1877 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1666].xyz));
    float _3949 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _1881 = dot(vec3(_383, _384, _385), vec3(_1874, _1875, _1876));
    float _3960 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _1885 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_1874, _1875, _1876));
    float _3971 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1889 = _1866 * _1866;
    float _1893 = ((_1884 * _1884) * (_1889 + (-1.0))) + 1.0;
    float _1900 = exp2(log2(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * 5.0);
    float _1907 = 1.0 - _1866;
    float _1917 = (0.5 / (((_1795 * ((_1880 * _1907) + _1866)) + 9.9999999392252902907785028219223e-09) + (((_1795 * _1907) + _1866) * _1880))) * _1880;
    float _3982 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1919 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1889 / ((_1893 * _1893) * 3.141590118408203125));
    float _1929 = (((((_1900 * _1817) + _545) * cbLight._m0[_1854].x) * _1919) * _1648) + ((((cbLight._m0[_1766].x * _1617) * ((_1816 * _1817) + _545)) * _1840) * _1662);
    float _1930 = (((((_1900 * _1819) + _547) * cbLight._m0[_1854].y) * _1919) * _1648) + ((((cbLight._m0[_1766].y * _1618) * ((_1816 * _1819) + _547)) * _1840) * _1662);
    float _1931 = (((((_1900 * _1820) + _548) * cbLight._m0[_1854].z) * _1919) * _1648) + ((((cbLight._m0[_1766].z * _1619) * ((_1816 * _1820) + _548)) * _1840) * _1662);
    float _1993;
    float _1995;
    float _1997;
    if (_1703)
    {
        _1993 = _1929;
        _1995 = _1930;
        _1997 = _1931;
    }
    else
    {
        uint _1999 = _1625 + 2u;
        uint _2003 = _1625 + 10u;
        float _2017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _386) * 0.949999988079071044921875);
        float _2018 = _2017 * _2017;
        float _2019 = cbLight._m0[_1999].x + _466;
        float _2020 = cbLight._m0[_1999].y + _467;
        float _2021 = cbLight._m0[_1999].z + _468;
        float _2025 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
        float _2026 = _2025 * _2019;
        float _2027 = _2025 * _2020;
        float _2028 = _2025 * _2021;
        float _2029 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1999].xyz));
        float _3993 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2032 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _2033 = dot(vec3(_383, _384, _385), vec3(_2026, _2027, _2028));
        float _4004 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2036 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _2037 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2026, _2027, _2028));
        float _4015 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2041 = _2018 * _2018;
        float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
        float _2052 = exp2(log2(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * 5.0);
        float _2059 = 1.0 - _2018;
        float _2069 = (0.5 / (((_1795 * ((_2032 * _2059) + _2018)) + 9.9999999392252902907785028219223e-09) + (((_1795 * _2059) + _2018) * _2032))) * _2032;
        float _4026 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2071 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
        float _2072 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _1993 = (((((_2052 * _1817) + _545) * cbLight._m0[_2003].x) * _2071) * _2072) + _1929;
        _1995 = (((((_2052 * _1819) + _547) * cbLight._m0[_2003].y) * _2071) * _2072) + _1930;
        _1997 = (((((_2052 * _1820) + _548) * cbLight._m0[_2003].z) * _2071) * _2072) + _1931;
    }
    float _2107;
    float _2109;
    float _2111;
    if (_1721)
    {
        _2107 = _1993;
        _2109 = _1995;
        _2111 = _1997;
    }
    else
    {
        uint _2118 = _1625 + 3u;
        uint _2122 = _1625 + 11u;
        float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _386) * 0.949999988079071044921875);
        float _2137 = _2136 * _2136;
        float _2138 = cbLight._m0[_2118].x + _466;
        float _2139 = cbLight._m0[_2118].y + _467;
        float _2140 = cbLight._m0[_2118].z + _468;
        float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
        float _2145 = _2144 * _2138;
        float _2146 = _2144 * _2139;
        float _2147 = _2144 * _2140;
        float _2148 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_2118].xyz));
        float _4042 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2151 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2152 = dot(vec3(_383, _384, _385), vec3(_2145, _2146, _2147));
        float _4053 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2155 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _2156 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2145, _2146, _2147));
        float _4064 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2160 = _2137 * _2137;
        float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
        float _2171 = exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0);
        float _2178 = 1.0 - _2137;
        float _2188 = (0.5 / (((_1795 * ((_2151 * _2178) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_1795 * _2178) + _2137) * _2151))) * _2151;
        float _4075 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2190 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
        float _2191 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
        _2107 = (((((_2171 * _1817) + _545) * cbLight._m0[_2122].x) * _2190) * _2191) + _1993;
        _2109 = (((((_2171 * _1819) + _547) * cbLight._m0[_2122].y) * _2190) * _2191) + _1995;
        _2111 = (((((_2171 * _1820) + _548) * cbLight._m0[_2122].z) * _2190) * _2191) + _1997;
    }
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    if (_1623.y == 0u)
    {
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2266;
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2266;
        float _2269 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2266;
        uvec4 _2281 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2282 = _2281.x;
        uint _2293 = uint((float(_2281.y) * floor(float(uint(cbSceneParam._m0[85u].y * _479) / _2282))) + floor(float(uint(cbSceneParam._m0[85u].x * _478) / _2282)));
        float _2303 = (log2(_2269 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2304 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        uint _2307 = uint(isnan(14.0) ? _2304 : (isnan(_2304) ? 14.0 : min(_2304, 14.0)));
        uvec4 _2312 = texelFetch(g_lightClusterGridBuffer, int(((_2307 << 2u) + (_2293 << 6u)) >> 2u));
        uint _2313 = _2312.x;
        uint _2314 = _2281.z;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        if (((((1u << ((_2314 >> 4u) & 15u)) + 4294967295u) & _2313) == 0u) || ((_2314 & 240u) == 0u))
        {
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
        }
        else
        {
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            float _2570 = 0.0;
            uint _2571 = 0u;
            uint _2580;
            bool _2581;
            for (;;)
            {
                _2580 = texelFetch(g_lightClassification, int((((_2307 << 5u) + (_2293 << 9u)) + (_2571 << 2u)) >> 2u)).x;
                _2581 = _2580 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2581)
                {
                    frontier_phi_67_pred = _2567;
                    frontier_phi_67_pred_1 = _2570;
                    frontier_phi_67_pred_2 = _2569;
                    frontier_phi_67_pred_3 = _2568;
                    frontier_phi_67_pred_4 = _2566;
                    frontier_phi_67_pred_5 = _2565;
                }
                else
                {
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    uint _2716;
                    _2710 = _2565;
                    _2711 = _2566;
                    _2712 = _2567;
                    _2713 = _2568;
                    _2714 = _2569;
                    _2715 = _2570;
                    _2716 = _2580;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    for (;;)
                    {
                        uint _2720 = uint(findLSB(_2716)) + (_2571 << 5u);
                        uint _2717 = (_2716 + 4294967295u) & _2716;
                        uint _2722 = _2720 * 48u;
                        vec4 _2736 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2722)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 3u)).x));
                        uint _2742 = (_2720 * 48u) + 4u;
                        vec4 _2755 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2742)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 3u)).x));
                        uint _2761 = (_2720 * 48u) + 8u;
                        vec3 _2772 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2761)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 2u)).x));
                        float _2776 = _2736.x - _2267;
                        float _2777 = _2736.y - _2268;
                        float _2778 = _2736.z - _2269;
                        float _2779 = dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778));
                        float _2782 = inversesqrt(_2779);
                        float _2783 = _2782 * _2776;
                        float _2784 = _2782 * _2777;
                        float _2785 = _2782 * _2778;
                        float _2786 = dot(vec3(_500, _503, _506), vec3(_2783, _2784, _2785));
                        float _2791 = 1.0 - (_2779 * _2736.w);
                        float _4101 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2792 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2793 = sqrt(_2779) * _2755.w;
                        float _2796 = 1.39999997615814208984375 / (_2793 + 1.39999997615814208984375);
                        float _2797 = _2796 * _2796;
                        float _2800 = ((1.0 - _2797) * _2786) + _2797;
                        float _2803 = _2793 * _2793;
                        float _2807 = ((isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0))) * _2792) / ((_2803 * 0.699999988079071044921875) + 1.0);
                        float _2811 = (-0.0) - _2267;
                        float _2812 = (-0.0) - _2268;
                        float _2813 = (-0.0) - _2269;
                        float _2817 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
                        float _2818 = _2817 * _2811;
                        float _2819 = _2817 * _2812;
                        float _2820 = _2817 * _2813;
                        float _2828 = exp2(log2(1.0 / ((_2803 * 3.5) + 5.0)) * 0.25);
                        float _2829 = 1.0 - _576;
                        float _2836 = sqrt(1.0 - ((1.0 - (_2829 * _2829)) * (1.0 - (_2828 * _2828))));
                        float _2837 = _2836 * _2836;
                        float _2838 = _2837 * _2837;
                        float _2839 = _2818 + _2783;
                        float _2840 = _2819 + _2784;
                        float _2841 = _2820 + _2785;
                        float _2845 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
                        float _2849 = dot(vec3(_500, _503, _506), vec3(_2818, _2819, _2820));
                        float _4117 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2852 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                        float _2853 = dot(vec3(_500, _503, _506), vec3(_2845 * _2839, _2845 * _2840, _2845 * _2841));
                        float _4128 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2856 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
                        float _2860 = ((_2856 * _2856) * (_2838 + (-1.0))) + 1.0;
                        float _2861 = _2796 * _2837;
                        float _2862 = _2861 * _2861;
                        float _2865 = ((1.0 - _2862) * _2786) + _2862;
                        float _4139 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2866 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                        float _2867 = 1.0 - _2837;
                        float _2877 = (0.5 / (((_2866 * ((_2852 * _2867) + _2837)) + 9.9999999392252902907785028219223e-09) + (((_2866 * _2867) + _2837) * _2852))) * _2866;
                        float _4150 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2888 = (((_2838 * 3.1415927410125732421875) * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) / ((_2860 * _2860) * ((_2803 * 2.1991131305694580078125) + 3.141590118408203125))) * _2792;
                        _2640 = (_2807 * _2755.x) + _2713;
                        _2641 = (_2807 * _2755.y) + _2714;
                        _2642 = (_2807 * _2755.z) + _2715;
                        _2637 = (_2888 * _2772.x) + _2710;
                        _2638 = (_2888 * _2772.y) + _2711;
                        _2639 = (_2888 * _2772.z) + _2712;
                        if (_2717 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2710 = _2637;
                            _2711 = _2638;
                            _2712 = _2639;
                            _2713 = _2640;
                            _2714 = _2641;
                            _2715 = _2642;
                            _2716 = _2717;
                        }
                    }
                    frontier_phi_67_pred = _2639;
                    frontier_phi_67_pred_1 = _2642;
                    frontier_phi_67_pred_2 = _2641;
                    frontier_phi_67_pred_3 = _2640;
                    frontier_phi_67_pred_4 = _2638;
                    frontier_phi_67_pred_5 = _2637;
                }
                _2418 = frontier_phi_67_pred;
                _2424 = frontier_phi_67_pred_1;
                _2422 = frontier_phi_67_pred_2;
                _2420 = frontier_phi_67_pred_3;
                _2416 = frontier_phi_67_pred_4;
                _2414 = frontier_phi_67_pred_5;
                uint _2572 = _2571 + 1u;
                if (_2572 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2565 = _2414;
                    _2566 = _2416;
                    _2567 = _2418;
                    _2568 = _2420;
                    _2569 = _2422;
                    _2570 = _2424;
                    _2571 = _2572;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
        }
        uvec4 _2427 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2428 = _2427.z;
        uint _2430 = (_2428 >> 8u) & 15u;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        if (((4294967295u << _2430) & _2313) == 0u)
        {
            _2533 = _2413;
            _2535 = _2415;
            _2537 = _2417;
            _2539 = _2419;
            _2541 = _2421;
            _2543 = _2423;
        }
        else
        {
            float _2558 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
            float _2559 = _2558 * _2267;
            float _2560 = _2558 * _2268;
            float _2561 = _2558 * _2269;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2430 < ((_2428 >> 12u) & 15u))
            {
                float _2534;
                float _2536;
                float _2538;
                float _2540;
                float _2542;
                float _2544;
                float _2693 = _2413;
                float _2694 = _2415;
                float _2695 = _2417;
                float _2696 = _2419;
                float _2697 = _2421;
                float _2698 = _2423;
                uint _2699 = _2430;
                uint _2708;
                bool _2709;
                for (;;)
                {
                    _2708 = texelFetch(g_lightClassification, int((((_2307 << 5u) + (_2293 << 9u)) + (_2699 << 2u)) >> 2u)).x;
                    _2709 = _2708 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2709)
                    {
                        frontier_phi_78_pred = _2698;
                        frontier_phi_78_pred_1 = _2697;
                        frontier_phi_78_pred_2 = _2696;
                        frontier_phi_78_pred_3 = _2695;
                        frontier_phi_78_pred_4 = _2694;
                        frontier_phi_78_pred_5 = _2693;
                    }
                    else
                    {
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _2915 = _2693;
                        float _2916 = _2694;
                        float _2917 = _2695;
                        float _2918 = _2696;
                        float _2919 = _2697;
                        float _2920 = _2698;
                        uint _2921 = _2708;
                        uint _2922;
                        vec4 _2947;
                        float _2948;
                        vec4 _2963;
                        vec3 _2975;
                        vec4 _2991;
                        vec4 _3007;
                        float _3054;
                        bool _3055;
                        for (;;)
                        {
                            uint _2932 = ((_2699 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2921));
                            _2922 = (_2921 + 4294967295u) & _2921;
                            uint _2934 = _2932 * 40u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            _2948 = _2947.w;
                            uint _2950 = (_2932 * 40u) + 4u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2965 = (_2932 * 40u) + 8u;
                            _2975 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x));
                            uint _2978 = (_2932 * 40u) + 16u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            uint _2994 = (_2932 * 40u) + 20u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3010 = (_2932 * 40u) + 24u;
                            vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3029 = (_2932 * 40u) + 28u;
                            vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            _3054 = fma(_2269, _3042.z, fma(_2268, _3042.y, _3042.x * _2267)) + _3042.w;
                            _3055 = !((fma(_2269, _3023.z, fma(_2268, _3023.y, _3023.x * _2267)) + _3023.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3055)
                            {
                                float _3082 = _2947.x - _2267;
                                float _3083 = _2947.y - _2268;
                                float _3084 = _2947.z - _2269;
                                float _3085 = dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084));
                                float _3088 = inversesqrt(_3085);
                                float _3089 = _3088 * _3082;
                                float _3090 = _3088 * _3083;
                                float _3091 = _3088 * _3084;
                                float _3095 = 1.0 - (_3085 / (_2948 * _2948));
                                float _4161 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                                float _3100 = sqrt(_3085) * _2963.w;
                                float _3102 = 1.39999997615814208984375 / (_3100 + 1.39999997615814208984375);
                                float _3103 = _3102 * _3102;
                                float _3106 = ((1.0 - _3103) * dot(vec3(_3089, _3090, _3091), vec3(_500, _503, _506))) + _3103;
                                float _3109 = _3100 * _3100;
                                float _3113 = (fma(_2269, _2991.z, fma(_2268, _2991.y, _2991.x * _2267)) + _2991.w) / _3054;
                                float _3114 = (fma(_2269, _3007.z, fma(_2268, _3007.y, _3007.x * _2267)) + _3007.w) / _3054;
                                float _3118 = 1.0 - dot(vec2(_3113, _3114), vec2(_3113, _3114));
                                float _4177 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3119 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3120 = _3119 * (((isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))) * _3096) / ((_3109 * 0.699999988079071044921875) + 1.0));
                                float _3132 = exp2(log2(1.0 / ((_3109 * 3.5) + 5.0)) * 0.25);
                                float _3133 = 1.0 - _576;
                                float _3140 = sqrt(1.0 - ((1.0 - (_3133 * _3133)) * (1.0 - (_3132 * _3132))));
                                float _3141 = _3140 * _3140;
                                float _3142 = _3141 * _3141;
                                float _3143 = _3089 - _2559;
                                float _3144 = _3090 - _2560;
                                float _3145 = _3091 - _2561;
                                float _3149 = inversesqrt(dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145)));
                                float _3153 = dot(vec3(_500, _503, _506), vec3((-0.0) - _2559, (-0.0) - _2560, (-0.0) - _2561));
                                float _4188 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3156 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                                float _3157 = dot(vec3(_500, _503, _506), vec3(_3149 * _3143, _3149 * _3144, _3149 * _3145));
                                float _4199 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3160 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                                float _3164 = ((_3160 * _3160) * (_3142 + (-1.0))) + 1.0;
                                float _3165 = _3102 * _3141;
                                float _3166 = _3165 * _3165;
                                float _3172 = ((1.0 - _3166) * dot(vec3(_500, _503, _506), vec3(_3089, _3090, _3091))) + _3166;
                                float _4210 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3174 = 1.0 - _3141;
                                float _3184 = (0.5 / (((_3173 * ((_3156 * _3174) + _3141)) + 9.9999999392252902907785028219223e-09) + (((_3173 * _3174) + _3141) * _3156))) * _3173;
                                float _4221 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3194 = (_3119 * _3096) * (((_3142 * 3.1415927410125732421875) * (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) / ((_3164 * _3164) * ((_3109 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3120 * _2963.z;
                                frontier_phi_84_pred_1 = _3120 * _2963.y;
                                frontier_phi_84_pred_2 = _3120 * _2963.x;
                                frontier_phi_84_pred_3 = _3194 * _2975.z;
                                frontier_phi_84_pred_4 = _3194 * _2975.y;
                                frontier_phi_84_pred_5 = _3194 * _2975.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3203 = frontier_phi_84_pred;
                            _3202 = frontier_phi_84_pred_1;
                            _3201 = frontier_phi_84_pred_2;
                            _3200 = frontier_phi_84_pred_3;
                            _3199 = frontier_phi_84_pred_4;
                            _3198 = frontier_phi_84_pred_5;
                            _2905 = _3201 + _2918;
                            _2906 = _3202 + _2919;
                            _2907 = _3203 + _2920;
                            _2902 = _3198 + _2915;
                            _2903 = _3199 + _2916;
                            _2904 = _3200 + _2917;
                            if (_2922 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2922;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2907;
                        frontier_phi_78_pred_1 = _2906;
                        frontier_phi_78_pred_2 = _2905;
                        frontier_phi_78_pred_3 = _2904;
                        frontier_phi_78_pred_4 = _2903;
                        frontier_phi_78_pred_5 = _2902;
                    }
                    _2544 = frontier_phi_78_pred;
                    _2542 = frontier_phi_78_pred_1;
                    _2540 = frontier_phi_78_pred_2;
                    _2538 = frontier_phi_78_pred_3;
                    _2536 = frontier_phi_78_pred_4;
                    _2534 = frontier_phi_78_pred_5;
                    uint _2700 = _2699 + 1u;
                    if (_2700 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2693 = _2534;
                        _2694 = _2536;
                        _2695 = _2538;
                        _2696 = _2540;
                        _2697 = _2542;
                        _2698 = _2544;
                        _2699 = _2700;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2540;
                frontier_phi_59_60_ladder_1 = _2544;
                frontier_phi_59_60_ladder_2 = _2542;
                frontier_phi_59_60_ladder_3 = _2538;
                frontier_phi_59_60_ladder_4 = _2536;
                frontier_phi_59_60_ladder_5 = _2534;
            }
            else
            {
                frontier_phi_59_60_ladder = _2419;
                frontier_phi_59_60_ladder_1 = _2423;
                frontier_phi_59_60_ladder_2 = _2421;
                frontier_phi_59_60_ladder_3 = _2417;
                frontier_phi_59_60_ladder_4 = _2415;
                frontier_phi_59_60_ladder_5 = _2413;
            }
            _2533 = frontier_phi_59_60_ladder_5;
            _2535 = frontier_phi_59_60_ladder_4;
            _2537 = frontier_phi_59_60_ladder_3;
            _2539 = frontier_phi_59_60_ladder;
            _2541 = frontier_phi_59_60_ladder_2;
            _2543 = frontier_phi_59_60_ladder_1;
        }
        float _2548 = isnan(1.0) ? _560 : (isnan(_560) ? 1.0 : min(_560, 1.0));
        _2325 = (_2548 * _2539) + _1759;
        _2327 = (_2548 * _2541) + _1761;
        _2329 = (_2548 * _2543) + _1763;
        _2331 = ((_2533 * _545) * _2548) + _2107;
        _2333 = ((_2535 * _547) * _2548) + _2109;
        _2335 = ((_2537 * _548) * _2548) + _2111;
    }
    else
    {
        _2325 = _1759;
        _2327 = _1761;
        _2329 = _1763;
        _2331 = _2107;
        _2333 = _2109;
        _2335 = _2111;
    }
    float _4237 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4248 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4259 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _2352 = ((isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2325 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _560))) + ((_2331 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1370)) * cbPerFrame._m0[3u].x);
    float _2353 = ((isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2327 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _560))) + ((_2333 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _1370)) * cbPerFrame._m0[3u].x);
    float _2354 = ((isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2329 + ((isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))) * _560))) + ((_2335 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _1370)) * cbPerFrame._m0[3u].x);
    uint _2355 = _519 + 6u;
    float _2363 = _478 / cbSceneParam._m0[86u].x;
    float _2364 = _479 / cbSceneParam._m0[86u].y;
    vec4 _2378 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, (log2((isnan(cbSceneParam._m0[77u].w) ? _410 : (isnan(_410) ? cbSceneParam._m0[77u].w : min(_410, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2380 = _2378.x;
    float _2381 = _2378.y;
    float _2382 = _2378.z;
    float _2383 = _2378.w;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    if (_410 > cbSceneParam._m0[78u].w)
    {
        float _2438 = isnan(_410) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _410 : min(cbSceneParam._m0[80u].w, _410));
        float _2439 = _2438 / _410;
        float _2450 = _2439 * _459;
        float _2451 = _460 * _2439;
        float _2452 = (-0.0) - _2451;
        float _2453 = _2439 * _461;
        float _2455 = (cbSceneParam._m0[77u].w * _2452) / _2438;
        float _2456 = _2455 + cbSceneParam._m0[79u].w;
        float _2457 = cbSceneParam._m0[79u].w - _2451;
        float _2463 = sqrt(((_2450 * _2450) + (_2451 * _2451)) + (_2453 * _2453));
        float _2466 = (1.0 - (cbSceneParam._m0[77u].w / _2438)) * _2463;
        float _2471 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2473 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2650;
        if (abs((_2452 - _2455) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2650 = ((((_2456 > 0.0) ? exp2(_2471 * _2456) : (2.0 - exp2(_2473 * _2456))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2466;
        }
        else
        {
            float _2594 = 1.0 / cbSceneParam._m0[80u].x;
            float _2595 = isnan(_2457) ? _2456 : (isnan(_2456) ? _2457 : max(_2456, _2457));
            float _2596 = isnan(_2457) ? _2456 : (isnan(_2456) ? _2457 : min(_2456, _2457));
            float _2605 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : min(_2595, 0.0));
            float _2606 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : min(_2596, 0.0));
            _2650 = ((abs(_2463 / _2452) * cbSceneParam._m0[80u].y) * ((((_2605 - _2606) * 2.0) - ((exp2(_2471 * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0)))) - exp2(_2471 * (isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0))))) * _2594)) - ((exp2(_2473 * _2605) - exp2(_2473 * _2606)) * _2594))) + (_2466 * cbSceneParam._m0[80u].z);
        }
        vec4 _2652 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, 1.0), 0.0);
        float _2661 = exp2((_2650 * (-1.44269502162933349609375)) * (1.0 - _2652.w));
        float _2662 = log2(_2661);
        float _2678 = log2(_2383);
        _2475 = (exp2(_2678 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2662 * cbSceneParam._m0[78u].x)) * _2652.x) / cbSceneParam._m0[78u].x)) + _2380;
        _2477 = (exp2(_2678 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2662 * cbSceneParam._m0[78u].y)) * _2652.y) / cbSceneParam._m0[78u].y)) + _2381;
        _2479 = (exp2(_2678 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2662 * cbSceneParam._m0[78u].z)) * _2652.z) / cbSceneParam._m0[78u].z)) + _2382;
        _2481 = _2661 * _2383;
    }
    else
    {
        _2475 = _2380;
        _2477 = _2381;
        _2479 = _2382;
        _2481 = _2383;
    }
    bool _2688;
    vec4 _2491;
    vec4 _2513;
    float _2515;
    float _2519;
    float _2520;
    float _2521;
    float _2522;
    bool _2532;
    for (;;)
    {
        _2491 = cbMatDynParam._m0[0u];
        float _2493 = roundEven(_2491.y);
        bool _2494 = _2493 == 3.0;
        float _2495 = log2(_2481);
        float _2502 = exp2(_2495 * cbSceneParam._m0[78u].x) * _2352;
        float _2503 = exp2(_2495 * cbSceneParam._m0[78u].y) * _2353;
        float _2504 = exp2(_2495 * cbSceneParam._m0[78u].z) * _2354;
        float _2511 = _472 + (-0.5);
        _2513 = cbMtdParam._m0[1u];
        _2515 = _2513.y * _2511;
        float _2518 = (_2493 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2519 = _2518 * (_2494 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2475)));
        _2520 = _2518 * (_2494 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2477)));
        _2521 = _2518 * (_2494 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2479)));
        _2522 = _2511 * 0.999000012874603271484375;
        _2532 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2532)
        {
            if ((cbInstanceData._m0[_519 + 7u].x + _2522) < 0.5)
            {
                _2688 = true;
                break;
            }
        }
        uint _2629 = _521 + uint(_2491.w);
        if ((cbInstanceData._m0[_2629].w < 1.0) && ((cbInstanceData._m0[_2629].w + _2522) < 0.5))
        {
            _2688 = true;
            break;
        }
        if ((_2515 + _297) < _2513.x)
        {
            _2688 = true;
            break;
        }
        _2688 = false;
        break;
    }
    float _2893;
    if (_2688)
    {
        discard_state = true;
        _2893 = 0.0;
    }
    else
    {
        _2893 = cbInstanceData._m0[_2355].w;
    }
    SV_Target.x = _2519;
    SV_Target.y = _2520;
    SV_Target.z = _2521;
    SV_Target.w = _2893;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2355].w;
    discard_exit();
}


