#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _902;
float _3550;
float _3551;
float _3552;
float _3553;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _291 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _297 = _291.w;
    float _298 = _291.x * cbMtdParam._m0[9u].x;
    float _299 = _291.y * cbMtdParam._m0[9u].y;
    float _300 = _291.z * cbMtdParam._m0[9u].z;
    vec4 _312 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _316 = _312.z;
    float _320 = (_312.x * 2.0) + (-1.0);
    float _322 = (_312.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_320, _322), vec2(_320, _322));
    float _3562 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))));
    float _341 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].x;
    float _345 = gl_FragCoord.x * 0.125;
    float _347 = gl_FragCoord.y * 0.125;
    float _358 = fma(_329, _215, fma(_322, _207 * TANGENT.x, (_193 * _186) * _320));
    float _361 = fma(_329, _216, fma(_322, _207 * TANGENT.y, (_193 * _187) * _320));
    float _364 = fma(_329, _217, fma(_322, _207 * TANGENT.z, (_193 * _188) * _320));
    float _368 = inversesqrt(dot(vec3(_358, _361, _364), vec3(_358, _361, _364)));
    float _369 = _368 * _358;
    float _370 = _368 * _361;
    float _371 = _368 * _364;
    float _3578 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _372 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3600 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3611 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    if (!(((sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273)) - cbMtdParam._m0[10u].x) / (isnan(0.001000000047497451305389404296875) ? _341 : (isnan(_341) ? 0.001000000047497451305389404296875 : max(_341, 0.001000000047497451305389404296875)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_345, _347)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _395 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _444 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _435);
    float _445 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _435);
    float _446 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _435);
    float _450 = inversesqrt(dot(vec3(_444, _445, _446), vec3(_444, _445, _446)));
    float _451 = _444 * _450;
    float _452 = _445 * _450;
    float _453 = _446 * _450;
    vec4 _455 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_345, _347));
    float _457 = _455.w;
    float _463 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _464 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _485 = fma(_371, cbSceneParam._m0[5u].z, fma(_370, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _369));
    float _488 = fma(_371, cbSceneParam._m0[6u].z, fma(_370, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _369));
    float _491 = fma(_371, cbSceneParam._m0[7u].z, fma(_370, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _369));
    uint _504 = uint(roundEven(NORMAL.w)) * 13u;
    uint _506 = _504 + 9u;
    uint _507 = _506 + uint(cbMatDynParam._m0[0u].w);
    float _513 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * cbInstanceData._m0[_507].x;
    float _514 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_507].y;
    float _515 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) * cbInstanceData._m0[_507].z;
    float _3622 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _516 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _518 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    vec4 _527 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _463, cbSceneParam._m0[86u].y * _464));
    float _530 = _527.x * TEXCOORD.z;
    float _531 = dot(vec3(_369, _370, _371), vec3(_451, _452, _453));
    float _534 = _531 * 2.0;
    float _538 = (_534 * _369) - _451;
    float _539 = (_534 * _370) - _452;
    float _540 = (_534 * _371) - _453;
    float _544 = abs(dot(vec3(_451, _452, _453), vec3(_369, _370, _371)));
    float _3655 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _546 = sqrt(_372);
    float _559 = exp2((_546 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_546 * 3.0));
    float _591 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _595 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _599 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _901;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _626 = fma(_599, cbModelParam._m0[26u].z, fma(_595, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _591));
        float _630 = fma(_599, cbModelParam._m0[27u].z, fma(_595, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _591));
        float _634 = fma(_599, cbModelParam._m0[28u].z, fma(_595, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _591));
        float _659 = _591 + _369;
        float _660 = _595 + _370;
        float _661 = _599 + _371;
        float _671 = fma(_661, cbModelParam._m0[26u].z, fma(_660, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _659)) - _626;
        float _672 = fma(_661, cbModelParam._m0[27u].z, fma(_660, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _659)) - _630;
        float _673 = fma(_661, cbModelParam._m0[28u].z, fma(_660, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _659)) - _634;
        float _677 = inversesqrt(dot(vec3(_671, _672, _673), vec3(_671, _672, _673)));
        float _690 = ((_677 * _671) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_626 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _691 = ((_677 * _672) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_630 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _692 = ((_677 * _673) / cbModelParam._m0[34u].z) + ((((((_634 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        float _729 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_695.x + (-0.5));
        float _731 = _729 * (_695.y + (-0.5));
        float _732 = _729 * (_695.z + (-0.5));
        float _739 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_702.x + (-0.5));
        float _741 = _739 * (_702.y + (-0.5));
        float _742 = _739 * (_702.z + (-0.5));
        float _749 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_709.x + (-0.5));
        float _751 = _749 * (_709.y + (-0.5));
        float _752 = _749 * (_709.z + (-0.5));
        float _759 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_716.x + (-0.5));
        float _761 = _759 * (_716.y + (-0.5));
        float _762 = _759 * (_716.z + (-0.5));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = _730 * 0.5;
        float _767 = _740 * 0.5;
        float _768 = _750 * 0.5;
        float _769 = dot(vec3(_766, _767, _768), vec3(_766, _767, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _783 = (dot(vec3(_369, _370, _371), vec3(_774 * _766, _774 * _767, _774 * _768)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _793 = sqrt(((_767 * _767) + (_766 * _766)) + (_768 * _768)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _795 = _794 * 2.0;
        float _799 = (1.0 - _794) / (_794 + 1.0);
        float _3703 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _809 = ((((1.0 - _800) * (_795 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_795 + 1.0))) + _800) * _763;
        float _810 = _731 * 0.5;
        float _811 = _741 * 0.5;
        float _812 = _751 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _826 = (dot(vec3(_369, _370, _371), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _835 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _837 = _836 * 2.0;
        float _841 = (1.0 - _836) / (_836 + 1.0);
        float _3736 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _851 = ((((1.0 - _842) * (_837 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_837 + 1.0))) + _842) * _764;
        float _852 = _732 * 0.5;
        float _853 = _742 * 0.5;
        float _854 = _752 * 0.5;
        float _855 = dot(vec3(_852, _853, _854), vec3(_852, _853, _854));
        float _860 = (_855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_855);
        float _868 = (dot(vec3(_369, _370, _371), vec3(_860 * _852, _860 * _853, _860 * _854)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _877 = sqrt(((_853 * _853) + (_852 * _852)) + (_854 * _854)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _879 = _878 * 2.0;
        float _883 = (1.0 - _878) / (_878 + 1.0);
        float _3769 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _893 = ((((1.0 - _884) * (_879 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_879 + 1.0))) + _884) * _765;
        _901 = _732;
        _903 = _731;
        _904 = _730;
        _905 = _742;
        _906 = _741;
        _907 = _740;
        _908 = _752;
        _909 = _751;
        _910 = _750;
        _911 = _765;
        _912 = _764;
        _913 = _763;
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)));
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0)));
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0)));
    }
    else
    {
        _901 = _902;
        _903 = _902;
        _904 = _902;
        _905 = _902;
        _906 = _902;
        _907 = _902;
        _908 = _902;
        _909 = _902;
        _910 = _902;
        _911 = _902;
        _912 = _902;
        _913 = _902;
        _914 = 0.0;
        _915 = 0.0;
        _916 = 0.0;
    }
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _942 = fma(_599, cbModelParam._m0[30u].z, fma(_595, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _591));
        float _946 = fma(_599, cbModelParam._m0[31u].z, fma(_595, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _591));
        float _950 = fma(_599, cbModelParam._m0[32u].z, fma(_595, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _591));
        float _973 = _591 + _369;
        float _974 = _595 + _370;
        float _975 = _599 + _371;
        float _985 = fma(_975, cbModelParam._m0[30u].z, fma(_974, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _973)) - _942;
        float _986 = fma(_975, cbModelParam._m0[31u].z, fma(_974, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _973)) - _946;
        float _987 = fma(_975, cbModelParam._m0[32u].z, fma(_974, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _973)) - _950;
        float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
        float _1004 = ((_991 * _985) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_942 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_991 * _986) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_946 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_991 * _987) / cbModelParam._m0[35u].z) + ((((((_950 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        float _1041 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1008.x + (-0.5));
        float _1043 = _1041 * (_1008.y + (-0.5));
        float _1044 = _1041 * (_1008.z + (-0.5));
        float _1051 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1015.x + (-0.5));
        float _1053 = _1051 * (_1015.y + (-0.5));
        float _1054 = _1051 * (_1015.z + (-0.5));
        float _1061 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1022.x + (-0.5));
        float _1063 = _1061 * (_1022.y + (-0.5));
        float _1064 = _1061 * (_1022.z + (-0.5));
        float _1071 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1029.x + (-0.5));
        float _1073 = _1071 * (_1029.y + (-0.5));
        float _1074 = _1071 * (_1029.z + (-0.5));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = _1042 * 0.5;
        float _1079 = _1052 * 0.5;
        float _1080 = _1062 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_369, _370, _371), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3832 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1105 + 1.0))) + _1110) * _1075;
        float _1120 = _1043 * 0.5;
        float _1121 = _1053 * 0.5;
        float _1122 = _1063 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_369, _370, _371), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3865 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1147 + 1.0))) + _1152) * _1076;
        float _1162 = _1044 * 0.5;
        float _1163 = _1054 * 0.5;
        float _1164 = _1064 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_369, _370, _371), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3898 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1189 + 1.0))) + _1194) * _1077;
        _1211 = _1044;
        _1212 = _1043;
        _1213 = _1042;
        _1214 = _1054;
        _1215 = _1053;
        _1216 = _1052;
        _1217 = _1064;
        _1218 = _1063;
        _1219 = _1062;
        _1220 = _1077;
        _1221 = _1076;
        _1222 = _1075;
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
    }
    else
    {
        _1211 = _902;
        _1212 = _902;
        _1213 = _902;
        _1214 = _902;
        _1215 = _902;
        _1216 = _902;
        _1217 = _902;
        _1218 = _902;
        _1219 = _902;
        _1220 = _902;
        _1221 = _902;
        _1222 = _902;
        _1223 = 0.0;
        _1224 = 0.0;
        _1225 = 0.0;
    }
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _914)) + _914;
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _915)) + _915;
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _916)) + _916;
    float _1258 = fma(_1237, cbSceneParam._m0[89u].z, fma(_1236, cbSceneParam._m0[89u].y, _1235 * cbSceneParam._m0[89u].x));
    float _1261 = fma(_1237, cbSceneParam._m0[90u].z, fma(_1236, cbSceneParam._m0[90u].y, _1235 * cbSceneParam._m0[90u].x));
    float _1264 = fma(_1237, cbSceneParam._m0[91u].z, fma(_1236, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1235));
    float _1279 = _538 * 0.5;
    float _1280 = _539 * 0.5;
    float _1281 = _540 * 0.5;
    float _1282 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1285 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1288 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1322;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1295 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_901, _905, _908, _911));
        float _1299 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_903, _906, _909, _912));
        float _1303 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_904, _907, _910, _913));
        float _1310 = dot(vec4(cbModelParam._m0[39u]), vec4(_1279, _1280, _1281, 1.0));
        _1322 = dot(vec3(isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1310) ? 0.0 : (isnan(0.0) ? _1310 : max(0.0, _1310))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1322 = 1.0;
    }
    float _1333;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1324 = dot(vec4(cbModelParam._m0[40u]), vec4(_1279, _1280, _1281, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1324) ? 0.0 : (isnan(0.0) ? _1324 : max(0.0, _1324))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1337 = (_1333 * cbModelParam._m0[1u].x) + (_1322 * (1.0 - cbModelParam._m0[1u].x));
    float _1347 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _372);
    float _1348 = isnan(_1347) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1347 : min(cbModelParam._m0[25u].z, _1347));
    float _1430;
    float _1432;
    float _1434;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1397 = fma(_599, cbModelParam._m0[13u].z, fma(_595, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _591)) + cbModelParam._m0[13u].w;
        float _1401 = fma(_599, cbModelParam._m0[14u].z, fma(_595, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _591)) + cbModelParam._m0[14u].w;
        float _1405 = fma(_599, cbModelParam._m0[15u].z, fma(_595, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _591)) + cbModelParam._m0[15u].w;
        float _1408 = fma(_540, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538));
        float _1411 = fma(_540, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538));
        float _1414 = fma(_540, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538));
        float _1442;
        if (_1408 > 0.0)
        {
            _1442 = abs((1.0 - _1397) / _1408);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1397 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1442 = frontier_phi_18_16_ladder;
        }
        float _1616;
        if (_1411 > 0.0)
        {
            _1616 = abs((1.0 - _1401) / _1411);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1401 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1616 = frontier_phi_27_23_ladder;
        }
        float _1912;
        if (_1414 > 0.0)
        {
            _1912 = abs((1.0 - _1405) / _1414);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1405 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1912 = frontier_phi_39_34_ladder;
        }
        float _1914 = isnan(_1616) ? _1442 : (isnan(_1442) ? _1616 : min(_1442, _1616));
        float _1915 = isnan(_1912) ? _1914 : (isnan(_1914) ? _1912 : min(_1914, _1912));
        float _1919 = (_1915 * _1408) + _1397;
        float _1920 = (_1915 * _1411) + _1401;
        float _1921 = (_1915 * _1414) + _1405;
        float _1922 = _1915 * 9.9999997473787516355514526367188e-05;
        float _1924 = (-1.0) - _1922;
        float _1926 = _1922 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1921 > _1926) || ((_1921 < _1924) || ((_1920 > _1926) || ((_1920 < _1924) || ((_1919 < _1924) || (_1919 > _1926))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2066 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1921, cbModelParam._m0[9u].z, fma(_1920, cbModelParam._m0[9u].y, _1919 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1921, cbModelParam._m0[10u].z, fma(_1920, cbModelParam._m0[10u].y, _1919 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1921, cbModelParam._m0[11u].z, fma(_1920, cbModelParam._m0[11u].y, _1919 * cbModelParam._m0[11u].x))), _1348);
            frontier_phi_17_39_ladder = _2066.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2066.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2066.x * cbModelParam._m0[1u].y;
        }
        _1430 = frontier_phi_17_39_ladder_2;
        _1432 = frontier_phi_17_39_ladder_1;
        _1434 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_538, _539, _540), _1348);
        _1430 = _1418.x * cbModelParam._m0[1u].y;
        _1432 = _1418.y * cbModelParam._m0[1u].y;
        _1434 = _1418.z * cbModelParam._m0[1u].y;
    }
    float _1438 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _372);
    float _1439 = isnan(_1438) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1438 : min(cbModelParam._m0[25u].w, _1438));
    float _1532;
    float _1534;
    float _1536;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1496 = fma(_599, cbModelParam._m0[21u].z, fma(_595, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _591)) + cbModelParam._m0[21u].w;
        float _1500 = fma(_599, cbModelParam._m0[22u].z, fma(_595, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _591)) + cbModelParam._m0[22u].w;
        float _1504 = fma(_599, cbModelParam._m0[23u].z, fma(_595, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _591)) + cbModelParam._m0[23u].w;
        float _1507 = fma(_540, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538));
        float _1510 = fma(_540, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538));
        float _1513 = fma(_540, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538));
        float _1621;
        if (_1507 > 0.0)
        {
            _1621 = abs((1.0 - _1496) / _1507);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1496 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1621 = frontier_phi_29_25_ladder;
        }
        float _1939;
        if (_1510 > 0.0)
        {
            _1939 = abs((1.0 - _1500) / _1510);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1500 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1939 = frontier_phi_41_36_ladder;
        }
        float _2266;
        if (_1513 > 0.0)
        {
            _2266 = abs((1.0 - _1504) / _1513);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1504 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2266 = frontier_phi_51_48_ladder;
        }
        float _2268 = isnan(_1939) ? _1621 : (isnan(_1621) ? _1939 : min(_1621, _1939));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1507) + _1496;
        float _2274 = (_2269 * _1510) + _1500;
        float _2275 = (_2269 * _1513) + _1504;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2277 = (-1.0) - _2276;
        float _2279 = _2276 + 1.0;
        float frontier_phi_26_51_ladder;
        float frontier_phi_26_51_ladder_1;
        float frontier_phi_26_51_ladder_2;
        if ((_2275 > _2279) || ((_2275 < _2277) || ((_2274 > _2279) || ((_2274 < _2277) || ((_2273 < _2277) || (_2273 > _2279))))))
        {
            frontier_phi_26_51_ladder = 0.0;
            frontier_phi_26_51_ladder_1 = 0.0;
            frontier_phi_26_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2393 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2275, cbModelParam._m0[17u].z, fma(_2274, cbModelParam._m0[17u].y, _2273 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2275, cbModelParam._m0[18u].z, fma(_2274, cbModelParam._m0[18u].y, _2273 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2275, cbModelParam._m0[19u].z, fma(_2274, cbModelParam._m0[19u].y, _2273 * cbModelParam._m0[19u].x))), _1439);
            frontier_phi_26_51_ladder = _2393.z * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_1 = _2393.y * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_2 = _2393.x * cbModelParam._m0[1u].z;
        }
        _1532 = frontier_phi_26_51_ladder_2;
        _1534 = frontier_phi_26_51_ladder_1;
        _1536 = frontier_phi_26_51_ladder;
    }
    else
    {
        vec4 _1516 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_538, _539, _540), _1439);
        _1532 = _1516.x * cbModelParam._m0[1u].z;
        _1534 = _1516.y * cbModelParam._m0[1u].z;
        _1536 = _1516.z * cbModelParam._m0[1u].z;
    }
    float _1548 = ((((1.0 - _559) * ((_546 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_559 * _546)) * _530;
    float _1549 = _1548 * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1550 = _1548 * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1551 = _1548 * ((cbModelParam._m0[1u].w * (_1536 - _1434)) + _1434);
    float _1554 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1550, cbSceneParam._m0[89u].y, _1549 * cbSceneParam._m0[89u].x));
    float _1557 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1550, cbSceneParam._m0[90u].y, _1549 * cbSceneParam._m0[90u].x));
    float _1560 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1550, cbSceneParam._m0[91u].y, _1549 * cbSceneParam._m0[91u].x));
    float _1595 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1599 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1603 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1607 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1608 = _1595 / _1607;
    float _1609 = _1599 / _1607;
    float _1610 = _1603 / _1607;
    float _1757;
    float _1758;
    float _1759;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1637 = ((uint(_1610 > cbSceneParam._m0[59u].y) + uint(_1610 > cbSceneParam._m0[59u].x)) + uint(_1610 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1638 = _1637 + 43u;
        uint _1646 = _1637 + 44u;
        uint _1654 = _1637 + 45u;
        uint _1662 = _1637 + 46u;
        float _1673 = fma(_1607, cbSceneParam._m0[_1638].w, fma(_1603, cbSceneParam._m0[_1638].z, fma(_1599, cbSceneParam._m0[_1638].y, _1595 * cbSceneParam._m0[_1638].x)));
        float _1677 = fma(_1607, cbSceneParam._m0[_1646].w, fma(_1603, cbSceneParam._m0[_1646].z, fma(_1599, cbSceneParam._m0[_1646].y, _1595 * cbSceneParam._m0[_1646].x)));
        float _1685 = fma(_1607, cbSceneParam._m0[_1662].w, fma(_1603, cbSceneParam._m0[_1662].z, fma(_1599, cbSceneParam._m0[_1662].y, _1595 * cbSceneParam._m0[_1662].x)));
        float _1690 = cbSceneParam._m0[33u].z * _1685;
        float _1692 = cbSceneParam._m0[33u].w * _1685;
        float _1695 = fma(_1607, cbSceneParam._m0[_1654].w, fma(_1603, cbSceneParam._m0[_1654].z, fma(_1599, cbSceneParam._m0[_1654].y, _1595 * cbSceneParam._m0[_1654].x))) / _1685;
        float _1743 = (cbSceneParam._m0[33u].x - sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610))) * cbSceneParam._m0[33u].y;
        float _4024 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1750 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1690 + _1673) / _1685, (_1692 + _1677) / _1685), _1695), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1692 + _1673) / _1685, (_1677 - _1690) / _1685), _1695), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1673 - _1690) / _1685, (_1677 - _1692) / _1685), _1695), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1673 - _1692) / _1685, (_1690 + _1677) / _1685), _1695), 0.0)).x), vec4(0.25)));
        _1757 = 1.0 - (_1750 * cbSceneParam._m0[34u].x);
        _1758 = 1.0 - (_1750 * cbSceneParam._m0[34u].y);
        _1759 = 1.0 - (_1750 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1757 = 1.0;
        _1758 = 1.0;
        _1759 = 1.0;
    }
    float _1823;
    float _1825;
    float _1827;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1811 = fma(_1607, cbSceneParam._m0[63u].w, fma(_1603, cbSceneParam._m0[63u].z, fma(_1599, cbSceneParam._m0[63u].y, _1595 * cbSceneParam._m0[63u].x)));
        float _1812 = fma(_1607, cbSceneParam._m0[60u].w, fma(_1603, cbSceneParam._m0[60u].z, fma(_1599, cbSceneParam._m0[60u].y, _1595 * cbSceneParam._m0[60u].x))) / _1811;
        float _1813 = fma(_1607, cbSceneParam._m0[61u].w, fma(_1603, cbSceneParam._m0[61u].z, fma(_1599, cbSceneParam._m0[61u].y, _1595 * cbSceneParam._m0[61u].x))) / _1811;
        float frontier_phi_38_37_ladder;
        float frontier_phi_38_37_ladder_1;
        float frontier_phi_38_37_ladder_2;
        if ((((_1812 >= cbSceneParam._m0[64u].x) && (_1813 >= cbSceneParam._m0[64u].y)) && (_1812 <= cbSceneParam._m0[64u].z)) && (_1813 <= cbSceneParam._m0[64u].w))
        {
            float _1952 = fma(_1607, cbSceneParam._m0[62u].w, fma(_1603, cbSceneParam._m0[62u].z, fma(_1599, cbSceneParam._m0[62u].y, _1595 * cbSceneParam._m0[62u].x))) / _1811;
            float _1956 = isnan(cbSceneParam._m0[41u].w) ? _1952 : (isnan(_1952) ? cbSceneParam._m0[41u].w : max(_1952, cbSceneParam._m0[41u].w));
            float _1999 = (cbSceneParam._m0[33u].x - sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610))) * cbSceneParam._m0[33u].y;
            float _4040 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
            float _2006 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1812, cbSceneParam._m0[33u].w + _1813), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1812, _1813 - cbSceneParam._m0[33u].z), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1812 - cbSceneParam._m0[33u].z, _1813 - cbSceneParam._m0[33u].w), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1812 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1813), _1956), 0.0)).x), vec4(0.25)));
            float _2010 = 1.0 - (_2006 * cbSceneParam._m0[34u].x);
            float _2011 = 1.0 - (_2006 * cbSceneParam._m0[34u].y);
            float _2012 = 1.0 - (_2006 * cbSceneParam._m0[34u].z);
            frontier_phi_38_37_ladder = isnan(_2011) ? _1758 : (isnan(_1758) ? _2011 : min(_1758, _2011));
            frontier_phi_38_37_ladder_1 = isnan(_2010) ? _1757 : (isnan(_1757) ? _2010 : min(_1757, _2010));
            frontier_phi_38_37_ladder_2 = isnan(_2012) ? _1759 : (isnan(_1759) ? _2012 : min(_1759, _2012));
        }
        else
        {
            frontier_phi_38_37_ladder = _1758;
            frontier_phi_38_37_ladder_1 = _1757;
            frontier_phi_38_37_ladder_2 = _1759;
        }
        _1823 = frontier_phi_38_37_ladder_1;
        _1825 = frontier_phi_38_37_ladder;
        _1827 = frontier_phi_38_37_ladder_2;
    }
    else
    {
        _1823 = _1757;
        _1825 = _1758;
        _1827 = _1759;
    }
    uvec4 _1832 = floatBitsToUint(cbInstanceData._m0[_504 + 5u]);
    uint _1834 = _1832.x * 14u;
    uint _1835 = _1834 + 13u;
    float _1842 = _530 + (-1.0);
    float _1847 = (cbLight._m0[_1835].x * _1842) + 1.0;
    float _1848 = (cbLight._m0[_1835].y * _1842) + 1.0;
    float _1849 = (cbLight._m0[_1835].z * _1842) + 1.0;
    float _1850 = (cbLight._m0[_1835].w * _1842) + 1.0;
    uint _1851 = _1834 + 5u;
    float _1857 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1861 = _1834 + 4u;
    float _1871 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
    uint _1875 = _1834 | 1u;
    float _1886 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_369, _370, _371));
    float _1889 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_369, _370, _371));
    float _4076 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _4087 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1894 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.3183098733425140380859375;
    float _1896 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
    float _1903 = ((cbLight._m0[_1851].x * _1857) * _1896) + (((cbLight._m0[_1861].x * _1823) * _1871) * _1894);
    float _1904 = ((_1857 * cbLight._m0[_1851].y) * _1896) + (((cbLight._m0[_1861].y * _1825) * _1871) * _1894);
    float _1905 = ((_1857 * cbLight._m0[_1851].z) * _1896) + (((cbLight._m0[_1861].z * _1827) * _1871) * _1894);
    uvec4 _1909 = floatBitsToUint(cbLight._m0[_1834 + 12u]);
    bool _1911 = _1909.x == 0u;
    float _2013;
    float _2015;
    float _2017;
    if (_1911)
    {
        _2013 = _1903;
        _2015 = _1904;
        _2017 = _1905;
    }
    else
    {
        uint _2021 = _1834 + 6u;
        float _2037 = (dot(vec3(cbLight._m0[_1834 + 2u].xyz), vec3(_369, _370, _371)) * 0.5) + 0.5;
        float _2038 = _2037 * _2037;
        float _4098 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2039 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2040 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2013 = (((cbLight._m0[_2021].x * 0.3183098733425140380859375) * _2039) * _2040) + _1903;
        _2015 = (((cbLight._m0[_2021].y * 0.3183098733425140380859375) * _2039) * _2040) + _1904;
        _2017 = (((cbLight._m0[_2021].z * 0.3183098733425140380859375) * _2039) * _2040) + _1905;
    }
    bool _2020 = _1909.y == 0u;
    float _2075;
    float _2077;
    float _2079;
    if (_2020)
    {
        _2075 = _2013;
        _2077 = _2015;
        _2079 = _2017;
    }
    else
    {
        uint _2237 = _1834 + 7u;
        float _2253 = (dot(vec3(cbLight._m0[_1834 + 3u].xyz), vec3(_369, _370, _371)) * 0.5) + 0.5;
        float _2254 = _2253 * _2253;
        float _4114 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2255 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2256 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2075 = (((cbLight._m0[_2237].x * 0.3183098733425140380859375) * _2255) * _2256) + _2013;
        _2077 = (((cbLight._m0[_2237].y * 0.3183098733425140380859375) * _2255) * _2256) + _2015;
        _2079 = (((cbLight._m0[_2237].z * 0.3183098733425140380859375) * _2255) * _2256) + _2017;
    }
    uint _2082 = _1834 + 8u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _372) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_1834].x + _451;
    float _2098 = cbLight._m0[_1834].y + _452;
    float _2099 = cbLight._m0[_1834].z + _453;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1834].xyz));
    float _4130 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _2111 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2112 = dot(vec3(_369, _370, _371), vec3(_2104, _2105, _2106));
    float _4152 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2116 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_2104, _2105, _2106));
    float _4163 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2120 = _2096 * _2096;
    float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
    float _2135 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2136 = 1.0 - _2096;
    float _2147 = (0.5 / (((_2111 * ((_2110 * _2136) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2136) + _2096) * _2110))) * _2110;
    float _4174 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
    uint _2163 = _1834 + 9u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _372) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_1875].x + _451;
    float _2177 = cbLight._m0[_1875].y + _452;
    float _2178 = cbLight._m0[_1875].z + _453;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1875].xyz));
    float _4185 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2190 = dot(vec3(_369, _370, _371), vec3(_2183, _2184, _2185));
    float _4196 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2194 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2183, _2184, _2185));
    float _4207 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2198 = _2175 * _2175;
    float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
    float _2211 = (exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2212 = 1.0 - _2175;
    float _2222 = (0.5 / (((_2111 * ((_2189 * _2212) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2212) + _2175) * _2189))) * _2189;
    float _4218 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2224 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
    float _2234 = (((_2211 * cbLight._m0[_2163].x) * _2224) * _1857) + ((((cbLight._m0[_2082].x * _1823) * _2135) * _2149) * _1871);
    float _2235 = (((_2211 * cbLight._m0[_2163].y) * _2224) * _1857) + ((((cbLight._m0[_2082].y * _1825) * _2135) * _2149) * _1871);
    float _2236 = (((_2211 * cbLight._m0[_2163].z) * _2224) * _1857) + ((((cbLight._m0[_2082].z * _1827) * _2135) * _2149) * _1871);
    float _2292;
    float _2294;
    float _2296;
    if (_1911)
    {
        _2292 = _2234;
        _2294 = _2235;
        _2296 = _2236;
    }
    else
    {
        uint _2298 = _1834 + 2u;
        uint _2302 = _1834 + 10u;
        float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _372) * 0.949999988079071044921875);
        float _2317 = _2316 * _2316;
        float _2318 = cbLight._m0[_2298].x + _451;
        float _2319 = cbLight._m0[_2298].y + _452;
        float _2320 = cbLight._m0[_2298].z + _453;
        float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
        float _2325 = _2324 * _2318;
        float _2326 = _2324 * _2319;
        float _2327 = _2324 * _2320;
        float _2328 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_2298].xyz));
        float _4229 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2332 = dot(vec3(_369, _370, _371), vec3(_2325, _2326, _2327));
        float _4240 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2336 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2325, _2326, _2327));
        float _4251 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2340 = _2317 * _2317;
        float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
        float _2353 = (exp2(log2(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2354 = 1.0 - _2317;
        float _2364 = (0.5 / (((_2111 * ((_2331 * _2354) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2354) + _2317) * _2331))) * _2331;
        float _4262 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2366 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
        float _2367 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2292 = (((_2353 * cbLight._m0[_2302].x) * _2366) * _2367) + _2234;
        _2294 = (((_2353 * cbLight._m0[_2302].y) * _2366) * _2367) + _2235;
        _2296 = (((_2353 * cbLight._m0[_2302].z) * _2366) * _2367) + _2236;
    }
    float _2398;
    float _2400;
    float _2402;
    if (_2020)
    {
        _2398 = _2292;
        _2400 = _2294;
        _2402 = _2296;
    }
    else
    {
        uint _2409 = _1834 + 3u;
        uint _2413 = _1834 + 11u;
        float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _372) * 0.949999988079071044921875);
        float _2428 = _2427 * _2427;
        float _2429 = cbLight._m0[_2409].x + _451;
        float _2430 = cbLight._m0[_2409].y + _452;
        float _2431 = cbLight._m0[_2409].z + _453;
        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
        float _2436 = _2435 * _2429;
        float _2437 = _2435 * _2430;
        float _2438 = _2435 * _2431;
        float _2439 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_2409].xyz));
        float _4278 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2443 = dot(vec3(_369, _370, _371), vec3(_2436, _2437, _2438));
        float _4289 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2447 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2436, _2437, _2438));
        float _4300 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2451 = _2428 * _2428;
        float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
        float _2464 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2465 = 1.0 - _2428;
        float _2475 = (0.5 / (((_2111 * ((_2442 * _2465) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2465) + _2428) * _2442))) * _2442;
        float _4311 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2477 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
        float _2478 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2398 = (((_2464 * cbLight._m0[_2413].x) * _2477) * _2478) + _2292;
        _2400 = (((_2464 * cbLight._m0[_2413].y) * _2477) * _2478) + _2294;
        _2402 = (((_2464 * cbLight._m0[_2413].z) * _2477) * _2478) + _2296;
    }
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    if (_1832.y == 0u)
    {
        uvec4 _2499 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2500 = _2499.x;
        uint _2511 = uint((float(_2499.y) * floor(float(uint(cbSceneParam._m0[85u].y * _464) / _2500))) + floor(float(uint(cbSceneParam._m0[85u].x * _463) / _2500)));
        float _2521 = (log2(_1610 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2522 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        uint _2525 = uint(isnan(14.0) ? _2522 : (isnan(_2522) ? 14.0 : min(_2522, 14.0)));
        uvec4 _2530 = texelFetch(g_lightClusterGridBuffer, int(((_2525 << 2u) + (_2511 << 6u)) >> 2u));
        uint _2531 = _2530.x;
        uint _2532 = _2499.z;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        if (((((1u << ((_2532 >> 4u) & 15u)) + 4294967295u) & _2531) == 0u) || ((_2532 & 240u) == 0u))
        {
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
        }
        else
        {
            float _2611;
            float _2613;
            float _2615;
            float _2617;
            float _2619;
            float _2621;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            uint _2768 = 0u;
            uint _2777;
            bool _2778;
            for (;;)
            {
                _2777 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2768 << 2u)) >> 2u)).x;
                _2778 = _2777 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2778)
                {
                    frontier_phi_72_pred = _2767;
                    frontier_phi_72_pred_1 = _2766;
                    frontier_phi_72_pred_2 = _2765;
                    frontier_phi_72_pred_3 = _2764;
                    frontier_phi_72_pred_4 = _2763;
                    frontier_phi_72_pred_5 = _2762;
                }
                else
                {
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    uint _2913;
                    _2907 = _2762;
                    _2908 = _2763;
                    _2909 = _2764;
                    _2910 = _2765;
                    _2911 = _2766;
                    _2912 = _2767;
                    _2913 = _2777;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    for (;;)
                    {
                        uint _2917 = uint(findLSB(_2913)) + (_2768 << 5u);
                        uint _2914 = (_2913 + 4294967295u) & _2913;
                        uint _2919 = _2917 * 48u;
                        vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 3u)).x));
                        uint _2939 = (_2917 * 48u) + 4u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 3u)).x));
                        uint _2958 = (_2917 * 48u) + 8u;
                        vec3 _2969 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x));
                        float _2973 = _2933.x - _1608;
                        float _2974 = _2933.y - _1609;
                        float _2975 = _2933.z - _1610;
                        float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                        float _2979 = inversesqrt(_2976);
                        float _2980 = _2979 * _2973;
                        float _2981 = _2979 * _2974;
                        float _2982 = _2979 * _2975;
                        float _2983 = dot(vec3(_485, _488, _491), vec3(_2980, _2981, _2982));
                        float _2988 = 1.0 - (_2976 * _2933.w);
                        float _4337 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _2990 = sqrt(_2976) * _2952.w;
                        float _2993 = 1.39999997615814208984375 / (_2990 + 1.39999997615814208984375);
                        float _2994 = _2993 * _2993;
                        float _2997 = ((1.0 - _2994) * _2983) + _2994;
                        float _3000 = _2990 * _2990;
                        float _3004 = ((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2989) / ((_3000 * 0.699999988079071044921875) + 1.0);
                        float _3008 = (-0.0) - _1608;
                        float _3009 = (-0.0) - _1609;
                        float _3010 = (-0.0) - _1610;
                        float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                        float _3015 = _3014 * _3008;
                        float _3016 = _3014 * _3009;
                        float _3017 = _3014 * _3010;
                        float _3024 = exp2(log2(1.0 / ((_3000 * 3.5) + 5.0)) * 0.25);
                        float _3025 = 1.0 - _546;
                        float _3032 = sqrt(1.0 - ((1.0 - (_3025 * _3025)) * (1.0 - (_3024 * _3024))));
                        float _3033 = _3032 * _3032;
                        float _3034 = _3033 * _3033;
                        float _3035 = _3015 + _2980;
                        float _3036 = _3016 + _2981;
                        float _3037 = _3017 + _2982;
                        float _3041 = inversesqrt(dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037)));
                        float _3045 = dot(vec3(_485, _488, _491), vec3(_3015, _3016, _3017));
                        float _4353 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3048 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3049 = dot(vec3(_485, _488, _491), vec3(_3041 * _3035, _3041 * _3036, _3041 * _3037));
                        float _4364 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3052 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3056 = ((_3052 * _3052) * (_3034 + (-1.0))) + 1.0;
                        float _3057 = _2993 * _3033;
                        float _3058 = _3057 * _3057;
                        float _3061 = ((1.0 - _3058) * _2983) + _3058;
                        float _4375 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3062 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3063 = 1.0 - _3033;
                        float _3073 = (0.5 / (((_3062 * ((_3048 * _3063) + _3033)) + 9.9999999392252902907785028219223e-09) + (((_3062 * _3063) + _3033) * _3048))) * _3062;
                        float _4386 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3084 = (((_3034 * 3.1415927410125732421875) * (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) / ((_3056 * _3056) * ((_3000 * 2.1991131305694580078125) + 3.141590118408203125))) * _2989;
                        _2837 = (_3004 * _2952.x) + _2910;
                        _2838 = (_3004 * _2952.y) + _2911;
                        _2839 = (_3004 * _2952.z) + _2912;
                        _2834 = (_3084 * _2969.x) + _2907;
                        _2835 = (_3084 * _2969.y) + _2908;
                        _2836 = (_3084 * _2969.z) + _2909;
                        if (_2914 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2907 = _2834;
                            _2908 = _2835;
                            _2909 = _2836;
                            _2910 = _2837;
                            _2911 = _2838;
                            _2912 = _2839;
                            _2913 = _2914;
                        }
                    }
                    frontier_phi_72_pred = _2839;
                    frontier_phi_72_pred_1 = _2838;
                    frontier_phi_72_pred_2 = _2837;
                    frontier_phi_72_pred_3 = _2836;
                    frontier_phi_72_pred_4 = _2835;
                    frontier_phi_72_pred_5 = _2834;
                }
                _2621 = frontier_phi_72_pred;
                _2619 = frontier_phi_72_pred_1;
                _2617 = frontier_phi_72_pred_2;
                _2615 = frontier_phi_72_pred_3;
                _2613 = frontier_phi_72_pred_4;
                _2611 = frontier_phi_72_pred_5;
                uint _2769 = _2768 + 1u;
                if (_2769 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2762 = _2611;
                    _2763 = _2613;
                    _2764 = _2615;
                    _2765 = _2617;
                    _2766 = _2619;
                    _2767 = _2621;
                    _2768 = _2769;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
        }
        uvec4 _2624 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2625 = _2624.z;
        uint _2627 = (_2625 >> 8u) & 15u;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        if (((4294967295u << _2627) & _2531) == 0u)
        {
            _2730 = _2610;
            _2732 = _2612;
            _2734 = _2614;
            _2736 = _2616;
            _2738 = _2618;
            _2740 = _2620;
        }
        else
        {
            float _2755 = inversesqrt(dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610)));
            float _2756 = _2755 * _1608;
            float _2757 = _2755 * _1609;
            float _2758 = _2755 * _1610;
            float frontier_phi_64_65_ladder;
            float frontier_phi_64_65_ladder_1;
            float frontier_phi_64_65_ladder_2;
            float frontier_phi_64_65_ladder_3;
            float frontier_phi_64_65_ladder_4;
            float frontier_phi_64_65_ladder_5;
            if (_2627 < ((_2625 >> 12u) & 15u))
            {
                float _2731;
                float _2733;
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2890 = _2610;
                float _2891 = _2612;
                float _2892 = _2614;
                float _2893 = _2616;
                float _2894 = _2618;
                float _2895 = _2620;
                uint _2896 = _2627;
                uint _2905;
                bool _2906;
                for (;;)
                {
                    _2905 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2896 << 2u)) >> 2u)).x;
                    _2906 = _2905 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2906)
                    {
                        frontier_phi_83_pred = _2894;
                        frontier_phi_83_pred_1 = _2893;
                        frontier_phi_83_pred_2 = _2892;
                        frontier_phi_83_pred_3 = _2891;
                        frontier_phi_83_pred_4 = _2890;
                        frontier_phi_83_pred_5 = _2895;
                    }
                    else
                    {
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3111 = _2890;
                        float _3112 = _2891;
                        float _3113 = _2892;
                        float _3114 = _2893;
                        float _3115 = _2894;
                        float _3116 = _2895;
                        uint _3117 = _2905;
                        uint _3118;
                        vec4 _3143;
                        float _3144;
                        vec4 _3159;
                        vec3 _3171;
                        vec4 _3187;
                        vec4 _3203;
                        float _3250;
                        bool _3251;
                        for (;;)
                        {
                            uint _3128 = ((_2896 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3117));
                            _3118 = (_3117 + 4294967295u) & _3117;
                            uint _3130 = _3128 * 40u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            _3144 = _3143.w;
                            uint _3146 = (_3128 * 40u) + 4u;
                            _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3161 = (_3128 * 40u) + 8u;
                            _3171 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x));
                            uint _3174 = (_3128 * 40u) + 16u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3190 = (_3128 * 40u) + 20u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3206 = (_3128 * 40u) + 24u;
                            vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3225 = (_3128 * 40u) + 28u;
                            vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            _3250 = fma(_1610, _3238.z, fma(_1609, _3238.y, _3238.x * _1608)) + _3238.w;
                            _3251 = !((fma(_1610, _3219.z, fma(_1609, _3219.y, _3219.x * _1608)) + _3219.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_3251)
                            {
                                float _3278 = _3143.x - _1608;
                                float _3279 = _3143.y - _1609;
                                float _3280 = _3143.z - _1610;
                                float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                                float _3284 = inversesqrt(_3281);
                                float _3285 = _3284 * _3278;
                                float _3286 = _3284 * _3279;
                                float _3287 = _3284 * _3280;
                                float _3291 = 1.0 - (_3281 / (_3144 * _3144));
                                float _4397 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3296 = sqrt(_3281) * _3159.w;
                                float _3298 = 1.39999997615814208984375 / (_3296 + 1.39999997615814208984375);
                                float _3299 = _3298 * _3298;
                                float _3302 = ((1.0 - _3299) * dot(vec3(_3285, _3286, _3287), vec3(_485, _488, _491))) + _3299;
                                float _3305 = _3296 * _3296;
                                float _3309 = (fma(_1610, _3187.z, fma(_1609, _3187.y, _3187.x * _1608)) + _3187.w) / _3250;
                                float _3310 = (fma(_1610, _3203.z, fma(_1609, _3203.y, _3203.x * _1608)) + _3203.w) / _3250;
                                float _3314 = 1.0 - dot(vec2(_3309, _3310), vec2(_3309, _3310));
                                float _4413 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3316 = _3315 * (((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3292) / ((_3305 * 0.699999988079071044921875) + 1.0));
                                float _3328 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                                float _3329 = 1.0 - _546;
                                float _3336 = sqrt(1.0 - ((1.0 - (_3329 * _3329)) * (1.0 - (_3328 * _3328))));
                                float _3337 = _3336 * _3336;
                                float _3338 = _3337 * _3337;
                                float _3339 = _3285 - _2756;
                                float _3340 = _3286 - _2757;
                                float _3341 = _3287 - _2758;
                                float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                                float _3349 = dot(vec3(_485, _488, _491), vec3((-0.0) - _2756, (-0.0) - _2757, (-0.0) - _2758));
                                float _4424 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3353 = dot(vec3(_485, _488, _491), vec3(_3345 * _3339, _3345 * _3340, _3345 * _3341));
                                float _4435 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3356 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3360 = ((_3356 * _3356) * (_3338 + (-1.0))) + 1.0;
                                float _3361 = _3298 * _3337;
                                float _3362 = _3361 * _3361;
                                float _3368 = ((1.0 - _3362) * dot(vec3(_485, _488, _491), vec3(_3285, _3286, _3287))) + _3362;
                                float _4446 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3370 = 1.0 - _3337;
                                float _3380 = (0.5 / (((_3369 * ((_3352 * _3370) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3369 * _3370) + _3337) * _3352))) * _3369;
                                float _4457 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3390 = (_3315 * _3292) * (((_3338 * 3.1415927410125732421875) * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) / ((_3360 * _3360) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3316 * _3159.y;
                                frontier_phi_89_pred_1 = _3316 * _3159.x;
                                frontier_phi_89_pred_2 = _3390 * _3171.z;
                                frontier_phi_89_pred_3 = _3390 * _3171.y;
                                frontier_phi_89_pred_4 = _3390 * _3171.x;
                                frontier_phi_89_pred_5 = _3316 * _3159.z;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3398 = frontier_phi_89_pred;
                            _3397 = frontier_phi_89_pred_1;
                            _3396 = frontier_phi_89_pred_2;
                            _3395 = frontier_phi_89_pred_3;
                            _3394 = frontier_phi_89_pred_4;
                            _3399 = frontier_phi_89_pred_5;
                            _3101 = _3397 + _3114;
                            _3102 = _3398 + _3115;
                            _3103 = _3399 + _3116;
                            _3098 = _3394 + _3111;
                            _3099 = _3395 + _3112;
                            _3100 = _3396 + _3113;
                            if (_3118 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3118;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _3102;
                        frontier_phi_83_pred_1 = _3101;
                        frontier_phi_83_pred_2 = _3100;
                        frontier_phi_83_pred_3 = _3099;
                        frontier_phi_83_pred_4 = _3098;
                        frontier_phi_83_pred_5 = _3103;
                    }
                    _2739 = frontier_phi_83_pred;
                    _2737 = frontier_phi_83_pred_1;
                    _2735 = frontier_phi_83_pred_2;
                    _2733 = frontier_phi_83_pred_3;
                    _2731 = frontier_phi_83_pred_4;
                    _2741 = frontier_phi_83_pred_5;
                    uint _2897 = _2896 + 1u;
                    if (_2897 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2890 = _2731;
                        _2891 = _2733;
                        _2892 = _2735;
                        _2893 = _2737;
                        _2894 = _2739;
                        _2895 = _2741;
                        _2896 = _2897;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_64_65_ladder = _2741;
                frontier_phi_64_65_ladder_1 = _2737;
                frontier_phi_64_65_ladder_2 = _2739;
                frontier_phi_64_65_ladder_3 = _2733;
                frontier_phi_64_65_ladder_4 = _2731;
                frontier_phi_64_65_ladder_5 = _2735;
            }
            else
            {
                frontier_phi_64_65_ladder = _2620;
                frontier_phi_64_65_ladder_1 = _2616;
                frontier_phi_64_65_ladder_2 = _2618;
                frontier_phi_64_65_ladder_3 = _2612;
                frontier_phi_64_65_ladder_4 = _2610;
                frontier_phi_64_65_ladder_5 = _2614;
            }
            _2730 = frontier_phi_64_65_ladder_4;
            _2732 = frontier_phi_64_65_ladder_3;
            _2734 = frontier_phi_64_65_ladder_5;
            _2736 = frontier_phi_64_65_ladder_1;
            _2738 = frontier_phi_64_65_ladder_2;
            _2740 = frontier_phi_64_65_ladder;
        }
        float _2745 = isnan(1.0) ? _530 : (isnan(_530) ? 1.0 : min(_530, 1.0));
        _2543 = (_2745 * _2736) + _2075;
        _2545 = (_2745 * _2738) + _2077;
        _2547 = (_2745 * _2740) + _2079;
        _2549 = ((_2730 * 0.039999999105930328369140625) * _2745) + _2398;
        _2551 = ((_2732 * 0.039999999105930328369140625) * _2745) + _2400;
        _2553 = ((_2734 * 0.039999999105930328369140625) * _2745) + _2402;
    }
    else
    {
        _2543 = _2075;
        _2545 = _2077;
        _2547 = _2079;
        _2549 = _2398;
        _2551 = _2400;
        _2553 = _2402;
    }
    float _4473 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _4484 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _4495 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _2570 = ((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2543 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _530))) + ((_2549 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1337)) * cbPerFrame._m0[3u].x);
    float _2571 = ((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2545 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _530))) + ((_2551 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1337)) * cbPerFrame._m0[3u].x);
    float _2572 = ((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2547 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _530))) + ((_2553 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1337)) * cbPerFrame._m0[3u].x);
    uint _2573 = _504 + 6u;
    float _2581 = _463 / cbSceneParam._m0[86u].x;
    float _2582 = _464 / cbSceneParam._m0[86u].y;
    vec4 _2596 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2581, _2582, (log2((isnan(cbSceneParam._m0[77u].w) ? _395 : (isnan(_395) ? cbSceneParam._m0[77u].w : min(_395, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2598 = _2596.x;
    float _2599 = _2596.y;
    float _2600 = _2596.z;
    float _2601 = _2596.w;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    if (_395 > cbSceneParam._m0[78u].w)
    {
        float _2635 = isnan(_395) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _395 : min(cbSceneParam._m0[80u].w, _395));
        float _2636 = _2635 / _395;
        float _2647 = _2636 * _444;
        float _2648 = _445 * _2636;
        float _2649 = (-0.0) - _2648;
        float _2650 = _2636 * _446;
        float _2652 = (cbSceneParam._m0[77u].w * _2649) / _2635;
        float _2653 = _2652 + cbSceneParam._m0[79u].w;
        float _2654 = cbSceneParam._m0[79u].w - _2648;
        float _2660 = sqrt(((_2647 * _2647) + (_2648 * _2648)) + (_2650 * _2650));
        float _2663 = (1.0 - (cbSceneParam._m0[77u].w / _2635)) * _2660;
        float _2668 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2670 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2847;
        if (abs((_2649 - _2652) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2847 = ((((_2653 > 0.0) ? exp2(_2668 * _2653) : (2.0 - exp2(_2670 * _2653))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2663;
        }
        else
        {
            float _2791 = 1.0 / cbSceneParam._m0[80u].x;
            float _2792 = isnan(_2654) ? _2653 : (isnan(_2653) ? _2654 : max(_2653, _2654));
            float _2793 = isnan(_2654) ? _2653 : (isnan(_2653) ? _2654 : min(_2653, _2654));
            float _2802 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : min(_2792, 0.0));
            float _2803 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : min(_2793, 0.0));
            _2847 = ((abs(_2660 / _2649) * cbSceneParam._m0[80u].y) * ((((_2802 - _2803) * 2.0) - ((exp2(_2668 * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0)))) - exp2(_2668 * (isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0))))) * _2791)) - ((exp2(_2670 * _2802) - exp2(_2670 * _2803)) * _2791))) + (_2663 * cbSceneParam._m0[80u].z);
        }
        vec4 _2849 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2581, _2582, 1.0), 0.0);
        float _2858 = exp2((_2847 * (-1.44269502162933349609375)) * (1.0 - _2849.w));
        float _2859 = log2(_2858);
        float _2875 = log2(_2601);
        _2672 = (exp2(_2875 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].x)) * _2849.x) / cbSceneParam._m0[78u].x)) + _2598;
        _2674 = (exp2(_2875 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].y)) * _2849.y) / cbSceneParam._m0[78u].y)) + _2599;
        _2676 = (exp2(_2875 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].z)) * _2849.z) / cbSceneParam._m0[78u].z)) + _2600;
        _2678 = _2858 * _2601;
    }
    else
    {
        _2672 = _2598;
        _2674 = _2599;
        _2676 = _2600;
        _2678 = _2601;
    }
    bool _2885;
    vec4 _2688;
    vec4 _2710;
    float _2712;
    float _2716;
    float _2717;
    float _2718;
    float _2719;
    bool _2729;
    for (;;)
    {
        _2688 = cbMatDynParam._m0[0u];
        float _2690 = roundEven(_2688.y);
        bool _2691 = _2690 == 3.0;
        float _2692 = log2(_2678);
        float _2699 = exp2(_2692 * cbSceneParam._m0[78u].x) * _2570;
        float _2700 = exp2(_2692 * cbSceneParam._m0[78u].y) * _2571;
        float _2701 = exp2(_2692 * cbSceneParam._m0[78u].z) * _2572;
        float _2708 = _457 + (-0.5);
        _2710 = cbMtdParam._m0[1u];
        _2712 = _2710.y * _2708;
        float _2715 = (_2690 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2716 = _2715 * (_2691 ? _2699 : (_2699 + (cbSceneParam._m0[72u].w * _2672)));
        _2717 = _2715 * (_2691 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2674)));
        _2718 = _2715 * (_2691 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2676)));
        _2719 = _2708 * 0.999000012874603271484375;
        _2729 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2729)
        {
            if ((cbInstanceData._m0[_504 + 7u].x + _2719) < 0.5)
            {
                _2885 = true;
                break;
            }
        }
        uint _2826 = _506 + uint(_2688.w);
        if ((cbInstanceData._m0[_2826].w < 1.0) && ((cbInstanceData._m0[_2826].w + _2719) < 0.5))
        {
            _2885 = true;
            break;
        }
        if ((_2712 + _297) < _2710.x)
        {
            _2885 = true;
            break;
        }
        _2885 = false;
        break;
    }
    float _3089;
    if (_2885)
    {
        discard_state = true;
        _3089 = 0.0;
    }
    else
    {
        _3089 = cbInstanceData._m0[_2573].w;
    }
    SV_Target.x = _2716;
    SV_Target.y = _2717;
    SV_Target.z = _2718;
    SV_Target.w = _3089;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2573].w;
    discard_exit();
}


