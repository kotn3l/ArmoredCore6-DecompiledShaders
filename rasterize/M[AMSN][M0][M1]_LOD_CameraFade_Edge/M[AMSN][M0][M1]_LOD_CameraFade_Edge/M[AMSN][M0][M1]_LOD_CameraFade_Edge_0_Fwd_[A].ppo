#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _933;
float _3319;
float _3320;
float _3321;
float _3322;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _289 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _295 = _289.w;
    float _296 = _289.x * cbMtdParam._m0[9u].x;
    float _297 = _289.y * cbMtdParam._m0[9u].y;
    float _298 = _289.z * cbMtdParam._m0[9u].z;
    vec4 _310 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _312 = _310.x;
    vec4 _324 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _328 = _324.z;
    float _332 = (_324.x * 2.0) + (-1.0);
    float _334 = (_324.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_332, _334), vec2(_332, _334));
    float _3331 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))));
    float _353 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].x;
    float _357 = gl_FragCoord.x * 0.125;
    float _359 = gl_FragCoord.y * 0.125;
    float _370 = fma(_341, _213, fma(_334, _205 * TANGENT.x, (_191 * _184) * _332));
    float _373 = fma(_341, _214, fma(_334, _205 * TANGENT.y, (_191 * _185) * _332));
    float _376 = fma(_341, _215, fma(_334, _205 * TANGENT.z, (_191 * _186) * _332));
    float _380 = inversesqrt(dot(vec3(_370, _373, _376), vec3(_370, _373, _376)));
    float _381 = _380 * _370;
    float _382 = _380 * _373;
    float _383 = _380 * _376;
    float _3347 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _384 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _3358 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3369 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3380 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3391 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _388 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    if (!(((sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271)) - cbMtdParam._m0[10u].x) / (isnan(0.001000000047497451305389404296875) ? _353 : (isnan(_353) ? 0.001000000047497451305389404296875 : max(_353, 0.001000000047497451305389404296875)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_357, _359)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _408 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _448 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _457 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _448);
    float _458 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _448);
    float _459 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _448);
    float _463 = inversesqrt(dot(vec3(_457, _458, _459), vec3(_457, _458, _459)));
    float _464 = _457 * _463;
    float _465 = _458 * _463;
    float _466 = _459 * _463;
    vec4 _468 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_357, _359));
    float _470 = _468.w;
    float _476 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _477 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _498 = fma(_383, cbSceneParam._m0[5u].z, fma(_382, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _381));
    float _501 = fma(_383, cbSceneParam._m0[6u].z, fma(_382, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _381));
    float _504 = fma(_383, cbSceneParam._m0[7u].z, fma(_382, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _381));
    uint _517 = uint(roundEven(NORMAL.w)) * 13u;
    uint _519 = _517 + 9u;
    uint _520 = _519 + uint(cbMatDynParam._m0[0u].w);
    float _526 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0)))) * cbInstanceData._m0[_520].x;
    float _527 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)))) * cbInstanceData._m0[_520].y;
    float _528 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_520].z;
    float _3402 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _3413 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _3424 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _532 = 1.0 - _388;
    float _533 = _529 * _532;
    float _534 = _530 * _532;
    float _535 = _531 * _532;
    float _540 = (_529 + (-0.039999999105930328369140625)) * _388;
    float _541 = (_530 + (-0.039999999105930328369140625)) * _388;
    float _542 = (_531 + (-0.039999999105930328369140625)) * _388;
    float _543 = _540 + 0.039999999105930328369140625;
    float _545 = _541 + 0.039999999105930328369140625;
    float _546 = _542 + 0.039999999105930328369140625;
    vec4 _555 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _476, cbSceneParam._m0[86u].y * _477));
    float _558 = _555.x * TEXCOORD.z;
    float _559 = dot(vec3(_381, _382, _383), vec3(_464, _465, _466));
    float _562 = _559 * 2.0;
    float _566 = (_562 * _381) - _464;
    float _567 = (_562 * _382) - _465;
    float _568 = (_562 * _383) - _466;
    float _572 = abs(dot(vec3(_464, _465, _466), vec3(_381, _382, _383)));
    float _3435 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _574 = sqrt(_384);
    float _587 = exp2((_574 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_574 * 3.0));
    float _593 = (1.0 - _587) * ((_574 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _594 = _587 * _574;
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _932;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _657 = fma(_630, cbModelParam._m0[26u].z, fma(_626, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _622));
        float _661 = fma(_630, cbModelParam._m0[27u].z, fma(_626, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _622));
        float _665 = fma(_630, cbModelParam._m0[28u].z, fma(_626, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _622));
        float _690 = _622 + _381;
        float _691 = _626 + _382;
        float _692 = _630 + _383;
        float _702 = fma(_692, cbModelParam._m0[26u].z, fma(_691, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _690)) - _657;
        float _703 = fma(_692, cbModelParam._m0[27u].z, fma(_691, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _690)) - _661;
        float _704 = fma(_692, cbModelParam._m0[28u].z, fma(_691, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _690)) - _665;
        float _708 = inversesqrt(dot(vec3(_702, _703, _704), vec3(_702, _703, _704)));
        float _721 = ((_708 * _702) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_657 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _722 = ((_708 * _703) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_661 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _723 = ((_708 * _704) / cbModelParam._m0[34u].z) + ((((((_665 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        float _760 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_726.x + (-0.5));
        float _762 = _760 * (_726.y + (-0.5));
        float _763 = _760 * (_726.z + (-0.5));
        float _770 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_733.x + (-0.5));
        float _772 = _770 * (_733.y + (-0.5));
        float _773 = _770 * (_733.z + (-0.5));
        float _780 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _781 = _780 * (_740.x + (-0.5));
        float _782 = _780 * (_740.y + (-0.5));
        float _783 = _780 * (_740.z + (-0.5));
        float _790 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _791 = _790 * (_747.x + (-0.5));
        float _792 = _790 * (_747.y + (-0.5));
        float _793 = _790 * (_747.z + (-0.5));
        float _794 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = _761 * 0.5;
        float _798 = _771 * 0.5;
        float _799 = _781 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _814 = (dot(vec3(_381, _382, _383), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3461 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _824 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_794 + 9.9999997473787516355514526367188e-06);
        float _3472 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3483 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * (_826 + 1.0))) + _831) * _794;
        float _841 = _762 * 0.5;
        float _842 = _772 * 0.5;
        float _843 = _782 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _857 = (dot(vec3(_381, _382, _383), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _866 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3516 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_868 + 1.0))) + _873) * _795;
        float _883 = _763 * 0.5;
        float _884 = _773 * 0.5;
        float _885 = _783 * 0.5;
        float _886 = dot(vec3(_883, _884, _885), vec3(_883, _884, _885));
        float _891 = (_886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_886);
        float _899 = (dot(vec3(_381, _382, _383), vec3(_891 * _883, _891 * _884, _891 * _885)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _908 = sqrt(((_884 * _884) + (_883 * _883)) + (_885 * _885)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _910 = _909 * 2.0;
        float _914 = (1.0 - _909) / (_909 + 1.0);
        float _3549 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _924 = ((((1.0 - _915) * (_910 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_910 + 1.0))) + _915) * _796;
        _932 = _763;
        _934 = _762;
        _935 = _761;
        _936 = _773;
        _937 = _772;
        _938 = _771;
        _939 = _783;
        _940 = _782;
        _941 = _781;
        _942 = _796;
        _943 = _795;
        _944 = _794;
        _945 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)));
    }
    else
    {
        _932 = _933;
        _934 = _933;
        _935 = _933;
        _936 = _933;
        _937 = _933;
        _938 = _933;
        _939 = _933;
        _940 = _933;
        _941 = _933;
        _942 = _933;
        _943 = _933;
        _944 = _933;
        _945 = 0.0;
        _946 = 0.0;
        _947 = 0.0;
    }
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _973 = fma(_630, cbModelParam._m0[30u].z, fma(_626, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _622));
        float _977 = fma(_630, cbModelParam._m0[31u].z, fma(_626, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _622));
        float _981 = fma(_630, cbModelParam._m0[32u].z, fma(_626, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _622));
        float _1004 = _622 + _381;
        float _1005 = _626 + _382;
        float _1006 = _630 + _383;
        float _1016 = fma(_1006, cbModelParam._m0[30u].z, fma(_1005, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004)) - _973;
        float _1017 = fma(_1006, cbModelParam._m0[31u].z, fma(_1005, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004)) - _977;
        float _1018 = fma(_1006, cbModelParam._m0[32u].z, fma(_1005, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004)) - _981;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_973 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_977 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[35u].z) + ((((((_981 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1072 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1039.x + (-0.5));
        float _1074 = _1072 * (_1039.y + (-0.5));
        float _1075 = _1072 * (_1039.z + (-0.5));
        float _1082 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1046.x + (-0.5));
        float _1084 = _1082 * (_1046.y + (-0.5));
        float _1085 = _1082 * (_1046.z + (-0.5));
        float _1092 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1053.x + (-0.5));
        float _1094 = _1092 * (_1053.y + (-0.5));
        float _1095 = _1092 * (_1053.z + (-0.5));
        float _1102 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1060.x + (-0.5));
        float _1104 = _1102 * (_1060.y + (-0.5));
        float _1105 = _1102 * (_1060.z + (-0.5));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = _1073 * 0.5;
        float _1110 = _1083 * 0.5;
        float _1111 = _1093 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_381, _382, _383), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3590 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3601 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3612 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_1136 + 1.0))) + _1141) * _1106;
        float _1151 = _1074 * 0.5;
        float _1152 = _1084 * 0.5;
        float _1153 = _1094 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_381, _382, _383), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3645 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1178 + 1.0))) + _1183) * _1107;
        float _1193 = _1075 * 0.5;
        float _1194 = _1085 * 0.5;
        float _1195 = _1095 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_381, _382, _383), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3678 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1220 + 1.0))) + _1225) * _1108;
        _1242 = _1075;
        _1243 = _1074;
        _1244 = _1073;
        _1245 = _1085;
        _1246 = _1084;
        _1247 = _1083;
        _1248 = _1095;
        _1249 = _1094;
        _1250 = _1093;
        _1251 = _1108;
        _1252 = _1107;
        _1253 = _1106;
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
    }
    else
    {
        _1242 = _933;
        _1243 = _933;
        _1244 = _933;
        _1245 = _933;
        _1246 = _933;
        _1247 = _933;
        _1248 = _933;
        _1249 = _933;
        _1250 = _933;
        _1251 = _933;
        _1252 = _933;
        _1253 = _933;
        _1254 = 0.0;
        _1255 = 0.0;
        _1256 = 0.0;
    }
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _945)) + _945;
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _946)) + _946;
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _947)) + _947;
    float _1289 = fma(_1268, cbSceneParam._m0[89u].z, fma(_1267, cbSceneParam._m0[89u].y, _1266 * cbSceneParam._m0[89u].x));
    float _1292 = fma(_1268, cbSceneParam._m0[90u].z, fma(_1267, cbSceneParam._m0[90u].y, _1266 * cbSceneParam._m0[90u].x));
    float _1295 = fma(_1268, cbSceneParam._m0[91u].z, fma(_1267, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1266));
    float _1310 = _566 * 0.5;
    float _1311 = _567 * 0.5;
    float _1312 = _568 * 0.5;
    float _1313 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1316 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1319 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1353;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1326 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_932, _936, _939, _942));
        float _1330 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_934, _937, _940, _943));
        float _1334 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_935, _938, _941, _944));
        float _1341 = dot(vec4(cbModelParam._m0[39u]), vec4(_1310, _1311, _1312, 1.0));
        _1353 = dot(vec3(isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1341) ? 0.0 : (isnan(0.0) ? _1341 : max(0.0, _1341))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1353 = 1.0;
    }
    float _1364;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1355 = dot(vec4(cbModelParam._m0[40u]), vec4(_1310, _1311, _1312, 1.0));
        _1364 = dot(vec3(isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1355) ? 0.0 : (isnan(0.0) ? _1355 : max(0.0, _1355))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1364 = 1.0;
    }
    float _1368 = (_1364 * cbModelParam._m0[1u].x) + (_1353 * (1.0 - cbModelParam._m0[1u].x));
    float _1378 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _384);
    float _1379 = isnan(_1378) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1378 : min(cbModelParam._m0[25u].z, _1378));
    float _1461;
    float _1463;
    float _1465;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1428 = fma(_630, cbModelParam._m0[13u].z, fma(_626, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _622)) + cbModelParam._m0[13u].w;
        float _1432 = fma(_630, cbModelParam._m0[14u].z, fma(_626, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _622)) + cbModelParam._m0[14u].w;
        float _1436 = fma(_630, cbModelParam._m0[15u].z, fma(_626, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _622)) + cbModelParam._m0[15u].w;
        float _1439 = fma(_568, cbModelParam._m0[13u].z, fma(_567, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566));
        float _1442 = fma(_568, cbModelParam._m0[14u].z, fma(_567, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566));
        float _1445 = fma(_568, cbModelParam._m0[15u].z, fma(_567, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566));
        float _1473;
        if (_1439 > 0.0)
        {
            _1473 = abs((1.0 - _1428) / _1439);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1428 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1473 = frontier_phi_18_16_ladder;
        }
        float _1681;
        if (_1442 > 0.0)
        {
            _1681 = abs((1.0 - _1432) / _1442);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1432 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1681 = frontier_phi_27_23_ladder;
        }
        float _1935;
        if (_1445 > 0.0)
        {
            _1935 = abs((1.0 - _1436) / _1445);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1436 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1935 = frontier_phi_39_34_ladder;
        }
        float _1937 = isnan(_1681) ? _1473 : (isnan(_1473) ? _1681 : min(_1473, _1681));
        float _1938 = isnan(_1935) ? _1937 : (isnan(_1937) ? _1935 : min(_1937, _1935));
        float _1942 = (_1938 * _1439) + _1428;
        float _1943 = (_1938 * _1442) + _1432;
        float _1944 = (_1938 * _1445) + _1436;
        float _1945 = _1938 * 9.9999997473787516355514526367188e-05;
        float _1947 = (-1.0) - _1945;
        float _1949 = _1945 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1944 > _1949) || ((_1944 < _1947) || ((_1943 > _1949) || ((_1943 < _1947) || ((_1942 < _1947) || (_1942 > _1949))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2072 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1944, cbModelParam._m0[9u].z, fma(_1943, cbModelParam._m0[9u].y, _1942 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1944, cbModelParam._m0[10u].z, fma(_1943, cbModelParam._m0[10u].y, _1942 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1944, cbModelParam._m0[11u].z, fma(_1943, cbModelParam._m0[11u].y, _1942 * cbModelParam._m0[11u].x))), _1379);
            frontier_phi_17_39_ladder = _2072.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2072.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2072.x * cbModelParam._m0[1u].y;
        }
        _1461 = frontier_phi_17_39_ladder_2;
        _1463 = frontier_phi_17_39_ladder_1;
        _1465 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_566, _567, _568), _1379);
        _1461 = _1449.x * cbModelParam._m0[1u].y;
        _1463 = _1449.y * cbModelParam._m0[1u].y;
        _1465 = _1449.z * cbModelParam._m0[1u].y;
    }
    float _1469 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _384);
    float _1470 = isnan(_1469) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1469 : min(cbModelParam._m0[25u].w, _1469));
    float _1563;
    float _1565;
    float _1567;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1527 = fma(_630, cbModelParam._m0[21u].z, fma(_626, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _622)) + cbModelParam._m0[21u].w;
        float _1531 = fma(_630, cbModelParam._m0[22u].z, fma(_626, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _622)) + cbModelParam._m0[22u].w;
        float _1535 = fma(_630, cbModelParam._m0[23u].z, fma(_626, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _622)) + cbModelParam._m0[23u].w;
        float _1538 = fma(_568, cbModelParam._m0[21u].z, fma(_567, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566));
        float _1541 = fma(_568, cbModelParam._m0[22u].z, fma(_567, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566));
        float _1544 = fma(_568, cbModelParam._m0[23u].z, fma(_567, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566));
        float _1686;
        if (_1538 > 0.0)
        {
            _1686 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1686 = frontier_phi_29_25_ladder;
        }
        float _1962;
        if (_1541 > 0.0)
        {
            _1962 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1962 = frontier_phi_41_36_ladder;
        }
        float _2175;
        if (_1544 > 0.0)
        {
            _2175 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2175 = frontier_phi_50_47_ladder;
        }
        float _2177 = isnan(_1962) ? _1686 : (isnan(_1686) ? _1962 : min(_1686, _1962));
        float _2178 = isnan(_2175) ? _2177 : (isnan(_2177) ? _2175 : min(_2177, _2175));
        float _2182 = (_2178 * _1538) + _1527;
        float _2183 = (_2178 * _1541) + _1531;
        float _2184 = (_2178 * _1544) + _1535;
        float _2185 = _2178 * 9.9999997473787516355514526367188e-05;
        float _2186 = (-1.0) - _2185;
        float _2188 = _2185 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2184 > _2188) || ((_2184 < _2186) || ((_2183 > _2188) || ((_2183 < _2186) || ((_2182 < _2186) || (_2182 > _2188))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2382 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2184, cbModelParam._m0[17u].z, fma(_2183, cbModelParam._m0[17u].y, _2182 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2184, cbModelParam._m0[18u].z, fma(_2183, cbModelParam._m0[18u].y, _2182 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2184, cbModelParam._m0[19u].z, fma(_2183, cbModelParam._m0[19u].y, _2182 * cbModelParam._m0[19u].x))), _1470);
            frontier_phi_26_50_ladder = _2382.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2382.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2382.x * cbModelParam._m0[1u].z;
        }
        _1563 = frontier_phi_26_50_ladder_2;
        _1565 = frontier_phi_26_50_ladder_1;
        _1567 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1547 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_566, _567, _568), _1470);
        _1563 = _1547.x * cbModelParam._m0[1u].z;
        _1565 = _1547.y * cbModelParam._m0[1u].z;
        _1567 = _1547.z * cbModelParam._m0[1u].z;
    }
    float _1580 = (((_593 * _543) + _594) * _558) * ((cbModelParam._m0[1u].w * (_1563 - _1461)) + _1461);
    float _1582 = (((_593 * _545) + _594) * _558) * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1584 = (((_593 * _546) + _594) * _558) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1587 = fma(_1584, cbSceneParam._m0[89u].z, fma(_1582, cbSceneParam._m0[89u].y, _1580 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1584, cbSceneParam._m0[90u].z, fma(_1582, cbSceneParam._m0[90u].y, _1580 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1584, cbSceneParam._m0[91u].z, fma(_1582, cbSceneParam._m0[91u].y, _1580 * cbSceneParam._m0[91u].x));
    uvec4 _1603 = floatBitsToUint(cbInstanceData._m0[_517 + 5u]);
    uint _1605 = _1603.x * 14u;
    uint _1606 = _1605 + 13u;
    float _1613 = _558 + (-1.0);
    float _1618 = (cbLight._m0[_1606].x * _1613) + 1.0;
    float _1619 = (cbLight._m0[_1606].y * _1613) + 1.0;
    float _1620 = (cbLight._m0[_1606].z * _1613) + 1.0;
    float _1621 = (cbLight._m0[_1606].w * _1613) + 1.0;
    uint _1622 = _1605 + 5u;
    float _1628 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
    uint _1632 = _1605 + 4u;
    float _1639 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
    uint _1643 = _1605 | 1u;
    float _1654 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_381, _382, _383));
    float _1657 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_381, _382, _383));
    float _3814 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _3825 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1662 = (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * 0.3183098733425140380859375;
    float _1664 = (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * 0.3183098733425140380859375;
    float _1671 = ((cbLight._m0[_1622].x * _1628) * _1664) + ((cbLight._m0[_1632].x * _1639) * _1662);
    float _1672 = ((_1628 * cbLight._m0[_1622].y) * _1664) + ((_1639 * cbLight._m0[_1632].y) * _1662);
    float _1673 = ((_1628 * cbLight._m0[_1622].z) * _1664) + ((_1639 * cbLight._m0[_1632].z) * _1662);
    uvec4 _1678 = floatBitsToUint(cbLight._m0[_1605 + 12u]);
    bool _1680 = _1678.x == 0u;
    float _1691;
    float _1693;
    float _1695;
    if (_1680)
    {
        _1691 = _1671;
        _1693 = _1672;
        _1695 = _1673;
    }
    else
    {
        uint _1699 = _1605 + 6u;
        float _1715 = (dot(vec3(cbLight._m0[_1605 + 2u].xyz), vec3(_381, _382, _383)) * 0.5) + 0.5;
        float _1716 = _1715 * _1715;
        float _3836 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1718 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1691 = (((cbLight._m0[_1699].x * 0.3183098733425140380859375) * _1717) * _1718) + _1671;
        _1693 = (((cbLight._m0[_1699].y * 0.3183098733425140380859375) * _1717) * _1718) + _1672;
        _1695 = (((cbLight._m0[_1699].z * 0.3183098733425140380859375) * _1717) * _1718) + _1673;
    }
    bool _1698 = _1678.y == 0u;
    float _1736;
    float _1738;
    float _1740;
    if (_1698)
    {
        _1736 = _1691;
        _1738 = _1693;
        _1740 = _1695;
    }
    else
    {
        uint _1906 = _1605 + 7u;
        float _1922 = (dot(vec3(cbLight._m0[_1605 + 3u].xyz), vec3(_381, _382, _383)) * 0.5) + 0.5;
        float _1923 = _1922 * _1922;
        float _3852 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1924 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1925 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _1736 = (((cbLight._m0[_1906].x * 0.3183098733425140380859375) * _1924) * _1925) + _1691;
        _1738 = (((cbLight._m0[_1906].y * 0.3183098733425140380859375) * _1924) * _1925) + _1693;
        _1740 = (((cbLight._m0[_1906].z * 0.3183098733425140380859375) * _1924) * _1925) + _1695;
    }
    uint _1743 = _1605 + 8u;
    float _1756 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1605].w)) * _384) * 0.949999988079071044921875);
    float _1757 = _1756 * _1756;
    float _1758 = cbLight._m0[_1605].x + _464;
    float _1759 = cbLight._m0[_1605].y + _465;
    float _1760 = cbLight._m0[_1605].z + _466;
    float _1764 = inversesqrt(dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760)));
    float _1765 = _1764 * _1758;
    float _1766 = _1764 * _1759;
    float _1767 = _1764 * _1760;
    float _1768 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_1605].xyz));
    float _3868 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1771 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _1772 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _1773 = dot(vec3(_381, _382, _383), vec3(_1765, _1766, _1767));
    float _3890 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1776 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _1777 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_1765, _1766, _1767));
    float _3901 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1781 = _1757 * _1757;
    float _1785 = ((_1776 * _1776) * (_1781 + (-1.0))) + 1.0;
    float _1793 = exp2(log2(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * 5.0);
    float _1794 = 0.959999978542327880859375 - _540;
    float _1796 = 0.959999978542327880859375 - _541;
    float _1797 = 0.959999978542327880859375 - _542;
    float _1804 = 1.0 - _1757;
    float _1815 = (0.5 / (((_1772 * ((_1771 * _1804) + _1757)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _1804) + _1757) * _1771))) * _1771;
    float _3912 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1817 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1781 / ((_1785 * _1785) * 3.141590118408203125));
    uint _1828 = _1605 + 9u;
    float _1839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1643].w)) * _384) * 0.949999988079071044921875);
    float _1840 = _1839 * _1839;
    float _1841 = cbLight._m0[_1643].x + _464;
    float _1842 = cbLight._m0[_1643].y + _465;
    float _1843 = cbLight._m0[_1643].z + _466;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1848 = _1847 * _1841;
    float _1849 = _1847 * _1842;
    float _1850 = _1847 * _1843;
    float _1851 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_1643].xyz));
    float _3923 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _1855 = dot(vec3(_381, _382, _383), vec3(_1848, _1849, _1850));
    float _3934 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _1859 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_1848, _1849, _1850));
    float _3945 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1863 = _1840 * _1840;
    float _1867 = ((_1858 * _1858) * (_1863 + (-1.0))) + 1.0;
    float _1874 = exp2(log2(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * 5.0);
    float _1881 = 1.0 - _1840;
    float _1891 = (0.5 / (((_1772 * ((_1854 * _1881) + _1840)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _1881) + _1840) * _1854))) * _1854;
    float _3956 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1893 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1863 / ((_1867 * _1867) * 3.141590118408203125));
    float _1903 = (((((_1874 * _1794) + _543) * cbLight._m0[_1828].x) * _1893) * _1628) + (((((_1793 * _1794) + _543) * cbLight._m0[_1743].x) * _1817) * _1639);
    float _1904 = (((((_1874 * _1796) + _545) * cbLight._m0[_1828].y) * _1893) * _1628) + (((((_1793 * _1796) + _545) * cbLight._m0[_1743].y) * _1817) * _1639);
    float _1905 = (((((_1874 * _1797) + _546) * cbLight._m0[_1828].z) * _1893) * _1628) + (((((_1793 * _1797) + _546) * cbLight._m0[_1743].z) * _1817) * _1639);
    float _1967;
    float _1969;
    float _1971;
    if (_1680)
    {
        _1967 = _1903;
        _1969 = _1904;
        _1971 = _1905;
    }
    else
    {
        uint _1973 = _1605 + 2u;
        uint _1977 = _1605 + 10u;
        float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _384) * 0.949999988079071044921875);
        float _1992 = _1991 * _1991;
        float _1993 = cbLight._m0[_1973].x + _464;
        float _1994 = cbLight._m0[_1973].y + _465;
        float _1995 = cbLight._m0[_1973].z + _466;
        float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
        float _2000 = _1999 * _1993;
        float _2001 = _1999 * _1994;
        float _2002 = _1999 * _1995;
        float _2003 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_1973].xyz));
        float _3967 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2006 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _2007 = dot(vec3(_381, _382, _383), vec3(_2000, _2001, _2002));
        float _3978 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2010 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _2011 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2000, _2001, _2002));
        float _3989 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2015 = _1992 * _1992;
        float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
        float _2026 = exp2(log2(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * 5.0);
        float _2033 = 1.0 - _1992;
        float _2043 = (0.5 / (((_1772 * ((_2006 * _2033) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _2033) + _1992) * _2006))) * _2006;
        float _4000 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2045 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
        float _2046 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1967 = (((((_2026 * _1794) + _543) * cbLight._m0[_1977].x) * _2045) * _2046) + _1903;
        _1969 = (((((_2026 * _1796) + _545) * cbLight._m0[_1977].y) * _2045) * _2046) + _1904;
        _1971 = (((((_2026 * _1797) + _546) * cbLight._m0[_1977].z) * _2045) * _2046) + _1905;
    }
    float _2081;
    float _2083;
    float _2085;
    if (_1698)
    {
        _2081 = _1967;
        _2083 = _1969;
        _2085 = _1971;
    }
    else
    {
        uint _2092 = _1605 + 3u;
        uint _2096 = _1605 + 11u;
        float _2110 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _384) * 0.949999988079071044921875);
        float _2111 = _2110 * _2110;
        float _2112 = cbLight._m0[_2092].x + _464;
        float _2113 = cbLight._m0[_2092].y + _465;
        float _2114 = cbLight._m0[_2092].z + _466;
        float _2118 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
        float _2119 = _2118 * _2112;
        float _2120 = _2118 * _2113;
        float _2121 = _2118 * _2114;
        float _2122 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_2092].xyz));
        float _4016 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2125 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _2126 = dot(vec3(_381, _382, _383), vec3(_2119, _2120, _2121));
        float _4027 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2129 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _2130 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2119, _2120, _2121));
        float _4038 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2134 = _2111 * _2111;
        float _2138 = ((_2129 * _2129) * (_2134 + (-1.0))) + 1.0;
        float _2145 = exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0);
        float _2152 = 1.0 - _2111;
        float _2162 = (0.5 / (((_1772 * ((_2125 * _2152) + _2111)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _2152) + _2111) * _2125))) * _2125;
        float _4049 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2164 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_2134 / ((_2138 * _2138) * 3.141590118408203125));
        float _2165 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _2081 = (((((_2145 * _1794) + _543) * cbLight._m0[_2096].x) * _2164) * _2165) + _1967;
        _2083 = (((((_2145 * _1796) + _545) * cbLight._m0[_2096].y) * _2164) * _2165) + _1969;
        _2085 = (((((_2145 * _1797) + _546) * cbLight._m0[_2096].z) * _2164) * _2165) + _1971;
    }
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    if (_1603.y == 0u)
    {
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2240;
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2240;
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2240;
        uvec4 _2255 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2256 = _2255.x;
        uint _2267 = uint((float(_2255.y) * floor(float(uint(cbSceneParam._m0[85u].y * _477) / _2256))) + floor(float(uint(cbSceneParam._m0[85u].x * _476) / _2256)));
        float _2277 = (log2(_2243 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2278 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        uint _2281 = uint(isnan(14.0) ? _2278 : (isnan(_2278) ? 14.0 : min(_2278, 14.0)));
        uvec4 _2286 = texelFetch(g_lightClusterGridBuffer, int(((_2281 << 2u) + (_2267 << 6u)) >> 2u));
        uint _2287 = _2286.x;
        uint _2288 = _2255.z;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        if (((((1u << ((_2288 >> 4u) & 15u)) + 4294967295u) & _2287) == 0u) || ((_2288 & 240u) == 0u))
        {
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
        }
        else
        {
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            uint _2545 = 0u;
            uint _2554;
            bool _2555;
            for (;;)
            {
                _2554 = texelFetch(g_lightClassification, int((((_2281 << 5u) + (_2267 << 9u)) + (_2545 << 2u)) >> 2u)).x;
                _2555 = _2554 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2555)
                {
                    frontier_phi_67_pred = _2541;
                    frontier_phi_67_pred_1 = _2544;
                    frontier_phi_67_pred_2 = _2543;
                    frontier_phi_67_pred_3 = _2542;
                    frontier_phi_67_pred_4 = _2540;
                    frontier_phi_67_pred_5 = _2539;
                }
                else
                {
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    uint _2690;
                    _2684 = _2539;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2542;
                    _2688 = _2543;
                    _2689 = _2544;
                    _2690 = _2554;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    for (;;)
                    {
                        uint _2694 = uint(findLSB(_2690)) + (_2545 << 5u);
                        uint _2691 = (_2690 + 4294967295u) & _2690;
                        uint _2696 = _2694 * 48u;
                        vec4 _2710 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2696)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 3u)).x));
                        uint _2716 = (_2694 * 48u) + 4u;
                        vec4 _2729 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2716)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 3u)).x));
                        uint _2735 = (_2694 * 48u) + 8u;
                        vec3 _2746 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2735)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 2u)).x));
                        float _2750 = _2710.x - _2241;
                        float _2751 = _2710.y - _2242;
                        float _2752 = _2710.z - _2243;
                        float _2753 = dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752));
                        float _2756 = inversesqrt(_2753);
                        float _2757 = _2756 * _2750;
                        float _2758 = _2756 * _2751;
                        float _2759 = _2756 * _2752;
                        float _2760 = dot(vec3(_498, _501, _504), vec3(_2757, _2758, _2759));
                        float _2765 = 1.0 - (_2753 * _2710.w);
                        float _4075 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2766 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                        float _2767 = sqrt(_2753) * _2729.w;
                        float _2770 = 1.39999997615814208984375 / (_2767 + 1.39999997615814208984375);
                        float _2771 = _2770 * _2770;
                        float _2774 = ((1.0 - _2771) * _2760) + _2771;
                        float _2777 = _2767 * _2767;
                        float _2781 = ((isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0))) * _2766) / ((_2777 * 0.699999988079071044921875) + 1.0);
                        float _2785 = (-0.0) - _2241;
                        float _2786 = (-0.0) - _2242;
                        float _2787 = (-0.0) - _2243;
                        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
                        float _2792 = _2791 * _2785;
                        float _2793 = _2791 * _2786;
                        float _2794 = _2791 * _2787;
                        float _2802 = exp2(log2(1.0 / ((_2777 * 3.5) + 5.0)) * 0.25);
                        float _2803 = 1.0 - _574;
                        float _2810 = sqrt(1.0 - ((1.0 - (_2803 * _2803)) * (1.0 - (_2802 * _2802))));
                        float _2811 = _2810 * _2810;
                        float _2812 = _2811 * _2811;
                        float _2813 = _2792 + _2757;
                        float _2814 = _2793 + _2758;
                        float _2815 = _2794 + _2759;
                        float _2819 = inversesqrt(dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815)));
                        float _2823 = dot(vec3(_498, _501, _504), vec3(_2792, _2793, _2794));
                        float _4091 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2826 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                        float _2827 = dot(vec3(_498, _501, _504), vec3(_2819 * _2813, _2819 * _2814, _2819 * _2815));
                        float _4102 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2830 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                        float _2834 = ((_2830 * _2830) * (_2812 + (-1.0))) + 1.0;
                        float _2835 = _2770 * _2811;
                        float _2836 = _2835 * _2835;
                        float _2839 = ((1.0 - _2836) * _2760) + _2836;
                        float _4113 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2840 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2841 = 1.0 - _2811;
                        float _2851 = (0.5 / (((_2840 * ((_2826 * _2841) + _2811)) + 9.9999999392252902907785028219223e-09) + (((_2840 * _2841) + _2811) * _2826))) * _2840;
                        float _4124 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2862 = (((_2812 * 3.1415927410125732421875) * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) / ((_2834 * _2834) * ((_2777 * 2.1991131305694580078125) + 3.141590118408203125))) * _2766;
                        _2614 = (_2781 * _2729.x) + _2687;
                        _2615 = (_2781 * _2729.y) + _2688;
                        _2616 = (_2781 * _2729.z) + _2689;
                        _2611 = (_2862 * _2746.x) + _2684;
                        _2612 = (_2862 * _2746.y) + _2685;
                        _2613 = (_2862 * _2746.z) + _2686;
                        if (_2691 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2684 = _2611;
                            _2685 = _2612;
                            _2686 = _2613;
                            _2687 = _2614;
                            _2688 = _2615;
                            _2689 = _2616;
                            _2690 = _2691;
                        }
                    }
                    frontier_phi_67_pred = _2613;
                    frontier_phi_67_pred_1 = _2616;
                    frontier_phi_67_pred_2 = _2615;
                    frontier_phi_67_pred_3 = _2614;
                    frontier_phi_67_pred_4 = _2612;
                    frontier_phi_67_pred_5 = _2611;
                }
                _2392 = frontier_phi_67_pred;
                _2398 = frontier_phi_67_pred_1;
                _2396 = frontier_phi_67_pred_2;
                _2394 = frontier_phi_67_pred_3;
                _2390 = frontier_phi_67_pred_4;
                _2388 = frontier_phi_67_pred_5;
                uint _2546 = _2545 + 1u;
                if (_2546 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2539 = _2388;
                    _2540 = _2390;
                    _2541 = _2392;
                    _2542 = _2394;
                    _2543 = _2396;
                    _2544 = _2398;
                    _2545 = _2546;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
        }
        uvec4 _2401 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2402 = _2401.z;
        uint _2404 = (_2402 >> 8u) & 15u;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        if (((4294967295u << _2404) & _2287) == 0u)
        {
            _2507 = _2387;
            _2509 = _2389;
            _2511 = _2391;
            _2513 = _2393;
            _2515 = _2395;
            _2517 = _2397;
        }
        else
        {
            float _2532 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
            float _2533 = _2532 * _2241;
            float _2534 = _2532 * _2242;
            float _2535 = _2532 * _2243;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2404 < ((_2402 >> 12u) & 15u))
            {
                float _2508;
                float _2510;
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2667 = _2387;
                float _2668 = _2389;
                float _2669 = _2391;
                float _2670 = _2393;
                float _2671 = _2395;
                float _2672 = _2397;
                uint _2673 = _2404;
                uint _2682;
                bool _2683;
                for (;;)
                {
                    _2682 = texelFetch(g_lightClassification, int((((_2281 << 5u) + (_2267 << 9u)) + (_2673 << 2u)) >> 2u)).x;
                    _2683 = _2682 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2683)
                    {
                        frontier_phi_78_pred = _2672;
                        frontier_phi_78_pred_1 = _2671;
                        frontier_phi_78_pred_2 = _2670;
                        frontier_phi_78_pred_3 = _2669;
                        frontier_phi_78_pred_4 = _2668;
                        frontier_phi_78_pred_5 = _2667;
                    }
                    else
                    {
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _2889 = _2667;
                        float _2890 = _2668;
                        float _2891 = _2669;
                        float _2892 = _2670;
                        float _2893 = _2671;
                        float _2894 = _2672;
                        uint _2895 = _2682;
                        uint _2896;
                        vec4 _2921;
                        float _2922;
                        vec4 _2937;
                        vec3 _2949;
                        vec4 _2965;
                        vec4 _2981;
                        float _3028;
                        bool _3029;
                        for (;;)
                        {
                            uint _2906 = ((_2673 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2895));
                            _2896 = (_2895 + 4294967295u) & _2895;
                            uint _2908 = _2906 * 40u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            _2922 = _2921.w;
                            uint _2924 = (_2906 * 40u) + 4u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2939 = (_2906 * 40u) + 8u;
                            _2949 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x));
                            uint _2952 = (_2906 * 40u) + 16u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2968 = (_2906 * 40u) + 20u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2984 = (_2906 * 40u) + 24u;
                            vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            uint _3003 = (_2906 * 40u) + 28u;
                            vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            _3028 = fma(_2243, _3016.z, fma(_2242, _3016.y, _3016.x * _2241)) + _3016.w;
                            _3029 = !((fma(_2243, _2997.z, fma(_2242, _2997.y, _2997.x * _2241)) + _2997.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3029)
                            {
                                float _3056 = _2921.x - _2241;
                                float _3057 = _2921.y - _2242;
                                float _3058 = _2921.z - _2243;
                                float _3059 = dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058));
                                float _3062 = inversesqrt(_3059);
                                float _3063 = _3062 * _3056;
                                float _3064 = _3062 * _3057;
                                float _3065 = _3062 * _3058;
                                float _3069 = 1.0 - (_3059 / (_2922 * _2922));
                                float _4135 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3070 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3074 = sqrt(_3059) * _2937.w;
                                float _3076 = 1.39999997615814208984375 / (_3074 + 1.39999997615814208984375);
                                float _3077 = _3076 * _3076;
                                float _3080 = ((1.0 - _3077) * dot(vec3(_3063, _3064, _3065), vec3(_498, _501, _504))) + _3077;
                                float _3083 = _3074 * _3074;
                                float _3087 = (fma(_2243, _2965.z, fma(_2242, _2965.y, _2965.x * _2241)) + _2965.w) / _3028;
                                float _3088 = (fma(_2243, _2981.z, fma(_2242, _2981.y, _2981.x * _2241)) + _2981.w) / _3028;
                                float _3092 = 1.0 - dot(vec2(_3087, _3088), vec2(_3087, _3088));
                                float _4151 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3094 = _3093 * (((isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))) * _3070) / ((_3083 * 0.699999988079071044921875) + 1.0));
                                float _3106 = exp2(log2(1.0 / ((_3083 * 3.5) + 5.0)) * 0.25);
                                float _3107 = 1.0 - _574;
                                float _3114 = sqrt(1.0 - ((1.0 - (_3107 * _3107)) * (1.0 - (_3106 * _3106))));
                                float _3115 = _3114 * _3114;
                                float _3116 = _3115 * _3115;
                                float _3117 = _3063 - _2533;
                                float _3118 = _3064 - _2534;
                                float _3119 = _3065 - _2535;
                                float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                                float _3127 = dot(vec3(_498, _501, _504), vec3((-0.0) - _2533, (-0.0) - _2534, (-0.0) - _2535));
                                float _4162 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3130 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                                float _3131 = dot(vec3(_498, _501, _504), vec3(_3123 * _3117, _3123 * _3118, _3123 * _3119));
                                float _4173 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3134 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3138 = ((_3134 * _3134) * (_3116 + (-1.0))) + 1.0;
                                float _3139 = _3076 * _3115;
                                float _3140 = _3139 * _3139;
                                float _3146 = ((1.0 - _3140) * dot(vec3(_498, _501, _504), vec3(_3063, _3064, _3065))) + _3140;
                                float _4184 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3147 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3148 = 1.0 - _3115;
                                float _3158 = (0.5 / (((_3147 * ((_3130 * _3148) + _3115)) + 9.9999999392252902907785028219223e-09) + (((_3147 * _3148) + _3115) * _3130))) * _3147;
                                float _4195 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3168 = (_3093 * _3070) * (((_3116 * 3.1415927410125732421875) * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) / ((_3138 * _3138) * ((_3083 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3094 * _2937.z;
                                frontier_phi_84_pred_1 = _3094 * _2937.y;
                                frontier_phi_84_pred_2 = _3094 * _2937.x;
                                frontier_phi_84_pred_3 = _3168 * _2949.z;
                                frontier_phi_84_pred_4 = _3168 * _2949.y;
                                frontier_phi_84_pred_5 = _3168 * _2949.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3177 = frontier_phi_84_pred;
                            _3176 = frontier_phi_84_pred_1;
                            _3175 = frontier_phi_84_pred_2;
                            _3174 = frontier_phi_84_pred_3;
                            _3173 = frontier_phi_84_pred_4;
                            _3172 = frontier_phi_84_pred_5;
                            _2879 = _3175 + _2892;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            _2876 = _3172 + _2889;
                            _2877 = _3173 + _2890;
                            _2878 = _3174 + _2891;
                            if (_2896 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2896;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2881;
                        frontier_phi_78_pred_1 = _2880;
                        frontier_phi_78_pred_2 = _2879;
                        frontier_phi_78_pred_3 = _2878;
                        frontier_phi_78_pred_4 = _2877;
                        frontier_phi_78_pred_5 = _2876;
                    }
                    _2518 = frontier_phi_78_pred;
                    _2516 = frontier_phi_78_pred_1;
                    _2514 = frontier_phi_78_pred_2;
                    _2512 = frontier_phi_78_pred_3;
                    _2510 = frontier_phi_78_pred_4;
                    _2508 = frontier_phi_78_pred_5;
                    uint _2674 = _2673 + 1u;
                    if (_2674 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2667 = _2508;
                        _2668 = _2510;
                        _2669 = _2512;
                        _2670 = _2514;
                        _2671 = _2516;
                        _2672 = _2518;
                        _2673 = _2674;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2514;
                frontier_phi_59_60_ladder_1 = _2518;
                frontier_phi_59_60_ladder_2 = _2516;
                frontier_phi_59_60_ladder_3 = _2512;
                frontier_phi_59_60_ladder_4 = _2510;
                frontier_phi_59_60_ladder_5 = _2508;
            }
            else
            {
                frontier_phi_59_60_ladder = _2393;
                frontier_phi_59_60_ladder_1 = _2397;
                frontier_phi_59_60_ladder_2 = _2395;
                frontier_phi_59_60_ladder_3 = _2391;
                frontier_phi_59_60_ladder_4 = _2389;
                frontier_phi_59_60_ladder_5 = _2387;
            }
            _2507 = frontier_phi_59_60_ladder_5;
            _2509 = frontier_phi_59_60_ladder_4;
            _2511 = frontier_phi_59_60_ladder_3;
            _2513 = frontier_phi_59_60_ladder;
            _2515 = frontier_phi_59_60_ladder_2;
            _2517 = frontier_phi_59_60_ladder_1;
        }
        float _2522 = isnan(1.0) ? _558 : (isnan(_558) ? 1.0 : min(_558, 1.0));
        _2299 = (_2522 * _2513) + _1736;
        _2301 = (_2522 * _2515) + _1738;
        _2303 = (_2522 * _2517) + _1740;
        _2305 = ((_2507 * _543) * _2522) + _2081;
        _2307 = ((_2509 * _545) * _2522) + _2083;
        _2309 = ((_2511 * _546) * _2522) + _2085;
    }
    else
    {
        _2299 = _1736;
        _2301 = _1738;
        _2303 = _1740;
        _2305 = _2081;
        _2307 = _2083;
        _2309 = _2085;
    }
    float _4211 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _4222 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4233 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _2326 = ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2299 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _558))) + ((_2305 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1368)) * cbPerFrame._m0[3u].x);
    float _2327 = ((isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2301 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _558))) + ((_2307 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _1368)) * cbPerFrame._m0[3u].x);
    float _2328 = ((isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2303 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _558))) + ((_2309 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1368)) * cbPerFrame._m0[3u].x);
    uint _2329 = _517 + 6u;
    float _2337 = _476 / cbSceneParam._m0[86u].x;
    float _2338 = _477 / cbSceneParam._m0[86u].y;
    vec4 _2352 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2337, _2338, (log2((isnan(cbSceneParam._m0[77u].w) ? _408 : (isnan(_408) ? cbSceneParam._m0[77u].w : min(_408, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2354 = _2352.x;
    float _2355 = _2352.y;
    float _2356 = _2352.z;
    float _2357 = _2352.w;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    if (_408 > cbSceneParam._m0[78u].w)
    {
        float _2412 = isnan(_408) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _408 : min(cbSceneParam._m0[80u].w, _408));
        float _2413 = _2412 / _408;
        float _2424 = _2413 * _457;
        float _2425 = _458 * _2413;
        float _2426 = (-0.0) - _2425;
        float _2427 = _2413 * _459;
        float _2429 = (cbSceneParam._m0[77u].w * _2426) / _2412;
        float _2430 = _2429 + cbSceneParam._m0[79u].w;
        float _2431 = cbSceneParam._m0[79u].w - _2425;
        float _2437 = sqrt(((_2424 * _2424) + (_2425 * _2425)) + (_2427 * _2427));
        float _2440 = (1.0 - (cbSceneParam._m0[77u].w / _2412)) * _2437;
        float _2445 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2447 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2624;
        if (abs((_2426 - _2429) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2624 = ((((_2430 > 0.0) ? exp2(_2445 * _2430) : (2.0 - exp2(_2447 * _2430))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2440;
        }
        else
        {
            float _2568 = 1.0 / cbSceneParam._m0[80u].x;
            float _2569 = isnan(_2431) ? _2430 : (isnan(_2430) ? _2431 : max(_2430, _2431));
            float _2570 = isnan(_2431) ? _2430 : (isnan(_2430) ? _2431 : min(_2430, _2431));
            float _2579 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : min(_2569, 0.0));
            float _2580 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : min(_2570, 0.0));
            _2624 = ((abs(_2437 / _2426) * cbSceneParam._m0[80u].y) * ((((_2579 - _2580) * 2.0) - ((exp2(_2445 * (isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0)))) - exp2(_2445 * (isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0))))) * _2568)) - ((exp2(_2447 * _2579) - exp2(_2447 * _2580)) * _2568))) + (_2440 * cbSceneParam._m0[80u].z);
        }
        vec4 _2626 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2337, _2338, 1.0), 0.0);
        float _2635 = exp2((_2624 * (-1.44269502162933349609375)) * (1.0 - _2626.w));
        float _2636 = log2(_2635);
        float _2652 = log2(_2357);
        _2449 = (exp2(_2652 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2636 * cbSceneParam._m0[78u].x)) * _2626.x) / cbSceneParam._m0[78u].x)) + _2354;
        _2451 = (exp2(_2652 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2636 * cbSceneParam._m0[78u].y)) * _2626.y) / cbSceneParam._m0[78u].y)) + _2355;
        _2453 = (exp2(_2652 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2636 * cbSceneParam._m0[78u].z)) * _2626.z) / cbSceneParam._m0[78u].z)) + _2356;
        _2455 = _2635 * _2357;
    }
    else
    {
        _2449 = _2354;
        _2451 = _2355;
        _2453 = _2356;
        _2455 = _2357;
    }
    bool _2662;
    vec4 _2465;
    vec4 _2487;
    float _2489;
    float _2493;
    float _2494;
    float _2495;
    float _2496;
    bool _2506;
    for (;;)
    {
        _2465 = cbMatDynParam._m0[0u];
        float _2467 = roundEven(_2465.y);
        bool _2468 = _2467 == 3.0;
        float _2469 = log2(_2455);
        float _2476 = exp2(_2469 * cbSceneParam._m0[78u].x) * _2326;
        float _2477 = exp2(_2469 * cbSceneParam._m0[78u].y) * _2327;
        float _2478 = exp2(_2469 * cbSceneParam._m0[78u].z) * _2328;
        float _2485 = _470 + (-0.5);
        _2487 = cbMtdParam._m0[1u];
        _2489 = _2487.y * _2485;
        float _2492 = (_2467 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2493 = _2492 * (_2468 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2449)));
        _2494 = _2492 * (_2468 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2451)));
        _2495 = _2492 * (_2468 ? _2478 : (_2478 + (cbSceneParam._m0[72u].w * _2453)));
        _2496 = _2485 * 0.999000012874603271484375;
        _2506 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2506)
        {
            if ((cbInstanceData._m0[_517 + 7u].x + _2496) < 0.5)
            {
                _2662 = true;
                break;
            }
        }
        uint _2603 = _519 + uint(_2465.w);
        if ((cbInstanceData._m0[_2603].w < 1.0) && ((cbInstanceData._m0[_2603].w + _2496) < 0.5))
        {
            _2662 = true;
            break;
        }
        if ((_2489 + _295) < _2487.x)
        {
            _2662 = true;
            break;
        }
        _2662 = false;
        break;
    }
    float _2867;
    if (_2662)
    {
        discard_state = true;
        _2867 = 0.0;
    }
    else
    {
        _2867 = cbInstanceData._m0[_2329].w;
    }
    SV_Target.x = _2493;
    SV_Target.y = _2494;
    SV_Target.z = _2495;
    SV_Target.w = _2867;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2329].w;
    discard_exit();
}


