#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1038;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _251 = _245.x * cbMtdParam._m0[10u].x;
    float _252 = _245.y * cbMtdParam._m0[10u].y;
    float _253 = _245.z * cbMtdParam._m0[10u].z;
    float _258 = 1.0 - cbMtdParam._m0[13u].z;
    float _3395 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _260 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    vec4 _278 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _286 = ((_251 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _278.x;
    float _289 = ((_252 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _278.y;
    float _292 = ((_253 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _278.z;
    float _299 = ((_251 - _286) * _260) + _286;
    float _300 = ((_252 - _289) * _260) + _289;
    float _301 = ((_253 - _292) * _260) + _292;
    vec4 _319 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _349 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3406 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _357 = (_350 * ((_319.x * cbMtdParam._m0[11u].x) - _299)) + _299;
    float _358 = (_350 * ((_319.y * cbMtdParam._m0[11u].y) - _300)) + _300;
    float _359 = (_350 * ((_319.z * cbMtdParam._m0[11u].z) - _301)) + _301;
    vec4 _372 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _374 = _372.x;
    float _379 = 1.0 - cbMtdParam._m0[14u].z;
    float _3417 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _383 = _374 - ((_374 * TEXCOORD_5.x) * (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))));
    vec4 _397 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _401 = _397.z;
    vec4 _414 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _425 = cbMtdParam._m0[13u].w * _401;
    float _428 = (((((_401 * 2.0) * _414.z) * cbMtdParam._m0[14u].x) - _425) * cbMtdParam._m0[13u].y) + _425;
    vec4 _441 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _456 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_441.z * cbMtdParam._m0[14u].y) - _428)) + _428;
    float _463 = (_397.x * 2.0) + (-1.0);
    float _464 = (_397.y * 2.0) + (-1.0);
    float _465 = dot(vec2(_463, _464), vec2(_463, _464));
    float _3428 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _470 = sqrt(1.0 - (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))));
    float _481 = ((cbMtdParam._m0[13u].x * ((_414.x * 2.0) + (-1.0))) + _463) + ((((_441.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _482 = ((cbMtdParam._m0[13u].x * ((_414.y * 2.0) + (-1.0))) + _464) + ((((_441.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _485 = fma(_470, _210 * NORMAL.x, fma(_482, _217 * TANGENT.x, (_203 * _195) * _481));
    float _488 = fma(_470, _210 * NORMAL.y, fma(_482, _217 * TANGENT.y, (_203 * _196) * _481));
    float _491 = fma(_470, _210 * NORMAL.z, fma(_482, _217 * TANGENT.z, (_203 * _197) * _481));
    float _495 = inversesqrt(dot(vec3(_485, _488, _491), vec3(_485, _488, _491)));
    float _496 = _495 * _485;
    float _497 = _495 * _488;
    float _498 = _495 * _491;
    float _3439 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _499 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _3450 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _3461 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _3472 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _3483 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _503 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _519 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _569 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _559);
    float _570 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _559);
    float _571 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _559);
    float _575 = inversesqrt(dot(vec3(_569, _570, _571), vec3(_569, _570, _571)));
    float _576 = _569 * _575;
    float _577 = _570 * _575;
    float _578 = _571 * _575;
    float _584 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _585 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _604 = fma(_498, cbSceneParam._m0[5u].z, fma(_497, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _496));
    float _607 = fma(_498, cbSceneParam._m0[6u].z, fma(_497, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _496));
    float _610 = fma(_498, cbSceneParam._m0[7u].z, fma(_497, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _496));
    uint _623 = uint(roundEven(NORMAL.w)) * 13u;
    uint _625 = (_623 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _631 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) * cbInstanceData._m0[_625].x;
    float _632 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0)))) * cbInstanceData._m0[_625].y;
    float _633 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0)))) * cbInstanceData._m0[_625].z;
    float _3494 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _3505 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _3516 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _637 = 1.0 - _503;
    float _638 = _634 * _637;
    float _639 = _635 * _637;
    float _640 = _636 * _637;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _503;
    float _646 = (_635 + (-0.039999999105930328369140625)) * _503;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _503;
    float _648 = _645 + 0.039999999105930328369140625;
    float _650 = _646 + 0.039999999105930328369140625;
    float _651 = _647 + 0.039999999105930328369140625;
    vec4 _660 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _584, cbSceneParam._m0[86u].y * _585));
    float _663 = _660.x * TEXCOORD_5.w;
    float _664 = dot(vec3(_496, _497, _498), vec3(_576, _577, _578));
    float _667 = _664 * 2.0;
    float _671 = (_667 * _496) - _576;
    float _672 = (_667 * _497) - _577;
    float _673 = (_667 * _498) - _578;
    float _677 = abs(dot(vec3(_576, _577, _578), vec3(_496, _497, _498)));
    float _3527 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = sqrt(_499);
    float _692 = exp2((_679 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_679 * 3.0));
    float _698 = (1.0 - _692) * ((_679 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _699 = _692 * _679;
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1037;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _762 = fma(_735, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _727));
        float _766 = fma(_735, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _727));
        float _770 = fma(_735, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _727));
        float _795 = _727 + _496;
        float _796 = _731 + _497;
        float _797 = _735 + _498;
        float _807 = fma(_797, cbModelParam._m0[26u].z, fma(_796, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _795)) - _762;
        float _808 = fma(_797, cbModelParam._m0[27u].z, fma(_796, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _795)) - _766;
        float _809 = fma(_797, cbModelParam._m0[28u].z, fma(_796, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _795)) - _770;
        float _813 = inversesqrt(dot(vec3(_807, _808, _809), vec3(_807, _808, _809)));
        float _826 = ((_813 * _807) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_762 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_813 * _808) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_766 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_813 * _809) / cbModelParam._m0[34u].z) + ((((((_770 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        float _865 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_831.x + (-0.5));
        float _867 = _865 * (_831.y + (-0.5));
        float _868 = _865 * (_831.z + (-0.5));
        float _875 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_838.x + (-0.5));
        float _877 = _875 * (_838.y + (-0.5));
        float _878 = _875 * (_838.z + (-0.5));
        float _885 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_845.x + (-0.5));
        float _887 = _885 * (_845.y + (-0.5));
        float _888 = _885 * (_845.z + (-0.5));
        float _895 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_852.x + (-0.5));
        float _897 = _895 * (_852.y + (-0.5));
        float _898 = _895 * (_852.z + (-0.5));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = _866 * 0.5;
        float _903 = _876 * 0.5;
        float _904 = _886 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _919 = (dot(vec3(_496, _497, _498), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _929 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3575 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_931 + 1.0))) + _936) * _899;
        float _946 = _867 * 0.5;
        float _947 = _877 * 0.5;
        float _948 = _887 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_496, _497, _498), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3608 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_973 + 1.0))) + _978) * _900;
        float _988 = _868 * 0.5;
        float _989 = _878 * 0.5;
        float _990 = _888 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_496, _497, _498), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3619 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3630 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3641 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_1015 + 1.0))) + _1020) * _901;
        _1037 = _868;
        _1039 = _867;
        _1040 = _866;
        _1041 = _878;
        _1042 = _877;
        _1043 = _876;
        _1044 = _888;
        _1045 = _887;
        _1046 = _886;
        _1047 = _901;
        _1048 = _900;
        _1049 = _899;
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
    }
    else
    {
        _1037 = _1038;
        _1039 = _1038;
        _1040 = _1038;
        _1041 = _1038;
        _1042 = _1038;
        _1043 = _1038;
        _1044 = _1038;
        _1045 = _1038;
        _1046 = _1038;
        _1047 = _1038;
        _1048 = _1038;
        _1049 = _1038;
        _1050 = 0.0;
        _1051 = 0.0;
        _1052 = 0.0;
    }
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1078 = fma(_735, cbModelParam._m0[30u].z, fma(_731, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _727));
        float _1082 = fma(_735, cbModelParam._m0[31u].z, fma(_731, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _727));
        float _1086 = fma(_735, cbModelParam._m0[32u].z, fma(_731, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _727));
        float _1109 = _727 + _496;
        float _1110 = _731 + _497;
        float _1111 = _735 + _498;
        float _1121 = fma(_1111, cbModelParam._m0[30u].z, fma(_1110, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1109)) - _1078;
        float _1122 = fma(_1111, cbModelParam._m0[31u].z, fma(_1110, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1109)) - _1082;
        float _1123 = fma(_1111, cbModelParam._m0[32u].z, fma(_1110, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1109)) - _1086;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1078 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1082 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[35u].z) + ((((((_1086 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1177 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1144.x + (-0.5));
        float _1179 = _1177 * (_1144.y + (-0.5));
        float _1180 = _1177 * (_1144.z + (-0.5));
        float _1187 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1151.x + (-0.5));
        float _1189 = _1187 * (_1151.y + (-0.5));
        float _1190 = _1187 * (_1151.z + (-0.5));
        float _1197 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1158.x + (-0.5));
        float _1199 = _1197 * (_1158.y + (-0.5));
        float _1200 = _1197 * (_1158.z + (-0.5));
        float _1207 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1165.x + (-0.5));
        float _1209 = _1207 * (_1165.y + (-0.5));
        float _1210 = _1207 * (_1165.z + (-0.5));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = _1178 * 0.5;
        float _1215 = _1188 * 0.5;
        float _1216 = _1198 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_496, _497, _498), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3704 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1241 + 1.0))) + _1246) * _1211;
        float _1256 = _1179 * 0.5;
        float _1257 = _1189 * 0.5;
        float _1258 = _1199 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_496, _497, _498), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3737 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1283 + 1.0))) + _1288) * _1212;
        float _1298 = _1180 * 0.5;
        float _1299 = _1190 * 0.5;
        float _1300 = _1200 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_496, _497, _498), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3770 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1325 + 1.0))) + _1330) * _1213;
        _1347 = _1180;
        _1348 = _1179;
        _1349 = _1178;
        _1350 = _1190;
        _1351 = _1189;
        _1352 = _1188;
        _1353 = _1200;
        _1354 = _1199;
        _1355 = _1198;
        _1356 = _1213;
        _1357 = _1212;
        _1358 = _1211;
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
    }
    else
    {
        _1347 = _1038;
        _1348 = _1038;
        _1349 = _1038;
        _1350 = _1038;
        _1351 = _1038;
        _1352 = _1038;
        _1353 = _1038;
        _1354 = _1038;
        _1355 = _1038;
        _1356 = _1038;
        _1357 = _1038;
        _1358 = _1038;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1050)) + _1050;
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1051)) + _1051;
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1052)) + _1052;
    float _1394 = fma(_1373, cbSceneParam._m0[89u].z, fma(_1372, cbSceneParam._m0[89u].y, _1371 * cbSceneParam._m0[89u].x));
    float _1397 = fma(_1373, cbSceneParam._m0[90u].z, fma(_1372, cbSceneParam._m0[90u].y, _1371 * cbSceneParam._m0[90u].x));
    float _1400 = fma(_1373, cbSceneParam._m0[91u].z, fma(_1372, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1371));
    float _1415 = _671 * 0.5;
    float _1416 = _672 * 0.5;
    float _1417 = _673 * 0.5;
    float _1418 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1421 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1424 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1458;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1431 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1037, _1041, _1044, _1047));
        float _1435 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1439 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1040, _1043, _1046, _1049));
        float _1446 = dot(vec4(cbModelParam._m0[39u]), vec4(_1415, _1416, _1417, 1.0));
        _1458 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1446) ? 0.0 : (isnan(0.0) ? _1446 : max(0.0, _1446))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1458 = 1.0;
    }
    float _1469;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1460 = dot(vec4(cbModelParam._m0[40u]), vec4(_1415, _1416, _1417, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1473 = (_1469 * cbModelParam._m0[1u].x) + (_1458 * (1.0 - cbModelParam._m0[1u].x));
    float _1483 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _499);
    float _1484 = isnan(_1483) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1483 : min(cbModelParam._m0[25u].z, _1483));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1531 = fma(_735, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _727)) + cbModelParam._m0[13u].w;
        float _1535 = fma(_735, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _727)) + cbModelParam._m0[14u].w;
        float _1539 = fma(_735, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _727)) + cbModelParam._m0[15u].w;
        float _1542 = fma(_673, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671));
        float _1545 = fma(_673, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671));
        float _1548 = fma(_673, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671));
        float _1576;
        if (_1542 > 0.0)
        {
            _1576 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1576 = frontier_phi_14_12_ladder;
        }
        float _1803;
        if (_1545 > 0.0)
        {
            _1803 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1803 = frontier_phi_23_19_ladder;
        }
        float _2060;
        if (_1548 > 0.0)
        {
            _2060 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2060 = frontier_phi_35_30_ladder;
        }
        float _2062 = isnan(_1803) ? _1576 : (isnan(_1576) ? _1803 : min(_1576, _1803));
        float _2063 = isnan(_2060) ? _2062 : (isnan(_2062) ? _2060 : min(_2062, _2060));
        float _2067 = (_2063 * _1542) + _1531;
        float _2068 = (_2063 * _1545) + _1535;
        float _2069 = (_2063 * _1548) + _1539;
        float _2070 = _2063 * 9.9999997473787516355514526367188e-05;
        float _2072 = (-1.0) - _2070;
        float _2074 = _2070 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2069 > _2074) || ((_2069 < _2072) || ((_2068 > _2074) || ((_2068 < _2072) || ((_2067 < _2072) || (_2067 > _2074))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2197 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2069, cbModelParam._m0[9u].z, fma(_2068, cbModelParam._m0[9u].y, _2067 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2069, cbModelParam._m0[10u].z, fma(_2068, cbModelParam._m0[10u].y, _2067 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2069, cbModelParam._m0[11u].z, fma(_2068, cbModelParam._m0[11u].y, _2067 * cbModelParam._m0[11u].x))), _1484);
            frontier_phi_13_35_ladder = _2197.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2197.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2197.x * cbModelParam._m0[1u].y;
        }
        _1564 = frontier_phi_13_35_ladder_2;
        _1566 = frontier_phi_13_35_ladder_1;
        _1568 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_671, _672, _673), _1484);
        _1564 = _1552.x * cbModelParam._m0[1u].y;
        _1566 = _1552.y * cbModelParam._m0[1u].y;
        _1568 = _1552.z * cbModelParam._m0[1u].y;
    }
    float _1572 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _499);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1572 : min(cbModelParam._m0[25u].w, _1572));
    float _1666;
    float _1668;
    float _1670;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1630 = fma(_735, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _727)) + cbModelParam._m0[21u].w;
        float _1634 = fma(_735, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _727)) + cbModelParam._m0[22u].w;
        float _1638 = fma(_735, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _727)) + cbModelParam._m0[23u].w;
        float _1641 = fma(_673, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671));
        float _1644 = fma(_673, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671));
        float _1647 = fma(_673, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671));
        float _1808;
        if (_1641 > 0.0)
        {
            _1808 = abs((1.0 - _1630) / _1641);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1630 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1808 = frontier_phi_25_21_ladder;
        }
        float _2087;
        if (_1644 > 0.0)
        {
            _2087 = abs((1.0 - _1634) / _1644);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1634 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2087 = frontier_phi_37_32_ladder;
        }
        float _2300;
        if (_1647 > 0.0)
        {
            _2300 = abs((1.0 - _1638) / _1647);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1638 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2300 = frontier_phi_46_43_ladder;
        }
        float _2302 = isnan(_2087) ? _1808 : (isnan(_1808) ? _2087 : min(_1808, _2087));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1641) + _1630;
        float _2308 = (_2303 * _1644) + _1634;
        float _2309 = (_2303 * _1647) + _1638;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2310;
        float _2313 = _2310 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2309 > _2313) || ((_2309 < _2311) || ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 < _2311) || (_2307 > _2313))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2309, cbModelParam._m0[17u].z, fma(_2308, cbModelParam._m0[17u].y, _2307 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2309, cbModelParam._m0[18u].z, fma(_2308, cbModelParam._m0[18u].y, _2307 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2309, cbModelParam._m0[19u].z, fma(_2308, cbModelParam._m0[19u].y, _2307 * cbModelParam._m0[19u].x))), _1573);
            frontier_phi_22_46_ladder = _2508.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2508.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2508.x * cbModelParam._m0[1u].z;
        }
        _1666 = frontier_phi_22_46_ladder_2;
        _1668 = frontier_phi_22_46_ladder_1;
        _1670 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_671, _672, _673), _1573);
        _1666 = _1650.x * cbModelParam._m0[1u].z;
        _1668 = _1650.y * cbModelParam._m0[1u].z;
        _1670 = _1650.z * cbModelParam._m0[1u].z;
    }
    float _1683 = (((_698 * _648) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1666 - _1564)) + _1564);
    float _1685 = (((_698 * _650) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1668 - _1566)) + _1566);
    float _1687 = (((_698 * _651) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1670 - _1568)) + _1568);
    float _1690 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1685, cbSceneParam._m0[89u].y, _1683 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1685, cbSceneParam._m0[90u].y, _1683 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1685, cbSceneParam._m0[91u].y, _1683 * cbSceneParam._m0[91u].x));
    vec4 _1704 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_584, _585));
    float _1706 = _1704.w;
    float _1718 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1706);
    float _1719 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1706);
    float _1720 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1706);
    uvec4 _1724 = floatBitsToUint(cbInstanceData._m0[_623 + 5u]);
    uint _1726 = _1724.x * 14u;
    uint _1727 = _1726 + 13u;
    float _1734 = _663 + (-1.0);
    float _1739 = (cbLight._m0[_1727].x * _1734) + 1.0;
    float _1740 = (cbLight._m0[_1727].y * _1734) + 1.0;
    float _1741 = (cbLight._m0[_1727].z * _1734) + 1.0;
    float _1742 = (cbLight._m0[_1727].w * _1734) + 1.0;
    uint _1743 = _1726 + 5u;
    float _1749 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
    uint _1753 = _1726 + 4u;
    float _1762 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
    uint _1766 = _1726 | 1u;
    float _1777 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_496, _497, _498));
    float _1780 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_496, _497, _498));
    float _3906 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _3917 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1785 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * 0.3183098733425140380859375;
    float _1787 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * 0.3183098733425140380859375;
    float _1794 = ((cbLight._m0[_1743].x * _1749) * _1787) + (((cbLight._m0[_1753].x * _1718) * _1762) * _1785);
    float _1795 = ((_1749 * cbLight._m0[_1743].y) * _1787) + (((cbLight._m0[_1753].y * _1719) * _1762) * _1785);
    float _1796 = ((_1749 * cbLight._m0[_1743].z) * _1787) + (((cbLight._m0[_1753].z * _1720) * _1762) * _1785);
    uvec4 _1800 = floatBitsToUint(cbLight._m0[_1726 + 12u]);
    bool _1802 = _1800.x == 0u;
    float _1813;
    float _1815;
    float _1817;
    if (_1802)
    {
        _1813 = _1794;
        _1815 = _1795;
        _1817 = _1796;
    }
    else
    {
        uint _1821 = _1726 + 6u;
        float _1837 = (dot(vec3(cbLight._m0[_1726 + 2u].xyz), vec3(_496, _497, _498)) * 0.5) + 0.5;
        float _1838 = _1837 * _1837;
        float _3928 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1840 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _1813 = (((cbLight._m0[_1821].x * 0.3183098733425140380859375) * _1839) * _1840) + _1794;
        _1815 = (((cbLight._m0[_1821].y * 0.3183098733425140380859375) * _1839) * _1840) + _1795;
        _1817 = (((cbLight._m0[_1821].z * 0.3183098733425140380859375) * _1839) * _1840) + _1796;
    }
    bool _1820 = _1800.y == 0u;
    float _1858;
    float _1860;
    float _1862;
    if (_1820)
    {
        _1858 = _1813;
        _1860 = _1815;
        _1862 = _1817;
    }
    else
    {
        uint _2031 = _1726 + 7u;
        float _2047 = (dot(vec3(cbLight._m0[_1726 + 3u].xyz), vec3(_496, _497, _498)) * 0.5) + 0.5;
        float _2048 = _2047 * _2047;
        float _3944 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _2050 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
        _1858 = (((cbLight._m0[_2031].x * 0.3183098733425140380859375) * _2049) * _2050) + _1813;
        _1860 = (((cbLight._m0[_2031].y * 0.3183098733425140380859375) * _2049) * _2050) + _1815;
        _1862 = (((cbLight._m0[_2031].z * 0.3183098733425140380859375) * _2049) * _2050) + _1817;
    }
    uint _1865 = _1726 + 8u;
    float _1878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1726].w)) * _499) * 0.949999988079071044921875);
    float _1879 = _1878 * _1878;
    float _1880 = cbLight._m0[_1726].x + _576;
    float _1881 = cbLight._m0[_1726].y + _577;
    float _1882 = cbLight._m0[_1726].z + _578;
    float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
    float _1887 = _1886 * _1880;
    float _1888 = _1886 * _1881;
    float _1889 = _1886 * _1882;
    float _1890 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_1726].xyz));
    float _3960 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _1894 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _1895 = dot(vec3(_496, _497, _498), vec3(_1887, _1888, _1889));
    float _3982 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_1887, _1888, _1889));
    float _3993 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1879 * _1879;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1915 = exp2(log2(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * 5.0);
    float _1916 = 0.959999978542327880859375 - _645;
    float _1918 = 0.959999978542327880859375 - _646;
    float _1919 = 0.959999978542327880859375 - _647;
    float _1926 = 1.0 - _1879;
    float _1937 = (0.5 / (((_1894 * ((_1893 * _1926) + _1879)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _1926) + _1879) * _1893))) * _1893;
    float _4004 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    uint _1953 = _1726 + 9u;
    float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1766].w)) * _499) * 0.949999988079071044921875);
    float _1965 = _1964 * _1964;
    float _1966 = cbLight._m0[_1766].x + _576;
    float _1967 = cbLight._m0[_1766].y + _577;
    float _1968 = cbLight._m0[_1766].z + _578;
    float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
    float _1973 = _1972 * _1966;
    float _1974 = _1972 * _1967;
    float _1975 = _1972 * _1968;
    float _1976 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_1766].xyz));
    float _4015 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _1980 = dot(vec3(_496, _497, _498), vec3(_1973, _1974, _1975));
    float _4026 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1984 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_1973, _1974, _1975));
    float _4037 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1988 = _1965 * _1965;
    float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
    float _1999 = exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0);
    float _2006 = 1.0 - _1965;
    float _2016 = (0.5 / (((_1894 * ((_1979 * _2006) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2006) + _1965) * _1979))) * _1979;
    float _4048 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2018 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
    float _2028 = (((((_1999 * _1916) + _648) * cbLight._m0[_1953].x) * _2018) * _1749) + ((((cbLight._m0[_1865].x * _1718) * ((_1915 * _1916) + _648)) * _1939) * _1762);
    float _2029 = (((((_1999 * _1918) + _650) * cbLight._m0[_1953].y) * _2018) * _1749) + ((((cbLight._m0[_1865].y * _1719) * ((_1915 * _1918) + _650)) * _1939) * _1762);
    float _2030 = (((((_1999 * _1919) + _651) * cbLight._m0[_1953].z) * _2018) * _1749) + ((((cbLight._m0[_1865].z * _1720) * ((_1915 * _1919) + _651)) * _1939) * _1762);
    float _2092;
    float _2094;
    float _2096;
    if (_1802)
    {
        _2092 = _2028;
        _2094 = _2029;
        _2096 = _2030;
    }
    else
    {
        uint _2098 = _1726 + 2u;
        uint _2102 = _1726 + 10u;
        float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _499) * 0.949999988079071044921875);
        float _2117 = _2116 * _2116;
        float _2118 = cbLight._m0[_2098].x + _576;
        float _2119 = cbLight._m0[_2098].y + _577;
        float _2120 = cbLight._m0[_2098].z + _578;
        float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
        float _2125 = _2124 * _2118;
        float _2126 = _2124 * _2119;
        float _2127 = _2124 * _2120;
        float _2128 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_2098].xyz));
        float _4059 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _2132 = dot(vec3(_496, _497, _498), vec3(_2125, _2126, _2127));
        float _4070 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2135 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2136 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2125, _2126, _2127));
        float _4081 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2140 = _2117 * _2117;
        float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
        float _2151 = exp2(log2(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * 5.0);
        float _2158 = 1.0 - _2117;
        float _2168 = (0.5 / (((_1894 * ((_2131 * _2158) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2158) + _2117) * _2131))) * _2131;
        float _4092 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2170 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
        float _2171 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _2092 = (((((_2151 * _1916) + _648) * cbLight._m0[_2102].x) * _2170) * _2171) + _2028;
        _2094 = (((((_2151 * _1918) + _650) * cbLight._m0[_2102].y) * _2170) * _2171) + _2029;
        _2096 = (((((_2151 * _1919) + _651) * cbLight._m0[_2102].z) * _2170) * _2171) + _2030;
    }
    float _2206;
    float _2208;
    float _2210;
    if (_1820)
    {
        _2206 = _2092;
        _2208 = _2094;
        _2210 = _2096;
    }
    else
    {
        uint _2217 = _1726 + 3u;
        uint _2221 = _1726 + 11u;
        float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2217].w)) * _499) * 0.949999988079071044921875);
        float _2236 = _2235 * _2235;
        float _2237 = cbLight._m0[_2217].x + _576;
        float _2238 = cbLight._m0[_2217].y + _577;
        float _2239 = cbLight._m0[_2217].z + _578;
        float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
        float _2244 = _2243 * _2237;
        float _2245 = _2243 * _2238;
        float _2246 = _2243 * _2239;
        float _2247 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_2217].xyz));
        float _4108 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2250 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2251 = dot(vec3(_496, _497, _498), vec3(_2244, _2245, _2246));
        float _4119 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2254 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2255 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2244, _2245, _2246));
        float _4130 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2259 = _2236 * _2236;
        float _2263 = ((_2254 * _2254) * (_2259 + (-1.0))) + 1.0;
        float _2270 = exp2(log2(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * 5.0);
        float _2277 = 1.0 - _2236;
        float _2287 = (0.5 / (((_1894 * ((_2250 * _2277) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2277) + _2236) * _2250))) * _2250;
        float _4141 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2289 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2259 / ((_2263 * _2263) * 3.141590118408203125));
        float _2290 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
        _2206 = (((((_2270 * _1916) + _648) * cbLight._m0[_2221].x) * _2289) * _2290) + _2092;
        _2208 = (((((_2270 * _1918) + _650) * cbLight._m0[_2221].y) * _2289) * _2290) + _2094;
        _2210 = (((((_2270 * _1919) + _651) * cbLight._m0[_2221].z) * _2289) * _2290) + _2096;
    }
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    float _2435;
    if (_1724.y == 0u)
    {
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2365;
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2365;
        float _2368 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2365;
        uvec4 _2380 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2381 = _2380.x;
        uint _2392 = uint((float(_2380.y) * floor(float(uint(cbSceneParam._m0[85u].y * _585) / _2381))) + floor(float(uint(cbSceneParam._m0[85u].x * _584) / _2381)));
        float _2402 = (log2(_2368 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2403 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        uint _2406 = uint(isnan(14.0) ? _2403 : (isnan(_2403) ? 14.0 : min(_2403, 14.0)));
        uvec4 _2411 = texelFetch(g_lightClusterGridBuffer, int(((_2406 << 2u) + (_2392 << 6u)) >> 2u));
        uint _2412 = _2411.x;
        uint _2413 = _2380.z;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        if (((((1u << ((_2413 >> 4u) & 15u)) + 4294967295u) & _2412) == 0u) || ((_2413 & 240u) == 0u))
        {
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
            _2519 = 0.0;
            _2521 = 0.0;
            _2523 = 0.0;
        }
        else
        {
            float _2514;
            float _2516;
            float _2518;
            float _2520;
            float _2522;
            float _2524;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            float _2663 = 0.0;
            uint _2664 = 0u;
            uint _2673;
            bool _2674;
            for (;;)
            {
                _2673 = texelFetch(g_lightClassification, int((((_2406 << 5u) + (_2392 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                _2674 = _2673 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2674)
                {
                    frontier_phi_61_pred = _2658;
                    frontier_phi_61_pred_1 = _2663;
                    frontier_phi_61_pred_2 = _2662;
                    frontier_phi_61_pred_3 = _2661;
                    frontier_phi_61_pred_4 = _2660;
                    frontier_phi_61_pred_5 = _2659;
                }
                else
                {
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    uint _2788;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2661;
                    _2786 = _2662;
                    _2787 = _2663;
                    _2788 = _2673;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    for (;;)
                    {
                        uint _2792 = uint(findLSB(_2788)) + (_2664 << 5u);
                        uint _2789 = (_2788 + 4294967295u) & _2788;
                        uint _2794 = _2792 * 48u;
                        vec4 _2808 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2794)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 3u)).x));
                        uint _2814 = (_2792 * 48u) + 4u;
                        vec4 _2827 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2814)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 3u)).x));
                        uint _2833 = (_2792 * 48u) + 8u;
                        vec3 _2844 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2833)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 2u)).x));
                        float _2848 = _2808.x - _2366;
                        float _2849 = _2808.y - _2367;
                        float _2850 = _2808.z - _2368;
                        float _2851 = dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850));
                        float _2854 = inversesqrt(_2851);
                        float _2855 = _2854 * _2848;
                        float _2856 = _2854 * _2849;
                        float _2857 = _2854 * _2850;
                        float _2858 = dot(vec3(_604, _607, _610), vec3(_2855, _2856, _2857));
                        float _2863 = 1.0 - (_2851 * _2808.w);
                        float _4167 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2864 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                        float _2865 = sqrt(_2851) * _2827.w;
                        float _2868 = 1.39999997615814208984375 / (_2865 + 1.39999997615814208984375);
                        float _2869 = _2868 * _2868;
                        float _2872 = ((1.0 - _2869) * _2858) + _2869;
                        float _2875 = _2865 * _2865;
                        float _2879 = ((isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0))) * _2864) / ((_2875 * 0.699999988079071044921875) + 1.0);
                        float _2883 = (-0.0) - _2366;
                        float _2884 = (-0.0) - _2367;
                        float _2885 = (-0.0) - _2368;
                        float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
                        float _2890 = _2889 * _2883;
                        float _2891 = _2889 * _2884;
                        float _2892 = _2889 * _2885;
                        float _2900 = exp2(log2(1.0 / ((_2875 * 3.5) + 5.0)) * 0.25);
                        float _2901 = 1.0 - _679;
                        float _2908 = sqrt(1.0 - ((1.0 - (_2901 * _2901)) * (1.0 - (_2900 * _2900))));
                        float _2909 = _2908 * _2908;
                        float _2910 = _2909 * _2909;
                        float _2911 = _2890 + _2855;
                        float _2912 = _2891 + _2856;
                        float _2913 = _2892 + _2857;
                        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
                        float _2921 = dot(vec3(_604, _607, _610), vec3(_2890, _2891, _2892));
                        float _4183 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2924 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                        float _2925 = dot(vec3(_604, _607, _610), vec3(_2917 * _2911, _2917 * _2912, _2917 * _2913));
                        float _4194 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2928 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                        float _2932 = ((_2928 * _2928) * (_2910 + (-1.0))) + 1.0;
                        float _2933 = _2868 * _2909;
                        float _2934 = _2933 * _2933;
                        float _2937 = ((1.0 - _2934) * _2858) + _2934;
                        float _4205 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2938 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                        float _2939 = 1.0 - _2909;
                        float _2949 = (0.5 / (((_2938 * ((_2924 * _2939) + _2909)) + 9.9999999392252902907785028219223e-09) + (((_2938 * _2939) + _2909) * _2924))) * _2938;
                        float _4216 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2960 = (((_2910 * 3.1415927410125732421875) * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) / ((_2932 * _2932) * ((_2875 * 2.1991131305694580078125) + 3.141590118408203125))) * _2864;
                        _2717 = (_2879 * _2827.x) + _2785;
                        _2718 = (_2879 * _2827.y) + _2786;
                        _2719 = (_2879 * _2827.z) + _2787;
                        _2714 = (_2960 * _2844.x) + _2782;
                        _2715 = (_2960 * _2844.y) + _2783;
                        _2716 = (_2960 * _2844.z) + _2784;
                        if (_2789 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2717;
                            _2786 = _2718;
                            _2787 = _2719;
                            _2788 = _2789;
                        }
                    }
                    frontier_phi_61_pred = _2714;
                    frontier_phi_61_pred_1 = _2719;
                    frontier_phi_61_pred_2 = _2718;
                    frontier_phi_61_pred_3 = _2717;
                    frontier_phi_61_pred_4 = _2716;
                    frontier_phi_61_pred_5 = _2715;
                }
                _2514 = frontier_phi_61_pred;
                _2524 = frontier_phi_61_pred_1;
                _2522 = frontier_phi_61_pred_2;
                _2520 = frontier_phi_61_pred_3;
                _2518 = frontier_phi_61_pred_4;
                _2516 = frontier_phi_61_pred_5;
                uint _2665 = _2664 + 1u;
                if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2658 = _2514;
                    _2659 = _2516;
                    _2660 = _2518;
                    _2661 = _2520;
                    _2662 = _2522;
                    _2663 = _2524;
                    _2664 = _2665;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
            _2519 = _2520;
            _2521 = _2522;
            _2523 = _2524;
        }
        uvec4 _2527 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2528 = _2527.z;
        uint _2530 = (_2528 >> 8u) & 15u;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        if (((4294967295u << _2530) & _2412) == 0u)
        {
            _2626 = _2513;
            _2628 = _2515;
            _2630 = _2517;
            _2632 = _2519;
            _2634 = _2521;
            _2636 = _2523;
        }
        else
        {
            float _2651 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
            float _2652 = _2651 * _2366;
            float _2653 = _2651 * _2367;
            float _2654 = _2651 * _2368;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2530 < ((_2528 >> 12u) & 15u))
            {
                float _2627;
                float _2629;
                float _2631;
                float _2633;
                float _2635;
                float _2637;
                float _2765 = _2513;
                float _2766 = _2515;
                float _2767 = _2517;
                float _2768 = _2519;
                float _2769 = _2521;
                float _2770 = _2523;
                uint _2771 = _2530;
                uint _2780;
                bool _2781;
                for (;;)
                {
                    _2780 = texelFetch(g_lightClassification, int((((_2406 << 5u) + (_2392 << 9u)) + (_2771 << 2u)) >> 2u)).x;
                    _2781 = _2780 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2781)
                    {
                        frontier_phi_67_pred = _2768;
                        frontier_phi_67_pred_1 = _2769;
                        frontier_phi_67_pred_2 = _2770;
                        frontier_phi_67_pred_3 = _2767;
                        frontier_phi_67_pred_4 = _2766;
                        frontier_phi_67_pred_5 = _2765;
                    }
                    else
                    {
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _2978 = _2765;
                        float _2979 = _2766;
                        float _2980 = _2767;
                        float _2981 = _2768;
                        float _2982 = _2769;
                        float _2983 = _2770;
                        uint _2984 = _2780;
                        uint _2985;
                        vec4 _3010;
                        float _3011;
                        vec4 _3026;
                        vec3 _3038;
                        vec4 _3054;
                        vec4 _3070;
                        float _3117;
                        bool _3118;
                        for (;;)
                        {
                            uint _2995 = ((_2771 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2984));
                            _2985 = (_2984 + 4294967295u) & _2984;
                            uint _2997 = _2995 * 40u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            _3011 = _3010.w;
                            uint _3013 = (_2995 * 40u) + 4u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3028 = (_2995 * 40u) + 8u;
                            _3038 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x));
                            uint _3041 = (_2995 * 40u) + 16u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            uint _3057 = (_2995 * 40u) + 20u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3073 = (_2995 * 40u) + 24u;
                            vec4 _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3092 = (_2995 * 40u) + 28u;
                            vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            _3117 = fma(_2368, _3105.z, fma(_2367, _3105.y, _3105.x * _2366)) + _3105.w;
                            _3118 = !((fma(_2368, _3086.z, fma(_2367, _3086.y, _3086.x * _2366)) + _3086.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3118)
                            {
                                float _3145 = _3010.x - _2366;
                                float _3146 = _3010.y - _2367;
                                float _3147 = _3010.z - _2368;
                                float _3148 = dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147));
                                float _3151 = inversesqrt(_3148);
                                float _3152 = _3151 * _3145;
                                float _3153 = _3151 * _3146;
                                float _3154 = _3151 * _3147;
                                float _3158 = 1.0 - (_3148 / (_3011 * _3011));
                                float _4227 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3163 = sqrt(_3148) * _3026.w;
                                float _3165 = 1.39999997615814208984375 / (_3163 + 1.39999997615814208984375);
                                float _3166 = _3165 * _3165;
                                float _3169 = ((1.0 - _3166) * dot(vec3(_3152, _3153, _3154), vec3(_604, _607, _610))) + _3166;
                                float _3172 = _3163 * _3163;
                                float _3176 = (fma(_2368, _3054.z, fma(_2367, _3054.y, _3054.x * _2366)) + _3054.w) / _3117;
                                float _3177 = (fma(_2368, _3070.z, fma(_2367, _3070.y, _3070.x * _2366)) + _3070.w) / _3117;
                                float _3181 = 1.0 - dot(vec2(_3176, _3177), vec2(_3176, _3177));
                                float _4243 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3183 = _3182 * (((isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))) * _3159) / ((_3172 * 0.699999988079071044921875) + 1.0));
                                float _3195 = exp2(log2(1.0 / ((_3172 * 3.5) + 5.0)) * 0.25);
                                float _3196 = 1.0 - _679;
                                float _3203 = sqrt(1.0 - ((1.0 - (_3196 * _3196)) * (1.0 - (_3195 * _3195))));
                                float _3204 = _3203 * _3203;
                                float _3205 = _3204 * _3204;
                                float _3206 = _3152 - _2652;
                                float _3207 = _3153 - _2653;
                                float _3208 = _3154 - _2654;
                                float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                                float _3216 = dot(vec3(_604, _607, _610), vec3((-0.0) - _2652, (-0.0) - _2653, (-0.0) - _2654));
                                float _4254 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3219 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                                float _3220 = dot(vec3(_604, _607, _610), vec3(_3212 * _3206, _3212 * _3207, _3212 * _3208));
                                float _4265 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3223 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                                float _3227 = ((_3223 * _3223) * (_3205 + (-1.0))) + 1.0;
                                float _3228 = _3165 * _3204;
                                float _3229 = _3228 * _3228;
                                float _3235 = ((1.0 - _3229) * dot(vec3(_604, _607, _610), vec3(_3152, _3153, _3154))) + _3229;
                                float _4276 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                                float _3237 = 1.0 - _3204;
                                float _3247 = (0.5 / (((_3236 * ((_3219 * _3237) + _3204)) + 9.9999999392252902907785028219223e-09) + (((_3236 * _3237) + _3204) * _3219))) * _3236;
                                float _4287 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3257 = (_3182 * _3159) * (((_3205 * 3.1415927410125732421875) * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) / ((_3227 * _3227) * ((_3172 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3257 * _3038.x;
                                frontier_phi_73_pred_1 = _3257 * _3038.y;
                                frontier_phi_73_pred_2 = _3183 * _3026.z;
                                frontier_phi_73_pred_3 = _3183 * _3026.y;
                                frontier_phi_73_pred_4 = _3183 * _3026.x;
                                frontier_phi_73_pred_5 = _3257 * _3038.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3261 = frontier_phi_73_pred;
                            _3262 = frontier_phi_73_pred_1;
                            _3266 = frontier_phi_73_pred_2;
                            _3265 = frontier_phi_73_pred_3;
                            _3264 = frontier_phi_73_pred_4;
                            _3263 = frontier_phi_73_pred_5;
                            _2968 = _3264 + _2981;
                            _2969 = _3265 + _2982;
                            _2970 = _3266 + _2983;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            _2967 = _3263 + _2980;
                            if (_2985 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2985;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2968;
                        frontier_phi_67_pred_1 = _2969;
                        frontier_phi_67_pred_2 = _2970;
                        frontier_phi_67_pred_3 = _2967;
                        frontier_phi_67_pred_4 = _2966;
                        frontier_phi_67_pred_5 = _2965;
                    }
                    _2633 = frontier_phi_67_pred;
                    _2635 = frontier_phi_67_pred_1;
                    _2637 = frontier_phi_67_pred_2;
                    _2631 = frontier_phi_67_pred_3;
                    _2629 = frontier_phi_67_pred_4;
                    _2627 = frontier_phi_67_pred_5;
                    uint _2772 = _2771 + 1u;
                    if (_2772 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2765 = _2627;
                        _2766 = _2629;
                        _2767 = _2631;
                        _2768 = _2633;
                        _2769 = _2635;
                        _2770 = _2637;
                        _2771 = _2772;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2635;
                frontier_phi_55_56_ladder_1 = _2637;
                frontier_phi_55_56_ladder_2 = _2633;
                frontier_phi_55_56_ladder_3 = _2631;
                frontier_phi_55_56_ladder_4 = _2629;
                frontier_phi_55_56_ladder_5 = _2627;
            }
            else
            {
                frontier_phi_55_56_ladder = _2521;
                frontier_phi_55_56_ladder_1 = _2523;
                frontier_phi_55_56_ladder_2 = _2519;
                frontier_phi_55_56_ladder_3 = _2517;
                frontier_phi_55_56_ladder_4 = _2515;
                frontier_phi_55_56_ladder_5 = _2513;
            }
            _2626 = frontier_phi_55_56_ladder_5;
            _2628 = frontier_phi_55_56_ladder_4;
            _2630 = frontier_phi_55_56_ladder_3;
            _2632 = frontier_phi_55_56_ladder_2;
            _2634 = frontier_phi_55_56_ladder;
            _2636 = frontier_phi_55_56_ladder_1;
        }
        float _2641 = isnan(1.0) ? _663 : (isnan(_663) ? 1.0 : min(_663, 1.0));
        _2425 = (_2641 * _2632) + _1858;
        _2427 = (_2641 * _2634) + _1860;
        _2429 = (_2641 * _2636) + _1862;
        _2431 = ((_2626 * _648) * _2641) + _2206;
        _2433 = ((_2628 * _650) * _2641) + _2208;
        _2435 = ((_2630 * _651) * _2641) + _2210;
    }
    else
    {
        _2425 = _1858;
        _2427 = _1860;
        _2429 = _1862;
        _2431 = _2206;
        _2433 = _2208;
        _2435 = _2210;
    }
    float _4303 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4314 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4325 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    uint _2455 = _623 + 6u;
    float _2463 = _584 / cbSceneParam._m0[86u].x;
    float _2464 = _585 / cbSceneParam._m0[86u].y;
    vec4 _2478 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2463, _2464, (log2((isnan(cbSceneParam._m0[77u].w) ? _519 : (isnan(_519) ? cbSceneParam._m0[77u].w : min(_519, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2480 = _2478.x;
    float _2481 = _2478.y;
    float _2482 = _2478.z;
    float _2483 = _2478.w;
    float _2576;
    float _2578;
    float _2580;
    float _2582;
    if (_519 > cbSceneParam._m0[78u].w)
    {
        float _2538 = isnan(_519) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _519 : min(cbSceneParam._m0[80u].w, _519));
        float _2539 = _2538 / _519;
        float _2550 = _2539 * _569;
        float _2551 = _570 * _2539;
        float _2552 = (-0.0) - _2551;
        float _2554 = _2539 * _571;
        float _2556 = (cbSceneParam._m0[77u].w * _2552) / _2538;
        float _2557 = _2556 + cbSceneParam._m0[79u].w;
        float _2558 = cbSceneParam._m0[79u].w - _2551;
        float _2564 = sqrt(((_2550 * _2550) + (_2551 * _2551)) + (_2554 * _2554));
        float _2567 = (1.0 - (cbSceneParam._m0[77u].w / _2538)) * _2564;
        float _2572 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2574 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2727;
        if (abs((_2552 - _2556) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2727 = ((((_2557 > 0.0) ? exp2(_2572 * _2557) : (2.0 - exp2(_2574 * _2557))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2567;
        }
        else
        {
            float _2687 = 1.0 / cbSceneParam._m0[80u].x;
            float _2688 = isnan(_2558) ? _2557 : (isnan(_2557) ? _2558 : max(_2557, _2558));
            float _2689 = isnan(_2558) ? _2557 : (isnan(_2557) ? _2558 : min(_2557, _2558));
            float _2698 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : min(_2688, 0.0));
            float _2699 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : min(_2689, 0.0));
            _2727 = ((abs(_2564 / _2552) * cbSceneParam._m0[80u].y) * ((((_2698 - _2699) * 2.0) - ((exp2(_2572 * (isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0)))) - exp2(_2572 * (isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0))))) * _2687)) - ((exp2(_2574 * _2698) - exp2(_2574 * _2699)) * _2687))) + (_2567 * cbSceneParam._m0[80u].z);
        }
        vec4 _2729 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2463, _2464, 1.0), 0.0);
        float _2738 = exp2((_2727 * (-1.44269502162933349609375)) * (1.0 - _2729.w));
        float _2739 = log2(_2738);
        float _2755 = log2(_2483);
        _2576 = (exp2(_2755 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].x)) * _2729.x) / cbSceneParam._m0[78u].x)) + _2480;
        _2578 = (exp2(_2755 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].y)) * _2729.y) / cbSceneParam._m0[78u].y)) + _2481;
        _2580 = (exp2(_2755 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2739 * cbSceneParam._m0[78u].z)) * _2729.z) / cbSceneParam._m0[78u].z)) + _2482;
        _2582 = _2738 * _2483;
    }
    else
    {
        _2576 = _2480;
        _2578 = _2481;
        _2580 = _2482;
        _2582 = _2483;
    }
    float _2594 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2595 = _2594 == 3.0;
    float _2596 = log2(_2582);
    float _2603 = exp2(_2596 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2425 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _663))) + ((_2431 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1473)) * cbPerFrame._m0[3u].x));
    float _2604 = exp2(_2596 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2427 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _663))) + ((_2433 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1473)) * cbPerFrame._m0[3u].x));
    float _2605 = exp2(_2596 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2429 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _663))) + ((_2435 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1473)) * cbPerFrame._m0[3u].x));
    float _2614 = (_2594 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2614 * (_2595 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2576)));
    SV_Target.y = _2614 * (_2595 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2578)));
    SV_Target.z = _2614 * (_2595 ? _2605 : (_2605 + (cbSceneParam._m0[72u].w * _2580)));
    SV_Target.w = cbInstanceData._m0[_2455].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2455].w;
}


