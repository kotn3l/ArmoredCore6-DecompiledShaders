#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1082;
float _3753;
float _3754;
float _3755;
float _3756;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _257 = _251.x * cbMtdParam._m0[10u].x;
    float _258 = _251.y * cbMtdParam._m0[10u].y;
    float _259 = _251.z * cbMtdParam._m0[10u].z;
    float _264 = 1.0 - cbMtdParam._m0[13u].z;
    float _3765 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _266 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    vec4 _284 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _292 = ((_257 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _284.x;
    float _295 = ((_258 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _284.y;
    float _298 = ((_259 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _284.z;
    float _305 = ((_257 - _292) * _266) + _292;
    float _306 = ((_258 - _295) * _266) + _295;
    float _307 = ((_259 - _298) * _266) + _298;
    vec4 _325 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _355 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3776 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _363 = (_356 * ((_325.x * cbMtdParam._m0[11u].x) - _305)) + _305;
    float _364 = (_356 * ((_325.y * cbMtdParam._m0[11u].y) - _306)) + _306;
    float _365 = (_356 * ((_325.z * cbMtdParam._m0[11u].z) - _307)) + _307;
    vec4 _378 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _385 = 1.0 - cbMtdParam._m0[14u].z;
    float _3787 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _388 = (_378.x * TEXCOORD_5.x) * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)));
    vec4 _402 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _406 = _402.z;
    vec4 _419 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _430 = cbMtdParam._m0[13u].w * _406;
    float _433 = (((((_406 * 2.0) * _419.z) * cbMtdParam._m0[14u].x) - _430) * cbMtdParam._m0[13u].y) + _430;
    vec4 _446 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _461 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_446.z * cbMtdParam._m0[14u].y) - _433)) + _433;
    float _468 = (_402.x * 2.0) + (-1.0);
    float _469 = (_402.y * 2.0) + (-1.0);
    float _470 = dot(vec2(_468, _469), vec2(_468, _469));
    float _3798 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))));
    float _486 = ((cbMtdParam._m0[13u].x * ((_419.x * 2.0) + (-1.0))) + _468) + ((((_446.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _487 = ((cbMtdParam._m0[13u].x * ((_419.y * 2.0) + (-1.0))) + _469) + ((((_446.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _490 = fma(_475, _216 * NORMAL.x, fma(_487, _223 * TANGENT.x, (_209 * _201) * _486));
    float _493 = fma(_475, _216 * NORMAL.y, fma(_487, _223 * TANGENT.y, (_209 * _202) * _486));
    float _496 = fma(_475, _216 * NORMAL.z, fma(_487, _223 * TANGENT.z, (_209 * _203) * _486));
    float _500 = inversesqrt(dot(vec3(_490, _493, _496), vec3(_490, _493, _496)));
    float _501 = _500 * _490;
    float _502 = _500 * _493;
    float _503 = _500 * _496;
    float _3809 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _504 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _3831 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _3842 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _3853 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _508 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _524 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _574 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _564);
    float _575 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _564);
    float _576 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _564);
    float _580 = inversesqrt(dot(vec3(_574, _575, _576), vec3(_574, _575, _576)));
    float _581 = _574 * _580;
    float _582 = _575 * _580;
    float _583 = _576 * _580;
    vec4 _588 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _590 = _588.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _762 = sqrt(((_574 * _574) + (_575 * _575)) + (_576 * _576));
        float _768 = (cbMatDynParam._m0[5u].x * _762) + cbMatDynParam._m0[5u].y;
        float _3864 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _773 = (cbMatDynParam._m0[5u].z * _762) + cbMatDynParam._m0[5u].w;
        float _3875 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) - _769)) + _769) < ((_590 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _601 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _602 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _620 = fma(_503, cbSceneParam._m0[5u].z, fma(_502, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _501));
    float _623 = fma(_503, cbSceneParam._m0[6u].z, fma(_502, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _501));
    float _626 = fma(_503, cbSceneParam._m0[7u].z, fma(_502, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _501));
    uint _639 = uint(roundEven(NORMAL.w)) * 13u;
    uint _640 = _639 + 9u;
    uint _641 = _640 + uint(cbMatDynParam._m0[0u].w);
    float _647 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * cbInstanceData._m0[_641].x;
    float _648 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_641].y;
    float _649 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_641].z;
    float _3886 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _653 = 1.0 - _508;
    float _654 = _650 * _653;
    float _655 = _651 * _653;
    float _656 = _652 * _653;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _508;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _508;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _508;
    float _664 = _661 + 0.039999999105930328369140625;
    float _666 = _662 + 0.039999999105930328369140625;
    float _667 = _663 + 0.039999999105930328369140625;
    vec4 _676 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _601, cbSceneParam._m0[86u].y * _602));
    float _679 = _676.x * TEXCOORD_5.w;
    float _680 = dot(vec3(_501, _502, _503), vec3(_581, _582, _583));
    float _683 = _680 * 2.0;
    float _687 = (_683 * _501) - _581;
    float _688 = (_683 * _502) - _582;
    float _689 = (_683 * _503) - _583;
    float _693 = abs(dot(vec3(_581, _582, _583), vec3(_501, _502, _503)));
    float _3919 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _695 = sqrt(_504);
    float _708 = exp2((_695 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_695 * 3.0));
    float _714 = (1.0 - _708) * ((_695 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _715 = _708 * _695;
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1081;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _806 = fma(_751, cbModelParam._m0[26u].z, fma(_747, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _743));
        float _810 = fma(_751, cbModelParam._m0[27u].z, fma(_747, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _743));
        float _814 = fma(_751, cbModelParam._m0[28u].z, fma(_747, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _743));
        float _839 = _743 + _501;
        float _840 = _747 + _502;
        float _841 = _751 + _503;
        float _851 = fma(_841, cbModelParam._m0[26u].z, fma(_840, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839)) - _806;
        float _852 = fma(_841, cbModelParam._m0[27u].z, fma(_840, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839)) - _810;
        float _853 = fma(_841, cbModelParam._m0[28u].z, fma(_840, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839)) - _814;
        float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
        float _870 = ((_857 * _851) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_806 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_857 * _852) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_810 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_857 * _853) / cbModelParam._m0[34u].z) + ((((((_814 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        float _909 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_875.x + (-0.5));
        float _911 = _909 * (_875.y + (-0.5));
        float _912 = _909 * (_875.z + (-0.5));
        float _919 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_882.x + (-0.5));
        float _921 = _919 * (_882.y + (-0.5));
        float _922 = _919 * (_882.z + (-0.5));
        float _929 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_889.x + (-0.5));
        float _931 = _929 * (_889.y + (-0.5));
        float _932 = _929 * (_889.z + (-0.5));
        float _939 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_896.x + (-0.5));
        float _941 = _939 * (_896.y + (-0.5));
        float _942 = _939 * (_896.z + (-0.5));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = _910 * 0.5;
        float _947 = _920 * 0.5;
        float _948 = _930 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _963 = (dot(vec3(_501, _502, _503), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _973 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3967 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_975 + 1.0))) + _980) * _943;
        float _990 = _911 * 0.5;
        float _991 = _921 * 0.5;
        float _992 = _931 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_501, _502, _503), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _4000 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1017 + 1.0))) + _1022) * _944;
        float _1032 = _912 * 0.5;
        float _1033 = _922 * 0.5;
        float _1034 = _932 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_501, _502, _503), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _4033 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1059 + 1.0))) + _1064) * _945;
        _1081 = _912;
        _1083 = _911;
        _1084 = _910;
        _1085 = _922;
        _1086 = _921;
        _1087 = _920;
        _1088 = _932;
        _1089 = _931;
        _1090 = _930;
        _1091 = _945;
        _1092 = _944;
        _1093 = _943;
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _1082;
        _1083 = _1082;
        _1084 = _1082;
        _1085 = _1082;
        _1086 = _1082;
        _1087 = _1082;
        _1088 = _1082;
        _1089 = _1082;
        _1090 = _1082;
        _1091 = _1082;
        _1092 = _1082;
        _1093 = _1082;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
    }
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1125 = fma(_751, cbModelParam._m0[30u].z, fma(_747, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _743));
        float _1129 = fma(_751, cbModelParam._m0[31u].z, fma(_747, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _743));
        float _1133 = fma(_751, cbModelParam._m0[32u].z, fma(_747, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _743));
        float _1156 = _743 + _501;
        float _1157 = _747 + _502;
        float _1158 = _751 + _503;
        float _1168 = fma(_1158, cbModelParam._m0[30u].z, fma(_1157, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156)) - _1125;
        float _1169 = fma(_1158, cbModelParam._m0[31u].z, fma(_1157, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156)) - _1129;
        float _1170 = fma(_1158, cbModelParam._m0[32u].z, fma(_1157, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156)) - _1133;
        float _1174 = inversesqrt(dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170)));
        float _1187 = ((_1174 * _1168) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1125 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1174 * _1169) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1129 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1174 * _1170) / cbModelParam._m0[35u].z) + ((((((_1133 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1224 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1191.x + (-0.5));
        float _1226 = _1224 * (_1191.y + (-0.5));
        float _1227 = _1224 * (_1191.z + (-0.5));
        float _1234 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1198.x + (-0.5));
        float _1236 = _1234 * (_1198.y + (-0.5));
        float _1237 = _1234 * (_1198.z + (-0.5));
        float _1244 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1205.x + (-0.5));
        float _1246 = _1244 * (_1205.y + (-0.5));
        float _1247 = _1244 * (_1205.z + (-0.5));
        float _1254 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1212.x + (-0.5));
        float _1256 = _1254 * (_1212.y + (-0.5));
        float _1257 = _1254 * (_1212.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_501, _502, _503), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _4096 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1288 + 1.0))) + _1293) * _1258;
        float _1303 = _1226 * 0.5;
        float _1304 = _1236 * 0.5;
        float _1305 = _1246 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_501, _502, _503), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4129 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1330 + 1.0))) + _1335) * _1259;
        float _1345 = _1227 * 0.5;
        float _1346 = _1237 * 0.5;
        float _1347 = _1247 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_501, _502, _503), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4162 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1372 + 1.0))) + _1377) * _1260;
        _1394 = _1227;
        _1395 = _1226;
        _1396 = _1225;
        _1397 = _1237;
        _1398 = _1236;
        _1399 = _1235;
        _1400 = _1247;
        _1401 = _1246;
        _1402 = _1245;
        _1403 = _1260;
        _1404 = _1259;
        _1405 = _1258;
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _1082;
        _1395 = _1082;
        _1396 = _1082;
        _1397 = _1082;
        _1398 = _1082;
        _1399 = _1082;
        _1400 = _1082;
        _1401 = _1082;
        _1402 = _1082;
        _1403 = _1082;
        _1404 = _1082;
        _1405 = _1082;
        _1406 = 0.0;
        _1407 = 0.0;
        _1408 = 0.0;
    }
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1094)) + _1094;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1095)) + _1095;
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1096)) + _1096;
    float _1441 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1444 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1447 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1418));
    float _1462 = _687 * 0.5;
    float _1463 = _688 * 0.5;
    float _1464 = _689 * 0.5;
    float _1465 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1468 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1471 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1505;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1478 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1081, _1085, _1088, _1091));
        float _1482 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1486 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1493 = dot(vec4(cbModelParam._m0[39u]), vec4(_1462, _1463, _1464, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1516;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1507 = dot(vec4(cbModelParam._m0[40u]), vec4(_1462, _1463, _1464, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1520 = (_1516 * cbModelParam._m0[1u].x) + (_1505 * (1.0 - cbModelParam._m0[1u].x));
    float _1530 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _504);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1530 : min(cbModelParam._m0[25u].z, _1530));
    float _1611;
    float _1613;
    float _1615;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1578 = fma(_751, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _743)) + cbModelParam._m0[13u].w;
        float _1582 = fma(_751, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _743)) + cbModelParam._m0[14u].w;
        float _1586 = fma(_751, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _743)) + cbModelParam._m0[15u].w;
        float _1589 = fma(_689, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687));
        float _1592 = fma(_689, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687));
        float _1595 = fma(_689, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687));
        float _1623;
        if (_1589 > 0.0)
        {
            _1623 = abs((1.0 - _1578) / _1589);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1578 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1623 = frontier_phi_17_15_ladder;
        }
        float _1798;
        if (_1592 > 0.0)
        {
            _1798 = abs((1.0 - _1582) / _1592);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1582 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1798 = frontier_phi_26_22_ladder;
        }
        float _2094;
        if (_1595 > 0.0)
        {
            _2094 = abs((1.0 - _1586) / _1595);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1586 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2094 = frontier_phi_38_33_ladder;
        }
        float _2096 = isnan(_1798) ? _1623 : (isnan(_1623) ? _1798 : min(_1623, _1798));
        float _2097 = isnan(_2094) ? _2096 : (isnan(_2096) ? _2094 : min(_2096, _2094));
        float _2101 = (_2097 * _1589) + _1578;
        float _2102 = (_2097 * _1592) + _1582;
        float _2103 = (_2097 * _1595) + _1586;
        float _2104 = _2097 * 9.9999997473787516355514526367188e-05;
        float _2106 = (-1.0) - _2104;
        float _2108 = _2104 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2103 > _2108) || ((_2103 < _2106) || ((_2102 > _2108) || ((_2102 < _2106) || ((_2101 < _2106) || (_2101 > _2108))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2248 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2103, cbModelParam._m0[9u].z, fma(_2102, cbModelParam._m0[9u].y, _2101 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2103, cbModelParam._m0[10u].z, fma(_2102, cbModelParam._m0[10u].y, _2101 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2103, cbModelParam._m0[11u].z, fma(_2102, cbModelParam._m0[11u].y, _2101 * cbModelParam._m0[11u].x))), _1531);
            frontier_phi_16_38_ladder = _2248.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2248.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2248.x * cbModelParam._m0[1u].y;
        }
        _1611 = frontier_phi_16_38_ladder_2;
        _1613 = frontier_phi_16_38_ladder_1;
        _1615 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_687, _688, _689), _1531);
        _1611 = _1599.x * cbModelParam._m0[1u].y;
        _1613 = _1599.y * cbModelParam._m0[1u].y;
        _1615 = _1599.z * cbModelParam._m0[1u].y;
    }
    float _1619 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _504);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1619 : min(cbModelParam._m0[25u].w, _1619));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1677 = fma(_751, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _743)) + cbModelParam._m0[21u].w;
        float _1681 = fma(_751, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _743)) + cbModelParam._m0[22u].w;
        float _1685 = fma(_751, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _743)) + cbModelParam._m0[23u].w;
        float _1688 = fma(_689, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687));
        float _1691 = fma(_689, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687));
        float _1694 = fma(_689, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687));
        float _1803;
        if (_1688 > 0.0)
        {
            _1803 = abs((1.0 - _1677) / _1688);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1677 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1803 = frontier_phi_28_24_ladder;
        }
        float _2121;
        if (_1691 > 0.0)
        {
            _2121 = abs((1.0 - _1681) / _1691);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1681 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2121 = frontier_phi_40_35_ladder;
        }
        float _2459;
        if (_1694 > 0.0)
        {
            _2459 = abs((1.0 - _1685) / _1694);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1685 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2459 = frontier_phi_50_47_ladder;
        }
        float _2461 = isnan(_2121) ? _1803 : (isnan(_1803) ? _2121 : min(_1803, _2121));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1688) + _1677;
        float _2467 = (_2462 * _1691) + _1681;
        float _2468 = (_2462 * _1694) + _1685;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2470 = (-1.0) - _2469;
        float _2472 = _2469 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2468 > _2472) || ((_2468 < _2470) || ((_2467 > _2472) || ((_2467 < _2470) || ((_2466 < _2470) || (_2466 > _2472))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2590 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2468, cbModelParam._m0[17u].z, fma(_2467, cbModelParam._m0[17u].y, _2466 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2468, cbModelParam._m0[18u].z, fma(_2467, cbModelParam._m0[18u].y, _2466 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2468, cbModelParam._m0[19u].z, fma(_2467, cbModelParam._m0[19u].y, _2466 * cbModelParam._m0[19u].x))), _1620);
            frontier_phi_25_50_ladder = _2590.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2590.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2590.x * cbModelParam._m0[1u].z;
        }
        _1713 = frontier_phi_25_50_ladder_2;
        _1715 = frontier_phi_25_50_ladder_1;
        _1717 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1697 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_687, _688, _689), _1620);
        _1713 = _1697.x * cbModelParam._m0[1u].z;
        _1715 = _1697.y * cbModelParam._m0[1u].z;
        _1717 = _1697.z * cbModelParam._m0[1u].z;
    }
    float _1730 = (((_714 * _664) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1713 - _1611)) + _1611);
    float _1732 = (((_714 * _666) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1715 - _1613)) + _1613);
    float _1734 = (((_714 * _667) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1717 - _1615)) + _1615);
    float _1737 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1732, cbSceneParam._m0[89u].y, _1730 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1732, cbSceneParam._m0[90u].y, _1730 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1732, cbSceneParam._m0[91u].y, _1730 * cbSceneParam._m0[91u].x));
    float _1777 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1781 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1785 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1789 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1790 = _1777 / _1789;
    float _1791 = _1781 / _1789;
    float _1792 = _1785 / _1789;
    float _1939;
    float _1940;
    float _1941;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1819 = ((uint(_1792 > cbSceneParam._m0[59u].y) + uint(_1792 > cbSceneParam._m0[59u].x)) + uint(_1792 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1820 = _1819 + 43u;
        uint _1828 = _1819 + 44u;
        uint _1836 = _1819 + 45u;
        uint _1844 = _1819 + 46u;
        float _1855 = fma(_1789, cbSceneParam._m0[_1820].w, fma(_1785, cbSceneParam._m0[_1820].z, fma(_1781, cbSceneParam._m0[_1820].y, _1777 * cbSceneParam._m0[_1820].x)));
        float _1859 = fma(_1789, cbSceneParam._m0[_1828].w, fma(_1785, cbSceneParam._m0[_1828].z, fma(_1781, cbSceneParam._m0[_1828].y, _1777 * cbSceneParam._m0[_1828].x)));
        float _1867 = fma(_1789, cbSceneParam._m0[_1844].w, fma(_1785, cbSceneParam._m0[_1844].z, fma(_1781, cbSceneParam._m0[_1844].y, _1777 * cbSceneParam._m0[_1844].x)));
        float _1872 = cbSceneParam._m0[33u].z * _1867;
        float _1874 = cbSceneParam._m0[33u].w * _1867;
        float _1877 = fma(_1789, cbSceneParam._m0[_1836].w, fma(_1785, cbSceneParam._m0[_1836].z, fma(_1781, cbSceneParam._m0[_1836].y, _1777 * cbSceneParam._m0[_1836].x))) / _1867;
        float _1925 = (cbSceneParam._m0[33u].x - sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792))) * cbSceneParam._m0[33u].y;
        float _4288 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1932 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1872 + _1855) / _1867, (_1874 + _1859) / _1867), _1877), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1874 + _1855) / _1867, (_1859 - _1872) / _1867), _1877), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1855 - _1872) / _1867, (_1859 - _1874) / _1867), _1877), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1855 - _1874) / _1867, (_1872 + _1859) / _1867), _1877), 0.0)).x), vec4(0.25)));
        _1939 = 1.0 - (_1932 * cbSceneParam._m0[34u].x);
        _1940 = 1.0 - (_1932 * cbSceneParam._m0[34u].y);
        _1941 = 1.0 - (_1932 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1939 = 1.0;
        _1940 = 1.0;
        _1941 = 1.0;
    }
    float _2005;
    float _2007;
    float _2009;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1993 = fma(_1789, cbSceneParam._m0[63u].w, fma(_1785, cbSceneParam._m0[63u].z, fma(_1781, cbSceneParam._m0[63u].y, _1777 * cbSceneParam._m0[63u].x)));
        float _1994 = fma(_1789, cbSceneParam._m0[60u].w, fma(_1785, cbSceneParam._m0[60u].z, fma(_1781, cbSceneParam._m0[60u].y, _1777 * cbSceneParam._m0[60u].x))) / _1993;
        float _1995 = fma(_1789, cbSceneParam._m0[61u].w, fma(_1785, cbSceneParam._m0[61u].z, fma(_1781, cbSceneParam._m0[61u].y, _1777 * cbSceneParam._m0[61u].x))) / _1993;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1994 >= cbSceneParam._m0[64u].x) && (_1995 >= cbSceneParam._m0[64u].y)) && (_1994 <= cbSceneParam._m0[64u].z)) && (_1995 <= cbSceneParam._m0[64u].w))
        {
            float _2134 = fma(_1789, cbSceneParam._m0[62u].w, fma(_1785, cbSceneParam._m0[62u].z, fma(_1781, cbSceneParam._m0[62u].y, _1777 * cbSceneParam._m0[62u].x))) / _1993;
            float _2138 = isnan(cbSceneParam._m0[41u].w) ? _2134 : (isnan(_2134) ? cbSceneParam._m0[41u].w : max(_2134, cbSceneParam._m0[41u].w));
            float _2181 = (cbSceneParam._m0[33u].x - sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792))) * cbSceneParam._m0[33u].y;
            float _4304 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
            float _2188 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1994, cbSceneParam._m0[33u].w + _1995), _2138), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1994, _1995 - cbSceneParam._m0[33u].z), _2138), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1994 - cbSceneParam._m0[33u].z, _1995 - cbSceneParam._m0[33u].w), _2138), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1994 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1995), _2138), 0.0)).x), vec4(0.25)));
            float _2192 = 1.0 - (_2188 * cbSceneParam._m0[34u].x);
            float _2193 = 1.0 - (_2188 * cbSceneParam._m0[34u].y);
            float _2194 = 1.0 - (_2188 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2194) ? _1941 : (isnan(_1941) ? _2194 : min(_1941, _2194));
            frontier_phi_37_36_ladder_1 = isnan(_2193) ? _1940 : (isnan(_1940) ? _2193 : min(_1940, _2193));
            frontier_phi_37_36_ladder_2 = isnan(_2192) ? _1939 : (isnan(_1939) ? _2192 : min(_1939, _2192));
        }
        else
        {
            frontier_phi_37_36_ladder = _1941;
            frontier_phi_37_36_ladder_1 = _1940;
            frontier_phi_37_36_ladder_2 = _1939;
        }
        _2005 = frontier_phi_37_36_ladder_2;
        _2007 = frontier_phi_37_36_ladder_1;
        _2009 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2005 = _1939;
        _2007 = _1940;
        _2009 = _1941;
    }
    uvec4 _2014 = floatBitsToUint(cbInstanceData._m0[_639 + 5u]);
    uint _2016 = _2014.x * 14u;
    uint _2017 = _2016 + 13u;
    float _2024 = _679 + (-1.0);
    float _2029 = (cbLight._m0[_2017].x * _2024) + 1.0;
    float _2030 = (cbLight._m0[_2017].y * _2024) + 1.0;
    float _2031 = (cbLight._m0[_2017].z * _2024) + 1.0;
    float _2032 = (cbLight._m0[_2017].w * _2024) + 1.0;
    uint _2033 = _2016 + 5u;
    float _2039 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
    uint _2043 = _2016 + 4u;
    float _2053 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
    uint _2057 = _2016 | 1u;
    float _2068 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_501, _502, _503));
    float _2071 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_501, _502, _503));
    float _4340 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _4351 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2076 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2078 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * 0.3183098733425140380859375;
    float _2085 = ((cbLight._m0[_2033].x * _2039) * _2078) + (((cbLight._m0[_2043].x * _2005) * _2053) * _2076);
    float _2086 = ((_2039 * cbLight._m0[_2033].y) * _2078) + (((cbLight._m0[_2043].y * _2007) * _2053) * _2076);
    float _2087 = ((_2039 * cbLight._m0[_2033].z) * _2078) + (((cbLight._m0[_2043].z * _2009) * _2053) * _2076);
    uvec4 _2091 = floatBitsToUint(cbLight._m0[_2016 + 12u]);
    bool _2093 = _2091.x == 0u;
    float _2195;
    float _2197;
    float _2199;
    if (_2093)
    {
        _2195 = _2085;
        _2197 = _2086;
        _2199 = _2087;
    }
    else
    {
        uint _2203 = _2016 + 6u;
        float _2219 = (dot(vec3(cbLight._m0[_2016 + 2u].xyz), vec3(_501, _502, _503)) * 0.5) + 0.5;
        float _2220 = _2219 * _2219;
        float _4362 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2221 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2222 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
        _2195 = (((cbLight._m0[_2203].x * 0.3183098733425140380859375) * _2221) * _2222) + _2085;
        _2197 = (((cbLight._m0[_2203].y * 0.3183098733425140380859375) * _2221) * _2222) + _2086;
        _2199 = (((cbLight._m0[_2203].z * 0.3183098733425140380859375) * _2221) * _2222) + _2087;
    }
    bool _2202 = _2091.y == 0u;
    float _2257;
    float _2259;
    float _2261;
    if (_2202)
    {
        _2257 = _2195;
        _2259 = _2197;
        _2261 = _2199;
    }
    else
    {
        uint _2430 = _2016 + 7u;
        float _2446 = (dot(vec3(cbLight._m0[_2016 + 3u].xyz), vec3(_501, _502, _503)) * 0.5) + 0.5;
        float _2447 = _2446 * _2446;
        float _4378 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2448 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2449 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2257 = (((cbLight._m0[_2430].x * 0.3183098733425140380859375) * _2448) * _2449) + _2195;
        _2259 = (((cbLight._m0[_2430].y * 0.3183098733425140380859375) * _2448) * _2449) + _2197;
        _2261 = (((cbLight._m0[_2430].z * 0.3183098733425140380859375) * _2448) * _2449) + _2199;
    }
    uint _2264 = _2016 + 8u;
    float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _504) * 0.949999988079071044921875);
    float _2278 = _2277 * _2277;
    float _2279 = cbLight._m0[_2016].x + _581;
    float _2280 = cbLight._m0[_2016].y + _582;
    float _2281 = cbLight._m0[_2016].z + _583;
    float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
    float _2286 = _2285 * _2279;
    float _2287 = _2285 * _2280;
    float _2288 = _2285 * _2281;
    float _2289 = dot(vec3(_501, _502, _503), vec3(cbLight._m0[_2016].xyz));
    float _4394 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _4405 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _2293 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2294 = dot(vec3(_501, _502, _503), vec3(_2286, _2287, _2288));
    float _4416 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2298 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2286, _2287, _2288));
    float _4427 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2302 = _2278 * _2278;
    float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
    float _2314 = exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0);
    float _2315 = 0.959999978542327880859375 - _661;
    float _2317 = 0.959999978542327880859375 - _662;
    float _2318 = 0.959999978542327880859375 - _663;
    float _2325 = 1.0 - _2278;
    float _2336 = (0.5 / (((_2293 * ((_2292 * _2325) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2325) + _2278) * _2292))) * _2292;
    float _4438 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2338 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
    uint _2352 = _2016 + 9u;
    float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _504) * 0.949999988079071044921875);
    float _2364 = _2363 * _2363;
    float _2365 = cbLight._m0[_2057].x + _581;
    float _2366 = cbLight._m0[_2057].y + _582;
    float _2367 = cbLight._m0[_2057].z + _583;
    float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
    float _2372 = _2371 * _2365;
    float _2373 = _2371 * _2366;
    float _2374 = _2371 * _2367;
    float _2375 = dot(vec3(_501, _502, _503), vec3(cbLight._m0[_2057].xyz));
    float _4449 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2379 = dot(vec3(_501, _502, _503), vec3(_2372, _2373, _2374));
    float _4460 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2383 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2372, _2373, _2374));
    float _4471 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2387 = _2364 * _2364;
    float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
    float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0);
    float _2405 = 1.0 - _2364;
    float _2415 = (0.5 / (((_2293 * ((_2378 * _2405) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2405) + _2364) * _2378))) * _2378;
    float _4482 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2417 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
    float _2427 = (((((_2398 * _2315) + _664) * cbLight._m0[_2352].x) * _2417) * _2039) + ((((cbLight._m0[_2264].x * _2005) * ((_2314 * _2315) + _664)) * _2338) * _2053);
    float _2428 = (((((_2398 * _2317) + _666) * cbLight._m0[_2352].y) * _2417) * _2039) + ((((cbLight._m0[_2264].y * _2007) * ((_2314 * _2317) + _666)) * _2338) * _2053);
    float _2429 = (((((_2398 * _2318) + _667) * cbLight._m0[_2352].z) * _2417) * _2039) + ((((cbLight._m0[_2264].z * _2009) * ((_2314 * _2318) + _667)) * _2338) * _2053);
    float _2485;
    float _2487;
    float _2489;
    if (_2093)
    {
        _2485 = _2427;
        _2487 = _2428;
        _2489 = _2429;
    }
    else
    {
        uint _2491 = _2016 + 2u;
        uint _2495 = _2016 + 10u;
        float _2509 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2491].w)) * _504) * 0.949999988079071044921875);
        float _2510 = _2509 * _2509;
        float _2511 = cbLight._m0[_2491].x + _581;
        float _2512 = cbLight._m0[_2491].y + _582;
        float _2513 = cbLight._m0[_2491].z + _583;
        float _2517 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
        float _2518 = _2517 * _2511;
        float _2519 = _2517 * _2512;
        float _2520 = _2517 * _2513;
        float _2521 = dot(vec3(_501, _502, _503), vec3(cbLight._m0[_2491].xyz));
        float _4493 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2525 = dot(vec3(_501, _502, _503), vec3(_2518, _2519, _2520));
        float _4504 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2528 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2529 = dot(vec3(cbLight._m0[_2491].xyz), vec3(_2518, _2519, _2520));
        float _4515 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2533 = _2510 * _2510;
        float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
        float _2544 = exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0);
        float _2551 = 1.0 - _2510;
        float _2561 = (0.5 / (((_2293 * ((_2524 * _2551) + _2510)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2551) + _2510) * _2524))) * _2524;
        float _4526 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2563 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
        float _2564 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
        _2485 = (((((_2544 * _2315) + _664) * cbLight._m0[_2495].x) * _2563) * _2564) + _2427;
        _2487 = (((((_2544 * _2317) + _666) * cbLight._m0[_2495].y) * _2563) * _2564) + _2428;
        _2489 = (((((_2544 * _2318) + _667) * cbLight._m0[_2495].z) * _2563) * _2564) + _2429;
    }
    float _2595;
    float _2597;
    float _2599;
    if (_2202)
    {
        _2595 = _2485;
        _2597 = _2487;
        _2599 = _2489;
    }
    else
    {
        uint _2606 = _2016 + 3u;
        uint _2610 = _2016 + 11u;
        float _2624 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2606].w)) * _504) * 0.949999988079071044921875);
        float _2625 = _2624 * _2624;
        float _2626 = cbLight._m0[_2606].x + _581;
        float _2627 = cbLight._m0[_2606].y + _582;
        float _2628 = cbLight._m0[_2606].z + _583;
        float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
        float _2633 = _2632 * _2626;
        float _2634 = _2632 * _2627;
        float _2635 = _2632 * _2628;
        float _2636 = dot(vec3(_501, _502, _503), vec3(cbLight._m0[_2606].xyz));
        float _4542 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2640 = dot(vec3(_501, _502, _503), vec3(_2633, _2634, _2635));
        float _4553 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2644 = dot(vec3(cbLight._m0[_2606].xyz), vec3(_2633, _2634, _2635));
        float _4564 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2648 = _2625 * _2625;
        float _2652 = ((_2643 * _2643) * (_2648 + (-1.0))) + 1.0;
        float _2659 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
        float _2666 = 1.0 - _2625;
        float _2676 = (0.5 / (((_2293 * ((_2639 * _2666) + _2625)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2666) + _2625) * _2639))) * _2639;
        float _4575 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2678 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2648 / ((_2652 * _2652) * 3.141590118408203125));
        float _2679 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2595 = (((((_2659 * _2315) + _664) * cbLight._m0[_2610].x) * _2678) * _2679) + _2485;
        _2597 = (((((_2659 * _2317) + _666) * cbLight._m0[_2610].y) * _2678) * _2679) + _2487;
        _2599 = (((((_2659 * _2318) + _667) * cbLight._m0[_2610].z) * _2678) * _2679) + _2489;
    }
    float _2745;
    float _2747;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    if (_2014.y == 0u)
    {
        uvec4 _2700 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2701 = _2700.x;
        uint _2712 = uint((float(_2700.y) * floor(float(uint(cbSceneParam._m0[85u].y * _602) / _2701))) + floor(float(uint(cbSceneParam._m0[85u].x * _601) / _2701)));
        float _2722 = (log2(_1792 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2723 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        uint _2726 = uint(isnan(14.0) ? _2723 : (isnan(_2723) ? 14.0 : min(_2723, 14.0)));
        uvec4 _2731 = texelFetch(g_lightClusterGridBuffer, int(((_2726 << 2u) + (_2712 << 6u)) >> 2u));
        uint _2732 = _2731.x;
        uint _2733 = _2700.z;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((((1u << ((_2733 >> 4u) & 15u)) + 4294967295u) & _2732) == 0u) || ((_2733 & 240u) == 0u))
        {
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
        }
        else
        {
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            uint _2971 = 0u;
            uint _2980;
            bool _2981;
            for (;;)
            {
                _2980 = texelFetch(g_lightClassification, int((((_2726 << 5u) + (_2712 << 9u)) + (_2971 << 2u)) >> 2u)).x;
                _2981 = _2980 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2981)
                {
                    frontier_phi_71_pred = _2970;
                    frontier_phi_71_pred_1 = _2969;
                    frontier_phi_71_pred_2 = _2968;
                    frontier_phi_71_pred_3 = _2967;
                    frontier_phi_71_pred_4 = _2966;
                    frontier_phi_71_pred_5 = _2965;
                }
                else
                {
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    uint _3116;
                    _3110 = _2965;
                    _3111 = _2966;
                    _3112 = _2967;
                    _3113 = _2968;
                    _3114 = _2969;
                    _3115 = _2970;
                    _3116 = _2980;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    for (;;)
                    {
                        uint _3120 = uint(findLSB(_3116)) + (_2971 << 5u);
                        uint _3117 = (_3116 + 4294967295u) & _3116;
                        uint _3122 = _3120 * 48u;
                        vec4 _3136 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 3u)).x));
                        uint _3142 = (_3120 * 48u) + 4u;
                        vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3142)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 3u)).x));
                        uint _3161 = (_3120 * 48u) + 8u;
                        vec3 _3172 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x));
                        float _3176 = _3136.x - _1790;
                        float _3177 = _3136.y - _1791;
                        float _3178 = _3136.z - _1792;
                        float _3179 = dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178));
                        float _3182 = inversesqrt(_3179);
                        float _3183 = _3182 * _3176;
                        float _3184 = _3182 * _3177;
                        float _3185 = _3182 * _3178;
                        float _3186 = dot(vec3(_620, _623, _626), vec3(_3183, _3184, _3185));
                        float _3191 = 1.0 - (_3179 * _3136.w);
                        float _4601 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3192 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3193 = sqrt(_3179) * _3155.w;
                        float _3196 = 1.39999997615814208984375 / (_3193 + 1.39999997615814208984375);
                        float _3197 = _3196 * _3196;
                        float _3200 = ((1.0 - _3197) * _3186) + _3197;
                        float _3203 = _3193 * _3193;
                        float _3207 = ((isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0))) * _3192) / ((_3203 * 0.699999988079071044921875) + 1.0);
                        float _3211 = (-0.0) - _1790;
                        float _3212 = (-0.0) - _1791;
                        float _3213 = (-0.0) - _1792;
                        float _3217 = inversesqrt(dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213)));
                        float _3218 = _3217 * _3211;
                        float _3219 = _3217 * _3212;
                        float _3220 = _3217 * _3213;
                        float _3227 = exp2(log2(1.0 / ((_3203 * 3.5) + 5.0)) * 0.25);
                        float _3228 = 1.0 - _695;
                        float _3235 = sqrt(1.0 - ((1.0 - (_3228 * _3228)) * (1.0 - (_3227 * _3227))));
                        float _3236 = _3235 * _3235;
                        float _3237 = _3236 * _3236;
                        float _3238 = _3218 + _3183;
                        float _3239 = _3219 + _3184;
                        float _3240 = _3220 + _3185;
                        float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                        float _3248 = dot(vec3(_620, _623, _626), vec3(_3218, _3219, _3220));
                        float _4617 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3251 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3252 = dot(vec3(_620, _623, _626), vec3(_3244 * _3238, _3244 * _3239, _3244 * _3240));
                        float _4628 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3255 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3259 = ((_3255 * _3255) * (_3237 + (-1.0))) + 1.0;
                        float _3260 = _3196 * _3236;
                        float _3261 = _3260 * _3260;
                        float _3264 = ((1.0 - _3261) * _3186) + _3261;
                        float _4639 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3265 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3266 = 1.0 - _3236;
                        float _3276 = (0.5 / (((_3265 * ((_3251 * _3266) + _3236)) + 9.9999999392252902907785028219223e-09) + (((_3265 * _3266) + _3236) * _3251))) * _3265;
                        float _4650 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3287 = (((_3237 * 3.1415927410125732421875) * (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) / ((_3259 * _3259) * ((_3203 * 2.1991131305694580078125) + 3.141590118408203125))) * _3192;
                        _3040 = (_3207 * _3155.x) + _3113;
                        _3041 = (_3207 * _3155.y) + _3114;
                        _3042 = (_3207 * _3155.z) + _3115;
                        _3037 = (_3287 * _3172.x) + _3110;
                        _3038 = (_3287 * _3172.y) + _3111;
                        _3039 = (_3287 * _3172.z) + _3112;
                        if (_3117 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3110 = _3037;
                            _3111 = _3038;
                            _3112 = _3039;
                            _3113 = _3040;
                            _3114 = _3041;
                            _3115 = _3042;
                            _3116 = _3117;
                        }
                    }
                    frontier_phi_71_pred = _3042;
                    frontier_phi_71_pred_1 = _3041;
                    frontier_phi_71_pred_2 = _3040;
                    frontier_phi_71_pred_3 = _3039;
                    frontier_phi_71_pred_4 = _3038;
                    frontier_phi_71_pred_5 = _3037;
                }
                _2823 = frontier_phi_71_pred;
                _2821 = frontier_phi_71_pred_1;
                _2819 = frontier_phi_71_pred_2;
                _2817 = frontier_phi_71_pred_3;
                _2815 = frontier_phi_71_pred_4;
                _2813 = frontier_phi_71_pred_5;
                uint _2972 = _2971 + 1u;
                if (_2972 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2965 = _2813;
                    _2966 = _2815;
                    _2967 = _2817;
                    _2968 = _2819;
                    _2969 = _2821;
                    _2970 = _2823;
                    _2971 = _2972;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
        }
        uvec4 _2826 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2827 = _2826.z;
        uint _2829 = (_2827 >> 8u) & 15u;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        if (((4294967295u << _2829) & _2732) == 0u)
        {
            _2933 = _2812;
            _2935 = _2814;
            _2937 = _2816;
            _2939 = _2818;
            _2941 = _2820;
            _2943 = _2822;
        }
        else
        {
            float _2958 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
            float _2959 = _2958 * _1790;
            float _2960 = _2958 * _1791;
            float _2961 = _2958 * _1792;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2829 < ((_2827 >> 12u) & 15u))
            {
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _2942;
                float _2944;
                float _3093 = _2812;
                float _3094 = _2814;
                float _3095 = _2816;
                float _3096 = _2818;
                float _3097 = _2820;
                float _3098 = _2822;
                uint _3099 = _2829;
                uint _3108;
                bool _3109;
                for (;;)
                {
                    _3108 = texelFetch(g_lightClassification, int((((_2726 << 5u) + (_2712 << 9u)) + (_3099 << 2u)) >> 2u)).x;
                    _3109 = _3108 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3109)
                    {
                        frontier_phi_82_pred = _3098;
                        frontier_phi_82_pred_1 = _3097;
                        frontier_phi_82_pred_2 = _3096;
                        frontier_phi_82_pred_3 = _3095;
                        frontier_phi_82_pred_4 = _3094;
                        frontier_phi_82_pred_5 = _3093;
                    }
                    else
                    {
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3314 = _3093;
                        float _3315 = _3094;
                        float _3316 = _3095;
                        float _3317 = _3096;
                        float _3318 = _3097;
                        float _3319 = _3098;
                        uint _3320 = _3108;
                        uint _3321;
                        vec4 _3346;
                        float _3347;
                        vec4 _3362;
                        vec3 _3374;
                        vec4 _3390;
                        vec4 _3406;
                        float _3453;
                        bool _3454;
                        for (;;)
                        {
                            uint _3331 = ((_3099 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3320));
                            _3321 = (_3320 + 4294967295u) & _3320;
                            uint _3333 = _3331 * 40u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            _3347 = _3346.w;
                            uint _3349 = (_3331 * 40u) + 4u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3364 = (_3331 * 40u) + 8u;
                            _3374 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x));
                            uint _3377 = (_3331 * 40u) + 16u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3393 = (_3331 * 40u) + 20u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3409 = (_3331 * 40u) + 24u;
                            vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3428 = (_3331 * 40u) + 28u;
                            vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            _3453 = fma(_1792, _3441.z, fma(_1791, _3441.y, _3441.x * _1790)) + _3441.w;
                            _3454 = !((fma(_1792, _3422.z, fma(_1791, _3422.y, _3422.x * _1790)) + _3422.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3454)
                            {
                                float _3481 = _3346.x - _1790;
                                float _3482 = _3346.y - _1791;
                                float _3483 = _3346.z - _1792;
                                float _3484 = dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483));
                                float _3487 = inversesqrt(_3484);
                                float _3488 = _3487 * _3481;
                                float _3489 = _3487 * _3482;
                                float _3490 = _3487 * _3483;
                                float _3494 = 1.0 - (_3484 / (_3347 * _3347));
                                float _4661 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3495 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3499 = sqrt(_3484) * _3362.w;
                                float _3501 = 1.39999997615814208984375 / (_3499 + 1.39999997615814208984375);
                                float _3502 = _3501 * _3501;
                                float _3505 = ((1.0 - _3502) * dot(vec3(_3488, _3489, _3490), vec3(_620, _623, _626))) + _3502;
                                float _3508 = _3499 * _3499;
                                float _3512 = (fma(_1792, _3390.z, fma(_1791, _3390.y, _3390.x * _1790)) + _3390.w) / _3453;
                                float _3513 = (fma(_1792, _3406.z, fma(_1791, _3406.y, _3406.x * _1790)) + _3406.w) / _3453;
                                float _3517 = 1.0 - dot(vec2(_3512, _3513), vec2(_3512, _3513));
                                float _4677 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3518 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3519 = _3518 * (((isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0))) * _3495) / ((_3508 * 0.699999988079071044921875) + 1.0));
                                float _3531 = exp2(log2(1.0 / ((_3508 * 3.5) + 5.0)) * 0.25);
                                float _3532 = 1.0 - _695;
                                float _3539 = sqrt(1.0 - ((1.0 - (_3532 * _3532)) * (1.0 - (_3531 * _3531))));
                                float _3540 = _3539 * _3539;
                                float _3541 = _3540 * _3540;
                                float _3542 = _3488 - _2959;
                                float _3543 = _3489 - _2960;
                                float _3544 = _3490 - _2961;
                                float _3548 = inversesqrt(dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544)));
                                float _3552 = dot(vec3(_620, _623, _626), vec3((-0.0) - _2959, (-0.0) - _2960, (-0.0) - _2961));
                                float _4688 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3555 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3556 = dot(vec3(_620, _623, _626), vec3(_3548 * _3542, _3548 * _3543, _3548 * _3544));
                                float _4699 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3559 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3563 = ((_3559 * _3559) * (_3541 + (-1.0))) + 1.0;
                                float _3564 = _3501 * _3540;
                                float _3565 = _3564 * _3564;
                                float _3571 = ((1.0 - _3565) * dot(vec3(_620, _623, _626), vec3(_3488, _3489, _3490))) + _3565;
                                float _4710 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3572 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3573 = 1.0 - _3540;
                                float _3583 = (0.5 / (((_3572 * ((_3555 * _3573) + _3540)) + 9.9999999392252902907785028219223e-09) + (((_3572 * _3573) + _3540) * _3555))) * _3572;
                                float _4721 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3593 = (_3518 * _3495) * (((_3541 * 3.1415927410125732421875) * (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) / ((_3563 * _3563) * ((_3508 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3519 * _3362.z;
                                frontier_phi_88_pred_1 = _3519 * _3362.y;
                                frontier_phi_88_pred_2 = _3519 * _3362.x;
                                frontier_phi_88_pred_3 = _3593 * _3374.z;
                                frontier_phi_88_pred_4 = _3593 * _3374.y;
                                frontier_phi_88_pred_5 = _3593 * _3374.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3602 = frontier_phi_88_pred;
                            _3601 = frontier_phi_88_pred_1;
                            _3600 = frontier_phi_88_pred_2;
                            _3599 = frontier_phi_88_pred_3;
                            _3598 = frontier_phi_88_pred_4;
                            _3597 = frontier_phi_88_pred_5;
                            _3304 = _3600 + _3317;
                            _3305 = _3601 + _3318;
                            _3306 = _3602 + _3319;
                            _3301 = _3597 + _3314;
                            _3302 = _3598 + _3315;
                            _3303 = _3599 + _3316;
                            if (_3321 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3321;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3306;
                        frontier_phi_82_pred_1 = _3305;
                        frontier_phi_82_pred_2 = _3304;
                        frontier_phi_82_pred_3 = _3303;
                        frontier_phi_82_pred_4 = _3302;
                        frontier_phi_82_pred_5 = _3301;
                    }
                    _2944 = frontier_phi_82_pred;
                    _2942 = frontier_phi_82_pred_1;
                    _2940 = frontier_phi_82_pred_2;
                    _2938 = frontier_phi_82_pred_3;
                    _2936 = frontier_phi_82_pred_4;
                    _2934 = frontier_phi_82_pred_5;
                    uint _3100 = _3099 + 1u;
                    if (_3100 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3093 = _2934;
                        _3094 = _2936;
                        _3095 = _2938;
                        _3096 = _2940;
                        _3097 = _2942;
                        _3098 = _2944;
                        _3099 = _3100;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2940;
                frontier_phi_63_64_ladder_1 = _2944;
                frontier_phi_63_64_ladder_2 = _2942;
                frontier_phi_63_64_ladder_3 = _2938;
                frontier_phi_63_64_ladder_4 = _2936;
                frontier_phi_63_64_ladder_5 = _2934;
            }
            else
            {
                frontier_phi_63_64_ladder = _2818;
                frontier_phi_63_64_ladder_1 = _2822;
                frontier_phi_63_64_ladder_2 = _2820;
                frontier_phi_63_64_ladder_3 = _2816;
                frontier_phi_63_64_ladder_4 = _2814;
                frontier_phi_63_64_ladder_5 = _2812;
            }
            _2933 = frontier_phi_63_64_ladder_5;
            _2935 = frontier_phi_63_64_ladder_4;
            _2937 = frontier_phi_63_64_ladder_3;
            _2939 = frontier_phi_63_64_ladder;
            _2941 = frontier_phi_63_64_ladder_2;
            _2943 = frontier_phi_63_64_ladder_1;
        }
        float _2948 = isnan(1.0) ? _679 : (isnan(_679) ? 1.0 : min(_679, 1.0));
        _2745 = (_2948 * _2939) + _2257;
        _2747 = (_2948 * _2941) + _2259;
        _2749 = (_2948 * _2943) + _2261;
        _2751 = ((_2933 * _664) * _2948) + _2595;
        _2753 = ((_2935 * _666) * _2948) + _2597;
        _2755 = ((_2937 * _667) * _2948) + _2599;
    }
    else
    {
        _2745 = _2257;
        _2747 = _2259;
        _2749 = _2261;
        _2751 = _2595;
        _2753 = _2597;
        _2755 = _2599;
    }
    float _4737 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4748 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4759 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _2772 = ((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2745 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _679))) + ((_2751 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    float _2773 = ((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2747 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _679))) + ((_2753 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    float _2774 = ((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2749 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _679))) + ((_2755 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    uint _2775 = _639 + 6u;
    float _2783 = _601 / cbSceneParam._m0[86u].x;
    float _2784 = _602 / cbSceneParam._m0[86u].y;
    vec4 _2798 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2783, _2784, (log2((isnan(cbSceneParam._m0[77u].w) ? _524 : (isnan(_524) ? cbSceneParam._m0[77u].w : min(_524, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2800 = _2798.x;
    float _2801 = _2798.y;
    float _2802 = _2798.z;
    float _2803 = _2798.w;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    if (_524 > cbSceneParam._m0[78u].w)
    {
        float _2837 = isnan(_524) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _524 : min(cbSceneParam._m0[80u].w, _524));
        float _2838 = _2837 / _524;
        float _2849 = _2838 * _574;
        float _2850 = _575 * _2838;
        float _2851 = (-0.0) - _2850;
        float _2853 = _2838 * _576;
        float _2855 = (cbSceneParam._m0[77u].w * _2851) / _2837;
        float _2856 = _2855 + cbSceneParam._m0[79u].w;
        float _2857 = cbSceneParam._m0[79u].w - _2850;
        float _2863 = sqrt(((_2849 * _2849) + (_2850 * _2850)) + (_2853 * _2853));
        float _2866 = (1.0 - (cbSceneParam._m0[77u].w / _2837)) * _2863;
        float _2871 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2873 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3050;
        if (abs((_2851 - _2855) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3050 = ((((_2856 > 0.0) ? exp2(_2871 * _2856) : (2.0 - exp2(_2873 * _2856))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2866;
        }
        else
        {
            float _2994 = 1.0 / cbSceneParam._m0[80u].x;
            float _2995 = isnan(_2857) ? _2856 : (isnan(_2856) ? _2857 : max(_2856, _2857));
            float _2996 = isnan(_2857) ? _2856 : (isnan(_2856) ? _2857 : min(_2856, _2857));
            float _3005 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : min(_2995, 0.0));
            float _3006 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : min(_2996, 0.0));
            _3050 = ((abs(_2863 / _2851) * cbSceneParam._m0[80u].y) * ((((_3005 - _3006) * 2.0) - ((exp2(_2871 * (isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0)))) - exp2(_2871 * (isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0))))) * _2994)) - ((exp2(_2873 * _3005) - exp2(_2873 * _3006)) * _2994))) + (_2866 * cbSceneParam._m0[80u].z);
        }
        vec4 _3052 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2783, _2784, 1.0), 0.0);
        float _3061 = exp2((_3050 * (-1.44269502162933349609375)) * (1.0 - _3052.w));
        float _3062 = log2(_3061);
        float _3078 = log2(_2803);
        _2875 = (exp2(_3078 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].x)) * _3052.x) / cbSceneParam._m0[78u].x)) + _2800;
        _2877 = (exp2(_3078 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].y)) * _3052.y) / cbSceneParam._m0[78u].y)) + _2801;
        _2879 = (exp2(_3078 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].z)) * _3052.z) / cbSceneParam._m0[78u].z)) + _2802;
        _2881 = _3061 * _2803;
    }
    else
    {
        _2875 = _2800;
        _2877 = _2801;
        _2879 = _2802;
        _2881 = _2803;
    }
    bool _3088;
    vec4 _2891;
    vec4 _2913;
    float _2915;
    float _2919;
    float _2920;
    float _2921;
    float _2922;
    bool _2932;
    for (;;)
    {
        _2891 = cbMatDynParam._m0[0u];
        float _2893 = roundEven(_2891.y);
        bool _2894 = _2893 == 3.0;
        float _2895 = log2(_2881);
        float _2902 = exp2(_2895 * cbSceneParam._m0[78u].x) * _2772;
        float _2903 = exp2(_2895 * cbSceneParam._m0[78u].y) * _2773;
        float _2904 = exp2(_2895 * cbSceneParam._m0[78u].z) * _2774;
        float _2911 = _590 + (-0.5);
        _2913 = cbMtdParam._m0[1u];
        _2915 = _2913.y * _2911;
        float _2918 = (_2893 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2919 = _2918 * (_2894 ? _2902 : (_2902 + (cbSceneParam._m0[72u].w * _2875)));
        _2920 = _2918 * (_2894 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2877)));
        _2921 = _2918 * (_2894 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2879)));
        _2922 = _2911 * 0.999000012874603271484375;
        _2932 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2932)
        {
            if ((cbInstanceData._m0[_639 + 7u].x + _2922) < 0.5)
            {
                _3088 = true;
                break;
            }
        }
        uint _3029 = _640 + uint(_2891.w);
        if ((cbInstanceData._m0[_3029].w < 1.0) && ((cbInstanceData._m0[_3029].w + _2922) < 0.5))
        {
            _3088 = true;
            break;
        }
        if ((_2915 + 1.0) < _2913.x)
        {
            _3088 = true;
            break;
        }
        _3088 = false;
        break;
    }
    float _3292;
    if (_3088)
    {
        discard_state = true;
        _3292 = 0.0;
    }
    else
    {
        _3292 = cbInstanceData._m0[_2775].w;
    }
    SV_Target.x = _2919;
    SV_Target.y = _2920;
    SV_Target.z = _2921;
    SV_Target.w = _3292;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2775].w;
    discard_exit();
}


