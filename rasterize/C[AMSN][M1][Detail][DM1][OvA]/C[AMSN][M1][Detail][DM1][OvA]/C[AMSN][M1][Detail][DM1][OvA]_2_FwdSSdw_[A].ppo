#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _956;
float _3368;
float _3369;
float _3370;
float _3371;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _253 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _262 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _230.x) * cbMtdParam._m0[9u].x) * _253.x;
    float _266 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _230.y) * cbMtdParam._m0[9u].y) * _253.y;
    float _270 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _230.z) * cbMtdParam._m0[9u].z) * _253.z;
    vec4 _283 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _285 = _283.x;
    vec4 _302 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _306 = _302.z;
    vec4 _319 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = cbMtdParam._m0[13u].w * _306;
    float _336 = (((((_306 * 2.0) * _319.z) * cbMtdParam._m0[14u].x) - _333) * cbMtdParam._m0[13u].y) + _333;
    float _340 = (_302.x * 2.0) + (-1.0);
    float _342 = (_302.y * 2.0) + (-1.0);
    float _343 = dot(vec2(_340, _342), vec2(_340, _342));
    float _3380 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _349 = sqrt(1.0 - (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))));
    float _356 = (cbMtdParam._m0[13u].x * ((_319.x * 2.0) + (-1.0))) + _340;
    float _357 = (cbMtdParam._m0[13u].x * ((_319.y * 2.0) + (-1.0))) + _342;
    float _360 = fma(_349, _200 * NORMAL.x, fma(_357, _207 * TANGENT.x, (_193 * _185) * _356));
    float _363 = fma(_349, _200 * NORMAL.y, fma(_357, _207 * TANGENT.y, (_193 * _186) * _356));
    float _366 = fma(_349, _200 * NORMAL.z, fma(_357, _207 * TANGENT.z, (_193 * _187) * _356));
    float _370 = inversesqrt(dot(vec3(_360, _363, _366), vec3(_360, _363, _366)));
    float _371 = _370 * _360;
    float _372 = _370 * _363;
    float _373 = _370 * _366;
    float _3391 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _374 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    float _3402 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3413 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3424 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3435 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _378 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _394 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _436 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _446 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _436);
    float _447 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _436);
    float _448 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _436);
    float _452 = inversesqrt(dot(vec3(_446, _447, _448), vec3(_446, _447, _448)));
    float _453 = _446 * _452;
    float _454 = _447 * _452;
    float _455 = _448 * _452;
    vec4 _460 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _462 = _460.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _635 = sqrt(((_446 * _446) + (_447 * _447)) + (_448 * _448));
        float _641 = (cbMatDynParam._m0[5u].x * _635) + cbMatDynParam._m0[5u].y;
        float _3446 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _646 = (cbMatDynParam._m0[5u].z * _635) + cbMatDynParam._m0[5u].w;
        float _3457 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) - _642)) + _642) < ((_462 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _473 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _474 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _493 = fma(_373, cbSceneParam._m0[5u].z, fma(_372, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _371));
    float _496 = fma(_373, cbSceneParam._m0[6u].z, fma(_372, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _371));
    float _499 = fma(_373, cbSceneParam._m0[7u].z, fma(_372, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _371));
    uint _512 = uint(roundEven(NORMAL.w)) * 13u;
    uint _513 = _512 + 9u;
    uint _514 = _513 + uint(cbMatDynParam._m0[0u].w);
    float _520 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0)))) * cbInstanceData._m0[_514].x;
    float _521 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0)))) * cbInstanceData._m0[_514].y;
    float _522 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0)))) * cbInstanceData._m0[_514].z;
    float _3468 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _523 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _3479 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _524 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    float _3490 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _525 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _526 = 1.0 - _378;
    float _527 = _523 * _526;
    float _528 = _524 * _526;
    float _529 = _525 * _526;
    float _534 = (_523 + (-0.039999999105930328369140625)) * _378;
    float _535 = (_524 + (-0.039999999105930328369140625)) * _378;
    float _536 = (_525 + (-0.039999999105930328369140625)) * _378;
    float _537 = _534 + 0.039999999105930328369140625;
    float _539 = _535 + 0.039999999105930328369140625;
    float _540 = _536 + 0.039999999105930328369140625;
    vec4 _549 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _473, cbSceneParam._m0[86u].y * _474));
    float _552 = _549.x * TEXCOORD_5.w;
    float _553 = dot(vec3(_371, _372, _373), vec3(_453, _454, _455));
    float _556 = _553 * 2.0;
    float _560 = (_556 * _371) - _453;
    float _561 = (_556 * _372) - _454;
    float _562 = (_556 * _373) - _455;
    float _566 = abs(dot(vec3(_453, _454, _455), vec3(_371, _372, _373)));
    float _3501 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _568 = sqrt(_374);
    float _581 = exp2((_568 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_568 * 3.0));
    float _587 = (1.0 - _581) * ((_568 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _588 = _581 * _568;
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _955;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _680 = fma(_624, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616));
        float _684 = fma(_624, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616));
        float _688 = fma(_624, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616));
        float _713 = _616 + _371;
        float _714 = _620 + _372;
        float _715 = _624 + _373;
        float _725 = fma(_715, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713)) - _680;
        float _726 = fma(_715, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713)) - _684;
        float _727 = fma(_715, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713)) - _688;
        float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
        float _744 = ((_731 * _725) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_680 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_731 * _726) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_684 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _746 = ((_731 * _727) / cbModelParam._m0[34u].z) + ((((((_688 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        float _783 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_749.x + (-0.5));
        float _785 = _783 * (_749.y + (-0.5));
        float _786 = _783 * (_749.z + (-0.5));
        float _793 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_756.x + (-0.5));
        float _795 = _793 * (_756.y + (-0.5));
        float _796 = _793 * (_756.z + (-0.5));
        float _803 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_763.x + (-0.5));
        float _805 = _803 * (_763.y + (-0.5));
        float _806 = _803 * (_763.z + (-0.5));
        float _813 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_770.x + (-0.5));
        float _815 = _813 * (_770.y + (-0.5));
        float _816 = _813 * (_770.z + (-0.5));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = _784 * 0.5;
        float _821 = _794 * 0.5;
        float _822 = _804 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _837 = (dot(vec3(_371, _372, _373), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _847 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3549 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_849 + 1.0))) + _854) * _817;
        float _864 = _785 * 0.5;
        float _865 = _795 * 0.5;
        float _866 = _805 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _880 = (dot(vec3(_371, _372, _373), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _889 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3582 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_891 + 1.0))) + _896) * _818;
        float _906 = _786 * 0.5;
        float _907 = _796 * 0.5;
        float _908 = _806 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_371, _372, _373), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3615 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_933 + 1.0))) + _938) * _819;
        _955 = _786;
        _957 = _785;
        _958 = _784;
        _959 = _796;
        _960 = _795;
        _961 = _794;
        _962 = _806;
        _963 = _805;
        _964 = _804;
        _965 = _819;
        _966 = _818;
        _967 = _817;
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
    }
    else
    {
        _955 = _956;
        _957 = _956;
        _958 = _956;
        _959 = _956;
        _960 = _956;
        _961 = _956;
        _962 = _956;
        _963 = _956;
        _964 = _956;
        _965 = _956;
        _966 = _956;
        _967 = _956;
        _968 = 0.0;
        _969 = 0.0;
        _970 = 0.0;
    }
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _999 = fma(_624, cbModelParam._m0[30u].z, fma(_620, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _616));
        float _1003 = fma(_624, cbModelParam._m0[31u].z, fma(_620, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _616));
        float _1007 = fma(_624, cbModelParam._m0[32u].z, fma(_620, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _616));
        float _1030 = _616 + _371;
        float _1031 = _620 + _372;
        float _1032 = _624 + _373;
        float _1042 = fma(_1032, cbModelParam._m0[30u].z, fma(_1031, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030)) - _999;
        float _1043 = fma(_1032, cbModelParam._m0[31u].z, fma(_1031, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030)) - _1003;
        float _1044 = fma(_1032, cbModelParam._m0[32u].z, fma(_1031, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030)) - _1007;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_999 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1003 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[35u].z) + ((((((_1007 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1098 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1065.x + (-0.5));
        float _1100 = _1098 * (_1065.y + (-0.5));
        float _1101 = _1098 * (_1065.z + (-0.5));
        float _1108 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1072.x + (-0.5));
        float _1110 = _1108 * (_1072.y + (-0.5));
        float _1111 = _1108 * (_1072.z + (-0.5));
        float _1118 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1079.x + (-0.5));
        float _1120 = _1118 * (_1079.y + (-0.5));
        float _1121 = _1118 * (_1079.z + (-0.5));
        float _1128 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1086.x + (-0.5));
        float _1130 = _1128 * (_1086.y + (-0.5));
        float _1131 = _1128 * (_1086.z + (-0.5));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = _1099 * 0.5;
        float _1136 = _1109 * 0.5;
        float _1137 = _1119 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_371, _372, _373), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3678 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1162 + 1.0))) + _1167) * _1132;
        float _1177 = _1100 * 0.5;
        float _1178 = _1110 * 0.5;
        float _1179 = _1120 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_371, _372, _373), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3711 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1204 + 1.0))) + _1209) * _1133;
        float _1219 = _1101 * 0.5;
        float _1220 = _1111 * 0.5;
        float _1221 = _1121 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_371, _372, _373), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3744 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1246 + 1.0))) + _1251) * _1134;
        _1268 = _1101;
        _1269 = _1100;
        _1270 = _1099;
        _1271 = _1111;
        _1272 = _1110;
        _1273 = _1109;
        _1274 = _1121;
        _1275 = _1120;
        _1276 = _1119;
        _1277 = _1134;
        _1278 = _1133;
        _1279 = _1132;
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
    }
    else
    {
        _1268 = _956;
        _1269 = _956;
        _1270 = _956;
        _1271 = _956;
        _1272 = _956;
        _1273 = _956;
        _1274 = _956;
        _1275 = _956;
        _1276 = _956;
        _1277 = _956;
        _1278 = _956;
        _1279 = _956;
        _1280 = 0.0;
        _1281 = 0.0;
        _1282 = 0.0;
    }
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _968)) + _968;
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _969)) + _969;
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _970)) + _970;
    float _1315 = fma(_1294, cbSceneParam._m0[89u].z, fma(_1293, cbSceneParam._m0[89u].y, _1292 * cbSceneParam._m0[89u].x));
    float _1318 = fma(_1294, cbSceneParam._m0[90u].z, fma(_1293, cbSceneParam._m0[90u].y, _1292 * cbSceneParam._m0[90u].x));
    float _1321 = fma(_1294, cbSceneParam._m0[91u].z, fma(_1293, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1292));
    float _1336 = _560 * 0.5;
    float _1337 = _561 * 0.5;
    float _1338 = _562 * 0.5;
    float _1339 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1342 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1345 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1379;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1352 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_955, _959, _962, _965));
        float _1356 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_957, _960, _963, _966));
        float _1360 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_958, _961, _964, _967));
        float _1367 = dot(vec4(cbModelParam._m0[39u]), vec4(_1336, _1337, _1338, 1.0));
        _1379 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1367) ? 0.0 : (isnan(0.0) ? _1367 : max(0.0, _1367))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1379 = 1.0;
    }
    float _1390;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1381 = dot(vec4(cbModelParam._m0[40u]), vec4(_1336, _1337, _1338, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1381) ? 0.0 : (isnan(0.0) ? _1381 : max(0.0, _1381))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1394 = (_1390 * cbModelParam._m0[1u].x) + (_1379 * (1.0 - cbModelParam._m0[1u].x));
    float _1404 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _374);
    float _1405 = isnan(_1404) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1404 : min(cbModelParam._m0[25u].z, _1404));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1452 = fma(_624, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _616)) + cbModelParam._m0[13u].w;
        float _1456 = fma(_624, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _616)) + cbModelParam._m0[14u].w;
        float _1460 = fma(_624, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _616)) + cbModelParam._m0[15u].w;
        float _1463 = fma(_562, cbModelParam._m0[13u].z, fma(_561, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _560));
        float _1466 = fma(_562, cbModelParam._m0[14u].z, fma(_561, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _560));
        float _1469 = fma(_562, cbModelParam._m0[15u].z, fma(_561, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _560));
        float _1497;
        if (_1463 > 0.0)
        {
            _1497 = abs((1.0 - _1452) / _1463);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1452 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1497 = frontier_phi_17_15_ladder;
        }
        float _1725;
        if (_1466 > 0.0)
        {
            _1725 = abs((1.0 - _1456) / _1466);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1456 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1725 = frontier_phi_26_22_ladder;
        }
        float _1982;
        if (_1469 > 0.0)
        {
            _1982 = abs((1.0 - _1460) / _1469);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1460 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1982 = frontier_phi_38_33_ladder;
        }
        float _1984 = isnan(_1725) ? _1497 : (isnan(_1497) ? _1725 : min(_1497, _1725));
        float _1985 = isnan(_1982) ? _1984 : (isnan(_1984) ? _1982 : min(_1984, _1982));
        float _1989 = (_1985 * _1463) + _1452;
        float _1990 = (_1985 * _1466) + _1456;
        float _1991 = (_1985 * _1469) + _1460;
        float _1992 = _1985 * 9.9999997473787516355514526367188e-05;
        float _1994 = (-1.0) - _1992;
        float _1996 = _1992 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1991 > _1996) || ((_1991 < _1994) || ((_1990 > _1996) || ((_1990 < _1994) || ((_1989 < _1994) || (_1989 > _1996))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2119 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1991, cbModelParam._m0[9u].z, fma(_1990, cbModelParam._m0[9u].y, _1989 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1991, cbModelParam._m0[10u].z, fma(_1990, cbModelParam._m0[10u].y, _1989 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1991, cbModelParam._m0[11u].z, fma(_1990, cbModelParam._m0[11u].y, _1989 * cbModelParam._m0[11u].x))), _1405);
            frontier_phi_16_38_ladder = _2119.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2119.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2119.x * cbModelParam._m0[1u].y;
        }
        _1485 = frontier_phi_16_38_ladder_2;
        _1487 = frontier_phi_16_38_ladder_1;
        _1489 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1473 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_560, _561, _562), _1405);
        _1485 = _1473.x * cbModelParam._m0[1u].y;
        _1487 = _1473.y * cbModelParam._m0[1u].y;
        _1489 = _1473.z * cbModelParam._m0[1u].y;
    }
    float _1493 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _374);
    float _1494 = isnan(_1493) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1493 : min(cbModelParam._m0[25u].w, _1493));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1551 = fma(_624, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _616)) + cbModelParam._m0[21u].w;
        float _1555 = fma(_624, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _616)) + cbModelParam._m0[22u].w;
        float _1559 = fma(_624, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _616)) + cbModelParam._m0[23u].w;
        float _1562 = fma(_562, cbModelParam._m0[21u].z, fma(_561, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _560));
        float _1565 = fma(_562, cbModelParam._m0[22u].z, fma(_561, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _560));
        float _1568 = fma(_562, cbModelParam._m0[23u].z, fma(_561, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _560));
        float _1730;
        if (_1562 > 0.0)
        {
            _1730 = abs((1.0 - _1551) / _1562);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1551 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1730 = frontier_phi_28_24_ladder;
        }
        float _2009;
        if (_1565 > 0.0)
        {
            _2009 = abs((1.0 - _1555) / _1565);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1555 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2009 = frontier_phi_40_35_ladder;
        }
        float _2222;
        if (_1568 > 0.0)
        {
            _2222 = abs((1.0 - _1559) / _1568);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1559 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2222 = frontier_phi_49_46_ladder;
        }
        float _2224 = isnan(_2009) ? _1730 : (isnan(_1730) ? _2009 : min(_1730, _2009));
        float _2225 = isnan(_2222) ? _2224 : (isnan(_2224) ? _2222 : min(_2224, _2222));
        float _2229 = (_2225 * _1562) + _1551;
        float _2230 = (_2225 * _1565) + _1555;
        float _2231 = (_2225 * _1568) + _1559;
        float _2232 = _2225 * 9.9999997473787516355514526367188e-05;
        float _2233 = (-1.0) - _2232;
        float _2235 = _2232 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2231 > _2235) || ((_2231 < _2233) || ((_2230 > _2235) || ((_2230 < _2233) || ((_2229 < _2233) || (_2229 > _2235))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2430 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2231, cbModelParam._m0[17u].z, fma(_2230, cbModelParam._m0[17u].y, _2229 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2231, cbModelParam._m0[18u].z, fma(_2230, cbModelParam._m0[18u].y, _2229 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2231, cbModelParam._m0[19u].z, fma(_2230, cbModelParam._m0[19u].y, _2229 * cbModelParam._m0[19u].x))), _1494);
            frontier_phi_25_49_ladder = _2430.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2430.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2430.x * cbModelParam._m0[1u].z;
        }
        _1587 = frontier_phi_25_49_ladder_2;
        _1589 = frontier_phi_25_49_ladder_1;
        _1591 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_560, _561, _562), _1494);
        _1587 = _1571.x * cbModelParam._m0[1u].z;
        _1589 = _1571.y * cbModelParam._m0[1u].z;
        _1591 = _1571.z * cbModelParam._m0[1u].z;
    }
    float _1604 = (((_587 * _537) + _588) * _552) * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1606 = (((_587 * _539) + _588) * _552) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1608 = (((_587 * _540) + _588) * _552) * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1611 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, _1604 * cbSceneParam._m0[91u].x));
    vec4 _1625 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_473, _474));
    float _1627 = _1625.w;
    float _1639 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1627);
    float _1640 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1627);
    float _1641 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1627);
    uvec4 _1645 = floatBitsToUint(cbInstanceData._m0[_512 + 5u]);
    uint _1647 = _1645.x * 14u;
    uint _1648 = _1647 + 13u;
    float _1655 = _552 + (-1.0);
    float _1660 = (cbLight._m0[_1648].x * _1655) + 1.0;
    float _1661 = (cbLight._m0[_1648].y * _1655) + 1.0;
    float _1662 = (cbLight._m0[_1648].z * _1655) + 1.0;
    float _1663 = (cbLight._m0[_1648].w * _1655) + 1.0;
    uint _1664 = _1647 + 5u;
    float _1670 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
    uint _1674 = _1647 + 4u;
    float _1683 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
    uint _1687 = _1647 | 1u;
    float _1698 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_371, _372, _373));
    float _1701 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_371, _372, _373));
    float _3880 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _3891 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1706 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * 0.3183098733425140380859375;
    float _1708 = (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * 0.3183098733425140380859375;
    float _1715 = ((cbLight._m0[_1664].x * _1670) * _1708) + (((cbLight._m0[_1674].x * _1639) * _1683) * _1706);
    float _1716 = ((_1670 * cbLight._m0[_1664].y) * _1708) + (((cbLight._m0[_1674].y * _1640) * _1683) * _1706);
    float _1717 = ((_1670 * cbLight._m0[_1664].z) * _1708) + (((cbLight._m0[_1674].z * _1641) * _1683) * _1706);
    uvec4 _1722 = floatBitsToUint(cbLight._m0[_1647 + 12u]);
    bool _1724 = _1722.x == 0u;
    float _1735;
    float _1737;
    float _1739;
    if (_1724)
    {
        _1735 = _1715;
        _1737 = _1716;
        _1739 = _1717;
    }
    else
    {
        uint _1743 = _1647 + 6u;
        float _1759 = (dot(vec3(cbLight._m0[_1647 + 2u].xyz), vec3(_371, _372, _373)) * 0.5) + 0.5;
        float _1760 = _1759 * _1759;
        float _3902 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1762 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
        _1735 = (((cbLight._m0[_1743].x * 0.3183098733425140380859375) * _1761) * _1762) + _1715;
        _1737 = (((cbLight._m0[_1743].y * 0.3183098733425140380859375) * _1761) * _1762) + _1716;
        _1739 = (((cbLight._m0[_1743].z * 0.3183098733425140380859375) * _1761) * _1762) + _1717;
    }
    bool _1742 = _1722.y == 0u;
    float _1780;
    float _1782;
    float _1784;
    if (_1742)
    {
        _1780 = _1735;
        _1782 = _1737;
        _1784 = _1739;
    }
    else
    {
        uint _1953 = _1647 + 7u;
        float _1969 = (dot(vec3(cbLight._m0[_1647 + 3u].xyz), vec3(_371, _372, _373)) * 0.5) + 0.5;
        float _1970 = _1969 * _1969;
        float _3918 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1972 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _1780 = (((cbLight._m0[_1953].x * 0.3183098733425140380859375) * _1971) * _1972) + _1735;
        _1782 = (((cbLight._m0[_1953].y * 0.3183098733425140380859375) * _1971) * _1972) + _1737;
        _1784 = (((cbLight._m0[_1953].z * 0.3183098733425140380859375) * _1971) * _1972) + _1739;
    }
    uint _1787 = _1647 + 8u;
    float _1800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1647].w)) * _374) * 0.949999988079071044921875);
    float _1801 = _1800 * _1800;
    float _1802 = cbLight._m0[_1647].x + _453;
    float _1803 = cbLight._m0[_1647].y + _454;
    float _1804 = cbLight._m0[_1647].z + _455;
    float _1808 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
    float _1809 = _1808 * _1802;
    float _1810 = _1808 * _1803;
    float _1811 = _1808 * _1804;
    float _1812 = dot(vec3(_371, _372, _373), vec3(cbLight._m0[_1647].xyz));
    float _3934 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _1816 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _1817 = dot(vec3(_371, _372, _373), vec3(_1809, _1810, _1811));
    float _3956 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _1821 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_1809, _1810, _1811));
    float _3967 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1825 = _1801 * _1801;
    float _1829 = ((_1820 * _1820) * (_1825 + (-1.0))) + 1.0;
    float _1837 = exp2(log2(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * 5.0);
    float _1838 = 0.959999978542327880859375 - _534;
    float _1840 = 0.959999978542327880859375 - _535;
    float _1841 = 0.959999978542327880859375 - _536;
    float _1848 = 1.0 - _1801;
    float _1859 = (0.5 / (((_1816 * ((_1815 * _1848) + _1801)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _1848) + _1801) * _1815))) * _1815;
    float _3978 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1861 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1825 / ((_1829 * _1829) * 3.141590118408203125));
    uint _1875 = _1647 + 9u;
    float _1886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1687].w)) * _374) * 0.949999988079071044921875);
    float _1887 = _1886 * _1886;
    float _1888 = cbLight._m0[_1687].x + _453;
    float _1889 = cbLight._m0[_1687].y + _454;
    float _1890 = cbLight._m0[_1687].z + _455;
    float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
    float _1895 = _1894 * _1888;
    float _1896 = _1894 * _1889;
    float _1897 = _1894 * _1890;
    float _1898 = dot(vec3(_371, _372, _373), vec3(cbLight._m0[_1687].xyz));
    float _3989 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _1902 = dot(vec3(_371, _372, _373), vec3(_1895, _1896, _1897));
    float _4000 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _1906 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_1895, _1896, _1897));
    float _4011 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1910 = _1887 * _1887;
    float _1914 = ((_1905 * _1905) * (_1910 + (-1.0))) + 1.0;
    float _1921 = exp2(log2(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * 5.0);
    float _1928 = 1.0 - _1887;
    float _1938 = (0.5 / (((_1816 * ((_1901 * _1928) + _1887)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _1928) + _1887) * _1901))) * _1901;
    float _4022 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1940 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1910 / ((_1914 * _1914) * 3.141590118408203125));
    float _1950 = (((((_1921 * _1838) + _537) * cbLight._m0[_1875].x) * _1940) * _1670) + ((((cbLight._m0[_1787].x * _1639) * ((_1837 * _1838) + _537)) * _1861) * _1683);
    float _1951 = (((((_1921 * _1840) + _539) * cbLight._m0[_1875].y) * _1940) * _1670) + ((((cbLight._m0[_1787].y * _1640) * ((_1837 * _1840) + _539)) * _1861) * _1683);
    float _1952 = (((((_1921 * _1841) + _540) * cbLight._m0[_1875].z) * _1940) * _1670) + ((((cbLight._m0[_1787].z * _1641) * ((_1837 * _1841) + _540)) * _1861) * _1683);
    float _2014;
    float _2016;
    float _2018;
    if (_1724)
    {
        _2014 = _1950;
        _2016 = _1951;
        _2018 = _1952;
    }
    else
    {
        uint _2020 = _1647 + 2u;
        uint _2024 = _1647 + 10u;
        float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _374) * 0.949999988079071044921875);
        float _2039 = _2038 * _2038;
        float _2040 = cbLight._m0[_2020].x + _453;
        float _2041 = cbLight._m0[_2020].y + _454;
        float _2042 = cbLight._m0[_2020].z + _455;
        float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
        float _2047 = _2046 * _2040;
        float _2048 = _2046 * _2041;
        float _2049 = _2046 * _2042;
        float _2050 = dot(vec3(_371, _372, _373), vec3(cbLight._m0[_2020].xyz));
        float _4033 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2053 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2054 = dot(vec3(_371, _372, _373), vec3(_2047, _2048, _2049));
        float _4044 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _2058 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2047, _2048, _2049));
        float _4055 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2062 = _2039 * _2039;
        float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
        float _2073 = exp2(log2(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * 5.0);
        float _2080 = 1.0 - _2039;
        float _2090 = (0.5 / (((_1816 * ((_2053 * _2080) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _2080) + _2039) * _2053))) * _2053;
        float _4066 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2092 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
        float _2093 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
        _2014 = (((((_2073 * _1838) + _537) * cbLight._m0[_2024].x) * _2092) * _2093) + _1950;
        _2016 = (((((_2073 * _1840) + _539) * cbLight._m0[_2024].y) * _2092) * _2093) + _1951;
        _2018 = (((((_2073 * _1841) + _540) * cbLight._m0[_2024].z) * _2092) * _2093) + _1952;
    }
    float _2128;
    float _2130;
    float _2132;
    if (_1742)
    {
        _2128 = _2014;
        _2130 = _2016;
        _2132 = _2018;
    }
    else
    {
        uint _2139 = _1647 + 3u;
        uint _2143 = _1647 + 11u;
        float _2157 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _374) * 0.949999988079071044921875);
        float _2158 = _2157 * _2157;
        float _2159 = cbLight._m0[_2139].x + _453;
        float _2160 = cbLight._m0[_2139].y + _454;
        float _2161 = cbLight._m0[_2139].z + _455;
        float _2165 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
        float _2166 = _2165 * _2159;
        float _2167 = _2165 * _2160;
        float _2168 = _2165 * _2161;
        float _2169 = dot(vec3(_371, _372, _373), vec3(cbLight._m0[_2139].xyz));
        float _4082 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2172 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2173 = dot(vec3(_371, _372, _373), vec3(_2166, _2167, _2168));
        float _4093 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2177 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2166, _2167, _2168));
        float _4104 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2181 = _2158 * _2158;
        float _2185 = ((_2176 * _2176) * (_2181 + (-1.0))) + 1.0;
        float _2192 = exp2(log2(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * 5.0);
        float _2199 = 1.0 - _2158;
        float _2209 = (0.5 / (((_1816 * ((_2172 * _2199) + _2158)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _2199) + _2158) * _2172))) * _2172;
        float _4115 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2211 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_2181 / ((_2185 * _2185) * 3.141590118408203125));
        float _2212 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _2128 = (((((_2192 * _1838) + _537) * cbLight._m0[_2143].x) * _2211) * _2212) + _2014;
        _2130 = (((((_2192 * _1840) + _539) * cbLight._m0[_2143].y) * _2211) * _2212) + _2016;
        _2132 = (((((_2192 * _1841) + _540) * cbLight._m0[_2143].z) * _2211) * _2212) + _2018;
    }
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    if (_1645.y == 0u)
    {
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2287;
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2287;
        float _2290 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2287;
        uvec4 _2302 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2303 = _2302.x;
        uint _2314 = uint((float(_2302.y) * floor(float(uint(cbSceneParam._m0[85u].y * _474) / _2303))) + floor(float(uint(cbSceneParam._m0[85u].x * _473) / _2303)));
        float _2324 = (log2(_2290 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2325 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        uint _2328 = uint(isnan(14.0) ? _2325 : (isnan(_2325) ? 14.0 : min(_2325, 14.0)));
        uvec4 _2333 = texelFetch(g_lightClusterGridBuffer, int(((_2328 << 2u) + (_2314 << 6u)) >> 2u));
        uint _2334 = _2333.x;
        uint _2335 = _2302.z;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        if (((((1u << ((_2335 >> 4u) & 15u)) + 4294967295u) & _2334) == 0u) || ((_2335 & 240u) == 0u))
        {
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
            _2445 = 0.0;
        }
        else
        {
            float _2436;
            float _2438;
            float _2440;
            float _2442;
            float _2444;
            float _2446;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            uint _2594 = 0u;
            uint _2603;
            bool _2604;
            for (;;)
            {
                _2603 = texelFetch(g_lightClassification, int((((_2328 << 5u) + (_2314 << 9u)) + (_2594 << 2u)) >> 2u)).x;
                _2604 = _2603 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2604)
                {
                    frontier_phi_66_pred = _2588;
                    frontier_phi_66_pred_1 = _2593;
                    frontier_phi_66_pred_2 = _2592;
                    frontier_phi_66_pred_3 = _2591;
                    frontier_phi_66_pred_4 = _2590;
                    frontier_phi_66_pred_5 = _2589;
                }
                else
                {
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    uint _2739;
                    _2733 = _2588;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2591;
                    _2737 = _2592;
                    _2738 = _2593;
                    _2739 = _2603;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    for (;;)
                    {
                        uint _2743 = uint(findLSB(_2739)) + (_2594 << 5u);
                        uint _2740 = (_2739 + 4294967295u) & _2739;
                        uint _2745 = _2743 * 48u;
                        vec4 _2759 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 3u)).x));
                        uint _2765 = (_2743 * 48u) + 4u;
                        vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 3u)).x));
                        uint _2784 = (_2743 * 48u) + 8u;
                        vec3 _2795 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x));
                        float _2799 = _2759.x - _2288;
                        float _2800 = _2759.y - _2289;
                        float _2801 = _2759.z - _2290;
                        float _2802 = dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801));
                        float _2805 = inversesqrt(_2802);
                        float _2806 = _2805 * _2799;
                        float _2807 = _2805 * _2800;
                        float _2808 = _2805 * _2801;
                        float _2809 = dot(vec3(_493, _496, _499), vec3(_2806, _2807, _2808));
                        float _2814 = 1.0 - (_2802 * _2759.w);
                        float _4141 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2815 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _2816 = sqrt(_2802) * _2778.w;
                        float _2819 = 1.39999997615814208984375 / (_2816 + 1.39999997615814208984375);
                        float _2820 = _2819 * _2819;
                        float _2823 = ((1.0 - _2820) * _2809) + _2820;
                        float _2826 = _2816 * _2816;
                        float _2830 = ((isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0))) * _2815) / ((_2826 * 0.699999988079071044921875) + 1.0);
                        float _2834 = (-0.0) - _2288;
                        float _2835 = (-0.0) - _2289;
                        float _2836 = (-0.0) - _2290;
                        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
                        float _2841 = _2840 * _2834;
                        float _2842 = _2840 * _2835;
                        float _2843 = _2840 * _2836;
                        float _2851 = exp2(log2(1.0 / ((_2826 * 3.5) + 5.0)) * 0.25);
                        float _2852 = 1.0 - _568;
                        float _2859 = sqrt(1.0 - ((1.0 - (_2852 * _2852)) * (1.0 - (_2851 * _2851))));
                        float _2860 = _2859 * _2859;
                        float _2861 = _2860 * _2860;
                        float _2862 = _2841 + _2806;
                        float _2863 = _2842 + _2807;
                        float _2864 = _2843 + _2808;
                        float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
                        float _2872 = dot(vec3(_493, _496, _499), vec3(_2841, _2842, _2843));
                        float _4157 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2875 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                        float _2876 = dot(vec3(_493, _496, _499), vec3(_2868 * _2862, _2868 * _2863, _2868 * _2864));
                        float _4168 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2879 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                        float _2883 = ((_2879 * _2879) * (_2861 + (-1.0))) + 1.0;
                        float _2884 = _2819 * _2860;
                        float _2885 = _2884 * _2884;
                        float _2888 = ((1.0 - _2885) * _2809) + _2885;
                        float _4179 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2889 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                        float _2890 = 1.0 - _2860;
                        float _2900 = (0.5 / (((_2889 * ((_2875 * _2890) + _2860)) + 9.9999999392252902907785028219223e-09) + (((_2889 * _2890) + _2860) * _2875))) * _2889;
                        float _4190 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2911 = (((_2861 * 3.1415927410125732421875) * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) / ((_2883 * _2883) * ((_2826 * 2.1991131305694580078125) + 3.141590118408203125))) * _2815;
                        _2663 = (_2830 * _2778.x) + _2736;
                        _2664 = (_2830 * _2778.y) + _2737;
                        _2665 = (_2830 * _2778.z) + _2738;
                        _2660 = (_2911 * _2795.x) + _2733;
                        _2661 = (_2911 * _2795.y) + _2734;
                        _2662 = (_2911 * _2795.z) + _2735;
                        if (_2740 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2733 = _2660;
                            _2734 = _2661;
                            _2735 = _2662;
                            _2736 = _2663;
                            _2737 = _2664;
                            _2738 = _2665;
                            _2739 = _2740;
                        }
                    }
                    frontier_phi_66_pred = _2660;
                    frontier_phi_66_pred_1 = _2665;
                    frontier_phi_66_pred_2 = _2664;
                    frontier_phi_66_pred_3 = _2663;
                    frontier_phi_66_pred_4 = _2662;
                    frontier_phi_66_pred_5 = _2661;
                }
                _2436 = frontier_phi_66_pred;
                _2446 = frontier_phi_66_pred_1;
                _2444 = frontier_phi_66_pred_2;
                _2442 = frontier_phi_66_pred_3;
                _2440 = frontier_phi_66_pred_4;
                _2438 = frontier_phi_66_pred_5;
                uint _2595 = _2594 + 1u;
                if (_2595 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2588 = _2436;
                    _2589 = _2438;
                    _2590 = _2440;
                    _2591 = _2442;
                    _2592 = _2444;
                    _2593 = _2446;
                    _2594 = _2595;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
            _2445 = _2446;
        }
        uvec4 _2449 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2450 = _2449.z;
        uint _2452 = (_2450 >> 8u) & 15u;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        if (((4294967295u << _2452) & _2334) == 0u)
        {
            _2556 = _2435;
            _2558 = _2437;
            _2560 = _2439;
            _2562 = _2441;
            _2564 = _2443;
            _2566 = _2445;
        }
        else
        {
            float _2581 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
            float _2582 = _2581 * _2288;
            float _2583 = _2581 * _2289;
            float _2584 = _2581 * _2290;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2452 < ((_2450 >> 12u) & 15u))
            {
                float _2557;
                float _2559;
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2716 = _2435;
                float _2717 = _2437;
                float _2718 = _2439;
                float _2719 = _2441;
                float _2720 = _2443;
                float _2721 = _2445;
                uint _2722 = _2452;
                uint _2731;
                bool _2732;
                for (;;)
                {
                    _2731 = texelFetch(g_lightClassification, int((((_2328 << 5u) + (_2314 << 9u)) + (_2722 << 2u)) >> 2u)).x;
                    _2732 = _2731 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2732)
                    {
                        frontier_phi_77_pred = _2721;
                        frontier_phi_77_pred_1 = _2720;
                        frontier_phi_77_pred_2 = _2719;
                        frontier_phi_77_pred_3 = _2718;
                        frontier_phi_77_pred_4 = _2717;
                        frontier_phi_77_pred_5 = _2716;
                    }
                    else
                    {
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _2938 = _2716;
                        float _2939 = _2717;
                        float _2940 = _2718;
                        float _2941 = _2719;
                        float _2942 = _2720;
                        float _2943 = _2721;
                        uint _2944 = _2731;
                        uint _2945;
                        vec4 _2970;
                        float _2971;
                        vec4 _2986;
                        vec3 _2998;
                        vec4 _3014;
                        vec4 _3030;
                        float _3077;
                        bool _3078;
                        for (;;)
                        {
                            uint _2955 = ((_2722 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2944));
                            _2945 = (_2944 + 4294967295u) & _2944;
                            uint _2957 = _2955 * 40u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            _2971 = _2970.w;
                            uint _2973 = (_2955 * 40u) + 4u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2988 = (_2955 * 40u) + 8u;
                            _2998 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x));
                            uint _3001 = (_2955 * 40u) + 16u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3017 = (_2955 * 40u) + 20u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3033 = (_2955 * 40u) + 24u;
                            vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3052 = (_2955 * 40u) + 28u;
                            vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            _3077 = fma(_2290, _3065.z, fma(_2289, _3065.y, _3065.x * _2288)) + _3065.w;
                            _3078 = !((fma(_2290, _3046.z, fma(_2289, _3046.y, _3046.x * _2288)) + _3046.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3078)
                            {
                                float _3105 = _2970.x - _2288;
                                float _3106 = _2970.y - _2289;
                                float _3107 = _2970.z - _2290;
                                float _3108 = dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107));
                                float _3111 = inversesqrt(_3108);
                                float _3112 = _3111 * _3105;
                                float _3113 = _3111 * _3106;
                                float _3114 = _3111 * _3107;
                                float _3118 = 1.0 - (_3108 / (_2971 * _2971));
                                float _4201 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3119 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3123 = sqrt(_3108) * _2986.w;
                                float _3125 = 1.39999997615814208984375 / (_3123 + 1.39999997615814208984375);
                                float _3126 = _3125 * _3125;
                                float _3129 = ((1.0 - _3126) * dot(vec3(_3112, _3113, _3114), vec3(_493, _496, _499))) + _3126;
                                float _3132 = _3123 * _3123;
                                float _3136 = (fma(_2290, _3014.z, fma(_2289, _3014.y, _3014.x * _2288)) + _3014.w) / _3077;
                                float _3137 = (fma(_2290, _3030.z, fma(_2289, _3030.y, _3030.x * _2288)) + _3030.w) / _3077;
                                float _3141 = 1.0 - dot(vec2(_3136, _3137), vec2(_3136, _3137));
                                float _4217 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3142 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                                float _3143 = _3142 * (((isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))) * _3119) / ((_3132 * 0.699999988079071044921875) + 1.0));
                                float _3155 = exp2(log2(1.0 / ((_3132 * 3.5) + 5.0)) * 0.25);
                                float _3156 = 1.0 - _568;
                                float _3163 = sqrt(1.0 - ((1.0 - (_3156 * _3156)) * (1.0 - (_3155 * _3155))));
                                float _3164 = _3163 * _3163;
                                float _3165 = _3164 * _3164;
                                float _3166 = _3112 - _2582;
                                float _3167 = _3113 - _2583;
                                float _3168 = _3114 - _2584;
                                float _3172 = inversesqrt(dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168)));
                                float _3176 = dot(vec3(_493, _496, _499), vec3((-0.0) - _2582, (-0.0) - _2583, (-0.0) - _2584));
                                float _4228 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3179 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3180 = dot(vec3(_493, _496, _499), vec3(_3172 * _3166, _3172 * _3167, _3172 * _3168));
                                float _4239 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3183 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                                float _3187 = ((_3183 * _3183) * (_3165 + (-1.0))) + 1.0;
                                float _3188 = _3125 * _3164;
                                float _3189 = _3188 * _3188;
                                float _3195 = ((1.0 - _3189) * dot(vec3(_493, _496, _499), vec3(_3112, _3113, _3114))) + _3189;
                                float _4250 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3197 = 1.0 - _3164;
                                float _3207 = (0.5 / (((_3196 * ((_3179 * _3197) + _3164)) + 9.9999999392252902907785028219223e-09) + (((_3196 * _3197) + _3164) * _3179))) * _3196;
                                float _4261 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3217 = (_3142 * _3119) * (((_3165 * 3.1415927410125732421875) * (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) / ((_3187 * _3187) * ((_3132 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3143 * _2986.y;
                                frontier_phi_83_pred_1 = _3143 * _2986.x;
                                frontier_phi_83_pred_2 = _3217 * _2998.z;
                                frontier_phi_83_pred_3 = _3217 * _2998.y;
                                frontier_phi_83_pred_4 = _3217 * _2998.x;
                                frontier_phi_83_pred_5 = _3143 * _2986.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3225 = frontier_phi_83_pred;
                            _3224 = frontier_phi_83_pred_1;
                            _3223 = frontier_phi_83_pred_2;
                            _3222 = frontier_phi_83_pred_3;
                            _3221 = frontier_phi_83_pred_4;
                            _3226 = frontier_phi_83_pred_5;
                            _2928 = _3224 + _2941;
                            _2929 = _3225 + _2942;
                            _2930 = _3226 + _2943;
                            _2925 = _3221 + _2938;
                            _2926 = _3222 + _2939;
                            _2927 = _3223 + _2940;
                            if (_2945 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2945;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2930;
                        frontier_phi_77_pred_1 = _2929;
                        frontier_phi_77_pred_2 = _2928;
                        frontier_phi_77_pred_3 = _2927;
                        frontier_phi_77_pred_4 = _2926;
                        frontier_phi_77_pred_5 = _2925;
                    }
                    _2567 = frontier_phi_77_pred;
                    _2565 = frontier_phi_77_pred_1;
                    _2563 = frontier_phi_77_pred_2;
                    _2561 = frontier_phi_77_pred_3;
                    _2559 = frontier_phi_77_pred_4;
                    _2557 = frontier_phi_77_pred_5;
                    uint _2723 = _2722 + 1u;
                    if (_2723 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2716 = _2557;
                        _2717 = _2559;
                        _2718 = _2561;
                        _2719 = _2563;
                        _2720 = _2565;
                        _2721 = _2567;
                        _2722 = _2723;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2561;
                frontier_phi_58_59_ladder_1 = _2567;
                frontier_phi_58_59_ladder_2 = _2565;
                frontier_phi_58_59_ladder_3 = _2563;
                frontier_phi_58_59_ladder_4 = _2559;
                frontier_phi_58_59_ladder_5 = _2557;
            }
            else
            {
                frontier_phi_58_59_ladder = _2439;
                frontier_phi_58_59_ladder_1 = _2445;
                frontier_phi_58_59_ladder_2 = _2443;
                frontier_phi_58_59_ladder_3 = _2441;
                frontier_phi_58_59_ladder_4 = _2437;
                frontier_phi_58_59_ladder_5 = _2435;
            }
            _2556 = frontier_phi_58_59_ladder_5;
            _2558 = frontier_phi_58_59_ladder_4;
            _2560 = frontier_phi_58_59_ladder;
            _2562 = frontier_phi_58_59_ladder_3;
            _2564 = frontier_phi_58_59_ladder_2;
            _2566 = frontier_phi_58_59_ladder_1;
        }
        float _2571 = isnan(1.0) ? _552 : (isnan(_552) ? 1.0 : min(_552, 1.0));
        _2347 = (_2571 * _2562) + _1780;
        _2349 = (_2571 * _2564) + _1782;
        _2351 = (_2571 * _2566) + _1784;
        _2353 = ((_2556 * _537) * _2571) + _2128;
        _2355 = ((_2558 * _539) * _2571) + _2130;
        _2357 = ((_2560 * _540) * _2571) + _2132;
    }
    else
    {
        _2347 = _1780;
        _2349 = _1782;
        _2351 = _1784;
        _2353 = _2128;
        _2355 = _2130;
        _2357 = _2132;
    }
    float _4277 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4288 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _4299 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _2374 = ((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2347 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _552))) + ((_2353 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1394)) * cbPerFrame._m0[3u].x);
    float _2375 = ((isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2349 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _552))) + ((_2355 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1394)) * cbPerFrame._m0[3u].x);
    float _2376 = ((isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2351 + ((isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))) * _552))) + ((_2357 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1394)) * cbPerFrame._m0[3u].x);
    uint _2377 = _512 + 6u;
    float _2385 = _473 / cbSceneParam._m0[86u].x;
    float _2386 = _474 / cbSceneParam._m0[86u].y;
    vec4 _2400 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2385, _2386, (log2((isnan(cbSceneParam._m0[77u].w) ? _394 : (isnan(_394) ? cbSceneParam._m0[77u].w : min(_394, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2402 = _2400.x;
    float _2403 = _2400.y;
    float _2404 = _2400.z;
    float _2405 = _2400.w;
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    if (_394 > cbSceneParam._m0[78u].w)
    {
        float _2460 = isnan(_394) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _394 : min(cbSceneParam._m0[80u].w, _394));
        float _2461 = _2460 / _394;
        float _2472 = _2461 * _446;
        float _2473 = _447 * _2461;
        float _2474 = (-0.0) - _2473;
        float _2476 = _2461 * _448;
        float _2478 = (cbSceneParam._m0[77u].w * _2474) / _2460;
        float _2479 = _2478 + cbSceneParam._m0[79u].w;
        float _2480 = cbSceneParam._m0[79u].w - _2473;
        float _2486 = sqrt(((_2472 * _2472) + (_2473 * _2473)) + (_2476 * _2476));
        float _2489 = (1.0 - (cbSceneParam._m0[77u].w / _2460)) * _2486;
        float _2494 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2496 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2673;
        if (abs((_2474 - _2478) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2673 = ((((_2479 > 0.0) ? exp2(_2494 * _2479) : (2.0 - exp2(_2496 * _2479))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2489;
        }
        else
        {
            float _2617 = 1.0 / cbSceneParam._m0[80u].x;
            float _2618 = isnan(_2480) ? _2479 : (isnan(_2479) ? _2480 : max(_2479, _2480));
            float _2619 = isnan(_2480) ? _2479 : (isnan(_2479) ? _2480 : min(_2479, _2480));
            float _2628 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : min(_2618, 0.0));
            float _2629 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : min(_2619, 0.0));
            _2673 = ((abs(_2486 / _2474) * cbSceneParam._m0[80u].y) * ((((_2628 - _2629) * 2.0) - ((exp2(_2494 * (isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0)))) - exp2(_2494 * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0))))) * _2617)) - ((exp2(_2496 * _2628) - exp2(_2496 * _2629)) * _2617))) + (_2489 * cbSceneParam._m0[80u].z);
        }
        vec4 _2675 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2385, _2386, 1.0), 0.0);
        float _2684 = exp2((_2673 * (-1.44269502162933349609375)) * (1.0 - _2675.w));
        float _2685 = log2(_2684);
        float _2701 = log2(_2405);
        _2498 = (exp2(_2701 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].x)) * _2675.x) / cbSceneParam._m0[78u].x)) + _2402;
        _2500 = (exp2(_2701 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].y)) * _2675.y) / cbSceneParam._m0[78u].y)) + _2403;
        _2502 = (exp2(_2701 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].z)) * _2675.z) / cbSceneParam._m0[78u].z)) + _2404;
        _2504 = _2684 * _2405;
    }
    else
    {
        _2498 = _2402;
        _2500 = _2403;
        _2502 = _2404;
        _2504 = _2405;
    }
    bool _2711;
    vec4 _2514;
    vec4 _2536;
    float _2538;
    float _2542;
    float _2543;
    float _2544;
    float _2545;
    bool _2555;
    for (;;)
    {
        _2514 = cbMatDynParam._m0[0u];
        float _2516 = roundEven(_2514.y);
        bool _2517 = _2516 == 3.0;
        float _2518 = log2(_2504);
        float _2525 = exp2(_2518 * cbSceneParam._m0[78u].x) * _2374;
        float _2526 = exp2(_2518 * cbSceneParam._m0[78u].y) * _2375;
        float _2527 = exp2(_2518 * cbSceneParam._m0[78u].z) * _2376;
        float _2534 = _462 + (-0.5);
        _2536 = cbMtdParam._m0[1u];
        _2538 = _2536.y * _2534;
        float _2541 = (_2516 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2542 = _2541 * (_2517 ? _2525 : (_2525 + (cbSceneParam._m0[72u].w * _2498)));
        _2543 = _2541 * (_2517 ? _2526 : (_2526 + (cbSceneParam._m0[72u].w * _2500)));
        _2544 = _2541 * (_2517 ? _2527 : (_2527 + (cbSceneParam._m0[72u].w * _2502)));
        _2545 = _2534 * 0.999000012874603271484375;
        _2555 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2555)
        {
            if ((cbInstanceData._m0[_512 + 7u].x + _2545) < 0.5)
            {
                _2711 = true;
                break;
            }
        }
        uint _2652 = _513 + uint(_2514.w);
        if ((cbInstanceData._m0[_2652].w < 1.0) && ((cbInstanceData._m0[_2652].w + _2545) < 0.5))
        {
            _2711 = true;
            break;
        }
        if ((_2538 + 1.0) < _2536.x)
        {
            _2711 = true;
            break;
        }
        _2711 = false;
        break;
    }
    float _2916;
    if (_2711)
    {
        discard_state = true;
        _2916 = 0.0;
    }
    else
    {
        _2916 = cbInstanceData._m0[_2377].w;
    }
    SV_Target.x = _2542;
    SV_Target.y = _2543;
    SV_Target.z = _2544;
    SV_Target.w = _2916;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2377].w;
    discard_exit();
}


