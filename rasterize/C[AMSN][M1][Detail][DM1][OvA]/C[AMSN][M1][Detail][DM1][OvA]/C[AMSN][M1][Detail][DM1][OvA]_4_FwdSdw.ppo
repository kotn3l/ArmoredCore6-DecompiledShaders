#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1057;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _255 = _249.x * cbMtdParam._m0[10u].x;
    float _256 = _249.y * cbMtdParam._m0[10u].y;
    float _257 = _249.z * cbMtdParam._m0[10u].z;
    float _262 = 1.0 - cbMtdParam._m0[13u].z;
    float _3673 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _264 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    vec4 _282 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _290 = ((_255 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _282.x;
    float _293 = ((_256 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _282.y;
    float _296 = ((_257 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _282.z;
    float _303 = ((_255 - _290) * _264) + _290;
    float _304 = ((_256 - _293) * _264) + _293;
    float _305 = ((_257 - _296) * _264) + _296;
    vec4 _323 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _353 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3684 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _361 = (_354 * ((_323.x * cbMtdParam._m0[11u].x) - _303)) + _303;
    float _362 = (_354 * ((_323.y * cbMtdParam._m0[11u].y) - _304)) + _304;
    float _363 = (_354 * ((_323.z * cbMtdParam._m0[11u].z) - _305)) + _305;
    vec4 _376 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _378 = _376.x;
    vec4 _391 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _398 = 1.0 - cbMtdParam._m0[14u].z;
    float _3695 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _403 = (((_391.x - _378) * TEXCOORD_5.x) * (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) + _378;
    vec4 _417 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _421 = _417.z;
    vec4 _434 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _445 = cbMtdParam._m0[13u].w * _421;
    float _448 = (((((_421 * 2.0) * _434.z) * cbMtdParam._m0[14u].x) - _445) * cbMtdParam._m0[13u].y) + _445;
    vec4 _461 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _476 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_461.z * cbMtdParam._m0[14u].y) - _448)) + _448;
    float _483 = (_417.x * 2.0) + (-1.0);
    float _484 = (_417.y * 2.0) + (-1.0);
    float _485 = dot(vec2(_483, _484), vec2(_483, _484));
    float _3706 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _490 = sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))));
    float _501 = ((cbMtdParam._m0[13u].x * ((_434.x * 2.0) + (-1.0))) + _483) + ((((_461.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _502 = ((cbMtdParam._m0[13u].x * ((_434.y * 2.0) + (-1.0))) + _484) + ((((_461.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _505 = fma(_490, _214 * NORMAL.x, fma(_502, _221 * TANGENT.x, (_207 * _199) * _501));
    float _508 = fma(_490, _214 * NORMAL.y, fma(_502, _221 * TANGENT.y, (_207 * _200) * _501));
    float _511 = fma(_490, _214 * NORMAL.z, fma(_502, _221 * TANGENT.z, (_207 * _201) * _501));
    float _515 = inversesqrt(dot(vec3(_505, _508, _511), vec3(_505, _508, _511)));
    float _516 = _515 * _505;
    float _517 = _515 * _508;
    float _518 = _515 * _511;
    float _3717 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _519 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3739 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3750 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _3761 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _523 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _539 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _589 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _579);
    float _590 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _579);
    float _591 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _579);
    float _595 = inversesqrt(dot(vec3(_589, _590, _591), vec3(_589, _590, _591)));
    float _596 = _589 * _595;
    float _597 = _590 * _595;
    float _598 = _591 * _595;
    float _604 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _605 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _623 = fma(_518, cbSceneParam._m0[5u].z, fma(_517, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _516));
    float _626 = fma(_518, cbSceneParam._m0[6u].z, fma(_517, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _516));
    float _629 = fma(_518, cbSceneParam._m0[7u].z, fma(_517, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _516));
    uint _642 = uint(roundEven(NORMAL.w)) * 13u;
    uint _644 = (_642 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _650 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_644].x;
    float _651 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_644].y;
    float _652 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_644].z;
    float _3772 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _656 = 1.0 - _523;
    float _657 = _653 * _656;
    float _658 = _654 * _656;
    float _659 = _655 * _656;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _523;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _523;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _523;
    float _667 = _664 + 0.039999999105930328369140625;
    float _669 = _665 + 0.039999999105930328369140625;
    float _670 = _666 + 0.039999999105930328369140625;
    vec4 _679 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _604, cbSceneParam._m0[86u].y * _605));
    float _682 = _679.x * TEXCOORD_5.w;
    float _683 = dot(vec3(_516, _517, _518), vec3(_596, _597, _598));
    float _686 = _683 * 2.0;
    float _690 = (_686 * _516) - _596;
    float _691 = (_686 * _517) - _597;
    float _692 = (_686 * _518) - _598;
    float _696 = abs(dot(vec3(_596, _597, _598), vec3(_516, _517, _518)));
    float _3805 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _698 = sqrt(_519);
    float _711 = exp2((_698 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_698 * 3.0));
    float _717 = (1.0 - _711) * ((_698 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _718 = _711 * _698;
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1056;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _781 = fma(_754, cbModelParam._m0[26u].z, fma(_750, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _746));
        float _785 = fma(_754, cbModelParam._m0[27u].z, fma(_750, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _746));
        float _789 = fma(_754, cbModelParam._m0[28u].z, fma(_750, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _746));
        float _814 = _746 + _516;
        float _815 = _750 + _517;
        float _816 = _754 + _518;
        float _826 = fma(_816, cbModelParam._m0[26u].z, fma(_815, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814)) - _781;
        float _827 = fma(_816, cbModelParam._m0[27u].z, fma(_815, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814)) - _785;
        float _828 = fma(_816, cbModelParam._m0[28u].z, fma(_815, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814)) - _789;
        float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
        float _845 = ((_832 * _826) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_781 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_832 * _827) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_785 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_832 * _828) / cbModelParam._m0[34u].z) + ((((((_789 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        float _884 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_850.x + (-0.5));
        float _886 = _884 * (_850.y + (-0.5));
        float _887 = _884 * (_850.z + (-0.5));
        float _894 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_857.x + (-0.5));
        float _896 = _894 * (_857.y + (-0.5));
        float _897 = _894 * (_857.z + (-0.5));
        float _904 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_864.x + (-0.5));
        float _906 = _904 * (_864.y + (-0.5));
        float _907 = _904 * (_864.z + (-0.5));
        float _914 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_871.x + (-0.5));
        float _916 = _914 * (_871.y + (-0.5));
        float _917 = _914 * (_871.z + (-0.5));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = _885 * 0.5;
        float _922 = _895 * 0.5;
        float _923 = _905 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _938 = (dot(vec3(_516, _517, _518), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _948 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3853 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_950 + 1.0))) + _955) * _918;
        float _965 = _886 * 0.5;
        float _966 = _896 * 0.5;
        float _967 = _906 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _981 = (dot(vec3(_516, _517, _518), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _990 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3886 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_992 + 1.0))) + _997) * _919;
        float _1007 = _887 * 0.5;
        float _1008 = _897 * 0.5;
        float _1009 = _907 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_516, _517, _518), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3919 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1034 + 1.0))) + _1039) * _920;
        _1056 = _887;
        _1058 = _886;
        _1059 = _885;
        _1060 = _897;
        _1061 = _896;
        _1062 = _895;
        _1063 = _907;
        _1064 = _906;
        _1065 = _905;
        _1066 = _920;
        _1067 = _919;
        _1068 = _918;
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
    }
    else
    {
        _1056 = _1057;
        _1058 = _1057;
        _1059 = _1057;
        _1060 = _1057;
        _1061 = _1057;
        _1062 = _1057;
        _1063 = _1057;
        _1064 = _1057;
        _1065 = _1057;
        _1066 = _1057;
        _1067 = _1057;
        _1068 = _1057;
        _1069 = 0.0;
        _1070 = 0.0;
        _1071 = 0.0;
    }
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1097 = fma(_754, cbModelParam._m0[30u].z, fma(_750, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _746));
        float _1101 = fma(_754, cbModelParam._m0[31u].z, fma(_750, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _746));
        float _1105 = fma(_754, cbModelParam._m0[32u].z, fma(_750, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _746));
        float _1128 = _746 + _516;
        float _1129 = _750 + _517;
        float _1130 = _754 + _518;
        float _1140 = fma(_1130, cbModelParam._m0[30u].z, fma(_1129, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1128)) - _1097;
        float _1141 = fma(_1130, cbModelParam._m0[31u].z, fma(_1129, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1128)) - _1101;
        float _1142 = fma(_1130, cbModelParam._m0[32u].z, fma(_1129, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1128)) - _1105;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1097 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1101 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[35u].z) + ((((((_1105 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1196 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1163.x + (-0.5));
        float _1198 = _1196 * (_1163.y + (-0.5));
        float _1199 = _1196 * (_1163.z + (-0.5));
        float _1206 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1170.x + (-0.5));
        float _1208 = _1206 * (_1170.y + (-0.5));
        float _1209 = _1206 * (_1170.z + (-0.5));
        float _1216 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1177.x + (-0.5));
        float _1218 = _1216 * (_1177.y + (-0.5));
        float _1219 = _1216 * (_1177.z + (-0.5));
        float _1226 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1184.x + (-0.5));
        float _1228 = _1226 * (_1184.y + (-0.5));
        float _1229 = _1226 * (_1184.z + (-0.5));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = _1197 * 0.5;
        float _1234 = _1207 * 0.5;
        float _1235 = _1217 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_516, _517, _518), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3982 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1260 + 1.0))) + _1265) * _1230;
        float _1275 = _1198 * 0.5;
        float _1276 = _1208 * 0.5;
        float _1277 = _1218 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_516, _517, _518), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4015 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1302 + 1.0))) + _1307) * _1231;
        float _1317 = _1199 * 0.5;
        float _1318 = _1209 * 0.5;
        float _1319 = _1219 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_516, _517, _518), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4048 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1344 + 1.0))) + _1349) * _1232;
        _1366 = _1199;
        _1367 = _1198;
        _1368 = _1197;
        _1369 = _1209;
        _1370 = _1208;
        _1371 = _1207;
        _1372 = _1219;
        _1373 = _1218;
        _1374 = _1217;
        _1375 = _1232;
        _1376 = _1231;
        _1377 = _1230;
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1057;
        _1367 = _1057;
        _1368 = _1057;
        _1369 = _1057;
        _1370 = _1057;
        _1371 = _1057;
        _1372 = _1057;
        _1373 = _1057;
        _1374 = _1057;
        _1375 = _1057;
        _1376 = _1057;
        _1377 = _1057;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1069)) + _1069;
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1070)) + _1070;
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1071)) + _1071;
    float _1413 = fma(_1392, cbSceneParam._m0[89u].z, fma(_1391, cbSceneParam._m0[89u].y, _1390 * cbSceneParam._m0[89u].x));
    float _1416 = fma(_1392, cbSceneParam._m0[90u].z, fma(_1391, cbSceneParam._m0[90u].y, _1390 * cbSceneParam._m0[90u].x));
    float _1419 = fma(_1392, cbSceneParam._m0[91u].z, fma(_1391, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1390));
    float _1434 = _690 * 0.5;
    float _1435 = _691 * 0.5;
    float _1436 = _692 * 0.5;
    float _1437 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1440 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1443 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1477;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1450 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1056, _1060, _1063, _1066));
        float _1454 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1458 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1465 = dot(vec4(cbModelParam._m0[39u]), vec4(_1434, _1435, _1436, 1.0));
        _1477 = dot(vec3(isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1477 = 1.0;
    }
    float _1488;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1479 = dot(vec4(cbModelParam._m0[40u]), vec4(_1434, _1435, _1436, 1.0));
        _1488 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1479) ? 0.0 : (isnan(0.0) ? _1479 : max(0.0, _1479))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1488 = 1.0;
    }
    float _1492 = (_1488 * cbModelParam._m0[1u].x) + (_1477 * (1.0 - cbModelParam._m0[1u].x));
    float _1502 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _519);
    float _1503 = isnan(_1502) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1502 : min(cbModelParam._m0[25u].z, _1502));
    float _1583;
    float _1585;
    float _1587;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1550 = fma(_754, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746)) + cbModelParam._m0[13u].w;
        float _1554 = fma(_754, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746)) + cbModelParam._m0[14u].w;
        float _1558 = fma(_754, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746)) + cbModelParam._m0[15u].w;
        float _1561 = fma(_692, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690));
        float _1564 = fma(_692, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690));
        float _1567 = fma(_692, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690));
        float _1595;
        if (_1561 > 0.0)
        {
            _1595 = abs((1.0 - _1550) / _1561);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1550 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1595 = frontier_phi_14_12_ladder;
        }
        float _1770;
        if (_1564 > 0.0)
        {
            _1770 = abs((1.0 - _1554) / _1564);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1554 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1770 = frontier_phi_23_19_ladder;
        }
        float _2065;
        if (_1567 > 0.0)
        {
            _2065 = abs((1.0 - _1558) / _1567);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1558 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2065 = frontier_phi_35_30_ladder;
        }
        float _2067 = isnan(_1770) ? _1595 : (isnan(_1595) ? _1770 : min(_1595, _1770));
        float _2068 = isnan(_2065) ? _2067 : (isnan(_2067) ? _2065 : min(_2067, _2065));
        float _2072 = (_2068 * _1561) + _1550;
        float _2073 = (_2068 * _1564) + _1554;
        float _2074 = (_2068 * _1567) + _1558;
        float _2075 = _2068 * 9.9999997473787516355514526367188e-05;
        float _2077 = (-1.0) - _2075;
        float _2079 = _2075 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2074 > _2079) || ((_2074 < _2077) || ((_2073 > _2079) || ((_2073 < _2077) || ((_2072 < _2077) || (_2072 > _2079))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2219 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2074, cbModelParam._m0[9u].z, fma(_2073, cbModelParam._m0[9u].y, _2072 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2074, cbModelParam._m0[10u].z, fma(_2073, cbModelParam._m0[10u].y, _2072 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2074, cbModelParam._m0[11u].z, fma(_2073, cbModelParam._m0[11u].y, _2072 * cbModelParam._m0[11u].x))), _1503);
            frontier_phi_13_35_ladder = _2219.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2219.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2219.x * cbModelParam._m0[1u].y;
        }
        _1583 = frontier_phi_13_35_ladder_2;
        _1585 = frontier_phi_13_35_ladder_1;
        _1587 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_690, _691, _692), _1503);
        _1583 = _1571.x * cbModelParam._m0[1u].y;
        _1585 = _1571.y * cbModelParam._m0[1u].y;
        _1587 = _1571.z * cbModelParam._m0[1u].y;
    }
    float _1591 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _519);
    float _1592 = isnan(_1591) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1591 : min(cbModelParam._m0[25u].w, _1591));
    float _1685;
    float _1687;
    float _1689;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1649 = fma(_754, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746)) + cbModelParam._m0[21u].w;
        float _1653 = fma(_754, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746)) + cbModelParam._m0[22u].w;
        float _1657 = fma(_754, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746)) + cbModelParam._m0[23u].w;
        float _1660 = fma(_692, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690));
        float _1663 = fma(_692, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690));
        float _1666 = fma(_692, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690));
        float _1775;
        if (_1660 > 0.0)
        {
            _1775 = abs((1.0 - _1649) / _1660);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1649 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1775 = frontier_phi_25_21_ladder;
        }
        float _2092;
        if (_1663 > 0.0)
        {
            _2092 = abs((1.0 - _1653) / _1663);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1653 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2092 = frontier_phi_37_32_ladder;
        }
        float _2430;
        if (_1666 > 0.0)
        {
            _2430 = abs((1.0 - _1657) / _1666);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1657 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2430 = frontier_phi_47_44_ladder;
        }
        float _2432 = isnan(_2092) ? _1775 : (isnan(_1775) ? _2092 : min(_1775, _2092));
        float _2433 = isnan(_2430) ? _2432 : (isnan(_2432) ? _2430 : min(_2432, _2430));
        float _2437 = (_2433 * _1660) + _1649;
        float _2438 = (_2433 * _1663) + _1653;
        float _2439 = (_2433 * _1666) + _1657;
        float _2440 = _2433 * 9.9999997473787516355514526367188e-05;
        float _2441 = (-1.0) - _2440;
        float _2443 = _2440 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2439 > _2443) || ((_2439 < _2441) || ((_2438 > _2443) || ((_2438 < _2441) || ((_2437 < _2441) || (_2437 > _2443))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2561 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2439, cbModelParam._m0[17u].z, fma(_2438, cbModelParam._m0[17u].y, _2437 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2439, cbModelParam._m0[18u].z, fma(_2438, cbModelParam._m0[18u].y, _2437 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2439, cbModelParam._m0[19u].z, fma(_2438, cbModelParam._m0[19u].y, _2437 * cbModelParam._m0[19u].x))), _1592);
            frontier_phi_22_47_ladder = _2561.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2561.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2561.x * cbModelParam._m0[1u].z;
        }
        _1685 = frontier_phi_22_47_ladder_2;
        _1687 = frontier_phi_22_47_ladder_1;
        _1689 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1669 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_690, _691, _692), _1592);
        _1685 = _1669.x * cbModelParam._m0[1u].z;
        _1687 = _1669.y * cbModelParam._m0[1u].z;
        _1689 = _1669.z * cbModelParam._m0[1u].z;
    }
    float _1702 = (((_717 * _667) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1685 - _1583)) + _1583);
    float _1704 = (((_717 * _669) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1687 - _1585)) + _1585);
    float _1706 = (((_717 * _670) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1689 - _1587)) + _1587);
    float _1709 = fma(_1706, cbSceneParam._m0[89u].z, fma(_1704, cbSceneParam._m0[89u].y, _1702 * cbSceneParam._m0[89u].x));
    float _1712 = fma(_1706, cbSceneParam._m0[90u].z, fma(_1704, cbSceneParam._m0[90u].y, _1702 * cbSceneParam._m0[90u].x));
    float _1715 = fma(_1706, cbSceneParam._m0[91u].z, fma(_1704, cbSceneParam._m0[91u].y, _1702 * cbSceneParam._m0[91u].x));
    float _1749 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1753 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1757 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1761 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1762 = _1749 / _1761;
    float _1763 = _1753 / _1761;
    float _1764 = _1757 / _1761;
    float _1911;
    float _1912;
    float _1913;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1791 = ((uint(_1764 > cbSceneParam._m0[59u].y) + uint(_1764 > cbSceneParam._m0[59u].x)) + uint(_1764 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1792 = _1791 + 43u;
        uint _1800 = _1791 + 44u;
        uint _1808 = _1791 + 45u;
        uint _1816 = _1791 + 46u;
        float _1827 = fma(_1761, cbSceneParam._m0[_1792].w, fma(_1757, cbSceneParam._m0[_1792].z, fma(_1753, cbSceneParam._m0[_1792].y, _1749 * cbSceneParam._m0[_1792].x)));
        float _1831 = fma(_1761, cbSceneParam._m0[_1800].w, fma(_1757, cbSceneParam._m0[_1800].z, fma(_1753, cbSceneParam._m0[_1800].y, _1749 * cbSceneParam._m0[_1800].x)));
        float _1839 = fma(_1761, cbSceneParam._m0[_1816].w, fma(_1757, cbSceneParam._m0[_1816].z, fma(_1753, cbSceneParam._m0[_1816].y, _1749 * cbSceneParam._m0[_1816].x)));
        float _1844 = cbSceneParam._m0[33u].z * _1839;
        float _1846 = cbSceneParam._m0[33u].w * _1839;
        float _1849 = fma(_1761, cbSceneParam._m0[_1808].w, fma(_1757, cbSceneParam._m0[_1808].z, fma(_1753, cbSceneParam._m0[_1808].y, _1749 * cbSceneParam._m0[_1808].x))) / _1839;
        float _1897 = (cbSceneParam._m0[33u].x - sqrt(((_1763 * _1763) + (_1762 * _1762)) + (_1764 * _1764))) * cbSceneParam._m0[33u].y;
        float _4174 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1904 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1844 + _1827) / _1839, (_1846 + _1831) / _1839), _1849), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1846 + _1827) / _1839, (_1831 - _1844) / _1839), _1849), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1827 - _1844) / _1839, (_1831 - _1846) / _1839), _1849), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1827 - _1846) / _1839, (_1844 + _1831) / _1839), _1849), 0.0)).x), vec4(0.25)));
        _1911 = 1.0 - (_1904 * cbSceneParam._m0[34u].x);
        _1912 = 1.0 - (_1904 * cbSceneParam._m0[34u].y);
        _1913 = 1.0 - (_1904 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1911 = 1.0;
        _1912 = 1.0;
        _1913 = 1.0;
    }
    float _1977;
    float _1979;
    float _1981;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1965 = fma(_1761, cbSceneParam._m0[63u].w, fma(_1757, cbSceneParam._m0[63u].z, fma(_1753, cbSceneParam._m0[63u].y, _1749 * cbSceneParam._m0[63u].x)));
        float _1966 = fma(_1761, cbSceneParam._m0[60u].w, fma(_1757, cbSceneParam._m0[60u].z, fma(_1753, cbSceneParam._m0[60u].y, _1749 * cbSceneParam._m0[60u].x))) / _1965;
        float _1967 = fma(_1761, cbSceneParam._m0[61u].w, fma(_1757, cbSceneParam._m0[61u].z, fma(_1753, cbSceneParam._m0[61u].y, _1749 * cbSceneParam._m0[61u].x))) / _1965;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1966 >= cbSceneParam._m0[64u].x) && (_1967 >= cbSceneParam._m0[64u].y)) && (_1966 <= cbSceneParam._m0[64u].z)) && (_1967 <= cbSceneParam._m0[64u].w))
        {
            float _2105 = fma(_1761, cbSceneParam._m0[62u].w, fma(_1757, cbSceneParam._m0[62u].z, fma(_1753, cbSceneParam._m0[62u].y, _1749 * cbSceneParam._m0[62u].x))) / _1965;
            float _2109 = isnan(cbSceneParam._m0[41u].w) ? _2105 : (isnan(_2105) ? cbSceneParam._m0[41u].w : max(_2105, cbSceneParam._m0[41u].w));
            float _2152 = (cbSceneParam._m0[33u].x - sqrt(((_1763 * _1763) + (_1762 * _1762)) + (_1764 * _1764))) * cbSceneParam._m0[33u].y;
            float _4190 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
            float _2159 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1966, cbSceneParam._m0[33u].w + _1967), _2109), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1966, _1967 - cbSceneParam._m0[33u].z), _2109), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1966 - cbSceneParam._m0[33u].z, _1967 - cbSceneParam._m0[33u].w), _2109), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1966 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1967), _2109), 0.0)).x), vec4(0.25)));
            float _2163 = 1.0 - (_2159 * cbSceneParam._m0[34u].x);
            float _2164 = 1.0 - (_2159 * cbSceneParam._m0[34u].y);
            float _2165 = 1.0 - (_2159 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2165) ? _1913 : (isnan(_1913) ? _2165 : min(_1913, _2165));
            frontier_phi_34_33_ladder_1 = isnan(_2164) ? _1912 : (isnan(_1912) ? _2164 : min(_1912, _2164));
            frontier_phi_34_33_ladder_2 = isnan(_2163) ? _1911 : (isnan(_1911) ? _2163 : min(_1911, _2163));
        }
        else
        {
            frontier_phi_34_33_ladder = _1913;
            frontier_phi_34_33_ladder_1 = _1912;
            frontier_phi_34_33_ladder_2 = _1911;
        }
        _1977 = frontier_phi_34_33_ladder_2;
        _1979 = frontier_phi_34_33_ladder_1;
        _1981 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1977 = _1911;
        _1979 = _1912;
        _1981 = _1913;
    }
    uvec4 _1986 = floatBitsToUint(cbInstanceData._m0[_642 + 5u]);
    uint _1988 = _1986.x * 14u;
    uint _1989 = _1988 + 13u;
    float _1996 = _682 + (-1.0);
    float _2001 = (cbLight._m0[_1989].x * _1996) + 1.0;
    float _2002 = (cbLight._m0[_1989].y * _1996) + 1.0;
    float _2003 = (cbLight._m0[_1989].z * _1996) + 1.0;
    float _2004 = (cbLight._m0[_1989].w * _1996) + 1.0;
    uint _2005 = _1988 + 5u;
    float _2011 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2015 = _1988 + 4u;
    float _2024 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
    uint _2028 = _1988 | 1u;
    float _2039 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_516, _517, _518));
    float _2042 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_516, _517, _518));
    float _4226 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _4237 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2047 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _2049 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _2056 = ((cbLight._m0[_2005].x * _2011) * _2049) + (((cbLight._m0[_2015].x * _1977) * _2024) * _2047);
    float _2057 = ((_2011 * cbLight._m0[_2005].y) * _2049) + (((cbLight._m0[_2015].y * _1979) * _2024) * _2047);
    float _2058 = ((_2011 * cbLight._m0[_2005].z) * _2049) + (((cbLight._m0[_2015].z * _1981) * _2024) * _2047);
    uvec4 _2062 = floatBitsToUint(cbLight._m0[_1988 + 12u]);
    bool _2064 = _2062.x == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2064)
    {
        _2166 = _2056;
        _2168 = _2057;
        _2170 = _2058;
    }
    else
    {
        uint _2174 = _1988 + 6u;
        float _2190 = (dot(vec3(cbLight._m0[_1988 + 2u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _2191 = _2190 * _2190;
        float _4248 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2192 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2193 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2166 = (((cbLight._m0[_2174].x * 0.3183098733425140380859375) * _2192) * _2193) + _2056;
        _2168 = (((cbLight._m0[_2174].y * 0.3183098733425140380859375) * _2192) * _2193) + _2057;
        _2170 = (((cbLight._m0[_2174].z * 0.3183098733425140380859375) * _2192) * _2193) + _2058;
    }
    bool _2173 = _2062.y == 0u;
    float _2228;
    float _2230;
    float _2232;
    if (_2173)
    {
        _2228 = _2166;
        _2230 = _2168;
        _2232 = _2170;
    }
    else
    {
        uint _2401 = _1988 + 7u;
        float _2417 = (dot(vec3(cbLight._m0[_1988 + 3u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _2418 = _2417 * _2417;
        float _4264 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2419 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2420 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2228 = (((cbLight._m0[_2401].x * 0.3183098733425140380859375) * _2419) * _2420) + _2166;
        _2230 = (((cbLight._m0[_2401].y * 0.3183098733425140380859375) * _2419) * _2420) + _2168;
        _2232 = (((cbLight._m0[_2401].z * 0.3183098733425140380859375) * _2419) * _2420) + _2170;
    }
    uint _2235 = _1988 + 8u;
    float _2248 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _519) * 0.949999988079071044921875);
    float _2249 = _2248 * _2248;
    float _2250 = cbLight._m0[_1988].x + _596;
    float _2251 = cbLight._m0[_1988].y + _597;
    float _2252 = cbLight._m0[_1988].z + _598;
    float _2256 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
    float _2257 = _2256 * _2250;
    float _2258 = _2256 * _2251;
    float _2259 = _2256 * _2252;
    float _2260 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1988].xyz));
    float _4280 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _4291 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _2264 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2265 = dot(vec3(_516, _517, _518), vec3(_2257, _2258, _2259));
    float _4302 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2268 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2269 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2257, _2258, _2259));
    float _4313 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2273 = _2249 * _2249;
    float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
    float _2285 = exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0);
    float _2286 = 0.959999978542327880859375 - _664;
    float _2288 = 0.959999978542327880859375 - _665;
    float _2289 = 0.959999978542327880859375 - _666;
    float _2296 = 1.0 - _2249;
    float _2307 = (0.5 / (((_2264 * ((_2263 * _2296) + _2249)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2296) + _2249) * _2263))) * _2263;
    float _4324 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2309 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
    uint _2323 = _1988 + 9u;
    float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _519) * 0.949999988079071044921875);
    float _2335 = _2334 * _2334;
    float _2336 = cbLight._m0[_2028].x + _596;
    float _2337 = cbLight._m0[_2028].y + _597;
    float _2338 = cbLight._m0[_2028].z + _598;
    float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
    float _2343 = _2342 * _2336;
    float _2344 = _2342 * _2337;
    float _2345 = _2342 * _2338;
    float _2346 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2028].xyz));
    float _4335 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2349 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2350 = dot(vec3(_516, _517, _518), vec3(_2343, _2344, _2345));
    float _4346 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2353 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2354 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2343, _2344, _2345));
    float _4357 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2358 = _2335 * _2335;
    float _2362 = ((_2353 * _2353) * (_2358 + (-1.0))) + 1.0;
    float _2369 = exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0);
    float _2376 = 1.0 - _2335;
    float _2386 = (0.5 / (((_2264 * ((_2349 * _2376) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2376) + _2335) * _2349))) * _2349;
    float _4368 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2388 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2358 / ((_2362 * _2362) * 3.141590118408203125));
    float _2398 = (((((_2369 * _2286) + _667) * cbLight._m0[_2323].x) * _2388) * _2011) + ((((cbLight._m0[_2235].x * _1977) * ((_2285 * _2286) + _667)) * _2309) * _2024);
    float _2399 = (((((_2369 * _2288) + _669) * cbLight._m0[_2323].y) * _2388) * _2011) + ((((cbLight._m0[_2235].y * _1979) * ((_2285 * _2288) + _669)) * _2309) * _2024);
    float _2400 = (((((_2369 * _2289) + _670) * cbLight._m0[_2323].z) * _2388) * _2011) + ((((cbLight._m0[_2235].z * _1981) * ((_2285 * _2289) + _670)) * _2309) * _2024);
    float _2456;
    float _2458;
    float _2460;
    if (_2064)
    {
        _2456 = _2398;
        _2458 = _2399;
        _2460 = _2400;
    }
    else
    {
        uint _2462 = _1988 + 2u;
        uint _2466 = _1988 + 10u;
        float _2480 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2462].w)) * _519) * 0.949999988079071044921875);
        float _2481 = _2480 * _2480;
        float _2482 = cbLight._m0[_2462].x + _596;
        float _2483 = cbLight._m0[_2462].y + _597;
        float _2484 = cbLight._m0[_2462].z + _598;
        float _2488 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
        float _2489 = _2488 * _2482;
        float _2490 = _2488 * _2483;
        float _2491 = _2488 * _2484;
        float _2492 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2462].xyz));
        float _4379 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2496 = dot(vec3(_516, _517, _518), vec3(_2489, _2490, _2491));
        float _4390 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2499 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2500 = dot(vec3(cbLight._m0[_2462].xyz), vec3(_2489, _2490, _2491));
        float _4401 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2504 = _2481 * _2481;
        float _2508 = ((_2499 * _2499) * (_2504 + (-1.0))) + 1.0;
        float _2515 = exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0);
        float _2522 = 1.0 - _2481;
        float _2532 = (0.5 / (((_2264 * ((_2495 * _2522) + _2481)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2522) + _2481) * _2495))) * _2495;
        float _4412 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2534 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2504 / ((_2508 * _2508) * 3.141590118408203125));
        float _2535 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2456 = (((((_2515 * _2286) + _667) * cbLight._m0[_2466].x) * _2534) * _2535) + _2398;
        _2458 = (((((_2515 * _2288) + _669) * cbLight._m0[_2466].y) * _2534) * _2535) + _2399;
        _2460 = (((((_2515 * _2289) + _670) * cbLight._m0[_2466].z) * _2534) * _2535) + _2400;
    }
    float _2566;
    float _2568;
    float _2570;
    if (_2173)
    {
        _2566 = _2456;
        _2568 = _2458;
        _2570 = _2460;
    }
    else
    {
        uint _2577 = _1988 + 3u;
        uint _2581 = _1988 + 11u;
        float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2577].w)) * _519) * 0.949999988079071044921875);
        float _2596 = _2595 * _2595;
        float _2597 = cbLight._m0[_2577].x + _596;
        float _2598 = cbLight._m0[_2577].y + _597;
        float _2599 = cbLight._m0[_2577].z + _598;
        float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
        float _2604 = _2603 * _2597;
        float _2605 = _2603 * _2598;
        float _2606 = _2603 * _2599;
        float _2607 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2577].xyz));
        float _4428 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2611 = dot(vec3(_516, _517, _518), vec3(_2604, _2605, _2606));
        float _4439 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2614 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2615 = dot(vec3(cbLight._m0[_2577].xyz), vec3(_2604, _2605, _2606));
        float _4450 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2619 = _2596 * _2596;
        float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
        float _2630 = exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0);
        float _2637 = 1.0 - _2596;
        float _2647 = (0.5 / (((_2264 * ((_2610 * _2637) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2637) + _2596) * _2610))) * _2610;
        float _4461 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2649 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
        float _2650 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2566 = (((((_2630 * _2286) + _667) * cbLight._m0[_2581].x) * _2649) * _2650) + _2456;
        _2568 = (((((_2630 * _2288) + _669) * cbLight._m0[_2581].y) * _2649) * _2650) + _2458;
        _2570 = (((((_2630 * _2289) + _670) * cbLight._m0[_2581].z) * _2649) * _2650) + _2460;
    }
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    if (_1986.y == 0u)
    {
        uvec4 _2671 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2672 = _2671.x;
        uint _2683 = uint((float(_2671.y) * floor(float(uint(cbSceneParam._m0[85u].y * _605) / _2672))) + floor(float(uint(cbSceneParam._m0[85u].x * _604) / _2672)));
        float _2693 = (log2(_1764 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2694 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        uint _2697 = uint(isnan(14.0) ? _2694 : (isnan(_2694) ? 14.0 : min(_2694, 14.0)));
        uvec4 _2702 = texelFetch(g_lightClusterGridBuffer, int(((_2697 << 2u) + (_2683 << 6u)) >> 2u));
        uint _2703 = _2702.x;
        uint _2704 = _2671.z;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        if (((((1u << ((_2704 >> 4u) & 15u)) + 4294967295u) & _2703) == 0u) || ((_2704 & 240u) == 0u))
        {
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
        }
        else
        {
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2792;
            float _2794;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            uint _2934 = 0u;
            uint _2943;
            bool _2944;
            for (;;)
            {
                _2943 = texelFetch(g_lightClassification, int((((_2697 << 5u) + (_2683 << 9u)) + (_2934 << 2u)) >> 2u)).x;
                _2944 = _2943 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2944)
                {
                    frontier_phi_66_pred = _2933;
                    frontier_phi_66_pred_1 = _2932;
                    frontier_phi_66_pred_2 = _2931;
                    frontier_phi_66_pred_3 = _2930;
                    frontier_phi_66_pred_4 = _2929;
                    frontier_phi_66_pred_5 = _2928;
                }
                else
                {
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    uint _3058;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2943;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    for (;;)
                    {
                        uint _3062 = uint(findLSB(_3058)) + (_2934 << 5u);
                        uint _3059 = (_3058 + 4294967295u) & _3058;
                        uint _3064 = _3062 * 48u;
                        vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 3u)).x));
                        uint _3084 = (_3062 * 48u) + 4u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 3u)).x));
                        uint _3103 = (_3062 * 48u) + 8u;
                        vec3 _3114 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x));
                        float _3118 = _3078.x - _1762;
                        float _3119 = _3078.y - _1763;
                        float _3120 = _3078.z - _1764;
                        float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                        float _3124 = inversesqrt(_3121);
                        float _3125 = _3124 * _3118;
                        float _3126 = _3124 * _3119;
                        float _3127 = _3124 * _3120;
                        float _3128 = dot(vec3(_623, _626, _629), vec3(_3125, _3126, _3127));
                        float _3133 = 1.0 - (_3121 * _3078.w);
                        float _4487 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3134 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3135 = sqrt(_3121) * _3097.w;
                        float _3138 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                        float _3139 = _3138 * _3138;
                        float _3142 = ((1.0 - _3139) * _3128) + _3139;
                        float _3145 = _3135 * _3135;
                        float _3149 = ((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3134) / ((_3145 * 0.699999988079071044921875) + 1.0);
                        float _3153 = (-0.0) - _1762;
                        float _3154 = (-0.0) - _1763;
                        float _3155 = (-0.0) - _1764;
                        float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                        float _3160 = _3159 * _3153;
                        float _3161 = _3159 * _3154;
                        float _3162 = _3159 * _3155;
                        float _3169 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                        float _3170 = 1.0 - _698;
                        float _3177 = sqrt(1.0 - ((1.0 - (_3170 * _3170)) * (1.0 - (_3169 * _3169))));
                        float _3178 = _3177 * _3177;
                        float _3179 = _3178 * _3178;
                        float _3180 = _3160 + _3125;
                        float _3181 = _3161 + _3126;
                        float _3182 = _3162 + _3127;
                        float _3186 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
                        float _3190 = dot(vec3(_623, _626, _629), vec3(_3160, _3161, _3162));
                        float _4503 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3193 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3194 = dot(vec3(_623, _626, _629), vec3(_3186 * _3180, _3186 * _3181, _3186 * _3182));
                        float _4514 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3201 = ((_3197 * _3197) * (_3179 + (-1.0))) + 1.0;
                        float _3202 = _3138 * _3178;
                        float _3203 = _3202 * _3202;
                        float _3206 = ((1.0 - _3203) * _3128) + _3203;
                        float _4525 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3208 = 1.0 - _3178;
                        float _3218 = (0.5 / (((_3207 * ((_3193 * _3208) + _3178)) + 9.9999999392252902907785028219223e-09) + (((_3207 * _3208) + _3178) * _3193))) * _3207;
                        float _4536 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3229 = (((_3179 * 3.1415927410125732421875) * (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) / ((_3201 * _3201) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125))) * _3134;
                        _2987 = (_3149 * _3097.x) + _3055;
                        _2988 = (_3149 * _3097.y) + _3056;
                        _2989 = (_3149 * _3097.z) + _3057;
                        _2984 = (_3229 * _3114.x) + _3052;
                        _2985 = (_3229 * _3114.y) + _3053;
                        _2986 = (_3229 * _3114.z) + _3054;
                        if (_3059 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _3059;
                        }
                    }
                    frontier_phi_66_pred = _2989;
                    frontier_phi_66_pred_1 = _2988;
                    frontier_phi_66_pred_2 = _2987;
                    frontier_phi_66_pred_3 = _2986;
                    frontier_phi_66_pred_4 = _2985;
                    frontier_phi_66_pred_5 = _2984;
                }
                _2794 = frontier_phi_66_pred;
                _2792 = frontier_phi_66_pred_1;
                _2790 = frontier_phi_66_pred_2;
                _2788 = frontier_phi_66_pred_3;
                _2786 = frontier_phi_66_pred_4;
                _2784 = frontier_phi_66_pred_5;
                uint _2935 = _2934 + 1u;
                if (_2935 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2928 = _2784;
                    _2929 = _2786;
                    _2930 = _2788;
                    _2931 = _2790;
                    _2932 = _2792;
                    _2933 = _2794;
                    _2934 = _2935;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
        }
        uvec4 _2797 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2798 = _2797.z;
        uint _2800 = (_2798 >> 8u) & 15u;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((4294967295u << _2800) & _2703) == 0u)
        {
            _2896 = _2783;
            _2898 = _2785;
            _2900 = _2787;
            _2902 = _2789;
            _2904 = _2791;
            _2906 = _2793;
        }
        else
        {
            float _2921 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
            float _2922 = _2921 * _1762;
            float _2923 = _2921 * _1763;
            float _2924 = _2921 * _1764;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2800 < ((_2798 >> 12u) & 15u))
            {
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _3035 = _2783;
                float _3036 = _2785;
                float _3037 = _2787;
                float _3038 = _2789;
                float _3039 = _2791;
                float _3040 = _2793;
                uint _3041 = _2800;
                uint _3050;
                bool _3051;
                for (;;)
                {
                    _3050 = texelFetch(g_lightClassification, int((((_2697 << 5u) + (_2683 << 9u)) + (_3041 << 2u)) >> 2u)).x;
                    _3051 = _3050 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3051)
                    {
                        frontier_phi_72_pred = _3040;
                        frontier_phi_72_pred_1 = _3039;
                        frontier_phi_72_pred_2 = _3038;
                        frontier_phi_72_pred_3 = _3037;
                        frontier_phi_72_pred_4 = _3036;
                        frontier_phi_72_pred_5 = _3035;
                    }
                    else
                    {
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3247 = _3035;
                        float _3248 = _3036;
                        float _3249 = _3037;
                        float _3250 = _3038;
                        float _3251 = _3039;
                        float _3252 = _3040;
                        uint _3253 = _3050;
                        uint _3254;
                        vec4 _3279;
                        float _3280;
                        vec4 _3295;
                        vec3 _3307;
                        vec4 _3323;
                        vec4 _3339;
                        float _3386;
                        bool _3387;
                        for (;;)
                        {
                            uint _3264 = ((_3041 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3253));
                            _3254 = (_3253 + 4294967295u) & _3253;
                            uint _3266 = _3264 * 40u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            _3280 = _3279.w;
                            uint _3282 = (_3264 * 40u) + 4u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3264 * 40u) + 8u;
                            _3307 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x));
                            uint _3310 = (_3264 * 40u) + 16u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3326 = (_3264 * 40u) + 20u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3342 = (_3264 * 40u) + 24u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3361 = (_3264 * 40u) + 28u;
                            vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3386 = fma(_1764, _3374.z, fma(_1763, _3374.y, _3374.x * _1762)) + _3374.w;
                            _3387 = !((fma(_1764, _3355.z, fma(_1763, _3355.y, _3355.x * _1762)) + _3355.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3387)
                            {
                                float _3414 = _3279.x - _1762;
                                float _3415 = _3279.y - _1763;
                                float _3416 = _3279.z - _1764;
                                float _3417 = dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416));
                                float _3420 = inversesqrt(_3417);
                                float _3421 = _3420 * _3414;
                                float _3422 = _3420 * _3415;
                                float _3423 = _3420 * _3416;
                                float _3427 = 1.0 - (_3417 / (_3280 * _3280));
                                float _4547 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3432 = sqrt(_3417) * _3295.w;
                                float _3434 = 1.39999997615814208984375 / (_3432 + 1.39999997615814208984375);
                                float _3435 = _3434 * _3434;
                                float _3438 = ((1.0 - _3435) * dot(vec3(_3421, _3422, _3423), vec3(_623, _626, _629))) + _3435;
                                float _3441 = _3432 * _3432;
                                float _3445 = (fma(_1764, _3323.z, fma(_1763, _3323.y, _3323.x * _1762)) + _3323.w) / _3386;
                                float _3446 = (fma(_1764, _3339.z, fma(_1763, _3339.y, _3339.x * _1762)) + _3339.w) / _3386;
                                float _3450 = 1.0 - dot(vec2(_3445, _3446), vec2(_3445, _3446));
                                float _4563 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3452 = _3451 * (((isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0))) * _3428) / ((_3441 * 0.699999988079071044921875) + 1.0));
                                float _3464 = exp2(log2(1.0 / ((_3441 * 3.5) + 5.0)) * 0.25);
                                float _3465 = 1.0 - _698;
                                float _3472 = sqrt(1.0 - ((1.0 - (_3465 * _3465)) * (1.0 - (_3464 * _3464))));
                                float _3473 = _3472 * _3472;
                                float _3474 = _3473 * _3473;
                                float _3475 = _3421 - _2922;
                                float _3476 = _3422 - _2923;
                                float _3477 = _3423 - _2924;
                                float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                                float _3485 = dot(vec3(_623, _626, _629), vec3((-0.0) - _2922, (-0.0) - _2923, (-0.0) - _2924));
                                float _4574 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3489 = dot(vec3(_623, _626, _629), vec3(_3481 * _3475, _3481 * _3476, _3481 * _3477));
                                float _4585 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3492 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3496 = ((_3492 * _3492) * (_3474 + (-1.0))) + 1.0;
                                float _3497 = _3434 * _3473;
                                float _3498 = _3497 * _3497;
                                float _3504 = ((1.0 - _3498) * dot(vec3(_623, _626, _629), vec3(_3421, _3422, _3423))) + _3498;
                                float _4596 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3506 = 1.0 - _3473;
                                float _3516 = (0.5 / (((_3505 * ((_3488 * _3506) + _3473)) + 9.9999999392252902907785028219223e-09) + (((_3505 * _3506) + _3473) * _3488))) * _3505;
                                float _4607 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3526 = (_3451 * _3428) * (((_3474 * 3.1415927410125732421875) * (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) / ((_3496 * _3496) * ((_3441 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3452 * _3295.y;
                                frontier_phi_78_pred_1 = _3452 * _3295.x;
                                frontier_phi_78_pred_2 = _3526 * _3307.z;
                                frontier_phi_78_pred_3 = _3526 * _3307.y;
                                frontier_phi_78_pred_4 = _3526 * _3307.x;
                                frontier_phi_78_pred_5 = _3452 * _3295.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3534 = frontier_phi_78_pred;
                            _3533 = frontier_phi_78_pred_1;
                            _3532 = frontier_phi_78_pred_2;
                            _3531 = frontier_phi_78_pred_3;
                            _3530 = frontier_phi_78_pred_4;
                            _3535 = frontier_phi_78_pred_5;
                            _3237 = _3533 + _3250;
                            _3238 = _3534 + _3251;
                            _3239 = _3535 + _3252;
                            _3234 = _3530 + _3247;
                            _3235 = _3531 + _3248;
                            _3236 = _3532 + _3249;
                            if (_3254 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3254;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3239;
                        frontier_phi_72_pred_1 = _3238;
                        frontier_phi_72_pred_2 = _3237;
                        frontier_phi_72_pred_3 = _3236;
                        frontier_phi_72_pred_4 = _3235;
                        frontier_phi_72_pred_5 = _3234;
                    }
                    _2907 = frontier_phi_72_pred;
                    _2905 = frontier_phi_72_pred_1;
                    _2903 = frontier_phi_72_pred_2;
                    _2901 = frontier_phi_72_pred_3;
                    _2899 = frontier_phi_72_pred_4;
                    _2897 = frontier_phi_72_pred_5;
                    uint _3042 = _3041 + 1u;
                    if (_3042 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3035 = _2897;
                        _3036 = _2899;
                        _3037 = _2901;
                        _3038 = _2903;
                        _3039 = _2905;
                        _3040 = _2907;
                        _3041 = _3042;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2907;
                frontier_phi_60_61_ladder_1 = _2905;
                frontier_phi_60_61_ladder_2 = _2901;
                frontier_phi_60_61_ladder_3 = _2899;
                frontier_phi_60_61_ladder_4 = _2897;
                frontier_phi_60_61_ladder_5 = _2903;
            }
            else
            {
                frontier_phi_60_61_ladder = _2793;
                frontier_phi_60_61_ladder_1 = _2791;
                frontier_phi_60_61_ladder_2 = _2787;
                frontier_phi_60_61_ladder_3 = _2785;
                frontier_phi_60_61_ladder_4 = _2783;
                frontier_phi_60_61_ladder_5 = _2789;
            }
            _2896 = frontier_phi_60_61_ladder_4;
            _2898 = frontier_phi_60_61_ladder_3;
            _2900 = frontier_phi_60_61_ladder_2;
            _2902 = frontier_phi_60_61_ladder_5;
            _2904 = frontier_phi_60_61_ladder_1;
            _2906 = frontier_phi_60_61_ladder;
        }
        float _2911 = isnan(1.0) ? _682 : (isnan(_682) ? 1.0 : min(_682, 1.0));
        _2716 = (_2911 * _2902) + _2228;
        _2718 = (_2911 * _2904) + _2230;
        _2720 = (_2911 * _2906) + _2232;
        _2722 = ((_2896 * _667) * _2911) + _2566;
        _2724 = ((_2898 * _669) * _2911) + _2568;
        _2726 = ((_2900 * _670) * _2911) + _2570;
    }
    else
    {
        _2716 = _2228;
        _2718 = _2230;
        _2720 = _2232;
        _2722 = _2566;
        _2724 = _2568;
        _2726 = _2570;
    }
    float _4623 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4634 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4645 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    uint _2746 = _642 + 6u;
    float _2754 = _604 / cbSceneParam._m0[86u].x;
    float _2755 = _605 / cbSceneParam._m0[86u].y;
    vec4 _2769 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2754, _2755, (log2((isnan(cbSceneParam._m0[77u].w) ? _539 : (isnan(_539) ? cbSceneParam._m0[77u].w : min(_539, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2771 = _2769.x;
    float _2772 = _2769.y;
    float _2773 = _2769.z;
    float _2774 = _2769.w;
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    if (_539 > cbSceneParam._m0[78u].w)
    {
        float _2808 = isnan(_539) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _539 : min(cbSceneParam._m0[80u].w, _539));
        float _2809 = _2808 / _539;
        float _2820 = _2809 * _589;
        float _2821 = _590 * _2809;
        float _2822 = (-0.0) - _2821;
        float _2824 = _2809 * _591;
        float _2826 = (cbSceneParam._m0[77u].w * _2822) / _2808;
        float _2827 = _2826 + cbSceneParam._m0[79u].w;
        float _2828 = cbSceneParam._m0[79u].w - _2821;
        float _2834 = sqrt(((_2820 * _2820) + (_2821 * _2821)) + (_2824 * _2824));
        float _2837 = (1.0 - (cbSceneParam._m0[77u].w / _2808)) * _2834;
        float _2842 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2844 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2997;
        if (abs((_2822 - _2826) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2997 = ((((_2827 > 0.0) ? exp2(_2842 * _2827) : (2.0 - exp2(_2844 * _2827))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2837;
        }
        else
        {
            float _2957 = 1.0 / cbSceneParam._m0[80u].x;
            float _2958 = isnan(_2828) ? _2827 : (isnan(_2827) ? _2828 : max(_2827, _2828));
            float _2959 = isnan(_2828) ? _2827 : (isnan(_2827) ? _2828 : min(_2827, _2828));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            float _2969 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : min(_2959, 0.0));
            _2997 = ((abs(_2834 / _2822) * cbSceneParam._m0[80u].y) * ((((_2968 - _2969) * 2.0) - ((exp2(_2842 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0)))) - exp2(_2842 * (isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))))) * _2957)) - ((exp2(_2844 * _2968) - exp2(_2844 * _2969)) * _2957))) + (_2837 * cbSceneParam._m0[80u].z);
        }
        vec4 _2999 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2754, _2755, 1.0), 0.0);
        float _3008 = exp2((_2997 * (-1.44269502162933349609375)) * (1.0 - _2999.w));
        float _3009 = log2(_3008);
        float _3025 = log2(_2774);
        _2846 = (exp2(_3025 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].x)) * _2999.x) / cbSceneParam._m0[78u].x)) + _2771;
        _2848 = (exp2(_3025 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].y)) * _2999.y) / cbSceneParam._m0[78u].y)) + _2772;
        _2850 = (exp2(_3025 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].z)) * _2999.z) / cbSceneParam._m0[78u].z)) + _2773;
        _2852 = _3008 * _2774;
    }
    else
    {
        _2846 = _2771;
        _2848 = _2772;
        _2850 = _2773;
        _2852 = _2774;
    }
    float _2864 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2865 = _2864 == 3.0;
    float _2866 = log2(_2852);
    float _2873 = exp2(_2866 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2716 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _682))) + ((_2722 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1492)) * cbPerFrame._m0[3u].x));
    float _2874 = exp2(_2866 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2718 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _682))) + ((_2724 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1492)) * cbPerFrame._m0[3u].x));
    float _2875 = exp2(_2866 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2720 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _682))) + ((_2726 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1492)) * cbPerFrame._m0[3u].x));
    float _2884 = (_2864 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2884 * (_2865 ? _2873 : (_2873 + (cbSceneParam._m0[72u].w * _2846)));
    SV_Target.y = _2884 * (_2865 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2848)));
    SV_Target.z = _2884 * (_2865 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2850)));
    SV_Target.w = cbInstanceData._m0[_2746].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2746].w;
}


