#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1042;
float _3692;
float _3693;
float _3694;
float _3695;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _255 = _249.x * cbMtdParam._m0[10u].x;
    float _256 = _249.y * cbMtdParam._m0[10u].y;
    float _257 = _249.z * cbMtdParam._m0[10u].z;
    float _262 = 1.0 - cbMtdParam._m0[13u].z;
    float _3704 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _264 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    vec4 _282 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _290 = ((_255 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _282.x;
    float _293 = ((_256 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _282.y;
    float _296 = ((_257 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _282.z;
    float _303 = ((_255 - _290) * _264) + _290;
    float _304 = ((_256 - _293) * _264) + _293;
    float _305 = ((_257 - _296) * _264) + _296;
    vec4 _323 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _353 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3715 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _361 = (_354 * ((_323.x * cbMtdParam._m0[11u].x) - _303)) + _303;
    float _362 = (_354 * ((_323.y * cbMtdParam._m0[11u].y) - _304)) + _304;
    float _363 = (_354 * ((_323.z * cbMtdParam._m0[11u].z) - _305)) + _305;
    vec4 _377 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _381 = _377.z;
    vec4 _394 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _408 = cbMtdParam._m0[13u].w * _381;
    float _411 = (((((_381 * 2.0) * _394.z) * cbMtdParam._m0[14u].x) - _408) * cbMtdParam._m0[13u].y) + _408;
    vec4 _424 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _439 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_424.z * cbMtdParam._m0[14u].y) - _411)) + _411;
    float _446 = (_377.x * 2.0) + (-1.0);
    float _447 = (_377.y * 2.0) + (-1.0);
    float _448 = dot(vec2(_446, _447), vec2(_446, _447));
    float _3726 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _453 = sqrt(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))));
    float _464 = ((cbMtdParam._m0[13u].x * ((_394.x * 2.0) + (-1.0))) + _446) + ((((_424.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _465 = ((cbMtdParam._m0[13u].x * ((_394.y * 2.0) + (-1.0))) + _447) + ((((_424.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _468 = fma(_453, _214 * NORMAL.x, fma(_465, _221 * TANGENT.x, (_207 * _199) * _464));
    float _471 = fma(_453, _214 * NORMAL.y, fma(_465, _221 * TANGENT.y, (_207 * _200) * _464));
    float _474 = fma(_453, _214 * NORMAL.z, fma(_465, _221 * TANGENT.z, (_207 * _201) * _464));
    float _478 = inversesqrt(dot(vec3(_468, _471, _474), vec3(_468, _471, _474)));
    float _479 = _478 * _468;
    float _480 = _478 * _471;
    float _481 = _478 * _474;
    float _3737 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _482 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _3748 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3759 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3770 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _501 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _551 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _541);
    float _552 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _541);
    float _553 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _541);
    float _557 = inversesqrt(dot(vec3(_551, _552, _553), vec3(_551, _552, _553)));
    float _558 = _551 * _557;
    float _559 = _552 * _557;
    float _560 = _553 * _557;
    vec4 _565 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _567 = _565.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _722 = sqrt(((_551 * _551) + (_552 * _552)) + (_553 * _553));
        float _728 = (cbMatDynParam._m0[5u].x * _722) + cbMatDynParam._m0[5u].y;
        float _3781 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _733 = (cbMatDynParam._m0[5u].z * _722) + cbMatDynParam._m0[5u].w;
        float _3792 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) - _729)) + _729) < ((_567 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _578 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _579 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _598 = fma(_481, cbSceneParam._m0[5u].z, fma(_480, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _479));
    float _601 = fma(_481, cbSceneParam._m0[6u].z, fma(_480, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _479));
    float _604 = fma(_481, cbSceneParam._m0[7u].z, fma(_480, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _479));
    uint _617 = uint(roundEven(NORMAL.w)) * 13u;
    uint _618 = _617 + 9u;
    uint _619 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _625 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * cbInstanceData._m0[_619].x;
    float _626 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * cbInstanceData._m0[_619].y;
    float _627 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * cbInstanceData._m0[_619].z;
    float _3803 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    vec4 _639 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _578, cbSceneParam._m0[86u].y * _579));
    float _642 = _639.x * TEXCOORD_5.w;
    float _643 = dot(vec3(_479, _480, _481), vec3(_558, _559, _560));
    float _646 = _643 * 2.0;
    float _650 = (_646 * _479) - _558;
    float _651 = (_646 * _480) - _559;
    float _652 = (_646 * _481) - _560;
    float _656 = abs(dot(vec3(_558, _559, _560), vec3(_479, _480, _481)));
    float _3836 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _658 = sqrt(_482);
    float _671 = exp2((_658 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_658 * 3.0));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1041;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _766 = fma(_711, cbModelParam._m0[26u].z, fma(_707, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _703));
        float _770 = fma(_711, cbModelParam._m0[27u].z, fma(_707, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _703));
        float _774 = fma(_711, cbModelParam._m0[28u].z, fma(_707, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _703));
        float _799 = _703 + _479;
        float _800 = _707 + _480;
        float _801 = _711 + _481;
        float _811 = fma(_801, cbModelParam._m0[26u].z, fma(_800, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _799)) - _766;
        float _812 = fma(_801, cbModelParam._m0[27u].z, fma(_800, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _799)) - _770;
        float _813 = fma(_801, cbModelParam._m0[28u].z, fma(_800, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _799)) - _774;
        float _817 = inversesqrt(dot(vec3(_811, _812, _813), vec3(_811, _812, _813)));
        float _830 = ((_817 * _811) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_766 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_817 * _812) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_770 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_817 * _813) / cbModelParam._m0[34u].z) + ((((((_774 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        float _869 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_835.x + (-0.5));
        float _871 = _869 * (_835.y + (-0.5));
        float _872 = _869 * (_835.z + (-0.5));
        float _879 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_842.x + (-0.5));
        float _881 = _879 * (_842.y + (-0.5));
        float _882 = _879 * (_842.z + (-0.5));
        float _889 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_849.x + (-0.5));
        float _891 = _889 * (_849.y + (-0.5));
        float _892 = _889 * (_849.z + (-0.5));
        float _899 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_856.x + (-0.5));
        float _901 = _899 * (_856.y + (-0.5));
        float _902 = _899 * (_856.z + (-0.5));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = _870 * 0.5;
        float _907 = _880 * 0.5;
        float _908 = _890 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _923 = (dot(vec3(_479, _480, _481), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _933 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3884 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_935 + 1.0))) + _940) * _903;
        float _950 = _871 * 0.5;
        float _951 = _881 * 0.5;
        float _952 = _891 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_479, _480, _481), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3917 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_977 + 1.0))) + _982) * _904;
        float _992 = _872 * 0.5;
        float _993 = _882 * 0.5;
        float _994 = _892 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_479, _480, _481), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3950 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1019 + 1.0))) + _1024) * _905;
        _1041 = _872;
        _1043 = _871;
        _1044 = _870;
        _1045 = _882;
        _1046 = _881;
        _1047 = _880;
        _1048 = _892;
        _1049 = _891;
        _1050 = _890;
        _1051 = _905;
        _1052 = _904;
        _1053 = _903;
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
    }
    else
    {
        _1041 = _1042;
        _1043 = _1042;
        _1044 = _1042;
        _1045 = _1042;
        _1046 = _1042;
        _1047 = _1042;
        _1048 = _1042;
        _1049 = _1042;
        _1050 = _1042;
        _1051 = _1042;
        _1052 = _1042;
        _1053 = _1042;
        _1054 = 0.0;
        _1055 = 0.0;
        _1056 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_711, cbModelParam._m0[30u].z, fma(_707, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _703));
        float _1089 = fma(_711, cbModelParam._m0[31u].z, fma(_707, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _703));
        float _1093 = fma(_711, cbModelParam._m0[32u].z, fma(_707, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _703));
        float _1116 = _703 + _479;
        float _1117 = _707 + _480;
        float _1118 = _711 + _481;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_479, _480, _481), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _4013 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_479, _480, _481), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4046 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_479, _480, _481), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4079 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1042;
        _1355 = _1042;
        _1356 = _1042;
        _1357 = _1042;
        _1358 = _1042;
        _1359 = _1042;
        _1360 = _1042;
        _1361 = _1042;
        _1362 = _1042;
        _1363 = _1042;
        _1364 = _1042;
        _1365 = _1042;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1054)) + _1054;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1055)) + _1055;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1056)) + _1056;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _650 * 0.5;
    float _1423 = _651 * 0.5;
    float _1424 = _652 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1041, _1045, _1048, _1051));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _482);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1571;
    float _1573;
    float _1575;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1538 = fma(_711, cbModelParam._m0[13u].z, fma(_707, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _703)) + cbModelParam._m0[13u].w;
        float _1542 = fma(_711, cbModelParam._m0[14u].z, fma(_707, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _703)) + cbModelParam._m0[14u].w;
        float _1546 = fma(_711, cbModelParam._m0[15u].z, fma(_707, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _703)) + cbModelParam._m0[15u].w;
        float _1549 = fma(_652, cbModelParam._m0[13u].z, fma(_651, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _650));
        float _1552 = fma(_652, cbModelParam._m0[14u].z, fma(_651, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _650));
        float _1555 = fma(_652, cbModelParam._m0[15u].z, fma(_651, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _650));
        float _1583;
        if (_1549 > 0.0)
        {
            _1583 = abs((1.0 - _1538) / _1549);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1538 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1583 = frontier_phi_17_15_ladder;
        }
        float _1756;
        if (_1552 > 0.0)
        {
            _1756 = abs((1.0 - _1542) / _1552);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1542 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1756 = frontier_phi_26_22_ladder;
        }
        float _2052;
        if (_1555 > 0.0)
        {
            _2052 = abs((1.0 - _1546) / _1555);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1546 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2052 = frontier_phi_38_33_ladder;
        }
        float _2054 = isnan(_1756) ? _1583 : (isnan(_1583) ? _1756 : min(_1583, _1756));
        float _2055 = isnan(_2052) ? _2054 : (isnan(_2054) ? _2052 : min(_2054, _2052));
        float _2059 = (_2055 * _1549) + _1538;
        float _2060 = (_2055 * _1552) + _1542;
        float _2061 = (_2055 * _1555) + _1546;
        float _2062 = _2055 * 9.9999997473787516355514526367188e-05;
        float _2064 = (-1.0) - _2062;
        float _2066 = _2062 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2061 > _2066) || ((_2061 < _2064) || ((_2060 > _2066) || ((_2060 < _2064) || ((_2059 < _2064) || (_2059 > _2066))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2206 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2061, cbModelParam._m0[9u].z, fma(_2060, cbModelParam._m0[9u].y, _2059 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2061, cbModelParam._m0[10u].z, fma(_2060, cbModelParam._m0[10u].y, _2059 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2061, cbModelParam._m0[11u].z, fma(_2060, cbModelParam._m0[11u].y, _2059 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_16_38_ladder = _2206.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2206.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2206.x * cbModelParam._m0[1u].y;
        }
        _1571 = frontier_phi_16_38_ladder_2;
        _1573 = frontier_phi_16_38_ladder_1;
        _1575 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_650, _651, _652), _1491);
        _1571 = _1559.x * cbModelParam._m0[1u].y;
        _1573 = _1559.y * cbModelParam._m0[1u].y;
        _1575 = _1559.z * cbModelParam._m0[1u].y;
    }
    float _1579 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _482);
    float _1580 = isnan(_1579) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1579 : min(cbModelParam._m0[25u].w, _1579));
    float _1673;
    float _1675;
    float _1677;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1637 = fma(_711, cbModelParam._m0[21u].z, fma(_707, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _703)) + cbModelParam._m0[21u].w;
        float _1641 = fma(_711, cbModelParam._m0[22u].z, fma(_707, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _703)) + cbModelParam._m0[22u].w;
        float _1645 = fma(_711, cbModelParam._m0[23u].z, fma(_707, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _703)) + cbModelParam._m0[23u].w;
        float _1648 = fma(_652, cbModelParam._m0[21u].z, fma(_651, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _650));
        float _1651 = fma(_652, cbModelParam._m0[22u].z, fma(_651, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _650));
        float _1654 = fma(_652, cbModelParam._m0[23u].z, fma(_651, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _650));
        float _1761;
        if (_1648 > 0.0)
        {
            _1761 = abs((1.0 - _1637) / _1648);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1637 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1761 = frontier_phi_28_24_ladder;
        }
        float _2079;
        if (_1651 > 0.0)
        {
            _2079 = abs((1.0 - _1641) / _1651);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1641 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2079 = frontier_phi_40_35_ladder;
        }
        float _2406;
        if (_1654 > 0.0)
        {
            _2406 = abs((1.0 - _1645) / _1654);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1645 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2406 = frontier_phi_50_47_ladder;
        }
        float _2408 = isnan(_2079) ? _1761 : (isnan(_1761) ? _2079 : min(_1761, _2079));
        float _2409 = isnan(_2406) ? _2408 : (isnan(_2408) ? _2406 : min(_2408, _2406));
        float _2413 = (_2409 * _1648) + _1637;
        float _2414 = (_2409 * _1651) + _1641;
        float _2415 = (_2409 * _1654) + _1645;
        float _2416 = _2409 * 9.9999997473787516355514526367188e-05;
        float _2417 = (-1.0) - _2416;
        float _2419 = _2416 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2415 > _2419) || ((_2415 < _2417) || ((_2414 > _2419) || ((_2414 < _2417) || ((_2413 < _2417) || (_2413 > _2419))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2415, cbModelParam._m0[17u].z, fma(_2414, cbModelParam._m0[17u].y, _2413 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2415, cbModelParam._m0[18u].z, fma(_2414, cbModelParam._m0[18u].y, _2413 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2415, cbModelParam._m0[19u].z, fma(_2414, cbModelParam._m0[19u].y, _2413 * cbModelParam._m0[19u].x))), _1580);
            frontier_phi_25_50_ladder = _2533.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2533.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2533.x * cbModelParam._m0[1u].z;
        }
        _1673 = frontier_phi_25_50_ladder_2;
        _1675 = frontier_phi_25_50_ladder_1;
        _1677 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_650, _651, _652), _1580);
        _1673 = _1657.x * cbModelParam._m0[1u].z;
        _1675 = _1657.y * cbModelParam._m0[1u].z;
        _1677 = _1657.z * cbModelParam._m0[1u].z;
    }
    float _1689 = ((((1.0 - _671) * ((_658 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_671 * _658)) * _642;
    float _1690 = _1689 * ((cbModelParam._m0[1u].w * (_1673 - _1571)) + _1571);
    float _1691 = _1689 * ((cbModelParam._m0[1u].w * (_1675 - _1573)) + _1573);
    float _1692 = _1689 * ((cbModelParam._m0[1u].w * (_1677 - _1575)) + _1575);
    float _1695 = fma(_1692, cbSceneParam._m0[89u].z, fma(_1691, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1698 = fma(_1692, cbSceneParam._m0[90u].z, fma(_1691, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1701 = fma(_1692, cbSceneParam._m0[91u].z, fma(_1691, cbSceneParam._m0[91u].y, _1690 * cbSceneParam._m0[91u].x));
    float _1735 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1739 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1743 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1747 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1748 = _1735 / _1747;
    float _1749 = _1739 / _1747;
    float _1750 = _1743 / _1747;
    float _1897;
    float _1898;
    float _1899;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1777 = ((uint(_1750 > cbSceneParam._m0[59u].y) + uint(_1750 > cbSceneParam._m0[59u].x)) + uint(_1750 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1778 = _1777 + 43u;
        uint _1786 = _1777 + 44u;
        uint _1794 = _1777 + 45u;
        uint _1802 = _1777 + 46u;
        float _1813 = fma(_1747, cbSceneParam._m0[_1778].w, fma(_1743, cbSceneParam._m0[_1778].z, fma(_1739, cbSceneParam._m0[_1778].y, _1735 * cbSceneParam._m0[_1778].x)));
        float _1817 = fma(_1747, cbSceneParam._m0[_1786].w, fma(_1743, cbSceneParam._m0[_1786].z, fma(_1739, cbSceneParam._m0[_1786].y, _1735 * cbSceneParam._m0[_1786].x)));
        float _1825 = fma(_1747, cbSceneParam._m0[_1802].w, fma(_1743, cbSceneParam._m0[_1802].z, fma(_1739, cbSceneParam._m0[_1802].y, _1735 * cbSceneParam._m0[_1802].x)));
        float _1830 = cbSceneParam._m0[33u].z * _1825;
        float _1832 = cbSceneParam._m0[33u].w * _1825;
        float _1835 = fma(_1747, cbSceneParam._m0[_1794].w, fma(_1743, cbSceneParam._m0[_1794].z, fma(_1739, cbSceneParam._m0[_1794].y, _1735 * cbSceneParam._m0[_1794].x))) / _1825;
        float _1883 = (cbSceneParam._m0[33u].x - sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750))) * cbSceneParam._m0[33u].y;
        float _4205 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1890 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1830 + _1813) / _1825, (_1832 + _1817) / _1825), _1835), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1832 + _1813) / _1825, (_1817 - _1830) / _1825), _1835), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1813 - _1830) / _1825, (_1817 - _1832) / _1825), _1835), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1813 - _1832) / _1825, (_1830 + _1817) / _1825), _1835), 0.0)).x), vec4(0.25)));
        _1897 = 1.0 - (_1890 * cbSceneParam._m0[34u].x);
        _1898 = 1.0 - (_1890 * cbSceneParam._m0[34u].y);
        _1899 = 1.0 - (_1890 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1897 = 1.0;
        _1898 = 1.0;
        _1899 = 1.0;
    }
    float _1963;
    float _1965;
    float _1967;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1951 = fma(_1747, cbSceneParam._m0[63u].w, fma(_1743, cbSceneParam._m0[63u].z, fma(_1739, cbSceneParam._m0[63u].y, _1735 * cbSceneParam._m0[63u].x)));
        float _1952 = fma(_1747, cbSceneParam._m0[60u].w, fma(_1743, cbSceneParam._m0[60u].z, fma(_1739, cbSceneParam._m0[60u].y, _1735 * cbSceneParam._m0[60u].x))) / _1951;
        float _1953 = fma(_1747, cbSceneParam._m0[61u].w, fma(_1743, cbSceneParam._m0[61u].z, fma(_1739, cbSceneParam._m0[61u].y, _1735 * cbSceneParam._m0[61u].x))) / _1951;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1952 >= cbSceneParam._m0[64u].x) && (_1953 >= cbSceneParam._m0[64u].y)) && (_1952 <= cbSceneParam._m0[64u].z)) && (_1953 <= cbSceneParam._m0[64u].w))
        {
            float _2092 = fma(_1747, cbSceneParam._m0[62u].w, fma(_1743, cbSceneParam._m0[62u].z, fma(_1739, cbSceneParam._m0[62u].y, _1735 * cbSceneParam._m0[62u].x))) / _1951;
            float _2096 = isnan(cbSceneParam._m0[41u].w) ? _2092 : (isnan(_2092) ? cbSceneParam._m0[41u].w : max(_2092, cbSceneParam._m0[41u].w));
            float _2139 = (cbSceneParam._m0[33u].x - sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750))) * cbSceneParam._m0[33u].y;
            float _4221 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
            float _2146 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1952, cbSceneParam._m0[33u].w + _1953), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1952, _1953 - cbSceneParam._m0[33u].z), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1952 - cbSceneParam._m0[33u].z, _1953 - cbSceneParam._m0[33u].w), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1952 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1953), _2096), 0.0)).x), vec4(0.25)));
            float _2150 = 1.0 - (_2146 * cbSceneParam._m0[34u].x);
            float _2151 = 1.0 - (_2146 * cbSceneParam._m0[34u].y);
            float _2152 = 1.0 - (_2146 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2152) ? _1899 : (isnan(_1899) ? _2152 : min(_1899, _2152));
            frontier_phi_37_36_ladder_1 = isnan(_2151) ? _1898 : (isnan(_1898) ? _2151 : min(_1898, _2151));
            frontier_phi_37_36_ladder_2 = isnan(_2150) ? _1897 : (isnan(_1897) ? _2150 : min(_1897, _2150));
        }
        else
        {
            frontier_phi_37_36_ladder = _1899;
            frontier_phi_37_36_ladder_1 = _1898;
            frontier_phi_37_36_ladder_2 = _1897;
        }
        _1963 = frontier_phi_37_36_ladder_2;
        _1965 = frontier_phi_37_36_ladder_1;
        _1967 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1963 = _1897;
        _1965 = _1898;
        _1967 = _1899;
    }
    uvec4 _1972 = floatBitsToUint(cbInstanceData._m0[_617 + 5u]);
    uint _1974 = _1972.x * 14u;
    uint _1975 = _1974 + 13u;
    float _1982 = _642 + (-1.0);
    float _1987 = (cbLight._m0[_1975].x * _1982) + 1.0;
    float _1988 = (cbLight._m0[_1975].y * _1982) + 1.0;
    float _1989 = (cbLight._m0[_1975].z * _1982) + 1.0;
    float _1990 = (cbLight._m0[_1975].w * _1982) + 1.0;
    uint _1991 = _1974 + 5u;
    float _1997 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
    uint _2001 = _1974 + 4u;
    float _2011 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
    uint _2015 = _1974 | 1u;
    float _2026 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_479, _480, _481));
    float _2029 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_479, _480, _481));
    float _4257 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _4268 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2034 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.3183098733425140380859375;
    float _2036 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.3183098733425140380859375;
    float _2043 = ((cbLight._m0[_1991].x * _1997) * _2036) + (((cbLight._m0[_2001].x * _1963) * _2011) * _2034);
    float _2044 = ((_1997 * cbLight._m0[_1991].y) * _2036) + (((cbLight._m0[_2001].y * _1965) * _2011) * _2034);
    float _2045 = ((_1997 * cbLight._m0[_1991].z) * _2036) + (((cbLight._m0[_2001].z * _1967) * _2011) * _2034);
    uvec4 _2049 = floatBitsToUint(cbLight._m0[_1974 + 12u]);
    bool _2051 = _2049.x == 0u;
    float _2153;
    float _2155;
    float _2157;
    if (_2051)
    {
        _2153 = _2043;
        _2155 = _2044;
        _2157 = _2045;
    }
    else
    {
        uint _2161 = _1974 + 6u;
        float _2177 = (dot(vec3(cbLight._m0[_1974 + 2u].xyz), vec3(_479, _480, _481)) * 0.5) + 0.5;
        float _2178 = _2177 * _2177;
        float _4279 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2179 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2180 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2153 = (((cbLight._m0[_2161].x * 0.3183098733425140380859375) * _2179) * _2180) + _2043;
        _2155 = (((cbLight._m0[_2161].y * 0.3183098733425140380859375) * _2179) * _2180) + _2044;
        _2157 = (((cbLight._m0[_2161].z * 0.3183098733425140380859375) * _2179) * _2180) + _2045;
    }
    bool _2160 = _2049.y == 0u;
    float _2215;
    float _2217;
    float _2219;
    if (_2160)
    {
        _2215 = _2153;
        _2217 = _2155;
        _2219 = _2157;
    }
    else
    {
        uint _2377 = _1974 + 7u;
        float _2393 = (dot(vec3(cbLight._m0[_1974 + 3u].xyz), vec3(_479, _480, _481)) * 0.5) + 0.5;
        float _2394 = _2393 * _2393;
        float _4295 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2395 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2396 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
        _2215 = (((cbLight._m0[_2377].x * 0.3183098733425140380859375) * _2395) * _2396) + _2153;
        _2217 = (((cbLight._m0[_2377].y * 0.3183098733425140380859375) * _2395) * _2396) + _2155;
        _2219 = (((cbLight._m0[_2377].z * 0.3183098733425140380859375) * _2395) * _2396) + _2157;
    }
    uint _2222 = _1974 + 8u;
    float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1974].w)) * _482) * 0.949999988079071044921875);
    float _2236 = _2235 * _2235;
    float _2237 = cbLight._m0[_1974].x + _558;
    float _2238 = cbLight._m0[_1974].y + _559;
    float _2239 = cbLight._m0[_1974].z + _560;
    float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
    float _2244 = _2243 * _2237;
    float _2245 = _2243 * _2238;
    float _2246 = _2243 * _2239;
    float _2247 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_1974].xyz));
    float _4311 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _4322 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _2251 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2252 = dot(vec3(_479, _480, _481), vec3(_2244, _2245, _2246));
    float _4333 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2256 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_2244, _2245, _2246));
    float _4344 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2260 = _2236 * _2236;
    float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
    float _2275 = (exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2276 = 1.0 - _2236;
    float _2287 = (0.5 / (((_2251 * ((_2250 * _2276) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2276) + _2236) * _2250))) * _2250;
    float _4355 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
    uint _2303 = _1974 + 9u;
    float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _482) * 0.949999988079071044921875);
    float _2315 = _2314 * _2314;
    float _2316 = cbLight._m0[_2015].x + _558;
    float _2317 = cbLight._m0[_2015].y + _559;
    float _2318 = cbLight._m0[_2015].z + _560;
    float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
    float _2323 = _2322 * _2316;
    float _2324 = _2322 * _2317;
    float _2325 = _2322 * _2318;
    float _2326 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_2015].xyz));
    float _4366 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2330 = dot(vec3(_479, _480, _481), vec3(_2323, _2324, _2325));
    float _4377 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2323, _2324, _2325));
    float _4388 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2315 * _2315;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2351 = (exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2352 = 1.0 - _2315;
    float _2362 = (0.5 / (((_2251 * ((_2329 * _2352) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2352) + _2315) * _2329))) * _2329;
    float _4399 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    float _2374 = (((_2351 * cbLight._m0[_2303].x) * _2364) * _1997) + ((((cbLight._m0[_2222].x * _1963) * _2275) * _2289) * _2011);
    float _2375 = (((_2351 * cbLight._m0[_2303].y) * _2364) * _1997) + ((((cbLight._m0[_2222].y * _1965) * _2275) * _2289) * _2011);
    float _2376 = (((_2351 * cbLight._m0[_2303].z) * _2364) * _1997) + ((((cbLight._m0[_2222].z * _1967) * _2275) * _2289) * _2011);
    float _2432;
    float _2434;
    float _2436;
    if (_2051)
    {
        _2432 = _2374;
        _2434 = _2375;
        _2436 = _2376;
    }
    else
    {
        uint _2438 = _1974 + 2u;
        uint _2442 = _1974 + 10u;
        float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _482) * 0.949999988079071044921875);
        float _2457 = _2456 * _2456;
        float _2458 = cbLight._m0[_2438].x + _558;
        float _2459 = cbLight._m0[_2438].y + _559;
        float _2460 = cbLight._m0[_2438].z + _560;
        float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
        float _2465 = _2464 * _2458;
        float _2466 = _2464 * _2459;
        float _2467 = _2464 * _2460;
        float _2468 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_2438].xyz));
        float _4410 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2472 = dot(vec3(_479, _480, _481), vec3(_2465, _2466, _2467));
        float _4421 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2476 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2465, _2466, _2467));
        float _4432 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2480 = _2457 * _2457;
        float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
        float _2493 = (exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2494 = 1.0 - _2457;
        float _2504 = (0.5 / (((_2251 * ((_2471 * _2494) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2494) + _2457) * _2471))) * _2471;
        float _4443 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2506 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
        float _2507 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2432 = (((_2493 * cbLight._m0[_2442].x) * _2506) * _2507) + _2374;
        _2434 = (((_2493 * cbLight._m0[_2442].y) * _2506) * _2507) + _2375;
        _2436 = (((_2493 * cbLight._m0[_2442].z) * _2506) * _2507) + _2376;
    }
    float _2538;
    float _2540;
    float _2542;
    if (_2160)
    {
        _2538 = _2432;
        _2540 = _2434;
        _2542 = _2436;
    }
    else
    {
        uint _2549 = _1974 + 3u;
        uint _2553 = _1974 + 11u;
        float _2567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2549].w)) * _482) * 0.949999988079071044921875);
        float _2568 = _2567 * _2567;
        float _2569 = cbLight._m0[_2549].x + _558;
        float _2570 = cbLight._m0[_2549].y + _559;
        float _2571 = cbLight._m0[_2549].z + _560;
        float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
        float _2576 = _2575 * _2569;
        float _2577 = _2575 * _2570;
        float _2578 = _2575 * _2571;
        float _2579 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_2549].xyz));
        float _4459 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2583 = dot(vec3(_479, _480, _481), vec3(_2576, _2577, _2578));
        float _4470 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2587 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_2576, _2577, _2578));
        float _4481 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2591 = _2568 * _2568;
        float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
        float _2604 = (exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2605 = 1.0 - _2568;
        float _2615 = (0.5 / (((_2251 * ((_2582 * _2605) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2605) + _2568) * _2582))) * _2582;
        float _4492 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2617 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
        float _2618 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
        _2538 = (((_2604 * cbLight._m0[_2553].x) * _2617) * _2618) + _2432;
        _2540 = (((_2604 * cbLight._m0[_2553].y) * _2617) * _2618) + _2434;
        _2542 = (((_2604 * cbLight._m0[_2553].z) * _2617) * _2618) + _2436;
    }
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    if (_1972.y == 0u)
    {
        uvec4 _2639 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2640 = _2639.x;
        uint _2651 = uint((float(_2639.y) * floor(float(uint(cbSceneParam._m0[85u].y * _579) / _2640))) + floor(float(uint(cbSceneParam._m0[85u].x * _578) / _2640)));
        float _2661 = (log2(_1750 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2662 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        uint _2665 = uint(isnan(14.0) ? _2662 : (isnan(_2662) ? 14.0 : min(_2662, 14.0)));
        uvec4 _2670 = texelFetch(g_lightClusterGridBuffer, int(((_2665 << 2u) + (_2651 << 6u)) >> 2u));
        uint _2671 = _2670.x;
        uint _2672 = _2639.z;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((((1u << ((_2672 >> 4u) & 15u)) + 4294967295u) & _2671) == 0u) || ((_2672 & 240u) == 0u))
        {
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
        }
        else
        {
            float _2752;
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            uint _2910 = 0u;
            uint _2919;
            bool _2920;
            for (;;)
            {
                _2919 = texelFetch(g_lightClassification, int((((_2665 << 5u) + (_2651 << 9u)) + (_2910 << 2u)) >> 2u)).x;
                _2920 = _2919 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2920)
                {
                    frontier_phi_71_pred = _2909;
                    frontier_phi_71_pred_1 = _2908;
                    frontier_phi_71_pred_2 = _2907;
                    frontier_phi_71_pred_3 = _2906;
                    frontier_phi_71_pred_4 = _2905;
                    frontier_phi_71_pred_5 = _2904;
                }
                else
                {
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    uint _3055;
                    _3049 = _2904;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2919;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    for (;;)
                    {
                        uint _3059 = uint(findLSB(_3055)) + (_2910 << 5u);
                        uint _3056 = (_3055 + 4294967295u) & _3055;
                        uint _3061 = _3059 * 48u;
                        vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 3u)).x));
                        uint _3081 = (_3059 * 48u) + 4u;
                        vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3100 = (_3059 * 48u) + 8u;
                        vec3 _3111 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x));
                        float _3115 = _3075.x - _1748;
                        float _3116 = _3075.y - _1749;
                        float _3117 = _3075.z - _1750;
                        float _3118 = dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117));
                        float _3121 = inversesqrt(_3118);
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3125 = dot(vec3(_598, _601, _604), vec3(_3122, _3123, _3124));
                        float _3130 = 1.0 - (_3118 * _3075.w);
                        float _4518 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3132 = sqrt(_3118) * _3094.w;
                        float _3135 = 1.39999997615814208984375 / (_3132 + 1.39999997615814208984375);
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3125) + _3136;
                        float _3142 = _3132 * _3132;
                        float _3146 = ((isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))) * _3131) / ((_3142 * 0.699999988079071044921875) + 1.0);
                        float _3150 = (-0.0) - _1748;
                        float _3151 = (-0.0) - _1749;
                        float _3152 = (-0.0) - _1750;
                        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                        float _3157 = _3156 * _3150;
                        float _3158 = _3156 * _3151;
                        float _3159 = _3156 * _3152;
                        float _3166 = exp2(log2(1.0 / ((_3142 * 3.5) + 5.0)) * 0.25);
                        float _3167 = 1.0 - _658;
                        float _3174 = sqrt(1.0 - ((1.0 - (_3167 * _3167)) * (1.0 - (_3166 * _3166))));
                        float _3175 = _3174 * _3174;
                        float _3176 = _3175 * _3175;
                        float _3177 = _3157 + _3122;
                        float _3178 = _3158 + _3123;
                        float _3179 = _3159 + _3124;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3187 = dot(vec3(_598, _601, _604), vec3(_3157, _3158, _3159));
                        float _4534 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3190 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3191 = dot(vec3(_598, _601, _604), vec3(_3183 * _3177, _3183 * _3178, _3183 * _3179));
                        float _4545 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3198 = ((_3194 * _3194) * (_3176 + (-1.0))) + 1.0;
                        float _3199 = _3135 * _3175;
                        float _3200 = _3199 * _3199;
                        float _3203 = ((1.0 - _3200) * _3125) + _3200;
                        float _4556 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3205 = 1.0 - _3175;
                        float _3215 = (0.5 / (((_3204 * ((_3190 * _3205) + _3175)) + 9.9999999392252902907785028219223e-09) + (((_3204 * _3205) + _3175) * _3190))) * _3204;
                        float _4567 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3226 = (((_3176 * 3.1415927410125732421875) * (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) / ((_3198 * _3198) * ((_3142 * 2.1991131305694580078125) + 3.141590118408203125))) * _3131;
                        _2979 = (_3146 * _3094.x) + _3052;
                        _2980 = (_3146 * _3094.y) + _3053;
                        _2981 = (_3146 * _3094.z) + _3054;
                        _2976 = (_3226 * _3111.x) + _3049;
                        _2977 = (_3226 * _3111.y) + _3050;
                        _2978 = (_3226 * _3111.z) + _3051;
                        if (_3056 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _3056;
                        }
                    }
                    frontier_phi_71_pred = _2981;
                    frontier_phi_71_pred_1 = _2980;
                    frontier_phi_71_pred_2 = _2979;
                    frontier_phi_71_pred_3 = _2978;
                    frontier_phi_71_pred_4 = _2977;
                    frontier_phi_71_pred_5 = _2976;
                }
                _2762 = frontier_phi_71_pred;
                _2760 = frontier_phi_71_pred_1;
                _2758 = frontier_phi_71_pred_2;
                _2756 = frontier_phi_71_pred_3;
                _2754 = frontier_phi_71_pred_4;
                _2752 = frontier_phi_71_pred_5;
                uint _2911 = _2910 + 1u;
                if (_2911 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2904 = _2752;
                    _2905 = _2754;
                    _2906 = _2756;
                    _2907 = _2758;
                    _2908 = _2760;
                    _2909 = _2762;
                    _2910 = _2911;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
        }
        uvec4 _2765 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2766 = _2765.z;
        uint _2768 = (_2766 >> 8u) & 15u;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        if (((4294967295u << _2768) & _2671) == 0u)
        {
            _2872 = _2751;
            _2874 = _2753;
            _2876 = _2755;
            _2878 = _2757;
            _2880 = _2759;
            _2882 = _2761;
        }
        else
        {
            float _2897 = inversesqrt(dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750)));
            float _2898 = _2897 * _1748;
            float _2899 = _2897 * _1749;
            float _2900 = _2897 * _1750;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2768 < ((_2766 >> 12u) & 15u))
            {
                float _2873;
                float _2875;
                float _2877;
                float _2879;
                float _2881;
                float _2883;
                float _3032 = _2751;
                float _3033 = _2753;
                float _3034 = _2755;
                float _3035 = _2757;
                float _3036 = _2759;
                float _3037 = _2761;
                uint _3038 = _2768;
                uint _3047;
                bool _3048;
                for (;;)
                {
                    _3047 = texelFetch(g_lightClassification, int((((_2665 << 5u) + (_2651 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                    _3048 = _3047 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3048)
                    {
                        frontier_phi_82_pred = _3037;
                        frontier_phi_82_pred_1 = _3036;
                        frontier_phi_82_pred_2 = _3035;
                        frontier_phi_82_pred_3 = _3034;
                        frontier_phi_82_pred_4 = _3033;
                        frontier_phi_82_pred_5 = _3032;
                    }
                    else
                    {
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3253 = _3032;
                        float _3254 = _3033;
                        float _3255 = _3034;
                        float _3256 = _3035;
                        float _3257 = _3036;
                        float _3258 = _3037;
                        uint _3259 = _3047;
                        uint _3260;
                        vec4 _3285;
                        float _3286;
                        vec4 _3301;
                        vec3 _3313;
                        vec4 _3329;
                        vec4 _3345;
                        float _3392;
                        bool _3393;
                        for (;;)
                        {
                            uint _3270 = ((_3038 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3259));
                            _3260 = (_3259 + 4294967295u) & _3259;
                            uint _3272 = _3270 * 40u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3286 = _3285.w;
                            uint _3288 = (_3270 * 40u) + 4u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3270 * 40u) + 8u;
                            _3313 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x));
                            uint _3316 = (_3270 * 40u) + 16u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3332 = (_3270 * 40u) + 20u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3348 = (_3270 * 40u) + 24u;
                            vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3367 = (_3270 * 40u) + 28u;
                            vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            _3392 = fma(_1750, _3380.z, fma(_1749, _3380.y, _3380.x * _1748)) + _3380.w;
                            _3393 = !((fma(_1750, _3361.z, fma(_1749, _3361.y, _3361.x * _1748)) + _3361.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3393)
                            {
                                float _3420 = _3285.x - _1748;
                                float _3421 = _3285.y - _1749;
                                float _3422 = _3285.z - _1750;
                                float _3423 = dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422));
                                float _3426 = inversesqrt(_3423);
                                float _3427 = _3426 * _3420;
                                float _3428 = _3426 * _3421;
                                float _3429 = _3426 * _3422;
                                float _3433 = 1.0 - (_3423 / (_3286 * _3286));
                                float _4578 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3434 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3438 = sqrt(_3423) * _3301.w;
                                float _3440 = 1.39999997615814208984375 / (_3438 + 1.39999997615814208984375);
                                float _3441 = _3440 * _3440;
                                float _3444 = ((1.0 - _3441) * dot(vec3(_3427, _3428, _3429), vec3(_598, _601, _604))) + _3441;
                                float _3447 = _3438 * _3438;
                                float _3451 = (fma(_1750, _3329.z, fma(_1749, _3329.y, _3329.x * _1748)) + _3329.w) / _3392;
                                float _3452 = (fma(_1750, _3345.z, fma(_1749, _3345.y, _3345.x * _1748)) + _3345.w) / _3392;
                                float _3456 = 1.0 - dot(vec2(_3451, _3452), vec2(_3451, _3452));
                                float _4594 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3458 = _3457 * (((isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0))) * _3434) / ((_3447 * 0.699999988079071044921875) + 1.0));
                                float _3470 = exp2(log2(1.0 / ((_3447 * 3.5) + 5.0)) * 0.25);
                                float _3471 = 1.0 - _658;
                                float _3478 = sqrt(1.0 - ((1.0 - (_3471 * _3471)) * (1.0 - (_3470 * _3470))));
                                float _3479 = _3478 * _3478;
                                float _3480 = _3479 * _3479;
                                float _3481 = _3427 - _2898;
                                float _3482 = _3428 - _2899;
                                float _3483 = _3429 - _2900;
                                float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                                float _3491 = dot(vec3(_598, _601, _604), vec3((-0.0) - _2898, (-0.0) - _2899, (-0.0) - _2900));
                                float _4605 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3495 = dot(vec3(_598, _601, _604), vec3(_3487 * _3481, _3487 * _3482, _3487 * _3483));
                                float _4616 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3498 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3502 = ((_3498 * _3498) * (_3480 + (-1.0))) + 1.0;
                                float _3503 = _3440 * _3479;
                                float _3504 = _3503 * _3503;
                                float _3510 = ((1.0 - _3504) * dot(vec3(_598, _601, _604), vec3(_3427, _3428, _3429))) + _3504;
                                float _4627 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3511 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3512 = 1.0 - _3479;
                                float _3522 = (0.5 / (((_3511 * ((_3494 * _3512) + _3479)) + 9.9999999392252902907785028219223e-09) + (((_3511 * _3512) + _3479) * _3494))) * _3511;
                                float _4638 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3532 = (_3457 * _3434) * (((_3480 * 3.1415927410125732421875) * (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) / ((_3502 * _3502) * ((_3447 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3458 * _3301.z;
                                frontier_phi_88_pred_1 = _3458 * _3301.y;
                                frontier_phi_88_pred_2 = _3458 * _3301.x;
                                frontier_phi_88_pred_3 = _3532 * _3313.z;
                                frontier_phi_88_pred_4 = _3532 * _3313.y;
                                frontier_phi_88_pred_5 = _3532 * _3313.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3541 = frontier_phi_88_pred;
                            _3540 = frontier_phi_88_pred_1;
                            _3539 = frontier_phi_88_pred_2;
                            _3538 = frontier_phi_88_pred_3;
                            _3537 = frontier_phi_88_pred_4;
                            _3536 = frontier_phi_88_pred_5;
                            _3243 = _3539 + _3256;
                            _3244 = _3540 + _3257;
                            _3245 = _3541 + _3258;
                            _3240 = _3536 + _3253;
                            _3241 = _3537 + _3254;
                            _3242 = _3538 + _3255;
                            if (_3260 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3260;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3245;
                        frontier_phi_82_pred_1 = _3244;
                        frontier_phi_82_pred_2 = _3243;
                        frontier_phi_82_pred_3 = _3242;
                        frontier_phi_82_pred_4 = _3241;
                        frontier_phi_82_pred_5 = _3240;
                    }
                    _2883 = frontier_phi_82_pred;
                    _2881 = frontier_phi_82_pred_1;
                    _2879 = frontier_phi_82_pred_2;
                    _2877 = frontier_phi_82_pred_3;
                    _2875 = frontier_phi_82_pred_4;
                    _2873 = frontier_phi_82_pred_5;
                    uint _3039 = _3038 + 1u;
                    if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3032 = _2873;
                        _3033 = _2875;
                        _3034 = _2877;
                        _3035 = _2879;
                        _3036 = _2881;
                        _3037 = _2883;
                        _3038 = _3039;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2879;
                frontier_phi_63_64_ladder_1 = _2883;
                frontier_phi_63_64_ladder_2 = _2881;
                frontier_phi_63_64_ladder_3 = _2877;
                frontier_phi_63_64_ladder_4 = _2875;
                frontier_phi_63_64_ladder_5 = _2873;
            }
            else
            {
                frontier_phi_63_64_ladder = _2757;
                frontier_phi_63_64_ladder_1 = _2761;
                frontier_phi_63_64_ladder_2 = _2759;
                frontier_phi_63_64_ladder_3 = _2755;
                frontier_phi_63_64_ladder_4 = _2753;
                frontier_phi_63_64_ladder_5 = _2751;
            }
            _2872 = frontier_phi_63_64_ladder_5;
            _2874 = frontier_phi_63_64_ladder_4;
            _2876 = frontier_phi_63_64_ladder_3;
            _2878 = frontier_phi_63_64_ladder;
            _2880 = frontier_phi_63_64_ladder_2;
            _2882 = frontier_phi_63_64_ladder_1;
        }
        float _2887 = isnan(1.0) ? _642 : (isnan(_642) ? 1.0 : min(_642, 1.0));
        _2684 = (_2887 * _2878) + _2215;
        _2686 = (_2887 * _2880) + _2217;
        _2688 = (_2887 * _2882) + _2219;
        _2690 = ((_2872 * 0.039999999105930328369140625) * _2887) + _2538;
        _2692 = ((_2874 * 0.039999999105930328369140625) * _2887) + _2540;
        _2694 = ((_2876 * 0.039999999105930328369140625) * _2887) + _2542;
    }
    else
    {
        _2684 = _2215;
        _2686 = _2217;
        _2688 = _2219;
        _2690 = _2538;
        _2692 = _2540;
        _2694 = _2542;
    }
    float _4654 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _4665 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _4676 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _2711 = ((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2684 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _642))) + ((_2690 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1480)) * cbPerFrame._m0[3u].x);
    float _2712 = ((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2686 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _642))) + ((_2692 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1480)) * cbPerFrame._m0[3u].x);
    float _2713 = ((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2688 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _642))) + ((_2694 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1480)) * cbPerFrame._m0[3u].x);
    uint _2714 = _617 + 6u;
    float _2722 = _578 / cbSceneParam._m0[86u].x;
    float _2723 = _579 / cbSceneParam._m0[86u].y;
    vec4 _2737 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2722, _2723, (log2((isnan(cbSceneParam._m0[77u].w) ? _501 : (isnan(_501) ? cbSceneParam._m0[77u].w : min(_501, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2739 = _2737.x;
    float _2740 = _2737.y;
    float _2741 = _2737.z;
    float _2742 = _2737.w;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    if (_501 > cbSceneParam._m0[78u].w)
    {
        float _2776 = isnan(_501) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _501 : min(cbSceneParam._m0[80u].w, _501));
        float _2777 = _2776 / _501;
        float _2788 = _2777 * _551;
        float _2789 = _552 * _2777;
        float _2790 = (-0.0) - _2789;
        float _2792 = _2777 * _553;
        float _2794 = (cbSceneParam._m0[77u].w * _2790) / _2776;
        float _2795 = _2794 + cbSceneParam._m0[79u].w;
        float _2796 = cbSceneParam._m0[79u].w - _2789;
        float _2802 = sqrt(((_2788 * _2788) + (_2789 * _2789)) + (_2792 * _2792));
        float _2805 = (1.0 - (cbSceneParam._m0[77u].w / _2776)) * _2802;
        float _2810 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2812 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2989;
        if (abs((_2790 - _2794) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2989 = ((((_2795 > 0.0) ? exp2(_2810 * _2795) : (2.0 - exp2(_2812 * _2795))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2805;
        }
        else
        {
            float _2933 = 1.0 / cbSceneParam._m0[80u].x;
            float _2934 = isnan(_2796) ? _2795 : (isnan(_2795) ? _2796 : max(_2795, _2796));
            float _2935 = isnan(_2796) ? _2795 : (isnan(_2795) ? _2796 : min(_2795, _2796));
            float _2944 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : min(_2934, 0.0));
            float _2945 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : min(_2935, 0.0));
            _2989 = ((abs(_2802 / _2790) * cbSceneParam._m0[80u].y) * ((((_2944 - _2945) * 2.0) - ((exp2(_2810 * (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0)))) - exp2(_2810 * (isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0))))) * _2933)) - ((exp2(_2812 * _2944) - exp2(_2812 * _2945)) * _2933))) + (_2805 * cbSceneParam._m0[80u].z);
        }
        vec4 _2991 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2722, _2723, 1.0), 0.0);
        float _3000 = exp2((_2989 * (-1.44269502162933349609375)) * (1.0 - _2991.w));
        float _3001 = log2(_3000);
        float _3017 = log2(_2742);
        _2814 = (exp2(_3017 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].x)) * _2991.x) / cbSceneParam._m0[78u].x)) + _2739;
        _2816 = (exp2(_3017 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].y)) * _2991.y) / cbSceneParam._m0[78u].y)) + _2740;
        _2818 = (exp2(_3017 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].z)) * _2991.z) / cbSceneParam._m0[78u].z)) + _2741;
        _2820 = _3000 * _2742;
    }
    else
    {
        _2814 = _2739;
        _2816 = _2740;
        _2818 = _2741;
        _2820 = _2742;
    }
    bool _3027;
    vec4 _2830;
    vec4 _2852;
    float _2854;
    float _2858;
    float _2859;
    float _2860;
    float _2861;
    bool _2871;
    for (;;)
    {
        _2830 = cbMatDynParam._m0[0u];
        float _2832 = roundEven(_2830.y);
        bool _2833 = _2832 == 3.0;
        float _2834 = log2(_2820);
        float _2841 = exp2(_2834 * cbSceneParam._m0[78u].x) * _2711;
        float _2842 = exp2(_2834 * cbSceneParam._m0[78u].y) * _2712;
        float _2843 = exp2(_2834 * cbSceneParam._m0[78u].z) * _2713;
        float _2850 = _567 + (-0.5);
        _2852 = cbMtdParam._m0[1u];
        _2854 = _2852.y * _2850;
        float _2857 = (_2832 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2858 = _2857 * (_2833 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2814)));
        _2859 = _2857 * (_2833 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2816)));
        _2860 = _2857 * (_2833 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2818)));
        _2861 = _2850 * 0.999000012874603271484375;
        _2871 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2871)
        {
            if ((cbInstanceData._m0[_617 + 7u].x + _2861) < 0.5)
            {
                _3027 = true;
                break;
            }
        }
        uint _2968 = _618 + uint(_2830.w);
        if ((cbInstanceData._m0[_2968].w < 1.0) && ((cbInstanceData._m0[_2968].w + _2861) < 0.5))
        {
            _3027 = true;
            break;
        }
        if ((_2854 + 1.0) < _2852.x)
        {
            _3027 = true;
            break;
        }
        _3027 = false;
        break;
    }
    float _3231;
    if (_3027)
    {
        discard_state = true;
        _3231 = 0.0;
    }
    else
    {
        _3231 = cbInstanceData._m0[_2714].w;
    }
    SV_Target.x = _2858;
    SV_Target.y = _2859;
    SV_Target.z = _2860;
    SV_Target.w = _3231;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2714].w;
    discard_exit();
}


