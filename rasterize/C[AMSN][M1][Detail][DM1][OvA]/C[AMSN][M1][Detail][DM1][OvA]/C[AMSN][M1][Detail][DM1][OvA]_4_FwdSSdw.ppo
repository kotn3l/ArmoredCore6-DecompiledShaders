#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1055;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _253 = _247.x * cbMtdParam._m0[10u].x;
    float _254 = _247.y * cbMtdParam._m0[10u].y;
    float _255 = _247.z * cbMtdParam._m0[10u].z;
    float _260 = 1.0 - cbMtdParam._m0[13u].z;
    float _3412 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _262 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    vec4 _280 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _288 = ((_253 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _280.x;
    float _291 = ((_254 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _280.y;
    float _294 = ((_255 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _280.z;
    float _301 = ((_253 - _288) * _262) + _288;
    float _302 = ((_254 - _291) * _262) + _291;
    float _303 = ((_255 - _294) * _262) + _294;
    vec4 _321 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _351 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3423 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _359 = (_352 * ((_321.x * cbMtdParam._m0[11u].x) - _301)) + _301;
    float _360 = (_352 * ((_321.y * cbMtdParam._m0[11u].y) - _302)) + _302;
    float _361 = (_352 * ((_321.z * cbMtdParam._m0[11u].z) - _303)) + _303;
    vec4 _374 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _376 = _374.x;
    vec4 _389 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _396 = 1.0 - cbMtdParam._m0[14u].z;
    float _3434 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _401 = (((_389.x - _376) * TEXCOORD_5.x) * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) + _376;
    vec4 _415 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _419 = _415.z;
    vec4 _432 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _443 = cbMtdParam._m0[13u].w * _419;
    float _446 = (((((_419 * 2.0) * _432.z) * cbMtdParam._m0[14u].x) - _443) * cbMtdParam._m0[13u].y) + _443;
    vec4 _459 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _474 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_459.z * cbMtdParam._m0[14u].y) - _446)) + _446;
    float _481 = (_415.x * 2.0) + (-1.0);
    float _482 = (_415.y * 2.0) + (-1.0);
    float _483 = dot(vec2(_481, _482), vec2(_481, _482));
    float _3445 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))));
    float _499 = ((cbMtdParam._m0[13u].x * ((_432.x * 2.0) + (-1.0))) + _481) + ((((_459.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _500 = ((cbMtdParam._m0[13u].x * ((_432.y * 2.0) + (-1.0))) + _482) + ((((_459.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _503 = fma(_488, _212 * NORMAL.x, fma(_500, _219 * TANGENT.x, (_205 * _197) * _499));
    float _506 = fma(_488, _212 * NORMAL.y, fma(_500, _219 * TANGENT.y, (_205 * _198) * _499));
    float _509 = fma(_488, _212 * NORMAL.z, fma(_500, _219 * TANGENT.z, (_205 * _199) * _499));
    float _513 = inversesqrt(dot(vec3(_503, _506, _509), vec3(_503, _506, _509)));
    float _514 = _513 * _503;
    float _515 = _513 * _506;
    float _516 = _513 * _509;
    float _3456 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _517 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _3467 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _3478 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _3489 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3500 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _521 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _537 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _587 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _577);
    float _588 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _577);
    float _589 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _577);
    float _593 = inversesqrt(dot(vec3(_587, _588, _589), vec3(_587, _588, _589)));
    float _594 = _587 * _593;
    float _595 = _588 * _593;
    float _596 = _589 * _593;
    float _602 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _603 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _621 = fma(_516, cbSceneParam._m0[5u].z, fma(_515, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _514));
    float _624 = fma(_516, cbSceneParam._m0[6u].z, fma(_515, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _514));
    float _627 = fma(_516, cbSceneParam._m0[7u].z, fma(_515, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _514));
    uint _640 = uint(roundEven(NORMAL.w)) * 13u;
    uint _642 = (_640 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _648 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * cbInstanceData._m0[_642].x;
    float _649 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_642].y;
    float _650 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_642].z;
    float _3511 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _3522 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _654 = 1.0 - _521;
    float _655 = _651 * _654;
    float _656 = _652 * _654;
    float _657 = _653 * _654;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _521;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _521;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _521;
    float _665 = _662 + 0.039999999105930328369140625;
    float _667 = _663 + 0.039999999105930328369140625;
    float _668 = _664 + 0.039999999105930328369140625;
    vec4 _677 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _602, cbSceneParam._m0[86u].y * _603));
    float _680 = _677.x * TEXCOORD_5.w;
    float _681 = dot(vec3(_514, _515, _516), vec3(_594, _595, _596));
    float _684 = _681 * 2.0;
    float _688 = (_684 * _514) - _594;
    float _689 = (_684 * _515) - _595;
    float _690 = (_684 * _516) - _596;
    float _694 = abs(dot(vec3(_594, _595, _596), vec3(_514, _515, _516)));
    float _3544 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _696 = sqrt(_517);
    float _709 = exp2((_696 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_696 * 3.0));
    float _715 = (1.0 - _709) * ((_696 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _716 = _709 * _696;
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1054;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _779 = fma(_752, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744));
        float _783 = fma(_752, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744));
        float _787 = fma(_752, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744));
        float _812 = _744 + _514;
        float _813 = _748 + _515;
        float _814 = _752 + _516;
        float _824 = fma(_814, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _812)) - _779;
        float _825 = fma(_814, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _812)) - _783;
        float _826 = fma(_814, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _812)) - _787;
        float _830 = inversesqrt(dot(vec3(_824, _825, _826), vec3(_824, _825, _826)));
        float _843 = ((_830 * _824) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_779 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_830 * _825) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_783 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_830 * _826) / cbModelParam._m0[34u].z) + ((((((_787 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        float _882 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_848.x + (-0.5));
        float _884 = _882 * (_848.y + (-0.5));
        float _885 = _882 * (_848.z + (-0.5));
        float _892 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_855.x + (-0.5));
        float _894 = _892 * (_855.y + (-0.5));
        float _895 = _892 * (_855.z + (-0.5));
        float _902 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_862.x + (-0.5));
        float _904 = _902 * (_862.y + (-0.5));
        float _905 = _902 * (_862.z + (-0.5));
        float _912 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_869.x + (-0.5));
        float _914 = _912 * (_869.y + (-0.5));
        float _915 = _912 * (_869.z + (-0.5));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = _883 * 0.5;
        float _920 = _893 * 0.5;
        float _921 = _903 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _936 = (dot(vec3(_514, _515, _516), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _946 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _3592 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_948 + 1.0))) + _953) * _916;
        float _963 = _884 * 0.5;
        float _964 = _894 * 0.5;
        float _965 = _904 * 0.5;
        float _966 = dot(vec3(_963, _964, _965), vec3(_963, _964, _965));
        float _971 = (_966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_966);
        float _979 = (dot(vec3(_514, _515, _516), vec3(_971 * _963, _971 * _964, _971 * _965)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _988 = sqrt(((_964 * _964) + (_963 * _963)) + (_965 * _965)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3625 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_990 + 1.0))) + _995) * _917;
        float _1005 = _885 * 0.5;
        float _1006 = _895 * 0.5;
        float _1007 = _905 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_514, _515, _516), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3658 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1032 + 1.0))) + _1037) * _918;
        _1054 = _885;
        _1056 = _884;
        _1057 = _883;
        _1058 = _895;
        _1059 = _894;
        _1060 = _893;
        _1061 = _905;
        _1062 = _904;
        _1063 = _903;
        _1064 = _918;
        _1065 = _917;
        _1066 = _916;
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
    }
    else
    {
        _1054 = _1055;
        _1056 = _1055;
        _1057 = _1055;
        _1058 = _1055;
        _1059 = _1055;
        _1060 = _1055;
        _1061 = _1055;
        _1062 = _1055;
        _1063 = _1055;
        _1064 = _1055;
        _1065 = _1055;
        _1066 = _1055;
        _1067 = 0.0;
        _1068 = 0.0;
        _1069 = 0.0;
    }
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1095 = fma(_752, cbModelParam._m0[30u].z, fma(_748, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _744));
        float _1099 = fma(_752, cbModelParam._m0[31u].z, fma(_748, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _744));
        float _1103 = fma(_752, cbModelParam._m0[32u].z, fma(_748, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _744));
        float _1126 = _744 + _514;
        float _1127 = _748 + _515;
        float _1128 = _752 + _516;
        float _1138 = fma(_1128, cbModelParam._m0[30u].z, fma(_1127, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1126)) - _1095;
        float _1139 = fma(_1128, cbModelParam._m0[31u].z, fma(_1127, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1126)) - _1099;
        float _1140 = fma(_1128, cbModelParam._m0[32u].z, fma(_1127, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1126)) - _1103;
        float _1144 = inversesqrt(dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140)));
        float _1157 = ((_1144 * _1138) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1095 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1144 * _1139) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1099 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1144 * _1140) / cbModelParam._m0[35u].z) + ((((((_1103 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        float _1194 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1161.x + (-0.5));
        float _1196 = _1194 * (_1161.y + (-0.5));
        float _1197 = _1194 * (_1161.z + (-0.5));
        float _1204 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1168.x + (-0.5));
        float _1206 = _1204 * (_1168.y + (-0.5));
        float _1207 = _1204 * (_1168.z + (-0.5));
        float _1214 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1175.x + (-0.5));
        float _1216 = _1214 * (_1175.y + (-0.5));
        float _1217 = _1214 * (_1175.z + (-0.5));
        float _1224 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1182.x + (-0.5));
        float _1226 = _1224 * (_1182.y + (-0.5));
        float _1227 = _1224 * (_1182.z + (-0.5));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1195 * 0.5;
        float _1232 = _1205 * 0.5;
        float _1233 = _1215 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_514, _515, _516), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3721 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1258 + 1.0))) + _1263) * _1228;
        float _1273 = _1196 * 0.5;
        float _1274 = _1206 * 0.5;
        float _1275 = _1216 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_514, _515, _516), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3754 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1300 + 1.0))) + _1305) * _1229;
        float _1315 = _1197 * 0.5;
        float _1316 = _1207 * 0.5;
        float _1317 = _1217 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_514, _515, _516), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3787 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1342 + 1.0))) + _1347) * _1230;
        _1364 = _1197;
        _1365 = _1196;
        _1366 = _1195;
        _1367 = _1207;
        _1368 = _1206;
        _1369 = _1205;
        _1370 = _1217;
        _1371 = _1216;
        _1372 = _1215;
        _1373 = _1230;
        _1374 = _1229;
        _1375 = _1228;
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
    }
    else
    {
        _1364 = _1055;
        _1365 = _1055;
        _1366 = _1055;
        _1367 = _1055;
        _1368 = _1055;
        _1369 = _1055;
        _1370 = _1055;
        _1371 = _1055;
        _1372 = _1055;
        _1373 = _1055;
        _1374 = _1055;
        _1375 = _1055;
        _1376 = 0.0;
        _1377 = 0.0;
        _1378 = 0.0;
    }
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1067)) + _1067;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1068)) + _1068;
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1069)) + _1069;
    float _1411 = fma(_1390, cbSceneParam._m0[89u].z, fma(_1389, cbSceneParam._m0[89u].y, _1388 * cbSceneParam._m0[89u].x));
    float _1414 = fma(_1390, cbSceneParam._m0[90u].z, fma(_1389, cbSceneParam._m0[90u].y, _1388 * cbSceneParam._m0[90u].x));
    float _1417 = fma(_1390, cbSceneParam._m0[91u].z, fma(_1389, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1388));
    float _1432 = _688 * 0.5;
    float _1433 = _689 * 0.5;
    float _1434 = _690 * 0.5;
    float _1435 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1438 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1441 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1475;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1448 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1054, _1058, _1061, _1064));
        float _1452 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1456 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1463 = dot(vec4(cbModelParam._m0[39u]), vec4(_1432, _1433, _1434, 1.0));
        _1475 = dot(vec3(isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1463) ? 0.0 : (isnan(0.0) ? _1463 : max(0.0, _1463))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1475 = 1.0;
    }
    float _1486;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1477 = dot(vec4(cbModelParam._m0[40u]), vec4(_1432, _1433, _1434, 1.0));
        _1486 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1477) ? 0.0 : (isnan(0.0) ? _1477 : max(0.0, _1477))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1486 = 1.0;
    }
    float _1490 = (_1486 * cbModelParam._m0[1u].x) + (_1475 * (1.0 - cbModelParam._m0[1u].x));
    float _1500 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _517);
    float _1501 = isnan(_1500) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1500 : min(cbModelParam._m0[25u].z, _1500));
    float _1581;
    float _1583;
    float _1585;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1548 = fma(_752, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744)) + cbModelParam._m0[13u].w;
        float _1552 = fma(_752, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744)) + cbModelParam._m0[14u].w;
        float _1556 = fma(_752, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744)) + cbModelParam._m0[15u].w;
        float _1559 = fma(_690, cbModelParam._m0[13u].z, fma(_689, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688));
        float _1562 = fma(_690, cbModelParam._m0[14u].z, fma(_689, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688));
        float _1565 = fma(_690, cbModelParam._m0[15u].z, fma(_689, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688));
        float _1593;
        if (_1559 > 0.0)
        {
            _1593 = abs((1.0 - _1548) / _1559);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1548 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1593 = frontier_phi_14_12_ladder;
        }
        float _1820;
        if (_1562 > 0.0)
        {
            _1820 = abs((1.0 - _1552) / _1562);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1552 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1820 = frontier_phi_23_19_ladder;
        }
        float _2077;
        if (_1565 > 0.0)
        {
            _2077 = abs((1.0 - _1556) / _1565);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1556 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2077 = frontier_phi_35_30_ladder;
        }
        float _2079 = isnan(_1820) ? _1593 : (isnan(_1593) ? _1820 : min(_1593, _1820));
        float _2080 = isnan(_2077) ? _2079 : (isnan(_2079) ? _2077 : min(_2079, _2077));
        float _2084 = (_2080 * _1559) + _1548;
        float _2085 = (_2080 * _1562) + _1552;
        float _2086 = (_2080 * _1565) + _1556;
        float _2087 = _2080 * 9.9999997473787516355514526367188e-05;
        float _2089 = (-1.0) - _2087;
        float _2091 = _2087 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2086 > _2091) || ((_2086 < _2089) || ((_2085 > _2091) || ((_2085 < _2089) || ((_2084 < _2089) || (_2084 > _2091))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2214 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2086, cbModelParam._m0[9u].z, fma(_2085, cbModelParam._m0[9u].y, _2084 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2086, cbModelParam._m0[10u].z, fma(_2085, cbModelParam._m0[10u].y, _2084 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2086, cbModelParam._m0[11u].z, fma(_2085, cbModelParam._m0[11u].y, _2084 * cbModelParam._m0[11u].x))), _1501);
            frontier_phi_13_35_ladder = _2214.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2214.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2214.x * cbModelParam._m0[1u].y;
        }
        _1581 = frontier_phi_13_35_ladder_2;
        _1583 = frontier_phi_13_35_ladder_1;
        _1585 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1569 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_688, _689, _690), _1501);
        _1581 = _1569.x * cbModelParam._m0[1u].y;
        _1583 = _1569.y * cbModelParam._m0[1u].y;
        _1585 = _1569.z * cbModelParam._m0[1u].y;
    }
    float _1589 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _517);
    float _1590 = isnan(_1589) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1589 : min(cbModelParam._m0[25u].w, _1589));
    float _1683;
    float _1685;
    float _1687;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1647 = fma(_752, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744)) + cbModelParam._m0[21u].w;
        float _1651 = fma(_752, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744)) + cbModelParam._m0[22u].w;
        float _1655 = fma(_752, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744)) + cbModelParam._m0[23u].w;
        float _1658 = fma(_690, cbModelParam._m0[21u].z, fma(_689, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688));
        float _1661 = fma(_690, cbModelParam._m0[22u].z, fma(_689, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688));
        float _1664 = fma(_690, cbModelParam._m0[23u].z, fma(_689, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688));
        float _1825;
        if (_1658 > 0.0)
        {
            _1825 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1825 = frontier_phi_25_21_ladder;
        }
        float _2104;
        if (_1661 > 0.0)
        {
            _2104 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2104 = frontier_phi_37_32_ladder;
        }
        float _2317;
        if (_1664 > 0.0)
        {
            _2317 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2317 = frontier_phi_46_43_ladder;
        }
        float _2319 = isnan(_2104) ? _1825 : (isnan(_1825) ? _2104 : min(_1825, _2104));
        float _2320 = isnan(_2317) ? _2319 : (isnan(_2319) ? _2317 : min(_2319, _2317));
        float _2324 = (_2320 * _1658) + _1647;
        float _2325 = (_2320 * _1661) + _1651;
        float _2326 = (_2320 * _1664) + _1655;
        float _2327 = _2320 * 9.9999997473787516355514526367188e-05;
        float _2328 = (-1.0) - _2327;
        float _2330 = _2327 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2326 > _2330) || ((_2326 < _2328) || ((_2325 > _2330) || ((_2325 < _2328) || ((_2324 < _2328) || (_2324 > _2330))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2326, cbModelParam._m0[17u].z, fma(_2325, cbModelParam._m0[17u].y, _2324 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2326, cbModelParam._m0[18u].z, fma(_2325, cbModelParam._m0[18u].y, _2324 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2326, cbModelParam._m0[19u].z, fma(_2325, cbModelParam._m0[19u].y, _2324 * cbModelParam._m0[19u].x))), _1590);
            frontier_phi_22_46_ladder = _2525.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2525.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2525.x * cbModelParam._m0[1u].z;
        }
        _1683 = frontier_phi_22_46_ladder_2;
        _1685 = frontier_phi_22_46_ladder_1;
        _1687 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_688, _689, _690), _1590);
        _1683 = _1667.x * cbModelParam._m0[1u].z;
        _1685 = _1667.y * cbModelParam._m0[1u].z;
        _1687 = _1667.z * cbModelParam._m0[1u].z;
    }
    float _1700 = (((_715 * _665) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1683 - _1581)) + _1581);
    float _1702 = (((_715 * _667) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1685 - _1583)) + _1583);
    float _1704 = (((_715 * _668) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1687 - _1585)) + _1585);
    float _1707 = fma(_1704, cbSceneParam._m0[89u].z, fma(_1702, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1710 = fma(_1704, cbSceneParam._m0[90u].z, fma(_1702, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1713 = fma(_1704, cbSceneParam._m0[91u].z, fma(_1702, cbSceneParam._m0[91u].y, _1700 * cbSceneParam._m0[91u].x));
    vec4 _1721 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_602, _603));
    float _1723 = _1721.w;
    float _1735 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1723);
    float _1736 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1723);
    float _1737 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1723);
    uvec4 _1741 = floatBitsToUint(cbInstanceData._m0[_640 + 5u]);
    uint _1743 = _1741.x * 14u;
    uint _1744 = _1743 + 13u;
    float _1751 = _680 + (-1.0);
    float _1756 = (cbLight._m0[_1744].x * _1751) + 1.0;
    float _1757 = (cbLight._m0[_1744].y * _1751) + 1.0;
    float _1758 = (cbLight._m0[_1744].z * _1751) + 1.0;
    float _1759 = (cbLight._m0[_1744].w * _1751) + 1.0;
    uint _1760 = _1743 + 5u;
    float _1766 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
    uint _1770 = _1743 + 4u;
    float _1779 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
    uint _1783 = _1743 | 1u;
    float _1794 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_514, _515, _516));
    float _1797 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_514, _515, _516));
    float _3923 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _3934 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1802 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * 0.3183098733425140380859375;
    float _1804 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.3183098733425140380859375;
    float _1811 = ((cbLight._m0[_1760].x * _1766) * _1804) + (((cbLight._m0[_1770].x * _1735) * _1779) * _1802);
    float _1812 = ((_1766 * cbLight._m0[_1760].y) * _1804) + (((cbLight._m0[_1770].y * _1736) * _1779) * _1802);
    float _1813 = ((_1766 * cbLight._m0[_1760].z) * _1804) + (((cbLight._m0[_1770].z * _1737) * _1779) * _1802);
    uvec4 _1817 = floatBitsToUint(cbLight._m0[_1743 + 12u]);
    bool _1819 = _1817.x == 0u;
    float _1830;
    float _1832;
    float _1834;
    if (_1819)
    {
        _1830 = _1811;
        _1832 = _1812;
        _1834 = _1813;
    }
    else
    {
        uint _1838 = _1743 + 6u;
        float _1854 = (dot(vec3(cbLight._m0[_1743 + 2u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _1855 = _1854 * _1854;
        float _3945 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1857 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
        _1830 = (((cbLight._m0[_1838].x * 0.3183098733425140380859375) * _1856) * _1857) + _1811;
        _1832 = (((cbLight._m0[_1838].y * 0.3183098733425140380859375) * _1856) * _1857) + _1812;
        _1834 = (((cbLight._m0[_1838].z * 0.3183098733425140380859375) * _1856) * _1857) + _1813;
    }
    bool _1837 = _1817.y == 0u;
    float _1875;
    float _1877;
    float _1879;
    if (_1837)
    {
        _1875 = _1830;
        _1877 = _1832;
        _1879 = _1834;
    }
    else
    {
        uint _2048 = _1743 + 7u;
        float _2064 = (dot(vec3(cbLight._m0[_1743 + 3u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _2065 = _2064 * _2064;
        float _3961 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2066 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _2067 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _1875 = (((cbLight._m0[_2048].x * 0.3183098733425140380859375) * _2066) * _2067) + _1830;
        _1877 = (((cbLight._m0[_2048].y * 0.3183098733425140380859375) * _2066) * _2067) + _1832;
        _1879 = (((cbLight._m0[_2048].z * 0.3183098733425140380859375) * _2066) * _2067) + _1834;
    }
    uint _1882 = _1743 + 8u;
    float _1895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1743].w)) * _517) * 0.949999988079071044921875);
    float _1896 = _1895 * _1895;
    float _1897 = cbLight._m0[_1743].x + _594;
    float _1898 = cbLight._m0[_1743].y + _595;
    float _1899 = cbLight._m0[_1743].z + _596;
    float _1903 = inversesqrt(dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899)));
    float _1904 = _1903 * _1897;
    float _1905 = _1903 * _1898;
    float _1906 = _1903 * _1899;
    float _1907 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1743].xyz));
    float _3977 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _1911 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1912 = dot(vec3(_514, _515, _516), vec3(_1904, _1905, _1906));
    float _3999 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1916 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_1904, _1905, _1906));
    float _4010 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1920 = _1896 * _1896;
    float _1924 = ((_1915 * _1915) * (_1920 + (-1.0))) + 1.0;
    float _1932 = exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0);
    float _1933 = 0.959999978542327880859375 - _662;
    float _1935 = 0.959999978542327880859375 - _663;
    float _1936 = 0.959999978542327880859375 - _664;
    float _1943 = 1.0 - _1896;
    float _1954 = (0.5 / (((_1911 * ((_1910 * _1943) + _1896)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _1943) + _1896) * _1910))) * _1910;
    float _4021 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1956 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1920 / ((_1924 * _1924) * 3.141590118408203125));
    uint _1970 = _1743 + 9u;
    float _1981 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1783].w)) * _517) * 0.949999988079071044921875);
    float _1982 = _1981 * _1981;
    float _1983 = cbLight._m0[_1783].x + _594;
    float _1984 = cbLight._m0[_1783].y + _595;
    float _1985 = cbLight._m0[_1783].z + _596;
    float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
    float _1990 = _1989 * _1983;
    float _1991 = _1989 * _1984;
    float _1992 = _1989 * _1985;
    float _1993 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1783].xyz));
    float _4032 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1997 = dot(vec3(_514, _515, _516), vec3(_1990, _1991, _1992));
    float _4043 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _2001 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_1990, _1991, _1992));
    float _4054 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2005 = _1982 * _1982;
    float _2009 = ((_2000 * _2000) * (_2005 + (-1.0))) + 1.0;
    float _2016 = exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0);
    float _2023 = 1.0 - _1982;
    float _2033 = (0.5 / (((_1911 * ((_1996 * _2023) + _1982)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2023) + _1982) * _1996))) * _1996;
    float _4065 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2035 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2005 / ((_2009 * _2009) * 3.141590118408203125));
    float _2045 = (((((_2016 * _1933) + _665) * cbLight._m0[_1970].x) * _2035) * _1766) + ((((cbLight._m0[_1882].x * _1735) * ((_1932 * _1933) + _665)) * _1956) * _1779);
    float _2046 = (((((_2016 * _1935) + _667) * cbLight._m0[_1970].y) * _2035) * _1766) + ((((cbLight._m0[_1882].y * _1736) * ((_1932 * _1935) + _667)) * _1956) * _1779);
    float _2047 = (((((_2016 * _1936) + _668) * cbLight._m0[_1970].z) * _2035) * _1766) + ((((cbLight._m0[_1882].z * _1737) * ((_1932 * _1936) + _668)) * _1956) * _1779);
    float _2109;
    float _2111;
    float _2113;
    if (_1819)
    {
        _2109 = _2045;
        _2111 = _2046;
        _2113 = _2047;
    }
    else
    {
        uint _2115 = _1743 + 2u;
        uint _2119 = _1743 + 10u;
        float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _517) * 0.949999988079071044921875);
        float _2134 = _2133 * _2133;
        float _2135 = cbLight._m0[_2115].x + _594;
        float _2136 = cbLight._m0[_2115].y + _595;
        float _2137 = cbLight._m0[_2115].z + _596;
        float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
        float _2142 = _2141 * _2135;
        float _2143 = _2141 * _2136;
        float _2144 = _2141 * _2137;
        float _2145 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2115].xyz));
        float _4076 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2148 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _2149 = dot(vec3(_514, _515, _516), vec3(_2142, _2143, _2144));
        float _4087 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2152 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2153 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2142, _2143, _2144));
        float _4098 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2157 = _2134 * _2134;
        float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
        float _2168 = exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0);
        float _2175 = 1.0 - _2134;
        float _2185 = (0.5 / (((_1911 * ((_2148 * _2175) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2175) + _2134) * _2148))) * _2148;
        float _4109 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2187 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
        float _2188 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
        _2109 = (((((_2168 * _1933) + _665) * cbLight._m0[_2119].x) * _2187) * _2188) + _2045;
        _2111 = (((((_2168 * _1935) + _667) * cbLight._m0[_2119].y) * _2187) * _2188) + _2046;
        _2113 = (((((_2168 * _1936) + _668) * cbLight._m0[_2119].z) * _2187) * _2188) + _2047;
    }
    float _2223;
    float _2225;
    float _2227;
    if (_1837)
    {
        _2223 = _2109;
        _2225 = _2111;
        _2227 = _2113;
    }
    else
    {
        uint _2234 = _1743 + 3u;
        uint _2238 = _1743 + 11u;
        float _2252 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2234].w)) * _517) * 0.949999988079071044921875);
        float _2253 = _2252 * _2252;
        float _2254 = cbLight._m0[_2234].x + _594;
        float _2255 = cbLight._m0[_2234].y + _595;
        float _2256 = cbLight._m0[_2234].z + _596;
        float _2260 = inversesqrt(dot(vec3(_2254, _2255, _2256), vec3(_2254, _2255, _2256)));
        float _2261 = _2260 * _2254;
        float _2262 = _2260 * _2255;
        float _2263 = _2260 * _2256;
        float _2264 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2234].xyz));
        float _4125 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2267 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2268 = dot(vec3(_514, _515, _516), vec3(_2261, _2262, _2263));
        float _4136 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2271 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2272 = dot(vec3(cbLight._m0[_2234].xyz), vec3(_2261, _2262, _2263));
        float _4147 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2276 = _2253 * _2253;
        float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
        float _2287 = exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0);
        float _2294 = 1.0 - _2253;
        float _2304 = (0.5 / (((_1911 * ((_2267 * _2294) + _2253)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2294) + _2253) * _2267))) * _2267;
        float _4158 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2306 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
        float _2307 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _2223 = (((((_2287 * _1933) + _665) * cbLight._m0[_2238].x) * _2306) * _2307) + _2109;
        _2225 = (((((_2287 * _1935) + _667) * cbLight._m0[_2238].y) * _2306) * _2307) + _2111;
        _2227 = (((((_2287 * _1936) + _668) * cbLight._m0[_2238].z) * _2306) * _2307) + _2113;
    }
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    if (_1741.y == 0u)
    {
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2382;
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2382;
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2382;
        uvec4 _2397 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2398 = _2397.x;
        uint _2409 = uint((float(_2397.y) * floor(float(uint(cbSceneParam._m0[85u].y * _603) / _2398))) + floor(float(uint(cbSceneParam._m0[85u].x * _602) / _2398)));
        float _2419 = (log2(_2385 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2420 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        uint _2423 = uint(isnan(14.0) ? _2420 : (isnan(_2420) ? 14.0 : min(_2420, 14.0)));
        uvec4 _2428 = texelFetch(g_lightClusterGridBuffer, int(((_2423 << 2u) + (_2409 << 6u)) >> 2u));
        uint _2429 = _2428.x;
        uint _2430 = _2397.z;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        if (((((1u << ((_2430 >> 4u) & 15u)) + 4294967295u) & _2429) == 0u) || ((_2430 & 240u) == 0u))
        {
            _2530 = 0.0;
            _2532 = 0.0;
            _2534 = 0.0;
            _2536 = 0.0;
            _2538 = 0.0;
            _2540 = 0.0;
        }
        else
        {
            float _2531;
            float _2533;
            float _2535;
            float _2537;
            float _2539;
            float _2541;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            uint _2681 = 0u;
            uint _2690;
            bool _2691;
            for (;;)
            {
                _2690 = texelFetch(g_lightClassification, int((((_2423 << 5u) + (_2409 << 9u)) + (_2681 << 2u)) >> 2u)).x;
                _2691 = _2690 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2691)
                {
                    frontier_phi_61_pred = _2675;
                    frontier_phi_61_pred_1 = _2680;
                    frontier_phi_61_pred_2 = _2679;
                    frontier_phi_61_pred_3 = _2678;
                    frontier_phi_61_pred_4 = _2677;
                    frontier_phi_61_pred_5 = _2676;
                }
                else
                {
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    uint _2805;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2680;
                    _2805 = _2690;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    for (;;)
                    {
                        uint _2809 = uint(findLSB(_2805)) + (_2681 << 5u);
                        uint _2806 = (_2805 + 4294967295u) & _2805;
                        uint _2811 = _2809 * 48u;
                        vec4 _2825 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 3u)).x));
                        uint _2831 = (_2809 * 48u) + 4u;
                        vec4 _2844 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2831)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 3u)).x));
                        uint _2850 = (_2809 * 48u) + 8u;
                        vec3 _2861 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2850)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 2u)).x));
                        float _2865 = _2825.x - _2383;
                        float _2866 = _2825.y - _2384;
                        float _2867 = _2825.z - _2385;
                        float _2868 = dot(vec3(_2865, _2866, _2867), vec3(_2865, _2866, _2867));
                        float _2871 = inversesqrt(_2868);
                        float _2872 = _2871 * _2865;
                        float _2873 = _2871 * _2866;
                        float _2874 = _2871 * _2867;
                        float _2875 = dot(vec3(_621, _624, _627), vec3(_2872, _2873, _2874));
                        float _2880 = 1.0 - (_2868 * _2825.w);
                        float _4184 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2881 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2882 = sqrt(_2868) * _2844.w;
                        float _2885 = 1.39999997615814208984375 / (_2882 + 1.39999997615814208984375);
                        float _2886 = _2885 * _2885;
                        float _2889 = ((1.0 - _2886) * _2875) + _2886;
                        float _2892 = _2882 * _2882;
                        float _2896 = ((isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0))) * _2881) / ((_2892 * 0.699999988079071044921875) + 1.0);
                        float _2900 = (-0.0) - _2383;
                        float _2901 = (-0.0) - _2384;
                        float _2902 = (-0.0) - _2385;
                        float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
                        float _2907 = _2906 * _2900;
                        float _2908 = _2906 * _2901;
                        float _2909 = _2906 * _2902;
                        float _2917 = exp2(log2(1.0 / ((_2892 * 3.5) + 5.0)) * 0.25);
                        float _2918 = 1.0 - _696;
                        float _2925 = sqrt(1.0 - ((1.0 - (_2918 * _2918)) * (1.0 - (_2917 * _2917))));
                        float _2926 = _2925 * _2925;
                        float _2927 = _2926 * _2926;
                        float _2928 = _2907 + _2872;
                        float _2929 = _2908 + _2873;
                        float _2930 = _2909 + _2874;
                        float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
                        float _2938 = dot(vec3(_621, _624, _627), vec3(_2907, _2908, _2909));
                        float _4200 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2941 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2942 = dot(vec3(_621, _624, _627), vec3(_2934 * _2928, _2934 * _2929, _2934 * _2930));
                        float _4211 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2945 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2949 = ((_2945 * _2945) * (_2927 + (-1.0))) + 1.0;
                        float _2950 = _2885 * _2926;
                        float _2951 = _2950 * _2950;
                        float _2954 = ((1.0 - _2951) * _2875) + _2951;
                        float _4222 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2955 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2956 = 1.0 - _2926;
                        float _2966 = (0.5 / (((_2955 * ((_2941 * _2956) + _2926)) + 9.9999999392252902907785028219223e-09) + (((_2955 * _2956) + _2926) * _2941))) * _2955;
                        float _4233 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2977 = (((_2927 * 3.1415927410125732421875) * (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) / ((_2949 * _2949) * ((_2892 * 2.1991131305694580078125) + 3.141590118408203125))) * _2881;
                        _2734 = (_2896 * _2844.x) + _2802;
                        _2735 = (_2896 * _2844.y) + _2803;
                        _2736 = (_2896 * _2844.z) + _2804;
                        _2731 = (_2977 * _2861.x) + _2799;
                        _2732 = (_2977 * _2861.y) + _2800;
                        _2733 = (_2977 * _2861.z) + _2801;
                        if (_2806 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2806;
                        }
                    }
                    frontier_phi_61_pred = _2731;
                    frontier_phi_61_pred_1 = _2736;
                    frontier_phi_61_pred_2 = _2735;
                    frontier_phi_61_pred_3 = _2734;
                    frontier_phi_61_pred_4 = _2733;
                    frontier_phi_61_pred_5 = _2732;
                }
                _2531 = frontier_phi_61_pred;
                _2541 = frontier_phi_61_pred_1;
                _2539 = frontier_phi_61_pred_2;
                _2537 = frontier_phi_61_pred_3;
                _2535 = frontier_phi_61_pred_4;
                _2533 = frontier_phi_61_pred_5;
                uint _2682 = _2681 + 1u;
                if (_2682 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2675 = _2531;
                    _2676 = _2533;
                    _2677 = _2535;
                    _2678 = _2537;
                    _2679 = _2539;
                    _2680 = _2541;
                    _2681 = _2682;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2530 = _2531;
            _2532 = _2533;
            _2534 = _2535;
            _2536 = _2537;
            _2538 = _2539;
            _2540 = _2541;
        }
        uvec4 _2544 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2545 = _2544.z;
        uint _2547 = (_2545 >> 8u) & 15u;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        if (((4294967295u << _2547) & _2429) == 0u)
        {
            _2643 = _2530;
            _2645 = _2532;
            _2647 = _2534;
            _2649 = _2536;
            _2651 = _2538;
            _2653 = _2540;
        }
        else
        {
            float _2668 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
            float _2669 = _2668 * _2383;
            float _2670 = _2668 * _2384;
            float _2671 = _2668 * _2385;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2547 < ((_2545 >> 12u) & 15u))
            {
                float _2644;
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2654;
                float _2782 = _2530;
                float _2783 = _2532;
                float _2784 = _2534;
                float _2785 = _2536;
                float _2786 = _2538;
                float _2787 = _2540;
                uint _2788 = _2547;
                uint _2797;
                bool _2798;
                for (;;)
                {
                    _2797 = texelFetch(g_lightClassification, int((((_2423 << 5u) + (_2409 << 9u)) + (_2788 << 2u)) >> 2u)).x;
                    _2798 = _2797 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2798)
                    {
                        frontier_phi_67_pred = _2785;
                        frontier_phi_67_pred_1 = _2786;
                        frontier_phi_67_pred_2 = _2787;
                        frontier_phi_67_pred_3 = _2784;
                        frontier_phi_67_pred_4 = _2783;
                        frontier_phi_67_pred_5 = _2782;
                    }
                    else
                    {
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _2995 = _2782;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        float _2999 = _2786;
                        float _3000 = _2787;
                        uint _3001 = _2797;
                        uint _3002;
                        vec4 _3027;
                        float _3028;
                        vec4 _3043;
                        vec3 _3055;
                        vec4 _3071;
                        vec4 _3087;
                        float _3134;
                        bool _3135;
                        for (;;)
                        {
                            uint _3012 = ((_2788 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3001));
                            _3002 = (_3001 + 4294967295u) & _3001;
                            uint _3014 = _3012 * 40u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            _3028 = _3027.w;
                            uint _3030 = (_3012 * 40u) + 4u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3045 = (_3012 * 40u) + 8u;
                            _3055 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x));
                            uint _3058 = (_3012 * 40u) + 16u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3074 = (_3012 * 40u) + 20u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3090 = (_3012 * 40u) + 24u;
                            vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3109 = (_3012 * 40u) + 28u;
                            vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            _3134 = fma(_2385, _3122.z, fma(_2384, _3122.y, _3122.x * _2383)) + _3122.w;
                            _3135 = !((fma(_2385, _3103.z, fma(_2384, _3103.y, _3103.x * _2383)) + _3103.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3135)
                            {
                                float _3162 = _3027.x - _2383;
                                float _3163 = _3027.y - _2384;
                                float _3164 = _3027.z - _2385;
                                float _3165 = dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164));
                                float _3168 = inversesqrt(_3165);
                                float _3169 = _3168 * _3162;
                                float _3170 = _3168 * _3163;
                                float _3171 = _3168 * _3164;
                                float _3175 = 1.0 - (_3165 / (_3028 * _3028));
                                float _4244 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3180 = sqrt(_3165) * _3043.w;
                                float _3182 = 1.39999997615814208984375 / (_3180 + 1.39999997615814208984375);
                                float _3183 = _3182 * _3182;
                                float _3186 = ((1.0 - _3183) * dot(vec3(_3169, _3170, _3171), vec3(_621, _624, _627))) + _3183;
                                float _3189 = _3180 * _3180;
                                float _3193 = (fma(_2385, _3071.z, fma(_2384, _3071.y, _3071.x * _2383)) + _3071.w) / _3134;
                                float _3194 = (fma(_2385, _3087.z, fma(_2384, _3087.y, _3087.x * _2383)) + _3087.w) / _3134;
                                float _3198 = 1.0 - dot(vec2(_3193, _3194), vec2(_3193, _3194));
                                float _4260 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3200 = _3199 * (((isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))) * _3176) / ((_3189 * 0.699999988079071044921875) + 1.0));
                                float _3212 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                                float _3213 = 1.0 - _696;
                                float _3220 = sqrt(1.0 - ((1.0 - (_3213 * _3213)) * (1.0 - (_3212 * _3212))));
                                float _3221 = _3220 * _3220;
                                float _3222 = _3221 * _3221;
                                float _3223 = _3169 - _2669;
                                float _3224 = _3170 - _2670;
                                float _3225 = _3171 - _2671;
                                float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                                float _3233 = dot(vec3(_621, _624, _627), vec3((-0.0) - _2669, (-0.0) - _2670, (-0.0) - _2671));
                                float _4271 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3237 = dot(vec3(_621, _624, _627), vec3(_3229 * _3223, _3229 * _3224, _3229 * _3225));
                                float _4282 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3240 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3244 = ((_3240 * _3240) * (_3222 + (-1.0))) + 1.0;
                                float _3245 = _3182 * _3221;
                                float _3246 = _3245 * _3245;
                                float _3252 = ((1.0 - _3246) * dot(vec3(_621, _624, _627), vec3(_3169, _3170, _3171))) + _3246;
                                float _4293 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3254 = 1.0 - _3221;
                                float _3264 = (0.5 / (((_3253 * ((_3236 * _3254) + _3221)) + 9.9999999392252902907785028219223e-09) + (((_3253 * _3254) + _3221) * _3236))) * _3253;
                                float _4304 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3274 = (_3199 * _3176) * (((_3222 * 3.1415927410125732421875) * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) / ((_3244 * _3244) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3274 * _3055.x;
                                frontier_phi_73_pred_1 = _3274 * _3055.y;
                                frontier_phi_73_pred_2 = _3200 * _3043.z;
                                frontier_phi_73_pred_3 = _3200 * _3043.y;
                                frontier_phi_73_pred_4 = _3200 * _3043.x;
                                frontier_phi_73_pred_5 = _3274 * _3055.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3278 = frontier_phi_73_pred;
                            _3279 = frontier_phi_73_pred_1;
                            _3283 = frontier_phi_73_pred_2;
                            _3282 = frontier_phi_73_pred_3;
                            _3281 = frontier_phi_73_pred_4;
                            _3280 = frontier_phi_73_pred_5;
                            _2985 = _3281 + _2998;
                            _2986 = _3282 + _2999;
                            _2987 = _3283 + _3000;
                            _2982 = _3278 + _2995;
                            _2983 = _3279 + _2996;
                            _2984 = _3280 + _2997;
                            if (_3002 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _3002;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2985;
                        frontier_phi_67_pred_1 = _2986;
                        frontier_phi_67_pred_2 = _2987;
                        frontier_phi_67_pred_3 = _2984;
                        frontier_phi_67_pred_4 = _2983;
                        frontier_phi_67_pred_5 = _2982;
                    }
                    _2650 = frontier_phi_67_pred;
                    _2652 = frontier_phi_67_pred_1;
                    _2654 = frontier_phi_67_pred_2;
                    _2648 = frontier_phi_67_pred_3;
                    _2646 = frontier_phi_67_pred_4;
                    _2644 = frontier_phi_67_pred_5;
                    uint _2789 = _2788 + 1u;
                    if (_2789 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2782 = _2644;
                        _2783 = _2646;
                        _2784 = _2648;
                        _2785 = _2650;
                        _2786 = _2652;
                        _2787 = _2654;
                        _2788 = _2789;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2652;
                frontier_phi_55_56_ladder_1 = _2654;
                frontier_phi_55_56_ladder_2 = _2650;
                frontier_phi_55_56_ladder_3 = _2648;
                frontier_phi_55_56_ladder_4 = _2646;
                frontier_phi_55_56_ladder_5 = _2644;
            }
            else
            {
                frontier_phi_55_56_ladder = _2538;
                frontier_phi_55_56_ladder_1 = _2540;
                frontier_phi_55_56_ladder_2 = _2536;
                frontier_phi_55_56_ladder_3 = _2534;
                frontier_phi_55_56_ladder_4 = _2532;
                frontier_phi_55_56_ladder_5 = _2530;
            }
            _2643 = frontier_phi_55_56_ladder_5;
            _2645 = frontier_phi_55_56_ladder_4;
            _2647 = frontier_phi_55_56_ladder_3;
            _2649 = frontier_phi_55_56_ladder_2;
            _2651 = frontier_phi_55_56_ladder;
            _2653 = frontier_phi_55_56_ladder_1;
        }
        float _2658 = isnan(1.0) ? _680 : (isnan(_680) ? 1.0 : min(_680, 1.0));
        _2442 = (_2658 * _2649) + _1875;
        _2444 = (_2658 * _2651) + _1877;
        _2446 = (_2658 * _2653) + _1879;
        _2448 = ((_2643 * _665) * _2658) + _2223;
        _2450 = ((_2645 * _667) * _2658) + _2225;
        _2452 = ((_2647 * _668) * _2658) + _2227;
    }
    else
    {
        _2442 = _1875;
        _2444 = _1877;
        _2446 = _1879;
        _2448 = _2223;
        _2450 = _2225;
        _2452 = _2227;
    }
    float _4320 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4331 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4342 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    uint _2472 = _640 + 6u;
    float _2480 = _602 / cbSceneParam._m0[86u].x;
    float _2481 = _603 / cbSceneParam._m0[86u].y;
    vec4 _2495 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2480, _2481, (log2((isnan(cbSceneParam._m0[77u].w) ? _537 : (isnan(_537) ? cbSceneParam._m0[77u].w : min(_537, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2497 = _2495.x;
    float _2498 = _2495.y;
    float _2499 = _2495.z;
    float _2500 = _2495.w;
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    if (_537 > cbSceneParam._m0[78u].w)
    {
        float _2555 = isnan(_537) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _537 : min(cbSceneParam._m0[80u].w, _537));
        float _2556 = _2555 / _537;
        float _2567 = _2556 * _587;
        float _2568 = _588 * _2556;
        float _2569 = (-0.0) - _2568;
        float _2571 = _2556 * _589;
        float _2573 = (cbSceneParam._m0[77u].w * _2569) / _2555;
        float _2574 = _2573 + cbSceneParam._m0[79u].w;
        float _2575 = cbSceneParam._m0[79u].w - _2568;
        float _2581 = sqrt(((_2567 * _2567) + (_2568 * _2568)) + (_2571 * _2571));
        float _2584 = (1.0 - (cbSceneParam._m0[77u].w / _2555)) * _2581;
        float _2589 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2591 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2744;
        if (abs((_2569 - _2573) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2744 = ((((_2574 > 0.0) ? exp2(_2589 * _2574) : (2.0 - exp2(_2591 * _2574))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2584;
        }
        else
        {
            float _2704 = 1.0 / cbSceneParam._m0[80u].x;
            float _2705 = isnan(_2575) ? _2574 : (isnan(_2574) ? _2575 : max(_2574, _2575));
            float _2706 = isnan(_2575) ? _2574 : (isnan(_2574) ? _2575 : min(_2574, _2575));
            float _2715 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : min(_2705, 0.0));
            float _2716 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : min(_2706, 0.0));
            _2744 = ((abs(_2581 / _2569) * cbSceneParam._m0[80u].y) * ((((_2715 - _2716) * 2.0) - ((exp2(_2589 * (isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0)))) - exp2(_2589 * (isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0))))) * _2704)) - ((exp2(_2591 * _2715) - exp2(_2591 * _2716)) * _2704))) + (_2584 * cbSceneParam._m0[80u].z);
        }
        vec4 _2746 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2480, _2481, 1.0), 0.0);
        float _2755 = exp2((_2744 * (-1.44269502162933349609375)) * (1.0 - _2746.w));
        float _2756 = log2(_2755);
        float _2772 = log2(_2500);
        _2593 = (exp2(_2772 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2756 * cbSceneParam._m0[78u].x)) * _2746.x) / cbSceneParam._m0[78u].x)) + _2497;
        _2595 = (exp2(_2772 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2756 * cbSceneParam._m0[78u].y)) * _2746.y) / cbSceneParam._m0[78u].y)) + _2498;
        _2597 = (exp2(_2772 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2756 * cbSceneParam._m0[78u].z)) * _2746.z) / cbSceneParam._m0[78u].z)) + _2499;
        _2599 = _2755 * _2500;
    }
    else
    {
        _2593 = _2497;
        _2595 = _2498;
        _2597 = _2499;
        _2599 = _2500;
    }
    float _2611 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2612 = _2611 == 3.0;
    float _2613 = log2(_2599);
    float _2620 = exp2(_2613 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2442 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _680))) + ((_2448 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1490)) * cbPerFrame._m0[3u].x));
    float _2621 = exp2(_2613 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2444 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _680))) + ((_2450 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1490)) * cbPerFrame._m0[3u].x));
    float _2622 = exp2(_2613 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2446 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _680))) + ((_2452 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1490)) * cbPerFrame._m0[3u].x));
    float _2631 = (_2611 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2631 * (_2612 ? _2620 : (_2620 + (cbSceneParam._m0[72u].w * _2593)));
    SV_Target.y = _2631 * (_2612 ? _2621 : (_2621 + (cbSceneParam._m0[72u].w * _2595)));
    SV_Target.z = _2631 * (_2612 ? _2622 : (_2622 + (cbSceneParam._m0[72u].w * _2597)));
    SV_Target.w = cbInstanceData._m0[_2472].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2472].w;
}


