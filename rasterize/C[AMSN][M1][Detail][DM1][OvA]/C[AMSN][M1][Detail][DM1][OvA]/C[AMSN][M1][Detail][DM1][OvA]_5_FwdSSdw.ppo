#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1036;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _251 = _245.x * cbMtdParam._m0[10u].x;
    float _252 = _245.y * cbMtdParam._m0[10u].y;
    float _253 = _245.z * cbMtdParam._m0[10u].z;
    float _258 = 1.0 - cbMtdParam._m0[13u].z;
    float _3394 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _260 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    vec4 _278 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _286 = ((_251 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _278.x;
    float _289 = ((_252 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _278.y;
    float _292 = ((_253 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _278.z;
    float _299 = ((_251 - _286) * _260) + _286;
    float _300 = ((_252 - _289) * _260) + _289;
    float _301 = ((_253 - _292) * _260) + _292;
    vec4 _319 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _349 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3405 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
    float _357 = (_350 * ((_319.x * cbMtdParam._m0[11u].x) - _299)) + _299;
    float _358 = (_350 * ((_319.y * cbMtdParam._m0[11u].y) - _300)) + _300;
    float _359 = (_350 * ((_319.z * cbMtdParam._m0[11u].z) - _301)) + _301;
    vec4 _372 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _379 = 1.0 - cbMtdParam._m0[14u].z;
    float _3416 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = (_372.x * TEXCOORD_5.x) * (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0)));
    vec4 _396 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _400 = _396.z;
    vec4 _413 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _424 = cbMtdParam._m0[13u].w * _400;
    float _427 = (((((_400 * 2.0) * _413.z) * cbMtdParam._m0[14u].x) - _424) * cbMtdParam._m0[13u].y) + _424;
    vec4 _440 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _455 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_440.z * cbMtdParam._m0[14u].y) - _427)) + _427;
    float _462 = (_396.x * 2.0) + (-1.0);
    float _463 = (_396.y * 2.0) + (-1.0);
    float _464 = dot(vec2(_462, _463), vec2(_462, _463));
    float _3427 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _469 = sqrt(1.0 - (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))));
    float _480 = ((cbMtdParam._m0[13u].x * ((_413.x * 2.0) + (-1.0))) + _462) + ((((_440.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _481 = ((cbMtdParam._m0[13u].x * ((_413.y * 2.0) + (-1.0))) + _463) + ((((_440.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _484 = fma(_469, _210 * NORMAL.x, fma(_481, _217 * TANGENT.x, (_203 * _195) * _480));
    float _487 = fma(_469, _210 * NORMAL.y, fma(_481, _217 * TANGENT.y, (_203 * _196) * _480));
    float _490 = fma(_469, _210 * NORMAL.z, fma(_481, _217 * TANGENT.z, (_203 * _197) * _480));
    float _494 = inversesqrt(dot(vec3(_484, _487, _490), vec3(_484, _487, _490)));
    float _495 = _494 * _484;
    float _496 = _494 * _487;
    float _497 = _494 * _490;
    float _3438 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _498 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _3460 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _3471 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _3482 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _502 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _518 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _568 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _558);
    float _569 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _558);
    float _570 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _558);
    float _574 = inversesqrt(dot(vec3(_568, _569, _570), vec3(_568, _569, _570)));
    float _575 = _568 * _574;
    float _576 = _569 * _574;
    float _577 = _570 * _574;
    float _583 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _584 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _602 = fma(_497, cbSceneParam._m0[5u].z, fma(_496, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _495));
    float _605 = fma(_497, cbSceneParam._m0[6u].z, fma(_496, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _495));
    float _608 = fma(_497, cbSceneParam._m0[7u].z, fma(_496, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _495));
    uint _621 = uint(roundEven(NORMAL.w)) * 13u;
    uint _623 = (_621 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _629 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0)))) * cbInstanceData._m0[_623].x;
    float _630 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * cbInstanceData._m0[_623].y;
    float _631 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * cbInstanceData._m0[_623].z;
    float _3493 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _3504 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _635 = 1.0 - _502;
    float _636 = _632 * _635;
    float _637 = _633 * _635;
    float _638 = _634 * _635;
    float _643 = (_632 + (-0.039999999105930328369140625)) * _502;
    float _644 = (_633 + (-0.039999999105930328369140625)) * _502;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _502;
    float _646 = _643 + 0.039999999105930328369140625;
    float _648 = _644 + 0.039999999105930328369140625;
    float _649 = _645 + 0.039999999105930328369140625;
    vec4 _658 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _583, cbSceneParam._m0[86u].y * _584));
    float _661 = _658.x * TEXCOORD_5.w;
    float _662 = dot(vec3(_495, _496, _497), vec3(_575, _576, _577));
    float _665 = _662 * 2.0;
    float _669 = (_665 * _495) - _575;
    float _670 = (_665 * _496) - _576;
    float _671 = (_665 * _497) - _577;
    float _675 = abs(dot(vec3(_575, _576, _577), vec3(_495, _496, _497)));
    float _3526 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _677 = sqrt(_498);
    float _690 = exp2((_677 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_677 * 3.0));
    float _696 = (1.0 - _690) * ((_677 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _697 = _690 * _677;
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1035;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _760 = fma(_733, cbModelParam._m0[26u].z, fma(_729, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _725));
        float _764 = fma(_733, cbModelParam._m0[27u].z, fma(_729, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _725));
        float _768 = fma(_733, cbModelParam._m0[28u].z, fma(_729, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _725));
        float _793 = _725 + _495;
        float _794 = _729 + _496;
        float _795 = _733 + _497;
        float _805 = fma(_795, cbModelParam._m0[26u].z, fma(_794, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _793)) - _760;
        float _806 = fma(_795, cbModelParam._m0[27u].z, fma(_794, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _793)) - _764;
        float _807 = fma(_795, cbModelParam._m0[28u].z, fma(_794, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _793)) - _768;
        float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
        float _824 = ((_811 * _805) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_760 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_811 * _806) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_764 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_811 * _807) / cbModelParam._m0[34u].z) + ((((((_768 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        float _863 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_829.x + (-0.5));
        float _865 = _863 * (_829.y + (-0.5));
        float _866 = _863 * (_829.z + (-0.5));
        float _873 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_836.x + (-0.5));
        float _875 = _873 * (_836.y + (-0.5));
        float _876 = _873 * (_836.z + (-0.5));
        float _883 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_843.x + (-0.5));
        float _885 = _883 * (_843.y + (-0.5));
        float _886 = _883 * (_843.z + (-0.5));
        float _893 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_850.x + (-0.5));
        float _895 = _893 * (_850.y + (-0.5));
        float _896 = _893 * (_850.z + (-0.5));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = _864 * 0.5;
        float _901 = _874 * 0.5;
        float _902 = _884 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _917 = (dot(vec3(_495, _496, _497), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _927 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3574 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_929 + 1.0))) + _934) * _897;
        float _944 = _865 * 0.5;
        float _945 = _875 * 0.5;
        float _946 = _885 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_495, _496, _497), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3607 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_971 + 1.0))) + _976) * _898;
        float _986 = _866 * 0.5;
        float _987 = _876 * 0.5;
        float _988 = _886 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_495, _496, _497), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3640 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1013 + 1.0))) + _1018) * _899;
        _1035 = _866;
        _1037 = _865;
        _1038 = _864;
        _1039 = _876;
        _1040 = _875;
        _1041 = _874;
        _1042 = _886;
        _1043 = _885;
        _1044 = _884;
        _1045 = _899;
        _1046 = _898;
        _1047 = _897;
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
    }
    else
    {
        _1035 = _1036;
        _1037 = _1036;
        _1038 = _1036;
        _1039 = _1036;
        _1040 = _1036;
        _1041 = _1036;
        _1042 = _1036;
        _1043 = _1036;
        _1044 = _1036;
        _1045 = _1036;
        _1046 = _1036;
        _1047 = _1036;
        _1048 = 0.0;
        _1049 = 0.0;
        _1050 = 0.0;
    }
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1076 = fma(_733, cbModelParam._m0[30u].z, fma(_729, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _725));
        float _1080 = fma(_733, cbModelParam._m0[31u].z, fma(_729, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _725));
        float _1084 = fma(_733, cbModelParam._m0[32u].z, fma(_729, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _725));
        float _1107 = _725 + _495;
        float _1108 = _729 + _496;
        float _1109 = _733 + _497;
        float _1119 = fma(_1109, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1107)) - _1076;
        float _1120 = fma(_1109, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1107)) - _1080;
        float _1121 = fma(_1109, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1107)) - _1084;
        float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
        float _1138 = ((_1125 * _1119) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1076 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1125 * _1120) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1080 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1125 * _1121) / cbModelParam._m0[35u].z) + ((((((_1084 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        float _1175 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1142.x + (-0.5));
        float _1177 = _1175 * (_1142.y + (-0.5));
        float _1178 = _1175 * (_1142.z + (-0.5));
        float _1185 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1149.x + (-0.5));
        float _1187 = _1185 * (_1149.y + (-0.5));
        float _1188 = _1185 * (_1149.z + (-0.5));
        float _1195 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1156.x + (-0.5));
        float _1197 = _1195 * (_1156.y + (-0.5));
        float _1198 = _1195 * (_1156.z + (-0.5));
        float _1205 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1163.x + (-0.5));
        float _1207 = _1205 * (_1163.y + (-0.5));
        float _1208 = _1205 * (_1163.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_495, _496, _497), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3703 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1239 + 1.0))) + _1244) * _1209;
        float _1254 = _1177 * 0.5;
        float _1255 = _1187 * 0.5;
        float _1256 = _1197 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_495, _496, _497), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3736 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1281 + 1.0))) + _1286) * _1210;
        float _1296 = _1178 * 0.5;
        float _1297 = _1188 * 0.5;
        float _1298 = _1198 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_495, _496, _497), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3769 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1323 + 1.0))) + _1328) * _1211;
        _1345 = _1178;
        _1346 = _1177;
        _1347 = _1176;
        _1348 = _1188;
        _1349 = _1187;
        _1350 = _1186;
        _1351 = _1198;
        _1352 = _1197;
        _1353 = _1196;
        _1354 = _1211;
        _1355 = _1210;
        _1356 = _1209;
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
    }
    else
    {
        _1345 = _1036;
        _1346 = _1036;
        _1347 = _1036;
        _1348 = _1036;
        _1349 = _1036;
        _1350 = _1036;
        _1351 = _1036;
        _1352 = _1036;
        _1353 = _1036;
        _1354 = _1036;
        _1355 = _1036;
        _1356 = _1036;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1048)) + _1048;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1049)) + _1049;
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1050)) + _1050;
    float _1392 = fma(_1371, cbSceneParam._m0[89u].z, fma(_1370, cbSceneParam._m0[89u].y, _1369 * cbSceneParam._m0[89u].x));
    float _1395 = fma(_1371, cbSceneParam._m0[90u].z, fma(_1370, cbSceneParam._m0[90u].y, _1369 * cbSceneParam._m0[90u].x));
    float _1398 = fma(_1371, cbSceneParam._m0[91u].z, fma(_1370, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1369));
    float _1413 = _669 * 0.5;
    float _1414 = _670 * 0.5;
    float _1415 = _671 * 0.5;
    float _1416 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1419 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1422 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1456;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1429 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1035, _1039, _1042, _1045));
        float _1433 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1437 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1444 = dot(vec4(cbModelParam._m0[39u]), vec4(_1413, _1414, _1415, 1.0));
        _1456 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1456 = 1.0;
    }
    float _1467;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1458 = dot(vec4(cbModelParam._m0[40u]), vec4(_1413, _1414, _1415, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1471 = (_1467 * cbModelParam._m0[1u].x) + (_1456 * (1.0 - cbModelParam._m0[1u].x));
    float _1481 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _498);
    float _1482 = isnan(_1481) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1481 : min(cbModelParam._m0[25u].z, _1481));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1529 = fma(_733, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _725)) + cbModelParam._m0[13u].w;
        float _1533 = fma(_733, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _725)) + cbModelParam._m0[14u].w;
        float _1537 = fma(_733, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _725)) + cbModelParam._m0[15u].w;
        float _1540 = fma(_671, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669));
        float _1543 = fma(_671, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669));
        float _1546 = fma(_671, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669));
        float _1574;
        if (_1540 > 0.0)
        {
            _1574 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1574 = frontier_phi_14_12_ladder;
        }
        float _1802;
        if (_1543 > 0.0)
        {
            _1802 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1802 = frontier_phi_23_19_ladder;
        }
        float _2059;
        if (_1546 > 0.0)
        {
            _2059 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2059 = frontier_phi_35_30_ladder;
        }
        float _2061 = isnan(_1802) ? _1574 : (isnan(_1574) ? _1802 : min(_1574, _1802));
        float _2062 = isnan(_2059) ? _2061 : (isnan(_2061) ? _2059 : min(_2061, _2059));
        float _2066 = (_2062 * _1540) + _1529;
        float _2067 = (_2062 * _1543) + _1533;
        float _2068 = (_2062 * _1546) + _1537;
        float _2069 = _2062 * 9.9999997473787516355514526367188e-05;
        float _2071 = (-1.0) - _2069;
        float _2073 = _2069 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2068 > _2073) || ((_2068 < _2071) || ((_2067 > _2073) || ((_2067 < _2071) || ((_2066 < _2071) || (_2066 > _2073))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2196 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2068, cbModelParam._m0[9u].z, fma(_2067, cbModelParam._m0[9u].y, _2066 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2068, cbModelParam._m0[10u].z, fma(_2067, cbModelParam._m0[10u].y, _2066 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2068, cbModelParam._m0[11u].z, fma(_2067, cbModelParam._m0[11u].y, _2066 * cbModelParam._m0[11u].x))), _1482);
            frontier_phi_13_35_ladder = _2196.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2196.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2196.x * cbModelParam._m0[1u].y;
        }
        _1562 = frontier_phi_13_35_ladder_2;
        _1564 = frontier_phi_13_35_ladder_1;
        _1566 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_669, _670, _671), _1482);
        _1562 = _1550.x * cbModelParam._m0[1u].y;
        _1564 = _1550.y * cbModelParam._m0[1u].y;
        _1566 = _1550.z * cbModelParam._m0[1u].y;
    }
    float _1570 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _498);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1570 : min(cbModelParam._m0[25u].w, _1570));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1628 = fma(_733, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _725)) + cbModelParam._m0[21u].w;
        float _1632 = fma(_733, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _725)) + cbModelParam._m0[22u].w;
        float _1636 = fma(_733, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _725)) + cbModelParam._m0[23u].w;
        float _1639 = fma(_671, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669));
        float _1642 = fma(_671, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669));
        float _1645 = fma(_671, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669));
        float _1807;
        if (_1639 > 0.0)
        {
            _1807 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1807 = frontier_phi_25_21_ladder;
        }
        float _2086;
        if (_1642 > 0.0)
        {
            _2086 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2086 = frontier_phi_37_32_ladder;
        }
        float _2299;
        if (_1645 > 0.0)
        {
            _2299 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2299 = frontier_phi_46_43_ladder;
        }
        float _2301 = isnan(_2086) ? _1807 : (isnan(_1807) ? _2086 : min(_1807, _2086));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1639) + _1628;
        float _2307 = (_2302 * _1642) + _1632;
        float _2308 = (_2302 * _1645) + _1636;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2309;
        float _2312 = _2309 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2308 > _2312) || ((_2308 < _2310) || ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 < _2310) || (_2306 > _2312))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2308, cbModelParam._m0[17u].z, fma(_2307, cbModelParam._m0[17u].y, _2306 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2308, cbModelParam._m0[18u].z, fma(_2307, cbModelParam._m0[18u].y, _2306 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2308, cbModelParam._m0[19u].z, fma(_2307, cbModelParam._m0[19u].y, _2306 * cbModelParam._m0[19u].x))), _1571);
            frontier_phi_22_46_ladder = _2507.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2507.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2507.x * cbModelParam._m0[1u].z;
        }
        _1664 = frontier_phi_22_46_ladder_2;
        _1666 = frontier_phi_22_46_ladder_1;
        _1668 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_669, _670, _671), _1571);
        _1664 = _1648.x * cbModelParam._m0[1u].z;
        _1666 = _1648.y * cbModelParam._m0[1u].z;
        _1668 = _1648.z * cbModelParam._m0[1u].z;
    }
    float _1681 = (((_696 * _646) + _697) * _661) * ((cbModelParam._m0[1u].w * (_1664 - _1562)) + _1562);
    float _1683 = (((_696 * _648) + _697) * _661) * ((cbModelParam._m0[1u].w * (_1666 - _1564)) + _1564);
    float _1685 = (((_696 * _649) + _697) * _661) * ((cbModelParam._m0[1u].w * (_1668 - _1566)) + _1566);
    float _1688 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, _1681 * cbSceneParam._m0[91u].x));
    vec4 _1702 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_583, _584));
    float _1704 = _1702.w;
    float _1716 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1704);
    float _1717 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1704);
    float _1718 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1704);
    uvec4 _1722 = floatBitsToUint(cbInstanceData._m0[_621 + 5u]);
    uint _1724 = _1722.x * 14u;
    uint _1725 = _1724 + 13u;
    float _1732 = _661 + (-1.0);
    float _1737 = (cbLight._m0[_1725].x * _1732) + 1.0;
    float _1738 = (cbLight._m0[_1725].y * _1732) + 1.0;
    float _1739 = (cbLight._m0[_1725].z * _1732) + 1.0;
    float _1740 = (cbLight._m0[_1725].w * _1732) + 1.0;
    uint _1741 = _1724 + 5u;
    float _1747 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
    uint _1751 = _1724 + 4u;
    float _1761 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
    uint _1765 = _1724 | 1u;
    float _1776 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_495, _496, _497));
    float _1779 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_495, _496, _497));
    float _3905 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _3916 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1784 = (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * 0.3183098733425140380859375;
    float _1786 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * 0.3183098733425140380859375;
    float _1793 = ((cbLight._m0[_1741].x * _1747) * _1786) + (((cbLight._m0[_1751].x * _1716) * _1761) * _1784);
    float _1794 = ((_1747 * cbLight._m0[_1741].y) * _1786) + (((cbLight._m0[_1751].y * _1717) * _1761) * _1784);
    float _1795 = ((_1747 * cbLight._m0[_1741].z) * _1786) + (((cbLight._m0[_1751].z * _1718) * _1761) * _1784);
    uvec4 _1799 = floatBitsToUint(cbLight._m0[_1724 + 12u]);
    bool _1801 = _1799.x == 0u;
    float _1812;
    float _1814;
    float _1816;
    if (_1801)
    {
        _1812 = _1793;
        _1814 = _1794;
        _1816 = _1795;
    }
    else
    {
        uint _1820 = _1724 + 6u;
        float _1836 = (dot(vec3(cbLight._m0[_1724 + 2u].xyz), vec3(_495, _496, _497)) * 0.5) + 0.5;
        float _1837 = _1836 * _1836;
        float _3927 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1839 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _1812 = (((cbLight._m0[_1820].x * 0.3183098733425140380859375) * _1838) * _1839) + _1793;
        _1814 = (((cbLight._m0[_1820].y * 0.3183098733425140380859375) * _1838) * _1839) + _1794;
        _1816 = (((cbLight._m0[_1820].z * 0.3183098733425140380859375) * _1838) * _1839) + _1795;
    }
    bool _1819 = _1799.y == 0u;
    float _1857;
    float _1859;
    float _1861;
    if (_1819)
    {
        _1857 = _1812;
        _1859 = _1814;
        _1861 = _1816;
    }
    else
    {
        uint _2030 = _1724 + 7u;
        float _2046 = (dot(vec3(cbLight._m0[_1724 + 3u].xyz), vec3(_495, _496, _497)) * 0.5) + 0.5;
        float _2047 = _2046 * _2046;
        float _3943 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2048 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _2049 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _1857 = (((cbLight._m0[_2030].x * 0.3183098733425140380859375) * _2048) * _2049) + _1812;
        _1859 = (((cbLight._m0[_2030].y * 0.3183098733425140380859375) * _2048) * _2049) + _1814;
        _1861 = (((cbLight._m0[_2030].z * 0.3183098733425140380859375) * _2048) * _2049) + _1816;
    }
    uint _1864 = _1724 + 8u;
    float _1877 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _498) * 0.949999988079071044921875);
    float _1878 = _1877 * _1877;
    float _1879 = cbLight._m0[_1724].x + _575;
    float _1880 = cbLight._m0[_1724].y + _576;
    float _1881 = cbLight._m0[_1724].z + _577;
    float _1885 = inversesqrt(dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881)));
    float _1886 = _1885 * _1879;
    float _1887 = _1885 * _1880;
    float _1888 = _1885 * _1881;
    float _1889 = dot(vec3(_495, _496, _497), vec3(cbLight._m0[_1724].xyz));
    float _3959 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1892 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _1893 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1894 = dot(vec3(_495, _496, _497), vec3(_1886, _1887, _1888));
    float _3981 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1897 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _1898 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1886, _1887, _1888));
    float _3992 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1902 = _1878 * _1878;
    float _1906 = ((_1897 * _1897) * (_1902 + (-1.0))) + 1.0;
    float _1914 = exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0);
    float _1915 = 0.959999978542327880859375 - _643;
    float _1917 = 0.959999978542327880859375 - _644;
    float _1918 = 0.959999978542327880859375 - _645;
    float _1925 = 1.0 - _1878;
    float _1936 = (0.5 / (((_1893 * ((_1892 * _1925) + _1878)) + 9.9999999392252902907785028219223e-09) + (((_1893 * _1925) + _1878) * _1892))) * _1892;
    float _4003 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1938 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1902 / ((_1906 * _1906) * 3.141590118408203125));
    uint _1952 = _1724 + 9u;
    float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1765].w)) * _498) * 0.949999988079071044921875);
    float _1964 = _1963 * _1963;
    float _1965 = cbLight._m0[_1765].x + _575;
    float _1966 = cbLight._m0[_1765].y + _576;
    float _1967 = cbLight._m0[_1765].z + _577;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1972 = _1971 * _1965;
    float _1973 = _1971 * _1966;
    float _1974 = _1971 * _1967;
    float _1975 = dot(vec3(_495, _496, _497), vec3(cbLight._m0[_1765].xyz));
    float _4014 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1979 = dot(vec3(_495, _496, _497), vec3(_1972, _1973, _1974));
    float _4025 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1983 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1972, _1973, _1974));
    float _4036 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1987 = _1964 * _1964;
    float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
    float _1998 = exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0);
    float _2005 = 1.0 - _1964;
    float _2015 = (0.5 / (((_1893 * ((_1978 * _2005) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1893 * _2005) + _1964) * _1978))) * _1978;
    float _4047 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
    float _2027 = (((((_1998 * _1915) + _646) * cbLight._m0[_1952].x) * _2017) * _1747) + ((((cbLight._m0[_1864].x * _1716) * ((_1914 * _1915) + _646)) * _1938) * _1761);
    float _2028 = (((((_1998 * _1917) + _648) * cbLight._m0[_1952].y) * _2017) * _1747) + ((((cbLight._m0[_1864].y * _1717) * ((_1914 * _1917) + _648)) * _1938) * _1761);
    float _2029 = (((((_1998 * _1918) + _649) * cbLight._m0[_1952].z) * _2017) * _1747) + ((((cbLight._m0[_1864].z * _1718) * ((_1914 * _1918) + _649)) * _1938) * _1761);
    float _2091;
    float _2093;
    float _2095;
    if (_1801)
    {
        _2091 = _2027;
        _2093 = _2028;
        _2095 = _2029;
    }
    else
    {
        uint _2097 = _1724 + 2u;
        uint _2101 = _1724 + 10u;
        float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _498) * 0.949999988079071044921875);
        float _2116 = _2115 * _2115;
        float _2117 = cbLight._m0[_2097].x + _575;
        float _2118 = cbLight._m0[_2097].y + _576;
        float _2119 = cbLight._m0[_2097].z + _577;
        float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
        float _2124 = _2123 * _2117;
        float _2125 = _2123 * _2118;
        float _2126 = _2123 * _2119;
        float _2127 = dot(vec3(_495, _496, _497), vec3(cbLight._m0[_2097].xyz));
        float _4058 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2131 = dot(vec3(_495, _496, _497), vec3(_2124, _2125, _2126));
        float _4069 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2134 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2135 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2124, _2125, _2126));
        float _4080 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2139 = _2116 * _2116;
        float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
        float _2150 = exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0);
        float _2157 = 1.0 - _2116;
        float _2167 = (0.5 / (((_1893 * ((_2130 * _2157) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_1893 * _2157) + _2116) * _2130))) * _2130;
        float _4091 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2169 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
        float _2170 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _2091 = (((((_2150 * _1915) + _646) * cbLight._m0[_2101].x) * _2169) * _2170) + _2027;
        _2093 = (((((_2150 * _1917) + _648) * cbLight._m0[_2101].y) * _2169) * _2170) + _2028;
        _2095 = (((((_2150 * _1918) + _649) * cbLight._m0[_2101].z) * _2169) * _2170) + _2029;
    }
    float _2205;
    float _2207;
    float _2209;
    if (_1819)
    {
        _2205 = _2091;
        _2207 = _2093;
        _2209 = _2095;
    }
    else
    {
        uint _2216 = _1724 + 3u;
        uint _2220 = _1724 + 11u;
        float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _498) * 0.949999988079071044921875);
        float _2235 = _2234 * _2234;
        float _2236 = cbLight._m0[_2216].x + _575;
        float _2237 = cbLight._m0[_2216].y + _576;
        float _2238 = cbLight._m0[_2216].z + _577;
        float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
        float _2243 = _2242 * _2236;
        float _2244 = _2242 * _2237;
        float _2245 = _2242 * _2238;
        float _2246 = dot(vec3(_495, _496, _497), vec3(cbLight._m0[_2216].xyz));
        float _4107 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2250 = dot(vec3(_495, _496, _497), vec3(_2243, _2244, _2245));
        float _4118 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2254 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2243, _2244, _2245));
        float _4129 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2258 = _2235 * _2235;
        float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
        float _2269 = exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0);
        float _2276 = 1.0 - _2235;
        float _2286 = (0.5 / (((_1893 * ((_2249 * _2276) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_1893 * _2276) + _2235) * _2249))) * _2249;
        float _4140 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2288 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
        float _2289 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _2205 = (((((_2269 * _1915) + _646) * cbLight._m0[_2220].x) * _2288) * _2289) + _2091;
        _2207 = (((((_2269 * _1917) + _648) * cbLight._m0[_2220].y) * _2288) * _2289) + _2093;
        _2209 = (((((_2269 * _1918) + _649) * cbLight._m0[_2220].z) * _2288) * _2289) + _2095;
    }
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_1722.y == 0u)
    {
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2364;
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2364;
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2364;
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.x;
        uint _2391 = uint((float(_2379.y) * floor(float(uint(cbSceneParam._m0[85u].y * _584) / _2380))) + floor(float(uint(cbSceneParam._m0[85u].x * _583) / _2380)));
        float _2401 = (log2(_2367 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2402 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        uint _2405 = uint(isnan(14.0) ? _2402 : (isnan(_2402) ? 14.0 : min(_2402, 14.0)));
        uvec4 _2410 = texelFetch(g_lightClusterGridBuffer, int(((_2405 << 2u) + (_2391 << 6u)) >> 2u));
        uint _2411 = _2410.x;
        uint _2412 = _2379.z;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        if (((((1u << ((_2412 >> 4u) & 15u)) + 4294967295u) & _2411) == 0u) || ((_2412 & 240u) == 0u))
        {
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
        }
        else
        {
            float _2513;
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            uint _2663 = 0u;
            uint _2672;
            bool _2673;
            for (;;)
            {
                _2672 = texelFetch(g_lightClassification, int((((_2405 << 5u) + (_2391 << 9u)) + (_2663 << 2u)) >> 2u)).x;
                _2673 = _2672 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2673)
                {
                    frontier_phi_61_pred = _2657;
                    frontier_phi_61_pred_1 = _2662;
                    frontier_phi_61_pred_2 = _2661;
                    frontier_phi_61_pred_3 = _2660;
                    frontier_phi_61_pred_4 = _2659;
                    frontier_phi_61_pred_5 = _2658;
                }
                else
                {
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    uint _2787;
                    _2781 = _2657;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2661;
                    _2786 = _2662;
                    _2787 = _2672;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    for (;;)
                    {
                        uint _2791 = uint(findLSB(_2787)) + (_2663 << 5u);
                        uint _2788 = (_2787 + 4294967295u) & _2787;
                        uint _2793 = _2791 * 48u;
                        vec4 _2807 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 3u)).x));
                        uint _2813 = (_2791 * 48u) + 4u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2813)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 3u)).x));
                        uint _2832 = (_2791 * 48u) + 8u;
                        vec3 _2843 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x));
                        float _2847 = _2807.x - _2365;
                        float _2848 = _2807.y - _2366;
                        float _2849 = _2807.z - _2367;
                        float _2850 = dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849));
                        float _2853 = inversesqrt(_2850);
                        float _2854 = _2853 * _2847;
                        float _2855 = _2853 * _2848;
                        float _2856 = _2853 * _2849;
                        float _2857 = dot(vec3(_602, _605, _608), vec3(_2854, _2855, _2856));
                        float _2862 = 1.0 - (_2850 * _2807.w);
                        float _4166 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2863 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2864 = sqrt(_2850) * _2826.w;
                        float _2867 = 1.39999997615814208984375 / (_2864 + 1.39999997615814208984375);
                        float _2868 = _2867 * _2867;
                        float _2871 = ((1.0 - _2868) * _2857) + _2868;
                        float _2874 = _2864 * _2864;
                        float _2878 = ((isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0))) * _2863) / ((_2874 * 0.699999988079071044921875) + 1.0);
                        float _2882 = (-0.0) - _2365;
                        float _2883 = (-0.0) - _2366;
                        float _2884 = (-0.0) - _2367;
                        float _2888 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
                        float _2889 = _2888 * _2882;
                        float _2890 = _2888 * _2883;
                        float _2891 = _2888 * _2884;
                        float _2899 = exp2(log2(1.0 / ((_2874 * 3.5) + 5.0)) * 0.25);
                        float _2900 = 1.0 - _677;
                        float _2907 = sqrt(1.0 - ((1.0 - (_2900 * _2900)) * (1.0 - (_2899 * _2899))));
                        float _2908 = _2907 * _2907;
                        float _2909 = _2908 * _2908;
                        float _2910 = _2889 + _2854;
                        float _2911 = _2890 + _2855;
                        float _2912 = _2891 + _2856;
                        float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
                        float _2920 = dot(vec3(_602, _605, _608), vec3(_2889, _2890, _2891));
                        float _4182 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2923 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2924 = dot(vec3(_602, _605, _608), vec3(_2916 * _2910, _2916 * _2911, _2916 * _2912));
                        float _4193 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2927 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                        float _2931 = ((_2927 * _2927) * (_2909 + (-1.0))) + 1.0;
                        float _2932 = _2867 * _2908;
                        float _2933 = _2932 * _2932;
                        float _2936 = ((1.0 - _2933) * _2857) + _2933;
                        float _4204 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2937 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2938 = 1.0 - _2908;
                        float _2948 = (0.5 / (((_2937 * ((_2923 * _2938) + _2908)) + 9.9999999392252902907785028219223e-09) + (((_2937 * _2938) + _2908) * _2923))) * _2937;
                        float _4215 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2959 = (((_2909 * 3.1415927410125732421875) * (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) / ((_2931 * _2931) * ((_2874 * 2.1991131305694580078125) + 3.141590118408203125))) * _2863;
                        _2716 = (_2878 * _2826.x) + _2784;
                        _2717 = (_2878 * _2826.y) + _2785;
                        _2718 = (_2878 * _2826.z) + _2786;
                        _2713 = (_2959 * _2843.x) + _2781;
                        _2714 = (_2959 * _2843.y) + _2782;
                        _2715 = (_2959 * _2843.z) + _2783;
                        if (_2788 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2717;
                            _2786 = _2718;
                            _2787 = _2788;
                        }
                    }
                    frontier_phi_61_pred = _2713;
                    frontier_phi_61_pred_1 = _2718;
                    frontier_phi_61_pred_2 = _2717;
                    frontier_phi_61_pred_3 = _2716;
                    frontier_phi_61_pred_4 = _2715;
                    frontier_phi_61_pred_5 = _2714;
                }
                _2513 = frontier_phi_61_pred;
                _2523 = frontier_phi_61_pred_1;
                _2521 = frontier_phi_61_pred_2;
                _2519 = frontier_phi_61_pred_3;
                _2517 = frontier_phi_61_pred_4;
                _2515 = frontier_phi_61_pred_5;
                uint _2664 = _2663 + 1u;
                if (_2664 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2657 = _2513;
                    _2658 = _2515;
                    _2659 = _2517;
                    _2660 = _2519;
                    _2661 = _2521;
                    _2662 = _2523;
                    _2663 = _2664;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
        }
        uvec4 _2526 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2527 = _2526.z;
        uint _2529 = (_2527 >> 8u) & 15u;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        if (((4294967295u << _2529) & _2411) == 0u)
        {
            _2625 = _2512;
            _2627 = _2514;
            _2629 = _2516;
            _2631 = _2518;
            _2633 = _2520;
            _2635 = _2522;
        }
        else
        {
            float _2650 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
            float _2651 = _2650 * _2365;
            float _2652 = _2650 * _2366;
            float _2653 = _2650 * _2367;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2529 < ((_2527 >> 12u) & 15u))
            {
                float _2626;
                float _2628;
                float _2630;
                float _2632;
                float _2634;
                float _2636;
                float _2764 = _2512;
                float _2765 = _2514;
                float _2766 = _2516;
                float _2767 = _2518;
                float _2768 = _2520;
                float _2769 = _2522;
                uint _2770 = _2529;
                uint _2779;
                bool _2780;
                for (;;)
                {
                    _2779 = texelFetch(g_lightClassification, int((((_2405 << 5u) + (_2391 << 9u)) + (_2770 << 2u)) >> 2u)).x;
                    _2780 = _2779 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2780)
                    {
                        frontier_phi_67_pred = _2767;
                        frontier_phi_67_pred_1 = _2768;
                        frontier_phi_67_pred_2 = _2769;
                        frontier_phi_67_pred_3 = _2766;
                        frontier_phi_67_pred_4 = _2765;
                        frontier_phi_67_pred_5 = _2764;
                    }
                    else
                    {
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _2977 = _2764;
                        float _2978 = _2765;
                        float _2979 = _2766;
                        float _2980 = _2767;
                        float _2981 = _2768;
                        float _2982 = _2769;
                        uint _2983 = _2779;
                        uint _2984;
                        vec4 _3009;
                        float _3010;
                        vec4 _3025;
                        vec3 _3037;
                        vec4 _3053;
                        vec4 _3069;
                        float _3116;
                        bool _3117;
                        for (;;)
                        {
                            uint _2994 = ((_2770 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2983));
                            _2984 = (_2983 + 4294967295u) & _2983;
                            uint _2996 = _2994 * 40u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            _3010 = _3009.w;
                            uint _3012 = (_2994 * 40u) + 4u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3027 = (_2994 * 40u) + 8u;
                            _3037 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x));
                            uint _3040 = (_2994 * 40u) + 16u;
                            _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            uint _3056 = (_2994 * 40u) + 20u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3072 = (_2994 * 40u) + 24u;
                            vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3091 = (_2994 * 40u) + 28u;
                            vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            _3116 = fma(_2367, _3104.z, fma(_2366, _3104.y, _3104.x * _2365)) + _3104.w;
                            _3117 = !((fma(_2367, _3085.z, fma(_2366, _3085.y, _3085.x * _2365)) + _3085.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3117)
                            {
                                float _3144 = _3009.x - _2365;
                                float _3145 = _3009.y - _2366;
                                float _3146 = _3009.z - _2367;
                                float _3147 = dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146));
                                float _3150 = inversesqrt(_3147);
                                float _3151 = _3150 * _3144;
                                float _3152 = _3150 * _3145;
                                float _3153 = _3150 * _3146;
                                float _3157 = 1.0 - (_3147 / (_3010 * _3010));
                                float _4226 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3158 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3162 = sqrt(_3147) * _3025.w;
                                float _3164 = 1.39999997615814208984375 / (_3162 + 1.39999997615814208984375);
                                float _3165 = _3164 * _3164;
                                float _3168 = ((1.0 - _3165) * dot(vec3(_3151, _3152, _3153), vec3(_602, _605, _608))) + _3165;
                                float _3171 = _3162 * _3162;
                                float _3175 = (fma(_2367, _3053.z, fma(_2366, _3053.y, _3053.x * _2365)) + _3053.w) / _3116;
                                float _3176 = (fma(_2367, _3069.z, fma(_2366, _3069.y, _3069.x * _2365)) + _3069.w) / _3116;
                                float _3180 = 1.0 - dot(vec2(_3175, _3176), vec2(_3175, _3176));
                                float _4242 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3181 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3182 = _3181 * (((isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0))) * _3158) / ((_3171 * 0.699999988079071044921875) + 1.0));
                                float _3194 = exp2(log2(1.0 / ((_3171 * 3.5) + 5.0)) * 0.25);
                                float _3195 = 1.0 - _677;
                                float _3202 = sqrt(1.0 - ((1.0 - (_3195 * _3195)) * (1.0 - (_3194 * _3194))));
                                float _3203 = _3202 * _3202;
                                float _3204 = _3203 * _3203;
                                float _3205 = _3151 - _2651;
                                float _3206 = _3152 - _2652;
                                float _3207 = _3153 - _2653;
                                float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                                float _3215 = dot(vec3(_602, _605, _608), vec3((-0.0) - _2651, (-0.0) - _2652, (-0.0) - _2653));
                                float _4253 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3218 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                                float _3219 = dot(vec3(_602, _605, _608), vec3(_3211 * _3205, _3211 * _3206, _3211 * _3207));
                                float _4264 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3222 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3226 = ((_3222 * _3222) * (_3204 + (-1.0))) + 1.0;
                                float _3227 = _3164 * _3203;
                                float _3228 = _3227 * _3227;
                                float _3234 = ((1.0 - _3228) * dot(vec3(_602, _605, _608), vec3(_3151, _3152, _3153))) + _3228;
                                float _4275 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3236 = 1.0 - _3203;
                                float _3246 = (0.5 / (((_3235 * ((_3218 * _3236) + _3203)) + 9.9999999392252902907785028219223e-09) + (((_3235 * _3236) + _3203) * _3218))) * _3235;
                                float _4286 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3256 = (_3181 * _3158) * (((_3204 * 3.1415927410125732421875) * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) / ((_3226 * _3226) * ((_3171 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3256 * _3037.x;
                                frontier_phi_73_pred_1 = _3256 * _3037.y;
                                frontier_phi_73_pred_2 = _3182 * _3025.z;
                                frontier_phi_73_pred_3 = _3182 * _3025.y;
                                frontier_phi_73_pred_4 = _3182 * _3025.x;
                                frontier_phi_73_pred_5 = _3256 * _3037.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3260 = frontier_phi_73_pred;
                            _3261 = frontier_phi_73_pred_1;
                            _3265 = frontier_phi_73_pred_2;
                            _3264 = frontier_phi_73_pred_3;
                            _3263 = frontier_phi_73_pred_4;
                            _3262 = frontier_phi_73_pred_5;
                            _2967 = _3263 + _2980;
                            _2968 = _3264 + _2981;
                            _2969 = _3265 + _2982;
                            _2964 = _3260 + _2977;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            if (_2984 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2984;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2967;
                        frontier_phi_67_pred_1 = _2968;
                        frontier_phi_67_pred_2 = _2969;
                        frontier_phi_67_pred_3 = _2966;
                        frontier_phi_67_pred_4 = _2965;
                        frontier_phi_67_pred_5 = _2964;
                    }
                    _2632 = frontier_phi_67_pred;
                    _2634 = frontier_phi_67_pred_1;
                    _2636 = frontier_phi_67_pred_2;
                    _2630 = frontier_phi_67_pred_3;
                    _2628 = frontier_phi_67_pred_4;
                    _2626 = frontier_phi_67_pred_5;
                    uint _2771 = _2770 + 1u;
                    if (_2771 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2764 = _2626;
                        _2765 = _2628;
                        _2766 = _2630;
                        _2767 = _2632;
                        _2768 = _2634;
                        _2769 = _2636;
                        _2770 = _2771;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2634;
                frontier_phi_55_56_ladder_1 = _2636;
                frontier_phi_55_56_ladder_2 = _2632;
                frontier_phi_55_56_ladder_3 = _2630;
                frontier_phi_55_56_ladder_4 = _2628;
                frontier_phi_55_56_ladder_5 = _2626;
            }
            else
            {
                frontier_phi_55_56_ladder = _2520;
                frontier_phi_55_56_ladder_1 = _2522;
                frontier_phi_55_56_ladder_2 = _2518;
                frontier_phi_55_56_ladder_3 = _2516;
                frontier_phi_55_56_ladder_4 = _2514;
                frontier_phi_55_56_ladder_5 = _2512;
            }
            _2625 = frontier_phi_55_56_ladder_5;
            _2627 = frontier_phi_55_56_ladder_4;
            _2629 = frontier_phi_55_56_ladder_3;
            _2631 = frontier_phi_55_56_ladder_2;
            _2633 = frontier_phi_55_56_ladder;
            _2635 = frontier_phi_55_56_ladder_1;
        }
        float _2640 = isnan(1.0) ? _661 : (isnan(_661) ? 1.0 : min(_661, 1.0));
        _2424 = (_2640 * _2631) + _1857;
        _2426 = (_2640 * _2633) + _1859;
        _2428 = (_2640 * _2635) + _1861;
        _2430 = ((_2625 * _646) * _2640) + _2205;
        _2432 = ((_2627 * _648) * _2640) + _2207;
        _2434 = ((_2629 * _649) * _2640) + _2209;
    }
    else
    {
        _2424 = _1857;
        _2426 = _1859;
        _2428 = _1861;
        _2430 = _2205;
        _2432 = _2207;
        _2434 = _2209;
    }
    float _4302 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4313 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4324 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    uint _2454 = _621 + 6u;
    float _2462 = _583 / cbSceneParam._m0[86u].x;
    float _2463 = _584 / cbSceneParam._m0[86u].y;
    vec4 _2477 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2462, _2463, (log2((isnan(cbSceneParam._m0[77u].w) ? _518 : (isnan(_518) ? cbSceneParam._m0[77u].w : min(_518, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2479 = _2477.x;
    float _2480 = _2477.y;
    float _2481 = _2477.z;
    float _2482 = _2477.w;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    if (_518 > cbSceneParam._m0[78u].w)
    {
        float _2537 = isnan(_518) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _518 : min(cbSceneParam._m0[80u].w, _518));
        float _2538 = _2537 / _518;
        float _2549 = _2538 * _568;
        float _2550 = _569 * _2538;
        float _2551 = (-0.0) - _2550;
        float _2553 = _2538 * _570;
        float _2555 = (cbSceneParam._m0[77u].w * _2551) / _2537;
        float _2556 = _2555 + cbSceneParam._m0[79u].w;
        float _2557 = cbSceneParam._m0[79u].w - _2550;
        float _2563 = sqrt(((_2549 * _2549) + (_2550 * _2550)) + (_2553 * _2553));
        float _2566 = (1.0 - (cbSceneParam._m0[77u].w / _2537)) * _2563;
        float _2571 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2573 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2726;
        if (abs((_2551 - _2555) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2726 = ((((_2556 > 0.0) ? exp2(_2571 * _2556) : (2.0 - exp2(_2573 * _2556))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2566;
        }
        else
        {
            float _2686 = 1.0 / cbSceneParam._m0[80u].x;
            float _2687 = isnan(_2557) ? _2556 : (isnan(_2556) ? _2557 : max(_2556, _2557));
            float _2688 = isnan(_2557) ? _2556 : (isnan(_2556) ? _2557 : min(_2556, _2557));
            float _2697 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : min(_2687, 0.0));
            float _2698 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : min(_2688, 0.0));
            _2726 = ((abs(_2563 / _2551) * cbSceneParam._m0[80u].y) * ((((_2697 - _2698) * 2.0) - ((exp2(_2571 * (isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0)))) - exp2(_2571 * (isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0))))) * _2686)) - ((exp2(_2573 * _2697) - exp2(_2573 * _2698)) * _2686))) + (_2566 * cbSceneParam._m0[80u].z);
        }
        vec4 _2728 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2462, _2463, 1.0), 0.0);
        float _2737 = exp2((_2726 * (-1.44269502162933349609375)) * (1.0 - _2728.w));
        float _2738 = log2(_2737);
        float _2754 = log2(_2482);
        _2575 = (exp2(_2754 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].x)) * _2728.x) / cbSceneParam._m0[78u].x)) + _2479;
        _2577 = (exp2(_2754 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].y)) * _2728.y) / cbSceneParam._m0[78u].y)) + _2480;
        _2579 = (exp2(_2754 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].z)) * _2728.z) / cbSceneParam._m0[78u].z)) + _2481;
        _2581 = _2737 * _2482;
    }
    else
    {
        _2575 = _2479;
        _2577 = _2480;
        _2579 = _2481;
        _2581 = _2482;
    }
    float _2593 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2594 = _2593 == 3.0;
    float _2595 = log2(_2581);
    float _2602 = exp2(_2595 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2424 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _661))) + ((_2430 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1471)) * cbPerFrame._m0[3u].x));
    float _2603 = exp2(_2595 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2426 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _661))) + ((_2432 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1471)) * cbPerFrame._m0[3u].x));
    float _2604 = exp2(_2595 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2428 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _661))) + ((_2434 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1471)) * cbPerFrame._m0[3u].x));
    float _2613 = (_2593 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2613 * (_2594 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2575)));
    SV_Target.y = _2613 * (_2594 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2577)));
    SV_Target.z = _2613 * (_2594 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2579)));
    SV_Target.w = cbInstanceData._m0[_2454].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2454].w;
}


