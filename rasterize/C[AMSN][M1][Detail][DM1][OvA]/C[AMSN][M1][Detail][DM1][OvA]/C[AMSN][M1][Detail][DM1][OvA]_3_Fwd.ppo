#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _873;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _177 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _178 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _179 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _245 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _254 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _222.x) * cbMtdParam._m0[9u].x) * _245.x;
    float _258 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _222.y) * cbMtdParam._m0[9u].y) * _245.y;
    float _262 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _222.z) * cbMtdParam._m0[9u].z) * _245.z;
    vec4 _279 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _283 = _279.z;
    vec4 _296 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _310 = cbMtdParam._m0[13u].w * _283;
    float _313 = (((((_283 * 2.0) * _296.z) * cbMtdParam._m0[14u].x) - _310) * cbMtdParam._m0[13u].y) + _310;
    float _317 = (_279.x * 2.0) + (-1.0);
    float _319 = (_279.y * 2.0) + (-1.0);
    float _320 = dot(vec2(_317, _319), vec2(_317, _319));
    float _3187 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _326 = sqrt(1.0 - (isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0))));
    float _333 = (cbMtdParam._m0[13u].x * ((_296.x * 2.0) + (-1.0))) + _317;
    float _334 = (cbMtdParam._m0[13u].x * ((_296.y * 2.0) + (-1.0))) + _319;
    float _337 = fma(_326, _192 * NORMAL.x, fma(_334, _199 * TANGENT.x, (_185 * _177) * _333));
    float _340 = fma(_326, _192 * NORMAL.y, fma(_334, _199 * TANGENT.y, (_185 * _178) * _333));
    float _343 = fma(_326, _192 * NORMAL.z, fma(_334, _199 * TANGENT.z, (_185 * _179) * _333));
    float _347 = inversesqrt(dot(vec3(_337, _340, _343), vec3(_337, _340, _343)));
    float _348 = _347 * _337;
    float _349 = _347 * _340;
    float _350 = _347 * _343;
    float _3198 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _351 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
    float _3209 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3220 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3231 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _370 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _412 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _422 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _412);
    float _423 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _412);
    float _424 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _412);
    float _428 = inversesqrt(dot(vec3(_422, _423, _424), vec3(_422, _423, _424)));
    float _429 = _422 * _428;
    float _430 = _423 * _428;
    float _431 = _424 * _428;
    float _437 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _438 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _457 = fma(_350, cbSceneParam._m0[5u].z, fma(_349, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _348));
    float _460 = fma(_350, cbSceneParam._m0[6u].z, fma(_349, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _348));
    float _463 = fma(_350, cbSceneParam._m0[7u].z, fma(_349, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _348));
    uint _476 = uint(roundEven(NORMAL.w)) * 13u;
    uint _478 = (_476 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _484 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0)))) * cbInstanceData._m0[_478].x;
    float _485 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0)))) * cbInstanceData._m0[_478].y;
    float _486 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0)))) * cbInstanceData._m0[_478].z;
    float _3242 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _487 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
    float _3253 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _488 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
    float _3264 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
    vec4 _498 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _437, cbSceneParam._m0[86u].y * _438));
    float _501 = _498.x * TEXCOORD_5.w;
    float _502 = dot(vec3(_348, _349, _350), vec3(_429, _430, _431));
    float _505 = _502 * 2.0;
    float _509 = (_505 * _348) - _429;
    float _510 = (_505 * _349) - _430;
    float _511 = (_505 * _350) - _431;
    float _515 = abs(dot(vec3(_429, _430, _431), vec3(_348, _349, _350)));
    float _3275 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _517 = sqrt(_351);
    float _530 = exp2((_517 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_517 * 3.0));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _872;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _597 = fma(_570, cbModelParam._m0[26u].z, fma(_566, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _562));
        float _601 = fma(_570, cbModelParam._m0[27u].z, fma(_566, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _562));
        float _605 = fma(_570, cbModelParam._m0[28u].z, fma(_566, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _562));
        float _630 = _562 + _348;
        float _631 = _566 + _349;
        float _632 = _570 + _350;
        float _642 = fma(_632, cbModelParam._m0[26u].z, fma(_631, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _630)) - _597;
        float _643 = fma(_632, cbModelParam._m0[27u].z, fma(_631, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _630)) - _601;
        float _644 = fma(_632, cbModelParam._m0[28u].z, fma(_631, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _630)) - _605;
        float _648 = inversesqrt(dot(vec3(_642, _643, _644), vec3(_642, _643, _644)));
        float _661 = ((_648 * _642) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_597 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _662 = ((_648 * _643) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_601 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _663 = ((_648 * _644) / cbModelParam._m0[34u].z) + ((((((_605 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        float _700 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_666.x + (-0.5));
        float _702 = _700 * (_666.y + (-0.5));
        float _703 = _700 * (_666.z + (-0.5));
        float _710 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_673.x + (-0.5));
        float _712 = _710 * (_673.y + (-0.5));
        float _713 = _710 * (_673.z + (-0.5));
        float _720 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_680.x + (-0.5));
        float _722 = _720 * (_680.y + (-0.5));
        float _723 = _720 * (_680.z + (-0.5));
        float _730 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_687.x + (-0.5));
        float _732 = _730 * (_687.y + (-0.5));
        float _733 = _730 * (_687.z + (-0.5));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _736 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _737 = _701 * 0.5;
        float _738 = _711 * 0.5;
        float _739 = _721 * 0.5;
        float _740 = dot(vec3(_737, _738, _739), vec3(_737, _738, _739));
        float _745 = (_740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_740);
        float _754 = (dot(vec3(_348, _349, _350), vec3(_745 * _737, _745 * _738, _745 * _739)) + 1.0) * 0.5;
        float _3301 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _764 = sqrt(((_738 * _738) + (_737 * _737)) + (_739 * _739)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3312 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _766 = _765 * 2.0;
        float _770 = (1.0 - _765) / (_765 + 1.0);
        float _3323 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _780 = ((((1.0 - _771) * (_766 + 2.0)) * exp2(log2(isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * (_766 + 1.0))) + _771) * _734;
        float _781 = _702 * 0.5;
        float _782 = _712 * 0.5;
        float _783 = _722 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _797 = (dot(vec3(_348, _349, _350), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _806 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_735 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _3356 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_808 + 1.0))) + _813) * _735;
        float _823 = _703 * 0.5;
        float _824 = _713 * 0.5;
        float _825 = _723 * 0.5;
        float _826 = dot(vec3(_823, _824, _825), vec3(_823, _824, _825));
        float _831 = (_826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_826);
        float _839 = (dot(vec3(_348, _349, _350), vec3(_831 * _823, _831 * _824, _831 * _825)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _848 = sqrt(((_824 * _824) + (_823 * _823)) + (_825 * _825)) / (_736 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _850 = _849 * 2.0;
        float _854 = (1.0 - _849) / (_849 + 1.0);
        float _3389 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _864 = ((((1.0 - _855) * (_850 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_850 + 1.0))) + _855) * _736;
        _872 = _703;
        _874 = _702;
        _875 = _701;
        _876 = _713;
        _877 = _712;
        _878 = _711;
        _879 = _723;
        _880 = _722;
        _881 = _721;
        _882 = _736;
        _883 = _735;
        _884 = _734;
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0)));
        _886 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
        _887 = cbModelParam._m0[36u].z * (isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0)));
    }
    else
    {
        _872 = _873;
        _874 = _873;
        _875 = _873;
        _876 = _873;
        _877 = _873;
        _878 = _873;
        _879 = _873;
        _880 = _873;
        _881 = _873;
        _882 = _873;
        _883 = _873;
        _884 = _873;
        _885 = 0.0;
        _886 = 0.0;
        _887 = 0.0;
    }
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _913 = fma(_570, cbModelParam._m0[30u].z, fma(_566, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _562));
        float _917 = fma(_570, cbModelParam._m0[31u].z, fma(_566, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _562));
        float _921 = fma(_570, cbModelParam._m0[32u].z, fma(_566, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _562));
        float _944 = _562 + _348;
        float _945 = _566 + _349;
        float _946 = _570 + _350;
        float _956 = fma(_946, cbModelParam._m0[30u].z, fma(_945, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _944)) - _913;
        float _957 = fma(_946, cbModelParam._m0[31u].z, fma(_945, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _944)) - _917;
        float _958 = fma(_946, cbModelParam._m0[32u].z, fma(_945, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _944)) - _921;
        float _962 = inversesqrt(dot(vec3(_956, _957, _958), vec3(_956, _957, _958)));
        float _975 = ((_962 * _956) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_913 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_962 * _957) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_917 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_962 * _958) / cbModelParam._m0[35u].z) + ((((((_921 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        float _1012 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_979.x + (-0.5));
        float _1014 = _1012 * (_979.y + (-0.5));
        float _1015 = _1012 * (_979.z + (-0.5));
        float _1022 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_986.x + (-0.5));
        float _1024 = _1022 * (_986.y + (-0.5));
        float _1025 = _1022 * (_986.z + (-0.5));
        float _1032 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_993.x + (-0.5));
        float _1034 = _1032 * (_993.y + (-0.5));
        float _1035 = _1032 * (_993.z + (-0.5));
        float _1042 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1000.x + (-0.5));
        float _1044 = _1042 * (_1000.y + (-0.5));
        float _1045 = _1042 * (_1000.z + (-0.5));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = _1013 * 0.5;
        float _1050 = _1023 * 0.5;
        float _1051 = _1033 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1065 = (dot(vec3(_348, _349, _350), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _3430 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1074 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3441 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _3452 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * (_1076 + 1.0))) + _1081) * _1046;
        float _1091 = _1014 * 0.5;
        float _1092 = _1024 * 0.5;
        float _1093 = _1034 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_348, _349, _350), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3485 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_1118 + 1.0))) + _1123) * _1047;
        float _1133 = _1015 * 0.5;
        float _1134 = _1025 * 0.5;
        float _1135 = _1035 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_348, _349, _350), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3518 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_1160 + 1.0))) + _1165) * _1048;
        _1182 = _1015;
        _1183 = _1014;
        _1184 = _1013;
        _1185 = _1025;
        _1186 = _1024;
        _1187 = _1023;
        _1188 = _1035;
        _1189 = _1034;
        _1190 = _1033;
        _1191 = _1048;
        _1192 = _1047;
        _1193 = _1046;
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1195 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1196 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
    }
    else
    {
        _1182 = _873;
        _1183 = _873;
        _1184 = _873;
        _1185 = _873;
        _1186 = _873;
        _1187 = _873;
        _1188 = _873;
        _1189 = _873;
        _1190 = _873;
        _1191 = _873;
        _1192 = _873;
        _1193 = _873;
        _1194 = 0.0;
        _1195 = 0.0;
        _1196 = 0.0;
    }
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _885)) + _885;
    float _1207 = (cbModelParam._m0[1u].x * (_1195 - _886)) + _886;
    float _1208 = (cbModelParam._m0[1u].x * (_1196 - _887)) + _887;
    float _1229 = fma(_1208, cbSceneParam._m0[89u].z, fma(_1207, cbSceneParam._m0[89u].y, _1206 * cbSceneParam._m0[89u].x));
    float _1232 = fma(_1208, cbSceneParam._m0[90u].z, fma(_1207, cbSceneParam._m0[90u].y, _1206 * cbSceneParam._m0[90u].x));
    float _1235 = fma(_1208, cbSceneParam._m0[91u].z, fma(_1207, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1206));
    float _1250 = _509 * 0.5;
    float _1251 = _510 * 0.5;
    float _1252 = _511 * 0.5;
    float _1253 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_1184, _1187, _1190, _1193));
    float _1256 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_1183, _1186, _1189, _1192));
    float _1259 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1293;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1266 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_872, _876, _879, _882));
        float _1270 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_874, _877, _880, _883));
        float _1274 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_875, _878, _881, _884));
        float _1281 = dot(vec4(cbModelParam._m0[39u]), vec4(_1250, _1251, _1252, 1.0));
        _1293 = dot(vec3(isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1281) ? 0.0 : (isnan(0.0) ? _1281 : max(0.0, _1281))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1293 = 1.0;
    }
    float _1304;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1295 = dot(vec4(cbModelParam._m0[40u]), vec4(_1250, _1251, _1252, 1.0));
        _1304 = dot(vec3(isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1295) ? 0.0 : (isnan(0.0) ? _1295 : max(0.0, _1295))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1304 = 1.0;
    }
    float _1308 = (_1304 * cbModelParam._m0[1u].x) + (_1293 * (1.0 - cbModelParam._m0[1u].x));
    float _1318 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _351);
    float _1319 = isnan(_1318) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1318 : min(cbModelParam._m0[25u].z, _1318));
    float _1399;
    float _1401;
    float _1403;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1366 = fma(_570, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _562)) + cbModelParam._m0[13u].w;
        float _1370 = fma(_570, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _562)) + cbModelParam._m0[14u].w;
        float _1374 = fma(_570, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _562)) + cbModelParam._m0[15u].w;
        float _1377 = fma(_511, cbModelParam._m0[13u].z, fma(_510, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _509));
        float _1380 = fma(_511, cbModelParam._m0[14u].z, fma(_510, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _509));
        float _1383 = fma(_511, cbModelParam._m0[15u].z, fma(_510, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _509));
        float _1411;
        if (_1377 > 0.0)
        {
            _1411 = abs((1.0 - _1366) / _1377);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1366 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1411 = frontier_phi_14_12_ladder;
        }
        float _1617;
        if (_1380 > 0.0)
        {
            _1617 = abs((1.0 - _1370) / _1380);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1370 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1617 = frontier_phi_23_19_ladder;
        }
        float _1860;
        if (_1383 > 0.0)
        {
            _1860 = abs((1.0 - _1374) / _1383);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1374 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1860 = frontier_phi_35_30_ladder;
        }
        float _1862 = isnan(_1617) ? _1411 : (isnan(_1411) ? _1617 : min(_1411, _1617));
        float _1863 = isnan(_1860) ? _1862 : (isnan(_1862) ? _1860 : min(_1862, _1860));
        float _1867 = (_1863 * _1377) + _1366;
        float _1868 = (_1863 * _1380) + _1370;
        float _1869 = (_1863 * _1383) + _1374;
        float _1870 = _1863 * 9.9999997473787516355514526367188e-05;
        float _1872 = (-1.0) - _1870;
        float _1874 = _1870 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1869 > _1874) || ((_1869 < _1872) || ((_1868 > _1874) || ((_1868 < _1872) || ((_1867 < _1872) || (_1867 > _1874))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1993 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1869, cbModelParam._m0[9u].z, fma(_1868, cbModelParam._m0[9u].y, _1867 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1869, cbModelParam._m0[10u].z, fma(_1868, cbModelParam._m0[10u].y, _1867 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1869, cbModelParam._m0[11u].z, fma(_1868, cbModelParam._m0[11u].y, _1867 * cbModelParam._m0[11u].x))), _1319);
            frontier_phi_13_35_ladder = _1993.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1993.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1993.x * cbModelParam._m0[1u].y;
        }
        _1399 = frontier_phi_13_35_ladder_2;
        _1401 = frontier_phi_13_35_ladder_1;
        _1403 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1387 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_509, _510, _511), _1319);
        _1399 = _1387.x * cbModelParam._m0[1u].y;
        _1401 = _1387.y * cbModelParam._m0[1u].y;
        _1403 = _1387.z * cbModelParam._m0[1u].y;
    }
    float _1407 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _351);
    float _1408 = isnan(_1407) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1407 : min(cbModelParam._m0[25u].w, _1407));
    float _1501;
    float _1503;
    float _1505;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1465 = fma(_570, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _562)) + cbModelParam._m0[21u].w;
        float _1469 = fma(_570, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _562)) + cbModelParam._m0[22u].w;
        float _1473 = fma(_570, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _562)) + cbModelParam._m0[23u].w;
        float _1476 = fma(_511, cbModelParam._m0[21u].z, fma(_510, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _509));
        float _1479 = fma(_511, cbModelParam._m0[22u].z, fma(_510, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _509));
        float _1482 = fma(_511, cbModelParam._m0[23u].z, fma(_510, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _509));
        float _1622;
        if (_1476 > 0.0)
        {
            _1622 = abs((1.0 - _1465) / _1476);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1465 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1622 = frontier_phi_25_21_ladder;
        }
        float _1887;
        if (_1479 > 0.0)
        {
            _1887 = abs((1.0 - _1469) / _1479);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1469 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1887 = frontier_phi_37_32_ladder;
        }
        float _2092;
        if (_1482 > 0.0)
        {
            _2092 = abs((1.0 - _1473) / _1482);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1473 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2092 = frontier_phi_46_43_ladder;
        }
        float _2094 = isnan(_1887) ? _1622 : (isnan(_1622) ? _1887 : min(_1622, _1887));
        float _2095 = isnan(_2092) ? _2094 : (isnan(_2094) ? _2092 : min(_2094, _2092));
        float _2099 = (_2095 * _1476) + _1465;
        float _2100 = (_2095 * _1479) + _1469;
        float _2101 = (_2095 * _1482) + _1473;
        float _2102 = _2095 * 9.9999997473787516355514526367188e-05;
        float _2103 = (-1.0) - _2102;
        float _2105 = _2102 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2101 > _2105) || ((_2101 < _2103) || ((_2100 > _2105) || ((_2100 < _2103) || ((_2099 < _2103) || (_2099 > _2105))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2300 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2101, cbModelParam._m0[17u].z, fma(_2100, cbModelParam._m0[17u].y, _2099 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2101, cbModelParam._m0[18u].z, fma(_2100, cbModelParam._m0[18u].y, _2099 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2101, cbModelParam._m0[19u].z, fma(_2100, cbModelParam._m0[19u].y, _2099 * cbModelParam._m0[19u].x))), _1408);
            frontier_phi_22_46_ladder = _2300.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2300.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2300.x * cbModelParam._m0[1u].z;
        }
        _1501 = frontier_phi_22_46_ladder_2;
        _1503 = frontier_phi_22_46_ladder_1;
        _1505 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1485 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_509, _510, _511), _1408);
        _1501 = _1485.x * cbModelParam._m0[1u].z;
        _1503 = _1485.y * cbModelParam._m0[1u].z;
        _1505 = _1485.z * cbModelParam._m0[1u].z;
    }
    float _1517 = ((((1.0 - _530) * ((_517 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_530 * _517)) * _501;
    float _1518 = _1517 * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1519 = _1517 * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1520 = _1517 * ((cbModelParam._m0[1u].w * (_1505 - _1403)) + _1403);
    float _1523 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1519, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1519, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1519, cbSceneParam._m0[91u].y, _1518 * cbSceneParam._m0[91u].x));
    uvec4 _1539 = floatBitsToUint(cbInstanceData._m0[_476 + 5u]);
    uint _1541 = _1539.x * 14u;
    uint _1542 = _1541 + 13u;
    float _1549 = _501 + (-1.0);
    float _1554 = (cbLight._m0[_1542].x * _1549) + 1.0;
    float _1555 = (cbLight._m0[_1542].y * _1549) + 1.0;
    float _1556 = (cbLight._m0[_1542].z * _1549) + 1.0;
    float _1557 = (cbLight._m0[_1542].w * _1549) + 1.0;
    uint _1558 = _1541 + 5u;
    float _1564 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
    uint _1568 = _1541 + 4u;
    float _1575 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
    uint _1579 = _1541 | 1u;
    float _1590 = dot(vec3(cbLight._m0[_1541].xyz), vec3(_348, _349, _350));
    float _1593 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_348, _349, _350));
    float _3654 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
    float _3665 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
    float _1598 = (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.3183098733425140380859375;
    float _1600 = (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 0.3183098733425140380859375;
    float _1607 = ((cbLight._m0[_1558].x * _1564) * _1600) + ((cbLight._m0[_1568].x * _1575) * _1598);
    float _1608 = ((_1564 * cbLight._m0[_1558].y) * _1600) + ((_1575 * cbLight._m0[_1568].y) * _1598);
    float _1609 = ((_1564 * cbLight._m0[_1558].z) * _1600) + ((_1575 * cbLight._m0[_1568].z) * _1598);
    uvec4 _1614 = floatBitsToUint(cbLight._m0[_1541 + 12u]);
    bool _1616 = _1614.x == 0u;
    float _1627;
    float _1629;
    float _1631;
    if (_1616)
    {
        _1627 = _1607;
        _1629 = _1608;
        _1631 = _1609;
    }
    else
    {
        uint _1635 = _1541 + 6u;
        float _1651 = (dot(vec3(cbLight._m0[_1541 + 2u].xyz), vec3(_348, _349, _350)) * 0.5) + 0.5;
        float _1652 = _1651 * _1651;
        float _3676 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1654 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
        _1627 = (((cbLight._m0[_1635].x * 0.3183098733425140380859375) * _1653) * _1654) + _1607;
        _1629 = (((cbLight._m0[_1635].y * 0.3183098733425140380859375) * _1653) * _1654) + _1608;
        _1631 = (((cbLight._m0[_1635].z * 0.3183098733425140380859375) * _1653) * _1654) + _1609;
    }
    bool _1634 = _1614.y == 0u;
    float _1672;
    float _1674;
    float _1676;
    if (_1634)
    {
        _1672 = _1627;
        _1674 = _1629;
        _1676 = _1631;
    }
    else
    {
        uint _1831 = _1541 + 7u;
        float _1847 = (dot(vec3(cbLight._m0[_1541 + 3u].xyz), vec3(_348, _349, _350)) * 0.5) + 0.5;
        float _1848 = _1847 * _1847;
        float _3692 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1850 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _1672 = (((cbLight._m0[_1831].x * 0.3183098733425140380859375) * _1849) * _1850) + _1627;
        _1674 = (((cbLight._m0[_1831].y * 0.3183098733425140380859375) * _1849) * _1850) + _1629;
        _1676 = (((cbLight._m0[_1831].z * 0.3183098733425140380859375) * _1849) * _1850) + _1631;
    }
    uint _1679 = _1541 + 8u;
    float _1692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1541].w)) * _351) * 0.949999988079071044921875);
    float _1693 = _1692 * _1692;
    float _1694 = cbLight._m0[_1541].x + _429;
    float _1695 = cbLight._m0[_1541].y + _430;
    float _1696 = cbLight._m0[_1541].z + _431;
    float _1700 = inversesqrt(dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696)));
    float _1701 = _1700 * _1694;
    float _1702 = _1700 * _1695;
    float _1703 = _1700 * _1696;
    float _1704 = dot(vec3(_348, _349, _350), vec3(cbLight._m0[_1541].xyz));
    float _3708 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1707 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _1708 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _1709 = dot(vec3(_348, _349, _350), vec3(_1701, _1702, _1703));
    float _3730 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1712 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _1713 = dot(vec3(cbLight._m0[_1541].xyz), vec3(_1701, _1702, _1703));
    float _3741 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1717 = _1693 * _1693;
    float _1721 = ((_1712 * _1712) * (_1717 + (-1.0))) + 1.0;
    float _1732 = (exp2(log2(1.0 - (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1733 = 1.0 - _1693;
    float _1744 = (0.5 / (((_1708 * ((_1707 * _1733) + _1693)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _1733) + _1693) * _1707))) * _1707;
    float _3752 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1746 = (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1717 / ((_1721 * _1721) * 3.141590118408203125));
    uint _1757 = _1541 + 9u;
    float _1768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1579].w)) * _351) * 0.949999988079071044921875);
    float _1769 = _1768 * _1768;
    float _1770 = cbLight._m0[_1579].x + _429;
    float _1771 = cbLight._m0[_1579].y + _430;
    float _1772 = cbLight._m0[_1579].z + _431;
    float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
    float _1777 = _1776 * _1770;
    float _1778 = _1776 * _1771;
    float _1779 = _1776 * _1772;
    float _1780 = dot(vec3(_348, _349, _350), vec3(cbLight._m0[_1579].xyz));
    float _3763 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _1784 = dot(vec3(_348, _349, _350), vec3(_1777, _1778, _1779));
    float _3774 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _1788 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_1777, _1778, _1779));
    float _3785 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1792 = _1769 * _1769;
    float _1796 = ((_1787 * _1787) * (_1792 + (-1.0))) + 1.0;
    float _1805 = (exp2(log2(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1806 = 1.0 - _1769;
    float _1816 = (0.5 / (((_1708 * ((_1783 * _1806) + _1769)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _1806) + _1769) * _1783))) * _1783;
    float _3796 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1818 = (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1792 / ((_1796 * _1796) * 3.141590118408203125));
    float _1828 = (((_1805 * cbLight._m0[_1757].x) * _1818) * _1564) + (((_1732 * cbLight._m0[_1679].x) * _1746) * _1575);
    float _1829 = (((_1805 * cbLight._m0[_1757].y) * _1818) * _1564) + (((_1732 * cbLight._m0[_1679].y) * _1746) * _1575);
    float _1830 = (((_1805 * cbLight._m0[_1757].z) * _1818) * _1564) + (((_1732 * cbLight._m0[_1679].z) * _1746) * _1575);
    float _1892;
    float _1894;
    float _1896;
    if (_1616)
    {
        _1892 = _1828;
        _1894 = _1829;
        _1896 = _1830;
    }
    else
    {
        uint _1898 = _1541 + 2u;
        uint _1902 = _1541 + 10u;
        float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _351) * 0.949999988079071044921875);
        float _1917 = _1916 * _1916;
        float _1918 = cbLight._m0[_1898].x + _429;
        float _1919 = cbLight._m0[_1898].y + _430;
        float _1920 = cbLight._m0[_1898].z + _431;
        float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
        float _1925 = _1924 * _1918;
        float _1926 = _1924 * _1919;
        float _1927 = _1924 * _1920;
        float _1928 = dot(vec3(_348, _349, _350), vec3(cbLight._m0[_1898].xyz));
        float _3807 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1931 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1932 = dot(vec3(_348, _349, _350), vec3(_1925, _1926, _1927));
        float _3818 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1935 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1936 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_1925, _1926, _1927));
        float _3829 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1940 = _1917 * _1917;
        float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
        float _1953 = (exp2(log2(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1954 = 1.0 - _1917;
        float _1964 = (0.5 / (((_1708 * ((_1931 * _1954) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _1954) + _1917) * _1931))) * _1931;
        float _3840 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1966 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
        float _1967 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
        _1892 = (((_1953 * cbLight._m0[_1902].x) * _1966) * _1967) + _1828;
        _1894 = (((_1953 * cbLight._m0[_1902].y) * _1966) * _1967) + _1829;
        _1896 = (((_1953 * cbLight._m0[_1902].z) * _1966) * _1967) + _1830;
    }
    float _2002;
    float _2004;
    float _2006;
    if (_1634)
    {
        _2002 = _1892;
        _2004 = _1894;
        _2006 = _1896;
    }
    else
    {
        uint _2013 = _1541 + 3u;
        uint _2017 = _1541 + 11u;
        float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _351) * 0.949999988079071044921875);
        float _2032 = _2031 * _2031;
        float _2033 = cbLight._m0[_2013].x + _429;
        float _2034 = cbLight._m0[_2013].y + _430;
        float _2035 = cbLight._m0[_2013].z + _431;
        float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
        float _2040 = _2039 * _2033;
        float _2041 = _2039 * _2034;
        float _2042 = _2039 * _2035;
        float _2043 = dot(vec3(_348, _349, _350), vec3(cbLight._m0[_2013].xyz));
        float _3856 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _2047 = dot(vec3(_348, _349, _350), vec3(_2040, _2041, _2042));
        float _3867 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _2051 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2040, _2041, _2042));
        float _3878 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2055 = _2032 * _2032;
        float _2059 = ((_2050 * _2050) * (_2055 + (-1.0))) + 1.0;
        float _2068 = (exp2(log2(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2069 = 1.0 - _2032;
        float _2079 = (0.5 / (((_1708 * ((_2046 * _2069) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _2069) + _2032) * _2046))) * _2046;
        float _3889 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2081 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_2055 / ((_2059 * _2059) * 3.141590118408203125));
        float _2082 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _2002 = (((_2068 * cbLight._m0[_2017].x) * _2081) * _2082) + _1892;
        _2004 = (((_2068 * cbLight._m0[_2017].y) * _2081) * _2082) + _1894;
        _2006 = (((_2068 * cbLight._m0[_2017].z) * _2081) * _2082) + _1896;
    }
    float _2217;
    float _2219;
    float _2221;
    float _2223;
    float _2225;
    float _2227;
    if (_1539.y == 0u)
    {
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2158 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2157;
        float _2159 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2157;
        float _2160 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2157;
        uvec4 _2172 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2173 = _2172.x;
        uint _2184 = uint((float(_2172.y) * floor(float(uint(cbSceneParam._m0[85u].y * _438) / _2173))) + floor(float(uint(cbSceneParam._m0[85u].x * _437) / _2173)));
        float _2194 = (log2(_2160 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2195 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        uint _2198 = uint(isnan(14.0) ? _2195 : (isnan(_2195) ? 14.0 : min(_2195, 14.0)));
        uvec4 _2203 = texelFetch(g_lightClusterGridBuffer, int(((_2198 << 2u) + (_2184 << 6u)) >> 2u));
        uint _2204 = _2203.x;
        uint _2205 = _2172.z;
        float _2305;
        float _2307;
        float _2309;
        float _2311;
        float _2313;
        float _2315;
        if (((((1u << ((_2205 >> 4u) & 15u)) + 4294967295u) & _2204) == 0u) || ((_2205 & 240u) == 0u))
        {
            _2305 = 0.0;
            _2307 = 0.0;
            _2309 = 0.0;
            _2311 = 0.0;
            _2313 = 0.0;
            _2315 = 0.0;
        }
        else
        {
            float _2306;
            float _2308;
            float _2310;
            float _2312;
            float _2314;
            float _2316;
            float _2450 = 0.0;
            float _2451 = 0.0;
            float _2452 = 0.0;
            float _2453 = 0.0;
            float _2454 = 0.0;
            float _2455 = 0.0;
            uint _2456 = 0u;
            uint _2465;
            bool _2466;
            for (;;)
            {
                _2465 = texelFetch(g_lightClassification, int((((_2198 << 5u) + (_2184 << 9u)) + (_2456 << 2u)) >> 2u)).x;
                _2466 = _2465 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2466)
                {
                    frontier_phi_61_pred = _2450;
                    frontier_phi_61_pred_1 = _2455;
                    frontier_phi_61_pred_2 = _2454;
                    frontier_phi_61_pred_3 = _2453;
                    frontier_phi_61_pred_4 = _2452;
                    frontier_phi_61_pred_5 = _2451;
                }
                else
                {
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    uint _2580;
                    _2574 = _2450;
                    _2575 = _2451;
                    _2576 = _2452;
                    _2577 = _2453;
                    _2578 = _2454;
                    _2579 = _2455;
                    _2580 = _2465;
                    float _2506;
                    float _2507;
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    for (;;)
                    {
                        uint _2584 = uint(findLSB(_2580)) + (_2456 << 5u);
                        uint _2581 = (_2580 + 4294967295u) & _2580;
                        uint _2586 = _2584 * 48u;
                        vec4 _2600 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2586)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 3u)).x));
                        uint _2606 = (_2584 * 48u) + 4u;
                        vec4 _2619 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2606)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 3u)).x));
                        uint _2625 = (_2584 * 48u) + 8u;
                        vec3 _2636 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2625)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 2u)).x));
                        float _2640 = _2600.x - _2158;
                        float _2641 = _2600.y - _2159;
                        float _2642 = _2600.z - _2160;
                        float _2643 = dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642));
                        float _2646 = inversesqrt(_2643);
                        float _2647 = _2646 * _2640;
                        float _2648 = _2646 * _2641;
                        float _2649 = _2646 * _2642;
                        float _2650 = dot(vec3(_457, _460, _463), vec3(_2647, _2648, _2649));
                        float _2655 = 1.0 - (_2643 * _2600.w);
                        float _3915 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
                        float _2656 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
                        float _2657 = sqrt(_2643) * _2619.w;
                        float _2660 = 1.39999997615814208984375 / (_2657 + 1.39999997615814208984375);
                        float _2661 = _2660 * _2660;
                        float _2664 = ((1.0 - _2661) * _2650) + _2661;
                        float _2667 = _2657 * _2657;
                        float _2671 = ((isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0))) * _2656) / ((_2667 * 0.699999988079071044921875) + 1.0);
                        float _2675 = (-0.0) - _2158;
                        float _2676 = (-0.0) - _2159;
                        float _2677 = (-0.0) - _2160;
                        float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
                        float _2682 = _2681 * _2675;
                        float _2683 = _2681 * _2676;
                        float _2684 = _2681 * _2677;
                        float _2692 = exp2(log2(1.0 / ((_2667 * 3.5) + 5.0)) * 0.25);
                        float _2693 = 1.0 - _517;
                        float _2700 = sqrt(1.0 - ((1.0 - (_2693 * _2693)) * (1.0 - (_2692 * _2692))));
                        float _2701 = _2700 * _2700;
                        float _2702 = _2701 * _2701;
                        float _2703 = _2682 + _2647;
                        float _2704 = _2683 + _2648;
                        float _2705 = _2684 + _2649;
                        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
                        float _2713 = dot(vec3(_457, _460, _463), vec3(_2682, _2683, _2684));
                        float _3931 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
                        float _2716 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
                        float _2717 = dot(vec3(_457, _460, _463), vec3(_2709 * _2703, _2709 * _2704, _2709 * _2705));
                        float _3942 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _2720 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
                        float _2724 = ((_2720 * _2720) * (_2702 + (-1.0))) + 1.0;
                        float _2725 = _2660 * _2701;
                        float _2726 = _2725 * _2725;
                        float _2729 = ((1.0 - _2726) * _2650) + _2726;
                        float _3953 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2730 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                        float _2731 = 1.0 - _2701;
                        float _2741 = (0.5 / (((_2730 * ((_2716 * _2731) + _2701)) + 9.9999999392252902907785028219223e-09) + (((_2730 * _2731) + _2701) * _2716))) * _2730;
                        float _3964 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2752 = (((_2702 * 3.1415927410125732421875) * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) / ((_2724 * _2724) * ((_2667 * 2.1991131305694580078125) + 3.141590118408203125))) * _2656;
                        _2509 = (_2671 * _2619.x) + _2577;
                        _2510 = (_2671 * _2619.y) + _2578;
                        _2511 = (_2671 * _2619.z) + _2579;
                        _2506 = (_2752 * _2636.x) + _2574;
                        _2507 = (_2752 * _2636.y) + _2575;
                        _2508 = (_2752 * _2636.z) + _2576;
                        if (_2581 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2574 = _2506;
                            _2575 = _2507;
                            _2576 = _2508;
                            _2577 = _2509;
                            _2578 = _2510;
                            _2579 = _2511;
                            _2580 = _2581;
                        }
                    }
                    frontier_phi_61_pred = _2506;
                    frontier_phi_61_pred_1 = _2511;
                    frontier_phi_61_pred_2 = _2510;
                    frontier_phi_61_pred_3 = _2509;
                    frontier_phi_61_pred_4 = _2508;
                    frontier_phi_61_pred_5 = _2507;
                }
                _2306 = frontier_phi_61_pred;
                _2316 = frontier_phi_61_pred_1;
                _2314 = frontier_phi_61_pred_2;
                _2312 = frontier_phi_61_pred_3;
                _2310 = frontier_phi_61_pred_4;
                _2308 = frontier_phi_61_pred_5;
                uint _2457 = _2456 + 1u;
                if (_2457 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2450 = _2306;
                    _2451 = _2308;
                    _2452 = _2310;
                    _2453 = _2312;
                    _2454 = _2314;
                    _2455 = _2316;
                    _2456 = _2457;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2305 = _2306;
            _2307 = _2308;
            _2309 = _2310;
            _2311 = _2312;
            _2313 = _2314;
            _2315 = _2316;
        }
        uvec4 _2319 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2320 = _2319.z;
        uint _2322 = (_2320 >> 8u) & 15u;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        if (((4294967295u << _2322) & _2204) == 0u)
        {
            _2418 = _2305;
            _2420 = _2307;
            _2422 = _2309;
            _2424 = _2311;
            _2426 = _2313;
            _2428 = _2315;
        }
        else
        {
            float _2443 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
            float _2444 = _2443 * _2158;
            float _2445 = _2443 * _2159;
            float _2446 = _2443 * _2160;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2322 < ((_2320 >> 12u) & 15u))
            {
                float _2419;
                float _2421;
                float _2423;
                float _2425;
                float _2427;
                float _2429;
                float _2557 = _2305;
                float _2558 = _2307;
                float _2559 = _2309;
                float _2560 = _2311;
                float _2561 = _2313;
                float _2562 = _2315;
                uint _2563 = _2322;
                uint _2572;
                bool _2573;
                for (;;)
                {
                    _2572 = texelFetch(g_lightClassification, int((((_2198 << 5u) + (_2184 << 9u)) + (_2563 << 2u)) >> 2u)).x;
                    _2573 = _2572 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2573)
                    {
                        frontier_phi_67_pred = _2560;
                        frontier_phi_67_pred_1 = _2561;
                        frontier_phi_67_pred_2 = _2562;
                        frontier_phi_67_pred_3 = _2559;
                        frontier_phi_67_pred_4 = _2558;
                        frontier_phi_67_pred_5 = _2557;
                    }
                    else
                    {
                        float _2757;
                        float _2758;
                        float _2759;
                        float _2760;
                        float _2761;
                        float _2762;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _2770 = _2557;
                        float _2771 = _2558;
                        float _2772 = _2559;
                        float _2773 = _2560;
                        float _2774 = _2561;
                        float _2775 = _2562;
                        uint _2776 = _2572;
                        uint _2777;
                        vec4 _2802;
                        float _2803;
                        vec4 _2818;
                        vec3 _2830;
                        vec4 _2846;
                        vec4 _2862;
                        float _2909;
                        bool _2910;
                        for (;;)
                        {
                            uint _2787 = ((_2563 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2776));
                            _2777 = (_2776 + 4294967295u) & _2776;
                            uint _2789 = _2787 * 40u;
                            _2802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 3u)).x));
                            _2803 = _2802.w;
                            uint _2805 = (_2787 * 40u) + 4u;
                            _2818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 3u)).x));
                            uint _2820 = (_2787 * 40u) + 8u;
                            _2830 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x));
                            uint _2833 = (_2787 * 40u) + 16u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2849 = (_2787 * 40u) + 20u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            uint _2865 = (_2787 * 40u) + 24u;
                            vec4 _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2884 = (_2787 * 40u) + 28u;
                            vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            _2909 = fma(_2160, _2897.z, fma(_2159, _2897.y, _2897.x * _2158)) + _2897.w;
                            _2910 = !((fma(_2160, _2878.z, fma(_2159, _2878.y, _2878.x * _2158)) + _2878.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2910)
                            {
                                float _2937 = _2802.x - _2158;
                                float _2938 = _2802.y - _2159;
                                float _2939 = _2802.z - _2160;
                                float _2940 = dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939));
                                float _2943 = inversesqrt(_2940);
                                float _2944 = _2943 * _2937;
                                float _2945 = _2943 * _2938;
                                float _2946 = _2943 * _2939;
                                float _2950 = 1.0 - (_2940 / (_2803 * _2803));
                                float _3975 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                                float _2951 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                                float _2955 = sqrt(_2940) * _2818.w;
                                float _2957 = 1.39999997615814208984375 / (_2955 + 1.39999997615814208984375);
                                float _2958 = _2957 * _2957;
                                float _2961 = ((1.0 - _2958) * dot(vec3(_2944, _2945, _2946), vec3(_457, _460, _463))) + _2958;
                                float _2964 = _2955 * _2955;
                                float _2968 = (fma(_2160, _2846.z, fma(_2159, _2846.y, _2846.x * _2158)) + _2846.w) / _2909;
                                float _2969 = (fma(_2160, _2862.z, fma(_2159, _2862.y, _2862.x * _2158)) + _2862.w) / _2909;
                                float _2973 = 1.0 - dot(vec2(_2968, _2969), vec2(_2968, _2969));
                                float _3991 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                                float _2974 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                                float _2975 = _2974 * (((isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))) * _2951) / ((_2964 * 0.699999988079071044921875) + 1.0));
                                float _2987 = exp2(log2(1.0 / ((_2964 * 3.5) + 5.0)) * 0.25);
                                float _2988 = 1.0 - _517;
                                float _2995 = sqrt(1.0 - ((1.0 - (_2988 * _2988)) * (1.0 - (_2987 * _2987))));
                                float _2996 = _2995 * _2995;
                                float _2997 = _2996 * _2996;
                                float _2998 = _2944 - _2444;
                                float _2999 = _2945 - _2445;
                                float _3000 = _2946 - _2446;
                                float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
                                float _3008 = dot(vec3(_457, _460, _463), vec3((-0.0) - _2444, (-0.0) - _2445, (-0.0) - _2446));
                                float _4002 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3011 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                                float _3012 = dot(vec3(_457, _460, _463), vec3(_3004 * _2998, _3004 * _2999, _3004 * _3000));
                                float _4013 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3015 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                                float _3019 = ((_3015 * _3015) * (_2997 + (-1.0))) + 1.0;
                                float _3020 = _2957 * _2996;
                                float _3021 = _3020 * _3020;
                                float _3027 = ((1.0 - _3021) * dot(vec3(_457, _460, _463), vec3(_2944, _2945, _2946))) + _3021;
                                float _4024 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3028 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                                float _3029 = 1.0 - _2996;
                                float _3039 = (0.5 / (((_3028 * ((_3011 * _3029) + _2996)) + 9.9999999392252902907785028219223e-09) + (((_3028 * _3029) + _2996) * _3011))) * _3028;
                                float _4035 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3049 = (_2974 * _2951) * (((_2997 * 3.1415927410125732421875) * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) / ((_3019 * _3019) * ((_2964 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3049 * _2830.x;
                                frontier_phi_73_pred_1 = _3049 * _2830.y;
                                frontier_phi_73_pred_2 = _2975 * _2818.z;
                                frontier_phi_73_pred_3 = _2975 * _2818.y;
                                frontier_phi_73_pred_4 = _2975 * _2818.x;
                                frontier_phi_73_pred_5 = _3049 * _2830.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3053 = frontier_phi_73_pred;
                            _3054 = frontier_phi_73_pred_1;
                            _3058 = frontier_phi_73_pred_2;
                            _3057 = frontier_phi_73_pred_3;
                            _3056 = frontier_phi_73_pred_4;
                            _3055 = frontier_phi_73_pred_5;
                            _2760 = _3056 + _2773;
                            _2761 = _3057 + _2774;
                            _2762 = _3058 + _2775;
                            _2757 = _3053 + _2770;
                            _2758 = _3054 + _2771;
                            _2759 = _3055 + _2772;
                            if (_2777 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2770 = _2757;
                                _2771 = _2758;
                                _2772 = _2759;
                                _2773 = _2760;
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2777;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2760;
                        frontier_phi_67_pred_1 = _2761;
                        frontier_phi_67_pred_2 = _2762;
                        frontier_phi_67_pred_3 = _2759;
                        frontier_phi_67_pred_4 = _2758;
                        frontier_phi_67_pred_5 = _2757;
                    }
                    _2425 = frontier_phi_67_pred;
                    _2427 = frontier_phi_67_pred_1;
                    _2429 = frontier_phi_67_pred_2;
                    _2423 = frontier_phi_67_pred_3;
                    _2421 = frontier_phi_67_pred_4;
                    _2419 = frontier_phi_67_pred_5;
                    uint _2564 = _2563 + 1u;
                    if (_2564 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2557 = _2419;
                        _2558 = _2421;
                        _2559 = _2423;
                        _2560 = _2425;
                        _2561 = _2427;
                        _2562 = _2429;
                        _2563 = _2564;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2427;
                frontier_phi_55_56_ladder_1 = _2429;
                frontier_phi_55_56_ladder_2 = _2425;
                frontier_phi_55_56_ladder_3 = _2423;
                frontier_phi_55_56_ladder_4 = _2421;
                frontier_phi_55_56_ladder_5 = _2419;
            }
            else
            {
                frontier_phi_55_56_ladder = _2313;
                frontier_phi_55_56_ladder_1 = _2315;
                frontier_phi_55_56_ladder_2 = _2311;
                frontier_phi_55_56_ladder_3 = _2309;
                frontier_phi_55_56_ladder_4 = _2307;
                frontier_phi_55_56_ladder_5 = _2305;
            }
            _2418 = frontier_phi_55_56_ladder_5;
            _2420 = frontier_phi_55_56_ladder_4;
            _2422 = frontier_phi_55_56_ladder_3;
            _2424 = frontier_phi_55_56_ladder_2;
            _2426 = frontier_phi_55_56_ladder;
            _2428 = frontier_phi_55_56_ladder_1;
        }
        float _2433 = isnan(1.0) ? _501 : (isnan(_501) ? 1.0 : min(_501, 1.0));
        _2217 = (_2433 * _2424) + _1672;
        _2219 = (_2433 * _2426) + _1674;
        _2221 = (_2433 * _2428) + _1676;
        _2223 = ((_2418 * 0.039999999105930328369140625) * _2433) + _2002;
        _2225 = ((_2420 * 0.039999999105930328369140625) * _2433) + _2004;
        _2227 = ((_2422 * 0.039999999105930328369140625) * _2433) + _2006;
    }
    else
    {
        _2217 = _1672;
        _2219 = _1674;
        _2221 = _1676;
        _2223 = _2002;
        _2225 = _2004;
        _2227 = _2006;
    }
    float _4051 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _4062 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _4073 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    uint _2247 = _476 + 6u;
    float _2255 = _437 / cbSceneParam._m0[86u].x;
    float _2256 = _438 / cbSceneParam._m0[86u].y;
    vec4 _2270 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2255, _2256, (log2((isnan(cbSceneParam._m0[77u].w) ? _370 : (isnan(_370) ? cbSceneParam._m0[77u].w : min(_370, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2272 = _2270.x;
    float _2273 = _2270.y;
    float _2274 = _2270.z;
    float _2275 = _2270.w;
    float _2368;
    float _2370;
    float _2372;
    float _2374;
    if (_370 > cbSceneParam._m0[78u].w)
    {
        float _2330 = isnan(_370) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _370 : min(cbSceneParam._m0[80u].w, _370));
        float _2331 = _2330 / _370;
        float _2342 = _2331 * _422;
        float _2343 = _423 * _2331;
        float _2344 = (-0.0) - _2343;
        float _2346 = _2331 * _424;
        float _2348 = (cbSceneParam._m0[77u].w * _2344) / _2330;
        float _2349 = _2348 + cbSceneParam._m0[79u].w;
        float _2350 = cbSceneParam._m0[79u].w - _2343;
        float _2356 = sqrt(((_2342 * _2342) + (_2343 * _2343)) + (_2346 * _2346));
        float _2359 = (1.0 - (cbSceneParam._m0[77u].w / _2330)) * _2356;
        float _2364 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2366 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2519;
        if (abs((_2344 - _2348) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2519 = ((((_2349 > 0.0) ? exp2(_2364 * _2349) : (2.0 - exp2(_2366 * _2349))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2359;
        }
        else
        {
            float _2479 = 1.0 / cbSceneParam._m0[80u].x;
            float _2480 = isnan(_2350) ? _2349 : (isnan(_2349) ? _2350 : max(_2349, _2350));
            float _2481 = isnan(_2350) ? _2349 : (isnan(_2349) ? _2350 : min(_2349, _2350));
            float _2490 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : min(_2480, 0.0));
            float _2491 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : min(_2481, 0.0));
            _2519 = ((abs(_2356 / _2344) * cbSceneParam._m0[80u].y) * ((((_2490 - _2491) * 2.0) - ((exp2(_2364 * (isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0)))) - exp2(_2364 * (isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0))))) * _2479)) - ((exp2(_2366 * _2490) - exp2(_2366 * _2491)) * _2479))) + (_2359 * cbSceneParam._m0[80u].z);
        }
        vec4 _2521 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2255, _2256, 1.0), 0.0);
        float _2530 = exp2((_2519 * (-1.44269502162933349609375)) * (1.0 - _2521.w));
        float _2531 = log2(_2530);
        float _2547 = log2(_2275);
        _2368 = (exp2(_2547 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2531 * cbSceneParam._m0[78u].x)) * _2521.x) / cbSceneParam._m0[78u].x)) + _2272;
        _2370 = (exp2(_2547 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2531 * cbSceneParam._m0[78u].y)) * _2521.y) / cbSceneParam._m0[78u].y)) + _2273;
        _2372 = (exp2(_2547 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2531 * cbSceneParam._m0[78u].z)) * _2521.z) / cbSceneParam._m0[78u].z)) + _2274;
        _2374 = _2530 * _2275;
    }
    else
    {
        _2368 = _2272;
        _2370 = _2273;
        _2372 = _2274;
        _2374 = _2275;
    }
    float _2386 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2387 = _2386 == 3.0;
    float _2388 = log2(_2374);
    float _2395 = exp2(_2388 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_2217 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _501))) + ((_2223 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1308)) * cbPerFrame._m0[3u].x));
    float _2396 = exp2(_2388 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_2219 + ((isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))) * _501))) + ((_2225 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1308)) * cbPerFrame._m0[3u].x));
    float _2397 = exp2(_2388 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2221 + ((isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))) * _501))) + ((_2227 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1308)) * cbPerFrame._m0[3u].x));
    float _2406 = (_2386 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2406 * (_2387 ? _2395 : (_2395 + (cbSceneParam._m0[72u].w * _2368)));
    SV_Target.y = _2406 * (_2387 ? _2396 : (_2396 + (cbSceneParam._m0[72u].w * _2370)));
    SV_Target.z = _2406 * (_2387 ? _2397 : (_2397 + (cbSceneParam._m0[72u].w * _2372)));
    SV_Target.w = cbInstanceData._m0[_2247].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2247].w;
}


