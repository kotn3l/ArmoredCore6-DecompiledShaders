#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _875;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _179 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _180 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _181 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _256 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _224.x) * cbMtdParam._m0[9u].x) * _247.x;
    float _260 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _224.y) * cbMtdParam._m0[9u].y) * _247.y;
    float _264 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _224.z) * cbMtdParam._m0[9u].z) * _247.z;
    vec4 _281 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _285 = _281.z;
    vec4 _298 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _312 = cbMtdParam._m0[13u].w * _285;
    float _315 = (((((_285 * 2.0) * _298.z) * cbMtdParam._m0[14u].x) - _312) * cbMtdParam._m0[13u].y) + _312;
    float _319 = (_281.x * 2.0) + (-1.0);
    float _321 = (_281.y * 2.0) + (-1.0);
    float _322 = dot(vec2(_319, _321), vec2(_319, _321));
    float _3213 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _328 = sqrt(1.0 - (isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0))));
    float _335 = (cbMtdParam._m0[13u].x * ((_298.x * 2.0) + (-1.0))) + _319;
    float _336 = (cbMtdParam._m0[13u].x * ((_298.y * 2.0) + (-1.0))) + _321;
    float _339 = fma(_328, _194 * NORMAL.x, fma(_336, _201 * TANGENT.x, (_187 * _179) * _335));
    float _342 = fma(_328, _194 * NORMAL.y, fma(_336, _201 * TANGENT.y, (_187 * _180) * _335));
    float _345 = fma(_328, _194 * NORMAL.z, fma(_336, _201 * TANGENT.z, (_187 * _181) * _335));
    float _349 = inversesqrt(dot(vec3(_339, _342, _345), vec3(_339, _342, _345)));
    float _350 = _349 * _339;
    float _351 = _349 * _342;
    float _352 = _349 * _345;
    float _3224 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _353 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
    float _3235 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3246 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3257 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _372 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _424 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _414);
    float _425 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _414);
    float _426 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _414);
    float _430 = inversesqrt(dot(vec3(_424, _425, _426), vec3(_424, _425, _426)));
    float _431 = _424 * _430;
    float _432 = _425 * _430;
    float _433 = _426 * _430;
    float _439 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _440 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _459 = fma(_352, cbSceneParam._m0[5u].z, fma(_351, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _350));
    float _462 = fma(_352, cbSceneParam._m0[6u].z, fma(_351, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _350));
    float _465 = fma(_352, cbSceneParam._m0[7u].z, fma(_351, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _350));
    uint _478 = uint(roundEven(NORMAL.w)) * 13u;
    uint _480 = (_478 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _486 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0)))) * cbInstanceData._m0[_480].x;
    float _487 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0)))) * cbInstanceData._m0[_480].y;
    float _488 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0)))) * cbInstanceData._m0[_480].z;
    float _3268 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
    float _3279 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _3290 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    vec4 _500 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _439, cbSceneParam._m0[86u].y * _440));
    float _503 = _500.x * TEXCOORD_5.w;
    float _504 = dot(vec3(_350, _351, _352), vec3(_431, _432, _433));
    float _507 = _504 * 2.0;
    float _511 = (_507 * _350) - _431;
    float _512 = (_507 * _351) - _432;
    float _513 = (_507 * _352) - _433;
    float _517 = abs(dot(vec3(_431, _432, _433), vec3(_350, _351, _352)));
    float _3301 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _519 = sqrt(_353);
    float _532 = exp2((_519 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_519 * 3.0));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _874;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _599 = fma(_572, cbModelParam._m0[26u].z, fma(_568, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _564));
        float _603 = fma(_572, cbModelParam._m0[27u].z, fma(_568, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _564));
        float _607 = fma(_572, cbModelParam._m0[28u].z, fma(_568, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _564));
        float _632 = _564 + _350;
        float _633 = _568 + _351;
        float _634 = _572 + _352;
        float _644 = fma(_634, cbModelParam._m0[26u].z, fma(_633, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _632)) - _599;
        float _645 = fma(_634, cbModelParam._m0[27u].z, fma(_633, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _632)) - _603;
        float _646 = fma(_634, cbModelParam._m0[28u].z, fma(_633, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _632)) - _607;
        float _650 = inversesqrt(dot(vec3(_644, _645, _646), vec3(_644, _645, _646)));
        float _663 = ((_650 * _644) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_599 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _664 = ((_650 * _645) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_603 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _665 = ((_650 * _646) / cbModelParam._m0[34u].z) + ((((((_607 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        float _702 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_668.x + (-0.5));
        float _704 = _702 * (_668.y + (-0.5));
        float _705 = _702 * (_668.z + (-0.5));
        float _712 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_675.x + (-0.5));
        float _714 = _712 * (_675.y + (-0.5));
        float _715 = _712 * (_675.z + (-0.5));
        float _722 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_682.x + (-0.5));
        float _724 = _722 * (_682.y + (-0.5));
        float _725 = _722 * (_682.z + (-0.5));
        float _732 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_689.x + (-0.5));
        float _734 = _732 * (_689.y + (-0.5));
        float _735 = _732 * (_689.z + (-0.5));
        float _736 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _737 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = _703 * 0.5;
        float _740 = _713 * 0.5;
        float _741 = _723 * 0.5;
        float _742 = dot(vec3(_739, _740, _741), vec3(_739, _740, _741));
        float _747 = (_742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_742);
        float _756 = (dot(vec3(_350, _351, _352), vec3(_747 * _739, _747 * _740, _747 * _741)) + 1.0) * 0.5;
        float _3327 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _766 = sqrt(((_740 * _740) + (_739 * _739)) + (_741 * _741)) / (_736 + 9.9999997473787516355514526367188e-06);
        float _3338 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _768 = _767 * 2.0;
        float _772 = (1.0 - _767) / (_767 + 1.0);
        float _3349 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _782 = ((((1.0 - _773) * (_768 + 2.0)) * exp2(log2(isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * (_768 + 1.0))) + _773) * _736;
        float _783 = _704 * 0.5;
        float _784 = _714 * 0.5;
        float _785 = _724 * 0.5;
        float _786 = dot(vec3(_783, _784, _785), vec3(_783, _784, _785));
        float _791 = (_786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_786);
        float _799 = (dot(vec3(_350, _351, _352), vec3(_791 * _783, _791 * _784, _791 * _785)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _808 = sqrt(((_784 * _784) + (_783 * _783)) + (_785 * _785)) / (_737 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3382 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_810 + 1.0))) + _815) * _737;
        float _825 = _705 * 0.5;
        float _826 = _715 * 0.5;
        float _827 = _725 * 0.5;
        float _828 = dot(vec3(_825, _826, _827), vec3(_825, _826, _827));
        float _833 = (_828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_828);
        float _841 = (dot(vec3(_350, _351, _352), vec3(_833 * _825, _833 * _826, _833 * _827)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _850 = sqrt(((_826 * _826) + (_825 * _825)) + (_827 * _827)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _852 = _851 * 2.0;
        float _856 = (1.0 - _851) / (_851 + 1.0);
        float _3415 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _866 = ((((1.0 - _857) * (_852 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_852 + 1.0))) + _857) * _738;
        _874 = _705;
        _876 = _704;
        _877 = _703;
        _878 = _715;
        _879 = _714;
        _880 = _713;
        _881 = _725;
        _882 = _724;
        _883 = _723;
        _884 = _738;
        _885 = _737;
        _886 = _736;
        _887 = cbModelParam._m0[36u].z * (isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0)));
        _888 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0)));
    }
    else
    {
        _874 = _875;
        _876 = _875;
        _877 = _875;
        _878 = _875;
        _879 = _875;
        _880 = _875;
        _881 = _875;
        _882 = _875;
        _883 = _875;
        _884 = _875;
        _885 = _875;
        _886 = _875;
        _887 = 0.0;
        _888 = 0.0;
        _889 = 0.0;
    }
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _915 = fma(_572, cbModelParam._m0[30u].z, fma(_568, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _564));
        float _919 = fma(_572, cbModelParam._m0[31u].z, fma(_568, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _564));
        float _923 = fma(_572, cbModelParam._m0[32u].z, fma(_568, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _564));
        float _946 = _564 + _350;
        float _947 = _568 + _351;
        float _948 = _572 + _352;
        float _958 = fma(_948, cbModelParam._m0[30u].z, fma(_947, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _946)) - _915;
        float _959 = fma(_948, cbModelParam._m0[31u].z, fma(_947, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _946)) - _919;
        float _960 = fma(_948, cbModelParam._m0[32u].z, fma(_947, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _946)) - _923;
        float _964 = inversesqrt(dot(vec3(_958, _959, _960), vec3(_958, _959, _960)));
        float _977 = ((_964 * _958) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_915 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_964 * _959) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_919 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _979 = ((_964 * _960) / cbModelParam._m0[35u].z) + ((((((_923 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        float _1014 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_981.x + (-0.5));
        float _1016 = _1014 * (_981.y + (-0.5));
        float _1017 = _1014 * (_981.z + (-0.5));
        float _1024 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_988.x + (-0.5));
        float _1026 = _1024 * (_988.y + (-0.5));
        float _1027 = _1024 * (_988.z + (-0.5));
        float _1034 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_995.x + (-0.5));
        float _1036 = _1034 * (_995.y + (-0.5));
        float _1037 = _1034 * (_995.z + (-0.5));
        float _1044 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1002.x + (-0.5));
        float _1046 = _1044 * (_1002.y + (-0.5));
        float _1047 = _1044 * (_1002.z + (-0.5));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = _1015 * 0.5;
        float _1052 = _1025 * 0.5;
        float _1053 = _1035 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1067 = (dot(vec3(_350, _351, _352), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1076 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _3478 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_1078 + 1.0))) + _1083) * _1048;
        float _1093 = _1016 * 0.5;
        float _1094 = _1026 * 0.5;
        float _1095 = _1036 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_350, _351, _352), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3511 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1120 + 1.0))) + _1125) * _1049;
        float _1135 = _1017 * 0.5;
        float _1136 = _1027 * 0.5;
        float _1137 = _1037 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_350, _351, _352), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3544 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1162 + 1.0))) + _1167) * _1050;
        _1184 = _1017;
        _1185 = _1016;
        _1186 = _1015;
        _1187 = _1027;
        _1188 = _1026;
        _1189 = _1025;
        _1190 = _1037;
        _1191 = _1036;
        _1192 = _1035;
        _1193 = _1050;
        _1194 = _1049;
        _1195 = _1048;
        _1196 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
        _1197 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
        _1198 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
    }
    else
    {
        _1184 = _875;
        _1185 = _875;
        _1186 = _875;
        _1187 = _875;
        _1188 = _875;
        _1189 = _875;
        _1190 = _875;
        _1191 = _875;
        _1192 = _875;
        _1193 = _875;
        _1194 = _875;
        _1195 = _875;
        _1196 = 0.0;
        _1197 = 0.0;
        _1198 = 0.0;
    }
    float _1208 = (cbModelParam._m0[1u].x * (_1196 - _887)) + _887;
    float _1209 = (cbModelParam._m0[1u].x * (_1197 - _888)) + _888;
    float _1210 = (cbModelParam._m0[1u].x * (_1198 - _889)) + _889;
    float _1231 = fma(_1210, cbSceneParam._m0[89u].z, fma(_1209, cbSceneParam._m0[89u].y, _1208 * cbSceneParam._m0[89u].x));
    float _1234 = fma(_1210, cbSceneParam._m0[90u].z, fma(_1209, cbSceneParam._m0[90u].y, _1208 * cbSceneParam._m0[90u].x));
    float _1237 = fma(_1210, cbSceneParam._m0[91u].z, fma(_1209, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1208));
    float _1252 = _511 * 0.5;
    float _1253 = _512 * 0.5;
    float _1254 = _513 * 0.5;
    float _1255 = dot(vec4(_1252, _1253, _1254, 1.0), vec4(_1186, _1189, _1192, _1195));
    float _1258 = dot(vec4(_1252, _1253, _1254, 1.0), vec4(_1185, _1188, _1191, _1194));
    float _1261 = dot(vec4(_1252, _1253, _1254, 1.0), vec4(_1184, _1187, _1190, _1193));
    float _1295;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1268 = dot(vec4(_1252, _1253, _1254, 1.0), vec4(_874, _878, _881, _884));
        float _1272 = dot(vec4(_1252, _1253, _1254, 1.0), vec4(_876, _879, _882, _885));
        float _1276 = dot(vec4(_1252, _1253, _1254, 1.0), vec4(_877, _880, _883, _886));
        float _1283 = dot(vec4(cbModelParam._m0[39u]), vec4(_1252, _1253, _1254, 1.0));
        _1295 = dot(vec3(isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1283) ? 0.0 : (isnan(0.0) ? _1283 : max(0.0, _1283))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1295 = 1.0;
    }
    float _1306;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1297 = dot(vec4(cbModelParam._m0[40u]), vec4(_1252, _1253, _1254, 1.0));
        _1306 = dot(vec3(isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1297) ? 0.0 : (isnan(0.0) ? _1297 : max(0.0, _1297))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1306 = 1.0;
    }
    float _1310 = (_1306 * cbModelParam._m0[1u].x) + (_1295 * (1.0 - cbModelParam._m0[1u].x));
    float _1320 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _353);
    float _1321 = isnan(_1320) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1320 : min(cbModelParam._m0[25u].z, _1320));
    float _1401;
    float _1403;
    float _1405;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1368 = fma(_572, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _564)) + cbModelParam._m0[13u].w;
        float _1372 = fma(_572, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _564)) + cbModelParam._m0[14u].w;
        float _1376 = fma(_572, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _564)) + cbModelParam._m0[15u].w;
        float _1379 = fma(_513, cbModelParam._m0[13u].z, fma(_512, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _511));
        float _1382 = fma(_513, cbModelParam._m0[14u].z, fma(_512, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _511));
        float _1385 = fma(_513, cbModelParam._m0[15u].z, fma(_512, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _511));
        float _1413;
        if (_1379 > 0.0)
        {
            _1413 = abs((1.0 - _1368) / _1379);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1368 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1413 = frontier_phi_14_12_ladder;
        }
        float _1640;
        if (_1382 > 0.0)
        {
            _1640 = abs((1.0 - _1372) / _1382);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1372 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1640 = frontier_phi_23_19_ladder;
        }
        float _1886;
        if (_1385 > 0.0)
        {
            _1886 = abs((1.0 - _1376) / _1385);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1376 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1886 = frontier_phi_35_30_ladder;
        }
        float _1888 = isnan(_1640) ? _1413 : (isnan(_1413) ? _1640 : min(_1413, _1640));
        float _1889 = isnan(_1886) ? _1888 : (isnan(_1888) ? _1886 : min(_1888, _1886));
        float _1893 = (_1889 * _1379) + _1368;
        float _1894 = (_1889 * _1382) + _1372;
        float _1895 = (_1889 * _1385) + _1376;
        float _1896 = _1889 * 9.9999997473787516355514526367188e-05;
        float _1898 = (-1.0) - _1896;
        float _1900 = _1896 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1895 > _1900) || ((_1895 < _1898) || ((_1894 > _1900) || ((_1894 < _1898) || ((_1893 < _1898) || (_1893 > _1900))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1895, cbModelParam._m0[9u].z, fma(_1894, cbModelParam._m0[9u].y, _1893 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1895, cbModelParam._m0[10u].z, fma(_1894, cbModelParam._m0[10u].y, _1893 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1895, cbModelParam._m0[11u].z, fma(_1894, cbModelParam._m0[11u].y, _1893 * cbModelParam._m0[11u].x))), _1321);
            frontier_phi_13_35_ladder = _2019.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2019.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2019.x * cbModelParam._m0[1u].y;
        }
        _1401 = frontier_phi_13_35_ladder_2;
        _1403 = frontier_phi_13_35_ladder_1;
        _1405 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_511, _512, _513), _1321);
        _1401 = _1389.x * cbModelParam._m0[1u].y;
        _1403 = _1389.y * cbModelParam._m0[1u].y;
        _1405 = _1389.z * cbModelParam._m0[1u].y;
    }
    float _1409 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _353);
    float _1410 = isnan(_1409) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1409 : min(cbModelParam._m0[25u].w, _1409));
    float _1503;
    float _1505;
    float _1507;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1467 = fma(_572, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _564)) + cbModelParam._m0[21u].w;
        float _1471 = fma(_572, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _564)) + cbModelParam._m0[22u].w;
        float _1475 = fma(_572, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _564)) + cbModelParam._m0[23u].w;
        float _1478 = fma(_513, cbModelParam._m0[21u].z, fma(_512, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _511));
        float _1481 = fma(_513, cbModelParam._m0[22u].z, fma(_512, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _511));
        float _1484 = fma(_513, cbModelParam._m0[23u].z, fma(_512, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _511));
        float _1645;
        if (_1478 > 0.0)
        {
            _1645 = abs((1.0 - _1467) / _1478);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1467 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1645 = frontier_phi_25_21_ladder;
        }
        float _1913;
        if (_1481 > 0.0)
        {
            _1913 = abs((1.0 - _1471) / _1481);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1471 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1913 = frontier_phi_37_32_ladder;
        }
        float _2118;
        if (_1484 > 0.0)
        {
            _2118 = abs((1.0 - _1475) / _1484);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1475 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2118 = frontier_phi_46_43_ladder;
        }
        float _2120 = isnan(_1913) ? _1645 : (isnan(_1645) ? _1913 : min(_1645, _1913));
        float _2121 = isnan(_2118) ? _2120 : (isnan(_2120) ? _2118 : min(_2120, _2118));
        float _2125 = (_2121 * _1478) + _1467;
        float _2126 = (_2121 * _1481) + _1471;
        float _2127 = (_2121 * _1484) + _1475;
        float _2128 = _2121 * 9.9999997473787516355514526367188e-05;
        float _2129 = (-1.0) - _2128;
        float _2131 = _2128 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2127 > _2131) || ((_2127 < _2129) || ((_2126 > _2131) || ((_2126 < _2129) || ((_2125 < _2129) || (_2125 > _2131))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2326 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2127, cbModelParam._m0[17u].z, fma(_2126, cbModelParam._m0[17u].y, _2125 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2127, cbModelParam._m0[18u].z, fma(_2126, cbModelParam._m0[18u].y, _2125 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2127, cbModelParam._m0[19u].z, fma(_2126, cbModelParam._m0[19u].y, _2125 * cbModelParam._m0[19u].x))), _1410);
            frontier_phi_22_46_ladder = _2326.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2326.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2326.x * cbModelParam._m0[1u].z;
        }
        _1503 = frontier_phi_22_46_ladder_2;
        _1505 = frontier_phi_22_46_ladder_1;
        _1507 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1487 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_511, _512, _513), _1410);
        _1503 = _1487.x * cbModelParam._m0[1u].z;
        _1505 = _1487.y * cbModelParam._m0[1u].z;
        _1507 = _1487.z * cbModelParam._m0[1u].z;
    }
    float _1519 = ((((1.0 - _532) * ((_519 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_532 * _519)) * _503;
    float _1520 = _1519 * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1521 = _1519 * ((cbModelParam._m0[1u].w * (_1505 - _1403)) + _1403);
    float _1522 = _1519 * ((cbModelParam._m0[1u].w * (_1507 - _1405)) + _1405);
    float _1525 = fma(_1522, cbSceneParam._m0[89u].z, fma(_1521, cbSceneParam._m0[89u].y, _1520 * cbSceneParam._m0[89u].x));
    float _1528 = fma(_1522, cbSceneParam._m0[90u].z, fma(_1521, cbSceneParam._m0[90u].y, _1520 * cbSceneParam._m0[90u].x));
    float _1531 = fma(_1522, cbSceneParam._m0[91u].z, fma(_1521, cbSceneParam._m0[91u].y, _1520 * cbSceneParam._m0[91u].x));
    vec4 _1539 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_439, _440));
    float _1541 = _1539.w;
    float _1553 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1541);
    float _1554 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1541);
    float _1555 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1541);
    uvec4 _1559 = floatBitsToUint(cbInstanceData._m0[_478 + 5u]);
    uint _1561 = _1559.x * 14u;
    uint _1562 = _1561 + 13u;
    float _1569 = _503 + (-1.0);
    float _1574 = (cbLight._m0[_1562].x * _1569) + 1.0;
    float _1575 = (cbLight._m0[_1562].y * _1569) + 1.0;
    float _1576 = (cbLight._m0[_1562].z * _1569) + 1.0;
    float _1577 = (cbLight._m0[_1562].w * _1569) + 1.0;
    uint _1578 = _1561 + 5u;
    float _1584 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
    uint _1588 = _1561 + 4u;
    float _1598 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
    uint _1602 = _1561 | 1u;
    float _1613 = dot(vec3(cbLight._m0[_1561].xyz), vec3(_350, _351, _352));
    float _1616 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_350, _351, _352));
    float _3680 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _3691 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _1621 = (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.3183098733425140380859375;
    float _1623 = (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * 0.3183098733425140380859375;
    float _1630 = ((cbLight._m0[_1578].x * _1584) * _1623) + (((cbLight._m0[_1588].x * _1553) * _1598) * _1621);
    float _1631 = ((_1584 * cbLight._m0[_1578].y) * _1623) + (((cbLight._m0[_1588].y * _1554) * _1598) * _1621);
    float _1632 = ((_1584 * cbLight._m0[_1578].z) * _1623) + (((cbLight._m0[_1588].z * _1555) * _1598) * _1621);
    uvec4 _1637 = floatBitsToUint(cbLight._m0[_1561 + 12u]);
    bool _1639 = _1637.x == 0u;
    float _1650;
    float _1652;
    float _1654;
    if (_1639)
    {
        _1650 = _1630;
        _1652 = _1631;
        _1654 = _1632;
    }
    else
    {
        uint _1658 = _1561 + 6u;
        float _1674 = (dot(vec3(cbLight._m0[_1561 + 2u].xyz), vec3(_350, _351, _352)) * 0.5) + 0.5;
        float _1675 = _1674 * _1674;
        float _3702 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1677 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
        _1650 = (((cbLight._m0[_1658].x * 0.3183098733425140380859375) * _1676) * _1677) + _1630;
        _1652 = (((cbLight._m0[_1658].y * 0.3183098733425140380859375) * _1676) * _1677) + _1631;
        _1654 = (((cbLight._m0[_1658].z * 0.3183098733425140380859375) * _1676) * _1677) + _1632;
    }
    bool _1657 = _1637.y == 0u;
    float _1695;
    float _1697;
    float _1699;
    if (_1657)
    {
        _1695 = _1650;
        _1697 = _1652;
        _1699 = _1654;
    }
    else
    {
        uint _1857 = _1561 + 7u;
        float _1873 = (dot(vec3(cbLight._m0[_1561 + 3u].xyz), vec3(_350, _351, _352)) * 0.5) + 0.5;
        float _1874 = _1873 * _1873;
        float _3718 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1875 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1876 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _1695 = (((cbLight._m0[_1857].x * 0.3183098733425140380859375) * _1875) * _1876) + _1650;
        _1697 = (((cbLight._m0[_1857].y * 0.3183098733425140380859375) * _1875) * _1876) + _1652;
        _1699 = (((cbLight._m0[_1857].z * 0.3183098733425140380859375) * _1875) * _1876) + _1654;
    }
    uint _1702 = _1561 + 8u;
    float _1715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1561].w)) * _353) * 0.949999988079071044921875);
    float _1716 = _1715 * _1715;
    float _1717 = cbLight._m0[_1561].x + _431;
    float _1718 = cbLight._m0[_1561].y + _432;
    float _1719 = cbLight._m0[_1561].z + _433;
    float _1723 = inversesqrt(dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719)));
    float _1724 = _1723 * _1717;
    float _1725 = _1723 * _1718;
    float _1726 = _1723 * _1719;
    float _1727 = dot(vec3(_350, _351, _352), vec3(cbLight._m0[_1561].xyz));
    float _3734 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1730 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _1731 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _1732 = dot(vec3(_350, _351, _352), vec3(_1724, _1725, _1726));
    float _3756 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1735 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _1736 = dot(vec3(cbLight._m0[_1561].xyz), vec3(_1724, _1725, _1726));
    float _3767 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1740 = _1716 * _1716;
    float _1744 = ((_1735 * _1735) * (_1740 + (-1.0))) + 1.0;
    float _1755 = (exp2(log2(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1756 = 1.0 - _1716;
    float _1767 = (0.5 / (((_1731 * ((_1730 * _1756) + _1716)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1756) + _1716) * _1730))) * _1730;
    float _3778 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1769 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1740 / ((_1744 * _1744) * 3.141590118408203125));
    uint _1783 = _1561 + 9u;
    float _1794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1602].w)) * _353) * 0.949999988079071044921875);
    float _1795 = _1794 * _1794;
    float _1796 = cbLight._m0[_1602].x + _431;
    float _1797 = cbLight._m0[_1602].y + _432;
    float _1798 = cbLight._m0[_1602].z + _433;
    float _1802 = inversesqrt(dot(vec3(_1796, _1797, _1798), vec3(_1796, _1797, _1798)));
    float _1803 = _1802 * _1796;
    float _1804 = _1802 * _1797;
    float _1805 = _1802 * _1798;
    float _1806 = dot(vec3(_350, _351, _352), vec3(cbLight._m0[_1602].xyz));
    float _3789 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1810 = dot(vec3(_350, _351, _352), vec3(_1803, _1804, _1805));
    float _3800 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _1814 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_1803, _1804, _1805));
    float _3811 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1818 = _1795 * _1795;
    float _1822 = ((_1813 * _1813) * (_1818 + (-1.0))) + 1.0;
    float _1831 = (exp2(log2(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1832 = 1.0 - _1795;
    float _1842 = (0.5 / (((_1731 * ((_1809 * _1832) + _1795)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1832) + _1795) * _1809))) * _1809;
    float _3822 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1844 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1818 / ((_1822 * _1822) * 3.141590118408203125));
    float _1854 = (((_1831 * cbLight._m0[_1783].x) * _1844) * _1584) + ((((cbLight._m0[_1702].x * _1553) * _1755) * _1769) * _1598);
    float _1855 = (((_1831 * cbLight._m0[_1783].y) * _1844) * _1584) + ((((cbLight._m0[_1702].y * _1554) * _1755) * _1769) * _1598);
    float _1856 = (((_1831 * cbLight._m0[_1783].z) * _1844) * _1584) + ((((cbLight._m0[_1702].z * _1555) * _1755) * _1769) * _1598);
    float _1918;
    float _1920;
    float _1922;
    if (_1639)
    {
        _1918 = _1854;
        _1920 = _1855;
        _1922 = _1856;
    }
    else
    {
        uint _1924 = _1561 + 2u;
        uint _1928 = _1561 + 10u;
        float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1924].w)) * _353) * 0.949999988079071044921875);
        float _1943 = _1942 * _1942;
        float _1944 = cbLight._m0[_1924].x + _431;
        float _1945 = cbLight._m0[_1924].y + _432;
        float _1946 = cbLight._m0[_1924].z + _433;
        float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
        float _1951 = _1950 * _1944;
        float _1952 = _1950 * _1945;
        float _1953 = _1950 * _1946;
        float _1954 = dot(vec3(_350, _351, _352), vec3(cbLight._m0[_1924].xyz));
        float _3833 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1957 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1958 = dot(vec3(_350, _351, _352), vec3(_1951, _1952, _1953));
        float _3844 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1961 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1962 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_1951, _1952, _1953));
        float _3855 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1966 = _1943 * _1943;
        float _1970 = ((_1961 * _1961) * (_1966 + (-1.0))) + 1.0;
        float _1979 = (exp2(log2(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1980 = 1.0 - _1943;
        float _1990 = (0.5 / (((_1731 * ((_1957 * _1980) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1980) + _1943) * _1957))) * _1957;
        float _3866 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1992 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1966 / ((_1970 * _1970) * 3.141590118408203125));
        float _1993 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
        _1918 = (((_1979 * cbLight._m0[_1928].x) * _1992) * _1993) + _1854;
        _1920 = (((_1979 * cbLight._m0[_1928].y) * _1992) * _1993) + _1855;
        _1922 = (((_1979 * cbLight._m0[_1928].z) * _1992) * _1993) + _1856;
    }
    float _2028;
    float _2030;
    float _2032;
    if (_1657)
    {
        _2028 = _1918;
        _2030 = _1920;
        _2032 = _1922;
    }
    else
    {
        uint _2039 = _1561 + 3u;
        uint _2043 = _1561 + 11u;
        float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _353) * 0.949999988079071044921875);
        float _2058 = _2057 * _2057;
        float _2059 = cbLight._m0[_2039].x + _431;
        float _2060 = cbLight._m0[_2039].y + _432;
        float _2061 = cbLight._m0[_2039].z + _433;
        float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
        float _2066 = _2065 * _2059;
        float _2067 = _2065 * _2060;
        float _2068 = _2065 * _2061;
        float _2069 = dot(vec3(_350, _351, _352), vec3(cbLight._m0[_2039].xyz));
        float _3882 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _2073 = dot(vec3(_350, _351, _352), vec3(_2066, _2067, _2068));
        float _3893 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _2077 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2066, _2067, _2068));
        float _3904 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2081 = _2058 * _2058;
        float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
        float _2094 = (exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2095 = 1.0 - _2058;
        float _2105 = (0.5 / (((_1731 * ((_2072 * _2095) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _2095) + _2058) * _2072))) * _2072;
        float _3915 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2107 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
        float _2108 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _2028 = (((_2094 * cbLight._m0[_2043].x) * _2107) * _2108) + _1918;
        _2030 = (((_2094 * cbLight._m0[_2043].y) * _2107) * _2108) + _1920;
        _2032 = (((_2094 * cbLight._m0[_2043].z) * _2107) * _2108) + _1922;
    }
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    if (_1559.y == 0u)
    {
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2183;
        float _2185 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2183;
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2183;
        uvec4 _2198 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2199 = _2198.x;
        uint _2210 = uint((float(_2198.y) * floor(float(uint(cbSceneParam._m0[85u].y * _440) / _2199))) + floor(float(uint(cbSceneParam._m0[85u].x * _439) / _2199)));
        float _2220 = (log2(_2186 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2221 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        uint _2224 = uint(isnan(14.0) ? _2221 : (isnan(_2221) ? 14.0 : min(_2221, 14.0)));
        uvec4 _2229 = texelFetch(g_lightClusterGridBuffer, int(((_2224 << 2u) + (_2210 << 6u)) >> 2u));
        uint _2230 = _2229.x;
        uint _2231 = _2198.z;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        if (((((1u << ((_2231 >> 4u) & 15u)) + 4294967295u) & _2230) == 0u) || ((_2231 & 240u) == 0u))
        {
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
        }
        else
        {
            float _2332;
            float _2334;
            float _2336;
            float _2338;
            float _2340;
            float _2342;
            float _2476 = 0.0;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            float _2480 = 0.0;
            float _2481 = 0.0;
            uint _2482 = 0u;
            uint _2491;
            bool _2492;
            for (;;)
            {
                _2491 = texelFetch(g_lightClassification, int((((_2224 << 5u) + (_2210 << 9u)) + (_2482 << 2u)) >> 2u)).x;
                _2492 = _2491 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2492)
                {
                    frontier_phi_61_pred = _2476;
                    frontier_phi_61_pred_1 = _2481;
                    frontier_phi_61_pred_2 = _2480;
                    frontier_phi_61_pred_3 = _2479;
                    frontier_phi_61_pred_4 = _2478;
                    frontier_phi_61_pred_5 = _2477;
                }
                else
                {
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    uint _2606;
                    _2600 = _2476;
                    _2601 = _2477;
                    _2602 = _2478;
                    _2603 = _2479;
                    _2604 = _2480;
                    _2605 = _2481;
                    _2606 = _2491;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    for (;;)
                    {
                        uint _2610 = uint(findLSB(_2606)) + (_2482 << 5u);
                        uint _2607 = (_2606 + 4294967295u) & _2606;
                        uint _2612 = _2610 * 48u;
                        vec4 _2626 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2612)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 3u)).x));
                        uint _2632 = (_2610 * 48u) + 4u;
                        vec4 _2645 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2632)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 3u)).x));
                        uint _2651 = (_2610 * 48u) + 8u;
                        vec3 _2662 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2651)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 2u)).x));
                        float _2666 = _2626.x - _2184;
                        float _2667 = _2626.y - _2185;
                        float _2668 = _2626.z - _2186;
                        float _2669 = dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668));
                        float _2672 = inversesqrt(_2669);
                        float _2673 = _2672 * _2666;
                        float _2674 = _2672 * _2667;
                        float _2675 = _2672 * _2668;
                        float _2676 = dot(vec3(_459, _462, _465), vec3(_2673, _2674, _2675));
                        float _2681 = 1.0 - (_2669 * _2626.w);
                        float _3941 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
                        float _2682 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                        float _2683 = sqrt(_2669) * _2645.w;
                        float _2686 = 1.39999997615814208984375 / (_2683 + 1.39999997615814208984375);
                        float _2687 = _2686 * _2686;
                        float _2690 = ((1.0 - _2687) * _2676) + _2687;
                        float _2693 = _2683 * _2683;
                        float _2697 = ((isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0))) * _2682) / ((_2693 * 0.699999988079071044921875) + 1.0);
                        float _2701 = (-0.0) - _2184;
                        float _2702 = (-0.0) - _2185;
                        float _2703 = (-0.0) - _2186;
                        float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
                        float _2708 = _2707 * _2701;
                        float _2709 = _2707 * _2702;
                        float _2710 = _2707 * _2703;
                        float _2718 = exp2(log2(1.0 / ((_2693 * 3.5) + 5.0)) * 0.25);
                        float _2719 = 1.0 - _519;
                        float _2726 = sqrt(1.0 - ((1.0 - (_2719 * _2719)) * (1.0 - (_2718 * _2718))));
                        float _2727 = _2726 * _2726;
                        float _2728 = _2727 * _2727;
                        float _2729 = _2708 + _2673;
                        float _2730 = _2709 + _2674;
                        float _2731 = _2710 + _2675;
                        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
                        float _2739 = dot(vec3(_459, _462, _465), vec3(_2708, _2709, _2710));
                        float _3957 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2742 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
                        float _2743 = dot(vec3(_459, _462, _465), vec3(_2735 * _2729, _2735 * _2730, _2735 * _2731));
                        float _3968 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2746 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
                        float _2750 = ((_2746 * _2746) * (_2728 + (-1.0))) + 1.0;
                        float _2751 = _2686 * _2727;
                        float _2752 = _2751 * _2751;
                        float _2755 = ((1.0 - _2752) * _2676) + _2752;
                        float _3979 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2756 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                        float _2757 = 1.0 - _2727;
                        float _2767 = (0.5 / (((_2756 * ((_2742 * _2757) + _2727)) + 9.9999999392252902907785028219223e-09) + (((_2756 * _2757) + _2727) * _2742))) * _2756;
                        float _3990 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2778 = (((_2728 * 3.1415927410125732421875) * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) / ((_2750 * _2750) * ((_2693 * 2.1991131305694580078125) + 3.141590118408203125))) * _2682;
                        _2535 = (_2697 * _2645.x) + _2603;
                        _2536 = (_2697 * _2645.y) + _2604;
                        _2537 = (_2697 * _2645.z) + _2605;
                        _2532 = (_2778 * _2662.x) + _2600;
                        _2533 = (_2778 * _2662.y) + _2601;
                        _2534 = (_2778 * _2662.z) + _2602;
                        if (_2607 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2600 = _2532;
                            _2601 = _2533;
                            _2602 = _2534;
                            _2603 = _2535;
                            _2604 = _2536;
                            _2605 = _2537;
                            _2606 = _2607;
                        }
                    }
                    frontier_phi_61_pred = _2532;
                    frontier_phi_61_pred_1 = _2537;
                    frontier_phi_61_pred_2 = _2536;
                    frontier_phi_61_pred_3 = _2535;
                    frontier_phi_61_pred_4 = _2534;
                    frontier_phi_61_pred_5 = _2533;
                }
                _2332 = frontier_phi_61_pred;
                _2342 = frontier_phi_61_pred_1;
                _2340 = frontier_phi_61_pred_2;
                _2338 = frontier_phi_61_pred_3;
                _2336 = frontier_phi_61_pred_4;
                _2334 = frontier_phi_61_pred_5;
                uint _2483 = _2482 + 1u;
                if (_2483 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2476 = _2332;
                    _2477 = _2334;
                    _2478 = _2336;
                    _2479 = _2338;
                    _2480 = _2340;
                    _2481 = _2342;
                    _2482 = _2483;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
        }
        uvec4 _2345 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2346 = _2345.z;
        uint _2348 = (_2346 >> 8u) & 15u;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        if (((4294967295u << _2348) & _2230) == 0u)
        {
            _2444 = _2331;
            _2446 = _2333;
            _2448 = _2335;
            _2450 = _2337;
            _2452 = _2339;
            _2454 = _2341;
        }
        else
        {
            float _2469 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
            float _2470 = _2469 * _2184;
            float _2471 = _2469 * _2185;
            float _2472 = _2469 * _2186;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2348 < ((_2346 >> 12u) & 15u))
            {
                float _2445;
                float _2447;
                float _2449;
                float _2451;
                float _2453;
                float _2455;
                float _2583 = _2331;
                float _2584 = _2333;
                float _2585 = _2335;
                float _2586 = _2337;
                float _2587 = _2339;
                float _2588 = _2341;
                uint _2589 = _2348;
                uint _2598;
                bool _2599;
                for (;;)
                {
                    _2598 = texelFetch(g_lightClassification, int((((_2224 << 5u) + (_2210 << 9u)) + (_2589 << 2u)) >> 2u)).x;
                    _2599 = _2598 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2599)
                    {
                        frontier_phi_67_pred = _2586;
                        frontier_phi_67_pred_1 = _2587;
                        frontier_phi_67_pred_2 = _2588;
                        frontier_phi_67_pred_3 = _2585;
                        frontier_phi_67_pred_4 = _2584;
                        frontier_phi_67_pred_5 = _2583;
                    }
                    else
                    {
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _2796 = _2583;
                        float _2797 = _2584;
                        float _2798 = _2585;
                        float _2799 = _2586;
                        float _2800 = _2587;
                        float _2801 = _2588;
                        uint _2802 = _2598;
                        uint _2803;
                        vec4 _2828;
                        float _2829;
                        vec4 _2844;
                        vec3 _2856;
                        vec4 _2872;
                        vec4 _2888;
                        float _2935;
                        bool _2936;
                        for (;;)
                        {
                            uint _2813 = ((_2589 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2802));
                            _2803 = (_2802 + 4294967295u) & _2802;
                            uint _2815 = _2813 * 40u;
                            _2828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 3u)).x));
                            _2829 = _2828.w;
                            uint _2831 = (_2813 * 40u) + 4u;
                            _2844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 3u)).x));
                            uint _2846 = (_2813 * 40u) + 8u;
                            _2856 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x));
                            uint _2859 = (_2813 * 40u) + 16u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2875 = (_2813 * 40u) + 20u;
                            _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2891 = (_2813 * 40u) + 24u;
                            vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            uint _2910 = (_2813 * 40u) + 28u;
                            vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            _2935 = fma(_2186, _2923.z, fma(_2185, _2923.y, _2923.x * _2184)) + _2923.w;
                            _2936 = !((fma(_2186, _2904.z, fma(_2185, _2904.y, _2904.x * _2184)) + _2904.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2936)
                            {
                                float _2963 = _2828.x - _2184;
                                float _2964 = _2828.y - _2185;
                                float _2965 = _2828.z - _2186;
                                float _2966 = dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965));
                                float _2969 = inversesqrt(_2966);
                                float _2970 = _2969 * _2963;
                                float _2971 = _2969 * _2964;
                                float _2972 = _2969 * _2965;
                                float _2976 = 1.0 - (_2966 / (_2829 * _2829));
                                float _4001 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                                float _2977 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                                float _2981 = sqrt(_2966) * _2844.w;
                                float _2983 = 1.39999997615814208984375 / (_2981 + 1.39999997615814208984375);
                                float _2984 = _2983 * _2983;
                                float _2987 = ((1.0 - _2984) * dot(vec3(_2970, _2971, _2972), vec3(_459, _462, _465))) + _2984;
                                float _2990 = _2981 * _2981;
                                float _2994 = (fma(_2186, _2872.z, fma(_2185, _2872.y, _2872.x * _2184)) + _2872.w) / _2935;
                                float _2995 = (fma(_2186, _2888.z, fma(_2185, _2888.y, _2888.x * _2184)) + _2888.w) / _2935;
                                float _2999 = 1.0 - dot(vec2(_2994, _2995), vec2(_2994, _2995));
                                float _4017 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                                float _3000 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                                float _3001 = _3000 * (((isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0))) * _2977) / ((_2990 * 0.699999988079071044921875) + 1.0));
                                float _3013 = exp2(log2(1.0 / ((_2990 * 3.5) + 5.0)) * 0.25);
                                float _3014 = 1.0 - _519;
                                float _3021 = sqrt(1.0 - ((1.0 - (_3014 * _3014)) * (1.0 - (_3013 * _3013))));
                                float _3022 = _3021 * _3021;
                                float _3023 = _3022 * _3022;
                                float _3024 = _2970 - _2470;
                                float _3025 = _2971 - _2471;
                                float _3026 = _2972 - _2472;
                                float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
                                float _3034 = dot(vec3(_459, _462, _465), vec3((-0.0) - _2470, (-0.0) - _2471, (-0.0) - _2472));
                                float _4028 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3037 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                                float _3038 = dot(vec3(_459, _462, _465), vec3(_3030 * _3024, _3030 * _3025, _3030 * _3026));
                                float _4039 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3041 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                                float _3045 = ((_3041 * _3041) * (_3023 + (-1.0))) + 1.0;
                                float _3046 = _2983 * _3022;
                                float _3047 = _3046 * _3046;
                                float _3053 = ((1.0 - _3047) * dot(vec3(_459, _462, _465), vec3(_2970, _2971, _2972))) + _3047;
                                float _4050 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3054 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _3055 = 1.0 - _3022;
                                float _3065 = (0.5 / (((_3054 * ((_3037 * _3055) + _3022)) + 9.9999999392252902907785028219223e-09) + (((_3054 * _3055) + _3022) * _3037))) * _3054;
                                float _4061 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3075 = (_3000 * _2977) * (((_3023 * 3.1415927410125732421875) * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) / ((_3045 * _3045) * ((_2990 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3075 * _2856.x;
                                frontier_phi_73_pred_1 = _3075 * _2856.y;
                                frontier_phi_73_pred_2 = _3001 * _2844.z;
                                frontier_phi_73_pred_3 = _3001 * _2844.y;
                                frontier_phi_73_pred_4 = _3001 * _2844.x;
                                frontier_phi_73_pred_5 = _3075 * _2856.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3079 = frontier_phi_73_pred;
                            _3080 = frontier_phi_73_pred_1;
                            _3084 = frontier_phi_73_pred_2;
                            _3083 = frontier_phi_73_pred_3;
                            _3082 = frontier_phi_73_pred_4;
                            _3081 = frontier_phi_73_pred_5;
                            _2786 = _3082 + _2799;
                            _2787 = _3083 + _2800;
                            _2788 = _3084 + _2801;
                            _2783 = _3079 + _2796;
                            _2784 = _3080 + _2797;
                            _2785 = _3081 + _2798;
                            if (_2803 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2803;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2786;
                        frontier_phi_67_pred_1 = _2787;
                        frontier_phi_67_pred_2 = _2788;
                        frontier_phi_67_pred_3 = _2785;
                        frontier_phi_67_pred_4 = _2784;
                        frontier_phi_67_pred_5 = _2783;
                    }
                    _2451 = frontier_phi_67_pred;
                    _2453 = frontier_phi_67_pred_1;
                    _2455 = frontier_phi_67_pred_2;
                    _2449 = frontier_phi_67_pred_3;
                    _2447 = frontier_phi_67_pred_4;
                    _2445 = frontier_phi_67_pred_5;
                    uint _2590 = _2589 + 1u;
                    if (_2590 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2583 = _2445;
                        _2584 = _2447;
                        _2585 = _2449;
                        _2586 = _2451;
                        _2587 = _2453;
                        _2588 = _2455;
                        _2589 = _2590;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2453;
                frontier_phi_55_56_ladder_1 = _2455;
                frontier_phi_55_56_ladder_2 = _2451;
                frontier_phi_55_56_ladder_3 = _2449;
                frontier_phi_55_56_ladder_4 = _2447;
                frontier_phi_55_56_ladder_5 = _2445;
            }
            else
            {
                frontier_phi_55_56_ladder = _2339;
                frontier_phi_55_56_ladder_1 = _2341;
                frontier_phi_55_56_ladder_2 = _2337;
                frontier_phi_55_56_ladder_3 = _2335;
                frontier_phi_55_56_ladder_4 = _2333;
                frontier_phi_55_56_ladder_5 = _2331;
            }
            _2444 = frontier_phi_55_56_ladder_5;
            _2446 = frontier_phi_55_56_ladder_4;
            _2448 = frontier_phi_55_56_ladder_3;
            _2450 = frontier_phi_55_56_ladder_2;
            _2452 = frontier_phi_55_56_ladder;
            _2454 = frontier_phi_55_56_ladder_1;
        }
        float _2459 = isnan(1.0) ? _503 : (isnan(_503) ? 1.0 : min(_503, 1.0));
        _2243 = (_2459 * _2450) + _1695;
        _2245 = (_2459 * _2452) + _1697;
        _2247 = (_2459 * _2454) + _1699;
        _2249 = ((_2444 * 0.039999999105930328369140625) * _2459) + _2028;
        _2251 = ((_2446 * 0.039999999105930328369140625) * _2459) + _2030;
        _2253 = ((_2448 * 0.039999999105930328369140625) * _2459) + _2032;
    }
    else
    {
        _2243 = _1695;
        _2245 = _1697;
        _2247 = _1699;
        _2249 = _2028;
        _2251 = _2030;
        _2253 = _2032;
    }
    float _4077 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _4088 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _4099 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    uint _2273 = _478 + 6u;
    float _2281 = _439 / cbSceneParam._m0[86u].x;
    float _2282 = _440 / cbSceneParam._m0[86u].y;
    vec4 _2296 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2281, _2282, (log2((isnan(cbSceneParam._m0[77u].w) ? _372 : (isnan(_372) ? cbSceneParam._m0[77u].w : min(_372, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2298 = _2296.x;
    float _2299 = _2296.y;
    float _2300 = _2296.z;
    float _2301 = _2296.w;
    float _2394;
    float _2396;
    float _2398;
    float _2400;
    if (_372 > cbSceneParam._m0[78u].w)
    {
        float _2356 = isnan(_372) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _372 : min(cbSceneParam._m0[80u].w, _372));
        float _2357 = _2356 / _372;
        float _2368 = _2357 * _424;
        float _2369 = _425 * _2357;
        float _2370 = (-0.0) - _2369;
        float _2372 = _2357 * _426;
        float _2374 = (cbSceneParam._m0[77u].w * _2370) / _2356;
        float _2375 = _2374 + cbSceneParam._m0[79u].w;
        float _2376 = cbSceneParam._m0[79u].w - _2369;
        float _2382 = sqrt(((_2368 * _2368) + (_2369 * _2369)) + (_2372 * _2372));
        float _2385 = (1.0 - (cbSceneParam._m0[77u].w / _2356)) * _2382;
        float _2390 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2392 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2545;
        if (abs((_2370 - _2374) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2545 = ((((_2375 > 0.0) ? exp2(_2390 * _2375) : (2.0 - exp2(_2392 * _2375))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2385;
        }
        else
        {
            float _2505 = 1.0 / cbSceneParam._m0[80u].x;
            float _2506 = isnan(_2376) ? _2375 : (isnan(_2375) ? _2376 : max(_2375, _2376));
            float _2507 = isnan(_2376) ? _2375 : (isnan(_2375) ? _2376 : min(_2375, _2376));
            float _2516 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : min(_2506, 0.0));
            float _2517 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : min(_2507, 0.0));
            _2545 = ((abs(_2382 / _2370) * cbSceneParam._m0[80u].y) * ((((_2516 - _2517) * 2.0) - ((exp2(_2390 * (isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0)))) - exp2(_2390 * (isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0))))) * _2505)) - ((exp2(_2392 * _2516) - exp2(_2392 * _2517)) * _2505))) + (_2385 * cbSceneParam._m0[80u].z);
        }
        vec4 _2547 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2281, _2282, 1.0), 0.0);
        float _2556 = exp2((_2545 * (-1.44269502162933349609375)) * (1.0 - _2547.w));
        float _2557 = log2(_2556);
        float _2573 = log2(_2301);
        _2394 = (exp2(_2573 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2557 * cbSceneParam._m0[78u].x)) * _2547.x) / cbSceneParam._m0[78u].x)) + _2298;
        _2396 = (exp2(_2573 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2557 * cbSceneParam._m0[78u].y)) * _2547.y) / cbSceneParam._m0[78u].y)) + _2299;
        _2398 = (exp2(_2573 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2557 * cbSceneParam._m0[78u].z)) * _2547.z) / cbSceneParam._m0[78u].z)) + _2300;
        _2400 = _2556 * _2301;
    }
    else
    {
        _2394 = _2298;
        _2396 = _2299;
        _2398 = _2300;
        _2400 = _2301;
    }
    float _2412 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2413 = _2412 == 3.0;
    float _2414 = log2(_2400);
    float _2421 = exp2(_2414 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_2243 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _503))) + ((_2249 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1310)) * cbPerFrame._m0[3u].x));
    float _2422 = exp2(_2414 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2245 + ((isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))) * _503))) + ((_2251 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _1310)) * cbPerFrame._m0[3u].x));
    float _2423 = exp2(_2414 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2247 + ((isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))) * _503))) + ((_2253 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _1310)) * cbPerFrame._m0[3u].x));
    float _2432 = (_2412 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2432 * (_2413 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2394)));
    SV_Target.y = _2432 * (_2413 ? _2422 : (_2422 + (cbSceneParam._m0[72u].w * _2396)));
    SV_Target.z = _2432 * (_2413 ? _2423 : (_2423 + (cbSceneParam._m0[72u].w * _2398)));
    SV_Target.w = cbInstanceData._m0[_2273].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2273].w;
}


