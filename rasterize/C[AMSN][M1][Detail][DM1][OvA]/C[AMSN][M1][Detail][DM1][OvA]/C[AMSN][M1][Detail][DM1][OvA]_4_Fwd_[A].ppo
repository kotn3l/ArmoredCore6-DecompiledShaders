#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1097;
float _3484;
float _3485;
float _3486;
float _3487;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _255 = _249.x * cbMtdParam._m0[10u].x;
    float _256 = _249.y * cbMtdParam._m0[10u].y;
    float _257 = _249.z * cbMtdParam._m0[10u].z;
    float _262 = 1.0 - cbMtdParam._m0[13u].z;
    float _3496 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _264 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    vec4 _282 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _290 = ((_255 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _282.x;
    float _293 = ((_256 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _282.y;
    float _296 = ((_257 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _282.z;
    float _303 = ((_255 - _290) * _264) + _290;
    float _304 = ((_256 - _293) * _264) + _293;
    float _305 = ((_257 - _296) * _264) + _296;
    vec4 _323 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _353 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3507 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _361 = (_354 * ((_323.x * cbMtdParam._m0[11u].x) - _303)) + _303;
    float _362 = (_354 * ((_323.y * cbMtdParam._m0[11u].y) - _304)) + _304;
    float _363 = (_354 * ((_323.z * cbMtdParam._m0[11u].z) - _305)) + _305;
    vec4 _376 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _378 = _376.x;
    vec4 _391 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _398 = 1.0 - cbMtdParam._m0[14u].z;
    float _3518 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _403 = (((_391.x - _378) * TEXCOORD_5.x) * (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) + _378;
    vec4 _417 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _421 = _417.z;
    vec4 _434 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _445 = cbMtdParam._m0[13u].w * _421;
    float _448 = (((((_421 * 2.0) * _434.z) * cbMtdParam._m0[14u].x) - _445) * cbMtdParam._m0[13u].y) + _445;
    vec4 _461 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _476 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_461.z * cbMtdParam._m0[14u].y) - _448)) + _448;
    float _483 = (_417.x * 2.0) + (-1.0);
    float _484 = (_417.y * 2.0) + (-1.0);
    float _485 = dot(vec2(_483, _484), vec2(_483, _484));
    float _3529 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _490 = sqrt(1.0 - (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))));
    float _501 = ((cbMtdParam._m0[13u].x * ((_434.x * 2.0) + (-1.0))) + _483) + ((((_461.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _502 = ((cbMtdParam._m0[13u].x * ((_434.y * 2.0) + (-1.0))) + _484) + ((((_461.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _505 = fma(_490, _214 * NORMAL.x, fma(_502, _221 * TANGENT.x, (_207 * _199) * _501));
    float _508 = fma(_490, _214 * NORMAL.y, fma(_502, _221 * TANGENT.y, (_207 * _200) * _501));
    float _511 = fma(_490, _214 * NORMAL.z, fma(_502, _221 * TANGENT.z, (_207 * _201) * _501));
    float _515 = inversesqrt(dot(vec3(_505, _508, _511), vec3(_505, _508, _511)));
    float _516 = _515 * _505;
    float _517 = _515 * _508;
    float _518 = _515 * _511;
    float _3540 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _519 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3562 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3573 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _3584 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _523 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _539 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _589 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _579);
    float _590 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _579);
    float _591 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _579);
    float _595 = inversesqrt(dot(vec3(_589, _590, _591), vec3(_589, _590, _591)));
    float _596 = _589 * _595;
    float _597 = _590 * _595;
    float _598 = _591 * _595;
    vec4 _603 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _605 = _603.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _777 = sqrt(((_589 * _589) + (_590 * _590)) + (_591 * _591));
        float _783 = (cbMatDynParam._m0[5u].x * _777) + cbMatDynParam._m0[5u].y;
        float _3595 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _788 = (cbMatDynParam._m0[5u].z * _777) + cbMatDynParam._m0[5u].w;
        float _3606 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) - _784)) + _784) < ((_605 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _616 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _617 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _635 = fma(_518, cbSceneParam._m0[5u].z, fma(_517, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _516));
    float _638 = fma(_518, cbSceneParam._m0[6u].z, fma(_517, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _516));
    float _641 = fma(_518, cbSceneParam._m0[7u].z, fma(_517, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _516));
    uint _654 = uint(roundEven(NORMAL.w)) * 13u;
    uint _655 = _654 + 9u;
    uint _656 = _655 + uint(cbMatDynParam._m0[0u].w);
    float _662 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * cbInstanceData._m0[_656].x;
    float _663 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_656].y;
    float _664 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_656].z;
    float _3617 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _668 = 1.0 - _523;
    float _669 = _665 * _668;
    float _670 = _666 * _668;
    float _671 = _667 * _668;
    float _676 = (_665 + (-0.039999999105930328369140625)) * _523;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _523;
    float _678 = (_667 + (-0.039999999105930328369140625)) * _523;
    float _679 = _676 + 0.039999999105930328369140625;
    float _681 = _677 + 0.039999999105930328369140625;
    float _682 = _678 + 0.039999999105930328369140625;
    vec4 _691 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _616, cbSceneParam._m0[86u].y * _617));
    float _694 = _691.x * TEXCOORD_5.w;
    float _695 = dot(vec3(_516, _517, _518), vec3(_596, _597, _598));
    float _698 = _695 * 2.0;
    float _702 = (_698 * _516) - _596;
    float _703 = (_698 * _517) - _597;
    float _704 = (_698 * _518) - _598;
    float _708 = abs(dot(vec3(_596, _597, _598), vec3(_516, _517, _518)));
    float _3650 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _710 = sqrt(_519);
    float _723 = exp2((_710 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_710 * 3.0));
    float _729 = (1.0 - _723) * ((_710 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _730 = _723 * _710;
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1096;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _821 = fma(_766, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _758));
        float _825 = fma(_766, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _758));
        float _829 = fma(_766, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _758));
        float _854 = _758 + _516;
        float _855 = _762 + _517;
        float _856 = _766 + _518;
        float _866 = fma(_856, cbModelParam._m0[26u].z, fma(_855, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _854)) - _821;
        float _867 = fma(_856, cbModelParam._m0[27u].z, fma(_855, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _854)) - _825;
        float _868 = fma(_856, cbModelParam._m0[28u].z, fma(_855, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _854)) - _829;
        float _872 = inversesqrt(dot(vec3(_866, _867, _868), vec3(_866, _867, _868)));
        float _885 = ((_872 * _866) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_821 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_872 * _867) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_825 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_872 * _868) / cbModelParam._m0[34u].z) + ((((((_829 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        float _924 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_890.x + (-0.5));
        float _926 = _924 * (_890.y + (-0.5));
        float _927 = _924 * (_890.z + (-0.5));
        float _934 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_897.x + (-0.5));
        float _936 = _934 * (_897.y + (-0.5));
        float _937 = _934 * (_897.z + (-0.5));
        float _944 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_904.x + (-0.5));
        float _946 = _944 * (_904.y + (-0.5));
        float _947 = _944 * (_904.z + (-0.5));
        float _954 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_911.x + (-0.5));
        float _956 = _954 * (_911.y + (-0.5));
        float _957 = _954 * (_911.z + (-0.5));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = _925 * 0.5;
        float _962 = _935 * 0.5;
        float _963 = _945 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _978 = (dot(vec3(_516, _517, _518), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _988 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3698 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_990 + 1.0))) + _995) * _958;
        float _1005 = _926 * 0.5;
        float _1006 = _936 * 0.5;
        float _1007 = _946 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_516, _517, _518), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3731 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1032 + 1.0))) + _1037) * _959;
        float _1047 = _927 * 0.5;
        float _1048 = _937 * 0.5;
        float _1049 = _947 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_516, _517, _518), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3764 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1074 + 1.0))) + _1079) * _960;
        _1096 = _927;
        _1098 = _926;
        _1099 = _925;
        _1100 = _937;
        _1101 = _936;
        _1102 = _935;
        _1103 = _947;
        _1104 = _946;
        _1105 = _945;
        _1106 = _960;
        _1107 = _959;
        _1108 = _958;
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
    }
    else
    {
        _1096 = _1097;
        _1098 = _1097;
        _1099 = _1097;
        _1100 = _1097;
        _1101 = _1097;
        _1102 = _1097;
        _1103 = _1097;
        _1104 = _1097;
        _1105 = _1097;
        _1106 = _1097;
        _1107 = _1097;
        _1108 = _1097;
        _1109 = 0.0;
        _1110 = 0.0;
        _1111 = 0.0;
    }
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1140 = fma(_766, cbModelParam._m0[30u].z, fma(_762, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _758));
        float _1144 = fma(_766, cbModelParam._m0[31u].z, fma(_762, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _758));
        float _1148 = fma(_766, cbModelParam._m0[32u].z, fma(_762, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _758));
        float _1171 = _758 + _516;
        float _1172 = _762 + _517;
        float _1173 = _766 + _518;
        float _1183 = fma(_1173, cbModelParam._m0[30u].z, fma(_1172, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1171)) - _1140;
        float _1184 = fma(_1173, cbModelParam._m0[31u].z, fma(_1172, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1171)) - _1144;
        float _1185 = fma(_1173, cbModelParam._m0[32u].z, fma(_1172, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1171)) - _1148;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1140 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1144 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[35u].z) + ((((((_1148 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1239 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1206.x + (-0.5));
        float _1241 = _1239 * (_1206.y + (-0.5));
        float _1242 = _1239 * (_1206.z + (-0.5));
        float _1249 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1213.x + (-0.5));
        float _1251 = _1249 * (_1213.y + (-0.5));
        float _1252 = _1249 * (_1213.z + (-0.5));
        float _1259 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1220.x + (-0.5));
        float _1261 = _1259 * (_1220.y + (-0.5));
        float _1262 = _1259 * (_1220.z + (-0.5));
        float _1269 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1227.x + (-0.5));
        float _1271 = _1269 * (_1227.y + (-0.5));
        float _1272 = _1269 * (_1227.z + (-0.5));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = _1240 * 0.5;
        float _1277 = _1250 * 0.5;
        float _1278 = _1260 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_516, _517, _518), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3827 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1303 + 1.0))) + _1308) * _1273;
        float _1318 = _1241 * 0.5;
        float _1319 = _1251 * 0.5;
        float _1320 = _1261 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_516, _517, _518), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3860 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1345 + 1.0))) + _1350) * _1274;
        float _1360 = _1242 * 0.5;
        float _1361 = _1252 * 0.5;
        float _1362 = _1262 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_516, _517, _518), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _3893 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1387 + 1.0))) + _1392) * _1275;
        _1409 = _1242;
        _1410 = _1241;
        _1411 = _1240;
        _1412 = _1252;
        _1413 = _1251;
        _1414 = _1250;
        _1415 = _1262;
        _1416 = _1261;
        _1417 = _1260;
        _1418 = _1275;
        _1419 = _1274;
        _1420 = _1273;
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1097;
        _1410 = _1097;
        _1411 = _1097;
        _1412 = _1097;
        _1413 = _1097;
        _1414 = _1097;
        _1415 = _1097;
        _1416 = _1097;
        _1417 = _1097;
        _1418 = _1097;
        _1419 = _1097;
        _1420 = _1097;
        _1421 = 0.0;
        _1422 = 0.0;
        _1423 = 0.0;
    }
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1109)) + _1109;
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1110)) + _1110;
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1111)) + _1111;
    float _1456 = fma(_1435, cbSceneParam._m0[89u].z, fma(_1434, cbSceneParam._m0[89u].y, _1433 * cbSceneParam._m0[89u].x));
    float _1459 = fma(_1435, cbSceneParam._m0[90u].z, fma(_1434, cbSceneParam._m0[90u].y, _1433 * cbSceneParam._m0[90u].x));
    float _1462 = fma(_1435, cbSceneParam._m0[91u].z, fma(_1434, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1433));
    float _1477 = _702 * 0.5;
    float _1478 = _703 * 0.5;
    float _1479 = _704 * 0.5;
    float _1480 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1483 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1486 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1520;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1493 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1096, _1100, _1103, _1106));
        float _1497 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1098, _1101, _1104, _1107));
        float _1501 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1099, _1102, _1105, _1108));
        float _1508 = dot(vec4(cbModelParam._m0[39u]), vec4(_1477, _1478, _1479, 1.0));
        _1520 = dot(vec3(isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1508) ? 0.0 : (isnan(0.0) ? _1508 : max(0.0, _1508))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1520 = 1.0;
    }
    float _1531;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1522 = dot(vec4(cbModelParam._m0[40u]), vec4(_1477, _1478, _1479, 1.0));
        _1531 = dot(vec3(isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1522) ? 0.0 : (isnan(0.0) ? _1522 : max(0.0, _1522))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1531 = 1.0;
    }
    float _1535 = (_1531 * cbModelParam._m0[1u].x) + (_1520 * (1.0 - cbModelParam._m0[1u].x));
    float _1545 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _519);
    float _1546 = isnan(_1545) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1545 : min(cbModelParam._m0[25u].z, _1545));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1593 = fma(_766, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _758)) + cbModelParam._m0[13u].w;
        float _1597 = fma(_766, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _758)) + cbModelParam._m0[14u].w;
        float _1601 = fma(_766, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _758)) + cbModelParam._m0[15u].w;
        float _1604 = fma(_704, cbModelParam._m0[13u].z, fma(_703, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _702));
        float _1607 = fma(_704, cbModelParam._m0[14u].z, fma(_703, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _702));
        float _1610 = fma(_704, cbModelParam._m0[15u].z, fma(_703, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _702));
        float _1638;
        if (_1604 > 0.0)
        {
            _1638 = abs((1.0 - _1593) / _1604);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1593 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1638 = frontier_phi_17_15_ladder;
        }
        float _1844;
        if (_1607 > 0.0)
        {
            _1844 = abs((1.0 - _1597) / _1607);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1597 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1844 = frontier_phi_26_22_ladder;
        }
        float _2098;
        if (_1610 > 0.0)
        {
            _2098 = abs((1.0 - _1601) / _1610);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1601 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2098 = frontier_phi_38_33_ladder;
        }
        float _2100 = isnan(_1844) ? _1638 : (isnan(_1638) ? _1844 : min(_1638, _1844));
        float _2101 = isnan(_2098) ? _2100 : (isnan(_2100) ? _2098 : min(_2100, _2098));
        float _2105 = (_2101 * _1604) + _1593;
        float _2106 = (_2101 * _1607) + _1597;
        float _2107 = (_2101 * _1610) + _1601;
        float _2108 = _2101 * 9.9999997473787516355514526367188e-05;
        float _2110 = (-1.0) - _2108;
        float _2112 = _2108 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2107 > _2112) || ((_2107 < _2110) || ((_2106 > _2112) || ((_2106 < _2110) || ((_2105 < _2110) || (_2105 > _2112))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2235 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2107, cbModelParam._m0[9u].z, fma(_2106, cbModelParam._m0[9u].y, _2105 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2107, cbModelParam._m0[10u].z, fma(_2106, cbModelParam._m0[10u].y, _2105 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2107, cbModelParam._m0[11u].z, fma(_2106, cbModelParam._m0[11u].y, _2105 * cbModelParam._m0[11u].x))), _1546);
            frontier_phi_16_38_ladder = _2235.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2235.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2235.x * cbModelParam._m0[1u].y;
        }
        _1626 = frontier_phi_16_38_ladder_2;
        _1628 = frontier_phi_16_38_ladder_1;
        _1630 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1614 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_702, _703, _704), _1546);
        _1626 = _1614.x * cbModelParam._m0[1u].y;
        _1628 = _1614.y * cbModelParam._m0[1u].y;
        _1630 = _1614.z * cbModelParam._m0[1u].y;
    }
    float _1634 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _519);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1634 : min(cbModelParam._m0[25u].w, _1634));
    float _1728;
    float _1730;
    float _1732;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1692 = fma(_766, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _758)) + cbModelParam._m0[21u].w;
        float _1696 = fma(_766, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _758)) + cbModelParam._m0[22u].w;
        float _1700 = fma(_766, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _758)) + cbModelParam._m0[23u].w;
        float _1703 = fma(_704, cbModelParam._m0[21u].z, fma(_703, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _702));
        float _1706 = fma(_704, cbModelParam._m0[22u].z, fma(_703, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _702));
        float _1709 = fma(_704, cbModelParam._m0[23u].z, fma(_703, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _702));
        float _1849;
        if (_1703 > 0.0)
        {
            _1849 = abs((1.0 - _1692) / _1703);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1692 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1849 = frontier_phi_28_24_ladder;
        }
        float _2125;
        if (_1706 > 0.0)
        {
            _2125 = abs((1.0 - _1696) / _1706);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1696 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2125 = frontier_phi_40_35_ladder;
        }
        float _2338;
        if (_1709 > 0.0)
        {
            _2338 = abs((1.0 - _1700) / _1709);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1700 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2338 = frontier_phi_49_46_ladder;
        }
        float _2340 = isnan(_2125) ? _1849 : (isnan(_1849) ? _2125 : min(_1849, _2125));
        float _2341 = isnan(_2338) ? _2340 : (isnan(_2340) ? _2338 : min(_2340, _2338));
        float _2345 = (_2341 * _1703) + _1692;
        float _2346 = (_2341 * _1706) + _1696;
        float _2347 = (_2341 * _1709) + _1700;
        float _2348 = _2341 * 9.9999997473787516355514526367188e-05;
        float _2349 = (-1.0) - _2348;
        float _2351 = _2348 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2347 > _2351) || ((_2347 < _2349) || ((_2346 > _2351) || ((_2346 < _2349) || ((_2345 < _2349) || (_2345 > _2351))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2546 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2347, cbModelParam._m0[17u].z, fma(_2346, cbModelParam._m0[17u].y, _2345 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2347, cbModelParam._m0[18u].z, fma(_2346, cbModelParam._m0[18u].y, _2345 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2347, cbModelParam._m0[19u].z, fma(_2346, cbModelParam._m0[19u].y, _2345 * cbModelParam._m0[19u].x))), _1635);
            frontier_phi_25_49_ladder = _2546.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2546.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2546.x * cbModelParam._m0[1u].z;
        }
        _1728 = frontier_phi_25_49_ladder_2;
        _1730 = frontier_phi_25_49_ladder_1;
        _1732 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1712 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_702, _703, _704), _1635);
        _1728 = _1712.x * cbModelParam._m0[1u].z;
        _1730 = _1712.y * cbModelParam._m0[1u].z;
        _1732 = _1712.z * cbModelParam._m0[1u].z;
    }
    float _1745 = (((_729 * _679) + _730) * _694) * ((cbModelParam._m0[1u].w * (_1728 - _1626)) + _1626);
    float _1747 = (((_729 * _681) + _730) * _694) * ((cbModelParam._m0[1u].w * (_1730 - _1628)) + _1628);
    float _1749 = (((_729 * _682) + _730) * _694) * ((cbModelParam._m0[1u].w * (_1732 - _1630)) + _1630);
    float _1752 = fma(_1749, cbSceneParam._m0[89u].z, fma(_1747, cbSceneParam._m0[89u].y, _1745 * cbSceneParam._m0[89u].x));
    float _1755 = fma(_1749, cbSceneParam._m0[90u].z, fma(_1747, cbSceneParam._m0[90u].y, _1745 * cbSceneParam._m0[90u].x));
    float _1758 = fma(_1749, cbSceneParam._m0[91u].z, fma(_1747, cbSceneParam._m0[91u].y, _1745 * cbSceneParam._m0[91u].x));
    uvec4 _1768 = floatBitsToUint(cbInstanceData._m0[_654 + 5u]);
    uint _1770 = _1768.x * 14u;
    uint _1771 = _1770 + 13u;
    float _1778 = _694 + (-1.0);
    float _1783 = (cbLight._m0[_1771].x * _1778) + 1.0;
    float _1784 = (cbLight._m0[_1771].y * _1778) + 1.0;
    float _1785 = (cbLight._m0[_1771].z * _1778) + 1.0;
    float _1786 = (cbLight._m0[_1771].w * _1778) + 1.0;
    uint _1787 = _1770 + 5u;
    float _1793 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
    uint _1797 = _1770 + 4u;
    float _1803 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
    uint _1807 = _1770 | 1u;
    float _1818 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_516, _517, _518));
    float _1821 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_516, _517, _518));
    float _4029 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _4040 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1826 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.3183098733425140380859375;
    float _1828 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.3183098733425140380859375;
    float _1835 = ((cbLight._m0[_1787].x * _1793) * _1828) + ((cbLight._m0[_1797].x * _1803) * _1826);
    float _1836 = ((_1793 * cbLight._m0[_1787].y) * _1828) + ((_1803 * cbLight._m0[_1797].y) * _1826);
    float _1837 = ((_1793 * cbLight._m0[_1787].z) * _1828) + ((_1803 * cbLight._m0[_1797].z) * _1826);
    uvec4 _1841 = floatBitsToUint(cbLight._m0[_1770 + 12u]);
    bool _1843 = _1841.x == 0u;
    float _1854;
    float _1856;
    float _1858;
    if (_1843)
    {
        _1854 = _1835;
        _1856 = _1836;
        _1858 = _1837;
    }
    else
    {
        uint _1862 = _1770 + 6u;
        float _1878 = (dot(vec3(cbLight._m0[_1770 + 2u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _1879 = _1878 * _1878;
        float _4051 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1881 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _1854 = (((cbLight._m0[_1862].x * 0.3183098733425140380859375) * _1880) * _1881) + _1835;
        _1856 = (((cbLight._m0[_1862].y * 0.3183098733425140380859375) * _1880) * _1881) + _1836;
        _1858 = (((cbLight._m0[_1862].z * 0.3183098733425140380859375) * _1880) * _1881) + _1837;
    }
    bool _1861 = _1841.y == 0u;
    float _1899;
    float _1901;
    float _1903;
    if (_1861)
    {
        _1899 = _1854;
        _1901 = _1856;
        _1903 = _1858;
    }
    else
    {
        uint _2069 = _1770 + 7u;
        float _2085 = (dot(vec3(cbLight._m0[_1770 + 3u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _2086 = _2085 * _2085;
        float _4067 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2087 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2088 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _1899 = (((cbLight._m0[_2069].x * 0.3183098733425140380859375) * _2087) * _2088) + _1854;
        _1901 = (((cbLight._m0[_2069].y * 0.3183098733425140380859375) * _2087) * _2088) + _1856;
        _1903 = (((cbLight._m0[_2069].z * 0.3183098733425140380859375) * _2087) * _2088) + _1858;
    }
    uint _1906 = _1770 + 8u;
    float _1919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1770].w)) * _519) * 0.949999988079071044921875);
    float _1920 = _1919 * _1919;
    float _1921 = cbLight._m0[_1770].x + _596;
    float _1922 = cbLight._m0[_1770].y + _597;
    float _1923 = cbLight._m0[_1770].z + _598;
    float _1927 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
    float _1928 = _1927 * _1921;
    float _1929 = _1927 * _1922;
    float _1930 = _1927 * _1923;
    float _1931 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1770].xyz));
    float _4083 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _1935 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _1936 = dot(vec3(_516, _517, _518), vec3(_1928, _1929, _1930));
    float _4105 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _1940 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_1928, _1929, _1930));
    float _4116 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1944 = _1920 * _1920;
    float _1948 = ((_1939 * _1939) * (_1944 + (-1.0))) + 1.0;
    float _1956 = exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0);
    float _1957 = 0.959999978542327880859375 - _676;
    float _1959 = 0.959999978542327880859375 - _677;
    float _1960 = 0.959999978542327880859375 - _678;
    float _1967 = 1.0 - _1920;
    float _1978 = (0.5 / (((_1935 * ((_1934 * _1967) + _1920)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _1967) + _1920) * _1934))) * _1934;
    float _4127 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1980 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1944 / ((_1948 * _1948) * 3.141590118408203125));
    uint _1991 = _1770 + 9u;
    float _2002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1807].w)) * _519) * 0.949999988079071044921875);
    float _2003 = _2002 * _2002;
    float _2004 = cbLight._m0[_1807].x + _596;
    float _2005 = cbLight._m0[_1807].y + _597;
    float _2006 = cbLight._m0[_1807].z + _598;
    float _2010 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
    float _2011 = _2010 * _2004;
    float _2012 = _2010 * _2005;
    float _2013 = _2010 * _2006;
    float _2014 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1807].xyz));
    float _4138 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2018 = dot(vec3(_516, _517, _518), vec3(_2011, _2012, _2013));
    float _4149 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2022 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_2011, _2012, _2013));
    float _4160 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2026 = _2003 * _2003;
    float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
    float _2037 = exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0);
    float _2044 = 1.0 - _2003;
    float _2054 = (0.5 / (((_1935 * ((_2017 * _2044) + _2003)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2044) + _2003) * _2017))) * _2017;
    float _4171 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2056 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
    float _2066 = (((((_2037 * _1957) + _679) * cbLight._m0[_1991].x) * _2056) * _1793) + (((((_1956 * _1957) + _679) * cbLight._m0[_1906].x) * _1980) * _1803);
    float _2067 = (((((_2037 * _1959) + _681) * cbLight._m0[_1991].y) * _2056) * _1793) + (((((_1956 * _1959) + _681) * cbLight._m0[_1906].y) * _1980) * _1803);
    float _2068 = (((((_2037 * _1960) + _682) * cbLight._m0[_1991].z) * _2056) * _1793) + (((((_1956 * _1960) + _682) * cbLight._m0[_1906].z) * _1980) * _1803);
    float _2130;
    float _2132;
    float _2134;
    if (_1843)
    {
        _2130 = _2066;
        _2132 = _2067;
        _2134 = _2068;
    }
    else
    {
        uint _2136 = _1770 + 2u;
        uint _2140 = _1770 + 10u;
        float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _519) * 0.949999988079071044921875);
        float _2155 = _2154 * _2154;
        float _2156 = cbLight._m0[_2136].x + _596;
        float _2157 = cbLight._m0[_2136].y + _597;
        float _2158 = cbLight._m0[_2136].z + _598;
        float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
        float _2163 = _2162 * _2156;
        float _2164 = _2162 * _2157;
        float _2165 = _2162 * _2158;
        float _2166 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2136].xyz));
        float _4182 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2170 = dot(vec3(_516, _517, _518), vec3(_2163, _2164, _2165));
        float _4193 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2174 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2163, _2164, _2165));
        float _4204 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2178 = _2155 * _2155;
        float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
        float _2189 = exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0);
        float _2196 = 1.0 - _2155;
        float _2206 = (0.5 / (((_1935 * ((_2169 * _2196) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2196) + _2155) * _2169))) * _2169;
        float _4215 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2208 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
        float _2209 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _2130 = (((((_2189 * _1957) + _679) * cbLight._m0[_2140].x) * _2208) * _2209) + _2066;
        _2132 = (((((_2189 * _1959) + _681) * cbLight._m0[_2140].y) * _2208) * _2209) + _2067;
        _2134 = (((((_2189 * _1960) + _682) * cbLight._m0[_2140].z) * _2208) * _2209) + _2068;
    }
    float _2244;
    float _2246;
    float _2248;
    if (_1861)
    {
        _2244 = _2130;
        _2246 = _2132;
        _2248 = _2134;
    }
    else
    {
        uint _2255 = _1770 + 3u;
        uint _2259 = _1770 + 11u;
        float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2255].w)) * _519) * 0.949999988079071044921875);
        float _2274 = _2273 * _2273;
        float _2275 = cbLight._m0[_2255].x + _596;
        float _2276 = cbLight._m0[_2255].y + _597;
        float _2277 = cbLight._m0[_2255].z + _598;
        float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
        float _2282 = _2281 * _2275;
        float _2283 = _2281 * _2276;
        float _2284 = _2281 * _2277;
        float _2285 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2255].xyz));
        float _4231 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2288 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2289 = dot(vec3(_516, _517, _518), vec3(_2282, _2283, _2284));
        float _4242 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2293 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_2282, _2283, _2284));
        float _4253 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2297 = _2274 * _2274;
        float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
        float _2308 = exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0);
        float _2315 = 1.0 - _2274;
        float _2325 = (0.5 / (((_1935 * ((_2288 * _2315) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2315) + _2274) * _2288))) * _2288;
        float _4264 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2327 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
        float _2328 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _2244 = (((((_2308 * _1957) + _679) * cbLight._m0[_2259].x) * _2327) * _2328) + _2130;
        _2246 = (((((_2308 * _1959) + _681) * cbLight._m0[_2259].y) * _2327) * _2328) + _2132;
        _2248 = (((((_2308 * _1960) + _682) * cbLight._m0[_2259].z) * _2327) * _2328) + _2134;
    }
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_1768.y == 0u)
    {
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2404 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2403;
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2403;
        float _2406 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2403;
        uvec4 _2418 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2419 = _2418.x;
        uint _2430 = uint((float(_2418.y) * floor(float(uint(cbSceneParam._m0[85u].y * _617) / _2419))) + floor(float(uint(cbSceneParam._m0[85u].x * _616) / _2419)));
        float _2440 = (log2(_2406 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2441 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        uint _2444 = uint(isnan(14.0) ? _2441 : (isnan(_2441) ? 14.0 : min(_2441, 14.0)));
        uvec4 _2449 = texelFetch(g_lightClusterGridBuffer, int(((_2444 << 2u) + (_2430 << 6u)) >> 2u));
        uint _2450 = _2449.x;
        uint _2451 = _2418.z;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        if (((((1u << ((_2451 >> 4u) & 15u)) + 4294967295u) & _2450) == 0u) || ((_2451 & 240u) == 0u))
        {
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
        }
        else
        {
            float _2552;
            float _2554;
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            uint _2710 = 0u;
            uint _2719;
            bool _2720;
            for (;;)
            {
                _2719 = texelFetch(g_lightClassification, int((((_2444 << 5u) + (_2430 << 9u)) + (_2710 << 2u)) >> 2u)).x;
                _2720 = _2719 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2720)
                {
                    frontier_phi_66_pred = _2704;
                    frontier_phi_66_pred_1 = _2709;
                    frontier_phi_66_pred_2 = _2708;
                    frontier_phi_66_pred_3 = _2707;
                    frontier_phi_66_pred_4 = _2706;
                    frontier_phi_66_pred_5 = _2705;
                }
                else
                {
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    uint _2855;
                    _2849 = _2704;
                    _2850 = _2705;
                    _2851 = _2706;
                    _2852 = _2707;
                    _2853 = _2708;
                    _2854 = _2709;
                    _2855 = _2719;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    for (;;)
                    {
                        uint _2859 = uint(findLSB(_2855)) + (_2710 << 5u);
                        uint _2856 = (_2855 + 4294967295u) & _2855;
                        uint _2861 = _2859 * 48u;
                        vec4 _2875 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 3u)).x));
                        uint _2881 = (_2859 * 48u) + 4u;
                        vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2881)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 3u)).x));
                        uint _2900 = (_2859 * 48u) + 8u;
                        vec3 _2911 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x));
                        float _2915 = _2875.x - _2404;
                        float _2916 = _2875.y - _2405;
                        float _2917 = _2875.z - _2406;
                        float _2918 = dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917));
                        float _2921 = inversesqrt(_2918);
                        float _2922 = _2921 * _2915;
                        float _2923 = _2921 * _2916;
                        float _2924 = _2921 * _2917;
                        float _2925 = dot(vec3(_635, _638, _641), vec3(_2922, _2923, _2924));
                        float _2930 = 1.0 - (_2918 * _2875.w);
                        float _4290 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2931 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _2932 = sqrt(_2918) * _2894.w;
                        float _2935 = 1.39999997615814208984375 / (_2932 + 1.39999997615814208984375);
                        float _2936 = _2935 * _2935;
                        float _2939 = ((1.0 - _2936) * _2925) + _2936;
                        float _2942 = _2932 * _2932;
                        float _2946 = ((isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))) * _2931) / ((_2942 * 0.699999988079071044921875) + 1.0);
                        float _2950 = (-0.0) - _2404;
                        float _2951 = (-0.0) - _2405;
                        float _2952 = (-0.0) - _2406;
                        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2967 = exp2(log2(1.0 / ((_2942 * 3.5) + 5.0)) * 0.25);
                        float _2968 = 1.0 - _710;
                        float _2975 = sqrt(1.0 - ((1.0 - (_2968 * _2968)) * (1.0 - (_2967 * _2967))));
                        float _2976 = _2975 * _2975;
                        float _2977 = _2976 * _2976;
                        float _2978 = _2957 + _2922;
                        float _2979 = _2958 + _2923;
                        float _2980 = _2959 + _2924;
                        float _2984 = inversesqrt(dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980)));
                        float _2988 = dot(vec3(_635, _638, _641), vec3(_2957, _2958, _2959));
                        float _4306 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2991 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _2992 = dot(vec3(_635, _638, _641), vec3(_2984 * _2978, _2984 * _2979, _2984 * _2980));
                        float _4317 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2995 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _2999 = ((_2995 * _2995) * (_2977 + (-1.0))) + 1.0;
                        float _3000 = _2935 * _2976;
                        float _3001 = _3000 * _3000;
                        float _3004 = ((1.0 - _3001) * _2925) + _3001;
                        float _4328 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3005 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3006 = 1.0 - _2976;
                        float _3016 = (0.5 / (((_3005 * ((_2991 * _3006) + _2976)) + 9.9999999392252902907785028219223e-09) + (((_3005 * _3006) + _2976) * _2991))) * _3005;
                        float _4339 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3027 = (((_2977 * 3.1415927410125732421875) * (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) / ((_2999 * _2999) * ((_2942 * 2.1991131305694580078125) + 3.141590118408203125))) * _2931;
                        _2779 = (_2946 * _2894.x) + _2852;
                        _2780 = (_2946 * _2894.y) + _2853;
                        _2781 = (_2946 * _2894.z) + _2854;
                        _2776 = (_3027 * _2911.x) + _2849;
                        _2777 = (_3027 * _2911.y) + _2850;
                        _2778 = (_3027 * _2911.z) + _2851;
                        if (_2856 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2849 = _2776;
                            _2850 = _2777;
                            _2851 = _2778;
                            _2852 = _2779;
                            _2853 = _2780;
                            _2854 = _2781;
                            _2855 = _2856;
                        }
                    }
                    frontier_phi_66_pred = _2776;
                    frontier_phi_66_pred_1 = _2781;
                    frontier_phi_66_pred_2 = _2780;
                    frontier_phi_66_pred_3 = _2779;
                    frontier_phi_66_pred_4 = _2778;
                    frontier_phi_66_pred_5 = _2777;
                }
                _2552 = frontier_phi_66_pred;
                _2562 = frontier_phi_66_pred_1;
                _2560 = frontier_phi_66_pred_2;
                _2558 = frontier_phi_66_pred_3;
                _2556 = frontier_phi_66_pred_4;
                _2554 = frontier_phi_66_pred_5;
                uint _2711 = _2710 + 1u;
                if (_2711 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2704 = _2552;
                    _2705 = _2554;
                    _2706 = _2556;
                    _2707 = _2558;
                    _2708 = _2560;
                    _2709 = _2562;
                    _2710 = _2711;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
        }
        uvec4 _2565 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2566 = _2565.z;
        uint _2568 = (_2566 >> 8u) & 15u;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        if (((4294967295u << _2568) & _2450) == 0u)
        {
            _2672 = _2551;
            _2674 = _2553;
            _2676 = _2555;
            _2678 = _2557;
            _2680 = _2559;
            _2682 = _2561;
        }
        else
        {
            float _2697 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
            float _2698 = _2697 * _2404;
            float _2699 = _2697 * _2405;
            float _2700 = _2697 * _2406;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2568 < ((_2566 >> 12u) & 15u))
            {
                float _2673;
                float _2675;
                float _2677;
                float _2679;
                float _2681;
                float _2683;
                float _2832 = _2551;
                float _2833 = _2553;
                float _2834 = _2555;
                float _2835 = _2557;
                float _2836 = _2559;
                float _2837 = _2561;
                uint _2838 = _2568;
                uint _2847;
                bool _2848;
                for (;;)
                {
                    _2847 = texelFetch(g_lightClassification, int((((_2444 << 5u) + (_2430 << 9u)) + (_2838 << 2u)) >> 2u)).x;
                    _2848 = _2847 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2848)
                    {
                        frontier_phi_77_pred = _2837;
                        frontier_phi_77_pred_1 = _2836;
                        frontier_phi_77_pred_2 = _2835;
                        frontier_phi_77_pred_3 = _2834;
                        frontier_phi_77_pred_4 = _2833;
                        frontier_phi_77_pred_5 = _2832;
                    }
                    else
                    {
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3054 = _2832;
                        float _3055 = _2833;
                        float _3056 = _2834;
                        float _3057 = _2835;
                        float _3058 = _2836;
                        float _3059 = _2837;
                        uint _3060 = _2847;
                        uint _3061;
                        vec4 _3086;
                        float _3087;
                        vec4 _3102;
                        vec3 _3114;
                        vec4 _3130;
                        vec4 _3146;
                        float _3193;
                        bool _3194;
                        for (;;)
                        {
                            uint _3071 = ((_2838 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3060));
                            _3061 = (_3060 + 4294967295u) & _3060;
                            uint _3073 = _3071 * 40u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            _3087 = _3086.w;
                            uint _3089 = (_3071 * 40u) + 4u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3104 = (_3071 * 40u) + 8u;
                            _3114 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x));
                            uint _3117 = (_3071 * 40u) + 16u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3133 = (_3071 * 40u) + 20u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3149 = (_3071 * 40u) + 24u;
                            vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3168 = (_3071 * 40u) + 28u;
                            vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            _3193 = fma(_2406, _3181.z, fma(_2405, _3181.y, _3181.x * _2404)) + _3181.w;
                            _3194 = !((fma(_2406, _3162.z, fma(_2405, _3162.y, _3162.x * _2404)) + _3162.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3194)
                            {
                                float _3221 = _3086.x - _2404;
                                float _3222 = _3086.y - _2405;
                                float _3223 = _3086.z - _2406;
                                float _3224 = dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223));
                                float _3227 = inversesqrt(_3224);
                                float _3228 = _3227 * _3221;
                                float _3229 = _3227 * _3222;
                                float _3230 = _3227 * _3223;
                                float _3234 = 1.0 - (_3224 / (_3087 * _3087));
                                float _4350 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3239 = sqrt(_3224) * _3102.w;
                                float _3241 = 1.39999997615814208984375 / (_3239 + 1.39999997615814208984375);
                                float _3242 = _3241 * _3241;
                                float _3245 = ((1.0 - _3242) * dot(vec3(_3228, _3229, _3230), vec3(_635, _638, _641))) + _3242;
                                float _3248 = _3239 * _3239;
                                float _3252 = (fma(_2406, _3130.z, fma(_2405, _3130.y, _3130.x * _2404)) + _3130.w) / _3193;
                                float _3253 = (fma(_2406, _3146.z, fma(_2405, _3146.y, _3146.x * _2404)) + _3146.w) / _3193;
                                float _3257 = 1.0 - dot(vec2(_3252, _3253), vec2(_3252, _3253));
                                float _4366 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3259 = _3258 * (((isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))) * _3235) / ((_3248 * 0.699999988079071044921875) + 1.0));
                                float _3271 = exp2(log2(1.0 / ((_3248 * 3.5) + 5.0)) * 0.25);
                                float _3272 = 1.0 - _710;
                                float _3279 = sqrt(1.0 - ((1.0 - (_3272 * _3272)) * (1.0 - (_3271 * _3271))));
                                float _3280 = _3279 * _3279;
                                float _3281 = _3280 * _3280;
                                float _3282 = _3228 - _2698;
                                float _3283 = _3229 - _2699;
                                float _3284 = _3230 - _2700;
                                float _3288 = inversesqrt(dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284)));
                                float _3292 = dot(vec3(_635, _638, _641), vec3((-0.0) - _2698, (-0.0) - _2699, (-0.0) - _2700));
                                float _4377 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3295 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3296 = dot(vec3(_635, _638, _641), vec3(_3288 * _3282, _3288 * _3283, _3288 * _3284));
                                float _4388 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3299 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3303 = ((_3299 * _3299) * (_3281 + (-1.0))) + 1.0;
                                float _3304 = _3241 * _3280;
                                float _3305 = _3304 * _3304;
                                float _3311 = ((1.0 - _3305) * dot(vec3(_635, _638, _641), vec3(_3228, _3229, _3230))) + _3305;
                                float _4399 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3312 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3313 = 1.0 - _3280;
                                float _3323 = (0.5 / (((_3312 * ((_3295 * _3313) + _3280)) + 9.9999999392252902907785028219223e-09) + (((_3312 * _3313) + _3280) * _3295))) * _3312;
                                float _4410 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3333 = (_3258 * _3235) * (((_3281 * 3.1415927410125732421875) * (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) / ((_3303 * _3303) * ((_3248 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3259 * _3102.y;
                                frontier_phi_83_pred_1 = _3259 * _3102.x;
                                frontier_phi_83_pred_2 = _3333 * _3114.z;
                                frontier_phi_83_pred_3 = _3333 * _3114.y;
                                frontier_phi_83_pred_4 = _3333 * _3114.x;
                                frontier_phi_83_pred_5 = _3259 * _3102.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3341 = frontier_phi_83_pred;
                            _3340 = frontier_phi_83_pred_1;
                            _3339 = frontier_phi_83_pred_2;
                            _3338 = frontier_phi_83_pred_3;
                            _3337 = frontier_phi_83_pred_4;
                            _3342 = frontier_phi_83_pred_5;
                            _3044 = _3340 + _3057;
                            _3045 = _3341 + _3058;
                            _3046 = _3342 + _3059;
                            _3041 = _3337 + _3054;
                            _3042 = _3338 + _3055;
                            _3043 = _3339 + _3056;
                            if (_3061 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3061;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3046;
                        frontier_phi_77_pred_1 = _3045;
                        frontier_phi_77_pred_2 = _3044;
                        frontier_phi_77_pred_3 = _3043;
                        frontier_phi_77_pred_4 = _3042;
                        frontier_phi_77_pred_5 = _3041;
                    }
                    _2683 = frontier_phi_77_pred;
                    _2681 = frontier_phi_77_pred_1;
                    _2679 = frontier_phi_77_pred_2;
                    _2677 = frontier_phi_77_pred_3;
                    _2675 = frontier_phi_77_pred_4;
                    _2673 = frontier_phi_77_pred_5;
                    uint _2839 = _2838 + 1u;
                    if (_2839 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2832 = _2673;
                        _2833 = _2675;
                        _2834 = _2677;
                        _2835 = _2679;
                        _2836 = _2681;
                        _2837 = _2683;
                        _2838 = _2839;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2677;
                frontier_phi_58_59_ladder_1 = _2683;
                frontier_phi_58_59_ladder_2 = _2681;
                frontier_phi_58_59_ladder_3 = _2679;
                frontier_phi_58_59_ladder_4 = _2675;
                frontier_phi_58_59_ladder_5 = _2673;
            }
            else
            {
                frontier_phi_58_59_ladder = _2555;
                frontier_phi_58_59_ladder_1 = _2561;
                frontier_phi_58_59_ladder_2 = _2559;
                frontier_phi_58_59_ladder_3 = _2557;
                frontier_phi_58_59_ladder_4 = _2553;
                frontier_phi_58_59_ladder_5 = _2551;
            }
            _2672 = frontier_phi_58_59_ladder_5;
            _2674 = frontier_phi_58_59_ladder_4;
            _2676 = frontier_phi_58_59_ladder;
            _2678 = frontier_phi_58_59_ladder_3;
            _2680 = frontier_phi_58_59_ladder_2;
            _2682 = frontier_phi_58_59_ladder_1;
        }
        float _2687 = isnan(1.0) ? _694 : (isnan(_694) ? 1.0 : min(_694, 1.0));
        _2463 = (_2687 * _2678) + _1899;
        _2465 = (_2687 * _2680) + _1901;
        _2467 = (_2687 * _2682) + _1903;
        _2469 = ((_2672 * _679) * _2687) + _2244;
        _2471 = ((_2674 * _681) * _2687) + _2246;
        _2473 = ((_2676 * _682) * _2687) + _2248;
    }
    else
    {
        _2463 = _1899;
        _2465 = _1901;
        _2467 = _1903;
        _2469 = _2244;
        _2471 = _2246;
        _2473 = _2248;
    }
    float _4426 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4437 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4448 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _2490 = ((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2463 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _694))) + ((_2469 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1535)) * cbPerFrame._m0[3u].x);
    float _2491 = ((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2465 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _694))) + ((_2471 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1535)) * cbPerFrame._m0[3u].x);
    float _2492 = ((isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2467 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _694))) + ((_2473 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1535)) * cbPerFrame._m0[3u].x);
    uint _2493 = _654 + 6u;
    float _2501 = _616 / cbSceneParam._m0[86u].x;
    float _2502 = _617 / cbSceneParam._m0[86u].y;
    vec4 _2516 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2501, _2502, (log2((isnan(cbSceneParam._m0[77u].w) ? _539 : (isnan(_539) ? cbSceneParam._m0[77u].w : min(_539, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2518 = _2516.x;
    float _2519 = _2516.y;
    float _2520 = _2516.z;
    float _2521 = _2516.w;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    if (_539 > cbSceneParam._m0[78u].w)
    {
        float _2576 = isnan(_539) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _539 : min(cbSceneParam._m0[80u].w, _539));
        float _2577 = _2576 / _539;
        float _2588 = _2577 * _589;
        float _2589 = _590 * _2577;
        float _2590 = (-0.0) - _2589;
        float _2592 = _2577 * _591;
        float _2594 = (cbSceneParam._m0[77u].w * _2590) / _2576;
        float _2595 = _2594 + cbSceneParam._m0[79u].w;
        float _2596 = cbSceneParam._m0[79u].w - _2589;
        float _2602 = sqrt(((_2588 * _2588) + (_2589 * _2589)) + (_2592 * _2592));
        float _2605 = (1.0 - (cbSceneParam._m0[77u].w / _2576)) * _2602;
        float _2610 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2612 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2789;
        if (abs((_2590 - _2594) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2789 = ((((_2595 > 0.0) ? exp2(_2610 * _2595) : (2.0 - exp2(_2612 * _2595))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2605;
        }
        else
        {
            float _2733 = 1.0 / cbSceneParam._m0[80u].x;
            float _2734 = isnan(_2596) ? _2595 : (isnan(_2595) ? _2596 : max(_2595, _2596));
            float _2735 = isnan(_2596) ? _2595 : (isnan(_2595) ? _2596 : min(_2595, _2596));
            float _2744 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : min(_2734, 0.0));
            float _2745 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : min(_2735, 0.0));
            _2789 = ((abs(_2602 / _2590) * cbSceneParam._m0[80u].y) * ((((_2744 - _2745) * 2.0) - ((exp2(_2610 * (isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0)))) - exp2(_2610 * (isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0))))) * _2733)) - ((exp2(_2612 * _2744) - exp2(_2612 * _2745)) * _2733))) + (_2605 * cbSceneParam._m0[80u].z);
        }
        vec4 _2791 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2501, _2502, 1.0), 0.0);
        float _2800 = exp2((_2789 * (-1.44269502162933349609375)) * (1.0 - _2791.w));
        float _2801 = log2(_2800);
        float _2817 = log2(_2521);
        _2614 = (exp2(_2817 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2801 * cbSceneParam._m0[78u].x)) * _2791.x) / cbSceneParam._m0[78u].x)) + _2518;
        _2616 = (exp2(_2817 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2801 * cbSceneParam._m0[78u].y)) * _2791.y) / cbSceneParam._m0[78u].y)) + _2519;
        _2618 = (exp2(_2817 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2801 * cbSceneParam._m0[78u].z)) * _2791.z) / cbSceneParam._m0[78u].z)) + _2520;
        _2620 = _2800 * _2521;
    }
    else
    {
        _2614 = _2518;
        _2616 = _2519;
        _2618 = _2520;
        _2620 = _2521;
    }
    bool _2827;
    vec4 _2630;
    vec4 _2652;
    float _2654;
    float _2658;
    float _2659;
    float _2660;
    float _2661;
    bool _2671;
    for (;;)
    {
        _2630 = cbMatDynParam._m0[0u];
        float _2632 = roundEven(_2630.y);
        bool _2633 = _2632 == 3.0;
        float _2634 = log2(_2620);
        float _2641 = exp2(_2634 * cbSceneParam._m0[78u].x) * _2490;
        float _2642 = exp2(_2634 * cbSceneParam._m0[78u].y) * _2491;
        float _2643 = exp2(_2634 * cbSceneParam._m0[78u].z) * _2492;
        float _2650 = _605 + (-0.5);
        _2652 = cbMtdParam._m0[1u];
        _2654 = _2652.y * _2650;
        float _2657 = (_2632 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2658 = _2657 * (_2633 ? _2641 : (_2641 + (cbSceneParam._m0[72u].w * _2614)));
        _2659 = _2657 * (_2633 ? _2642 : (_2642 + (cbSceneParam._m0[72u].w * _2616)));
        _2660 = _2657 * (_2633 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2618)));
        _2661 = _2650 * 0.999000012874603271484375;
        _2671 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2671)
        {
            if ((cbInstanceData._m0[_654 + 7u].x + _2661) < 0.5)
            {
                _2827 = true;
                break;
            }
        }
        uint _2768 = _655 + uint(_2630.w);
        if ((cbInstanceData._m0[_2768].w < 1.0) && ((cbInstanceData._m0[_2768].w + _2661) < 0.5))
        {
            _2827 = true;
            break;
        }
        if ((_2654 + 1.0) < _2652.x)
        {
            _2827 = true;
            break;
        }
        _2827 = false;
        break;
    }
    float _3032;
    if (_2827)
    {
        discard_state = true;
        _3032 = 0.0;
    }
    else
    {
        _3032 = cbInstanceData._m0[_2493].w;
    }
    SV_Target.x = _2658;
    SV_Target.y = _2659;
    SV_Target.z = _2660;
    SV_Target.w = _3032;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2493].w;
    discard_exit();
}


