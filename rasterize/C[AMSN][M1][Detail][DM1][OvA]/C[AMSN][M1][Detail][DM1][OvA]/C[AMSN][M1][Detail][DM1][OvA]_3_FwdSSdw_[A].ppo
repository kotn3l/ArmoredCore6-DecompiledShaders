#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _920;
float _3312;
float _3313;
float _3314;
float _3315;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _251 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _260 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _228.x) * cbMtdParam._m0[9u].x) * _251.x;
    float _264 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _228.y) * cbMtdParam._m0[9u].y) * _251.y;
    float _268 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _228.z) * cbMtdParam._m0[9u].z) * _251.z;
    vec4 _285 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _289 = _285.z;
    vec4 _302 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _316 = cbMtdParam._m0[13u].w * _289;
    float _319 = (((((_289 * 2.0) * _302.z) * cbMtdParam._m0[14u].x) - _316) * cbMtdParam._m0[13u].y) + _316;
    float _323 = (_285.x * 2.0) + (-1.0);
    float _325 = (_285.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_323, _325), vec2(_323, _325));
    float _3324 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _332 = sqrt(1.0 - (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))));
    float _339 = (cbMtdParam._m0[13u].x * ((_302.x * 2.0) + (-1.0))) + _323;
    float _340 = (cbMtdParam._m0[13u].x * ((_302.y * 2.0) + (-1.0))) + _325;
    float _343 = fma(_332, _198 * NORMAL.x, fma(_340, _205 * TANGENT.x, (_191 * _183) * _339));
    float _346 = fma(_332, _198 * NORMAL.y, fma(_340, _205 * TANGENT.y, (_191 * _184) * _339));
    float _349 = fma(_332, _198 * NORMAL.z, fma(_340, _205 * TANGENT.z, (_191 * _185) * _339));
    float _353 = inversesqrt(dot(vec3(_343, _346, _349), vec3(_343, _346, _349)));
    float _354 = _353 * _343;
    float _355 = _353 * _346;
    float _356 = _353 * _349;
    float _3335 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _357 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _3346 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3357 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3368 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _376 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _418 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _428 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _418);
    float _429 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _418);
    float _430 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _418);
    float _434 = inversesqrt(dot(vec3(_428, _429, _430), vec3(_428, _429, _430)));
    float _435 = _428 * _434;
    float _436 = _429 * _434;
    float _437 = _430 * _434;
    vec4 _442 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _444 = _442.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _599 = sqrt(((_428 * _428) + (_429 * _429)) + (_430 * _430));
        float _605 = (cbMatDynParam._m0[5u].x * _599) + cbMatDynParam._m0[5u].y;
        float _3379 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _606 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _610 = (cbMatDynParam._m0[5u].z * _599) + cbMatDynParam._m0[5u].w;
        float _3390 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) - _606)) + _606) < ((_444 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _455 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _456 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _475 = fma(_356, cbSceneParam._m0[5u].z, fma(_355, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _354));
    float _478 = fma(_356, cbSceneParam._m0[6u].z, fma(_355, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _354));
    float _481 = fma(_356, cbSceneParam._m0[7u].z, fma(_355, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _354));
    uint _494 = uint(roundEven(NORMAL.w)) * 13u;
    uint _495 = _494 + 9u;
    uint _496 = _495 + uint(cbMatDynParam._m0[0u].w);
    float _502 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)))) * cbInstanceData._m0[_496].x;
    float _503 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) * cbInstanceData._m0[_496].y;
    float _504 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0)))) * cbInstanceData._m0[_496].z;
    float _3401 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _505 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _506 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _507 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    vec4 _516 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _455, cbSceneParam._m0[86u].y * _456));
    float _519 = _516.x * TEXCOORD_5.w;
    float _520 = dot(vec3(_354, _355, _356), vec3(_435, _436, _437));
    float _523 = _520 * 2.0;
    float _527 = (_523 * _354) - _435;
    float _528 = (_523 * _355) - _436;
    float _529 = (_523 * _356) - _437;
    float _533 = abs(dot(vec3(_435, _436, _437), vec3(_354, _355, _356)));
    float _3434 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _535 = sqrt(_357);
    float _548 = exp2((_535 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_535 * 3.0));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _919;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _644 = fma(_588, cbModelParam._m0[26u].z, fma(_584, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _580));
        float _648 = fma(_588, cbModelParam._m0[27u].z, fma(_584, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _580));
        float _652 = fma(_588, cbModelParam._m0[28u].z, fma(_584, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _580));
        float _677 = _580 + _354;
        float _678 = _584 + _355;
        float _679 = _588 + _356;
        float _689 = fma(_679, cbModelParam._m0[26u].z, fma(_678, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _677)) - _644;
        float _690 = fma(_679, cbModelParam._m0[27u].z, fma(_678, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _677)) - _648;
        float _691 = fma(_679, cbModelParam._m0[28u].z, fma(_678, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _677)) - _652;
        float _695 = inversesqrt(dot(vec3(_689, _690, _691), vec3(_689, _690, _691)));
        float _708 = ((_695 * _689) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_644 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _709 = ((_695 * _690) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_648 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _710 = ((_695 * _691) / cbModelParam._m0[34u].z) + ((((((_652 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        float _747 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_713.x + (-0.5));
        float _749 = _747 * (_713.y + (-0.5));
        float _750 = _747 * (_713.z + (-0.5));
        float _757 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_720.x + (-0.5));
        float _759 = _757 * (_720.y + (-0.5));
        float _760 = _757 * (_720.z + (-0.5));
        float _767 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_727.x + (-0.5));
        float _769 = _767 * (_727.y + (-0.5));
        float _770 = _767 * (_727.z + (-0.5));
        float _777 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_734.x + (-0.5));
        float _779 = _777 * (_734.y + (-0.5));
        float _780 = _777 * (_734.z + (-0.5));
        float _781 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = _748 * 0.5;
        float _785 = _758 * 0.5;
        float _786 = _768 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _801 = (dot(vec3(_354, _355, _356), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _811 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_781 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3482 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_813 + 1.0))) + _818) * _781;
        float _828 = _749 * 0.5;
        float _829 = _759 * 0.5;
        float _830 = _769 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _844 = (dot(vec3(_354, _355, _356), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _853 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3515 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_855 + 1.0))) + _860) * _782;
        float _870 = _750 * 0.5;
        float _871 = _760 * 0.5;
        float _872 = _770 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _886 = (dot(vec3(_354, _355, _356), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _895 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3548 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_897 + 1.0))) + _902) * _783;
        _919 = _750;
        _921 = _749;
        _922 = _748;
        _923 = _760;
        _924 = _759;
        _925 = _758;
        _926 = _770;
        _927 = _769;
        _928 = _768;
        _929 = _783;
        _930 = _782;
        _931 = _781;
        _932 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
    }
    else
    {
        _919 = _920;
        _921 = _920;
        _922 = _920;
        _923 = _920;
        _924 = _920;
        _925 = _920;
        _926 = _920;
        _927 = _920;
        _928 = _920;
        _929 = _920;
        _930 = _920;
        _931 = _920;
        _932 = 0.0;
        _933 = 0.0;
        _934 = 0.0;
    }
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _963 = fma(_588, cbModelParam._m0[30u].z, fma(_584, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _580));
        float _967 = fma(_588, cbModelParam._m0[31u].z, fma(_584, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _580));
        float _971 = fma(_588, cbModelParam._m0[32u].z, fma(_584, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _580));
        float _994 = _580 + _354;
        float _995 = _584 + _355;
        float _996 = _588 + _356;
        float _1006 = fma(_996, cbModelParam._m0[30u].z, fma(_995, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _994)) - _963;
        float _1007 = fma(_996, cbModelParam._m0[31u].z, fma(_995, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _994)) - _967;
        float _1008 = fma(_996, cbModelParam._m0[32u].z, fma(_995, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _994)) - _971;
        float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
        float _1025 = ((_1012 * _1006) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_963 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1012 * _1007) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_967 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1012 * _1008) / cbModelParam._m0[35u].z) + ((((((_971 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        float _1062 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1029.x + (-0.5));
        float _1064 = _1062 * (_1029.y + (-0.5));
        float _1065 = _1062 * (_1029.z + (-0.5));
        float _1072 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1036.x + (-0.5));
        float _1074 = _1072 * (_1036.y + (-0.5));
        float _1075 = _1072 * (_1036.z + (-0.5));
        float _1082 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1043.x + (-0.5));
        float _1084 = _1082 * (_1043.y + (-0.5));
        float _1085 = _1082 * (_1043.z + (-0.5));
        float _1092 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1050.x + (-0.5));
        float _1094 = _1092 * (_1050.y + (-0.5));
        float _1095 = _1092 * (_1050.z + (-0.5));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = _1063 * 0.5;
        float _1100 = _1073 * 0.5;
        float _1101 = _1083 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_354, _355, _356), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3611 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1126 + 1.0))) + _1131) * _1096;
        float _1141 = _1064 * 0.5;
        float _1142 = _1074 * 0.5;
        float _1143 = _1084 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_354, _355, _356), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3644 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1168 + 1.0))) + _1173) * _1097;
        float _1183 = _1065 * 0.5;
        float _1184 = _1075 * 0.5;
        float _1185 = _1085 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_354, _355, _356), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3677 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1210 + 1.0))) + _1215) * _1098;
        _1232 = _1065;
        _1233 = _1064;
        _1234 = _1063;
        _1235 = _1075;
        _1236 = _1074;
        _1237 = _1073;
        _1238 = _1085;
        _1239 = _1084;
        _1240 = _1083;
        _1241 = _1098;
        _1242 = _1097;
        _1243 = _1096;
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
    }
    else
    {
        _1232 = _920;
        _1233 = _920;
        _1234 = _920;
        _1235 = _920;
        _1236 = _920;
        _1237 = _920;
        _1238 = _920;
        _1239 = _920;
        _1240 = _920;
        _1241 = _920;
        _1242 = _920;
        _1243 = _920;
        _1244 = 0.0;
        _1245 = 0.0;
        _1246 = 0.0;
    }
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _932)) + _932;
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _933)) + _933;
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _934)) + _934;
    float _1279 = fma(_1258, cbSceneParam._m0[89u].z, fma(_1257, cbSceneParam._m0[89u].y, _1256 * cbSceneParam._m0[89u].x));
    float _1282 = fma(_1258, cbSceneParam._m0[90u].z, fma(_1257, cbSceneParam._m0[90u].y, _1256 * cbSceneParam._m0[90u].x));
    float _1285 = fma(_1258, cbSceneParam._m0[91u].z, fma(_1257, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1256));
    float _1300 = _527 * 0.5;
    float _1301 = _528 * 0.5;
    float _1302 = _529 * 0.5;
    float _1303 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1306 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1309 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1343;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1316 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_919, _923, _926, _929));
        float _1320 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_921, _924, _927, _930));
        float _1324 = dot(vec4(_1300, _1301, _1302, 1.0), vec4(_922, _925, _928, _931));
        float _1331 = dot(vec4(cbModelParam._m0[39u]), vec4(_1300, _1301, _1302, 1.0));
        _1343 = dot(vec3(isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1343 = 1.0;
    }
    float _1354;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1345 = dot(vec4(cbModelParam._m0[40u]), vec4(_1300, _1301, _1302, 1.0));
        _1354 = dot(vec3(isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1345) ? 0.0 : (isnan(0.0) ? _1345 : max(0.0, _1345))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1354 = 1.0;
    }
    float _1358 = (_1354 * cbModelParam._m0[1u].x) + (_1343 * (1.0 - cbModelParam._m0[1u].x));
    float _1368 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _357);
    float _1369 = isnan(_1368) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1368 : min(cbModelParam._m0[25u].z, _1368));
    float _1449;
    float _1451;
    float _1453;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1416 = fma(_588, cbModelParam._m0[13u].z, fma(_584, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _580)) + cbModelParam._m0[13u].w;
        float _1420 = fma(_588, cbModelParam._m0[14u].z, fma(_584, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _580)) + cbModelParam._m0[14u].w;
        float _1424 = fma(_588, cbModelParam._m0[15u].z, fma(_584, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _580)) + cbModelParam._m0[15u].w;
        float _1427 = fma(_529, cbModelParam._m0[13u].z, fma(_528, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _527));
        float _1430 = fma(_529, cbModelParam._m0[14u].z, fma(_528, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _527));
        float _1433 = fma(_529, cbModelParam._m0[15u].z, fma(_528, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _527));
        float _1461;
        if (_1427 > 0.0)
        {
            _1461 = abs((1.0 - _1416) / _1427);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1416 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1461 = frontier_phi_17_15_ladder;
        }
        float _1688;
        if (_1430 > 0.0)
        {
            _1688 = abs((1.0 - _1420) / _1430);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1420 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1688 = frontier_phi_26_22_ladder;
        }
        float _1934;
        if (_1433 > 0.0)
        {
            _1934 = abs((1.0 - _1424) / _1433);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1424 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1934 = frontier_phi_38_33_ladder;
        }
        float _1936 = isnan(_1688) ? _1461 : (isnan(_1461) ? _1688 : min(_1461, _1688));
        float _1937 = isnan(_1934) ? _1936 : (isnan(_1936) ? _1934 : min(_1936, _1934));
        float _1941 = (_1937 * _1427) + _1416;
        float _1942 = (_1937 * _1430) + _1420;
        float _1943 = (_1937 * _1433) + _1424;
        float _1944 = _1937 * 9.9999997473787516355514526367188e-05;
        float _1946 = (-1.0) - _1944;
        float _1948 = _1944 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1943 > _1948) || ((_1943 < _1946) || ((_1942 > _1948) || ((_1942 < _1946) || ((_1941 < _1946) || (_1941 > _1948))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2067 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1943, cbModelParam._m0[9u].z, fma(_1942, cbModelParam._m0[9u].y, _1941 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1943, cbModelParam._m0[10u].z, fma(_1942, cbModelParam._m0[10u].y, _1941 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1943, cbModelParam._m0[11u].z, fma(_1942, cbModelParam._m0[11u].y, _1941 * cbModelParam._m0[11u].x))), _1369);
            frontier_phi_16_38_ladder = _2067.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2067.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2067.x * cbModelParam._m0[1u].y;
        }
        _1449 = frontier_phi_16_38_ladder_2;
        _1451 = frontier_phi_16_38_ladder_1;
        _1453 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1437 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_527, _528, _529), _1369);
        _1449 = _1437.x * cbModelParam._m0[1u].y;
        _1451 = _1437.y * cbModelParam._m0[1u].y;
        _1453 = _1437.z * cbModelParam._m0[1u].y;
    }
    float _1457 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _357);
    float _1458 = isnan(_1457) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1457 : min(cbModelParam._m0[25u].w, _1457));
    float _1551;
    float _1553;
    float _1555;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1515 = fma(_588, cbModelParam._m0[21u].z, fma(_584, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _580)) + cbModelParam._m0[21u].w;
        float _1519 = fma(_588, cbModelParam._m0[22u].z, fma(_584, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _580)) + cbModelParam._m0[22u].w;
        float _1523 = fma(_588, cbModelParam._m0[23u].z, fma(_584, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _580)) + cbModelParam._m0[23u].w;
        float _1526 = fma(_529, cbModelParam._m0[21u].z, fma(_528, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _527));
        float _1529 = fma(_529, cbModelParam._m0[22u].z, fma(_528, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _527));
        float _1532 = fma(_529, cbModelParam._m0[23u].z, fma(_528, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _527));
        float _1693;
        if (_1526 > 0.0)
        {
            _1693 = abs((1.0 - _1515) / _1526);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1515 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1693 = frontier_phi_28_24_ladder;
        }
        float _1961;
        if (_1529 > 0.0)
        {
            _1961 = abs((1.0 - _1519) / _1529);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1519 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1961 = frontier_phi_40_35_ladder;
        }
        float _2166;
        if (_1532 > 0.0)
        {
            _2166 = abs((1.0 - _1523) / _1532);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1523 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2166 = frontier_phi_49_46_ladder;
        }
        float _2168 = isnan(_1961) ? _1693 : (isnan(_1693) ? _1961 : min(_1693, _1961));
        float _2169 = isnan(_2166) ? _2168 : (isnan(_2168) ? _2166 : min(_2168, _2166));
        float _2173 = (_2169 * _1526) + _1515;
        float _2174 = (_2169 * _1529) + _1519;
        float _2175 = (_2169 * _1532) + _1523;
        float _2176 = _2169 * 9.9999997473787516355514526367188e-05;
        float _2177 = (-1.0) - _2176;
        float _2179 = _2176 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2175 > _2179) || ((_2175 < _2177) || ((_2174 > _2179) || ((_2174 < _2177) || ((_2173 < _2177) || (_2173 > _2179))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2374 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2175, cbModelParam._m0[17u].z, fma(_2174, cbModelParam._m0[17u].y, _2173 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2175, cbModelParam._m0[18u].z, fma(_2174, cbModelParam._m0[18u].y, _2173 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2175, cbModelParam._m0[19u].z, fma(_2174, cbModelParam._m0[19u].y, _2173 * cbModelParam._m0[19u].x))), _1458);
            frontier_phi_25_49_ladder = _2374.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2374.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2374.x * cbModelParam._m0[1u].z;
        }
        _1551 = frontier_phi_25_49_ladder_2;
        _1553 = frontier_phi_25_49_ladder_1;
        _1555 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1535 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_527, _528, _529), _1458);
        _1551 = _1535.x * cbModelParam._m0[1u].z;
        _1553 = _1535.y * cbModelParam._m0[1u].z;
        _1555 = _1535.z * cbModelParam._m0[1u].z;
    }
    float _1567 = ((((1.0 - _548) * ((_535 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_548 * _535)) * _519;
    float _1568 = _1567 * ((cbModelParam._m0[1u].w * (_1551 - _1449)) + _1449);
    float _1569 = _1567 * ((cbModelParam._m0[1u].w * (_1553 - _1451)) + _1451);
    float _1570 = _1567 * ((cbModelParam._m0[1u].w * (_1555 - _1453)) + _1453);
    float _1573 = fma(_1570, cbSceneParam._m0[89u].z, fma(_1569, cbSceneParam._m0[89u].y, _1568 * cbSceneParam._m0[89u].x));
    float _1576 = fma(_1570, cbSceneParam._m0[90u].z, fma(_1569, cbSceneParam._m0[90u].y, _1568 * cbSceneParam._m0[90u].x));
    float _1579 = fma(_1570, cbSceneParam._m0[91u].z, fma(_1569, cbSceneParam._m0[91u].y, _1568 * cbSceneParam._m0[91u].x));
    vec4 _1587 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_455, _456));
    float _1589 = _1587.w;
    float _1601 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1589);
    float _1602 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1589);
    float _1603 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1589);
    uvec4 _1607 = floatBitsToUint(cbInstanceData._m0[_494 + 5u]);
    uint _1609 = _1607.x * 14u;
    uint _1610 = _1609 + 13u;
    float _1617 = _519 + (-1.0);
    float _1622 = (cbLight._m0[_1610].x * _1617) + 1.0;
    float _1623 = (cbLight._m0[_1610].y * _1617) + 1.0;
    float _1624 = (cbLight._m0[_1610].z * _1617) + 1.0;
    float _1625 = (cbLight._m0[_1610].w * _1617) + 1.0;
    uint _1626 = _1609 + 5u;
    float _1632 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
    uint _1636 = _1609 + 4u;
    float _1646 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
    uint _1650 = _1609 | 1u;
    float _1661 = dot(vec3(cbLight._m0[_1609].xyz), vec3(_354, _355, _356));
    float _1664 = dot(vec3(cbLight._m0[_1650].xyz), vec3(_354, _355, _356));
    float _3813 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _3824 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _1669 = (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.3183098733425140380859375;
    float _1671 = (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.3183098733425140380859375;
    float _1678 = ((cbLight._m0[_1626].x * _1632) * _1671) + (((cbLight._m0[_1636].x * _1601) * _1646) * _1669);
    float _1679 = ((_1632 * cbLight._m0[_1626].y) * _1671) + (((cbLight._m0[_1636].y * _1602) * _1646) * _1669);
    float _1680 = ((_1632 * cbLight._m0[_1626].z) * _1671) + (((cbLight._m0[_1636].z * _1603) * _1646) * _1669);
    uvec4 _1685 = floatBitsToUint(cbLight._m0[_1609 + 12u]);
    bool _1687 = _1685.x == 0u;
    float _1698;
    float _1700;
    float _1702;
    if (_1687)
    {
        _1698 = _1678;
        _1700 = _1679;
        _1702 = _1680;
    }
    else
    {
        uint _1706 = _1609 + 6u;
        float _1722 = (dot(vec3(cbLight._m0[_1609 + 2u].xyz), vec3(_354, _355, _356)) * 0.5) + 0.5;
        float _1723 = _1722 * _1722;
        float _3835 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1725 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
        _1698 = (((cbLight._m0[_1706].x * 0.3183098733425140380859375) * _1724) * _1725) + _1678;
        _1700 = (((cbLight._m0[_1706].y * 0.3183098733425140380859375) * _1724) * _1725) + _1679;
        _1702 = (((cbLight._m0[_1706].z * 0.3183098733425140380859375) * _1724) * _1725) + _1680;
    }
    bool _1705 = _1685.y == 0u;
    float _1743;
    float _1745;
    float _1747;
    if (_1705)
    {
        _1743 = _1698;
        _1745 = _1700;
        _1747 = _1702;
    }
    else
    {
        uint _1905 = _1609 + 7u;
        float _1921 = (dot(vec3(cbLight._m0[_1609 + 3u].xyz), vec3(_354, _355, _356)) * 0.5) + 0.5;
        float _1922 = _1921 * _1921;
        float _3851 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1924 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
        _1743 = (((cbLight._m0[_1905].x * 0.3183098733425140380859375) * _1923) * _1924) + _1698;
        _1745 = (((cbLight._m0[_1905].y * 0.3183098733425140380859375) * _1923) * _1924) + _1700;
        _1747 = (((cbLight._m0[_1905].z * 0.3183098733425140380859375) * _1923) * _1924) + _1702;
    }
    uint _1750 = _1609 + 8u;
    float _1763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1609].w)) * _357) * 0.949999988079071044921875);
    float _1764 = _1763 * _1763;
    float _1765 = cbLight._m0[_1609].x + _435;
    float _1766 = cbLight._m0[_1609].y + _436;
    float _1767 = cbLight._m0[_1609].z + _437;
    float _1771 = inversesqrt(dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767)));
    float _1772 = _1771 * _1765;
    float _1773 = _1771 * _1766;
    float _1774 = _1771 * _1767;
    float _1775 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_1609].xyz));
    float _3867 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1778 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _1779 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _1780 = dot(vec3(_354, _355, _356), vec3(_1772, _1773, _1774));
    float _3889 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _1784 = dot(vec3(cbLight._m0[_1609].xyz), vec3(_1772, _1773, _1774));
    float _3900 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1788 = _1764 * _1764;
    float _1792 = ((_1783 * _1783) * (_1788 + (-1.0))) + 1.0;
    float _1803 = (exp2(log2(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1804 = 1.0 - _1764;
    float _1815 = (0.5 / (((_1779 * ((_1778 * _1804) + _1764)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _1804) + _1764) * _1778))) * _1778;
    float _3911 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1817 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1788 / ((_1792 * _1792) * 3.141590118408203125));
    uint _1831 = _1609 + 9u;
    float _1842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1650].w)) * _357) * 0.949999988079071044921875);
    float _1843 = _1842 * _1842;
    float _1844 = cbLight._m0[_1650].x + _435;
    float _1845 = cbLight._m0[_1650].y + _436;
    float _1846 = cbLight._m0[_1650].z + _437;
    float _1850 = inversesqrt(dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846)));
    float _1851 = _1850 * _1844;
    float _1852 = _1850 * _1845;
    float _1853 = _1850 * _1846;
    float _1854 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_1650].xyz));
    float _3922 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _1858 = dot(vec3(_354, _355, _356), vec3(_1851, _1852, _1853));
    float _3933 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1862 = dot(vec3(cbLight._m0[_1650].xyz), vec3(_1851, _1852, _1853));
    float _3944 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1866 = _1843 * _1843;
    float _1870 = ((_1861 * _1861) * (_1866 + (-1.0))) + 1.0;
    float _1879 = (exp2(log2(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1880 = 1.0 - _1843;
    float _1890 = (0.5 / (((_1779 * ((_1857 * _1880) + _1843)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _1880) + _1843) * _1857))) * _1857;
    float _3955 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1892 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1866 / ((_1870 * _1870) * 3.141590118408203125));
    float _1902 = (((_1879 * cbLight._m0[_1831].x) * _1892) * _1632) + ((((cbLight._m0[_1750].x * _1601) * _1803) * _1817) * _1646);
    float _1903 = (((_1879 * cbLight._m0[_1831].y) * _1892) * _1632) + ((((cbLight._m0[_1750].y * _1602) * _1803) * _1817) * _1646);
    float _1904 = (((_1879 * cbLight._m0[_1831].z) * _1892) * _1632) + ((((cbLight._m0[_1750].z * _1603) * _1803) * _1817) * _1646);
    float _1966;
    float _1968;
    float _1970;
    if (_1687)
    {
        _1966 = _1902;
        _1968 = _1903;
        _1970 = _1904;
    }
    else
    {
        uint _1972 = _1609 + 2u;
        uint _1976 = _1609 + 10u;
        float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _357) * 0.949999988079071044921875);
        float _1991 = _1990 * _1990;
        float _1992 = cbLight._m0[_1972].x + _435;
        float _1993 = cbLight._m0[_1972].y + _436;
        float _1994 = cbLight._m0[_1972].z + _437;
        float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
        float _1999 = _1998 * _1992;
        float _2000 = _1998 * _1993;
        float _2001 = _1998 * _1994;
        float _2002 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_1972].xyz));
        float _3966 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2005 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _2006 = dot(vec3(_354, _355, _356), vec3(_1999, _2000, _2001));
        float _3977 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2009 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2010 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_1999, _2000, _2001));
        float _3988 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2014 = _1991 * _1991;
        float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
        float _2027 = (exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2028 = 1.0 - _1991;
        float _2038 = (0.5 / (((_1779 * ((_2005 * _2028) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _2028) + _1991) * _2005))) * _2005;
        float _3999 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2040 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
        float _2041 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
        _1966 = (((_2027 * cbLight._m0[_1976].x) * _2040) * _2041) + _1902;
        _1968 = (((_2027 * cbLight._m0[_1976].y) * _2040) * _2041) + _1903;
        _1970 = (((_2027 * cbLight._m0[_1976].z) * _2040) * _2041) + _1904;
    }
    float _2076;
    float _2078;
    float _2080;
    if (_1705)
    {
        _2076 = _1966;
        _2078 = _1968;
        _2080 = _1970;
    }
    else
    {
        uint _2087 = _1609 + 3u;
        uint _2091 = _1609 + 11u;
        float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _357) * 0.949999988079071044921875);
        float _2106 = _2105 * _2105;
        float _2107 = cbLight._m0[_2087].x + _435;
        float _2108 = cbLight._m0[_2087].y + _436;
        float _2109 = cbLight._m0[_2087].z + _437;
        float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
        float _2114 = _2113 * _2107;
        float _2115 = _2113 * _2108;
        float _2116 = _2113 * _2109;
        float _2117 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_2087].xyz));
        float _4015 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2121 = dot(vec3(_354, _355, _356), vec3(_2114, _2115, _2116));
        float _4026 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2125 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2114, _2115, _2116));
        float _4037 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2129 = _2106 * _2106;
        float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
        float _2142 = (exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2143 = 1.0 - _2106;
        float _2153 = (0.5 / (((_1779 * ((_2120 * _2143) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _2143) + _2106) * _2120))) * _2120;
        float _4048 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2155 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
        float _2156 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
        _2076 = (((_2142 * cbLight._m0[_2091].x) * _2155) * _2156) + _1966;
        _2078 = (((_2142 * cbLight._m0[_2091].y) * _2155) * _2156) + _1968;
        _2080 = (((_2142 * cbLight._m0[_2091].z) * _2155) * _2156) + _1970;
    }
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    if (_1607.y == 0u)
    {
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2231;
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2231;
        float _2234 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2231;
        uvec4 _2246 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2247 = _2246.x;
        uint _2258 = uint((float(_2246.y) * floor(float(uint(cbSceneParam._m0[85u].y * _456) / _2247))) + floor(float(uint(cbSceneParam._m0[85u].x * _455) / _2247)));
        float _2268 = (log2(_2234 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2269 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        uint _2272 = uint(isnan(14.0) ? _2269 : (isnan(_2269) ? 14.0 : min(_2269, 14.0)));
        uvec4 _2277 = texelFetch(g_lightClusterGridBuffer, int(((_2272 << 2u) + (_2258 << 6u)) >> 2u));
        uint _2278 = _2277.x;
        uint _2279 = _2246.z;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        if (((((1u << ((_2279 >> 4u) & 15u)) + 4294967295u) & _2278) == 0u) || ((_2279 & 240u) == 0u))
        {
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
        }
        else
        {
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            uint _2538 = 0u;
            uint _2547;
            bool _2548;
            for (;;)
            {
                _2547 = texelFetch(g_lightClassification, int((((_2272 << 5u) + (_2258 << 9u)) + (_2538 << 2u)) >> 2u)).x;
                _2548 = _2547 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2548)
                {
                    frontier_phi_66_pred = _2532;
                    frontier_phi_66_pred_1 = _2537;
                    frontier_phi_66_pred_2 = _2536;
                    frontier_phi_66_pred_3 = _2535;
                    frontier_phi_66_pred_4 = _2534;
                    frontier_phi_66_pred_5 = _2533;
                }
                else
                {
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    uint _2683;
                    _2677 = _2532;
                    _2678 = _2533;
                    _2679 = _2534;
                    _2680 = _2535;
                    _2681 = _2536;
                    _2682 = _2537;
                    _2683 = _2547;
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    for (;;)
                    {
                        uint _2687 = uint(findLSB(_2683)) + (_2538 << 5u);
                        uint _2684 = (_2683 + 4294967295u) & _2683;
                        uint _2689 = _2687 * 48u;
                        vec4 _2703 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2689)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 3u)).x));
                        uint _2709 = (_2687 * 48u) + 4u;
                        vec4 _2722 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2709)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 3u)).x));
                        uint _2728 = (_2687 * 48u) + 8u;
                        vec3 _2739 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x));
                        float _2743 = _2703.x - _2232;
                        float _2744 = _2703.y - _2233;
                        float _2745 = _2703.z - _2234;
                        float _2746 = dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745));
                        float _2749 = inversesqrt(_2746);
                        float _2750 = _2749 * _2743;
                        float _2751 = _2749 * _2744;
                        float _2752 = _2749 * _2745;
                        float _2753 = dot(vec3(_475, _478, _481), vec3(_2750, _2751, _2752));
                        float _2758 = 1.0 - (_2746 * _2703.w);
                        float _4074 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2759 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2760 = sqrt(_2746) * _2722.w;
                        float _2763 = 1.39999997615814208984375 / (_2760 + 1.39999997615814208984375);
                        float _2764 = _2763 * _2763;
                        float _2767 = ((1.0 - _2764) * _2753) + _2764;
                        float _2770 = _2760 * _2760;
                        float _2774 = ((isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0))) * _2759) / ((_2770 * 0.699999988079071044921875) + 1.0);
                        float _2778 = (-0.0) - _2232;
                        float _2779 = (-0.0) - _2233;
                        float _2780 = (-0.0) - _2234;
                        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
                        float _2785 = _2784 * _2778;
                        float _2786 = _2784 * _2779;
                        float _2787 = _2784 * _2780;
                        float _2795 = exp2(log2(1.0 / ((_2770 * 3.5) + 5.0)) * 0.25);
                        float _2796 = 1.0 - _535;
                        float _2803 = sqrt(1.0 - ((1.0 - (_2796 * _2796)) * (1.0 - (_2795 * _2795))));
                        float _2804 = _2803 * _2803;
                        float _2805 = _2804 * _2804;
                        float _2806 = _2785 + _2750;
                        float _2807 = _2786 + _2751;
                        float _2808 = _2787 + _2752;
                        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
                        float _2816 = dot(vec3(_475, _478, _481), vec3(_2785, _2786, _2787));
                        float _4090 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2819 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                        float _2820 = dot(vec3(_475, _478, _481), vec3(_2812 * _2806, _2812 * _2807, _2812 * _2808));
                        float _4101 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2823 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2827 = ((_2823 * _2823) * (_2805 + (-1.0))) + 1.0;
                        float _2828 = _2763 * _2804;
                        float _2829 = _2828 * _2828;
                        float _2832 = ((1.0 - _2829) * _2753) + _2829;
                        float _4112 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2833 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2834 = 1.0 - _2804;
                        float _2844 = (0.5 / (((_2833 * ((_2819 * _2834) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2833 * _2834) + _2804) * _2819))) * _2833;
                        float _4123 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2855 = (((_2805 * 3.1415927410125732421875) * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) / ((_2827 * _2827) * ((_2770 * 2.1991131305694580078125) + 3.141590118408203125))) * _2759;
                        _2607 = (_2774 * _2722.x) + _2680;
                        _2608 = (_2774 * _2722.y) + _2681;
                        _2609 = (_2774 * _2722.z) + _2682;
                        _2604 = (_2855 * _2739.x) + _2677;
                        _2605 = (_2855 * _2739.y) + _2678;
                        _2606 = (_2855 * _2739.z) + _2679;
                        if (_2684 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2677 = _2604;
                            _2678 = _2605;
                            _2679 = _2606;
                            _2680 = _2607;
                            _2681 = _2608;
                            _2682 = _2609;
                            _2683 = _2684;
                        }
                    }
                    frontier_phi_66_pred = _2604;
                    frontier_phi_66_pred_1 = _2609;
                    frontier_phi_66_pred_2 = _2608;
                    frontier_phi_66_pred_3 = _2607;
                    frontier_phi_66_pred_4 = _2606;
                    frontier_phi_66_pred_5 = _2605;
                }
                _2380 = frontier_phi_66_pred;
                _2390 = frontier_phi_66_pred_1;
                _2388 = frontier_phi_66_pred_2;
                _2386 = frontier_phi_66_pred_3;
                _2384 = frontier_phi_66_pred_4;
                _2382 = frontier_phi_66_pred_5;
                uint _2539 = _2538 + 1u;
                if (_2539 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2532 = _2380;
                    _2533 = _2382;
                    _2534 = _2384;
                    _2535 = _2386;
                    _2536 = _2388;
                    _2537 = _2390;
                    _2538 = _2539;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
        }
        uvec4 _2393 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2394 = _2393.z;
        uint _2396 = (_2394 >> 8u) & 15u;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        if (((4294967295u << _2396) & _2278) == 0u)
        {
            _2500 = _2379;
            _2502 = _2381;
            _2504 = _2383;
            _2506 = _2385;
            _2508 = _2387;
            _2510 = _2389;
        }
        else
        {
            float _2525 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
            float _2526 = _2525 * _2232;
            float _2527 = _2525 * _2233;
            float _2528 = _2525 * _2234;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2396 < ((_2394 >> 12u) & 15u))
            {
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2660 = _2379;
                float _2661 = _2381;
                float _2662 = _2383;
                float _2663 = _2385;
                float _2664 = _2387;
                float _2665 = _2389;
                uint _2666 = _2396;
                uint _2675;
                bool _2676;
                for (;;)
                {
                    _2675 = texelFetch(g_lightClassification, int((((_2272 << 5u) + (_2258 << 9u)) + (_2666 << 2u)) >> 2u)).x;
                    _2676 = _2675 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2676)
                    {
                        frontier_phi_77_pred = _2665;
                        frontier_phi_77_pred_1 = _2664;
                        frontier_phi_77_pred_2 = _2663;
                        frontier_phi_77_pred_3 = _2662;
                        frontier_phi_77_pred_4 = _2661;
                        frontier_phi_77_pred_5 = _2660;
                    }
                    else
                    {
                        float _2869;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _2882 = _2660;
                        float _2883 = _2661;
                        float _2884 = _2662;
                        float _2885 = _2663;
                        float _2886 = _2664;
                        float _2887 = _2665;
                        uint _2888 = _2675;
                        uint _2889;
                        vec4 _2914;
                        float _2915;
                        vec4 _2930;
                        vec3 _2942;
                        vec4 _2958;
                        vec4 _2974;
                        float _3021;
                        bool _3022;
                        for (;;)
                        {
                            uint _2899 = ((_2666 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2888));
                            _2889 = (_2888 + 4294967295u) & _2888;
                            uint _2901 = _2899 * 40u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            _2915 = _2914.w;
                            uint _2917 = (_2899 * 40u) + 4u;
                            _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2932 = (_2899 * 40u) + 8u;
                            _2942 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x));
                            uint _2945 = (_2899 * 40u) + 16u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2961 = (_2899 * 40u) + 20u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2977 = (_2899 * 40u) + 24u;
                            vec4 _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2996 = (_2899 * 40u) + 28u;
                            vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            _3021 = fma(_2234, _3009.z, fma(_2233, _3009.y, _3009.x * _2232)) + _3009.w;
                            _3022 = !((fma(_2234, _2990.z, fma(_2233, _2990.y, _2990.x * _2232)) + _2990.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3022)
                            {
                                float _3049 = _2914.x - _2232;
                                float _3050 = _2914.y - _2233;
                                float _3051 = _2914.z - _2234;
                                float _3052 = dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051));
                                float _3055 = inversesqrt(_3052);
                                float _3056 = _3055 * _3049;
                                float _3057 = _3055 * _3050;
                                float _3058 = _3055 * _3051;
                                float _3062 = 1.0 - (_3052 / (_2915 * _2915));
                                float _4134 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                                float _3063 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3067 = sqrt(_3052) * _2930.w;
                                float _3069 = 1.39999997615814208984375 / (_3067 + 1.39999997615814208984375);
                                float _3070 = _3069 * _3069;
                                float _3073 = ((1.0 - _3070) * dot(vec3(_3056, _3057, _3058), vec3(_475, _478, _481))) + _3070;
                                float _3076 = _3067 * _3067;
                                float _3080 = (fma(_2234, _2958.z, fma(_2233, _2958.y, _2958.x * _2232)) + _2958.w) / _3021;
                                float _3081 = (fma(_2234, _2974.z, fma(_2233, _2974.y, _2974.x * _2232)) + _2974.w) / _3021;
                                float _3085 = 1.0 - dot(vec2(_3080, _3081), vec2(_3080, _3081));
                                float _4150 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3086 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                                float _3087 = _3086 * (((isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))) * _3063) / ((_3076 * 0.699999988079071044921875) + 1.0));
                                float _3099 = exp2(log2(1.0 / ((_3076 * 3.5) + 5.0)) * 0.25);
                                float _3100 = 1.0 - _535;
                                float _3107 = sqrt(1.0 - ((1.0 - (_3100 * _3100)) * (1.0 - (_3099 * _3099))));
                                float _3108 = _3107 * _3107;
                                float _3109 = _3108 * _3108;
                                float _3110 = _3056 - _2526;
                                float _3111 = _3057 - _2527;
                                float _3112 = _3058 - _2528;
                                float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                                float _3120 = dot(vec3(_475, _478, _481), vec3((-0.0) - _2526, (-0.0) - _2527, (-0.0) - _2528));
                                float _4161 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3123 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                                float _3124 = dot(vec3(_475, _478, _481), vec3(_3116 * _3110, _3116 * _3111, _3116 * _3112));
                                float _4172 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3127 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3131 = ((_3127 * _3127) * (_3109 + (-1.0))) + 1.0;
                                float _3132 = _3069 * _3108;
                                float _3133 = _3132 * _3132;
                                float _3139 = ((1.0 - _3133) * dot(vec3(_475, _478, _481), vec3(_3056, _3057, _3058))) + _3133;
                                float _4183 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3140 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3141 = 1.0 - _3108;
                                float _3151 = (0.5 / (((_3140 * ((_3123 * _3141) + _3108)) + 9.9999999392252902907785028219223e-09) + (((_3140 * _3141) + _3108) * _3123))) * _3140;
                                float _4194 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3161 = (_3086 * _3063) * (((_3109 * 3.1415927410125732421875) * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) / ((_3131 * _3131) * ((_3076 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3087 * _2930.y;
                                frontier_phi_83_pred_1 = _3087 * _2930.x;
                                frontier_phi_83_pred_2 = _3161 * _2942.z;
                                frontier_phi_83_pred_3 = _3161 * _2942.y;
                                frontier_phi_83_pred_4 = _3161 * _2942.x;
                                frontier_phi_83_pred_5 = _3087 * _2930.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3169 = frontier_phi_83_pred;
                            _3168 = frontier_phi_83_pred_1;
                            _3167 = frontier_phi_83_pred_2;
                            _3166 = frontier_phi_83_pred_3;
                            _3165 = frontier_phi_83_pred_4;
                            _3170 = frontier_phi_83_pred_5;
                            _2872 = _3168 + _2885;
                            _2873 = _3169 + _2886;
                            _2874 = _3170 + _2887;
                            _2869 = _3165 + _2882;
                            _2870 = _3166 + _2883;
                            _2871 = _3167 + _2884;
                            if (_2889 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2889;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2874;
                        frontier_phi_77_pred_1 = _2873;
                        frontier_phi_77_pred_2 = _2872;
                        frontier_phi_77_pred_3 = _2871;
                        frontier_phi_77_pred_4 = _2870;
                        frontier_phi_77_pred_5 = _2869;
                    }
                    _2511 = frontier_phi_77_pred;
                    _2509 = frontier_phi_77_pred_1;
                    _2507 = frontier_phi_77_pred_2;
                    _2505 = frontier_phi_77_pred_3;
                    _2503 = frontier_phi_77_pred_4;
                    _2501 = frontier_phi_77_pred_5;
                    uint _2667 = _2666 + 1u;
                    if (_2667 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2660 = _2501;
                        _2661 = _2503;
                        _2662 = _2505;
                        _2663 = _2507;
                        _2664 = _2509;
                        _2665 = _2511;
                        _2666 = _2667;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2505;
                frontier_phi_58_59_ladder_1 = _2511;
                frontier_phi_58_59_ladder_2 = _2509;
                frontier_phi_58_59_ladder_3 = _2507;
                frontier_phi_58_59_ladder_4 = _2503;
                frontier_phi_58_59_ladder_5 = _2501;
            }
            else
            {
                frontier_phi_58_59_ladder = _2383;
                frontier_phi_58_59_ladder_1 = _2389;
                frontier_phi_58_59_ladder_2 = _2387;
                frontier_phi_58_59_ladder_3 = _2385;
                frontier_phi_58_59_ladder_4 = _2381;
                frontier_phi_58_59_ladder_5 = _2379;
            }
            _2500 = frontier_phi_58_59_ladder_5;
            _2502 = frontier_phi_58_59_ladder_4;
            _2504 = frontier_phi_58_59_ladder;
            _2506 = frontier_phi_58_59_ladder_3;
            _2508 = frontier_phi_58_59_ladder_2;
            _2510 = frontier_phi_58_59_ladder_1;
        }
        float _2515 = isnan(1.0) ? _519 : (isnan(_519) ? 1.0 : min(_519, 1.0));
        _2291 = (_2515 * _2506) + _1743;
        _2293 = (_2515 * _2508) + _1745;
        _2295 = (_2515 * _2510) + _1747;
        _2297 = ((_2500 * 0.039999999105930328369140625) * _2515) + _2076;
        _2299 = ((_2502 * 0.039999999105930328369140625) * _2515) + _2078;
        _2301 = ((_2504 * 0.039999999105930328369140625) * _2515) + _2080;
    }
    else
    {
        _2291 = _1743;
        _2293 = _1745;
        _2295 = _1747;
        _2297 = _2076;
        _2299 = _2078;
        _2301 = _2080;
    }
    float _4210 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _4221 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _4232 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2318 = ((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2291 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _519))) + ((_2297 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1358)) * cbPerFrame._m0[3u].x);
    float _2319 = ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2293 + ((isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))) * _519))) + ((_2299 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _1358)) * cbPerFrame._m0[3u].x);
    float _2320 = ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2295 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _519))) + ((_2301 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _1358)) * cbPerFrame._m0[3u].x);
    uint _2321 = _494 + 6u;
    float _2329 = _455 / cbSceneParam._m0[86u].x;
    float _2330 = _456 / cbSceneParam._m0[86u].y;
    vec4 _2344 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2329, _2330, (log2((isnan(cbSceneParam._m0[77u].w) ? _376 : (isnan(_376) ? cbSceneParam._m0[77u].w : min(_376, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2346 = _2344.x;
    float _2347 = _2344.y;
    float _2348 = _2344.z;
    float _2349 = _2344.w;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    if (_376 > cbSceneParam._m0[78u].w)
    {
        float _2404 = isnan(_376) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _376 : min(cbSceneParam._m0[80u].w, _376));
        float _2405 = _2404 / _376;
        float _2416 = _2405 * _428;
        float _2417 = _429 * _2405;
        float _2418 = (-0.0) - _2417;
        float _2420 = _2405 * _430;
        float _2422 = (cbSceneParam._m0[77u].w * _2418) / _2404;
        float _2423 = _2422 + cbSceneParam._m0[79u].w;
        float _2424 = cbSceneParam._m0[79u].w - _2417;
        float _2430 = sqrt(((_2416 * _2416) + (_2417 * _2417)) + (_2420 * _2420));
        float _2433 = (1.0 - (cbSceneParam._m0[77u].w / _2404)) * _2430;
        float _2438 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2440 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2617;
        if (abs((_2418 - _2422) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2617 = ((((_2423 > 0.0) ? exp2(_2438 * _2423) : (2.0 - exp2(_2440 * _2423))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2433;
        }
        else
        {
            float _2561 = 1.0 / cbSceneParam._m0[80u].x;
            float _2562 = isnan(_2424) ? _2423 : (isnan(_2423) ? _2424 : max(_2423, _2424));
            float _2563 = isnan(_2424) ? _2423 : (isnan(_2423) ? _2424 : min(_2423, _2424));
            float _2572 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : min(_2562, 0.0));
            float _2573 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : min(_2563, 0.0));
            _2617 = ((abs(_2430 / _2418) * cbSceneParam._m0[80u].y) * ((((_2572 - _2573) * 2.0) - ((exp2(_2438 * (isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0)))) - exp2(_2438 * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0))))) * _2561)) - ((exp2(_2440 * _2572) - exp2(_2440 * _2573)) * _2561))) + (_2433 * cbSceneParam._m0[80u].z);
        }
        vec4 _2619 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2329, _2330, 1.0), 0.0);
        float _2628 = exp2((_2617 * (-1.44269502162933349609375)) * (1.0 - _2619.w));
        float _2629 = log2(_2628);
        float _2645 = log2(_2349);
        _2442 = (exp2(_2645 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2629 * cbSceneParam._m0[78u].x)) * _2619.x) / cbSceneParam._m0[78u].x)) + _2346;
        _2444 = (exp2(_2645 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2629 * cbSceneParam._m0[78u].y)) * _2619.y) / cbSceneParam._m0[78u].y)) + _2347;
        _2446 = (exp2(_2645 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2629 * cbSceneParam._m0[78u].z)) * _2619.z) / cbSceneParam._m0[78u].z)) + _2348;
        _2448 = _2628 * _2349;
    }
    else
    {
        _2442 = _2346;
        _2444 = _2347;
        _2446 = _2348;
        _2448 = _2349;
    }
    bool _2655;
    vec4 _2458;
    vec4 _2480;
    float _2482;
    float _2486;
    float _2487;
    float _2488;
    float _2489;
    bool _2499;
    for (;;)
    {
        _2458 = cbMatDynParam._m0[0u];
        float _2460 = roundEven(_2458.y);
        bool _2461 = _2460 == 3.0;
        float _2462 = log2(_2448);
        float _2469 = exp2(_2462 * cbSceneParam._m0[78u].x) * _2318;
        float _2470 = exp2(_2462 * cbSceneParam._m0[78u].y) * _2319;
        float _2471 = exp2(_2462 * cbSceneParam._m0[78u].z) * _2320;
        float _2478 = _444 + (-0.5);
        _2480 = cbMtdParam._m0[1u];
        _2482 = _2480.y * _2478;
        float _2485 = (_2460 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2486 = _2485 * (_2461 ? _2469 : (_2469 + (cbSceneParam._m0[72u].w * _2442)));
        _2487 = _2485 * (_2461 ? _2470 : (_2470 + (cbSceneParam._m0[72u].w * _2444)));
        _2488 = _2485 * (_2461 ? _2471 : (_2471 + (cbSceneParam._m0[72u].w * _2446)));
        _2489 = _2478 * 0.999000012874603271484375;
        _2499 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2499)
        {
            if ((cbInstanceData._m0[_494 + 7u].x + _2489) < 0.5)
            {
                _2655 = true;
                break;
            }
        }
        uint _2596 = _495 + uint(_2458.w);
        if ((cbInstanceData._m0[_2596].w < 1.0) && ((cbInstanceData._m0[_2596].w + _2489) < 0.5))
        {
            _2655 = true;
            break;
        }
        if ((_2482 + 1.0) < _2480.x)
        {
            _2655 = true;
            break;
        }
        _2655 = false;
        break;
    }
    float _2860;
    if (_2655)
    {
        discard_state = true;
        _2860 = 0.0;
    }
    else
    {
        _2860 = cbInstanceData._m0[_2321].w;
    }
    SV_Target.x = _2486;
    SV_Target.y = _2487;
    SV_Target.z = _2488;
    SV_Target.w = _2860;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2321].w;
    discard_exit();
}


