#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1078;
float _3466;
float _3467;
float _3468;
float _3469;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _253 = _247.x * cbMtdParam._m0[10u].x;
    float _254 = _247.y * cbMtdParam._m0[10u].y;
    float _255 = _247.z * cbMtdParam._m0[10u].z;
    float _260 = 1.0 - cbMtdParam._m0[13u].z;
    float _3478 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _262 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    vec4 _280 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _288 = ((_253 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _280.x;
    float _291 = ((_254 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _280.y;
    float _294 = ((_255 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _280.z;
    float _301 = ((_253 - _288) * _262) + _288;
    float _302 = ((_254 - _291) * _262) + _291;
    float _303 = ((_255 - _294) * _262) + _294;
    vec4 _321 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _351 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3489 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _359 = (_352 * ((_321.x * cbMtdParam._m0[11u].x) - _301)) + _301;
    float _360 = (_352 * ((_321.y * cbMtdParam._m0[11u].y) - _302)) + _302;
    float _361 = (_352 * ((_321.z * cbMtdParam._m0[11u].z) - _303)) + _303;
    vec4 _374 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _381 = 1.0 - cbMtdParam._m0[14u].z;
    float _3500 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _384 = (_374.x * TEXCOORD_5.x) * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)));
    vec4 _398 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _402 = _398.z;
    vec4 _415 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _426 = cbMtdParam._m0[13u].w * _402;
    float _429 = (((((_402 * 2.0) * _415.z) * cbMtdParam._m0[14u].x) - _426) * cbMtdParam._m0[13u].y) + _426;
    vec4 _442 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _457 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_442.z * cbMtdParam._m0[14u].y) - _429)) + _429;
    float _464 = (_398.x * 2.0) + (-1.0);
    float _465 = (_398.y * 2.0) + (-1.0);
    float _466 = dot(vec2(_464, _465), vec2(_464, _465));
    float _3511 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _471 = sqrt(1.0 - (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))));
    float _482 = ((cbMtdParam._m0[13u].x * ((_415.x * 2.0) + (-1.0))) + _464) + ((((_442.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _483 = ((cbMtdParam._m0[13u].x * ((_415.y * 2.0) + (-1.0))) + _465) + ((((_442.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _486 = fma(_471, _212 * NORMAL.x, fma(_483, _219 * TANGENT.x, (_205 * _197) * _482));
    float _489 = fma(_471, _212 * NORMAL.y, fma(_483, _219 * TANGENT.y, (_205 * _198) * _482));
    float _492 = fma(_471, _212 * NORMAL.z, fma(_483, _219 * TANGENT.z, (_205 * _199) * _482));
    float _496 = inversesqrt(dot(vec3(_486, _489, _492), vec3(_486, _489, _492)));
    float _497 = _496 * _486;
    float _498 = _496 * _489;
    float _499 = _496 * _492;
    float _3522 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _500 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _3544 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _3555 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3566 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _504 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _520 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _570 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _560);
    float _571 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _560);
    float _572 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _560);
    float _576 = inversesqrt(dot(vec3(_570, _571, _572), vec3(_570, _571, _572)));
    float _577 = _570 * _576;
    float _578 = _571 * _576;
    float _579 = _572 * _576;
    vec4 _584 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _586 = _584.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _758 = sqrt(((_570 * _570) + (_571 * _571)) + (_572 * _572));
        float _764 = (cbMatDynParam._m0[5u].x * _758) + cbMatDynParam._m0[5u].y;
        float _3577 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _769 = (cbMatDynParam._m0[5u].z * _758) + cbMatDynParam._m0[5u].w;
        float _3588 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) - _765)) + _765) < ((_586 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _597 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _598 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _616 = fma(_499, cbSceneParam._m0[5u].z, fma(_498, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _497));
    float _619 = fma(_499, cbSceneParam._m0[6u].z, fma(_498, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _497));
    float _622 = fma(_499, cbSceneParam._m0[7u].z, fma(_498, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _497));
    uint _635 = uint(roundEven(NORMAL.w)) * 13u;
    uint _636 = _635 + 9u;
    uint _637 = _636 + uint(cbMatDynParam._m0[0u].w);
    float _643 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * cbInstanceData._m0[_637].x;
    float _644 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0)))) * cbInstanceData._m0[_637].y;
    float _645 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_637].z;
    float _3599 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _649 = 1.0 - _504;
    float _650 = _646 * _649;
    float _651 = _647 * _649;
    float _652 = _648 * _649;
    float _657 = (_646 + (-0.039999999105930328369140625)) * _504;
    float _658 = (_647 + (-0.039999999105930328369140625)) * _504;
    float _659 = (_648 + (-0.039999999105930328369140625)) * _504;
    float _660 = _657 + 0.039999999105930328369140625;
    float _662 = _658 + 0.039999999105930328369140625;
    float _663 = _659 + 0.039999999105930328369140625;
    vec4 _672 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _597, cbSceneParam._m0[86u].y * _598));
    float _675 = _672.x * TEXCOORD_5.w;
    float _676 = dot(vec3(_497, _498, _499), vec3(_577, _578, _579));
    float _679 = _676 * 2.0;
    float _683 = (_679 * _497) - _577;
    float _684 = (_679 * _498) - _578;
    float _685 = (_679 * _499) - _579;
    float _689 = abs(dot(vec3(_577, _578, _579), vec3(_497, _498, _499)));
    float _3632 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _691 = sqrt(_500);
    float _704 = exp2((_691 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_691 * 3.0));
    float _710 = (1.0 - _704) * ((_691 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _711 = _704 * _691;
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1077;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _802 = fma(_747, cbModelParam._m0[26u].z, fma(_743, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _739));
        float _806 = fma(_747, cbModelParam._m0[27u].z, fma(_743, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _739));
        float _810 = fma(_747, cbModelParam._m0[28u].z, fma(_743, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _739));
        float _835 = _739 + _497;
        float _836 = _743 + _498;
        float _837 = _747 + _499;
        float _847 = fma(_837, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _835)) - _802;
        float _848 = fma(_837, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _835)) - _806;
        float _849 = fma(_837, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _835)) - _810;
        float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
        float _866 = ((_853 * _847) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_802 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_853 * _848) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_806 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_853 * _849) / cbModelParam._m0[34u].z) + ((((((_810 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        float _905 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_871.x + (-0.5));
        float _907 = _905 * (_871.y + (-0.5));
        float _908 = _905 * (_871.z + (-0.5));
        float _915 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_878.x + (-0.5));
        float _917 = _915 * (_878.y + (-0.5));
        float _918 = _915 * (_878.z + (-0.5));
        float _925 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_885.x + (-0.5));
        float _927 = _925 * (_885.y + (-0.5));
        float _928 = _925 * (_885.z + (-0.5));
        float _935 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_892.x + (-0.5));
        float _937 = _935 * (_892.y + (-0.5));
        float _938 = _935 * (_892.z + (-0.5));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = _906 * 0.5;
        float _943 = _916 * 0.5;
        float _944 = _926 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _959 = (dot(vec3(_497, _498, _499), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _969 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3680 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_971 + 1.0))) + _976) * _939;
        float _986 = _907 * 0.5;
        float _987 = _917 * 0.5;
        float _988 = _927 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_497, _498, _499), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3713 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1013 + 1.0))) + _1018) * _940;
        float _1028 = _908 * 0.5;
        float _1029 = _918 * 0.5;
        float _1030 = _928 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_497, _498, _499), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3746 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1055 + 1.0))) + _1060) * _941;
        _1077 = _908;
        _1079 = _907;
        _1080 = _906;
        _1081 = _918;
        _1082 = _917;
        _1083 = _916;
        _1084 = _928;
        _1085 = _927;
        _1086 = _926;
        _1087 = _941;
        _1088 = _940;
        _1089 = _939;
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
    }
    else
    {
        _1077 = _1078;
        _1079 = _1078;
        _1080 = _1078;
        _1081 = _1078;
        _1082 = _1078;
        _1083 = _1078;
        _1084 = _1078;
        _1085 = _1078;
        _1086 = _1078;
        _1087 = _1078;
        _1088 = _1078;
        _1089 = _1078;
        _1090 = 0.0;
        _1091 = 0.0;
        _1092 = 0.0;
    }
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1121 = fma(_747, cbModelParam._m0[30u].z, fma(_743, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _739));
        float _1125 = fma(_747, cbModelParam._m0[31u].z, fma(_743, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _739));
        float _1129 = fma(_747, cbModelParam._m0[32u].z, fma(_743, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _739));
        float _1152 = _739 + _497;
        float _1153 = _743 + _498;
        float _1154 = _747 + _499;
        float _1164 = fma(_1154, cbModelParam._m0[30u].z, fma(_1153, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152)) - _1121;
        float _1165 = fma(_1154, cbModelParam._m0[31u].z, fma(_1153, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152)) - _1125;
        float _1166 = fma(_1154, cbModelParam._m0[32u].z, fma(_1153, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152)) - _1129;
        float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
        float _1183 = ((_1170 * _1164) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1121 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1170 * _1165) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1125 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1170 * _1166) / cbModelParam._m0[35u].z) + ((((((_1129 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1220 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1187.x + (-0.5));
        float _1222 = _1220 * (_1187.y + (-0.5));
        float _1223 = _1220 * (_1187.z + (-0.5));
        float _1230 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1194.x + (-0.5));
        float _1232 = _1230 * (_1194.y + (-0.5));
        float _1233 = _1230 * (_1194.z + (-0.5));
        float _1240 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1201.x + (-0.5));
        float _1242 = _1240 * (_1201.y + (-0.5));
        float _1243 = _1240 * (_1201.z + (-0.5));
        float _1250 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1208.x + (-0.5));
        float _1252 = _1250 * (_1208.y + (-0.5));
        float _1253 = _1250 * (_1208.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_497, _498, _499), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3809 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1284 + 1.0))) + _1289) * _1254;
        float _1299 = _1222 * 0.5;
        float _1300 = _1232 * 0.5;
        float _1301 = _1242 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_497, _498, _499), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3842 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1326 + 1.0))) + _1331) * _1255;
        float _1341 = _1223 * 0.5;
        float _1342 = _1233 * 0.5;
        float _1343 = _1243 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_497, _498, _499), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3875 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1368 + 1.0))) + _1373) * _1256;
        _1390 = _1223;
        _1391 = _1222;
        _1392 = _1221;
        _1393 = _1233;
        _1394 = _1232;
        _1395 = _1231;
        _1396 = _1243;
        _1397 = _1242;
        _1398 = _1241;
        _1399 = _1256;
        _1400 = _1255;
        _1401 = _1254;
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1078;
        _1391 = _1078;
        _1392 = _1078;
        _1393 = _1078;
        _1394 = _1078;
        _1395 = _1078;
        _1396 = _1078;
        _1397 = _1078;
        _1398 = _1078;
        _1399 = _1078;
        _1400 = _1078;
        _1401 = _1078;
        _1402 = 0.0;
        _1403 = 0.0;
        _1404 = 0.0;
    }
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1090)) + _1090;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1091)) + _1091;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1092)) + _1092;
    float _1437 = fma(_1416, cbSceneParam._m0[89u].z, fma(_1415, cbSceneParam._m0[89u].y, _1414 * cbSceneParam._m0[89u].x));
    float _1440 = fma(_1416, cbSceneParam._m0[90u].z, fma(_1415, cbSceneParam._m0[90u].y, _1414 * cbSceneParam._m0[90u].x));
    float _1443 = fma(_1416, cbSceneParam._m0[91u].z, fma(_1415, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1414));
    float _1458 = _683 * 0.5;
    float _1459 = _684 * 0.5;
    float _1460 = _685 * 0.5;
    float _1461 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1464 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1467 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1501;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1474 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1077, _1081, _1084, _1087));
        float _1478 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1079, _1082, _1085, _1088));
        float _1482 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1489 = dot(vec4(cbModelParam._m0[39u]), vec4(_1458, _1459, _1460, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1489) ? 0.0 : (isnan(0.0) ? _1489 : max(0.0, _1489))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1512;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1503 = dot(vec4(cbModelParam._m0[40u]), vec4(_1458, _1459, _1460, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1516 = (_1512 * cbModelParam._m0[1u].x) + (_1501 * (1.0 - cbModelParam._m0[1u].x));
    float _1526 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _500);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1526 : min(cbModelParam._m0[25u].z, _1526));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1574 = fma(_747, cbModelParam._m0[13u].z, fma(_743, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _739)) + cbModelParam._m0[13u].w;
        float _1578 = fma(_747, cbModelParam._m0[14u].z, fma(_743, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _739)) + cbModelParam._m0[14u].w;
        float _1582 = fma(_747, cbModelParam._m0[15u].z, fma(_743, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _739)) + cbModelParam._m0[15u].w;
        float _1585 = fma(_685, cbModelParam._m0[13u].z, fma(_684, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _683));
        float _1588 = fma(_685, cbModelParam._m0[14u].z, fma(_684, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _683));
        float _1591 = fma(_685, cbModelParam._m0[15u].z, fma(_684, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _683));
        float _1619;
        if (_1585 > 0.0)
        {
            _1619 = abs((1.0 - _1574) / _1585);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1574 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1619 = frontier_phi_17_15_ladder;
        }
        float _1826;
        if (_1588 > 0.0)
        {
            _1826 = abs((1.0 - _1578) / _1588);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1578 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1826 = frontier_phi_26_22_ladder;
        }
        float _2080;
        if (_1591 > 0.0)
        {
            _2080 = abs((1.0 - _1582) / _1591);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1582 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2080 = frontier_phi_38_33_ladder;
        }
        float _2082 = isnan(_1826) ? _1619 : (isnan(_1619) ? _1826 : min(_1619, _1826));
        float _2083 = isnan(_2080) ? _2082 : (isnan(_2082) ? _2080 : min(_2082, _2080));
        float _2087 = (_2083 * _1585) + _1574;
        float _2088 = (_2083 * _1588) + _1578;
        float _2089 = (_2083 * _1591) + _1582;
        float _2090 = _2083 * 9.9999997473787516355514526367188e-05;
        float _2092 = (-1.0) - _2090;
        float _2094 = _2090 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2089 > _2094) || ((_2089 < _2092) || ((_2088 > _2094) || ((_2088 < _2092) || ((_2087 < _2092) || (_2087 > _2094))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2217 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2089, cbModelParam._m0[9u].z, fma(_2088, cbModelParam._m0[9u].y, _2087 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2089, cbModelParam._m0[10u].z, fma(_2088, cbModelParam._m0[10u].y, _2087 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2089, cbModelParam._m0[11u].z, fma(_2088, cbModelParam._m0[11u].y, _2087 * cbModelParam._m0[11u].x))), _1527);
            frontier_phi_16_38_ladder = _2217.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2217.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2217.x * cbModelParam._m0[1u].y;
        }
        _1607 = frontier_phi_16_38_ladder_2;
        _1609 = frontier_phi_16_38_ladder_1;
        _1611 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_683, _684, _685), _1527);
        _1607 = _1595.x * cbModelParam._m0[1u].y;
        _1609 = _1595.y * cbModelParam._m0[1u].y;
        _1611 = _1595.z * cbModelParam._m0[1u].y;
    }
    float _1615 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _500);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1615 : min(cbModelParam._m0[25u].w, _1615));
    float _1709;
    float _1711;
    float _1713;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1673 = fma(_747, cbModelParam._m0[21u].z, fma(_743, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _739)) + cbModelParam._m0[21u].w;
        float _1677 = fma(_747, cbModelParam._m0[22u].z, fma(_743, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _739)) + cbModelParam._m0[22u].w;
        float _1681 = fma(_747, cbModelParam._m0[23u].z, fma(_743, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _739)) + cbModelParam._m0[23u].w;
        float _1684 = fma(_685, cbModelParam._m0[21u].z, fma(_684, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _683));
        float _1687 = fma(_685, cbModelParam._m0[22u].z, fma(_684, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _683));
        float _1690 = fma(_685, cbModelParam._m0[23u].z, fma(_684, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _683));
        float _1831;
        if (_1684 > 0.0)
        {
            _1831 = abs((1.0 - _1673) / _1684);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1673 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1831 = frontier_phi_28_24_ladder;
        }
        float _2107;
        if (_1687 > 0.0)
        {
            _2107 = abs((1.0 - _1677) / _1687);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1677 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2107 = frontier_phi_40_35_ladder;
        }
        float _2320;
        if (_1690 > 0.0)
        {
            _2320 = abs((1.0 - _1681) / _1690);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1681 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2320 = frontier_phi_49_46_ladder;
        }
        float _2322 = isnan(_2107) ? _1831 : (isnan(_1831) ? _2107 : min(_1831, _2107));
        float _2323 = isnan(_2320) ? _2322 : (isnan(_2322) ? _2320 : min(_2322, _2320));
        float _2327 = (_2323 * _1684) + _1673;
        float _2328 = (_2323 * _1687) + _1677;
        float _2329 = (_2323 * _1690) + _1681;
        float _2330 = _2323 * 9.9999997473787516355514526367188e-05;
        float _2331 = (-1.0) - _2330;
        float _2333 = _2330 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2329 > _2333) || ((_2329 < _2331) || ((_2328 > _2333) || ((_2328 < _2331) || ((_2327 < _2331) || (_2327 > _2333))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2528 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2329, cbModelParam._m0[17u].z, fma(_2328, cbModelParam._m0[17u].y, _2327 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2329, cbModelParam._m0[18u].z, fma(_2328, cbModelParam._m0[18u].y, _2327 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2329, cbModelParam._m0[19u].z, fma(_2328, cbModelParam._m0[19u].y, _2327 * cbModelParam._m0[19u].x))), _1616);
            frontier_phi_25_49_ladder = _2528.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2528.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2528.x * cbModelParam._m0[1u].z;
        }
        _1709 = frontier_phi_25_49_ladder_2;
        _1711 = frontier_phi_25_49_ladder_1;
        _1713 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_683, _684, _685), _1616);
        _1709 = _1693.x * cbModelParam._m0[1u].z;
        _1711 = _1693.y * cbModelParam._m0[1u].z;
        _1713 = _1693.z * cbModelParam._m0[1u].z;
    }
    float _1726 = (((_710 * _660) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1709 - _1607)) + _1607);
    float _1728 = (((_710 * _662) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1711 - _1609)) + _1609);
    float _1730 = (((_710 * _663) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1713 - _1611)) + _1611);
    float _1733 = fma(_1730, cbSceneParam._m0[89u].z, fma(_1728, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1730, cbSceneParam._m0[90u].z, fma(_1728, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1730, cbSceneParam._m0[91u].z, fma(_1728, cbSceneParam._m0[91u].y, _1726 * cbSceneParam._m0[91u].x));
    uvec4 _1749 = floatBitsToUint(cbInstanceData._m0[_635 + 5u]);
    uint _1751 = _1749.x * 14u;
    uint _1752 = _1751 + 13u;
    float _1759 = _675 + (-1.0);
    float _1764 = (cbLight._m0[_1752].x * _1759) + 1.0;
    float _1765 = (cbLight._m0[_1752].y * _1759) + 1.0;
    float _1766 = (cbLight._m0[_1752].z * _1759) + 1.0;
    float _1767 = (cbLight._m0[_1752].w * _1759) + 1.0;
    uint _1768 = _1751 + 5u;
    float _1774 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
    uint _1778 = _1751 + 4u;
    float _1785 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
    uint _1789 = _1751 | 1u;
    float _1800 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_497, _498, _499));
    float _1803 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_497, _498, _499));
    float _4011 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _4022 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1808 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.3183098733425140380859375;
    float _1810 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.3183098733425140380859375;
    float _1817 = ((cbLight._m0[_1768].x * _1774) * _1810) + ((cbLight._m0[_1778].x * _1785) * _1808);
    float _1818 = ((_1774 * cbLight._m0[_1768].y) * _1810) + ((_1785 * cbLight._m0[_1778].y) * _1808);
    float _1819 = ((_1774 * cbLight._m0[_1768].z) * _1810) + ((_1785 * cbLight._m0[_1778].z) * _1808);
    uvec4 _1823 = floatBitsToUint(cbLight._m0[_1751 + 12u]);
    bool _1825 = _1823.x == 0u;
    float _1836;
    float _1838;
    float _1840;
    if (_1825)
    {
        _1836 = _1817;
        _1838 = _1818;
        _1840 = _1819;
    }
    else
    {
        uint _1844 = _1751 + 6u;
        float _1860 = (dot(vec3(cbLight._m0[_1751 + 2u].xyz), vec3(_497, _498, _499)) * 0.5) + 0.5;
        float _1861 = _1860 * _1860;
        float _4033 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1863 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _1836 = (((cbLight._m0[_1844].x * 0.3183098733425140380859375) * _1862) * _1863) + _1817;
        _1838 = (((cbLight._m0[_1844].y * 0.3183098733425140380859375) * _1862) * _1863) + _1818;
        _1840 = (((cbLight._m0[_1844].z * 0.3183098733425140380859375) * _1862) * _1863) + _1819;
    }
    bool _1843 = _1823.y == 0u;
    float _1881;
    float _1883;
    float _1885;
    if (_1843)
    {
        _1881 = _1836;
        _1883 = _1838;
        _1885 = _1840;
    }
    else
    {
        uint _2051 = _1751 + 7u;
        float _2067 = (dot(vec3(cbLight._m0[_1751 + 3u].xyz), vec3(_497, _498, _499)) * 0.5) + 0.5;
        float _2068 = _2067 * _2067;
        float _4049 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2069 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2070 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _1881 = (((cbLight._m0[_2051].x * 0.3183098733425140380859375) * _2069) * _2070) + _1836;
        _1883 = (((cbLight._m0[_2051].y * 0.3183098733425140380859375) * _2069) * _2070) + _1838;
        _1885 = (((cbLight._m0[_2051].z * 0.3183098733425140380859375) * _2069) * _2070) + _1840;
    }
    uint _1888 = _1751 + 8u;
    float _1901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1751].w)) * _500) * 0.949999988079071044921875);
    float _1902 = _1901 * _1901;
    float _1903 = cbLight._m0[_1751].x + _577;
    float _1904 = cbLight._m0[_1751].y + _578;
    float _1905 = cbLight._m0[_1751].z + _579;
    float _1909 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
    float _1910 = _1909 * _1903;
    float _1911 = _1909 * _1904;
    float _1912 = _1909 * _1905;
    float _1913 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_1751].xyz));
    float _4065 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _1917 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1918 = dot(vec3(_497, _498, _499), vec3(_1910, _1911, _1912));
    float _4087 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _1922 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_1910, _1911, _1912));
    float _4098 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1926 = _1902 * _1902;
    float _1930 = ((_1921 * _1921) * (_1926 + (-1.0))) + 1.0;
    float _1938 = exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0);
    float _1939 = 0.959999978542327880859375 - _657;
    float _1941 = 0.959999978542327880859375 - _658;
    float _1942 = 0.959999978542327880859375 - _659;
    float _1949 = 1.0 - _1902;
    float _1960 = (0.5 / (((_1917 * ((_1916 * _1949) + _1902)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _1949) + _1902) * _1916))) * _1916;
    float _4109 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1962 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1926 / ((_1930 * _1930) * 3.141590118408203125));
    uint _1973 = _1751 + 9u;
    float _1984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1789].w)) * _500) * 0.949999988079071044921875);
    float _1985 = _1984 * _1984;
    float _1986 = cbLight._m0[_1789].x + _577;
    float _1987 = cbLight._m0[_1789].y + _578;
    float _1988 = cbLight._m0[_1789].z + _579;
    float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
    float _1993 = _1992 * _1986;
    float _1994 = _1992 * _1987;
    float _1995 = _1992 * _1988;
    float _1996 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_1789].xyz));
    float _4120 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2000 = dot(vec3(_497, _498, _499), vec3(_1993, _1994, _1995));
    float _4131 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2004 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_1993, _1994, _1995));
    float _4142 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2008 = _1985 * _1985;
    float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
    float _2019 = exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0);
    float _2026 = 1.0 - _1985;
    float _2036 = (0.5 / (((_1917 * ((_1999 * _2026) + _1985)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2026) + _1985) * _1999))) * _1999;
    float _4153 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2038 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
    float _2048 = (((((_2019 * _1939) + _660) * cbLight._m0[_1973].x) * _2038) * _1774) + (((((_1938 * _1939) + _660) * cbLight._m0[_1888].x) * _1962) * _1785);
    float _2049 = (((((_2019 * _1941) + _662) * cbLight._m0[_1973].y) * _2038) * _1774) + (((((_1938 * _1941) + _662) * cbLight._m0[_1888].y) * _1962) * _1785);
    float _2050 = (((((_2019 * _1942) + _663) * cbLight._m0[_1973].z) * _2038) * _1774) + (((((_1938 * _1942) + _663) * cbLight._m0[_1888].z) * _1962) * _1785);
    float _2112;
    float _2114;
    float _2116;
    if (_1825)
    {
        _2112 = _2048;
        _2114 = _2049;
        _2116 = _2050;
    }
    else
    {
        uint _2118 = _1751 + 2u;
        uint _2122 = _1751 + 10u;
        float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _500) * 0.949999988079071044921875);
        float _2137 = _2136 * _2136;
        float _2138 = cbLight._m0[_2118].x + _577;
        float _2139 = cbLight._m0[_2118].y + _578;
        float _2140 = cbLight._m0[_2118].z + _579;
        float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
        float _2145 = _2144 * _2138;
        float _2146 = _2144 * _2139;
        float _2147 = _2144 * _2140;
        float _2148 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_2118].xyz));
        float _4164 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2151 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2152 = dot(vec3(_497, _498, _499), vec3(_2145, _2146, _2147));
        float _4175 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2155 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2156 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2145, _2146, _2147));
        float _4186 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2160 = _2137 * _2137;
        float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
        float _2171 = exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0);
        float _2178 = 1.0 - _2137;
        float _2188 = (0.5 / (((_1917 * ((_2151 * _2178) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2178) + _2137) * _2151))) * _2151;
        float _4197 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2190 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
        float _2191 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _2112 = (((((_2171 * _1939) + _660) * cbLight._m0[_2122].x) * _2190) * _2191) + _2048;
        _2114 = (((((_2171 * _1941) + _662) * cbLight._m0[_2122].y) * _2190) * _2191) + _2049;
        _2116 = (((((_2171 * _1942) + _663) * cbLight._m0[_2122].z) * _2190) * _2191) + _2050;
    }
    float _2226;
    float _2228;
    float _2230;
    if (_1843)
    {
        _2226 = _2112;
        _2228 = _2114;
        _2230 = _2116;
    }
    else
    {
        uint _2237 = _1751 + 3u;
        uint _2241 = _1751 + 11u;
        float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _500) * 0.949999988079071044921875);
        float _2256 = _2255 * _2255;
        float _2257 = cbLight._m0[_2237].x + _577;
        float _2258 = cbLight._m0[_2237].y + _578;
        float _2259 = cbLight._m0[_2237].z + _579;
        float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
        float _2264 = _2263 * _2257;
        float _2265 = _2263 * _2258;
        float _2266 = _2263 * _2259;
        float _2267 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_2237].xyz));
        float _4213 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2270 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2271 = dot(vec3(_497, _498, _499), vec3(_2264, _2265, _2266));
        float _4224 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2275 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2264, _2265, _2266));
        float _4235 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2279 = _2256 * _2256;
        float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
        float _2290 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
        float _2297 = 1.0 - _2256;
        float _2307 = (0.5 / (((_1917 * ((_2270 * _2297) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2297) + _2256) * _2270))) * _2270;
        float _4246 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2309 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
        float _2310 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _2226 = (((((_2290 * _1939) + _660) * cbLight._m0[_2241].x) * _2309) * _2310) + _2112;
        _2228 = (((((_2290 * _1941) + _662) * cbLight._m0[_2241].y) * _2309) * _2310) + _2114;
        _2230 = (((((_2290 * _1942) + _663) * cbLight._m0[_2241].z) * _2309) * _2310) + _2116;
    }
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    if (_1749.y == 0u)
    {
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2385;
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2385;
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2385;
        uvec4 _2400 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2401 = _2400.x;
        uint _2412 = uint((float(_2400.y) * floor(float(uint(cbSceneParam._m0[85u].y * _598) / _2401))) + floor(float(uint(cbSceneParam._m0[85u].x * _597) / _2401)));
        float _2422 = (log2(_2388 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2423 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        uint _2426 = uint(isnan(14.0) ? _2423 : (isnan(_2423) ? 14.0 : min(_2423, 14.0)));
        uvec4 _2431 = texelFetch(g_lightClusterGridBuffer, int(((_2426 << 2u) + (_2412 << 6u)) >> 2u));
        uint _2432 = _2431.x;
        uint _2433 = _2400.z;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        if (((((1u << ((_2433 >> 4u) & 15u)) + 4294967295u) & _2432) == 0u) || ((_2433 & 240u) == 0u))
        {
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
        }
        else
        {
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2686 = 0.0;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            uint _2692 = 0u;
            uint _2701;
            bool _2702;
            for (;;)
            {
                _2701 = texelFetch(g_lightClassification, int((((_2426 << 5u) + (_2412 << 9u)) + (_2692 << 2u)) >> 2u)).x;
                _2702 = _2701 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2702)
                {
                    frontier_phi_66_pred = _2686;
                    frontier_phi_66_pred_1 = _2691;
                    frontier_phi_66_pred_2 = _2690;
                    frontier_phi_66_pred_3 = _2689;
                    frontier_phi_66_pred_4 = _2688;
                    frontier_phi_66_pred_5 = _2687;
                }
                else
                {
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    uint _2837;
                    _2831 = _2686;
                    _2832 = _2687;
                    _2833 = _2688;
                    _2834 = _2689;
                    _2835 = _2690;
                    _2836 = _2691;
                    _2837 = _2701;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    for (;;)
                    {
                        uint _2841 = uint(findLSB(_2837)) + (_2692 << 5u);
                        uint _2838 = (_2837 + 4294967295u) & _2837;
                        uint _2843 = _2841 * 48u;
                        vec4 _2857 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 3u)).x));
                        uint _2863 = (_2841 * 48u) + 4u;
                        vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 3u)).x));
                        uint _2882 = (_2841 * 48u) + 8u;
                        vec3 _2893 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x));
                        float _2897 = _2857.x - _2386;
                        float _2898 = _2857.y - _2387;
                        float _2899 = _2857.z - _2388;
                        float _2900 = dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899));
                        float _2903 = inversesqrt(_2900);
                        float _2904 = _2903 * _2897;
                        float _2905 = _2903 * _2898;
                        float _2906 = _2903 * _2899;
                        float _2907 = dot(vec3(_616, _619, _622), vec3(_2904, _2905, _2906));
                        float _2912 = 1.0 - (_2900 * _2857.w);
                        float _4272 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2913 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                        float _2914 = sqrt(_2900) * _2876.w;
                        float _2917 = 1.39999997615814208984375 / (_2914 + 1.39999997615814208984375);
                        float _2918 = _2917 * _2917;
                        float _2921 = ((1.0 - _2918) * _2907) + _2918;
                        float _2924 = _2914 * _2914;
                        float _2928 = ((isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0))) * _2913) / ((_2924 * 0.699999988079071044921875) + 1.0);
                        float _2932 = (-0.0) - _2386;
                        float _2933 = (-0.0) - _2387;
                        float _2934 = (-0.0) - _2388;
                        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
                        float _2939 = _2938 * _2932;
                        float _2940 = _2938 * _2933;
                        float _2941 = _2938 * _2934;
                        float _2949 = exp2(log2(1.0 / ((_2924 * 3.5) + 5.0)) * 0.25);
                        float _2950 = 1.0 - _691;
                        float _2957 = sqrt(1.0 - ((1.0 - (_2950 * _2950)) * (1.0 - (_2949 * _2949))));
                        float _2958 = _2957 * _2957;
                        float _2959 = _2958 * _2958;
                        float _2960 = _2939 + _2904;
                        float _2961 = _2940 + _2905;
                        float _2962 = _2941 + _2906;
                        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
                        float _2970 = dot(vec3(_616, _619, _622), vec3(_2939, _2940, _2941));
                        float _4288 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2973 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                        float _2974 = dot(vec3(_616, _619, _622), vec3(_2966 * _2960, _2966 * _2961, _2966 * _2962));
                        float _4299 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2977 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _2981 = ((_2977 * _2977) * (_2959 + (-1.0))) + 1.0;
                        float _2982 = _2917 * _2958;
                        float _2983 = _2982 * _2982;
                        float _2986 = ((1.0 - _2983) * _2907) + _2983;
                        float _4310 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2987 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _2988 = 1.0 - _2958;
                        float _2998 = (0.5 / (((_2987 * ((_2973 * _2988) + _2958)) + 9.9999999392252902907785028219223e-09) + (((_2987 * _2988) + _2958) * _2973))) * _2987;
                        float _4321 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3009 = (((_2959 * 3.1415927410125732421875) * (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) / ((_2981 * _2981) * ((_2924 * 2.1991131305694580078125) + 3.141590118408203125))) * _2913;
                        _2761 = (_2928 * _2876.x) + _2834;
                        _2762 = (_2928 * _2876.y) + _2835;
                        _2763 = (_2928 * _2876.z) + _2836;
                        _2758 = (_3009 * _2893.x) + _2831;
                        _2759 = (_3009 * _2893.y) + _2832;
                        _2760 = (_3009 * _2893.z) + _2833;
                        if (_2838 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2831 = _2758;
                            _2832 = _2759;
                            _2833 = _2760;
                            _2834 = _2761;
                            _2835 = _2762;
                            _2836 = _2763;
                            _2837 = _2838;
                        }
                    }
                    frontier_phi_66_pred = _2758;
                    frontier_phi_66_pred_1 = _2763;
                    frontier_phi_66_pred_2 = _2762;
                    frontier_phi_66_pred_3 = _2761;
                    frontier_phi_66_pred_4 = _2760;
                    frontier_phi_66_pred_5 = _2759;
                }
                _2534 = frontier_phi_66_pred;
                _2544 = frontier_phi_66_pred_1;
                _2542 = frontier_phi_66_pred_2;
                _2540 = frontier_phi_66_pred_3;
                _2538 = frontier_phi_66_pred_4;
                _2536 = frontier_phi_66_pred_5;
                uint _2693 = _2692 + 1u;
                if (_2693 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2686 = _2534;
                    _2687 = _2536;
                    _2688 = _2538;
                    _2689 = _2540;
                    _2690 = _2542;
                    _2691 = _2544;
                    _2692 = _2693;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
        }
        uvec4 _2547 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2548 = _2547.z;
        uint _2550 = (_2548 >> 8u) & 15u;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        if (((4294967295u << _2550) & _2432) == 0u)
        {
            _2654 = _2533;
            _2656 = _2535;
            _2658 = _2537;
            _2660 = _2539;
            _2662 = _2541;
            _2664 = _2543;
        }
        else
        {
            float _2679 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
            float _2680 = _2679 * _2386;
            float _2681 = _2679 * _2387;
            float _2682 = _2679 * _2388;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2550 < ((_2548 >> 12u) & 15u))
            {
                float _2655;
                float _2657;
                float _2659;
                float _2661;
                float _2663;
                float _2665;
                float _2814 = _2533;
                float _2815 = _2535;
                float _2816 = _2537;
                float _2817 = _2539;
                float _2818 = _2541;
                float _2819 = _2543;
                uint _2820 = _2550;
                uint _2829;
                bool _2830;
                for (;;)
                {
                    _2829 = texelFetch(g_lightClassification, int((((_2426 << 5u) + (_2412 << 9u)) + (_2820 << 2u)) >> 2u)).x;
                    _2830 = _2829 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2830)
                    {
                        frontier_phi_77_pred = _2819;
                        frontier_phi_77_pred_1 = _2818;
                        frontier_phi_77_pred_2 = _2817;
                        frontier_phi_77_pred_3 = _2816;
                        frontier_phi_77_pred_4 = _2815;
                        frontier_phi_77_pred_5 = _2814;
                    }
                    else
                    {
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3036 = _2814;
                        float _3037 = _2815;
                        float _3038 = _2816;
                        float _3039 = _2817;
                        float _3040 = _2818;
                        float _3041 = _2819;
                        uint _3042 = _2829;
                        uint _3043;
                        vec4 _3068;
                        float _3069;
                        vec4 _3084;
                        vec3 _3096;
                        vec4 _3112;
                        vec4 _3128;
                        float _3175;
                        bool _3176;
                        for (;;)
                        {
                            uint _3053 = ((_2820 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3042));
                            _3043 = (_3042 + 4294967295u) & _3042;
                            uint _3055 = _3053 * 40u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            _3069 = _3068.w;
                            uint _3071 = (_3053 * 40u) + 4u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3086 = (_3053 * 40u) + 8u;
                            _3096 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x));
                            uint _3099 = (_3053 * 40u) + 16u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3115 = (_3053 * 40u) + 20u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3131 = (_3053 * 40u) + 24u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3150 = (_3053 * 40u) + 28u;
                            vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            _3175 = fma(_2388, _3163.z, fma(_2387, _3163.y, _3163.x * _2386)) + _3163.w;
                            _3176 = !((fma(_2388, _3144.z, fma(_2387, _3144.y, _3144.x * _2386)) + _3144.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3176)
                            {
                                float _3203 = _3068.x - _2386;
                                float _3204 = _3068.y - _2387;
                                float _3205 = _3068.z - _2388;
                                float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                                float _3209 = inversesqrt(_3206);
                                float _3210 = _3209 * _3203;
                                float _3211 = _3209 * _3204;
                                float _3212 = _3209 * _3205;
                                float _3216 = 1.0 - (_3206 / (_3069 * _3069));
                                float _4332 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3221 = sqrt(_3206) * _3084.w;
                                float _3223 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                                float _3224 = _3223 * _3223;
                                float _3227 = ((1.0 - _3224) * dot(vec3(_3210, _3211, _3212), vec3(_616, _619, _622))) + _3224;
                                float _3230 = _3221 * _3221;
                                float _3234 = (fma(_2388, _3112.z, fma(_2387, _3112.y, _3112.x * _2386)) + _3112.w) / _3175;
                                float _3235 = (fma(_2388, _3128.z, fma(_2387, _3128.y, _3128.x * _2386)) + _3128.w) / _3175;
                                float _3239 = 1.0 - dot(vec2(_3234, _3235), vec2(_3234, _3235));
                                float _4348 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                                float _3241 = _3240 * (((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3217) / ((_3230 * 0.699999988079071044921875) + 1.0));
                                float _3253 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                                float _3254 = 1.0 - _691;
                                float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                                float _3262 = _3261 * _3261;
                                float _3263 = _3262 * _3262;
                                float _3264 = _3210 - _2680;
                                float _3265 = _3211 - _2681;
                                float _3266 = _3212 - _2682;
                                float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                                float _3274 = dot(vec3(_616, _619, _622), vec3((-0.0) - _2680, (-0.0) - _2681, (-0.0) - _2682));
                                float _4359 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3277 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3278 = dot(vec3(_616, _619, _622), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                                float _4370 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3281 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                                float _3286 = _3223 * _3262;
                                float _3287 = _3286 * _3286;
                                float _3293 = ((1.0 - _3287) * dot(vec3(_616, _619, _622), vec3(_3210, _3211, _3212))) + _3287;
                                float _4381 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3295 = 1.0 - _3262;
                                float _3305 = (0.5 / (((_3294 * ((_3277 * _3295) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3294 * _3295) + _3262) * _3277))) * _3294;
                                float _4392 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3315 = (_3240 * _3217) * (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) / ((_3285 * _3285) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3241 * _3084.y;
                                frontier_phi_83_pred_1 = _3241 * _3084.x;
                                frontier_phi_83_pred_2 = _3315 * _3096.z;
                                frontier_phi_83_pred_3 = _3315 * _3096.y;
                                frontier_phi_83_pred_4 = _3315 * _3096.x;
                                frontier_phi_83_pred_5 = _3241 * _3084.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3323 = frontier_phi_83_pred;
                            _3322 = frontier_phi_83_pred_1;
                            _3321 = frontier_phi_83_pred_2;
                            _3320 = frontier_phi_83_pred_3;
                            _3319 = frontier_phi_83_pred_4;
                            _3324 = frontier_phi_83_pred_5;
                            _3026 = _3322 + _3039;
                            _3027 = _3323 + _3040;
                            _3028 = _3324 + _3041;
                            _3023 = _3319 + _3036;
                            _3024 = _3320 + _3037;
                            _3025 = _3321 + _3038;
                            if (_3043 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3043;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3028;
                        frontier_phi_77_pred_1 = _3027;
                        frontier_phi_77_pred_2 = _3026;
                        frontier_phi_77_pred_3 = _3025;
                        frontier_phi_77_pred_4 = _3024;
                        frontier_phi_77_pred_5 = _3023;
                    }
                    _2665 = frontier_phi_77_pred;
                    _2663 = frontier_phi_77_pred_1;
                    _2661 = frontier_phi_77_pred_2;
                    _2659 = frontier_phi_77_pred_3;
                    _2657 = frontier_phi_77_pred_4;
                    _2655 = frontier_phi_77_pred_5;
                    uint _2821 = _2820 + 1u;
                    if (_2821 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2814 = _2655;
                        _2815 = _2657;
                        _2816 = _2659;
                        _2817 = _2661;
                        _2818 = _2663;
                        _2819 = _2665;
                        _2820 = _2821;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2659;
                frontier_phi_58_59_ladder_1 = _2665;
                frontier_phi_58_59_ladder_2 = _2663;
                frontier_phi_58_59_ladder_3 = _2661;
                frontier_phi_58_59_ladder_4 = _2657;
                frontier_phi_58_59_ladder_5 = _2655;
            }
            else
            {
                frontier_phi_58_59_ladder = _2537;
                frontier_phi_58_59_ladder_1 = _2543;
                frontier_phi_58_59_ladder_2 = _2541;
                frontier_phi_58_59_ladder_3 = _2539;
                frontier_phi_58_59_ladder_4 = _2535;
                frontier_phi_58_59_ladder_5 = _2533;
            }
            _2654 = frontier_phi_58_59_ladder_5;
            _2656 = frontier_phi_58_59_ladder_4;
            _2658 = frontier_phi_58_59_ladder;
            _2660 = frontier_phi_58_59_ladder_3;
            _2662 = frontier_phi_58_59_ladder_2;
            _2664 = frontier_phi_58_59_ladder_1;
        }
        float _2669 = isnan(1.0) ? _675 : (isnan(_675) ? 1.0 : min(_675, 1.0));
        _2445 = (_2669 * _2660) + _1881;
        _2447 = (_2669 * _2662) + _1883;
        _2449 = (_2669 * _2664) + _1885;
        _2451 = ((_2654 * _660) * _2669) + _2226;
        _2453 = ((_2656 * _662) * _2669) + _2228;
        _2455 = ((_2658 * _663) * _2669) + _2230;
    }
    else
    {
        _2445 = _1881;
        _2447 = _1883;
        _2449 = _1885;
        _2451 = _2226;
        _2453 = _2228;
        _2455 = _2230;
    }
    float _4408 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4419 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4430 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _2472 = ((isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2445 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _675))) + ((_2451 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1516)) * cbPerFrame._m0[3u].x);
    float _2473 = ((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2447 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _675))) + ((_2453 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1516)) * cbPerFrame._m0[3u].x);
    float _2474 = ((isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2449 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _675))) + ((_2455 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1516)) * cbPerFrame._m0[3u].x);
    uint _2475 = _635 + 6u;
    float _2483 = _597 / cbSceneParam._m0[86u].x;
    float _2484 = _598 / cbSceneParam._m0[86u].y;
    vec4 _2498 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2483, _2484, (log2((isnan(cbSceneParam._m0[77u].w) ? _520 : (isnan(_520) ? cbSceneParam._m0[77u].w : min(_520, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2500 = _2498.x;
    float _2501 = _2498.y;
    float _2502 = _2498.z;
    float _2503 = _2498.w;
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    if (_520 > cbSceneParam._m0[78u].w)
    {
        float _2558 = isnan(_520) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _520 : min(cbSceneParam._m0[80u].w, _520));
        float _2559 = _2558 / _520;
        float _2570 = _2559 * _570;
        float _2571 = _571 * _2559;
        float _2572 = (-0.0) - _2571;
        float _2574 = _2559 * _572;
        float _2576 = (cbSceneParam._m0[77u].w * _2572) / _2558;
        float _2577 = _2576 + cbSceneParam._m0[79u].w;
        float _2578 = cbSceneParam._m0[79u].w - _2571;
        float _2584 = sqrt(((_2570 * _2570) + (_2571 * _2571)) + (_2574 * _2574));
        float _2587 = (1.0 - (cbSceneParam._m0[77u].w / _2558)) * _2584;
        float _2592 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2594 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2771;
        if (abs((_2572 - _2576) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2771 = ((((_2577 > 0.0) ? exp2(_2592 * _2577) : (2.0 - exp2(_2594 * _2577))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2587;
        }
        else
        {
            float _2715 = 1.0 / cbSceneParam._m0[80u].x;
            float _2716 = isnan(_2578) ? _2577 : (isnan(_2577) ? _2578 : max(_2577, _2578));
            float _2717 = isnan(_2578) ? _2577 : (isnan(_2577) ? _2578 : min(_2577, _2578));
            float _2726 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : min(_2716, 0.0));
            float _2727 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : min(_2717, 0.0));
            _2771 = ((abs(_2584 / _2572) * cbSceneParam._m0[80u].y) * ((((_2726 - _2727) * 2.0) - ((exp2(_2592 * (isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0)))) - exp2(_2592 * (isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0))))) * _2715)) - ((exp2(_2594 * _2726) - exp2(_2594 * _2727)) * _2715))) + (_2587 * cbSceneParam._m0[80u].z);
        }
        vec4 _2773 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2483, _2484, 1.0), 0.0);
        float _2782 = exp2((_2771 * (-1.44269502162933349609375)) * (1.0 - _2773.w));
        float _2783 = log2(_2782);
        float _2799 = log2(_2503);
        _2596 = (exp2(_2799 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].x)) * _2773.x) / cbSceneParam._m0[78u].x)) + _2500;
        _2598 = (exp2(_2799 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].y)) * _2773.y) / cbSceneParam._m0[78u].y)) + _2501;
        _2600 = (exp2(_2799 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].z)) * _2773.z) / cbSceneParam._m0[78u].z)) + _2502;
        _2602 = _2782 * _2503;
    }
    else
    {
        _2596 = _2500;
        _2598 = _2501;
        _2600 = _2502;
        _2602 = _2503;
    }
    bool _2809;
    vec4 _2612;
    vec4 _2634;
    float _2636;
    float _2640;
    float _2641;
    float _2642;
    float _2643;
    bool _2653;
    for (;;)
    {
        _2612 = cbMatDynParam._m0[0u];
        float _2614 = roundEven(_2612.y);
        bool _2615 = _2614 == 3.0;
        float _2616 = log2(_2602);
        float _2623 = exp2(_2616 * cbSceneParam._m0[78u].x) * _2472;
        float _2624 = exp2(_2616 * cbSceneParam._m0[78u].y) * _2473;
        float _2625 = exp2(_2616 * cbSceneParam._m0[78u].z) * _2474;
        float _2632 = _586 + (-0.5);
        _2634 = cbMtdParam._m0[1u];
        _2636 = _2634.y * _2632;
        float _2639 = (_2614 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2640 = _2639 * (_2615 ? _2623 : (_2623 + (cbSceneParam._m0[72u].w * _2596)));
        _2641 = _2639 * (_2615 ? _2624 : (_2624 + (cbSceneParam._m0[72u].w * _2598)));
        _2642 = _2639 * (_2615 ? _2625 : (_2625 + (cbSceneParam._m0[72u].w * _2600)));
        _2643 = _2632 * 0.999000012874603271484375;
        _2653 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2653)
        {
            if ((cbInstanceData._m0[_635 + 7u].x + _2643) < 0.5)
            {
                _2809 = true;
                break;
            }
        }
        uint _2750 = _636 + uint(_2612.w);
        if ((cbInstanceData._m0[_2750].w < 1.0) && ((cbInstanceData._m0[_2750].w + _2643) < 0.5))
        {
            _2809 = true;
            break;
        }
        if ((_2636 + 1.0) < _2634.x)
        {
            _2809 = true;
            break;
        }
        _2809 = false;
        break;
    }
    float _3014;
    if (_2809)
    {
        discard_state = true;
        _3014 = 0.0;
    }
    else
    {
        _3014 = cbInstanceData._m0[_2475].w;
    }
    SV_Target.x = _2640;
    SV_Target.y = _2641;
    SV_Target.z = _2642;
    SV_Target.w = _3014;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2475].w;
    discard_exit();
}


