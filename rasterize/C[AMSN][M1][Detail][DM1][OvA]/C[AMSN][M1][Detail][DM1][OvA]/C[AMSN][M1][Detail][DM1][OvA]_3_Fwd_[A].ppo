#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _918;
float _3286;
float _3287;
float _3288;
float _3289;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _181 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _182 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _183 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _258 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _226.x) * cbMtdParam._m0[9u].x) * _249.x;
    float _262 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _226.y) * cbMtdParam._m0[9u].y) * _249.y;
    float _266 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _226.z) * cbMtdParam._m0[9u].z) * _249.z;
    vec4 _283 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _287 = _283.z;
    vec4 _300 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _314 = cbMtdParam._m0[13u].w * _287;
    float _317 = (((((_287 * 2.0) * _300.z) * cbMtdParam._m0[14u].x) - _314) * cbMtdParam._m0[13u].y) + _314;
    float _321 = (_283.x * 2.0) + (-1.0);
    float _323 = (_283.y * 2.0) + (-1.0);
    float _324 = dot(vec2(_321, _323), vec2(_321, _323));
    float _3298 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _330 = sqrt(1.0 - (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))));
    float _337 = (cbMtdParam._m0[13u].x * ((_300.x * 2.0) + (-1.0))) + _321;
    float _338 = (cbMtdParam._m0[13u].x * ((_300.y * 2.0) + (-1.0))) + _323;
    float _341 = fma(_330, _196 * NORMAL.x, fma(_338, _203 * TANGENT.x, (_189 * _181) * _337));
    float _344 = fma(_330, _196 * NORMAL.y, fma(_338, _203 * TANGENT.y, (_189 * _182) * _337));
    float _347 = fma(_330, _196 * NORMAL.z, fma(_338, _203 * TANGENT.z, (_189 * _183) * _337));
    float _351 = inversesqrt(dot(vec3(_341, _344, _347), vec3(_341, _344, _347)));
    float _352 = _351 * _341;
    float _353 = _351 * _344;
    float _354 = _351 * _347;
    float _3309 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _355 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _3320 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3331 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3342 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _374 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _416 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _426 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _416);
    float _427 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _416);
    float _428 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _416);
    float _432 = inversesqrt(dot(vec3(_426, _427, _428), vec3(_426, _427, _428)));
    float _433 = _426 * _432;
    float _434 = _427 * _432;
    float _435 = _428 * _432;
    vec4 _440 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _442 = _440.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _597 = sqrt(((_426 * _426) + (_427 * _427)) + (_428 * _428));
        float _603 = (cbMatDynParam._m0[5u].x * _597) + cbMatDynParam._m0[5u].y;
        float _3353 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _604 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _608 = (cbMatDynParam._m0[5u].z * _597) + cbMatDynParam._m0[5u].w;
        float _3364 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) - _604)) + _604) < ((_442 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _453 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _454 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _473 = fma(_354, cbSceneParam._m0[5u].z, fma(_353, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _352));
    float _476 = fma(_354, cbSceneParam._m0[6u].z, fma(_353, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _352));
    float _479 = fma(_354, cbSceneParam._m0[7u].z, fma(_353, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _352));
    uint _492 = uint(roundEven(NORMAL.w)) * 13u;
    uint _493 = _492 + 9u;
    uint _494 = _493 + uint(cbMatDynParam._m0[0u].w);
    float _500 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) * cbInstanceData._m0[_494].x;
    float _501 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0)))) * cbInstanceData._m0[_494].y;
    float _502 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0)))) * cbInstanceData._m0[_494].z;
    float _3375 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _503 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _3386 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _504 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _3397 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _505 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    vec4 _514 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _453, cbSceneParam._m0[86u].y * _454));
    float _517 = _514.x * TEXCOORD_5.w;
    float _518 = dot(vec3(_352, _353, _354), vec3(_433, _434, _435));
    float _521 = _518 * 2.0;
    float _525 = (_521 * _352) - _433;
    float _526 = (_521 * _353) - _434;
    float _527 = (_521 * _354) - _435;
    float _531 = abs(dot(vec3(_433, _434, _435), vec3(_352, _353, _354)));
    float _3408 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _533 = sqrt(_355);
    float _546 = exp2((_533 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_533 * 3.0));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _917;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _642 = fma(_586, cbModelParam._m0[26u].z, fma(_582, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _578));
        float _646 = fma(_586, cbModelParam._m0[27u].z, fma(_582, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _578));
        float _650 = fma(_586, cbModelParam._m0[28u].z, fma(_582, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _578));
        float _675 = _578 + _352;
        float _676 = _582 + _353;
        float _677 = _586 + _354;
        float _687 = fma(_677, cbModelParam._m0[26u].z, fma(_676, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _675)) - _642;
        float _688 = fma(_677, cbModelParam._m0[27u].z, fma(_676, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _675)) - _646;
        float _689 = fma(_677, cbModelParam._m0[28u].z, fma(_676, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _675)) - _650;
        float _693 = inversesqrt(dot(vec3(_687, _688, _689), vec3(_687, _688, _689)));
        float _706 = ((_693 * _687) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_642 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _707 = ((_693 * _688) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_646 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _708 = ((_693 * _689) / cbModelParam._m0[34u].z) + ((((((_650 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_706, _707, _708), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_706, _707, _708), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_706, _707, _708), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_706, _707, _708), 0.0);
        float _745 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_711.x + (-0.5));
        float _747 = _745 * (_711.y + (-0.5));
        float _748 = _745 * (_711.z + (-0.5));
        float _755 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_718.x + (-0.5));
        float _757 = _755 * (_718.y + (-0.5));
        float _758 = _755 * (_718.z + (-0.5));
        float _765 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_725.x + (-0.5));
        float _767 = _765 * (_725.y + (-0.5));
        float _768 = _765 * (_725.z + (-0.5));
        float _775 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_732.x + (-0.5));
        float _777 = _775 * (_732.y + (-0.5));
        float _778 = _775 * (_732.z + (-0.5));
        float _779 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _780 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _781 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _782 = _746 * 0.5;
        float _783 = _756 * 0.5;
        float _784 = _766 * 0.5;
        float _785 = dot(vec3(_782, _783, _784), vec3(_782, _783, _784));
        float _790 = (_785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_785);
        float _799 = (dot(vec3(_352, _353, _354), vec3(_790 * _782, _790 * _783, _790 * _784)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _809 = sqrt(((_783 * _783) + (_782 * _782)) + (_784 * _784)) / (_779 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _811 = _810 * 2.0;
        float _815 = (1.0 - _810) / (_810 + 1.0);
        float _3456 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _825 = ((((1.0 - _816) * (_811 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_811 + 1.0))) + _816) * _779;
        float _826 = _747 * 0.5;
        float _827 = _757 * 0.5;
        float _828 = _767 * 0.5;
        float _829 = dot(vec3(_826, _827, _828), vec3(_826, _827, _828));
        float _834 = (_829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_829);
        float _842 = (dot(vec3(_352, _353, _354), vec3(_834 * _826, _834 * _827, _834 * _828)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _851 = sqrt(((_827 * _827) + (_826 * _826)) + (_828 * _828)) / (_780 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _853 = _852 * 2.0;
        float _857 = (1.0 - _852) / (_852 + 1.0);
        float _3489 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _867 = ((((1.0 - _858) * (_853 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_853 + 1.0))) + _858) * _780;
        float _868 = _748 * 0.5;
        float _869 = _758 * 0.5;
        float _870 = _768 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _884 = (dot(vec3(_352, _353, _354), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _893 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_781 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3522 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_895 + 1.0))) + _900) * _781;
        _917 = _748;
        _919 = _747;
        _920 = _746;
        _921 = _758;
        _922 = _757;
        _923 = _756;
        _924 = _768;
        _925 = _767;
        _926 = _766;
        _927 = _781;
        _928 = _780;
        _929 = _779;
        _930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)));
        _931 = cbModelParam._m0[36u].z * (isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0)));
        _932 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
    }
    else
    {
        _917 = _918;
        _919 = _918;
        _920 = _918;
        _921 = _918;
        _922 = _918;
        _923 = _918;
        _924 = _918;
        _925 = _918;
        _926 = _918;
        _927 = _918;
        _928 = _918;
        _929 = _918;
        _930 = 0.0;
        _931 = 0.0;
        _932 = 0.0;
    }
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _961 = fma(_586, cbModelParam._m0[30u].z, fma(_582, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _578));
        float _965 = fma(_586, cbModelParam._m0[31u].z, fma(_582, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _578));
        float _969 = fma(_586, cbModelParam._m0[32u].z, fma(_582, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _578));
        float _992 = _578 + _352;
        float _993 = _582 + _353;
        float _994 = _586 + _354;
        float _1004 = fma(_994, cbModelParam._m0[30u].z, fma(_993, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _992)) - _961;
        float _1005 = fma(_994, cbModelParam._m0[31u].z, fma(_993, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _992)) - _965;
        float _1006 = fma(_994, cbModelParam._m0[32u].z, fma(_993, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _992)) - _969;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_961 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_965 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[35u].z) + ((((((_969 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1060 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1027.x + (-0.5));
        float _1062 = _1060 * (_1027.y + (-0.5));
        float _1063 = _1060 * (_1027.z + (-0.5));
        float _1070 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1034.x + (-0.5));
        float _1072 = _1070 * (_1034.y + (-0.5));
        float _1073 = _1070 * (_1034.z + (-0.5));
        float _1080 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1041.x + (-0.5));
        float _1082 = _1080 * (_1041.y + (-0.5));
        float _1083 = _1080 * (_1041.z + (-0.5));
        float _1090 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1048.x + (-0.5));
        float _1092 = _1090 * (_1048.y + (-0.5));
        float _1093 = _1090 * (_1048.z + (-0.5));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = _1061 * 0.5;
        float _1098 = _1071 * 0.5;
        float _1099 = _1081 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_352, _353, _354), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3585 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1124 + 1.0))) + _1129) * _1094;
        float _1139 = _1062 * 0.5;
        float _1140 = _1072 * 0.5;
        float _1141 = _1082 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_352, _353, _354), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3618 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1166 + 1.0))) + _1171) * _1095;
        float _1181 = _1063 * 0.5;
        float _1182 = _1073 * 0.5;
        float _1183 = _1083 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_352, _353, _354), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3651 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1208 + 1.0))) + _1213) * _1096;
        _1230 = _1063;
        _1231 = _1062;
        _1232 = _1061;
        _1233 = _1073;
        _1234 = _1072;
        _1235 = _1071;
        _1236 = _1083;
        _1237 = _1082;
        _1238 = _1081;
        _1239 = _1096;
        _1240 = _1095;
        _1241 = _1094;
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
    }
    else
    {
        _1230 = _918;
        _1231 = _918;
        _1232 = _918;
        _1233 = _918;
        _1234 = _918;
        _1235 = _918;
        _1236 = _918;
        _1237 = _918;
        _1238 = _918;
        _1239 = _918;
        _1240 = _918;
        _1241 = _918;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _930)) + _930;
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _931)) + _931;
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _932)) + _932;
    float _1277 = fma(_1256, cbSceneParam._m0[89u].z, fma(_1255, cbSceneParam._m0[89u].y, _1254 * cbSceneParam._m0[89u].x));
    float _1280 = fma(_1256, cbSceneParam._m0[90u].z, fma(_1255, cbSceneParam._m0[90u].y, _1254 * cbSceneParam._m0[90u].x));
    float _1283 = fma(_1256, cbSceneParam._m0[91u].z, fma(_1255, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1254));
    float _1298 = _525 * 0.5;
    float _1299 = _526 * 0.5;
    float _1300 = _527 * 0.5;
    float _1301 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1304 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1307 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1341;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1314 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_917, _921, _924, _927));
        float _1318 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_919, _922, _925, _928));
        float _1322 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_920, _923, _926, _929));
        float _1329 = dot(vec4(cbModelParam._m0[39u]), vec4(_1298, _1299, _1300, 1.0));
        _1341 = dot(vec3(isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1341 = 1.0;
    }
    float _1352;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1343 = dot(vec4(cbModelParam._m0[40u]), vec4(_1298, _1299, _1300, 1.0));
        _1352 = dot(vec3(isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1343) ? 0.0 : (isnan(0.0) ? _1343 : max(0.0, _1343))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1352 = 1.0;
    }
    float _1356 = (_1352 * cbModelParam._m0[1u].x) + (_1341 * (1.0 - cbModelParam._m0[1u].x));
    float _1366 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _355);
    float _1367 = isnan(_1366) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1366 : min(cbModelParam._m0[25u].z, _1366));
    float _1447;
    float _1449;
    float _1451;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1414 = fma(_586, cbModelParam._m0[13u].z, fma(_582, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _578)) + cbModelParam._m0[13u].w;
        float _1418 = fma(_586, cbModelParam._m0[14u].z, fma(_582, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _578)) + cbModelParam._m0[14u].w;
        float _1422 = fma(_586, cbModelParam._m0[15u].z, fma(_582, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _578)) + cbModelParam._m0[15u].w;
        float _1425 = fma(_527, cbModelParam._m0[13u].z, fma(_526, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _525));
        float _1428 = fma(_527, cbModelParam._m0[14u].z, fma(_526, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _525));
        float _1431 = fma(_527, cbModelParam._m0[15u].z, fma(_526, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _525));
        float _1459;
        if (_1425 > 0.0)
        {
            _1459 = abs((1.0 - _1414) / _1425);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1414 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1459 = frontier_phi_17_15_ladder;
        }
        float _1665;
        if (_1428 > 0.0)
        {
            _1665 = abs((1.0 - _1418) / _1428);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1418 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1665 = frontier_phi_26_22_ladder;
        }
        float _1908;
        if (_1431 > 0.0)
        {
            _1908 = abs((1.0 - _1422) / _1431);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1422 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1908 = frontier_phi_38_33_ladder;
        }
        float _1910 = isnan(_1665) ? _1459 : (isnan(_1459) ? _1665 : min(_1459, _1665));
        float _1911 = isnan(_1908) ? _1910 : (isnan(_1910) ? _1908 : min(_1910, _1908));
        float _1915 = (_1911 * _1425) + _1414;
        float _1916 = (_1911 * _1428) + _1418;
        float _1917 = (_1911 * _1431) + _1422;
        float _1918 = _1911 * 9.9999997473787516355514526367188e-05;
        float _1920 = (-1.0) - _1918;
        float _1922 = _1918 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1917 > _1922) || ((_1917 < _1920) || ((_1916 > _1922) || ((_1916 < _1920) || ((_1915 < _1920) || (_1915 > _1922))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2041 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1917, cbModelParam._m0[9u].z, fma(_1916, cbModelParam._m0[9u].y, _1915 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1917, cbModelParam._m0[10u].z, fma(_1916, cbModelParam._m0[10u].y, _1915 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1917, cbModelParam._m0[11u].z, fma(_1916, cbModelParam._m0[11u].y, _1915 * cbModelParam._m0[11u].x))), _1367);
            frontier_phi_16_38_ladder = _2041.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2041.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2041.x * cbModelParam._m0[1u].y;
        }
        _1447 = frontier_phi_16_38_ladder_2;
        _1449 = frontier_phi_16_38_ladder_1;
        _1451 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1435 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_525, _526, _527), _1367);
        _1447 = _1435.x * cbModelParam._m0[1u].y;
        _1449 = _1435.y * cbModelParam._m0[1u].y;
        _1451 = _1435.z * cbModelParam._m0[1u].y;
    }
    float _1455 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _355);
    float _1456 = isnan(_1455) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1455 : min(cbModelParam._m0[25u].w, _1455));
    float _1549;
    float _1551;
    float _1553;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1513 = fma(_586, cbModelParam._m0[21u].z, fma(_582, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _578)) + cbModelParam._m0[21u].w;
        float _1517 = fma(_586, cbModelParam._m0[22u].z, fma(_582, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _578)) + cbModelParam._m0[22u].w;
        float _1521 = fma(_586, cbModelParam._m0[23u].z, fma(_582, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _578)) + cbModelParam._m0[23u].w;
        float _1524 = fma(_527, cbModelParam._m0[21u].z, fma(_526, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _525));
        float _1527 = fma(_527, cbModelParam._m0[22u].z, fma(_526, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _525));
        float _1530 = fma(_527, cbModelParam._m0[23u].z, fma(_526, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _525));
        float _1670;
        if (_1524 > 0.0)
        {
            _1670 = abs((1.0 - _1513) / _1524);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1513 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1670 = frontier_phi_28_24_ladder;
        }
        float _1935;
        if (_1527 > 0.0)
        {
            _1935 = abs((1.0 - _1517) / _1527);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1517 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1935 = frontier_phi_40_35_ladder;
        }
        float _2140;
        if (_1530 > 0.0)
        {
            _2140 = abs((1.0 - _1521) / _1530);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1521 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2140 = frontier_phi_49_46_ladder;
        }
        float _2142 = isnan(_1935) ? _1670 : (isnan(_1670) ? _1935 : min(_1670, _1935));
        float _2143 = isnan(_2140) ? _2142 : (isnan(_2142) ? _2140 : min(_2142, _2140));
        float _2147 = (_2143 * _1524) + _1513;
        float _2148 = (_2143 * _1527) + _1517;
        float _2149 = (_2143 * _1530) + _1521;
        float _2150 = _2143 * 9.9999997473787516355514526367188e-05;
        float _2151 = (-1.0) - _2150;
        float _2153 = _2150 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2149 > _2153) || ((_2149 < _2151) || ((_2148 > _2153) || ((_2148 < _2151) || ((_2147 < _2151) || (_2147 > _2153))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2348 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2149, cbModelParam._m0[17u].z, fma(_2148, cbModelParam._m0[17u].y, _2147 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2149, cbModelParam._m0[18u].z, fma(_2148, cbModelParam._m0[18u].y, _2147 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2149, cbModelParam._m0[19u].z, fma(_2148, cbModelParam._m0[19u].y, _2147 * cbModelParam._m0[19u].x))), _1456);
            frontier_phi_25_49_ladder = _2348.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2348.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2348.x * cbModelParam._m0[1u].z;
        }
        _1549 = frontier_phi_25_49_ladder_2;
        _1551 = frontier_phi_25_49_ladder_1;
        _1553 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1533 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_525, _526, _527), _1456);
        _1549 = _1533.x * cbModelParam._m0[1u].z;
        _1551 = _1533.y * cbModelParam._m0[1u].z;
        _1553 = _1533.z * cbModelParam._m0[1u].z;
    }
    float _1565 = ((((1.0 - _546) * ((_533 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_546 * _533)) * _517;
    float _1566 = _1565 * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1567 = _1565 * ((cbModelParam._m0[1u].w * (_1551 - _1449)) + _1449);
    float _1568 = _1565 * ((cbModelParam._m0[1u].w * (_1553 - _1451)) + _1451);
    float _1571 = fma(_1568, cbSceneParam._m0[89u].z, fma(_1567, cbSceneParam._m0[89u].y, _1566 * cbSceneParam._m0[89u].x));
    float _1574 = fma(_1568, cbSceneParam._m0[90u].z, fma(_1567, cbSceneParam._m0[90u].y, _1566 * cbSceneParam._m0[90u].x));
    float _1577 = fma(_1568, cbSceneParam._m0[91u].z, fma(_1567, cbSceneParam._m0[91u].y, _1566 * cbSceneParam._m0[91u].x));
    uvec4 _1587 = floatBitsToUint(cbInstanceData._m0[_492 + 5u]);
    uint _1589 = _1587.x * 14u;
    uint _1590 = _1589 + 13u;
    float _1597 = _517 + (-1.0);
    float _1602 = (cbLight._m0[_1590].x * _1597) + 1.0;
    float _1603 = (cbLight._m0[_1590].y * _1597) + 1.0;
    float _1604 = (cbLight._m0[_1590].z * _1597) + 1.0;
    float _1605 = (cbLight._m0[_1590].w * _1597) + 1.0;
    uint _1606 = _1589 + 5u;
    float _1612 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
    uint _1616 = _1589 + 4u;
    float _1623 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
    uint _1627 = _1589 | 1u;
    float _1638 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_352, _353, _354));
    float _1641 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_352, _353, _354));
    float _3787 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _3798 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1646 = (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * 0.3183098733425140380859375;
    float _1648 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * 0.3183098733425140380859375;
    float _1655 = ((cbLight._m0[_1606].x * _1612) * _1648) + ((cbLight._m0[_1616].x * _1623) * _1646);
    float _1656 = ((_1612 * cbLight._m0[_1606].y) * _1648) + ((_1623 * cbLight._m0[_1616].y) * _1646);
    float _1657 = ((_1612 * cbLight._m0[_1606].z) * _1648) + ((_1623 * cbLight._m0[_1616].z) * _1646);
    uvec4 _1662 = floatBitsToUint(cbLight._m0[_1589 + 12u]);
    bool _1664 = _1662.x == 0u;
    float _1675;
    float _1677;
    float _1679;
    if (_1664)
    {
        _1675 = _1655;
        _1677 = _1656;
        _1679 = _1657;
    }
    else
    {
        uint _1683 = _1589 + 6u;
        float _1699 = (dot(vec3(cbLight._m0[_1589 + 2u].xyz), vec3(_352, _353, _354)) * 0.5) + 0.5;
        float _1700 = _1699 * _1699;
        float _3809 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1702 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
        _1675 = (((cbLight._m0[_1683].x * 0.3183098733425140380859375) * _1701) * _1702) + _1655;
        _1677 = (((cbLight._m0[_1683].y * 0.3183098733425140380859375) * _1701) * _1702) + _1656;
        _1679 = (((cbLight._m0[_1683].z * 0.3183098733425140380859375) * _1701) * _1702) + _1657;
    }
    bool _1682 = _1662.y == 0u;
    float _1720;
    float _1722;
    float _1724;
    if (_1682)
    {
        _1720 = _1675;
        _1722 = _1677;
        _1724 = _1679;
    }
    else
    {
        uint _1879 = _1589 + 7u;
        float _1895 = (dot(vec3(cbLight._m0[_1589 + 3u].xyz), vec3(_352, _353, _354)) * 0.5) + 0.5;
        float _1896 = _1895 * _1895;
        float _3825 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1898 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
        _1720 = (((cbLight._m0[_1879].x * 0.3183098733425140380859375) * _1897) * _1898) + _1675;
        _1722 = (((cbLight._m0[_1879].y * 0.3183098733425140380859375) * _1897) * _1898) + _1677;
        _1724 = (((cbLight._m0[_1879].z * 0.3183098733425140380859375) * _1897) * _1898) + _1679;
    }
    uint _1727 = _1589 + 8u;
    float _1740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1589].w)) * _355) * 0.949999988079071044921875);
    float _1741 = _1740 * _1740;
    float _1742 = cbLight._m0[_1589].x + _433;
    float _1743 = cbLight._m0[_1589].y + _434;
    float _1744 = cbLight._m0[_1589].z + _435;
    float _1748 = inversesqrt(dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744)));
    float _1749 = _1748 * _1742;
    float _1750 = _1748 * _1743;
    float _1751 = _1748 * _1744;
    float _1752 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1589].xyz));
    float _3841 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _1756 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _1757 = dot(vec3(_352, _353, _354), vec3(_1749, _1750, _1751));
    float _3863 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1761 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_1749, _1750, _1751));
    float _3874 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1765 = _1741 * _1741;
    float _1769 = ((_1760 * _1760) * (_1765 + (-1.0))) + 1.0;
    float _1780 = (exp2(log2(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1781 = 1.0 - _1741;
    float _1792 = (0.5 / (((_1756 * ((_1755 * _1781) + _1741)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _1781) + _1741) * _1755))) * _1755;
    float _3885 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1794 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1765 / ((_1769 * _1769) * 3.141590118408203125));
    uint _1805 = _1589 + 9u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1627].w)) * _355) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1627].x + _433;
    float _1819 = cbLight._m0[_1627].y + _434;
    float _1820 = cbLight._m0[_1627].z + _435;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1627].xyz));
    float _3896 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1832 = dot(vec3(_352, _353, _354), vec3(_1825, _1826, _1827));
    float _3907 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1836 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_1825, _1826, _1827));
    float _3918 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1840 = _1817 * _1817;
    float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
    float _1853 = (exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1854 = 1.0 - _1817;
    float _1864 = (0.5 / (((_1756 * ((_1831 * _1854) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _1854) + _1817) * _1831))) * _1831;
    float _3929 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1866 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
    float _1876 = (((_1853 * cbLight._m0[_1805].x) * _1866) * _1612) + (((_1780 * cbLight._m0[_1727].x) * _1794) * _1623);
    float _1877 = (((_1853 * cbLight._m0[_1805].y) * _1866) * _1612) + (((_1780 * cbLight._m0[_1727].y) * _1794) * _1623);
    float _1878 = (((_1853 * cbLight._m0[_1805].z) * _1866) * _1612) + (((_1780 * cbLight._m0[_1727].z) * _1794) * _1623);
    float _1940;
    float _1942;
    float _1944;
    if (_1664)
    {
        _1940 = _1876;
        _1942 = _1877;
        _1944 = _1878;
    }
    else
    {
        uint _1946 = _1589 + 2u;
        uint _1950 = _1589 + 10u;
        float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _355) * 0.949999988079071044921875);
        float _1965 = _1964 * _1964;
        float _1966 = cbLight._m0[_1946].x + _433;
        float _1967 = cbLight._m0[_1946].y + _434;
        float _1968 = cbLight._m0[_1946].z + _435;
        float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
        float _1973 = _1972 * _1966;
        float _1974 = _1972 * _1967;
        float _1975 = _1972 * _1968;
        float _1976 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1946].xyz));
        float _3940 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1979 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1980 = dot(vec3(_352, _353, _354), vec3(_1973, _1974, _1975));
        float _3951 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1983 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1984 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_1973, _1974, _1975));
        float _3962 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1988 = _1965 * _1965;
        float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
        float _2001 = (exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2002 = 1.0 - _1965;
        float _2012 = (0.5 / (((_1756 * ((_1979 * _2002) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _2002) + _1965) * _1979))) * _1979;
        float _3973 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2014 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
        float _2015 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
        _1940 = (((_2001 * cbLight._m0[_1950].x) * _2014) * _2015) + _1876;
        _1942 = (((_2001 * cbLight._m0[_1950].y) * _2014) * _2015) + _1877;
        _1944 = (((_2001 * cbLight._m0[_1950].z) * _2014) * _2015) + _1878;
    }
    float _2050;
    float _2052;
    float _2054;
    if (_1682)
    {
        _2050 = _1940;
        _2052 = _1942;
        _2054 = _1944;
    }
    else
    {
        uint _2061 = _1589 + 3u;
        uint _2065 = _1589 + 11u;
        float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _355) * 0.949999988079071044921875);
        float _2080 = _2079 * _2079;
        float _2081 = cbLight._m0[_2061].x + _433;
        float _2082 = cbLight._m0[_2061].y + _434;
        float _2083 = cbLight._m0[_2061].z + _435;
        float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
        float _2088 = _2087 * _2081;
        float _2089 = _2087 * _2082;
        float _2090 = _2087 * _2083;
        float _2091 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_2061].xyz));
        float _3989 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2094 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _2095 = dot(vec3(_352, _353, _354), vec3(_2088, _2089, _2090));
        float _4000 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2099 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2088, _2089, _2090));
        float _4011 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2103 = _2080 * _2080;
        float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
        float _2116 = (exp2(log2(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2117 = 1.0 - _2080;
        float _2127 = (0.5 / (((_1756 * ((_2094 * _2117) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _2117) + _2080) * _2094))) * _2094;
        float _4022 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2129 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
        float _2130 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
        _2050 = (((_2116 * cbLight._m0[_2065].x) * _2129) * _2130) + _1940;
        _2052 = (((_2116 * cbLight._m0[_2065].y) * _2129) * _2130) + _1942;
        _2054 = (((_2116 * cbLight._m0[_2065].z) * _2129) * _2130) + _1944;
    }
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    if (_1587.y == 0u)
    {
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2205;
        float _2207 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2205;
        float _2208 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2205;
        uvec4 _2220 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2221 = _2220.x;
        uint _2232 = uint((float(_2220.y) * floor(float(uint(cbSceneParam._m0[85u].y * _454) / _2221))) + floor(float(uint(cbSceneParam._m0[85u].x * _453) / _2221)));
        float _2242 = (log2(_2208 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2243 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        uint _2246 = uint(isnan(14.0) ? _2243 : (isnan(_2243) ? 14.0 : min(_2243, 14.0)));
        uvec4 _2251 = texelFetch(g_lightClusterGridBuffer, int(((_2246 << 2u) + (_2232 << 6u)) >> 2u));
        uint _2252 = _2251.x;
        uint _2253 = _2220.z;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        if (((((1u << ((_2253 >> 4u) & 15u)) + 4294967295u) & _2252) == 0u) || ((_2253 & 240u) == 0u))
        {
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
        }
        else
        {
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            uint _2512 = 0u;
            uint _2521;
            bool _2522;
            for (;;)
            {
                _2521 = texelFetch(g_lightClassification, int((((_2246 << 5u) + (_2232 << 9u)) + (_2512 << 2u)) >> 2u)).x;
                _2522 = _2521 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2522)
                {
                    frontier_phi_66_pred = _2506;
                    frontier_phi_66_pred_1 = _2511;
                    frontier_phi_66_pred_2 = _2510;
                    frontier_phi_66_pred_3 = _2509;
                    frontier_phi_66_pred_4 = _2508;
                    frontier_phi_66_pred_5 = _2507;
                }
                else
                {
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    uint _2657;
                    _2651 = _2506;
                    _2652 = _2507;
                    _2653 = _2508;
                    _2654 = _2509;
                    _2655 = _2510;
                    _2656 = _2511;
                    _2657 = _2521;
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    for (;;)
                    {
                        uint _2661 = uint(findLSB(_2657)) + (_2512 << 5u);
                        uint _2658 = (_2657 + 4294967295u) & _2657;
                        uint _2663 = _2661 * 48u;
                        vec4 _2677 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2663)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 3u)).x));
                        uint _2683 = (_2661 * 48u) + 4u;
                        vec4 _2696 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2683)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 3u)).x));
                        uint _2702 = (_2661 * 48u) + 8u;
                        vec3 _2713 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x));
                        float _2717 = _2677.x - _2206;
                        float _2718 = _2677.y - _2207;
                        float _2719 = _2677.z - _2208;
                        float _2720 = dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719));
                        float _2723 = inversesqrt(_2720);
                        float _2724 = _2723 * _2717;
                        float _2725 = _2723 * _2718;
                        float _2726 = _2723 * _2719;
                        float _2727 = dot(vec3(_473, _476, _479), vec3(_2724, _2725, _2726));
                        float _2732 = 1.0 - (_2720 * _2677.w);
                        float _4048 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2733 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                        float _2734 = sqrt(_2720) * _2696.w;
                        float _2737 = 1.39999997615814208984375 / (_2734 + 1.39999997615814208984375);
                        float _2738 = _2737 * _2737;
                        float _2741 = ((1.0 - _2738) * _2727) + _2738;
                        float _2744 = _2734 * _2734;
                        float _2748 = ((isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0))) * _2733) / ((_2744 * 0.699999988079071044921875) + 1.0);
                        float _2752 = (-0.0) - _2206;
                        float _2753 = (-0.0) - _2207;
                        float _2754 = (-0.0) - _2208;
                        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
                        float _2759 = _2758 * _2752;
                        float _2760 = _2758 * _2753;
                        float _2761 = _2758 * _2754;
                        float _2769 = exp2(log2(1.0 / ((_2744 * 3.5) + 5.0)) * 0.25);
                        float _2770 = 1.0 - _533;
                        float _2777 = sqrt(1.0 - ((1.0 - (_2770 * _2770)) * (1.0 - (_2769 * _2769))));
                        float _2778 = _2777 * _2777;
                        float _2779 = _2778 * _2778;
                        float _2780 = _2759 + _2724;
                        float _2781 = _2760 + _2725;
                        float _2782 = _2761 + _2726;
                        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
                        float _2790 = dot(vec3(_473, _476, _479), vec3(_2759, _2760, _2761));
                        float _4064 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2793 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                        float _2794 = dot(vec3(_473, _476, _479), vec3(_2786 * _2780, _2786 * _2781, _2786 * _2782));
                        float _4075 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2797 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                        float _2801 = ((_2797 * _2797) * (_2779 + (-1.0))) + 1.0;
                        float _2802 = _2737 * _2778;
                        float _2803 = _2802 * _2802;
                        float _2806 = ((1.0 - _2803) * _2727) + _2803;
                        float _4086 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2807 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                        float _2808 = 1.0 - _2778;
                        float _2818 = (0.5 / (((_2807 * ((_2793 * _2808) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2807 * _2808) + _2778) * _2793))) * _2807;
                        float _4097 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2829 = (((_2779 * 3.1415927410125732421875) * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) / ((_2801 * _2801) * ((_2744 * 2.1991131305694580078125) + 3.141590118408203125))) * _2733;
                        _2581 = (_2748 * _2696.x) + _2654;
                        _2582 = (_2748 * _2696.y) + _2655;
                        _2583 = (_2748 * _2696.z) + _2656;
                        _2578 = (_2829 * _2713.x) + _2651;
                        _2579 = (_2829 * _2713.y) + _2652;
                        _2580 = (_2829 * _2713.z) + _2653;
                        if (_2658 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2651 = _2578;
                            _2652 = _2579;
                            _2653 = _2580;
                            _2654 = _2581;
                            _2655 = _2582;
                            _2656 = _2583;
                            _2657 = _2658;
                        }
                    }
                    frontier_phi_66_pred = _2578;
                    frontier_phi_66_pred_1 = _2583;
                    frontier_phi_66_pred_2 = _2582;
                    frontier_phi_66_pred_3 = _2581;
                    frontier_phi_66_pred_4 = _2580;
                    frontier_phi_66_pred_5 = _2579;
                }
                _2354 = frontier_phi_66_pred;
                _2364 = frontier_phi_66_pred_1;
                _2362 = frontier_phi_66_pred_2;
                _2360 = frontier_phi_66_pred_3;
                _2358 = frontier_phi_66_pred_4;
                _2356 = frontier_phi_66_pred_5;
                uint _2513 = _2512 + 1u;
                if (_2513 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2506 = _2354;
                    _2507 = _2356;
                    _2508 = _2358;
                    _2509 = _2360;
                    _2510 = _2362;
                    _2511 = _2364;
                    _2512 = _2513;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
        }
        uvec4 _2367 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2368 = _2367.z;
        uint _2370 = (_2368 >> 8u) & 15u;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        if (((4294967295u << _2370) & _2252) == 0u)
        {
            _2474 = _2353;
            _2476 = _2355;
            _2478 = _2357;
            _2480 = _2359;
            _2482 = _2361;
            _2484 = _2363;
        }
        else
        {
            float _2499 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
            float _2500 = _2499 * _2206;
            float _2501 = _2499 * _2207;
            float _2502 = _2499 * _2208;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2370 < ((_2368 >> 12u) & 15u))
            {
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2634 = _2353;
                float _2635 = _2355;
                float _2636 = _2357;
                float _2637 = _2359;
                float _2638 = _2361;
                float _2639 = _2363;
                uint _2640 = _2370;
                uint _2649;
                bool _2650;
                for (;;)
                {
                    _2649 = texelFetch(g_lightClassification, int((((_2246 << 5u) + (_2232 << 9u)) + (_2640 << 2u)) >> 2u)).x;
                    _2650 = _2649 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2650)
                    {
                        frontier_phi_77_pred = _2639;
                        frontier_phi_77_pred_1 = _2638;
                        frontier_phi_77_pred_2 = _2637;
                        frontier_phi_77_pred_3 = _2636;
                        frontier_phi_77_pred_4 = _2635;
                        frontier_phi_77_pred_5 = _2634;
                    }
                    else
                    {
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _2856 = _2634;
                        float _2857 = _2635;
                        float _2858 = _2636;
                        float _2859 = _2637;
                        float _2860 = _2638;
                        float _2861 = _2639;
                        uint _2862 = _2649;
                        uint _2863;
                        vec4 _2888;
                        float _2889;
                        vec4 _2904;
                        vec3 _2916;
                        vec4 _2932;
                        vec4 _2948;
                        float _2995;
                        bool _2996;
                        for (;;)
                        {
                            uint _2873 = ((_2640 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2862));
                            _2863 = (_2862 + 4294967295u) & _2862;
                            uint _2875 = _2873 * 40u;
                            _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            _2889 = _2888.w;
                            uint _2891 = (_2873 * 40u) + 4u;
                            _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            uint _2906 = (_2873 * 40u) + 8u;
                            _2916 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x));
                            uint _2919 = (_2873 * 40u) + 16u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2935 = (_2873 * 40u) + 20u;
                            _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            uint _2951 = (_2873 * 40u) + 24u;
                            vec4 _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2970 = (_2873 * 40u) + 28u;
                            vec4 _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            _2995 = fma(_2208, _2983.z, fma(_2207, _2983.y, _2983.x * _2206)) + _2983.w;
                            _2996 = !((fma(_2208, _2964.z, fma(_2207, _2964.y, _2964.x * _2206)) + _2964.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2996)
                            {
                                float _3023 = _2888.x - _2206;
                                float _3024 = _2888.y - _2207;
                                float _3025 = _2888.z - _2208;
                                float _3026 = dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025));
                                float _3029 = inversesqrt(_3026);
                                float _3030 = _3029 * _3023;
                                float _3031 = _3029 * _3024;
                                float _3032 = _3029 * _3025;
                                float _3036 = 1.0 - (_3026 / (_2889 * _2889));
                                float _4108 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3037 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3041 = sqrt(_3026) * _2904.w;
                                float _3043 = 1.39999997615814208984375 / (_3041 + 1.39999997615814208984375);
                                float _3044 = _3043 * _3043;
                                float _3047 = ((1.0 - _3044) * dot(vec3(_3030, _3031, _3032), vec3(_473, _476, _479))) + _3044;
                                float _3050 = _3041 * _3041;
                                float _3054 = (fma(_2208, _2932.z, fma(_2207, _2932.y, _2932.x * _2206)) + _2932.w) / _2995;
                                float _3055 = (fma(_2208, _2948.z, fma(_2207, _2948.y, _2948.x * _2206)) + _2948.w) / _2995;
                                float _3059 = 1.0 - dot(vec2(_3054, _3055), vec2(_3054, _3055));
                                float _4124 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3060 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                                float _3061 = _3060 * (((isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))) * _3037) / ((_3050 * 0.699999988079071044921875) + 1.0));
                                float _3073 = exp2(log2(1.0 / ((_3050 * 3.5) + 5.0)) * 0.25);
                                float _3074 = 1.0 - _533;
                                float _3081 = sqrt(1.0 - ((1.0 - (_3074 * _3074)) * (1.0 - (_3073 * _3073))));
                                float _3082 = _3081 * _3081;
                                float _3083 = _3082 * _3082;
                                float _3084 = _3030 - _2500;
                                float _3085 = _3031 - _2501;
                                float _3086 = _3032 - _2502;
                                float _3090 = inversesqrt(dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086)));
                                float _3094 = dot(vec3(_473, _476, _479), vec3((-0.0) - _2500, (-0.0) - _2501, (-0.0) - _2502));
                                float _4135 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3097 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3098 = dot(vec3(_473, _476, _479), vec3(_3090 * _3084, _3090 * _3085, _3090 * _3086));
                                float _4146 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3101 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3105 = ((_3101 * _3101) * (_3083 + (-1.0))) + 1.0;
                                float _3106 = _3043 * _3082;
                                float _3107 = _3106 * _3106;
                                float _3113 = ((1.0 - _3107) * dot(vec3(_473, _476, _479), vec3(_3030, _3031, _3032))) + _3107;
                                float _4157 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3114 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3115 = 1.0 - _3082;
                                float _3125 = (0.5 / (((_3114 * ((_3097 * _3115) + _3082)) + 9.9999999392252902907785028219223e-09) + (((_3114 * _3115) + _3082) * _3097))) * _3114;
                                float _4168 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3135 = (_3060 * _3037) * (((_3083 * 3.1415927410125732421875) * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) / ((_3105 * _3105) * ((_3050 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3061 * _2904.y;
                                frontier_phi_83_pred_1 = _3061 * _2904.x;
                                frontier_phi_83_pred_2 = _3135 * _2916.z;
                                frontier_phi_83_pred_3 = _3135 * _2916.y;
                                frontier_phi_83_pred_4 = _3135 * _2916.x;
                                frontier_phi_83_pred_5 = _3061 * _2904.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3143 = frontier_phi_83_pred;
                            _3142 = frontier_phi_83_pred_1;
                            _3141 = frontier_phi_83_pred_2;
                            _3140 = frontier_phi_83_pred_3;
                            _3139 = frontier_phi_83_pred_4;
                            _3144 = frontier_phi_83_pred_5;
                            _2846 = _3142 + _2859;
                            _2847 = _3143 + _2860;
                            _2848 = _3144 + _2861;
                            _2843 = _3139 + _2856;
                            _2844 = _3140 + _2857;
                            _2845 = _3141 + _2858;
                            if (_2863 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2863;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2848;
                        frontier_phi_77_pred_1 = _2847;
                        frontier_phi_77_pred_2 = _2846;
                        frontier_phi_77_pred_3 = _2845;
                        frontier_phi_77_pred_4 = _2844;
                        frontier_phi_77_pred_5 = _2843;
                    }
                    _2485 = frontier_phi_77_pred;
                    _2483 = frontier_phi_77_pred_1;
                    _2481 = frontier_phi_77_pred_2;
                    _2479 = frontier_phi_77_pred_3;
                    _2477 = frontier_phi_77_pred_4;
                    _2475 = frontier_phi_77_pred_5;
                    uint _2641 = _2640 + 1u;
                    if (_2641 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2634 = _2475;
                        _2635 = _2477;
                        _2636 = _2479;
                        _2637 = _2481;
                        _2638 = _2483;
                        _2639 = _2485;
                        _2640 = _2641;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2479;
                frontier_phi_58_59_ladder_1 = _2485;
                frontier_phi_58_59_ladder_2 = _2483;
                frontier_phi_58_59_ladder_3 = _2481;
                frontier_phi_58_59_ladder_4 = _2477;
                frontier_phi_58_59_ladder_5 = _2475;
            }
            else
            {
                frontier_phi_58_59_ladder = _2357;
                frontier_phi_58_59_ladder_1 = _2363;
                frontier_phi_58_59_ladder_2 = _2361;
                frontier_phi_58_59_ladder_3 = _2359;
                frontier_phi_58_59_ladder_4 = _2355;
                frontier_phi_58_59_ladder_5 = _2353;
            }
            _2474 = frontier_phi_58_59_ladder_5;
            _2476 = frontier_phi_58_59_ladder_4;
            _2478 = frontier_phi_58_59_ladder;
            _2480 = frontier_phi_58_59_ladder_3;
            _2482 = frontier_phi_58_59_ladder_2;
            _2484 = frontier_phi_58_59_ladder_1;
        }
        float _2489 = isnan(1.0) ? _517 : (isnan(_517) ? 1.0 : min(_517, 1.0));
        _2265 = (_2489 * _2480) + _1720;
        _2267 = (_2489 * _2482) + _1722;
        _2269 = (_2489 * _2484) + _1724;
        _2271 = ((_2474 * 0.039999999105930328369140625) * _2489) + _2050;
        _2273 = ((_2476 * 0.039999999105930328369140625) * _2489) + _2052;
        _2275 = ((_2478 * 0.039999999105930328369140625) * _2489) + _2054;
    }
    else
    {
        _2265 = _1720;
        _2267 = _1722;
        _2269 = _1724;
        _2271 = _2050;
        _2273 = _2052;
        _2275 = _2054;
    }
    float _4184 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _4195 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _4206 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _2292 = ((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2265 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _517))) + ((_2271 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1356)) * cbPerFrame._m0[3u].x);
    float _2293 = ((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2267 + ((isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))) * _517))) + ((_2273 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _1356)) * cbPerFrame._m0[3u].x);
    float _2294 = ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2269 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _517))) + ((_2275 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1356)) * cbPerFrame._m0[3u].x);
    uint _2295 = _492 + 6u;
    float _2303 = _453 / cbSceneParam._m0[86u].x;
    float _2304 = _454 / cbSceneParam._m0[86u].y;
    vec4 _2318 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2303, _2304, (log2((isnan(cbSceneParam._m0[77u].w) ? _374 : (isnan(_374) ? cbSceneParam._m0[77u].w : min(_374, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2320 = _2318.x;
    float _2321 = _2318.y;
    float _2322 = _2318.z;
    float _2323 = _2318.w;
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    if (_374 > cbSceneParam._m0[78u].w)
    {
        float _2378 = isnan(_374) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _374 : min(cbSceneParam._m0[80u].w, _374));
        float _2379 = _2378 / _374;
        float _2390 = _2379 * _426;
        float _2391 = _427 * _2379;
        float _2392 = (-0.0) - _2391;
        float _2394 = _2379 * _428;
        float _2396 = (cbSceneParam._m0[77u].w * _2392) / _2378;
        float _2397 = _2396 + cbSceneParam._m0[79u].w;
        float _2398 = cbSceneParam._m0[79u].w - _2391;
        float _2404 = sqrt(((_2390 * _2390) + (_2391 * _2391)) + (_2394 * _2394));
        float _2407 = (1.0 - (cbSceneParam._m0[77u].w / _2378)) * _2404;
        float _2412 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2414 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2591;
        if (abs((_2392 - _2396) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2591 = ((((_2397 > 0.0) ? exp2(_2412 * _2397) : (2.0 - exp2(_2414 * _2397))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2407;
        }
        else
        {
            float _2535 = 1.0 / cbSceneParam._m0[80u].x;
            float _2536 = isnan(_2398) ? _2397 : (isnan(_2397) ? _2398 : max(_2397, _2398));
            float _2537 = isnan(_2398) ? _2397 : (isnan(_2397) ? _2398 : min(_2397, _2398));
            float _2546 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : min(_2536, 0.0));
            float _2547 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : min(_2537, 0.0));
            _2591 = ((abs(_2404 / _2392) * cbSceneParam._m0[80u].y) * ((((_2546 - _2547) * 2.0) - ((exp2(_2412 * (isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0)))) - exp2(_2412 * (isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0))))) * _2535)) - ((exp2(_2414 * _2546) - exp2(_2414 * _2547)) * _2535))) + (_2407 * cbSceneParam._m0[80u].z);
        }
        vec4 _2593 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2303, _2304, 1.0), 0.0);
        float _2602 = exp2((_2591 * (-1.44269502162933349609375)) * (1.0 - _2593.w));
        float _2603 = log2(_2602);
        float _2619 = log2(_2323);
        _2416 = (exp2(_2619 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2603 * cbSceneParam._m0[78u].x)) * _2593.x) / cbSceneParam._m0[78u].x)) + _2320;
        _2418 = (exp2(_2619 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2603 * cbSceneParam._m0[78u].y)) * _2593.y) / cbSceneParam._m0[78u].y)) + _2321;
        _2420 = (exp2(_2619 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2603 * cbSceneParam._m0[78u].z)) * _2593.z) / cbSceneParam._m0[78u].z)) + _2322;
        _2422 = _2602 * _2323;
    }
    else
    {
        _2416 = _2320;
        _2418 = _2321;
        _2420 = _2322;
        _2422 = _2323;
    }
    bool _2629;
    vec4 _2432;
    vec4 _2454;
    float _2456;
    float _2460;
    float _2461;
    float _2462;
    float _2463;
    bool _2473;
    for (;;)
    {
        _2432 = cbMatDynParam._m0[0u];
        float _2434 = roundEven(_2432.y);
        bool _2435 = _2434 == 3.0;
        float _2436 = log2(_2422);
        float _2443 = exp2(_2436 * cbSceneParam._m0[78u].x) * _2292;
        float _2444 = exp2(_2436 * cbSceneParam._m0[78u].y) * _2293;
        float _2445 = exp2(_2436 * cbSceneParam._m0[78u].z) * _2294;
        float _2452 = _442 + (-0.5);
        _2454 = cbMtdParam._m0[1u];
        _2456 = _2454.y * _2452;
        float _2459 = (_2434 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2460 = _2459 * (_2435 ? _2443 : (_2443 + (cbSceneParam._m0[72u].w * _2416)));
        _2461 = _2459 * (_2435 ? _2444 : (_2444 + (cbSceneParam._m0[72u].w * _2418)));
        _2462 = _2459 * (_2435 ? _2445 : (_2445 + (cbSceneParam._m0[72u].w * _2420)));
        _2463 = _2452 * 0.999000012874603271484375;
        _2473 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2473)
        {
            if ((cbInstanceData._m0[_492 + 7u].x + _2463) < 0.5)
            {
                _2629 = true;
                break;
            }
        }
        uint _2570 = _493 + uint(_2432.w);
        if ((cbInstanceData._m0[_2570].w < 1.0) && ((cbInstanceData._m0[_2570].w + _2463) < 0.5))
        {
            _2629 = true;
            break;
        }
        if ((_2456 + 1.0) < _2454.x)
        {
            _2629 = true;
            break;
        }
        _2629 = false;
        break;
    }
    float _2834;
    if (_2629)
    {
        discard_state = true;
        _2834 = 0.0;
    }
    else
    {
        _2834 = cbInstanceData._m0[_2295].w;
    }
    SV_Target.x = _2460;
    SV_Target.y = _2461;
    SV_Target.z = _2462;
    SV_Target.w = _2834;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2295].w;
    discard_exit();
}


