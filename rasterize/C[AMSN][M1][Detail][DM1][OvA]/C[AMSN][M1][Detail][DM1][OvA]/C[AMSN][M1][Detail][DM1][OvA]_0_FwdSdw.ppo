#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1040;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _253 = _247.x * cbMtdParam._m0[10u].x;
    float _254 = _247.y * cbMtdParam._m0[10u].y;
    float _255 = _247.z * cbMtdParam._m0[10u].z;
    float _260 = 1.0 - cbMtdParam._m0[13u].z;
    float _3656 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _262 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    vec4 _280 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _288 = ((_253 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _280.x;
    float _291 = ((_254 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _280.y;
    float _294 = ((_255 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _280.z;
    float _301 = ((_253 - _288) * _262) + _288;
    float _302 = ((_254 - _291) * _262) + _291;
    float _303 = ((_255 - _294) * _262) + _294;
    vec4 _321 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _351 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3667 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _359 = (_352 * ((_321.x * cbMtdParam._m0[11u].x) - _301)) + _301;
    float _360 = (_352 * ((_321.y * cbMtdParam._m0[11u].y) - _302)) + _302;
    float _361 = (_352 * ((_321.z * cbMtdParam._m0[11u].z) - _303)) + _303;
    vec4 _374 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _376 = _374.x;
    float _381 = 1.0 - cbMtdParam._m0[14u].z;
    float _3678 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _385 = _376 - ((_376 * TEXCOORD_5.x) * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))));
    vec4 _399 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _403 = _399.z;
    vec4 _416 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _427 = cbMtdParam._m0[13u].w * _403;
    float _430 = (((((_403 * 2.0) * _416.z) * cbMtdParam._m0[14u].x) - _427) * cbMtdParam._m0[13u].y) + _427;
    vec4 _443 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _458 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_443.z * cbMtdParam._m0[14u].y) - _430)) + _430;
    float _465 = (_399.x * 2.0) + (-1.0);
    float _466 = (_399.y * 2.0) + (-1.0);
    float _467 = dot(vec2(_465, _466), vec2(_465, _466));
    float _3689 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _472 = sqrt(1.0 - (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))));
    float _483 = ((cbMtdParam._m0[13u].x * ((_416.x * 2.0) + (-1.0))) + _465) + ((((_443.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _484 = ((cbMtdParam._m0[13u].x * ((_416.y * 2.0) + (-1.0))) + _466) + ((((_443.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _487 = fma(_472, _212 * NORMAL.x, fma(_484, _219 * TANGENT.x, (_205 * _197) * _483));
    float _490 = fma(_472, _212 * NORMAL.y, fma(_484, _219 * TANGENT.y, (_205 * _198) * _483));
    float _493 = fma(_472, _212 * NORMAL.z, fma(_484, _219 * TANGENT.z, (_205 * _199) * _483));
    float _497 = inversesqrt(dot(vec3(_487, _490, _493), vec3(_487, _490, _493)));
    float _498 = _497 * _487;
    float _499 = _497 * _490;
    float _500 = _497 * _493;
    float _3700 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _501 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _3711 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _3722 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _3733 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3744 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _505 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _521 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _571 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _561);
    float _572 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _561);
    float _573 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _561);
    float _577 = inversesqrt(dot(vec3(_571, _572, _573), vec3(_571, _572, _573)));
    float _578 = _571 * _577;
    float _579 = _572 * _577;
    float _580 = _573 * _577;
    float _586 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _587 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _606 = fma(_500, cbSceneParam._m0[5u].z, fma(_499, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _498));
    float _609 = fma(_500, cbSceneParam._m0[6u].z, fma(_499, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _498));
    float _612 = fma(_500, cbSceneParam._m0[7u].z, fma(_499, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _498));
    uint _625 = uint(roundEven(NORMAL.w)) * 13u;
    uint _627 = (_625 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _633 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) * cbInstanceData._m0[_627].x;
    float _634 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) * cbInstanceData._m0[_627].y;
    float _635 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) * cbInstanceData._m0[_627].z;
    float _3755 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _639 = 1.0 - _505;
    float _640 = _636 * _639;
    float _641 = _637 * _639;
    float _642 = _638 * _639;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _505;
    float _648 = (_637 + (-0.039999999105930328369140625)) * _505;
    float _649 = (_638 + (-0.039999999105930328369140625)) * _505;
    float _650 = _647 + 0.039999999105930328369140625;
    float _652 = _648 + 0.039999999105930328369140625;
    float _653 = _649 + 0.039999999105930328369140625;
    vec4 _662 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _586, cbSceneParam._m0[86u].y * _587));
    float _665 = _662.x * TEXCOORD_5.w;
    float _666 = dot(vec3(_498, _499, _500), vec3(_578, _579, _580));
    float _669 = _666 * 2.0;
    float _673 = (_669 * _498) - _578;
    float _674 = (_669 * _499) - _579;
    float _675 = (_669 * _500) - _580;
    float _679 = abs(dot(vec3(_578, _579, _580), vec3(_498, _499, _500)));
    float _3788 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _681 = sqrt(_501);
    float _694 = exp2((_681 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_681 * 3.0));
    float _700 = (1.0 - _694) * ((_681 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _701 = _694 * _681;
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1039;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _764 = fma(_737, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _729));
        float _768 = fma(_737, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _729));
        float _772 = fma(_737, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _729));
        float _797 = _729 + _498;
        float _798 = _733 + _499;
        float _799 = _737 + _500;
        float _809 = fma(_799, cbModelParam._m0[26u].z, fma(_798, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _797)) - _764;
        float _810 = fma(_799, cbModelParam._m0[27u].z, fma(_798, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _797)) - _768;
        float _811 = fma(_799, cbModelParam._m0[28u].z, fma(_798, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _797)) - _772;
        float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
        float _828 = ((_815 * _809) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_764 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_815 * _810) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_768 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_815 * _811) / cbModelParam._m0[34u].z) + ((((((_772 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        float _867 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_833.x + (-0.5));
        float _869 = _867 * (_833.y + (-0.5));
        float _870 = _867 * (_833.z + (-0.5));
        float _877 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_840.x + (-0.5));
        float _879 = _877 * (_840.y + (-0.5));
        float _880 = _877 * (_840.z + (-0.5));
        float _887 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_847.x + (-0.5));
        float _889 = _887 * (_847.y + (-0.5));
        float _890 = _887 * (_847.z + (-0.5));
        float _897 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_854.x + (-0.5));
        float _899 = _897 * (_854.y + (-0.5));
        float _900 = _897 * (_854.z + (-0.5));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = _868 * 0.5;
        float _905 = _878 * 0.5;
        float _906 = _888 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _921 = (dot(vec3(_498, _499, _500), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _931 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3836 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_933 + 1.0))) + _938) * _901;
        float _948 = _869 * 0.5;
        float _949 = _879 * 0.5;
        float _950 = _889 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_498, _499, _500), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3869 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_975 + 1.0))) + _980) * _902;
        float _990 = _870 * 0.5;
        float _991 = _880 * 0.5;
        float _992 = _890 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_498, _499, _500), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3902 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1017 + 1.0))) + _1022) * _903;
        _1039 = _870;
        _1041 = _869;
        _1042 = _868;
        _1043 = _880;
        _1044 = _879;
        _1045 = _878;
        _1046 = _890;
        _1047 = _889;
        _1048 = _888;
        _1049 = _903;
        _1050 = _902;
        _1051 = _901;
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
    }
    else
    {
        _1039 = _1040;
        _1041 = _1040;
        _1042 = _1040;
        _1043 = _1040;
        _1044 = _1040;
        _1045 = _1040;
        _1046 = _1040;
        _1047 = _1040;
        _1048 = _1040;
        _1049 = _1040;
        _1050 = _1040;
        _1051 = _1040;
        _1052 = 0.0;
        _1053 = 0.0;
        _1054 = 0.0;
    }
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1080 = fma(_737, cbModelParam._m0[30u].z, fma(_733, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _729));
        float _1084 = fma(_737, cbModelParam._m0[31u].z, fma(_733, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _729));
        float _1088 = fma(_737, cbModelParam._m0[32u].z, fma(_733, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _729));
        float _1111 = _729 + _498;
        float _1112 = _733 + _499;
        float _1113 = _737 + _500;
        float _1123 = fma(_1113, cbModelParam._m0[30u].z, fma(_1112, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1111)) - _1080;
        float _1124 = fma(_1113, cbModelParam._m0[31u].z, fma(_1112, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1111)) - _1084;
        float _1125 = fma(_1113, cbModelParam._m0[32u].z, fma(_1112, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1111)) - _1088;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1142 = ((_1129 * _1123) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1080 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1129 * _1124) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1084 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1129 * _1125) / cbModelParam._m0[35u].z) + ((((((_1088 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        float _1179 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1146.x + (-0.5));
        float _1181 = _1179 * (_1146.y + (-0.5));
        float _1182 = _1179 * (_1146.z + (-0.5));
        float _1189 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1153.x + (-0.5));
        float _1191 = _1189 * (_1153.y + (-0.5));
        float _1192 = _1189 * (_1153.z + (-0.5));
        float _1199 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1160.x + (-0.5));
        float _1201 = _1199 * (_1160.y + (-0.5));
        float _1202 = _1199 * (_1160.z + (-0.5));
        float _1209 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1167.x + (-0.5));
        float _1211 = _1209 * (_1167.y + (-0.5));
        float _1212 = _1209 * (_1167.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_498, _499, _500), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3965 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1243 + 1.0))) + _1248) * _1213;
        float _1258 = _1181 * 0.5;
        float _1259 = _1191 * 0.5;
        float _1260 = _1201 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_498, _499, _500), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3998 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1285 + 1.0))) + _1290) * _1214;
        float _1300 = _1182 * 0.5;
        float _1301 = _1192 * 0.5;
        float _1302 = _1202 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_498, _499, _500), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4031 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1327 + 1.0))) + _1332) * _1215;
        _1349 = _1182;
        _1350 = _1181;
        _1351 = _1180;
        _1352 = _1192;
        _1353 = _1191;
        _1354 = _1190;
        _1355 = _1202;
        _1356 = _1201;
        _1357 = _1200;
        _1358 = _1215;
        _1359 = _1214;
        _1360 = _1213;
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
    }
    else
    {
        _1349 = _1040;
        _1350 = _1040;
        _1351 = _1040;
        _1352 = _1040;
        _1353 = _1040;
        _1354 = _1040;
        _1355 = _1040;
        _1356 = _1040;
        _1357 = _1040;
        _1358 = _1040;
        _1359 = _1040;
        _1360 = _1040;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1052)) + _1052;
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1053)) + _1053;
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1054)) + _1054;
    float _1396 = fma(_1375, cbSceneParam._m0[89u].z, fma(_1374, cbSceneParam._m0[89u].y, _1373 * cbSceneParam._m0[89u].x));
    float _1399 = fma(_1375, cbSceneParam._m0[90u].z, fma(_1374, cbSceneParam._m0[90u].y, _1373 * cbSceneParam._m0[90u].x));
    float _1402 = fma(_1375, cbSceneParam._m0[91u].z, fma(_1374, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1373));
    float _1417 = _673 * 0.5;
    float _1418 = _674 * 0.5;
    float _1419 = _675 * 0.5;
    float _1420 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1423 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1426 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1460;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1433 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1039, _1043, _1046, _1049));
        float _1437 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1041, _1044, _1047, _1050));
        float _1441 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1448 = dot(vec4(cbModelParam._m0[39u]), vec4(_1417, _1418, _1419, 1.0));
        _1460 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1460 = 1.0;
    }
    float _1471;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1462 = dot(vec4(cbModelParam._m0[40u]), vec4(_1417, _1418, _1419, 1.0));
        _1471 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1471 = 1.0;
    }
    float _1475 = (_1471 * cbModelParam._m0[1u].x) + (_1460 * (1.0 - cbModelParam._m0[1u].x));
    float _1485 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _501);
    float _1486 = isnan(_1485) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1485 : min(cbModelParam._m0[25u].z, _1485));
    float _1566;
    float _1568;
    float _1570;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1533 = fma(_737, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _729)) + cbModelParam._m0[13u].w;
        float _1537 = fma(_737, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _729)) + cbModelParam._m0[14u].w;
        float _1541 = fma(_737, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _729)) + cbModelParam._m0[15u].w;
        float _1544 = fma(_675, cbModelParam._m0[13u].z, fma(_674, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673));
        float _1547 = fma(_675, cbModelParam._m0[14u].z, fma(_674, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673));
        float _1550 = fma(_675, cbModelParam._m0[15u].z, fma(_674, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673));
        float _1578;
        if (_1544 > 0.0)
        {
            _1578 = abs((1.0 - _1533) / _1544);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1533 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1578 = frontier_phi_14_12_ladder;
        }
        float _1753;
        if (_1547 > 0.0)
        {
            _1753 = abs((1.0 - _1537) / _1547);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1537 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1753 = frontier_phi_23_19_ladder;
        }
        float _2048;
        if (_1550 > 0.0)
        {
            _2048 = abs((1.0 - _1541) / _1550);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1541 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2048 = frontier_phi_35_30_ladder;
        }
        float _2050 = isnan(_1753) ? _1578 : (isnan(_1578) ? _1753 : min(_1578, _1753));
        float _2051 = isnan(_2048) ? _2050 : (isnan(_2050) ? _2048 : min(_2050, _2048));
        float _2055 = (_2051 * _1544) + _1533;
        float _2056 = (_2051 * _1547) + _1537;
        float _2057 = (_2051 * _1550) + _1541;
        float _2058 = _2051 * 9.9999997473787516355514526367188e-05;
        float _2060 = (-1.0) - _2058;
        float _2062 = _2058 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2057 > _2062) || ((_2057 < _2060) || ((_2056 > _2062) || ((_2056 < _2060) || ((_2055 < _2060) || (_2055 > _2062))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2202 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2057, cbModelParam._m0[9u].z, fma(_2056, cbModelParam._m0[9u].y, _2055 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2057, cbModelParam._m0[10u].z, fma(_2056, cbModelParam._m0[10u].y, _2055 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2057, cbModelParam._m0[11u].z, fma(_2056, cbModelParam._m0[11u].y, _2055 * cbModelParam._m0[11u].x))), _1486);
            frontier_phi_13_35_ladder = _2202.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2202.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2202.x * cbModelParam._m0[1u].y;
        }
        _1566 = frontier_phi_13_35_ladder_2;
        _1568 = frontier_phi_13_35_ladder_1;
        _1570 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_673, _674, _675), _1486);
        _1566 = _1554.x * cbModelParam._m0[1u].y;
        _1568 = _1554.y * cbModelParam._m0[1u].y;
        _1570 = _1554.z * cbModelParam._m0[1u].y;
    }
    float _1574 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _501);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1574 : min(cbModelParam._m0[25u].w, _1574));
    float _1668;
    float _1670;
    float _1672;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1632 = fma(_737, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _729)) + cbModelParam._m0[21u].w;
        float _1636 = fma(_737, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _729)) + cbModelParam._m0[22u].w;
        float _1640 = fma(_737, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _729)) + cbModelParam._m0[23u].w;
        float _1643 = fma(_675, cbModelParam._m0[21u].z, fma(_674, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673));
        float _1646 = fma(_675, cbModelParam._m0[22u].z, fma(_674, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673));
        float _1649 = fma(_675, cbModelParam._m0[23u].z, fma(_674, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673));
        float _1758;
        if (_1643 > 0.0)
        {
            _1758 = abs((1.0 - _1632) / _1643);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1632 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1758 = frontier_phi_25_21_ladder;
        }
        float _2075;
        if (_1646 > 0.0)
        {
            _2075 = abs((1.0 - _1636) / _1646);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1636 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2075 = frontier_phi_37_32_ladder;
        }
        float _2413;
        if (_1649 > 0.0)
        {
            _2413 = abs((1.0 - _1640) / _1649);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1640 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2413 = frontier_phi_47_44_ladder;
        }
        float _2415 = isnan(_2075) ? _1758 : (isnan(_1758) ? _2075 : min(_1758, _2075));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1643) + _1632;
        float _2421 = (_2416 * _1646) + _1636;
        float _2422 = (_2416 * _1649) + _1640;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2423;
        float _2426 = _2423 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2422 > _2426) || ((_2422 < _2424) || ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 < _2424) || (_2420 > _2426))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2544 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2422, cbModelParam._m0[17u].z, fma(_2421, cbModelParam._m0[17u].y, _2420 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2422, cbModelParam._m0[18u].z, fma(_2421, cbModelParam._m0[18u].y, _2420 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2422, cbModelParam._m0[19u].z, fma(_2421, cbModelParam._m0[19u].y, _2420 * cbModelParam._m0[19u].x))), _1575);
            frontier_phi_22_47_ladder = _2544.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2544.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2544.x * cbModelParam._m0[1u].z;
        }
        _1668 = frontier_phi_22_47_ladder_2;
        _1670 = frontier_phi_22_47_ladder_1;
        _1672 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_673, _674, _675), _1575);
        _1668 = _1652.x * cbModelParam._m0[1u].z;
        _1670 = _1652.y * cbModelParam._m0[1u].z;
        _1672 = _1652.z * cbModelParam._m0[1u].z;
    }
    float _1685 = (((_700 * _650) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1668 - _1566)) + _1566);
    float _1687 = (((_700 * _652) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1670 - _1568)) + _1568);
    float _1689 = (((_700 * _653) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1672 - _1570)) + _1570);
    float _1692 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1687, cbSceneParam._m0[89u].y, _1685 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1687, cbSceneParam._m0[90u].y, _1685 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1687, cbSceneParam._m0[91u].y, _1685 * cbSceneParam._m0[91u].x));
    float _1732 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1736 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1740 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1744 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1745 = _1732 / _1744;
    float _1746 = _1736 / _1744;
    float _1747 = _1740 / _1744;
    float _1894;
    float _1895;
    float _1896;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1774 = ((uint(_1747 > cbSceneParam._m0[59u].y) + uint(_1747 > cbSceneParam._m0[59u].x)) + uint(_1747 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1775 = _1774 + 43u;
        uint _1783 = _1774 + 44u;
        uint _1791 = _1774 + 45u;
        uint _1799 = _1774 + 46u;
        float _1810 = fma(_1744, cbSceneParam._m0[_1775].w, fma(_1740, cbSceneParam._m0[_1775].z, fma(_1736, cbSceneParam._m0[_1775].y, _1732 * cbSceneParam._m0[_1775].x)));
        float _1814 = fma(_1744, cbSceneParam._m0[_1783].w, fma(_1740, cbSceneParam._m0[_1783].z, fma(_1736, cbSceneParam._m0[_1783].y, _1732 * cbSceneParam._m0[_1783].x)));
        float _1822 = fma(_1744, cbSceneParam._m0[_1799].w, fma(_1740, cbSceneParam._m0[_1799].z, fma(_1736, cbSceneParam._m0[_1799].y, _1732 * cbSceneParam._m0[_1799].x)));
        float _1827 = cbSceneParam._m0[33u].z * _1822;
        float _1829 = cbSceneParam._m0[33u].w * _1822;
        float _1832 = fma(_1744, cbSceneParam._m0[_1791].w, fma(_1740, cbSceneParam._m0[_1791].z, fma(_1736, cbSceneParam._m0[_1791].y, _1732 * cbSceneParam._m0[_1791].x))) / _1822;
        float _1880 = (cbSceneParam._m0[33u].x - sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747))) * cbSceneParam._m0[33u].y;
        float _4157 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1887 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1827 + _1810) / _1822, (_1829 + _1814) / _1822), _1832), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1829 + _1810) / _1822, (_1814 - _1827) / _1822), _1832), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1810 - _1827) / _1822, (_1814 - _1829) / _1822), _1832), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1810 - _1829) / _1822, (_1827 + _1814) / _1822), _1832), 0.0)).x), vec4(0.25)));
        _1894 = 1.0 - (_1887 * cbSceneParam._m0[34u].x);
        _1895 = 1.0 - (_1887 * cbSceneParam._m0[34u].y);
        _1896 = 1.0 - (_1887 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1894 = 1.0;
        _1895 = 1.0;
        _1896 = 1.0;
    }
    float _1960;
    float _1962;
    float _1964;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1948 = fma(_1744, cbSceneParam._m0[63u].w, fma(_1740, cbSceneParam._m0[63u].z, fma(_1736, cbSceneParam._m0[63u].y, _1732 * cbSceneParam._m0[63u].x)));
        float _1949 = fma(_1744, cbSceneParam._m0[60u].w, fma(_1740, cbSceneParam._m0[60u].z, fma(_1736, cbSceneParam._m0[60u].y, _1732 * cbSceneParam._m0[60u].x))) / _1948;
        float _1950 = fma(_1744, cbSceneParam._m0[61u].w, fma(_1740, cbSceneParam._m0[61u].z, fma(_1736, cbSceneParam._m0[61u].y, _1732 * cbSceneParam._m0[61u].x))) / _1948;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1949 >= cbSceneParam._m0[64u].x) && (_1950 >= cbSceneParam._m0[64u].y)) && (_1949 <= cbSceneParam._m0[64u].z)) && (_1950 <= cbSceneParam._m0[64u].w))
        {
            float _2088 = fma(_1744, cbSceneParam._m0[62u].w, fma(_1740, cbSceneParam._m0[62u].z, fma(_1736, cbSceneParam._m0[62u].y, _1732 * cbSceneParam._m0[62u].x))) / _1948;
            float _2092 = isnan(cbSceneParam._m0[41u].w) ? _2088 : (isnan(_2088) ? cbSceneParam._m0[41u].w : max(_2088, cbSceneParam._m0[41u].w));
            float _2135 = (cbSceneParam._m0[33u].x - sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747))) * cbSceneParam._m0[33u].y;
            float _4173 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
            float _2142 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1949, cbSceneParam._m0[33u].w + _1950), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1949, _1950 - cbSceneParam._m0[33u].z), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1949 - cbSceneParam._m0[33u].z, _1950 - cbSceneParam._m0[33u].w), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1949 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1950), _2092), 0.0)).x), vec4(0.25)));
            float _2146 = 1.0 - (_2142 * cbSceneParam._m0[34u].x);
            float _2147 = 1.0 - (_2142 * cbSceneParam._m0[34u].y);
            float _2148 = 1.0 - (_2142 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2148) ? _1896 : (isnan(_1896) ? _2148 : min(_1896, _2148));
            frontier_phi_34_33_ladder_1 = isnan(_2147) ? _1895 : (isnan(_1895) ? _2147 : min(_1895, _2147));
            frontier_phi_34_33_ladder_2 = isnan(_2146) ? _1894 : (isnan(_1894) ? _2146 : min(_1894, _2146));
        }
        else
        {
            frontier_phi_34_33_ladder = _1896;
            frontier_phi_34_33_ladder_1 = _1895;
            frontier_phi_34_33_ladder_2 = _1894;
        }
        _1960 = frontier_phi_34_33_ladder_2;
        _1962 = frontier_phi_34_33_ladder_1;
        _1964 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1960 = _1894;
        _1962 = _1895;
        _1964 = _1896;
    }
    uvec4 _1969 = floatBitsToUint(cbInstanceData._m0[_625 + 5u]);
    uint _1971 = _1969.x * 14u;
    uint _1972 = _1971 + 13u;
    float _1979 = _665 + (-1.0);
    float _1984 = (cbLight._m0[_1972].x * _1979) + 1.0;
    float _1985 = (cbLight._m0[_1972].y * _1979) + 1.0;
    float _1986 = (cbLight._m0[_1972].z * _1979) + 1.0;
    float _1987 = (cbLight._m0[_1972].w * _1979) + 1.0;
    uint _1988 = _1971 + 5u;
    float _1994 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
    uint _1998 = _1971 + 4u;
    float _2007 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _2011 = _1971 | 1u;
    float _2022 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_498, _499, _500));
    float _2025 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_498, _499, _500));
    float _4209 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _4220 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2030 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.3183098733425140380859375;
    float _2032 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * 0.3183098733425140380859375;
    float _2039 = ((cbLight._m0[_1988].x * _1994) * _2032) + (((cbLight._m0[_1998].x * _1960) * _2007) * _2030);
    float _2040 = ((_1994 * cbLight._m0[_1988].y) * _2032) + (((cbLight._m0[_1998].y * _1962) * _2007) * _2030);
    float _2041 = ((_1994 * cbLight._m0[_1988].z) * _2032) + (((cbLight._m0[_1998].z * _1964) * _2007) * _2030);
    uvec4 _2045 = floatBitsToUint(cbLight._m0[_1971 + 12u]);
    bool _2047 = _2045.x == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2047)
    {
        _2149 = _2039;
        _2151 = _2040;
        _2153 = _2041;
    }
    else
    {
        uint _2157 = _1971 + 6u;
        float _2173 = (dot(vec3(cbLight._m0[_1971 + 2u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _2174 = _2173 * _2173;
        float _4231 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2175 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2176 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2149 = (((cbLight._m0[_2157].x * 0.3183098733425140380859375) * _2175) * _2176) + _2039;
        _2151 = (((cbLight._m0[_2157].y * 0.3183098733425140380859375) * _2175) * _2176) + _2040;
        _2153 = (((cbLight._m0[_2157].z * 0.3183098733425140380859375) * _2175) * _2176) + _2041;
    }
    bool _2156 = _2045.y == 0u;
    float _2211;
    float _2213;
    float _2215;
    if (_2156)
    {
        _2211 = _2149;
        _2213 = _2151;
        _2215 = _2153;
    }
    else
    {
        uint _2384 = _1971 + 7u;
        float _2400 = (dot(vec3(cbLight._m0[_1971 + 3u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _2401 = _2400 * _2400;
        float _4247 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2402 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2403 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2211 = (((cbLight._m0[_2384].x * 0.3183098733425140380859375) * _2402) * _2403) + _2149;
        _2213 = (((cbLight._m0[_2384].y * 0.3183098733425140380859375) * _2402) * _2403) + _2151;
        _2215 = (((cbLight._m0[_2384].z * 0.3183098733425140380859375) * _2402) * _2403) + _2153;
    }
    uint _2218 = _1971 + 8u;
    float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _501) * 0.949999988079071044921875);
    float _2232 = _2231 * _2231;
    float _2233 = cbLight._m0[_1971].x + _578;
    float _2234 = cbLight._m0[_1971].y + _579;
    float _2235 = cbLight._m0[_1971].z + _580;
    float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
    float _2240 = _2239 * _2233;
    float _2241 = _2239 * _2234;
    float _2242 = _2239 * _2235;
    float _2243 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1971].xyz));
    float _4263 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _4274 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _2247 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2248 = dot(vec3(_498, _499, _500), vec3(_2240, _2241, _2242));
    float _4285 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_2240, _2241, _2242));
    float _4296 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2232 * _2232;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2268 = exp2(log2(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * 5.0);
    float _2269 = 0.959999978542327880859375 - _647;
    float _2271 = 0.959999978542327880859375 - _648;
    float _2272 = 0.959999978542327880859375 - _649;
    float _2279 = 1.0 - _2232;
    float _2290 = (0.5 / (((_2247 * ((_2246 * _2279) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2279) + _2232) * _2246))) * _2246;
    float _4307 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    uint _2306 = _1971 + 9u;
    float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _501) * 0.949999988079071044921875);
    float _2318 = _2317 * _2317;
    float _2319 = cbLight._m0[_2011].x + _578;
    float _2320 = cbLight._m0[_2011].y + _579;
    float _2321 = cbLight._m0[_2011].z + _580;
    float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
    float _2326 = _2325 * _2319;
    float _2327 = _2325 * _2320;
    float _2328 = _2325 * _2321;
    float _2329 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2011].xyz));
    float _4318 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2333 = dot(vec3(_498, _499, _500), vec3(_2326, _2327, _2328));
    float _4329 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2337 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2326, _2327, _2328));
    float _4340 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2341 = _2318 * _2318;
    float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
    float _2352 = exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0);
    float _2359 = 1.0 - _2318;
    float _2369 = (0.5 / (((_2247 * ((_2332 * _2359) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2359) + _2318) * _2332))) * _2332;
    float _4351 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2371 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
    float _2381 = (((((_2352 * _2269) + _650) * cbLight._m0[_2306].x) * _2371) * _1994) + ((((cbLight._m0[_2218].x * _1960) * ((_2268 * _2269) + _650)) * _2292) * _2007);
    float _2382 = (((((_2352 * _2271) + _652) * cbLight._m0[_2306].y) * _2371) * _1994) + ((((cbLight._m0[_2218].y * _1962) * ((_2268 * _2271) + _652)) * _2292) * _2007);
    float _2383 = (((((_2352 * _2272) + _653) * cbLight._m0[_2306].z) * _2371) * _1994) + ((((cbLight._m0[_2218].z * _1964) * ((_2268 * _2272) + _653)) * _2292) * _2007);
    float _2439;
    float _2441;
    float _2443;
    if (_2047)
    {
        _2439 = _2381;
        _2441 = _2382;
        _2443 = _2383;
    }
    else
    {
        uint _2445 = _1971 + 2u;
        uint _2449 = _1971 + 10u;
        float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _501) * 0.949999988079071044921875);
        float _2464 = _2463 * _2463;
        float _2465 = cbLight._m0[_2445].x + _578;
        float _2466 = cbLight._m0[_2445].y + _579;
        float _2467 = cbLight._m0[_2445].z + _580;
        float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
        float _2472 = _2471 * _2465;
        float _2473 = _2471 * _2466;
        float _2474 = _2471 * _2467;
        float _2475 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2445].xyz));
        float _4362 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2479 = dot(vec3(_498, _499, _500), vec3(_2472, _2473, _2474));
        float _4373 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2483 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2472, _2473, _2474));
        float _4384 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2487 = _2464 * _2464;
        float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
        float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * 5.0);
        float _2505 = 1.0 - _2464;
        float _2515 = (0.5 / (((_2247 * ((_2478 * _2505) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2505) + _2464) * _2478))) * _2478;
        float _4395 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2517 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
        float _2518 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2439 = (((((_2498 * _2269) + _650) * cbLight._m0[_2449].x) * _2517) * _2518) + _2381;
        _2441 = (((((_2498 * _2271) + _652) * cbLight._m0[_2449].y) * _2517) * _2518) + _2382;
        _2443 = (((((_2498 * _2272) + _653) * cbLight._m0[_2449].z) * _2517) * _2518) + _2383;
    }
    float _2549;
    float _2551;
    float _2553;
    if (_2156)
    {
        _2549 = _2439;
        _2551 = _2441;
        _2553 = _2443;
    }
    else
    {
        uint _2560 = _1971 + 3u;
        uint _2564 = _1971 + 11u;
        float _2578 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2560].w)) * _501) * 0.949999988079071044921875);
        float _2579 = _2578 * _2578;
        float _2580 = cbLight._m0[_2560].x + _578;
        float _2581 = cbLight._m0[_2560].y + _579;
        float _2582 = cbLight._m0[_2560].z + _580;
        float _2586 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
        float _2587 = _2586 * _2580;
        float _2588 = _2586 * _2581;
        float _2589 = _2586 * _2582;
        float _2590 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2560].xyz));
        float _4411 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2594 = dot(vec3(_498, _499, _500), vec3(_2587, _2588, _2589));
        float _4422 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2598 = dot(vec3(cbLight._m0[_2560].xyz), vec3(_2587, _2588, _2589));
        float _4433 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2602 = _2579 * _2579;
        float _2606 = ((_2597 * _2597) * (_2602 + (-1.0))) + 1.0;
        float _2613 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
        float _2620 = 1.0 - _2579;
        float _2630 = (0.5 / (((_2247 * ((_2593 * _2620) + _2579)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2620) + _2579) * _2593))) * _2593;
        float _4444 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2632 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2602 / ((_2606 * _2606) * 3.141590118408203125));
        float _2633 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2549 = (((((_2613 * _2269) + _650) * cbLight._m0[_2564].x) * _2632) * _2633) + _2439;
        _2551 = (((((_2613 * _2271) + _652) * cbLight._m0[_2564].y) * _2632) * _2633) + _2441;
        _2553 = (((((_2613 * _2272) + _653) * cbLight._m0[_2564].z) * _2632) * _2633) + _2443;
    }
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    if (_1969.y == 0u)
    {
        uvec4 _2654 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2655 = _2654.x;
        uint _2666 = uint((float(_2654.y) * floor(float(uint(cbSceneParam._m0[85u].y * _587) / _2655))) + floor(float(uint(cbSceneParam._m0[85u].x * _586) / _2655)));
        float _2676 = (log2(_1747 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2677 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        uint _2680 = uint(isnan(14.0) ? _2677 : (isnan(_2677) ? 14.0 : min(_2677, 14.0)));
        uvec4 _2685 = texelFetch(g_lightClusterGridBuffer, int(((_2680 << 2u) + (_2666 << 6u)) >> 2u));
        uint _2686 = _2685.x;
        uint _2687 = _2654.z;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        if (((((1u << ((_2687 >> 4u) & 15u)) + 4294967295u) & _2686) == 0u) || ((_2687 & 240u) == 0u))
        {
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
        }
        else
        {
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2777;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            uint _2917 = 0u;
            uint _2926;
            bool _2927;
            for (;;)
            {
                _2926 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_2917 << 2u)) >> 2u)).x;
                _2927 = _2926 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2927)
                {
                    frontier_phi_66_pred = _2916;
                    frontier_phi_66_pred_1 = _2915;
                    frontier_phi_66_pred_2 = _2914;
                    frontier_phi_66_pred_3 = _2913;
                    frontier_phi_66_pred_4 = _2912;
                    frontier_phi_66_pred_5 = _2911;
                }
                else
                {
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    uint _3041;
                    _3035 = _2911;
                    _3036 = _2912;
                    _3037 = _2913;
                    _3038 = _2914;
                    _3039 = _2915;
                    _3040 = _2916;
                    _3041 = _2926;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    for (;;)
                    {
                        uint _3045 = uint(findLSB(_3041)) + (_2917 << 5u);
                        uint _3042 = (_3041 + 4294967295u) & _3041;
                        uint _3047 = _3045 * 48u;
                        vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3047)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 3u)).x));
                        uint _3067 = (_3045 * 48u) + 4u;
                        vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 3u)).x));
                        uint _3086 = (_3045 * 48u) + 8u;
                        vec3 _3097 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x));
                        float _3101 = _3061.x - _1745;
                        float _3102 = _3061.y - _1746;
                        float _3103 = _3061.z - _1747;
                        float _3104 = dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103));
                        float _3107 = inversesqrt(_3104);
                        float _3108 = _3107 * _3101;
                        float _3109 = _3107 * _3102;
                        float _3110 = _3107 * _3103;
                        float _3111 = dot(vec3(_606, _609, _612), vec3(_3108, _3109, _3110));
                        float _3116 = 1.0 - (_3104 * _3061.w);
                        float _4470 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3117 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3118 = sqrt(_3104) * _3080.w;
                        float _3121 = 1.39999997615814208984375 / (_3118 + 1.39999997615814208984375);
                        float _3122 = _3121 * _3121;
                        float _3125 = ((1.0 - _3122) * _3111) + _3122;
                        float _3128 = _3118 * _3118;
                        float _3132 = ((isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0))) * _3117) / ((_3128 * 0.699999988079071044921875) + 1.0);
                        float _3136 = (-0.0) - _1745;
                        float _3137 = (-0.0) - _1746;
                        float _3138 = (-0.0) - _1747;
                        float _3142 = inversesqrt(dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138)));
                        float _3143 = _3142 * _3136;
                        float _3144 = _3142 * _3137;
                        float _3145 = _3142 * _3138;
                        float _3152 = exp2(log2(1.0 / ((_3128 * 3.5) + 5.0)) * 0.25);
                        float _3153 = 1.0 - _681;
                        float _3160 = sqrt(1.0 - ((1.0 - (_3153 * _3153)) * (1.0 - (_3152 * _3152))));
                        float _3161 = _3160 * _3160;
                        float _3162 = _3161 * _3161;
                        float _3163 = _3143 + _3108;
                        float _3164 = _3144 + _3109;
                        float _3165 = _3145 + _3110;
                        float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                        float _3173 = dot(vec3(_606, _609, _612), vec3(_3143, _3144, _3145));
                        float _4486 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3176 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3177 = dot(vec3(_606, _609, _612), vec3(_3169 * _3163, _3169 * _3164, _3169 * _3165));
                        float _4497 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3180 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3184 = ((_3180 * _3180) * (_3162 + (-1.0))) + 1.0;
                        float _3185 = _3121 * _3161;
                        float _3186 = _3185 * _3185;
                        float _3189 = ((1.0 - _3186) * _3111) + _3186;
                        float _4508 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3190 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3191 = 1.0 - _3161;
                        float _3201 = (0.5 / (((_3190 * ((_3176 * _3191) + _3161)) + 9.9999999392252902907785028219223e-09) + (((_3190 * _3191) + _3161) * _3176))) * _3190;
                        float _4519 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3212 = (((_3162 * 3.1415927410125732421875) * (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) / ((_3184 * _3184) * ((_3128 * 2.1991131305694580078125) + 3.141590118408203125))) * _3117;
                        _2970 = (_3132 * _3080.x) + _3038;
                        _2971 = (_3132 * _3080.y) + _3039;
                        _2972 = (_3132 * _3080.z) + _3040;
                        _2967 = (_3212 * _3097.x) + _3035;
                        _2968 = (_3212 * _3097.y) + _3036;
                        _2969 = (_3212 * _3097.z) + _3037;
                        if (_3042 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3035 = _2967;
                            _3036 = _2968;
                            _3037 = _2969;
                            _3038 = _2970;
                            _3039 = _2971;
                            _3040 = _2972;
                            _3041 = _3042;
                        }
                    }
                    frontier_phi_66_pred = _2972;
                    frontier_phi_66_pred_1 = _2971;
                    frontier_phi_66_pred_2 = _2970;
                    frontier_phi_66_pred_3 = _2969;
                    frontier_phi_66_pred_4 = _2968;
                    frontier_phi_66_pred_5 = _2967;
                }
                _2777 = frontier_phi_66_pred;
                _2775 = frontier_phi_66_pred_1;
                _2773 = frontier_phi_66_pred_2;
                _2771 = frontier_phi_66_pred_3;
                _2769 = frontier_phi_66_pred_4;
                _2767 = frontier_phi_66_pred_5;
                uint _2918 = _2917 + 1u;
                if (_2918 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2911 = _2767;
                    _2912 = _2769;
                    _2913 = _2771;
                    _2914 = _2773;
                    _2915 = _2775;
                    _2916 = _2777;
                    _2917 = _2918;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
        }
        uvec4 _2780 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2781 = _2780.z;
        uint _2783 = (_2781 >> 8u) & 15u;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        if (((4294967295u << _2783) & _2686) == 0u)
        {
            _2879 = _2766;
            _2881 = _2768;
            _2883 = _2770;
            _2885 = _2772;
            _2887 = _2774;
            _2889 = _2776;
        }
        else
        {
            float _2904 = inversesqrt(dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747)));
            float _2905 = _2904 * _1745;
            float _2906 = _2904 * _1746;
            float _2907 = _2904 * _1747;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2783 < ((_2781 >> 12u) & 15u))
            {
                float _2880;
                float _2882;
                float _2884;
                float _2886;
                float _2888;
                float _2890;
                float _3018 = _2766;
                float _3019 = _2768;
                float _3020 = _2770;
                float _3021 = _2772;
                float _3022 = _2774;
                float _3023 = _2776;
                uint _3024 = _2783;
                uint _3033;
                bool _3034;
                for (;;)
                {
                    _3033 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_3024 << 2u)) >> 2u)).x;
                    _3034 = _3033 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3034)
                    {
                        frontier_phi_72_pred = _3023;
                        frontier_phi_72_pred_1 = _3022;
                        frontier_phi_72_pred_2 = _3021;
                        frontier_phi_72_pred_3 = _3020;
                        frontier_phi_72_pred_4 = _3019;
                        frontier_phi_72_pred_5 = _3018;
                    }
                    else
                    {
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3230 = _3018;
                        float _3231 = _3019;
                        float _3232 = _3020;
                        float _3233 = _3021;
                        float _3234 = _3022;
                        float _3235 = _3023;
                        uint _3236 = _3033;
                        uint _3237;
                        vec4 _3262;
                        float _3263;
                        vec4 _3278;
                        vec3 _3290;
                        vec4 _3306;
                        vec4 _3322;
                        float _3369;
                        bool _3370;
                        for (;;)
                        {
                            uint _3247 = ((_3024 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3236));
                            _3237 = (_3236 + 4294967295u) & _3236;
                            uint _3249 = _3247 * 40u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            _3263 = _3262.w;
                            uint _3265 = (_3247 * 40u) + 4u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3280 = (_3247 * 40u) + 8u;
                            _3290 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x));
                            uint _3293 = (_3247 * 40u) + 16u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3309 = (_3247 * 40u) + 20u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3325 = (_3247 * 40u) + 24u;
                            vec4 _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3344 = (_3247 * 40u) + 28u;
                            vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            _3369 = fma(_1747, _3357.z, fma(_1746, _3357.y, _3357.x * _1745)) + _3357.w;
                            _3370 = !((fma(_1747, _3338.z, fma(_1746, _3338.y, _3338.x * _1745)) + _3338.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3370)
                            {
                                float _3397 = _3262.x - _1745;
                                float _3398 = _3262.y - _1746;
                                float _3399 = _3262.z - _1747;
                                float _3400 = dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399));
                                float _3403 = inversesqrt(_3400);
                                float _3404 = _3403 * _3397;
                                float _3405 = _3403 * _3398;
                                float _3406 = _3403 * _3399;
                                float _3410 = 1.0 - (_3400 / (_3263 * _3263));
                                float _4530 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3411 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3415 = sqrt(_3400) * _3278.w;
                                float _3417 = 1.39999997615814208984375 / (_3415 + 1.39999997615814208984375);
                                float _3418 = _3417 * _3417;
                                float _3421 = ((1.0 - _3418) * dot(vec3(_3404, _3405, _3406), vec3(_606, _609, _612))) + _3418;
                                float _3424 = _3415 * _3415;
                                float _3428 = (fma(_1747, _3306.z, fma(_1746, _3306.y, _3306.x * _1745)) + _3306.w) / _3369;
                                float _3429 = (fma(_1747, _3322.z, fma(_1746, _3322.y, _3322.x * _1745)) + _3322.w) / _3369;
                                float _3433 = 1.0 - dot(vec2(_3428, _3429), vec2(_3428, _3429));
                                float _4546 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3434 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3435 = _3434 * (((isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0))) * _3411) / ((_3424 * 0.699999988079071044921875) + 1.0));
                                float _3447 = exp2(log2(1.0 / ((_3424 * 3.5) + 5.0)) * 0.25);
                                float _3448 = 1.0 - _681;
                                float _3455 = sqrt(1.0 - ((1.0 - (_3448 * _3448)) * (1.0 - (_3447 * _3447))));
                                float _3456 = _3455 * _3455;
                                float _3457 = _3456 * _3456;
                                float _3458 = _3404 - _2905;
                                float _3459 = _3405 - _2906;
                                float _3460 = _3406 - _2907;
                                float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                                float _3468 = dot(vec3(_606, _609, _612), vec3((-0.0) - _2905, (-0.0) - _2906, (-0.0) - _2907));
                                float _4557 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3471 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3472 = dot(vec3(_606, _609, _612), vec3(_3464 * _3458, _3464 * _3459, _3464 * _3460));
                                float _4568 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3475 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3479 = ((_3475 * _3475) * (_3457 + (-1.0))) + 1.0;
                                float _3480 = _3417 * _3456;
                                float _3481 = _3480 * _3480;
                                float _3487 = ((1.0 - _3481) * dot(vec3(_606, _609, _612), vec3(_3404, _3405, _3406))) + _3481;
                                float _4579 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3488 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3489 = 1.0 - _3456;
                                float _3499 = (0.5 / (((_3488 * ((_3471 * _3489) + _3456)) + 9.9999999392252902907785028219223e-09) + (((_3488 * _3489) + _3456) * _3471))) * _3488;
                                float _4590 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3509 = (_3434 * _3411) * (((_3457 * 3.1415927410125732421875) * (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) / ((_3479 * _3479) * ((_3424 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3435 * _3278.y;
                                frontier_phi_78_pred_1 = _3435 * _3278.x;
                                frontier_phi_78_pred_2 = _3509 * _3290.z;
                                frontier_phi_78_pred_3 = _3509 * _3290.y;
                                frontier_phi_78_pred_4 = _3509 * _3290.x;
                                frontier_phi_78_pred_5 = _3435 * _3278.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3517 = frontier_phi_78_pred;
                            _3516 = frontier_phi_78_pred_1;
                            _3515 = frontier_phi_78_pred_2;
                            _3514 = frontier_phi_78_pred_3;
                            _3513 = frontier_phi_78_pred_4;
                            _3518 = frontier_phi_78_pred_5;
                            _3220 = _3516 + _3233;
                            _3221 = _3517 + _3234;
                            _3222 = _3518 + _3235;
                            _3217 = _3513 + _3230;
                            _3218 = _3514 + _3231;
                            _3219 = _3515 + _3232;
                            if (_3237 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3237;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3222;
                        frontier_phi_72_pred_1 = _3221;
                        frontier_phi_72_pred_2 = _3220;
                        frontier_phi_72_pred_3 = _3219;
                        frontier_phi_72_pred_4 = _3218;
                        frontier_phi_72_pred_5 = _3217;
                    }
                    _2890 = frontier_phi_72_pred;
                    _2888 = frontier_phi_72_pred_1;
                    _2886 = frontier_phi_72_pred_2;
                    _2884 = frontier_phi_72_pred_3;
                    _2882 = frontier_phi_72_pred_4;
                    _2880 = frontier_phi_72_pred_5;
                    uint _3025 = _3024 + 1u;
                    if (_3025 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3018 = _2880;
                        _3019 = _2882;
                        _3020 = _2884;
                        _3021 = _2886;
                        _3022 = _2888;
                        _3023 = _2890;
                        _3024 = _3025;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2890;
                frontier_phi_60_61_ladder_1 = _2888;
                frontier_phi_60_61_ladder_2 = _2884;
                frontier_phi_60_61_ladder_3 = _2882;
                frontier_phi_60_61_ladder_4 = _2880;
                frontier_phi_60_61_ladder_5 = _2886;
            }
            else
            {
                frontier_phi_60_61_ladder = _2776;
                frontier_phi_60_61_ladder_1 = _2774;
                frontier_phi_60_61_ladder_2 = _2770;
                frontier_phi_60_61_ladder_3 = _2768;
                frontier_phi_60_61_ladder_4 = _2766;
                frontier_phi_60_61_ladder_5 = _2772;
            }
            _2879 = frontier_phi_60_61_ladder_4;
            _2881 = frontier_phi_60_61_ladder_3;
            _2883 = frontier_phi_60_61_ladder_2;
            _2885 = frontier_phi_60_61_ladder_5;
            _2887 = frontier_phi_60_61_ladder_1;
            _2889 = frontier_phi_60_61_ladder;
        }
        float _2894 = isnan(1.0) ? _665 : (isnan(_665) ? 1.0 : min(_665, 1.0));
        _2699 = (_2894 * _2885) + _2211;
        _2701 = (_2894 * _2887) + _2213;
        _2703 = (_2894 * _2889) + _2215;
        _2705 = ((_2879 * _650) * _2894) + _2549;
        _2707 = ((_2881 * _652) * _2894) + _2551;
        _2709 = ((_2883 * _653) * _2894) + _2553;
    }
    else
    {
        _2699 = _2211;
        _2701 = _2213;
        _2703 = _2215;
        _2705 = _2549;
        _2707 = _2551;
        _2709 = _2553;
    }
    float _4606 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4617 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4628 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    uint _2729 = _625 + 6u;
    float _2737 = _586 / cbSceneParam._m0[86u].x;
    float _2738 = _587 / cbSceneParam._m0[86u].y;
    vec4 _2752 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2737, _2738, (log2((isnan(cbSceneParam._m0[77u].w) ? _521 : (isnan(_521) ? cbSceneParam._m0[77u].w : min(_521, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2754 = _2752.x;
    float _2755 = _2752.y;
    float _2756 = _2752.z;
    float _2757 = _2752.w;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    if (_521 > cbSceneParam._m0[78u].w)
    {
        float _2791 = isnan(_521) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _521 : min(cbSceneParam._m0[80u].w, _521));
        float _2792 = _2791 / _521;
        float _2803 = _2792 * _571;
        float _2804 = _572 * _2792;
        float _2805 = (-0.0) - _2804;
        float _2807 = _2792 * _573;
        float _2809 = (cbSceneParam._m0[77u].w * _2805) / _2791;
        float _2810 = _2809 + cbSceneParam._m0[79u].w;
        float _2811 = cbSceneParam._m0[79u].w - _2804;
        float _2817 = sqrt(((_2803 * _2803) + (_2804 * _2804)) + (_2807 * _2807));
        float _2820 = (1.0 - (cbSceneParam._m0[77u].w / _2791)) * _2817;
        float _2825 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2827 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2980;
        if (abs((_2805 - _2809) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2980 = ((((_2810 > 0.0) ? exp2(_2825 * _2810) : (2.0 - exp2(_2827 * _2810))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2820;
        }
        else
        {
            float _2940 = 1.0 / cbSceneParam._m0[80u].x;
            float _2941 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : max(_2810, _2811));
            float _2942 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : min(_2810, _2811));
            float _2951 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : min(_2941, 0.0));
            float _2952 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : min(_2942, 0.0));
            _2980 = ((abs(_2817 / _2805) * cbSceneParam._m0[80u].y) * ((((_2951 - _2952) * 2.0) - ((exp2(_2825 * (isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0)))) - exp2(_2825 * (isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0))))) * _2940)) - ((exp2(_2827 * _2951) - exp2(_2827 * _2952)) * _2940))) + (_2820 * cbSceneParam._m0[80u].z);
        }
        vec4 _2982 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2737, _2738, 1.0), 0.0);
        float _2991 = exp2((_2980 * (-1.44269502162933349609375)) * (1.0 - _2982.w));
        float _2992 = log2(_2991);
        float _3008 = log2(_2757);
        _2829 = (exp2(_3008 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].x)) * _2982.x) / cbSceneParam._m0[78u].x)) + _2754;
        _2831 = (exp2(_3008 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].y)) * _2982.y) / cbSceneParam._m0[78u].y)) + _2755;
        _2833 = (exp2(_3008 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].z)) * _2982.z) / cbSceneParam._m0[78u].z)) + _2756;
        _2835 = _2991 * _2757;
    }
    else
    {
        _2829 = _2754;
        _2831 = _2755;
        _2833 = _2756;
        _2835 = _2757;
    }
    float _2847 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2848 = _2847 == 3.0;
    float _2849 = log2(_2835);
    float _2856 = exp2(_2849 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2699 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _665))) + ((_2705 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1475)) * cbPerFrame._m0[3u].x));
    float _2857 = exp2(_2849 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2701 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _665))) + ((_2707 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1475)) * cbPerFrame._m0[3u].x));
    float _2858 = exp2(_2849 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2703 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _665))) + ((_2709 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1475)) * cbPerFrame._m0[3u].x));
    float _2867 = (_2847 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2867 * (_2848 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2829)));
    SV_Target.y = _2867 * (_2848 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2831)));
    SV_Target.z = _2867 * (_2848 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2833)));
    SV_Target.w = cbInstanceData._m0[_2729].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2729].w;
}


