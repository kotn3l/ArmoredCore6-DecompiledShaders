#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1080;
float _3492;
float _3493;
float _3494;
float _3495;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _255 = _249.x * cbMtdParam._m0[10u].x;
    float _256 = _249.y * cbMtdParam._m0[10u].y;
    float _257 = _249.z * cbMtdParam._m0[10u].z;
    float _262 = 1.0 - cbMtdParam._m0[13u].z;
    float _3504 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _264 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    vec4 _282 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _290 = ((_255 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _282.x;
    float _293 = ((_256 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _282.y;
    float _296 = ((_257 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _282.z;
    float _303 = ((_255 - _290) * _264) + _290;
    float _304 = ((_256 - _293) * _264) + _293;
    float _305 = ((_257 - _296) * _264) + _296;
    vec4 _323 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _353 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3515 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _361 = (_354 * ((_323.x * cbMtdParam._m0[11u].x) - _303)) + _303;
    float _362 = (_354 * ((_323.y * cbMtdParam._m0[11u].y) - _304)) + _304;
    float _363 = (_354 * ((_323.z * cbMtdParam._m0[11u].z) - _305)) + _305;
    vec4 _376 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _383 = 1.0 - cbMtdParam._m0[14u].z;
    float _3526 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _386 = (_376.x * TEXCOORD_5.x) * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)));
    vec4 _400 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _404 = _400.z;
    vec4 _417 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _428 = cbMtdParam._m0[13u].w * _404;
    float _431 = (((((_404 * 2.0) * _417.z) * cbMtdParam._m0[14u].x) - _428) * cbMtdParam._m0[13u].y) + _428;
    vec4 _444 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _459 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_444.z * cbMtdParam._m0[14u].y) - _431)) + _431;
    float _466 = (_400.x * 2.0) + (-1.0);
    float _467 = (_400.y * 2.0) + (-1.0);
    float _468 = dot(vec2(_466, _467), vec2(_466, _467));
    float _3537 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = sqrt(1.0 - (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))));
    float _484 = ((cbMtdParam._m0[13u].x * ((_417.x * 2.0) + (-1.0))) + _466) + ((((_444.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _485 = ((cbMtdParam._m0[13u].x * ((_417.y * 2.0) + (-1.0))) + _467) + ((((_444.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _488 = fma(_473, _214 * NORMAL.x, fma(_485, _221 * TANGENT.x, (_207 * _199) * _484));
    float _491 = fma(_473, _214 * NORMAL.y, fma(_485, _221 * TANGENT.y, (_207 * _200) * _484));
    float _494 = fma(_473, _214 * NORMAL.z, fma(_485, _221 * TANGENT.z, (_207 * _201) * _484));
    float _498 = inversesqrt(dot(vec3(_488, _491, _494), vec3(_488, _491, _494)));
    float _499 = _498 * _488;
    float _500 = _498 * _491;
    float _501 = _498 * _494;
    float _3548 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _502 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3570 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3581 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _3592 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _506 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _522 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _572 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _562);
    float _573 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _562);
    float _574 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _562);
    float _578 = inversesqrt(dot(vec3(_572, _573, _574), vec3(_572, _573, _574)));
    float _579 = _572 * _578;
    float _580 = _573 * _578;
    float _581 = _574 * _578;
    vec4 _586 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _588 = _586.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _760 = sqrt(((_572 * _572) + (_573 * _573)) + (_574 * _574));
        float _766 = (cbMatDynParam._m0[5u].x * _760) + cbMatDynParam._m0[5u].y;
        float _3603 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _771 = (cbMatDynParam._m0[5u].z * _760) + cbMatDynParam._m0[5u].w;
        float _3614 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) - _767)) + _767) < ((_588 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _599 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _600 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _618 = fma(_501, cbSceneParam._m0[5u].z, fma(_500, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _499));
    float _621 = fma(_501, cbSceneParam._m0[6u].z, fma(_500, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _499));
    float _624 = fma(_501, cbSceneParam._m0[7u].z, fma(_500, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _499));
    uint _637 = uint(roundEven(NORMAL.w)) * 13u;
    uint _638 = _637 + 9u;
    uint _639 = _638 + uint(cbMatDynParam._m0[0u].w);
    float _645 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * cbInstanceData._m0[_639].x;
    float _646 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) * cbInstanceData._m0[_639].y;
    float _647 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * cbInstanceData._m0[_639].z;
    float _3625 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _3636 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _3647 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _651 = 1.0 - _506;
    float _652 = _648 * _651;
    float _653 = _649 * _651;
    float _654 = _650 * _651;
    float _659 = (_648 + (-0.039999999105930328369140625)) * _506;
    float _660 = (_649 + (-0.039999999105930328369140625)) * _506;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _506;
    float _662 = _659 + 0.039999999105930328369140625;
    float _664 = _660 + 0.039999999105930328369140625;
    float _665 = _661 + 0.039999999105930328369140625;
    vec4 _674 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _599, cbSceneParam._m0[86u].y * _600));
    float _677 = _674.x * TEXCOORD_5.w;
    float _678 = dot(vec3(_499, _500, _501), vec3(_579, _580, _581));
    float _681 = _678 * 2.0;
    float _685 = (_681 * _499) - _579;
    float _686 = (_681 * _500) - _580;
    float _687 = (_681 * _501) - _581;
    float _691 = abs(dot(vec3(_579, _580, _581), vec3(_499, _500, _501)));
    float _3658 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _693 = sqrt(_502);
    float _706 = exp2((_693 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_693 * 3.0));
    float _712 = (1.0 - _706) * ((_693 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _713 = _706 * _693;
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1079;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _804 = fma(_749, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741));
        float _808 = fma(_749, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741));
        float _812 = fma(_749, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741));
        float _837 = _741 + _499;
        float _838 = _745 + _500;
        float _839 = _749 + _501;
        float _849 = fma(_839, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837)) - _804;
        float _850 = fma(_839, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837)) - _808;
        float _851 = fma(_839, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837)) - _812;
        float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
        float _868 = ((_855 * _849) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_804 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_855 * _850) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_808 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_855 * _851) / cbModelParam._m0[34u].z) + ((((((_812 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        float _907 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_873.x + (-0.5));
        float _909 = _907 * (_873.y + (-0.5));
        float _910 = _907 * (_873.z + (-0.5));
        float _917 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_880.x + (-0.5));
        float _919 = _917 * (_880.y + (-0.5));
        float _920 = _917 * (_880.z + (-0.5));
        float _927 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_887.x + (-0.5));
        float _929 = _927 * (_887.y + (-0.5));
        float _930 = _927 * (_887.z + (-0.5));
        float _937 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_894.x + (-0.5));
        float _939 = _937 * (_894.y + (-0.5));
        float _940 = _937 * (_894.z + (-0.5));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = _908 * 0.5;
        float _945 = _918 * 0.5;
        float _946 = _928 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _961 = (dot(vec3(_499, _500, _501), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _971 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3706 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_973 + 1.0))) + _978) * _941;
        float _988 = _909 * 0.5;
        float _989 = _919 * 0.5;
        float _990 = _929 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_499, _500, _501), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3739 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1015 + 1.0))) + _1020) * _942;
        float _1030 = _910 * 0.5;
        float _1031 = _920 * 0.5;
        float _1032 = _930 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_499, _500, _501), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3772 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1057 + 1.0))) + _1062) * _943;
        _1079 = _910;
        _1081 = _909;
        _1082 = _908;
        _1083 = _920;
        _1084 = _919;
        _1085 = _918;
        _1086 = _930;
        _1087 = _929;
        _1088 = _928;
        _1089 = _943;
        _1090 = _942;
        _1091 = _941;
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
    }
    else
    {
        _1079 = _1080;
        _1081 = _1080;
        _1082 = _1080;
        _1083 = _1080;
        _1084 = _1080;
        _1085 = _1080;
        _1086 = _1080;
        _1087 = _1080;
        _1088 = _1080;
        _1089 = _1080;
        _1090 = _1080;
        _1091 = _1080;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1123 = fma(_749, cbModelParam._m0[30u].z, fma(_745, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _741));
        float _1127 = fma(_749, cbModelParam._m0[31u].z, fma(_745, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _741));
        float _1131 = fma(_749, cbModelParam._m0[32u].z, fma(_745, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _741));
        float _1154 = _741 + _499;
        float _1155 = _745 + _500;
        float _1156 = _749 + _501;
        float _1166 = fma(_1156, cbModelParam._m0[30u].z, fma(_1155, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154)) - _1123;
        float _1167 = fma(_1156, cbModelParam._m0[31u].z, fma(_1155, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154)) - _1127;
        float _1168 = fma(_1156, cbModelParam._m0[32u].z, fma(_1155, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154)) - _1131;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1123 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1127 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[35u].z) + ((((((_1131 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1222 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1189.x + (-0.5));
        float _1224 = _1222 * (_1189.y + (-0.5));
        float _1225 = _1222 * (_1189.z + (-0.5));
        float _1232 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1196.x + (-0.5));
        float _1234 = _1232 * (_1196.y + (-0.5));
        float _1235 = _1232 * (_1196.z + (-0.5));
        float _1242 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1203.x + (-0.5));
        float _1244 = _1242 * (_1203.y + (-0.5));
        float _1245 = _1242 * (_1203.z + (-0.5));
        float _1252 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1210.x + (-0.5));
        float _1254 = _1252 * (_1210.y + (-0.5));
        float _1255 = _1252 * (_1210.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_499, _500, _501), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3835 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1286 + 1.0))) + _1291) * _1256;
        float _1301 = _1224 * 0.5;
        float _1302 = _1234 * 0.5;
        float _1303 = _1244 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_499, _500, _501), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3868 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1328 + 1.0))) + _1333) * _1257;
        float _1343 = _1225 * 0.5;
        float _1344 = _1235 * 0.5;
        float _1345 = _1245 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_499, _500, _501), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3901 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1370 + 1.0))) + _1375) * _1258;
        _1392 = _1225;
        _1393 = _1224;
        _1394 = _1223;
        _1395 = _1235;
        _1396 = _1234;
        _1397 = _1233;
        _1398 = _1245;
        _1399 = _1244;
        _1400 = _1243;
        _1401 = _1258;
        _1402 = _1257;
        _1403 = _1256;
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1080;
        _1393 = _1080;
        _1394 = _1080;
        _1395 = _1080;
        _1396 = _1080;
        _1397 = _1080;
        _1398 = _1080;
        _1399 = _1080;
        _1400 = _1080;
        _1401 = _1080;
        _1402 = _1080;
        _1403 = _1080;
        _1404 = 0.0;
        _1405 = 0.0;
        _1406 = 0.0;
    }
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1092)) + _1092;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1093)) + _1093;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1094)) + _1094;
    float _1439 = fma(_1418, cbSceneParam._m0[89u].z, fma(_1417, cbSceneParam._m0[89u].y, _1416 * cbSceneParam._m0[89u].x));
    float _1442 = fma(_1418, cbSceneParam._m0[90u].z, fma(_1417, cbSceneParam._m0[90u].y, _1416 * cbSceneParam._m0[90u].x));
    float _1445 = fma(_1418, cbSceneParam._m0[91u].z, fma(_1417, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1416));
    float _1460 = _685 * 0.5;
    float _1461 = _686 * 0.5;
    float _1462 = _687 * 0.5;
    float _1463 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1466 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1469 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1503;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1476 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1079, _1083, _1086, _1089));
        float _1480 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1484 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1491 = dot(vec4(cbModelParam._m0[39u]), vec4(_1460, _1461, _1462, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1514;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1505 = dot(vec4(cbModelParam._m0[40u]), vec4(_1460, _1461, _1462, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1518 = (_1514 * cbModelParam._m0[1u].x) + (_1503 * (1.0 - cbModelParam._m0[1u].x));
    float _1528 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _502);
    float _1529 = isnan(_1528) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1528 : min(cbModelParam._m0[25u].z, _1528));
    float _1609;
    float _1611;
    float _1613;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1576 = fma(_749, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _741)) + cbModelParam._m0[13u].w;
        float _1580 = fma(_749, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _741)) + cbModelParam._m0[14u].w;
        float _1584 = fma(_749, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _741)) + cbModelParam._m0[15u].w;
        float _1587 = fma(_687, cbModelParam._m0[13u].z, fma(_686, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _685));
        float _1590 = fma(_687, cbModelParam._m0[14u].z, fma(_686, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _685));
        float _1593 = fma(_687, cbModelParam._m0[15u].z, fma(_686, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _685));
        float _1621;
        if (_1587 > 0.0)
        {
            _1621 = abs((1.0 - _1576) / _1587);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1576 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1621 = frontier_phi_17_15_ladder;
        }
        float _1849;
        if (_1590 > 0.0)
        {
            _1849 = abs((1.0 - _1580) / _1590);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1580 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1849 = frontier_phi_26_22_ladder;
        }
        float _2106;
        if (_1593 > 0.0)
        {
            _2106 = abs((1.0 - _1584) / _1593);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1584 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2106 = frontier_phi_38_33_ladder;
        }
        float _2108 = isnan(_1849) ? _1621 : (isnan(_1621) ? _1849 : min(_1621, _1849));
        float _2109 = isnan(_2106) ? _2108 : (isnan(_2108) ? _2106 : min(_2108, _2106));
        float _2113 = (_2109 * _1587) + _1576;
        float _2114 = (_2109 * _1590) + _1580;
        float _2115 = (_2109 * _1593) + _1584;
        float _2116 = _2109 * 9.9999997473787516355514526367188e-05;
        float _2118 = (-1.0) - _2116;
        float _2120 = _2116 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2115 > _2120) || ((_2115 < _2118) || ((_2114 > _2120) || ((_2114 < _2118) || ((_2113 < _2118) || (_2113 > _2120))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2115, cbModelParam._m0[9u].z, fma(_2114, cbModelParam._m0[9u].y, _2113 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2115, cbModelParam._m0[10u].z, fma(_2114, cbModelParam._m0[10u].y, _2113 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2115, cbModelParam._m0[11u].z, fma(_2114, cbModelParam._m0[11u].y, _2113 * cbModelParam._m0[11u].x))), _1529);
            frontier_phi_16_38_ladder = _2243.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2243.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2243.x * cbModelParam._m0[1u].y;
        }
        _1609 = frontier_phi_16_38_ladder_2;
        _1611 = frontier_phi_16_38_ladder_1;
        _1613 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1597 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_685, _686, _687), _1529);
        _1609 = _1597.x * cbModelParam._m0[1u].y;
        _1611 = _1597.y * cbModelParam._m0[1u].y;
        _1613 = _1597.z * cbModelParam._m0[1u].y;
    }
    float _1617 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _502);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1617 : min(cbModelParam._m0[25u].w, _1617));
    float _1711;
    float _1713;
    float _1715;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1675 = fma(_749, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _741)) + cbModelParam._m0[21u].w;
        float _1679 = fma(_749, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _741)) + cbModelParam._m0[22u].w;
        float _1683 = fma(_749, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _741)) + cbModelParam._m0[23u].w;
        float _1686 = fma(_687, cbModelParam._m0[21u].z, fma(_686, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _685));
        float _1689 = fma(_687, cbModelParam._m0[22u].z, fma(_686, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _685));
        float _1692 = fma(_687, cbModelParam._m0[23u].z, fma(_686, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _685));
        float _1854;
        if (_1686 > 0.0)
        {
            _1854 = abs((1.0 - _1675) / _1686);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1675 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1854 = frontier_phi_28_24_ladder;
        }
        float _2133;
        if (_1689 > 0.0)
        {
            _2133 = abs((1.0 - _1679) / _1689);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1679 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2133 = frontier_phi_40_35_ladder;
        }
        float _2346;
        if (_1692 > 0.0)
        {
            _2346 = abs((1.0 - _1683) / _1692);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1683 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2346 = frontier_phi_49_46_ladder;
        }
        float _2348 = isnan(_2133) ? _1854 : (isnan(_1854) ? _2133 : min(_1854, _2133));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1686) + _1675;
        float _2354 = (_2349 * _1689) + _1679;
        float _2355 = (_2349 * _1692) + _1683;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2357 = (-1.0) - _2356;
        float _2359 = _2356 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2355 > _2359) || ((_2355 < _2357) || ((_2354 > _2359) || ((_2354 < _2357) || ((_2353 < _2357) || (_2353 > _2359))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2355, cbModelParam._m0[17u].z, fma(_2354, cbModelParam._m0[17u].y, _2353 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2355, cbModelParam._m0[18u].z, fma(_2354, cbModelParam._m0[18u].y, _2353 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2355, cbModelParam._m0[19u].z, fma(_2354, cbModelParam._m0[19u].y, _2353 * cbModelParam._m0[19u].x))), _1618);
            frontier_phi_25_49_ladder = _2554.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2554.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2554.x * cbModelParam._m0[1u].z;
        }
        _1711 = frontier_phi_25_49_ladder_2;
        _1713 = frontier_phi_25_49_ladder_1;
        _1715 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1695 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_685, _686, _687), _1618);
        _1711 = _1695.x * cbModelParam._m0[1u].z;
        _1713 = _1695.y * cbModelParam._m0[1u].z;
        _1715 = _1695.z * cbModelParam._m0[1u].z;
    }
    float _1728 = (((_712 * _662) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1711 - _1609)) + _1609);
    float _1730 = (((_712 * _664) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1713 - _1611)) + _1611);
    float _1732 = (((_712 * _665) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1715 - _1613)) + _1613);
    float _1735 = fma(_1732, cbSceneParam._m0[89u].z, fma(_1730, cbSceneParam._m0[89u].y, _1728 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1732, cbSceneParam._m0[90u].z, fma(_1730, cbSceneParam._m0[90u].y, _1728 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1732, cbSceneParam._m0[91u].z, fma(_1730, cbSceneParam._m0[91u].y, _1728 * cbSceneParam._m0[91u].x));
    vec4 _1749 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_599, _600));
    float _1751 = _1749.w;
    float _1763 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1751);
    float _1764 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1751);
    float _1765 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1751);
    uvec4 _1769 = floatBitsToUint(cbInstanceData._m0[_637 + 5u]);
    uint _1771 = _1769.x * 14u;
    uint _1772 = _1771 + 13u;
    float _1779 = _677 + (-1.0);
    float _1784 = (cbLight._m0[_1772].x * _1779) + 1.0;
    float _1785 = (cbLight._m0[_1772].y * _1779) + 1.0;
    float _1786 = (cbLight._m0[_1772].z * _1779) + 1.0;
    float _1787 = (cbLight._m0[_1772].w * _1779) + 1.0;
    uint _1788 = _1771 + 5u;
    float _1794 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
    uint _1798 = _1771 + 4u;
    float _1808 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
    uint _1812 = _1771 | 1u;
    float _1823 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_499, _500, _501));
    float _1826 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_499, _500, _501));
    float _4037 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _4048 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1831 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.3183098733425140380859375;
    float _1833 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 0.3183098733425140380859375;
    float _1840 = ((cbLight._m0[_1788].x * _1794) * _1833) + (((cbLight._m0[_1798].x * _1763) * _1808) * _1831);
    float _1841 = ((_1794 * cbLight._m0[_1788].y) * _1833) + (((cbLight._m0[_1798].y * _1764) * _1808) * _1831);
    float _1842 = ((_1794 * cbLight._m0[_1788].z) * _1833) + (((cbLight._m0[_1798].z * _1765) * _1808) * _1831);
    uvec4 _1846 = floatBitsToUint(cbLight._m0[_1771 + 12u]);
    bool _1848 = _1846.x == 0u;
    float _1859;
    float _1861;
    float _1863;
    if (_1848)
    {
        _1859 = _1840;
        _1861 = _1841;
        _1863 = _1842;
    }
    else
    {
        uint _1867 = _1771 + 6u;
        float _1883 = (dot(vec3(cbLight._m0[_1771 + 2u].xyz), vec3(_499, _500, _501)) * 0.5) + 0.5;
        float _1884 = _1883 * _1883;
        float _4059 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1885 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1886 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _1859 = (((cbLight._m0[_1867].x * 0.3183098733425140380859375) * _1885) * _1886) + _1840;
        _1861 = (((cbLight._m0[_1867].y * 0.3183098733425140380859375) * _1885) * _1886) + _1841;
        _1863 = (((cbLight._m0[_1867].z * 0.3183098733425140380859375) * _1885) * _1886) + _1842;
    }
    bool _1866 = _1846.y == 0u;
    float _1904;
    float _1906;
    float _1908;
    if (_1866)
    {
        _1904 = _1859;
        _1906 = _1861;
        _1908 = _1863;
    }
    else
    {
        uint _2077 = _1771 + 7u;
        float _2093 = (dot(vec3(cbLight._m0[_1771 + 3u].xyz), vec3(_499, _500, _501)) * 0.5) + 0.5;
        float _2094 = _2093 * _2093;
        float _4075 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2095 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2096 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _1904 = (((cbLight._m0[_2077].x * 0.3183098733425140380859375) * _2095) * _2096) + _1859;
        _1906 = (((cbLight._m0[_2077].y * 0.3183098733425140380859375) * _2095) * _2096) + _1861;
        _1908 = (((cbLight._m0[_2077].z * 0.3183098733425140380859375) * _2095) * _2096) + _1863;
    }
    uint _1911 = _1771 + 8u;
    float _1924 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _502) * 0.949999988079071044921875);
    float _1925 = _1924 * _1924;
    float _1926 = cbLight._m0[_1771].x + _579;
    float _1927 = cbLight._m0[_1771].y + _580;
    float _1928 = cbLight._m0[_1771].z + _581;
    float _1932 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
    float _1933 = _1932 * _1926;
    float _1934 = _1932 * _1927;
    float _1935 = _1932 * _1928;
    float _1936 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_1771].xyz));
    float _4091 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _1940 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _1941 = dot(vec3(_499, _500, _501), vec3(_1933, _1934, _1935));
    float _4113 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _1945 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1933, _1934, _1935));
    float _4124 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1949 = _1925 * _1925;
    float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
    float _1961 = exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0);
    float _1962 = 0.959999978542327880859375 - _659;
    float _1964 = 0.959999978542327880859375 - _660;
    float _1965 = 0.959999978542327880859375 - _661;
    float _1972 = 1.0 - _1925;
    float _1983 = (0.5 / (((_1940 * ((_1939 * _1972) + _1925)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _1972) + _1925) * _1939))) * _1939;
    float _4135 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1985 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
    uint _1999 = _1771 + 9u;
    float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _502) * 0.949999988079071044921875);
    float _2011 = _2010 * _2010;
    float _2012 = cbLight._m0[_1812].x + _579;
    float _2013 = cbLight._m0[_1812].y + _580;
    float _2014 = cbLight._m0[_1812].z + _581;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2019 = _2018 * _2012;
    float _2020 = _2018 * _2013;
    float _2021 = _2018 * _2014;
    float _2022 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_1812].xyz));
    float _4146 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2026 = dot(vec3(_499, _500, _501), vec3(_2019, _2020, _2021));
    float _4157 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2030 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_2019, _2020, _2021));
    float _4168 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2034 = _2011 * _2011;
    float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
    float _2045 = exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0);
    float _2052 = 1.0 - _2011;
    float _2062 = (0.5 / (((_1940 * ((_2025 * _2052) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2052) + _2011) * _2025))) * _2025;
    float _4179 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
    float _2074 = (((((_2045 * _1962) + _662) * cbLight._m0[_1999].x) * _2064) * _1794) + ((((cbLight._m0[_1911].x * _1763) * ((_1961 * _1962) + _662)) * _1985) * _1808);
    float _2075 = (((((_2045 * _1964) + _664) * cbLight._m0[_1999].y) * _2064) * _1794) + ((((cbLight._m0[_1911].y * _1764) * ((_1961 * _1964) + _664)) * _1985) * _1808);
    float _2076 = (((((_2045 * _1965) + _665) * cbLight._m0[_1999].z) * _2064) * _1794) + ((((cbLight._m0[_1911].z * _1765) * ((_1961 * _1965) + _665)) * _1985) * _1808);
    float _2138;
    float _2140;
    float _2142;
    if (_1848)
    {
        _2138 = _2074;
        _2140 = _2075;
        _2142 = _2076;
    }
    else
    {
        uint _2144 = _1771 + 2u;
        uint _2148 = _1771 + 10u;
        float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _502) * 0.949999988079071044921875);
        float _2163 = _2162 * _2162;
        float _2164 = cbLight._m0[_2144].x + _579;
        float _2165 = cbLight._m0[_2144].y + _580;
        float _2166 = cbLight._m0[_2144].z + _581;
        float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
        float _2171 = _2170 * _2164;
        float _2172 = _2170 * _2165;
        float _2173 = _2170 * _2166;
        float _2174 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_2144].xyz));
        float _4190 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2177 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2178 = dot(vec3(_499, _500, _501), vec3(_2171, _2172, _2173));
        float _4201 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2181 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2182 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2171, _2172, _2173));
        float _4212 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2186 = _2163 * _2163;
        float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
        float _2197 = exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0);
        float _2204 = 1.0 - _2163;
        float _2214 = (0.5 / (((_1940 * ((_2177 * _2204) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2204) + _2163) * _2177))) * _2177;
        float _4223 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2216 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
        float _2217 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _2138 = (((((_2197 * _1962) + _662) * cbLight._m0[_2148].x) * _2216) * _2217) + _2074;
        _2140 = (((((_2197 * _1964) + _664) * cbLight._m0[_2148].y) * _2216) * _2217) + _2075;
        _2142 = (((((_2197 * _1965) + _665) * cbLight._m0[_2148].z) * _2216) * _2217) + _2076;
    }
    float _2252;
    float _2254;
    float _2256;
    if (_1866)
    {
        _2252 = _2138;
        _2254 = _2140;
        _2256 = _2142;
    }
    else
    {
        uint _2263 = _1771 + 3u;
        uint _2267 = _1771 + 11u;
        float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _502) * 0.949999988079071044921875);
        float _2282 = _2281 * _2281;
        float _2283 = cbLight._m0[_2263].x + _579;
        float _2284 = cbLight._m0[_2263].y + _580;
        float _2285 = cbLight._m0[_2263].z + _581;
        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
        float _2290 = _2289 * _2283;
        float _2291 = _2289 * _2284;
        float _2292 = _2289 * _2285;
        float _2293 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_2263].xyz));
        float _4239 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2297 = dot(vec3(_499, _500, _501), vec3(_2290, _2291, _2292));
        float _4250 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2301 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2290, _2291, _2292));
        float _4261 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2305 = _2282 * _2282;
        float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
        float _2316 = exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0);
        float _2323 = 1.0 - _2282;
        float _2333 = (0.5 / (((_1940 * ((_2296 * _2323) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2323) + _2282) * _2296))) * _2296;
        float _4272 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2335 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
        float _2336 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _2252 = (((((_2316 * _1962) + _662) * cbLight._m0[_2267].x) * _2335) * _2336) + _2138;
        _2254 = (((((_2316 * _1964) + _664) * cbLight._m0[_2267].y) * _2335) * _2336) + _2140;
        _2256 = (((((_2316 * _1965) + _665) * cbLight._m0[_2267].z) * _2335) * _2336) + _2142;
    }
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    if (_1769.y == 0u)
    {
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2411;
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2411;
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2411;
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.x;
        uint _2438 = uint((float(_2426.y) * floor(float(uint(cbSceneParam._m0[85u].y * _600) / _2427))) + floor(float(uint(cbSceneParam._m0[85u].x * _599) / _2427)));
        float _2448 = (log2(_2414 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2449 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        uint _2452 = uint(isnan(14.0) ? _2449 : (isnan(_2449) ? 14.0 : min(_2449, 14.0)));
        uvec4 _2457 = texelFetch(g_lightClusterGridBuffer, int(((_2452 << 2u) + (_2438 << 6u)) >> 2u));
        uint _2458 = _2457.x;
        uint _2459 = _2426.z;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        if (((((1u << ((_2459 >> 4u) & 15u)) + 4294967295u) & _2458) == 0u) || ((_2459 & 240u) == 0u))
        {
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
        }
        else
        {
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            uint _2718 = 0u;
            uint _2727;
            bool _2728;
            for (;;)
            {
                _2727 = texelFetch(g_lightClassification, int((((_2452 << 5u) + (_2438 << 9u)) + (_2718 << 2u)) >> 2u)).x;
                _2728 = _2727 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2728)
                {
                    frontier_phi_66_pred = _2712;
                    frontier_phi_66_pred_1 = _2717;
                    frontier_phi_66_pred_2 = _2716;
                    frontier_phi_66_pred_3 = _2715;
                    frontier_phi_66_pred_4 = _2714;
                    frontier_phi_66_pred_5 = _2713;
                }
                else
                {
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    uint _2863;
                    _2857 = _2712;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2727;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    for (;;)
                    {
                        uint _2867 = uint(findLSB(_2863)) + (_2718 << 5u);
                        uint _2864 = (_2863 + 4294967295u) & _2863;
                        uint _2869 = _2867 * 48u;
                        vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2889 = (_2867 * 48u) + 4u;
                        vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 3u)).x));
                        uint _2908 = (_2867 * 48u) + 8u;
                        vec3 _2919 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x));
                        float _2923 = _2883.x - _2412;
                        float _2924 = _2883.y - _2413;
                        float _2925 = _2883.z - _2414;
                        float _2926 = dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925));
                        float _2929 = inversesqrt(_2926);
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2933 = dot(vec3(_618, _621, _624), vec3(_2930, _2931, _2932));
                        float _2938 = 1.0 - (_2926 * _2883.w);
                        float _4298 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2939 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                        float _2940 = sqrt(_2926) * _2902.w;
                        float _2943 = 1.39999997615814208984375 / (_2940 + 1.39999997615814208984375);
                        float _2944 = _2943 * _2943;
                        float _2947 = ((1.0 - _2944) * _2933) + _2944;
                        float _2950 = _2940 * _2940;
                        float _2954 = ((isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0))) * _2939) / ((_2950 * 0.699999988079071044921875) + 1.0);
                        float _2958 = (-0.0) - _2412;
                        float _2959 = (-0.0) - _2413;
                        float _2960 = (-0.0) - _2414;
                        float _2964 = inversesqrt(dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960)));
                        float _2965 = _2964 * _2958;
                        float _2966 = _2964 * _2959;
                        float _2967 = _2964 * _2960;
                        float _2975 = exp2(log2(1.0 / ((_2950 * 3.5) + 5.0)) * 0.25);
                        float _2976 = 1.0 - _693;
                        float _2983 = sqrt(1.0 - ((1.0 - (_2976 * _2976)) * (1.0 - (_2975 * _2975))));
                        float _2984 = _2983 * _2983;
                        float _2985 = _2984 * _2984;
                        float _2986 = _2965 + _2930;
                        float _2987 = _2966 + _2931;
                        float _2988 = _2967 + _2932;
                        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                        float _2996 = dot(vec3(_618, _621, _624), vec3(_2965, _2966, _2967));
                        float _4314 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2999 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _3000 = dot(vec3(_618, _621, _624), vec3(_2992 * _2986, _2992 * _2987, _2992 * _2988));
                        float _4325 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3003 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3007 = ((_3003 * _3003) * (_2985 + (-1.0))) + 1.0;
                        float _3008 = _2943 * _2984;
                        float _3009 = _3008 * _3008;
                        float _3012 = ((1.0 - _3009) * _2933) + _3009;
                        float _4336 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3013 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3014 = 1.0 - _2984;
                        float _3024 = (0.5 / (((_3013 * ((_2999 * _3014) + _2984)) + 9.9999999392252902907785028219223e-09) + (((_3013 * _3014) + _2984) * _2999))) * _3013;
                        float _4347 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3035 = (((_2985 * 3.1415927410125732421875) * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) / ((_3007 * _3007) * ((_2950 * 2.1991131305694580078125) + 3.141590118408203125))) * _2939;
                        _2787 = (_2954 * _2902.x) + _2860;
                        _2788 = (_2954 * _2902.y) + _2861;
                        _2789 = (_2954 * _2902.z) + _2862;
                        _2784 = (_3035 * _2919.x) + _2857;
                        _2785 = (_3035 * _2919.y) + _2858;
                        _2786 = (_3035 * _2919.z) + _2859;
                        if (_2864 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2857 = _2784;
                            _2858 = _2785;
                            _2859 = _2786;
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2789;
                            _2863 = _2864;
                        }
                    }
                    frontier_phi_66_pred = _2784;
                    frontier_phi_66_pred_1 = _2789;
                    frontier_phi_66_pred_2 = _2788;
                    frontier_phi_66_pred_3 = _2787;
                    frontier_phi_66_pred_4 = _2786;
                    frontier_phi_66_pred_5 = _2785;
                }
                _2560 = frontier_phi_66_pred;
                _2570 = frontier_phi_66_pred_1;
                _2568 = frontier_phi_66_pred_2;
                _2566 = frontier_phi_66_pred_3;
                _2564 = frontier_phi_66_pred_4;
                _2562 = frontier_phi_66_pred_5;
                uint _2719 = _2718 + 1u;
                if (_2719 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2712 = _2560;
                    _2713 = _2562;
                    _2714 = _2564;
                    _2715 = _2566;
                    _2716 = _2568;
                    _2717 = _2570;
                    _2718 = _2719;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
        }
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.z;
        uint _2576 = (_2574 >> 8u) & 15u;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        if (((4294967295u << _2576) & _2458) == 0u)
        {
            _2680 = _2559;
            _2682 = _2561;
            _2684 = _2563;
            _2686 = _2565;
            _2688 = _2567;
            _2690 = _2569;
        }
        else
        {
            float _2705 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
            float _2706 = _2705 * _2412;
            float _2707 = _2705 * _2413;
            float _2708 = _2705 * _2414;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2576 < ((_2574 >> 12u) & 15u))
            {
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2840 = _2559;
                float _2841 = _2561;
                float _2842 = _2563;
                float _2843 = _2565;
                float _2844 = _2567;
                float _2845 = _2569;
                uint _2846 = _2576;
                uint _2855;
                bool _2856;
                for (;;)
                {
                    _2855 = texelFetch(g_lightClassification, int((((_2452 << 5u) + (_2438 << 9u)) + (_2846 << 2u)) >> 2u)).x;
                    _2856 = _2855 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2856)
                    {
                        frontier_phi_77_pred = _2845;
                        frontier_phi_77_pred_1 = _2844;
                        frontier_phi_77_pred_2 = _2843;
                        frontier_phi_77_pred_3 = _2842;
                        frontier_phi_77_pred_4 = _2841;
                        frontier_phi_77_pred_5 = _2840;
                    }
                    else
                    {
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3062 = _2840;
                        float _3063 = _2841;
                        float _3064 = _2842;
                        float _3065 = _2843;
                        float _3066 = _2844;
                        float _3067 = _2845;
                        uint _3068 = _2855;
                        uint _3069;
                        vec4 _3094;
                        float _3095;
                        vec4 _3110;
                        vec3 _3122;
                        vec4 _3138;
                        vec4 _3154;
                        float _3201;
                        bool _3202;
                        for (;;)
                        {
                            uint _3079 = ((_2846 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3068));
                            _3069 = (_3068 + 4294967295u) & _3068;
                            uint _3081 = _3079 * 40u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            _3095 = _3094.w;
                            uint _3097 = (_3079 * 40u) + 4u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3112 = (_3079 * 40u) + 8u;
                            _3122 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x));
                            uint _3125 = (_3079 * 40u) + 16u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3141 = (_3079 * 40u) + 20u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3157 = (_3079 * 40u) + 24u;
                            vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3176 = (_3079 * 40u) + 28u;
                            vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            _3201 = fma(_2414, _3189.z, fma(_2413, _3189.y, _3189.x * _2412)) + _3189.w;
                            _3202 = !((fma(_2414, _3170.z, fma(_2413, _3170.y, _3170.x * _2412)) + _3170.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3202)
                            {
                                float _3229 = _3094.x - _2412;
                                float _3230 = _3094.y - _2413;
                                float _3231 = _3094.z - _2414;
                                float _3232 = dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231));
                                float _3235 = inversesqrt(_3232);
                                float _3236 = _3235 * _3229;
                                float _3237 = _3235 * _3230;
                                float _3238 = _3235 * _3231;
                                float _3242 = 1.0 - (_3232 / (_3095 * _3095));
                                float _4358 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3243 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3247 = sqrt(_3232) * _3110.w;
                                float _3249 = 1.39999997615814208984375 / (_3247 + 1.39999997615814208984375);
                                float _3250 = _3249 * _3249;
                                float _3253 = ((1.0 - _3250) * dot(vec3(_3236, _3237, _3238), vec3(_618, _621, _624))) + _3250;
                                float _3256 = _3247 * _3247;
                                float _3260 = (fma(_2414, _3138.z, fma(_2413, _3138.y, _3138.x * _2412)) + _3138.w) / _3201;
                                float _3261 = (fma(_2414, _3154.z, fma(_2413, _3154.y, _3154.x * _2412)) + _3154.w) / _3201;
                                float _3265 = 1.0 - dot(vec2(_3260, _3261), vec2(_3260, _3261));
                                float _4374 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3267 = _3266 * (((isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))) * _3243) / ((_3256 * 0.699999988079071044921875) + 1.0));
                                float _3279 = exp2(log2(1.0 / ((_3256 * 3.5) + 5.0)) * 0.25);
                                float _3280 = 1.0 - _693;
                                float _3287 = sqrt(1.0 - ((1.0 - (_3280 * _3280)) * (1.0 - (_3279 * _3279))));
                                float _3288 = _3287 * _3287;
                                float _3289 = _3288 * _3288;
                                float _3290 = _3236 - _2706;
                                float _3291 = _3237 - _2707;
                                float _3292 = _3238 - _2708;
                                float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                                float _3300 = dot(vec3(_618, _621, _624), vec3((-0.0) - _2706, (-0.0) - _2707, (-0.0) - _2708));
                                float _4385 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3304 = dot(vec3(_618, _621, _624), vec3(_3296 * _3290, _3296 * _3291, _3296 * _3292));
                                float _4396 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3307 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3311 = ((_3307 * _3307) * (_3289 + (-1.0))) + 1.0;
                                float _3312 = _3249 * _3288;
                                float _3313 = _3312 * _3312;
                                float _3319 = ((1.0 - _3313) * dot(vec3(_618, _621, _624), vec3(_3236, _3237, _3238))) + _3313;
                                float _4407 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3321 = 1.0 - _3288;
                                float _3331 = (0.5 / (((_3320 * ((_3303 * _3321) + _3288)) + 9.9999999392252902907785028219223e-09) + (((_3320 * _3321) + _3288) * _3303))) * _3320;
                                float _4418 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3341 = (_3266 * _3243) * (((_3289 * 3.1415927410125732421875) * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) / ((_3311 * _3311) * ((_3256 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3267 * _3110.y;
                                frontier_phi_83_pred_1 = _3267 * _3110.x;
                                frontier_phi_83_pred_2 = _3341 * _3122.z;
                                frontier_phi_83_pred_3 = _3341 * _3122.y;
                                frontier_phi_83_pred_4 = _3341 * _3122.x;
                                frontier_phi_83_pred_5 = _3267 * _3110.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3349 = frontier_phi_83_pred;
                            _3348 = frontier_phi_83_pred_1;
                            _3347 = frontier_phi_83_pred_2;
                            _3346 = frontier_phi_83_pred_3;
                            _3345 = frontier_phi_83_pred_4;
                            _3350 = frontier_phi_83_pred_5;
                            _3052 = _3348 + _3065;
                            _3053 = _3349 + _3066;
                            _3054 = _3350 + _3067;
                            _3049 = _3345 + _3062;
                            _3050 = _3346 + _3063;
                            _3051 = _3347 + _3064;
                            if (_3069 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3069;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3054;
                        frontier_phi_77_pred_1 = _3053;
                        frontier_phi_77_pred_2 = _3052;
                        frontier_phi_77_pred_3 = _3051;
                        frontier_phi_77_pred_4 = _3050;
                        frontier_phi_77_pred_5 = _3049;
                    }
                    _2691 = frontier_phi_77_pred;
                    _2689 = frontier_phi_77_pred_1;
                    _2687 = frontier_phi_77_pred_2;
                    _2685 = frontier_phi_77_pred_3;
                    _2683 = frontier_phi_77_pred_4;
                    _2681 = frontier_phi_77_pred_5;
                    uint _2847 = _2846 + 1u;
                    if (_2847 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2840 = _2681;
                        _2841 = _2683;
                        _2842 = _2685;
                        _2843 = _2687;
                        _2844 = _2689;
                        _2845 = _2691;
                        _2846 = _2847;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2685;
                frontier_phi_58_59_ladder_1 = _2691;
                frontier_phi_58_59_ladder_2 = _2689;
                frontier_phi_58_59_ladder_3 = _2687;
                frontier_phi_58_59_ladder_4 = _2683;
                frontier_phi_58_59_ladder_5 = _2681;
            }
            else
            {
                frontier_phi_58_59_ladder = _2563;
                frontier_phi_58_59_ladder_1 = _2569;
                frontier_phi_58_59_ladder_2 = _2567;
                frontier_phi_58_59_ladder_3 = _2565;
                frontier_phi_58_59_ladder_4 = _2561;
                frontier_phi_58_59_ladder_5 = _2559;
            }
            _2680 = frontier_phi_58_59_ladder_5;
            _2682 = frontier_phi_58_59_ladder_4;
            _2684 = frontier_phi_58_59_ladder;
            _2686 = frontier_phi_58_59_ladder_3;
            _2688 = frontier_phi_58_59_ladder_2;
            _2690 = frontier_phi_58_59_ladder_1;
        }
        float _2695 = isnan(1.0) ? _677 : (isnan(_677) ? 1.0 : min(_677, 1.0));
        _2471 = (_2695 * _2686) + _1904;
        _2473 = (_2695 * _2688) + _1906;
        _2475 = (_2695 * _2690) + _1908;
        _2477 = ((_2680 * _662) * _2695) + _2252;
        _2479 = ((_2682 * _664) * _2695) + _2254;
        _2481 = ((_2684 * _665) * _2695) + _2256;
    }
    else
    {
        _2471 = _1904;
        _2473 = _1906;
        _2475 = _1908;
        _2477 = _2252;
        _2479 = _2254;
        _2481 = _2256;
    }
    float _4434 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4445 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4456 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _2498 = ((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2471 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _677))) + ((_2477 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1518)) * cbPerFrame._m0[3u].x);
    float _2499 = ((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2473 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _677))) + ((_2479 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1518)) * cbPerFrame._m0[3u].x);
    float _2500 = ((isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2475 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _677))) + ((_2481 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1518)) * cbPerFrame._m0[3u].x);
    uint _2501 = _637 + 6u;
    float _2509 = _599 / cbSceneParam._m0[86u].x;
    float _2510 = _600 / cbSceneParam._m0[86u].y;
    vec4 _2524 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, (log2((isnan(cbSceneParam._m0[77u].w) ? _522 : (isnan(_522) ? cbSceneParam._m0[77u].w : min(_522, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2526 = _2524.x;
    float _2527 = _2524.y;
    float _2528 = _2524.z;
    float _2529 = _2524.w;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    if (_522 > cbSceneParam._m0[78u].w)
    {
        float _2584 = isnan(_522) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _522 : min(cbSceneParam._m0[80u].w, _522));
        float _2585 = _2584 / _522;
        float _2596 = _2585 * _572;
        float _2597 = _573 * _2585;
        float _2598 = (-0.0) - _2597;
        float _2600 = _2585 * _574;
        float _2602 = (cbSceneParam._m0[77u].w * _2598) / _2584;
        float _2603 = _2602 + cbSceneParam._m0[79u].w;
        float _2604 = cbSceneParam._m0[79u].w - _2597;
        float _2610 = sqrt(((_2596 * _2596) + (_2597 * _2597)) + (_2600 * _2600));
        float _2613 = (1.0 - (cbSceneParam._m0[77u].w / _2584)) * _2610;
        float _2618 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2620 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2797;
        if (abs((_2598 - _2602) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2797 = ((((_2603 > 0.0) ? exp2(_2618 * _2603) : (2.0 - exp2(_2620 * _2603))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2613;
        }
        else
        {
            float _2741 = 1.0 / cbSceneParam._m0[80u].x;
            float _2742 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : max(_2603, _2604));
            float _2743 = isnan(_2604) ? _2603 : (isnan(_2603) ? _2604 : min(_2603, _2604));
            float _2752 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : min(_2742, 0.0));
            float _2753 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : min(_2743, 0.0));
            _2797 = ((abs(_2610 / _2598) * cbSceneParam._m0[80u].y) * ((((_2752 - _2753) * 2.0) - ((exp2(_2618 * (isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0)))) - exp2(_2618 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0))))) * _2741)) - ((exp2(_2620 * _2752) - exp2(_2620 * _2753)) * _2741))) + (_2613 * cbSceneParam._m0[80u].z);
        }
        vec4 _2799 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2509, _2510, 1.0), 0.0);
        float _2808 = exp2((_2797 * (-1.44269502162933349609375)) * (1.0 - _2799.w));
        float _2809 = log2(_2808);
        float _2825 = log2(_2529);
        _2622 = (exp2(_2825 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].x)) * _2799.x) / cbSceneParam._m0[78u].x)) + _2526;
        _2624 = (exp2(_2825 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].y)) * _2799.y) / cbSceneParam._m0[78u].y)) + _2527;
        _2626 = (exp2(_2825 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].z)) * _2799.z) / cbSceneParam._m0[78u].z)) + _2528;
        _2628 = _2808 * _2529;
    }
    else
    {
        _2622 = _2526;
        _2624 = _2527;
        _2626 = _2528;
        _2628 = _2529;
    }
    bool _2835;
    vec4 _2638;
    vec4 _2660;
    float _2662;
    float _2666;
    float _2667;
    float _2668;
    float _2669;
    bool _2679;
    for (;;)
    {
        _2638 = cbMatDynParam._m0[0u];
        float _2640 = roundEven(_2638.y);
        bool _2641 = _2640 == 3.0;
        float _2642 = log2(_2628);
        float _2649 = exp2(_2642 * cbSceneParam._m0[78u].x) * _2498;
        float _2650 = exp2(_2642 * cbSceneParam._m0[78u].y) * _2499;
        float _2651 = exp2(_2642 * cbSceneParam._m0[78u].z) * _2500;
        float _2658 = _588 + (-0.5);
        _2660 = cbMtdParam._m0[1u];
        _2662 = _2660.y * _2658;
        float _2665 = (_2640 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2666 = _2665 * (_2641 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2622)));
        _2667 = _2665 * (_2641 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2624)));
        _2668 = _2665 * (_2641 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2626)));
        _2669 = _2658 * 0.999000012874603271484375;
        _2679 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2679)
        {
            if ((cbInstanceData._m0[_637 + 7u].x + _2669) < 0.5)
            {
                _2835 = true;
                break;
            }
        }
        uint _2776 = _638 + uint(_2638.w);
        if ((cbInstanceData._m0[_2776].w < 1.0) && ((cbInstanceData._m0[_2776].w + _2669) < 0.5))
        {
            _2835 = true;
            break;
        }
        if ((_2662 + 1.0) < _2660.x)
        {
            _2835 = true;
            break;
        }
        _2835 = false;
        break;
    }
    float _3040;
    if (_2835)
    {
        discard_state = true;
        _3040 = 0.0;
    }
    else
    {
        _3040 = cbInstanceData._m0[_2501].w;
    }
    SV_Target.x = _2666;
    SV_Target.y = _2667;
    SV_Target.z = _2668;
    SV_Target.w = _3040;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2501].w;
    discard_exit();
}


