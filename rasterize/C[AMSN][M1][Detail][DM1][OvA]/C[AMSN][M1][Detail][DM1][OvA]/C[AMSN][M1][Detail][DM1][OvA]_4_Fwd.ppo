#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1053;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _251 = _245.x * cbMtdParam._m0[10u].x;
    float _252 = _245.y * cbMtdParam._m0[10u].y;
    float _253 = _245.z * cbMtdParam._m0[10u].z;
    float _258 = 1.0 - cbMtdParam._m0[13u].z;
    float _3386 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _260 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    vec4 _278 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _286 = ((_251 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _278.x;
    float _289 = ((_252 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _278.y;
    float _292 = ((_253 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _278.z;
    float _299 = ((_251 - _286) * _260) + _286;
    float _300 = ((_252 - _289) * _260) + _289;
    float _301 = ((_253 - _292) * _260) + _292;
    vec4 _319 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _349 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3397 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _357 = (_350 * ((_319.x * cbMtdParam._m0[11u].x) - _299)) + _299;
    float _358 = (_350 * ((_319.y * cbMtdParam._m0[11u].y) - _300)) + _300;
    float _359 = (_350 * ((_319.z * cbMtdParam._m0[11u].z) - _301)) + _301;
    vec4 _372 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _374 = _372.x;
    vec4 _387 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _394 = 1.0 - cbMtdParam._m0[14u].z;
    float _3408 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _399 = (((_387.x - _374) * TEXCOORD_5.x) * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) + _374;
    vec4 _413 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _417 = _413.z;
    vec4 _430 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _441 = cbMtdParam._m0[13u].w * _417;
    float _444 = (((((_417 * 2.0) * _430.z) * cbMtdParam._m0[14u].x) - _441) * cbMtdParam._m0[13u].y) + _441;
    vec4 _457 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _472 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_457.z * cbMtdParam._m0[14u].y) - _444)) + _444;
    float _479 = (_413.x * 2.0) + (-1.0);
    float _480 = (_413.y * 2.0) + (-1.0);
    float _481 = dot(vec2(_479, _480), vec2(_479, _480));
    float _3419 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))));
    float _497 = ((cbMtdParam._m0[13u].x * ((_430.x * 2.0) + (-1.0))) + _479) + ((((_457.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _498 = ((cbMtdParam._m0[13u].x * ((_430.y * 2.0) + (-1.0))) + _480) + ((((_457.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _501 = fma(_486, _210 * NORMAL.x, fma(_498, _217 * TANGENT.x, (_203 * _195) * _497));
    float _504 = fma(_486, _210 * NORMAL.y, fma(_498, _217 * TANGENT.y, (_203 * _196) * _497));
    float _507 = fma(_486, _210 * NORMAL.z, fma(_498, _217 * TANGENT.z, (_203 * _197) * _497));
    float _511 = inversesqrt(dot(vec3(_501, _504, _507), vec3(_501, _504, _507)));
    float _512 = _511 * _501;
    float _513 = _511 * _504;
    float _514 = _511 * _507;
    float _3430 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _515 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _3452 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _3463 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _3474 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _519 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _535 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _575 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _585 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _575);
    float _586 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _575);
    float _587 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _575);
    float _591 = inversesqrt(dot(vec3(_585, _586, _587), vec3(_585, _586, _587)));
    float _592 = _585 * _591;
    float _593 = _586 * _591;
    float _594 = _587 * _591;
    float _600 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _601 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _619 = fma(_514, cbSceneParam._m0[5u].z, fma(_513, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _512));
    float _622 = fma(_514, cbSceneParam._m0[6u].z, fma(_513, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _512));
    float _625 = fma(_514, cbSceneParam._m0[7u].z, fma(_513, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _512));
    uint _638 = uint(roundEven(NORMAL.w)) * 13u;
    uint _640 = (_638 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _646 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_640].x;
    float _647 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_640].y;
    float _648 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_640].z;
    float _3485 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _652 = 1.0 - _519;
    float _653 = _649 * _652;
    float _654 = _650 * _652;
    float _655 = _651 * _652;
    float _660 = (_649 + (-0.039999999105930328369140625)) * _519;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _519;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _519;
    float _663 = _660 + 0.039999999105930328369140625;
    float _665 = _661 + 0.039999999105930328369140625;
    float _666 = _662 + 0.039999999105930328369140625;
    vec4 _675 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _600, cbSceneParam._m0[86u].y * _601));
    float _678 = _675.x * TEXCOORD_5.w;
    float _679 = dot(vec3(_512, _513, _514), vec3(_592, _593, _594));
    float _682 = _679 * 2.0;
    float _686 = (_682 * _512) - _592;
    float _687 = (_682 * _513) - _593;
    float _688 = (_682 * _514) - _594;
    float _692 = abs(dot(vec3(_592, _593, _594), vec3(_512, _513, _514)));
    float _3518 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _694 = sqrt(_515);
    float _707 = exp2((_694 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_694 * 3.0));
    float _713 = (1.0 - _707) * ((_694 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _714 = _707 * _694;
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1052;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _777 = fma(_750, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _742));
        float _781 = fma(_750, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _742));
        float _785 = fma(_750, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _742));
        float _810 = _742 + _512;
        float _811 = _746 + _513;
        float _812 = _750 + _514;
        float _822 = fma(_812, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _810)) - _777;
        float _823 = fma(_812, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _810)) - _781;
        float _824 = fma(_812, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _810)) - _785;
        float _828 = inversesqrt(dot(vec3(_822, _823, _824), vec3(_822, _823, _824)));
        float _841 = ((_828 * _822) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_777 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_828 * _823) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_781 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_828 * _824) / cbModelParam._m0[34u].z) + ((((((_785 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        float _880 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_846.x + (-0.5));
        float _882 = _880 * (_846.y + (-0.5));
        float _883 = _880 * (_846.z + (-0.5));
        float _890 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_853.x + (-0.5));
        float _892 = _890 * (_853.y + (-0.5));
        float _893 = _890 * (_853.z + (-0.5));
        float _900 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_860.x + (-0.5));
        float _902 = _900 * (_860.y + (-0.5));
        float _903 = _900 * (_860.z + (-0.5));
        float _910 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_867.x + (-0.5));
        float _912 = _910 * (_867.y + (-0.5));
        float _913 = _910 * (_867.z + (-0.5));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = _881 * 0.5;
        float _918 = _891 * 0.5;
        float _919 = _901 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _934 = (dot(vec3(_512, _513, _514), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _944 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3566 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_946 + 1.0))) + _951) * _914;
        float _961 = _882 * 0.5;
        float _962 = _892 * 0.5;
        float _963 = _902 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _977 = (dot(vec3(_512, _513, _514), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _986 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3599 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_988 + 1.0))) + _993) * _915;
        float _1003 = _883 * 0.5;
        float _1004 = _893 * 0.5;
        float _1005 = _903 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_512, _513, _514), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3632 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1030 + 1.0))) + _1035) * _916;
        _1052 = _883;
        _1054 = _882;
        _1055 = _881;
        _1056 = _893;
        _1057 = _892;
        _1058 = _891;
        _1059 = _903;
        _1060 = _902;
        _1061 = _901;
        _1062 = _916;
        _1063 = _915;
        _1064 = _914;
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
    }
    else
    {
        _1052 = _1053;
        _1054 = _1053;
        _1055 = _1053;
        _1056 = _1053;
        _1057 = _1053;
        _1058 = _1053;
        _1059 = _1053;
        _1060 = _1053;
        _1061 = _1053;
        _1062 = _1053;
        _1063 = _1053;
        _1064 = _1053;
        _1065 = 0.0;
        _1066 = 0.0;
        _1067 = 0.0;
    }
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1093 = fma(_750, cbModelParam._m0[30u].z, fma(_746, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _742));
        float _1097 = fma(_750, cbModelParam._m0[31u].z, fma(_746, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _742));
        float _1101 = fma(_750, cbModelParam._m0[32u].z, fma(_746, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _742));
        float _1124 = _742 + _512;
        float _1125 = _746 + _513;
        float _1126 = _750 + _514;
        float _1136 = fma(_1126, cbModelParam._m0[30u].z, fma(_1125, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1124)) - _1093;
        float _1137 = fma(_1126, cbModelParam._m0[31u].z, fma(_1125, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1124)) - _1097;
        float _1138 = fma(_1126, cbModelParam._m0[32u].z, fma(_1125, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1124)) - _1101;
        float _1142 = inversesqrt(dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138)));
        float _1155 = ((_1142 * _1136) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1093 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1142 * _1137) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1097 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1142 * _1138) / cbModelParam._m0[35u].z) + ((((((_1101 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        float _1192 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1159.x + (-0.5));
        float _1194 = _1192 * (_1159.y + (-0.5));
        float _1195 = _1192 * (_1159.z + (-0.5));
        float _1202 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1166.x + (-0.5));
        float _1204 = _1202 * (_1166.y + (-0.5));
        float _1205 = _1202 * (_1166.z + (-0.5));
        float _1212 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1173.x + (-0.5));
        float _1214 = _1212 * (_1173.y + (-0.5));
        float _1215 = _1212 * (_1173.z + (-0.5));
        float _1222 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1180.x + (-0.5));
        float _1224 = _1222 * (_1180.y + (-0.5));
        float _1225 = _1222 * (_1180.z + (-0.5));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = _1193 * 0.5;
        float _1230 = _1203 * 0.5;
        float _1231 = _1213 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_512, _513, _514), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3695 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1256 + 1.0))) + _1261) * _1226;
        float _1271 = _1194 * 0.5;
        float _1272 = _1204 * 0.5;
        float _1273 = _1214 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_512, _513, _514), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3728 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1298 + 1.0))) + _1303) * _1227;
        float _1313 = _1195 * 0.5;
        float _1314 = _1205 * 0.5;
        float _1315 = _1215 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_512, _513, _514), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3761 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1340 + 1.0))) + _1345) * _1228;
        _1362 = _1195;
        _1363 = _1194;
        _1364 = _1193;
        _1365 = _1205;
        _1366 = _1204;
        _1367 = _1203;
        _1368 = _1215;
        _1369 = _1214;
        _1370 = _1213;
        _1371 = _1228;
        _1372 = _1227;
        _1373 = _1226;
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1053;
        _1363 = _1053;
        _1364 = _1053;
        _1365 = _1053;
        _1366 = _1053;
        _1367 = _1053;
        _1368 = _1053;
        _1369 = _1053;
        _1370 = _1053;
        _1371 = _1053;
        _1372 = _1053;
        _1373 = _1053;
        _1374 = 0.0;
        _1375 = 0.0;
        _1376 = 0.0;
    }
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1065)) + _1065;
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1066)) + _1066;
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1067)) + _1067;
    float _1409 = fma(_1388, cbSceneParam._m0[89u].z, fma(_1387, cbSceneParam._m0[89u].y, _1386 * cbSceneParam._m0[89u].x));
    float _1412 = fma(_1388, cbSceneParam._m0[90u].z, fma(_1387, cbSceneParam._m0[90u].y, _1386 * cbSceneParam._m0[90u].x));
    float _1415 = fma(_1388, cbSceneParam._m0[91u].z, fma(_1387, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1386));
    float _1430 = _686 * 0.5;
    float _1431 = _687 * 0.5;
    float _1432 = _688 * 0.5;
    float _1433 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1436 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1439 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1473;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1446 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1052, _1056, _1059, _1062));
        float _1450 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1054, _1057, _1060, _1063));
        float _1454 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1055, _1058, _1061, _1064));
        float _1461 = dot(vec4(cbModelParam._m0[39u]), vec4(_1430, _1431, _1432, 1.0));
        _1473 = dot(vec3(isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1461) ? 0.0 : (isnan(0.0) ? _1461 : max(0.0, _1461))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1473 = 1.0;
    }
    float _1484;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1475 = dot(vec4(cbModelParam._m0[40u]), vec4(_1430, _1431, _1432, 1.0));
        _1484 = dot(vec3(isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1475) ? 0.0 : (isnan(0.0) ? _1475 : max(0.0, _1475))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1484 = 1.0;
    }
    float _1488 = (_1484 * cbModelParam._m0[1u].x) + (_1473 * (1.0 - cbModelParam._m0[1u].x));
    float _1498 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _515);
    float _1499 = isnan(_1498) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1498 : min(cbModelParam._m0[25u].z, _1498));
    float _1579;
    float _1581;
    float _1583;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1546 = fma(_750, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _742)) + cbModelParam._m0[13u].w;
        float _1550 = fma(_750, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _742)) + cbModelParam._m0[14u].w;
        float _1554 = fma(_750, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _742)) + cbModelParam._m0[15u].w;
        float _1557 = fma(_688, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _686));
        float _1560 = fma(_688, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _686));
        float _1563 = fma(_688, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _686));
        float _1591;
        if (_1557 > 0.0)
        {
            _1591 = abs((1.0 - _1546) / _1557);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1546 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1591 = frontier_phi_14_12_ladder;
        }
        float _1797;
        if (_1560 > 0.0)
        {
            _1797 = abs((1.0 - _1550) / _1560);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1550 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1797 = frontier_phi_23_19_ladder;
        }
        float _2051;
        if (_1563 > 0.0)
        {
            _2051 = abs((1.0 - _1554) / _1563);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1554 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2051 = frontier_phi_35_30_ladder;
        }
        float _2053 = isnan(_1797) ? _1591 : (isnan(_1591) ? _1797 : min(_1591, _1797));
        float _2054 = isnan(_2051) ? _2053 : (isnan(_2053) ? _2051 : min(_2053, _2051));
        float _2058 = (_2054 * _1557) + _1546;
        float _2059 = (_2054 * _1560) + _1550;
        float _2060 = (_2054 * _1563) + _1554;
        float _2061 = _2054 * 9.9999997473787516355514526367188e-05;
        float _2063 = (-1.0) - _2061;
        float _2065 = _2061 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2060 > _2065) || ((_2060 < _2063) || ((_2059 > _2065) || ((_2059 < _2063) || ((_2058 < _2063) || (_2058 > _2065))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2188 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2060, cbModelParam._m0[9u].z, fma(_2059, cbModelParam._m0[9u].y, _2058 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2060, cbModelParam._m0[10u].z, fma(_2059, cbModelParam._m0[10u].y, _2058 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2060, cbModelParam._m0[11u].z, fma(_2059, cbModelParam._m0[11u].y, _2058 * cbModelParam._m0[11u].x))), _1499);
            frontier_phi_13_35_ladder = _2188.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2188.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2188.x * cbModelParam._m0[1u].y;
        }
        _1579 = frontier_phi_13_35_ladder_2;
        _1581 = frontier_phi_13_35_ladder_1;
        _1583 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1567 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_686, _687, _688), _1499);
        _1579 = _1567.x * cbModelParam._m0[1u].y;
        _1581 = _1567.y * cbModelParam._m0[1u].y;
        _1583 = _1567.z * cbModelParam._m0[1u].y;
    }
    float _1587 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _515);
    float _1588 = isnan(_1587) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1587 : min(cbModelParam._m0[25u].w, _1587));
    float _1681;
    float _1683;
    float _1685;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1645 = fma(_750, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _742)) + cbModelParam._m0[21u].w;
        float _1649 = fma(_750, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _742)) + cbModelParam._m0[22u].w;
        float _1653 = fma(_750, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _742)) + cbModelParam._m0[23u].w;
        float _1656 = fma(_688, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _686));
        float _1659 = fma(_688, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _686));
        float _1662 = fma(_688, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _686));
        float _1802;
        if (_1656 > 0.0)
        {
            _1802 = abs((1.0 - _1645) / _1656);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1645 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1802 = frontier_phi_25_21_ladder;
        }
        float _2078;
        if (_1659 > 0.0)
        {
            _2078 = abs((1.0 - _1649) / _1659);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1649 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2078 = frontier_phi_37_32_ladder;
        }
        float _2291;
        if (_1662 > 0.0)
        {
            _2291 = abs((1.0 - _1653) / _1662);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1653 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2291 = frontier_phi_46_43_ladder;
        }
        float _2293 = isnan(_2078) ? _1802 : (isnan(_1802) ? _2078 : min(_1802, _2078));
        float _2294 = isnan(_2291) ? _2293 : (isnan(_2293) ? _2291 : min(_2293, _2291));
        float _2298 = (_2294 * _1656) + _1645;
        float _2299 = (_2294 * _1659) + _1649;
        float _2300 = (_2294 * _1662) + _1653;
        float _2301 = _2294 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2301;
        float _2304 = _2301 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2300 > _2304) || ((_2300 < _2302) || ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 < _2302) || (_2298 > _2304))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2499 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2300, cbModelParam._m0[17u].z, fma(_2299, cbModelParam._m0[17u].y, _2298 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2300, cbModelParam._m0[18u].z, fma(_2299, cbModelParam._m0[18u].y, _2298 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2300, cbModelParam._m0[19u].z, fma(_2299, cbModelParam._m0[19u].y, _2298 * cbModelParam._m0[19u].x))), _1588);
            frontier_phi_22_46_ladder = _2499.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2499.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2499.x * cbModelParam._m0[1u].z;
        }
        _1681 = frontier_phi_22_46_ladder_2;
        _1683 = frontier_phi_22_46_ladder_1;
        _1685 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1665 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_686, _687, _688), _1588);
        _1681 = _1665.x * cbModelParam._m0[1u].z;
        _1683 = _1665.y * cbModelParam._m0[1u].z;
        _1685 = _1665.z * cbModelParam._m0[1u].z;
    }
    float _1698 = (((_713 * _663) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1681 - _1579)) + _1579);
    float _1700 = (((_713 * _665) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1683 - _1581)) + _1581);
    float _1702 = (((_713 * _666) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1685 - _1583)) + _1583);
    float _1705 = fma(_1702, cbSceneParam._m0[89u].z, fma(_1700, cbSceneParam._m0[89u].y, _1698 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1702, cbSceneParam._m0[90u].z, fma(_1700, cbSceneParam._m0[90u].y, _1698 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1702, cbSceneParam._m0[91u].z, fma(_1700, cbSceneParam._m0[91u].y, _1698 * cbSceneParam._m0[91u].x));
    uvec4 _1721 = floatBitsToUint(cbInstanceData._m0[_638 + 5u]);
    uint _1723 = _1721.x * 14u;
    uint _1724 = _1723 + 13u;
    float _1731 = _678 + (-1.0);
    float _1736 = (cbLight._m0[_1724].x * _1731) + 1.0;
    float _1737 = (cbLight._m0[_1724].y * _1731) + 1.0;
    float _1738 = (cbLight._m0[_1724].z * _1731) + 1.0;
    float _1739 = (cbLight._m0[_1724].w * _1731) + 1.0;
    uint _1740 = _1723 + 5u;
    float _1746 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
    uint _1750 = _1723 + 4u;
    float _1756 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
    uint _1760 = _1723 | 1u;
    float _1771 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_512, _513, _514));
    float _1774 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_512, _513, _514));
    float _3897 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _3908 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1779 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.3183098733425140380859375;
    float _1781 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1788 = ((cbLight._m0[_1740].x * _1746) * _1781) + ((cbLight._m0[_1750].x * _1756) * _1779);
    float _1789 = ((_1746 * cbLight._m0[_1740].y) * _1781) + ((_1756 * cbLight._m0[_1750].y) * _1779);
    float _1790 = ((_1746 * cbLight._m0[_1740].z) * _1781) + ((_1756 * cbLight._m0[_1750].z) * _1779);
    uvec4 _1794 = floatBitsToUint(cbLight._m0[_1723 + 12u]);
    bool _1796 = _1794.x == 0u;
    float _1807;
    float _1809;
    float _1811;
    if (_1796)
    {
        _1807 = _1788;
        _1809 = _1789;
        _1811 = _1790;
    }
    else
    {
        uint _1815 = _1723 + 6u;
        float _1831 = (dot(vec3(cbLight._m0[_1723 + 2u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _1832 = _1831 * _1831;
        float _3919 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1833 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1834 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _1807 = (((cbLight._m0[_1815].x * 0.3183098733425140380859375) * _1833) * _1834) + _1788;
        _1809 = (((cbLight._m0[_1815].y * 0.3183098733425140380859375) * _1833) * _1834) + _1789;
        _1811 = (((cbLight._m0[_1815].z * 0.3183098733425140380859375) * _1833) * _1834) + _1790;
    }
    bool _1814 = _1794.y == 0u;
    float _1852;
    float _1854;
    float _1856;
    if (_1814)
    {
        _1852 = _1807;
        _1854 = _1809;
        _1856 = _1811;
    }
    else
    {
        uint _2022 = _1723 + 7u;
        float _2038 = (dot(vec3(cbLight._m0[_1723 + 3u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _2039 = _2038 * _2038;
        float _3935 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _2041 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _1852 = (((cbLight._m0[_2022].x * 0.3183098733425140380859375) * _2040) * _2041) + _1807;
        _1854 = (((cbLight._m0[_2022].y * 0.3183098733425140380859375) * _2040) * _2041) + _1809;
        _1856 = (((cbLight._m0[_2022].z * 0.3183098733425140380859375) * _2040) * _2041) + _1811;
    }
    uint _1859 = _1723 + 8u;
    float _1872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1723].w)) * _515) * 0.949999988079071044921875);
    float _1873 = _1872 * _1872;
    float _1874 = cbLight._m0[_1723].x + _592;
    float _1875 = cbLight._m0[_1723].y + _593;
    float _1876 = cbLight._m0[_1723].z + _594;
    float _1880 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
    float _1881 = _1880 * _1874;
    float _1882 = _1880 * _1875;
    float _1883 = _1880 * _1876;
    float _1884 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1723].xyz));
    float _3951 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _1888 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1889 = dot(vec3(_512, _513, _514), vec3(_1881, _1882, _1883));
    float _3973 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1892 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1893 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_1881, _1882, _1883));
    float _3984 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1897 = _1873 * _1873;
    float _1901 = ((_1892 * _1892) * (_1897 + (-1.0))) + 1.0;
    float _1909 = exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0);
    float _1910 = 0.959999978542327880859375 - _660;
    float _1912 = 0.959999978542327880859375 - _661;
    float _1913 = 0.959999978542327880859375 - _662;
    float _1920 = 1.0 - _1873;
    float _1931 = (0.5 / (((_1888 * ((_1887 * _1920) + _1873)) + 9.9999999392252902907785028219223e-09) + (((_1888 * _1920) + _1873) * _1887))) * _1887;
    float _3995 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1933 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1897 / ((_1901 * _1901) * 3.141590118408203125));
    uint _1944 = _1723 + 9u;
    float _1955 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1760].w)) * _515) * 0.949999988079071044921875);
    float _1956 = _1955 * _1955;
    float _1957 = cbLight._m0[_1760].x + _592;
    float _1958 = cbLight._m0[_1760].y + _593;
    float _1959 = cbLight._m0[_1760].z + _594;
    float _1963 = inversesqrt(dot(vec3(_1957, _1958, _1959), vec3(_1957, _1958, _1959)));
    float _1964 = _1963 * _1957;
    float _1965 = _1963 * _1958;
    float _1966 = _1963 * _1959;
    float _1967 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1760].xyz));
    float _4006 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1971 = dot(vec3(_512, _513, _514), vec3(_1964, _1965, _1966));
    float _4017 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1974 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1975 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1964, _1965, _1966));
    float _4028 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1979 = _1956 * _1956;
    float _1983 = ((_1974 * _1974) * (_1979 + (-1.0))) + 1.0;
    float _1990 = exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0);
    float _1997 = 1.0 - _1956;
    float _2007 = (0.5 / (((_1888 * ((_1970 * _1997) + _1956)) + 9.9999999392252902907785028219223e-09) + (((_1888 * _1997) + _1956) * _1970))) * _1970;
    float _4039 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2009 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1979 / ((_1983 * _1983) * 3.141590118408203125));
    float _2019 = (((((_1990 * _1910) + _663) * cbLight._m0[_1944].x) * _2009) * _1746) + (((((_1909 * _1910) + _663) * cbLight._m0[_1859].x) * _1933) * _1756);
    float _2020 = (((((_1990 * _1912) + _665) * cbLight._m0[_1944].y) * _2009) * _1746) + (((((_1909 * _1912) + _665) * cbLight._m0[_1859].y) * _1933) * _1756);
    float _2021 = (((((_1990 * _1913) + _666) * cbLight._m0[_1944].z) * _2009) * _1746) + (((((_1909 * _1913) + _666) * cbLight._m0[_1859].z) * _1933) * _1756);
    float _2083;
    float _2085;
    float _2087;
    if (_1796)
    {
        _2083 = _2019;
        _2085 = _2020;
        _2087 = _2021;
    }
    else
    {
        uint _2089 = _1723 + 2u;
        uint _2093 = _1723 + 10u;
        float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _515) * 0.949999988079071044921875);
        float _2108 = _2107 * _2107;
        float _2109 = cbLight._m0[_2089].x + _592;
        float _2110 = cbLight._m0[_2089].y + _593;
        float _2111 = cbLight._m0[_2089].z + _594;
        float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
        float _2116 = _2115 * _2109;
        float _2117 = _2115 * _2110;
        float _2118 = _2115 * _2111;
        float _2119 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2089].xyz));
        float _4050 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2122 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2123 = dot(vec3(_512, _513, _514), vec3(_2116, _2117, _2118));
        float _4061 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2127 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2116, _2117, _2118));
        float _4072 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2131 = _2108 * _2108;
        float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
        float _2142 = exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0);
        float _2149 = 1.0 - _2108;
        float _2159 = (0.5 / (((_1888 * ((_2122 * _2149) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_1888 * _2149) + _2108) * _2122))) * _2122;
        float _4083 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2161 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
        float _2162 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _2083 = (((((_2142 * _1910) + _663) * cbLight._m0[_2093].x) * _2161) * _2162) + _2019;
        _2085 = (((((_2142 * _1912) + _665) * cbLight._m0[_2093].y) * _2161) * _2162) + _2020;
        _2087 = (((((_2142 * _1913) + _666) * cbLight._m0[_2093].z) * _2161) * _2162) + _2021;
    }
    float _2197;
    float _2199;
    float _2201;
    if (_1814)
    {
        _2197 = _2083;
        _2199 = _2085;
        _2201 = _2087;
    }
    else
    {
        uint _2208 = _1723 + 3u;
        uint _2212 = _1723 + 11u;
        float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _515) * 0.949999988079071044921875);
        float _2227 = _2226 * _2226;
        float _2228 = cbLight._m0[_2208].x + _592;
        float _2229 = cbLight._m0[_2208].y + _593;
        float _2230 = cbLight._m0[_2208].z + _594;
        float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
        float _2235 = _2234 * _2228;
        float _2236 = _2234 * _2229;
        float _2237 = _2234 * _2230;
        float _2238 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2208].xyz));
        float _4099 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2242 = dot(vec3(_512, _513, _514), vec3(_2235, _2236, _2237));
        float _4110 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2245 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2246 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2235, _2236, _2237));
        float _4121 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2250 = _2227 * _2227;
        float _2254 = ((_2245 * _2245) * (_2250 + (-1.0))) + 1.0;
        float _2261 = exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0);
        float _2268 = 1.0 - _2227;
        float _2278 = (0.5 / (((_1888 * ((_2241 * _2268) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_1888 * _2268) + _2227) * _2241))) * _2241;
        float _4132 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2280 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2250 / ((_2254 * _2254) * 3.141590118408203125));
        float _2281 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _2197 = (((((_2261 * _1910) + _663) * cbLight._m0[_2212].x) * _2280) * _2281) + _2083;
        _2199 = (((((_2261 * _1912) + _665) * cbLight._m0[_2212].y) * _2280) * _2281) + _2085;
        _2201 = (((((_2261 * _1913) + _666) * cbLight._m0[_2212].z) * _2280) * _2281) + _2087;
    }
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    float _2426;
    if (_1721.y == 0u)
    {
        float _2356 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2356;
        float _2358 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2356;
        float _2359 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2356;
        uvec4 _2371 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2372 = _2371.x;
        uint _2383 = uint((float(_2371.y) * floor(float(uint(cbSceneParam._m0[85u].y * _601) / _2372))) + floor(float(uint(cbSceneParam._m0[85u].x * _600) / _2372)));
        float _2393 = (log2(_2359 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2394 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        uint _2397 = uint(isnan(14.0) ? _2394 : (isnan(_2394) ? 14.0 : min(_2394, 14.0)));
        uvec4 _2402 = texelFetch(g_lightClusterGridBuffer, int(((_2397 << 2u) + (_2383 << 6u)) >> 2u));
        uint _2403 = _2402.x;
        uint _2404 = _2371.z;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        if (((((1u << ((_2404 >> 4u) & 15u)) + 4294967295u) & _2403) == 0u) || ((_2404 & 240u) == 0u))
        {
            _2504 = 0.0;
            _2506 = 0.0;
            _2508 = 0.0;
            _2510 = 0.0;
            _2512 = 0.0;
            _2514 = 0.0;
        }
        else
        {
            float _2505;
            float _2507;
            float _2509;
            float _2511;
            float _2513;
            float _2515;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            uint _2655 = 0u;
            uint _2664;
            bool _2665;
            for (;;)
            {
                _2664 = texelFetch(g_lightClassification, int((((_2397 << 5u) + (_2383 << 9u)) + (_2655 << 2u)) >> 2u)).x;
                _2665 = _2664 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2665)
                {
                    frontier_phi_61_pred = _2649;
                    frontier_phi_61_pred_1 = _2654;
                    frontier_phi_61_pred_2 = _2653;
                    frontier_phi_61_pred_3 = _2652;
                    frontier_phi_61_pred_4 = _2651;
                    frontier_phi_61_pred_5 = _2650;
                }
                else
                {
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    uint _2779;
                    _2773 = _2649;
                    _2774 = _2650;
                    _2775 = _2651;
                    _2776 = _2652;
                    _2777 = _2653;
                    _2778 = _2654;
                    _2779 = _2664;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    for (;;)
                    {
                        uint _2783 = uint(findLSB(_2779)) + (_2655 << 5u);
                        uint _2780 = (_2779 + 4294967295u) & _2779;
                        uint _2785 = _2783 * 48u;
                        vec4 _2799 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2785)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 3u)).x));
                        uint _2805 = (_2783 * 48u) + 4u;
                        vec4 _2818 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 3u)).x));
                        uint _2824 = (_2783 * 48u) + 8u;
                        vec3 _2835 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2824)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 2u)).x));
                        float _2839 = _2799.x - _2357;
                        float _2840 = _2799.y - _2358;
                        float _2841 = _2799.z - _2359;
                        float _2842 = dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841));
                        float _2845 = inversesqrt(_2842);
                        float _2846 = _2845 * _2839;
                        float _2847 = _2845 * _2840;
                        float _2848 = _2845 * _2841;
                        float _2849 = dot(vec3(_619, _622, _625), vec3(_2846, _2847, _2848));
                        float _2854 = 1.0 - (_2842 * _2799.w);
                        float _4158 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2855 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2856 = sqrt(_2842) * _2818.w;
                        float _2859 = 1.39999997615814208984375 / (_2856 + 1.39999997615814208984375);
                        float _2860 = _2859 * _2859;
                        float _2863 = ((1.0 - _2860) * _2849) + _2860;
                        float _2866 = _2856 * _2856;
                        float _2870 = ((isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0))) * _2855) / ((_2866 * 0.699999988079071044921875) + 1.0);
                        float _2874 = (-0.0) - _2357;
                        float _2875 = (-0.0) - _2358;
                        float _2876 = (-0.0) - _2359;
                        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
                        float _2881 = _2880 * _2874;
                        float _2882 = _2880 * _2875;
                        float _2883 = _2880 * _2876;
                        float _2891 = exp2(log2(1.0 / ((_2866 * 3.5) + 5.0)) * 0.25);
                        float _2892 = 1.0 - _694;
                        float _2899 = sqrt(1.0 - ((1.0 - (_2892 * _2892)) * (1.0 - (_2891 * _2891))));
                        float _2900 = _2899 * _2899;
                        float _2901 = _2900 * _2900;
                        float _2902 = _2881 + _2846;
                        float _2903 = _2882 + _2847;
                        float _2904 = _2883 + _2848;
                        float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
                        float _2912 = dot(vec3(_619, _622, _625), vec3(_2881, _2882, _2883));
                        float _4174 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2915 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2916 = dot(vec3(_619, _622, _625), vec3(_2908 * _2902, _2908 * _2903, _2908 * _2904));
                        float _4185 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2919 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2923 = ((_2919 * _2919) * (_2901 + (-1.0))) + 1.0;
                        float _2924 = _2859 * _2900;
                        float _2925 = _2924 * _2924;
                        float _2928 = ((1.0 - _2925) * _2849) + _2925;
                        float _4196 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2929 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2930 = 1.0 - _2900;
                        float _2940 = (0.5 / (((_2929 * ((_2915 * _2930) + _2900)) + 9.9999999392252902907785028219223e-09) + (((_2929 * _2930) + _2900) * _2915))) * _2929;
                        float _4207 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2951 = (((_2901 * 3.1415927410125732421875) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) / ((_2923 * _2923) * ((_2866 * 2.1991131305694580078125) + 3.141590118408203125))) * _2855;
                        _2708 = (_2870 * _2818.x) + _2776;
                        _2709 = (_2870 * _2818.y) + _2777;
                        _2710 = (_2870 * _2818.z) + _2778;
                        _2705 = (_2951 * _2835.x) + _2773;
                        _2706 = (_2951 * _2835.y) + _2774;
                        _2707 = (_2951 * _2835.z) + _2775;
                        if (_2780 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2773 = _2705;
                            _2774 = _2706;
                            _2775 = _2707;
                            _2776 = _2708;
                            _2777 = _2709;
                            _2778 = _2710;
                            _2779 = _2780;
                        }
                    }
                    frontier_phi_61_pred = _2705;
                    frontier_phi_61_pred_1 = _2710;
                    frontier_phi_61_pred_2 = _2709;
                    frontier_phi_61_pred_3 = _2708;
                    frontier_phi_61_pred_4 = _2707;
                    frontier_phi_61_pred_5 = _2706;
                }
                _2505 = frontier_phi_61_pred;
                _2515 = frontier_phi_61_pred_1;
                _2513 = frontier_phi_61_pred_2;
                _2511 = frontier_phi_61_pred_3;
                _2509 = frontier_phi_61_pred_4;
                _2507 = frontier_phi_61_pred_5;
                uint _2656 = _2655 + 1u;
                if (_2656 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2649 = _2505;
                    _2650 = _2507;
                    _2651 = _2509;
                    _2652 = _2511;
                    _2653 = _2513;
                    _2654 = _2515;
                    _2655 = _2656;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2504 = _2505;
            _2506 = _2507;
            _2508 = _2509;
            _2510 = _2511;
            _2512 = _2513;
            _2514 = _2515;
        }
        uvec4 _2518 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2519 = _2518.z;
        uint _2521 = (_2519 >> 8u) & 15u;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        if (((4294967295u << _2521) & _2403) == 0u)
        {
            _2617 = _2504;
            _2619 = _2506;
            _2621 = _2508;
            _2623 = _2510;
            _2625 = _2512;
            _2627 = _2514;
        }
        else
        {
            float _2642 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
            float _2643 = _2642 * _2357;
            float _2644 = _2642 * _2358;
            float _2645 = _2642 * _2359;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2521 < ((_2519 >> 12u) & 15u))
            {
                float _2618;
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2756 = _2504;
                float _2757 = _2506;
                float _2758 = _2508;
                float _2759 = _2510;
                float _2760 = _2512;
                float _2761 = _2514;
                uint _2762 = _2521;
                uint _2771;
                bool _2772;
                for (;;)
                {
                    _2771 = texelFetch(g_lightClassification, int((((_2397 << 5u) + (_2383 << 9u)) + (_2762 << 2u)) >> 2u)).x;
                    _2772 = _2771 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2772)
                    {
                        frontier_phi_67_pred = _2759;
                        frontier_phi_67_pred_1 = _2760;
                        frontier_phi_67_pred_2 = _2761;
                        frontier_phi_67_pred_3 = _2758;
                        frontier_phi_67_pred_4 = _2757;
                        frontier_phi_67_pred_5 = _2756;
                    }
                    else
                    {
                        float _2956;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _2969 = _2756;
                        float _2970 = _2757;
                        float _2971 = _2758;
                        float _2972 = _2759;
                        float _2973 = _2760;
                        float _2974 = _2761;
                        uint _2975 = _2771;
                        uint _2976;
                        vec4 _3001;
                        float _3002;
                        vec4 _3017;
                        vec3 _3029;
                        vec4 _3045;
                        vec4 _3061;
                        float _3108;
                        bool _3109;
                        for (;;)
                        {
                            uint _2986 = ((_2762 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2975));
                            _2976 = (_2975 + 4294967295u) & _2975;
                            uint _2988 = _2986 * 40u;
                            _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            _3002 = _3001.w;
                            uint _3004 = (_2986 * 40u) + 4u;
                            _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            uint _3019 = (_2986 * 40u) + 8u;
                            _3029 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x));
                            uint _3032 = (_2986 * 40u) + 16u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3048 = (_2986 * 40u) + 20u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3064 = (_2986 * 40u) + 24u;
                            vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3083 = (_2986 * 40u) + 28u;
                            vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            _3108 = fma(_2359, _3096.z, fma(_2358, _3096.y, _3096.x * _2357)) + _3096.w;
                            _3109 = !((fma(_2359, _3077.z, fma(_2358, _3077.y, _3077.x * _2357)) + _3077.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3109)
                            {
                                float _3136 = _3001.x - _2357;
                                float _3137 = _3001.y - _2358;
                                float _3138 = _3001.z - _2359;
                                float _3139 = dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138));
                                float _3142 = inversesqrt(_3139);
                                float _3143 = _3142 * _3136;
                                float _3144 = _3142 * _3137;
                                float _3145 = _3142 * _3138;
                                float _3149 = 1.0 - (_3139 / (_3002 * _3002));
                                float _4218 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3154 = sqrt(_3139) * _3017.w;
                                float _3156 = 1.39999997615814208984375 / (_3154 + 1.39999997615814208984375);
                                float _3157 = _3156 * _3156;
                                float _3160 = ((1.0 - _3157) * dot(vec3(_3143, _3144, _3145), vec3(_619, _622, _625))) + _3157;
                                float _3163 = _3154 * _3154;
                                float _3167 = (fma(_2359, _3045.z, fma(_2358, _3045.y, _3045.x * _2357)) + _3045.w) / _3108;
                                float _3168 = (fma(_2359, _3061.z, fma(_2358, _3061.y, _3061.x * _2357)) + _3061.w) / _3108;
                                float _3172 = 1.0 - dot(vec2(_3167, _3168), vec2(_3167, _3168));
                                float _4234 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3174 = _3173 * (((isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))) * _3150) / ((_3163 * 0.699999988079071044921875) + 1.0));
                                float _3186 = exp2(log2(1.0 / ((_3163 * 3.5) + 5.0)) * 0.25);
                                float _3187 = 1.0 - _694;
                                float _3194 = sqrt(1.0 - ((1.0 - (_3187 * _3187)) * (1.0 - (_3186 * _3186))));
                                float _3195 = _3194 * _3194;
                                float _3196 = _3195 * _3195;
                                float _3197 = _3143 - _2643;
                                float _3198 = _3144 - _2644;
                                float _3199 = _3145 - _2645;
                                float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                                float _3207 = dot(vec3(_619, _622, _625), vec3((-0.0) - _2643, (-0.0) - _2644, (-0.0) - _2645));
                                float _4245 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3210 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3211 = dot(vec3(_619, _622, _625), vec3(_3203 * _3197, _3203 * _3198, _3203 * _3199));
                                float _4256 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3214 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3218 = ((_3214 * _3214) * (_3196 + (-1.0))) + 1.0;
                                float _3219 = _3156 * _3195;
                                float _3220 = _3219 * _3219;
                                float _3226 = ((1.0 - _3220) * dot(vec3(_619, _622, _625), vec3(_3143, _3144, _3145))) + _3220;
                                float _4267 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3228 = 1.0 - _3195;
                                float _3238 = (0.5 / (((_3227 * ((_3210 * _3228) + _3195)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3195) * _3210))) * _3227;
                                float _4278 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3248 = (_3173 * _3150) * (((_3196 * 3.1415927410125732421875) * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) / ((_3218 * _3218) * ((_3163 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3248 * _3029.x;
                                frontier_phi_73_pred_1 = _3248 * _3029.y;
                                frontier_phi_73_pred_2 = _3174 * _3017.z;
                                frontier_phi_73_pred_3 = _3174 * _3017.y;
                                frontier_phi_73_pred_4 = _3174 * _3017.x;
                                frontier_phi_73_pred_5 = _3248 * _3029.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3252 = frontier_phi_73_pred;
                            _3253 = frontier_phi_73_pred_1;
                            _3257 = frontier_phi_73_pred_2;
                            _3256 = frontier_phi_73_pred_3;
                            _3255 = frontier_phi_73_pred_4;
                            _3254 = frontier_phi_73_pred_5;
                            _2959 = _3255 + _2972;
                            _2960 = _3256 + _2973;
                            _2961 = _3257 + _2974;
                            _2956 = _3252 + _2969;
                            _2957 = _3253 + _2970;
                            _2958 = _3254 + _2971;
                            if (_2976 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2976;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2959;
                        frontier_phi_67_pred_1 = _2960;
                        frontier_phi_67_pred_2 = _2961;
                        frontier_phi_67_pred_3 = _2958;
                        frontier_phi_67_pred_4 = _2957;
                        frontier_phi_67_pred_5 = _2956;
                    }
                    _2624 = frontier_phi_67_pred;
                    _2626 = frontier_phi_67_pred_1;
                    _2628 = frontier_phi_67_pred_2;
                    _2622 = frontier_phi_67_pred_3;
                    _2620 = frontier_phi_67_pred_4;
                    _2618 = frontier_phi_67_pred_5;
                    uint _2763 = _2762 + 1u;
                    if (_2763 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2756 = _2618;
                        _2757 = _2620;
                        _2758 = _2622;
                        _2759 = _2624;
                        _2760 = _2626;
                        _2761 = _2628;
                        _2762 = _2763;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2626;
                frontier_phi_55_56_ladder_1 = _2628;
                frontier_phi_55_56_ladder_2 = _2624;
                frontier_phi_55_56_ladder_3 = _2622;
                frontier_phi_55_56_ladder_4 = _2620;
                frontier_phi_55_56_ladder_5 = _2618;
            }
            else
            {
                frontier_phi_55_56_ladder = _2512;
                frontier_phi_55_56_ladder_1 = _2514;
                frontier_phi_55_56_ladder_2 = _2510;
                frontier_phi_55_56_ladder_3 = _2508;
                frontier_phi_55_56_ladder_4 = _2506;
                frontier_phi_55_56_ladder_5 = _2504;
            }
            _2617 = frontier_phi_55_56_ladder_5;
            _2619 = frontier_phi_55_56_ladder_4;
            _2621 = frontier_phi_55_56_ladder_3;
            _2623 = frontier_phi_55_56_ladder_2;
            _2625 = frontier_phi_55_56_ladder;
            _2627 = frontier_phi_55_56_ladder_1;
        }
        float _2632 = isnan(1.0) ? _678 : (isnan(_678) ? 1.0 : min(_678, 1.0));
        _2416 = (_2632 * _2623) + _1852;
        _2418 = (_2632 * _2625) + _1854;
        _2420 = (_2632 * _2627) + _1856;
        _2422 = ((_2617 * _663) * _2632) + _2197;
        _2424 = ((_2619 * _665) * _2632) + _2199;
        _2426 = ((_2621 * _666) * _2632) + _2201;
    }
    else
    {
        _2416 = _1852;
        _2418 = _1854;
        _2420 = _1856;
        _2422 = _2197;
        _2424 = _2199;
        _2426 = _2201;
    }
    float _4294 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4305 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4316 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    uint _2446 = _638 + 6u;
    float _2454 = _600 / cbSceneParam._m0[86u].x;
    float _2455 = _601 / cbSceneParam._m0[86u].y;
    vec4 _2469 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2454, _2455, (log2((isnan(cbSceneParam._m0[77u].w) ? _535 : (isnan(_535) ? cbSceneParam._m0[77u].w : min(_535, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2471 = _2469.x;
    float _2472 = _2469.y;
    float _2473 = _2469.z;
    float _2474 = _2469.w;
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    if (_535 > cbSceneParam._m0[78u].w)
    {
        float _2529 = isnan(_535) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _535 : min(cbSceneParam._m0[80u].w, _535));
        float _2530 = _2529 / _535;
        float _2541 = _2530 * _585;
        float _2542 = _586 * _2530;
        float _2543 = (-0.0) - _2542;
        float _2545 = _2530 * _587;
        float _2547 = (cbSceneParam._m0[77u].w * _2543) / _2529;
        float _2548 = _2547 + cbSceneParam._m0[79u].w;
        float _2549 = cbSceneParam._m0[79u].w - _2542;
        float _2555 = sqrt(((_2541 * _2541) + (_2542 * _2542)) + (_2545 * _2545));
        float _2558 = (1.0 - (cbSceneParam._m0[77u].w / _2529)) * _2555;
        float _2563 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2565 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2718;
        if (abs((_2543 - _2547) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2718 = ((((_2548 > 0.0) ? exp2(_2563 * _2548) : (2.0 - exp2(_2565 * _2548))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2558;
        }
        else
        {
            float _2678 = 1.0 / cbSceneParam._m0[80u].x;
            float _2679 = isnan(_2549) ? _2548 : (isnan(_2548) ? _2549 : max(_2548, _2549));
            float _2680 = isnan(_2549) ? _2548 : (isnan(_2548) ? _2549 : min(_2548, _2549));
            float _2689 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : min(_2679, 0.0));
            float _2690 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : min(_2680, 0.0));
            _2718 = ((abs(_2555 / _2543) * cbSceneParam._m0[80u].y) * ((((_2689 - _2690) * 2.0) - ((exp2(_2563 * (isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0)))) - exp2(_2563 * (isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0))))) * _2678)) - ((exp2(_2565 * _2689) - exp2(_2565 * _2690)) * _2678))) + (_2558 * cbSceneParam._m0[80u].z);
        }
        vec4 _2720 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2454, _2455, 1.0), 0.0);
        float _2729 = exp2((_2718 * (-1.44269502162933349609375)) * (1.0 - _2720.w));
        float _2730 = log2(_2729);
        float _2746 = log2(_2474);
        _2567 = (exp2(_2746 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2730 * cbSceneParam._m0[78u].x)) * _2720.x) / cbSceneParam._m0[78u].x)) + _2471;
        _2569 = (exp2(_2746 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2730 * cbSceneParam._m0[78u].y)) * _2720.y) / cbSceneParam._m0[78u].y)) + _2472;
        _2571 = (exp2(_2746 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2730 * cbSceneParam._m0[78u].z)) * _2720.z) / cbSceneParam._m0[78u].z)) + _2473;
        _2573 = _2729 * _2474;
    }
    else
    {
        _2567 = _2471;
        _2569 = _2472;
        _2571 = _2473;
        _2573 = _2474;
    }
    float _2585 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2586 = _2585 == 3.0;
    float _2587 = log2(_2573);
    float _2594 = exp2(_2587 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2416 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _678))) + ((_2422 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1488)) * cbPerFrame._m0[3u].x));
    float _2595 = exp2(_2587 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2418 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _678))) + ((_2424 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1488)) * cbPerFrame._m0[3u].x));
    float _2596 = exp2(_2587 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2420 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _678))) + ((_2426 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1488)) * cbPerFrame._m0[3u].x));
    float _2605 = (_2585 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2605 * (_2586 ? _2594 : (_2594 + (cbSceneParam._m0[72u].w * _2567)));
    SV_Target.y = _2605 * (_2586 ? _2595 : (_2595 + (cbSceneParam._m0[72u].w * _2569)));
    SV_Target.z = _2605 * (_2586 ? _2596 : (_2596 + (cbSceneParam._m0[72u].w * _2571)));
    SV_Target.w = cbInstanceData._m0[_2446].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2446].w;
}


