#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1038;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _253 = _247.x * cbMtdParam._m0[10u].x;
    float _254 = _247.y * cbMtdParam._m0[10u].y;
    float _255 = _247.z * cbMtdParam._m0[10u].z;
    float _260 = 1.0 - cbMtdParam._m0[13u].z;
    float _3655 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _262 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    vec4 _280 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _288 = ((_253 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _280.x;
    float _291 = ((_254 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _280.y;
    float _294 = ((_255 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _280.z;
    float _301 = ((_253 - _288) * _262) + _288;
    float _302 = ((_254 - _291) * _262) + _291;
    float _303 = ((_255 - _294) * _262) + _294;
    vec4 _321 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _351 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3666 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _359 = (_352 * ((_321.x * cbMtdParam._m0[11u].x) - _301)) + _301;
    float _360 = (_352 * ((_321.y * cbMtdParam._m0[11u].y) - _302)) + _302;
    float _361 = (_352 * ((_321.z * cbMtdParam._m0[11u].z) - _303)) + _303;
    vec4 _374 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_22, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _381 = 1.0 - cbMtdParam._m0[14u].z;
    float _3677 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _384 = (_374.x * TEXCOORD_5.x) * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)));
    vec4 _398 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _402 = _398.z;
    vec4 _415 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _426 = cbMtdParam._m0[13u].w * _402;
    float _429 = (((((_402 * 2.0) * _415.z) * cbMtdParam._m0[14u].x) - _426) * cbMtdParam._m0[13u].y) + _426;
    vec4 _442 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _457 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_442.z * cbMtdParam._m0[14u].y) - _429)) + _429;
    float _464 = (_398.x * 2.0) + (-1.0);
    float _465 = (_398.y * 2.0) + (-1.0);
    float _466 = dot(vec2(_464, _465), vec2(_464, _465));
    float _3688 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _471 = sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))));
    float _482 = ((cbMtdParam._m0[13u].x * ((_415.x * 2.0) + (-1.0))) + _464) + ((((_442.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _483 = ((cbMtdParam._m0[13u].x * ((_415.y * 2.0) + (-1.0))) + _465) + ((((_442.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _486 = fma(_471, _212 * NORMAL.x, fma(_483, _219 * TANGENT.x, (_205 * _197) * _482));
    float _489 = fma(_471, _212 * NORMAL.y, fma(_483, _219 * TANGENT.y, (_205 * _198) * _482));
    float _492 = fma(_471, _212 * NORMAL.z, fma(_483, _219 * TANGENT.z, (_205 * _199) * _482));
    float _496 = inversesqrt(dot(vec3(_486, _489, _492), vec3(_486, _489, _492)));
    float _497 = _496 * _486;
    float _498 = _496 * _489;
    float _499 = _496 * _492;
    float _3699 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _500 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _3721 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _3732 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3743 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _504 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _520 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _570 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _560);
    float _571 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _560);
    float _572 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _560);
    float _576 = inversesqrt(dot(vec3(_570, _571, _572), vec3(_570, _571, _572)));
    float _577 = _570 * _576;
    float _578 = _571 * _576;
    float _579 = _572 * _576;
    float _585 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _586 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _604 = fma(_499, cbSceneParam._m0[5u].z, fma(_498, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _497));
    float _607 = fma(_499, cbSceneParam._m0[6u].z, fma(_498, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _497));
    float _610 = fma(_499, cbSceneParam._m0[7u].z, fma(_498, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _497));
    uint _623 = uint(roundEven(NORMAL.w)) * 13u;
    uint _625 = (_623 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _631 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * cbInstanceData._m0[_625].x;
    float _632 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_625].y;
    float _633 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_625].z;
    float _3754 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _637 = 1.0 - _504;
    float _638 = _634 * _637;
    float _639 = _635 * _637;
    float _640 = _636 * _637;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _504;
    float _646 = (_635 + (-0.039999999105930328369140625)) * _504;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _504;
    float _648 = _645 + 0.039999999105930328369140625;
    float _650 = _646 + 0.039999999105930328369140625;
    float _651 = _647 + 0.039999999105930328369140625;
    vec4 _660 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _585, cbSceneParam._m0[86u].y * _586));
    float _663 = _660.x * TEXCOORD_5.w;
    float _664 = dot(vec3(_497, _498, _499), vec3(_577, _578, _579));
    float _667 = _664 * 2.0;
    float _671 = (_667 * _497) - _577;
    float _672 = (_667 * _498) - _578;
    float _673 = (_667 * _499) - _579;
    float _677 = abs(dot(vec3(_577, _578, _579), vec3(_497, _498, _499)));
    float _3787 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = sqrt(_500);
    float _692 = exp2((_679 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_679 * 3.0));
    float _698 = (1.0 - _692) * ((_679 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _699 = _692 * _679;
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1037;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _762 = fma(_735, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _727));
        float _766 = fma(_735, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _727));
        float _770 = fma(_735, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _727));
        float _795 = _727 + _497;
        float _796 = _731 + _498;
        float _797 = _735 + _499;
        float _807 = fma(_797, cbModelParam._m0[26u].z, fma(_796, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _795)) - _762;
        float _808 = fma(_797, cbModelParam._m0[27u].z, fma(_796, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _795)) - _766;
        float _809 = fma(_797, cbModelParam._m0[28u].z, fma(_796, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _795)) - _770;
        float _813 = inversesqrt(dot(vec3(_807, _808, _809), vec3(_807, _808, _809)));
        float _826 = ((_813 * _807) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_762 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_813 * _808) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_766 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_813 * _809) / cbModelParam._m0[34u].z) + ((((((_770 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        float _865 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_831.x + (-0.5));
        float _867 = _865 * (_831.y + (-0.5));
        float _868 = _865 * (_831.z + (-0.5));
        float _875 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_838.x + (-0.5));
        float _877 = _875 * (_838.y + (-0.5));
        float _878 = _875 * (_838.z + (-0.5));
        float _885 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_845.x + (-0.5));
        float _887 = _885 * (_845.y + (-0.5));
        float _888 = _885 * (_845.z + (-0.5));
        float _895 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_852.x + (-0.5));
        float _897 = _895 * (_852.y + (-0.5));
        float _898 = _895 * (_852.z + (-0.5));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = _866 * 0.5;
        float _903 = _876 * 0.5;
        float _904 = _886 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _919 = (dot(vec3(_497, _498, _499), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _929 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3835 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_931 + 1.0))) + _936) * _899;
        float _946 = _867 * 0.5;
        float _947 = _877 * 0.5;
        float _948 = _887 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_497, _498, _499), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3868 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_973 + 1.0))) + _978) * _900;
        float _988 = _868 * 0.5;
        float _989 = _878 * 0.5;
        float _990 = _888 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_497, _498, _499), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3901 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1015 + 1.0))) + _1020) * _901;
        _1037 = _868;
        _1039 = _867;
        _1040 = _866;
        _1041 = _878;
        _1042 = _877;
        _1043 = _876;
        _1044 = _888;
        _1045 = _887;
        _1046 = _886;
        _1047 = _901;
        _1048 = _900;
        _1049 = _899;
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
    }
    else
    {
        _1037 = _1038;
        _1039 = _1038;
        _1040 = _1038;
        _1041 = _1038;
        _1042 = _1038;
        _1043 = _1038;
        _1044 = _1038;
        _1045 = _1038;
        _1046 = _1038;
        _1047 = _1038;
        _1048 = _1038;
        _1049 = _1038;
        _1050 = 0.0;
        _1051 = 0.0;
        _1052 = 0.0;
    }
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1078 = fma(_735, cbModelParam._m0[30u].z, fma(_731, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _727));
        float _1082 = fma(_735, cbModelParam._m0[31u].z, fma(_731, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _727));
        float _1086 = fma(_735, cbModelParam._m0[32u].z, fma(_731, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _727));
        float _1109 = _727 + _497;
        float _1110 = _731 + _498;
        float _1111 = _735 + _499;
        float _1121 = fma(_1111, cbModelParam._m0[30u].z, fma(_1110, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1109)) - _1078;
        float _1122 = fma(_1111, cbModelParam._m0[31u].z, fma(_1110, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1109)) - _1082;
        float _1123 = fma(_1111, cbModelParam._m0[32u].z, fma(_1110, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1109)) - _1086;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1078 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1082 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[35u].z) + ((((((_1086 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1177 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1144.x + (-0.5));
        float _1179 = _1177 * (_1144.y + (-0.5));
        float _1180 = _1177 * (_1144.z + (-0.5));
        float _1187 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1151.x + (-0.5));
        float _1189 = _1187 * (_1151.y + (-0.5));
        float _1190 = _1187 * (_1151.z + (-0.5));
        float _1197 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1158.x + (-0.5));
        float _1199 = _1197 * (_1158.y + (-0.5));
        float _1200 = _1197 * (_1158.z + (-0.5));
        float _1207 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1165.x + (-0.5));
        float _1209 = _1207 * (_1165.y + (-0.5));
        float _1210 = _1207 * (_1165.z + (-0.5));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = _1178 * 0.5;
        float _1215 = _1188 * 0.5;
        float _1216 = _1198 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_497, _498, _499), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3964 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1241 + 1.0))) + _1246) * _1211;
        float _1256 = _1179 * 0.5;
        float _1257 = _1189 * 0.5;
        float _1258 = _1199 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_497, _498, _499), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3997 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1283 + 1.0))) + _1288) * _1212;
        float _1298 = _1180 * 0.5;
        float _1299 = _1190 * 0.5;
        float _1300 = _1200 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_497, _498, _499), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4030 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1325 + 1.0))) + _1330) * _1213;
        _1347 = _1180;
        _1348 = _1179;
        _1349 = _1178;
        _1350 = _1190;
        _1351 = _1189;
        _1352 = _1188;
        _1353 = _1200;
        _1354 = _1199;
        _1355 = _1198;
        _1356 = _1213;
        _1357 = _1212;
        _1358 = _1211;
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
    }
    else
    {
        _1347 = _1038;
        _1348 = _1038;
        _1349 = _1038;
        _1350 = _1038;
        _1351 = _1038;
        _1352 = _1038;
        _1353 = _1038;
        _1354 = _1038;
        _1355 = _1038;
        _1356 = _1038;
        _1357 = _1038;
        _1358 = _1038;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1050)) + _1050;
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1051)) + _1051;
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1052)) + _1052;
    float _1394 = fma(_1373, cbSceneParam._m0[89u].z, fma(_1372, cbSceneParam._m0[89u].y, _1371 * cbSceneParam._m0[89u].x));
    float _1397 = fma(_1373, cbSceneParam._m0[90u].z, fma(_1372, cbSceneParam._m0[90u].y, _1371 * cbSceneParam._m0[90u].x));
    float _1400 = fma(_1373, cbSceneParam._m0[91u].z, fma(_1372, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1371));
    float _1415 = _671 * 0.5;
    float _1416 = _672 * 0.5;
    float _1417 = _673 * 0.5;
    float _1418 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1421 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1424 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1458;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1431 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1037, _1041, _1044, _1047));
        float _1435 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1439 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1040, _1043, _1046, _1049));
        float _1446 = dot(vec4(cbModelParam._m0[39u]), vec4(_1415, _1416, _1417, 1.0));
        _1458 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1446) ? 0.0 : (isnan(0.0) ? _1446 : max(0.0, _1446))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1458 = 1.0;
    }
    float _1469;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1460 = dot(vec4(cbModelParam._m0[40u]), vec4(_1415, _1416, _1417, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1473 = (_1469 * cbModelParam._m0[1u].x) + (_1458 * (1.0 - cbModelParam._m0[1u].x));
    float _1483 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _500);
    float _1484 = isnan(_1483) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1483 : min(cbModelParam._m0[25u].z, _1483));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1531 = fma(_735, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _727)) + cbModelParam._m0[13u].w;
        float _1535 = fma(_735, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _727)) + cbModelParam._m0[14u].w;
        float _1539 = fma(_735, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _727)) + cbModelParam._m0[15u].w;
        float _1542 = fma(_673, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671));
        float _1545 = fma(_673, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671));
        float _1548 = fma(_673, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671));
        float _1576;
        if (_1542 > 0.0)
        {
            _1576 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1576 = frontier_phi_14_12_ladder;
        }
        float _1751;
        if (_1545 > 0.0)
        {
            _1751 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1751 = frontier_phi_23_19_ladder;
        }
        float _2047;
        if (_1548 > 0.0)
        {
            _2047 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2047 = frontier_phi_35_30_ladder;
        }
        float _2049 = isnan(_1751) ? _1576 : (isnan(_1576) ? _1751 : min(_1576, _1751));
        float _2050 = isnan(_2047) ? _2049 : (isnan(_2049) ? _2047 : min(_2049, _2047));
        float _2054 = (_2050 * _1542) + _1531;
        float _2055 = (_2050 * _1545) + _1535;
        float _2056 = (_2050 * _1548) + _1539;
        float _2057 = _2050 * 9.9999997473787516355514526367188e-05;
        float _2059 = (-1.0) - _2057;
        float _2061 = _2057 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2056 > _2061) || ((_2056 < _2059) || ((_2055 > _2061) || ((_2055 < _2059) || ((_2054 < _2059) || (_2054 > _2061))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2201 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2056, cbModelParam._m0[9u].z, fma(_2055, cbModelParam._m0[9u].y, _2054 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2056, cbModelParam._m0[10u].z, fma(_2055, cbModelParam._m0[10u].y, _2054 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2056, cbModelParam._m0[11u].z, fma(_2055, cbModelParam._m0[11u].y, _2054 * cbModelParam._m0[11u].x))), _1484);
            frontier_phi_13_35_ladder = _2201.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2201.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2201.x * cbModelParam._m0[1u].y;
        }
        _1564 = frontier_phi_13_35_ladder_2;
        _1566 = frontier_phi_13_35_ladder_1;
        _1568 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_671, _672, _673), _1484);
        _1564 = _1552.x * cbModelParam._m0[1u].y;
        _1566 = _1552.y * cbModelParam._m0[1u].y;
        _1568 = _1552.z * cbModelParam._m0[1u].y;
    }
    float _1572 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _500);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1572 : min(cbModelParam._m0[25u].w, _1572));
    float _1666;
    float _1668;
    float _1670;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1630 = fma(_735, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _727)) + cbModelParam._m0[21u].w;
        float _1634 = fma(_735, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _727)) + cbModelParam._m0[22u].w;
        float _1638 = fma(_735, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _727)) + cbModelParam._m0[23u].w;
        float _1641 = fma(_673, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671));
        float _1644 = fma(_673, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671));
        float _1647 = fma(_673, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671));
        float _1756;
        if (_1641 > 0.0)
        {
            _1756 = abs((1.0 - _1630) / _1641);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1630 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1756 = frontier_phi_25_21_ladder;
        }
        float _2074;
        if (_1644 > 0.0)
        {
            _2074 = abs((1.0 - _1634) / _1644);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1634 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2074 = frontier_phi_37_32_ladder;
        }
        float _2412;
        if (_1647 > 0.0)
        {
            _2412 = abs((1.0 - _1638) / _1647);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1638 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2412 = frontier_phi_47_44_ladder;
        }
        float _2414 = isnan(_2074) ? _1756 : (isnan(_1756) ? _2074 : min(_1756, _2074));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1641) + _1630;
        float _2420 = (_2415 * _1644) + _1634;
        float _2421 = (_2415 * _1647) + _1638;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2422;
        float _2425 = _2422 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2421 > _2425) || ((_2421 < _2423) || ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 < _2423) || (_2419 > _2425))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2421, cbModelParam._m0[17u].z, fma(_2420, cbModelParam._m0[17u].y, _2419 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2421, cbModelParam._m0[18u].z, fma(_2420, cbModelParam._m0[18u].y, _2419 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2421, cbModelParam._m0[19u].z, fma(_2420, cbModelParam._m0[19u].y, _2419 * cbModelParam._m0[19u].x))), _1573);
            frontier_phi_22_47_ladder = _2543.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2543.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2543.x * cbModelParam._m0[1u].z;
        }
        _1666 = frontier_phi_22_47_ladder_2;
        _1668 = frontier_phi_22_47_ladder_1;
        _1670 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_671, _672, _673), _1573);
        _1666 = _1650.x * cbModelParam._m0[1u].z;
        _1668 = _1650.y * cbModelParam._m0[1u].z;
        _1670 = _1650.z * cbModelParam._m0[1u].z;
    }
    float _1683 = (((_698 * _648) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1666 - _1564)) + _1564);
    float _1685 = (((_698 * _650) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1668 - _1566)) + _1566);
    float _1687 = (((_698 * _651) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1670 - _1568)) + _1568);
    float _1690 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1685, cbSceneParam._m0[89u].y, _1683 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1685, cbSceneParam._m0[90u].y, _1683 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1685, cbSceneParam._m0[91u].y, _1683 * cbSceneParam._m0[91u].x));
    float _1730 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1734 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1738 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1742 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1743 = _1730 / _1742;
    float _1744 = _1734 / _1742;
    float _1745 = _1738 / _1742;
    float _1892;
    float _1893;
    float _1894;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1772 = ((uint(_1745 > cbSceneParam._m0[59u].y) + uint(_1745 > cbSceneParam._m0[59u].x)) + uint(_1745 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1773 = _1772 + 43u;
        uint _1781 = _1772 + 44u;
        uint _1789 = _1772 + 45u;
        uint _1797 = _1772 + 46u;
        float _1808 = fma(_1742, cbSceneParam._m0[_1773].w, fma(_1738, cbSceneParam._m0[_1773].z, fma(_1734, cbSceneParam._m0[_1773].y, _1730 * cbSceneParam._m0[_1773].x)));
        float _1812 = fma(_1742, cbSceneParam._m0[_1781].w, fma(_1738, cbSceneParam._m0[_1781].z, fma(_1734, cbSceneParam._m0[_1781].y, _1730 * cbSceneParam._m0[_1781].x)));
        float _1820 = fma(_1742, cbSceneParam._m0[_1797].w, fma(_1738, cbSceneParam._m0[_1797].z, fma(_1734, cbSceneParam._m0[_1797].y, _1730 * cbSceneParam._m0[_1797].x)));
        float _1825 = cbSceneParam._m0[33u].z * _1820;
        float _1827 = cbSceneParam._m0[33u].w * _1820;
        float _1830 = fma(_1742, cbSceneParam._m0[_1789].w, fma(_1738, cbSceneParam._m0[_1789].z, fma(_1734, cbSceneParam._m0[_1789].y, _1730 * cbSceneParam._m0[_1789].x))) / _1820;
        float _1878 = (cbSceneParam._m0[33u].x - sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745))) * cbSceneParam._m0[33u].y;
        float _4156 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1885 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1825 + _1808) / _1820, (_1827 + _1812) / _1820), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1827 + _1808) / _1820, (_1812 - _1825) / _1820), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1808 - _1825) / _1820, (_1812 - _1827) / _1820), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1808 - _1827) / _1820, (_1825 + _1812) / _1820), _1830), 0.0)).x), vec4(0.25)));
        _1892 = 1.0 - (_1885 * cbSceneParam._m0[34u].x);
        _1893 = 1.0 - (_1885 * cbSceneParam._m0[34u].y);
        _1894 = 1.0 - (_1885 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1892 = 1.0;
        _1893 = 1.0;
        _1894 = 1.0;
    }
    float _1958;
    float _1960;
    float _1962;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1946 = fma(_1742, cbSceneParam._m0[63u].w, fma(_1738, cbSceneParam._m0[63u].z, fma(_1734, cbSceneParam._m0[63u].y, _1730 * cbSceneParam._m0[63u].x)));
        float _1947 = fma(_1742, cbSceneParam._m0[60u].w, fma(_1738, cbSceneParam._m0[60u].z, fma(_1734, cbSceneParam._m0[60u].y, _1730 * cbSceneParam._m0[60u].x))) / _1946;
        float _1948 = fma(_1742, cbSceneParam._m0[61u].w, fma(_1738, cbSceneParam._m0[61u].z, fma(_1734, cbSceneParam._m0[61u].y, _1730 * cbSceneParam._m0[61u].x))) / _1946;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1947 >= cbSceneParam._m0[64u].x) && (_1948 >= cbSceneParam._m0[64u].y)) && (_1947 <= cbSceneParam._m0[64u].z)) && (_1948 <= cbSceneParam._m0[64u].w))
        {
            float _2087 = fma(_1742, cbSceneParam._m0[62u].w, fma(_1738, cbSceneParam._m0[62u].z, fma(_1734, cbSceneParam._m0[62u].y, _1730 * cbSceneParam._m0[62u].x))) / _1946;
            float _2091 = isnan(cbSceneParam._m0[41u].w) ? _2087 : (isnan(_2087) ? cbSceneParam._m0[41u].w : max(_2087, cbSceneParam._m0[41u].w));
            float _2134 = (cbSceneParam._m0[33u].x - sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745))) * cbSceneParam._m0[33u].y;
            float _4172 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
            float _2141 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1947, cbSceneParam._m0[33u].w + _1948), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1947, _1948 - cbSceneParam._m0[33u].z), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1947 - cbSceneParam._m0[33u].z, _1948 - cbSceneParam._m0[33u].w), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1947 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1948), _2091), 0.0)).x), vec4(0.25)));
            float _2145 = 1.0 - (_2141 * cbSceneParam._m0[34u].x);
            float _2146 = 1.0 - (_2141 * cbSceneParam._m0[34u].y);
            float _2147 = 1.0 - (_2141 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2147) ? _1894 : (isnan(_1894) ? _2147 : min(_1894, _2147));
            frontier_phi_34_33_ladder_1 = isnan(_2146) ? _1893 : (isnan(_1893) ? _2146 : min(_1893, _2146));
            frontier_phi_34_33_ladder_2 = isnan(_2145) ? _1892 : (isnan(_1892) ? _2145 : min(_1892, _2145));
        }
        else
        {
            frontier_phi_34_33_ladder = _1894;
            frontier_phi_34_33_ladder_1 = _1893;
            frontier_phi_34_33_ladder_2 = _1892;
        }
        _1958 = frontier_phi_34_33_ladder_2;
        _1960 = frontier_phi_34_33_ladder_1;
        _1962 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1958 = _1892;
        _1960 = _1893;
        _1962 = _1894;
    }
    uvec4 _1967 = floatBitsToUint(cbInstanceData._m0[_623 + 5u]);
    uint _1969 = _1967.x * 14u;
    uint _1970 = _1969 + 13u;
    float _1977 = _663 + (-1.0);
    float _1982 = (cbLight._m0[_1970].x * _1977) + 1.0;
    float _1983 = (cbLight._m0[_1970].y * _1977) + 1.0;
    float _1984 = (cbLight._m0[_1970].z * _1977) + 1.0;
    float _1985 = (cbLight._m0[_1970].w * _1977) + 1.0;
    uint _1986 = _1969 + 5u;
    float _1992 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
    uint _1996 = _1969 + 4u;
    float _2006 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
    uint _2010 = _1969 | 1u;
    float _2021 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_497, _498, _499));
    float _2024 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_497, _498, _499));
    float _4208 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _4219 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2029 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _2031 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * 0.3183098733425140380859375;
    float _2038 = ((cbLight._m0[_1986].x * _1992) * _2031) + (((cbLight._m0[_1996].x * _1958) * _2006) * _2029);
    float _2039 = ((_1992 * cbLight._m0[_1986].y) * _2031) + (((cbLight._m0[_1996].y * _1960) * _2006) * _2029);
    float _2040 = ((_1992 * cbLight._m0[_1986].z) * _2031) + (((cbLight._m0[_1996].z * _1962) * _2006) * _2029);
    uvec4 _2044 = floatBitsToUint(cbLight._m0[_1969 + 12u]);
    bool _2046 = _2044.x == 0u;
    float _2148;
    float _2150;
    float _2152;
    if (_2046)
    {
        _2148 = _2038;
        _2150 = _2039;
        _2152 = _2040;
    }
    else
    {
        uint _2156 = _1969 + 6u;
        float _2172 = (dot(vec3(cbLight._m0[_1969 + 2u].xyz), vec3(_497, _498, _499)) * 0.5) + 0.5;
        float _2173 = _2172 * _2172;
        float _4230 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2174 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2175 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2148 = (((cbLight._m0[_2156].x * 0.3183098733425140380859375) * _2174) * _2175) + _2038;
        _2150 = (((cbLight._m0[_2156].y * 0.3183098733425140380859375) * _2174) * _2175) + _2039;
        _2152 = (((cbLight._m0[_2156].z * 0.3183098733425140380859375) * _2174) * _2175) + _2040;
    }
    bool _2155 = _2044.y == 0u;
    float _2210;
    float _2212;
    float _2214;
    if (_2155)
    {
        _2210 = _2148;
        _2212 = _2150;
        _2214 = _2152;
    }
    else
    {
        uint _2383 = _1969 + 7u;
        float _2399 = (dot(vec3(cbLight._m0[_1969 + 3u].xyz), vec3(_497, _498, _499)) * 0.5) + 0.5;
        float _2400 = _2399 * _2399;
        float _4246 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2401 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2402 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2210 = (((cbLight._m0[_2383].x * 0.3183098733425140380859375) * _2401) * _2402) + _2148;
        _2212 = (((cbLight._m0[_2383].y * 0.3183098733425140380859375) * _2401) * _2402) + _2150;
        _2214 = (((cbLight._m0[_2383].z * 0.3183098733425140380859375) * _2401) * _2402) + _2152;
    }
    uint _2217 = _1969 + 8u;
    float _2230 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _500) * 0.949999988079071044921875);
    float _2231 = _2230 * _2230;
    float _2232 = cbLight._m0[_1969].x + _577;
    float _2233 = cbLight._m0[_1969].y + _578;
    float _2234 = cbLight._m0[_1969].z + _579;
    float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
    float _2239 = _2238 * _2232;
    float _2240 = _2238 * _2233;
    float _2241 = _2238 * _2234;
    float _2242 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_1969].xyz));
    float _4262 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2245 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _4273 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _2246 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2247 = dot(vec3(_497, _498, _499), vec3(_2239, _2240, _2241));
    float _4284 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2251 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_2239, _2240, _2241));
    float _4295 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2255 = _2231 * _2231;
    float _2259 = ((_2250 * _2250) * (_2255 + (-1.0))) + 1.0;
    float _2267 = exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0);
    float _2268 = 0.959999978542327880859375 - _645;
    float _2270 = 0.959999978542327880859375 - _646;
    float _2271 = 0.959999978542327880859375 - _647;
    float _2278 = 1.0 - _2231;
    float _2289 = (0.5 / (((_2246 * ((_2245 * _2278) + _2231)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2278) + _2231) * _2245))) * _2245;
    float _4306 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2255 / ((_2259 * _2259) * 3.141590118408203125));
    uint _2305 = _1969 + 9u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _500) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2010].x + _577;
    float _2319 = cbLight._m0[_2010].y + _578;
    float _2320 = cbLight._m0[_2010].z + _579;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_2010].xyz));
    float _4317 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2332 = dot(vec3(_497, _498, _499), vec3(_2325, _2326, _2327));
    float _4328 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2325, _2326, _2327));
    float _4339 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2317 * _2317;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2351 = exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0);
    float _2358 = 1.0 - _2317;
    float _2368 = (0.5 / (((_2246 * ((_2331 * _2358) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2358) + _2317) * _2331))) * _2331;
    float _4350 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    float _2380 = (((((_2351 * _2268) + _648) * cbLight._m0[_2305].x) * _2370) * _1992) + ((((cbLight._m0[_2217].x * _1958) * ((_2267 * _2268) + _648)) * _2291) * _2006);
    float _2381 = (((((_2351 * _2270) + _650) * cbLight._m0[_2305].y) * _2370) * _1992) + ((((cbLight._m0[_2217].y * _1960) * ((_2267 * _2270) + _650)) * _2291) * _2006);
    float _2382 = (((((_2351 * _2271) + _651) * cbLight._m0[_2305].z) * _2370) * _1992) + ((((cbLight._m0[_2217].z * _1962) * ((_2267 * _2271) + _651)) * _2291) * _2006);
    float _2438;
    float _2440;
    float _2442;
    if (_2046)
    {
        _2438 = _2380;
        _2440 = _2381;
        _2442 = _2382;
    }
    else
    {
        uint _2444 = _1969 + 2u;
        uint _2448 = _1969 + 10u;
        float _2462 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2444].w)) * _500) * 0.949999988079071044921875);
        float _2463 = _2462 * _2462;
        float _2464 = cbLight._m0[_2444].x + _577;
        float _2465 = cbLight._m0[_2444].y + _578;
        float _2466 = cbLight._m0[_2444].z + _579;
        float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
        float _2471 = _2470 * _2464;
        float _2472 = _2470 * _2465;
        float _2473 = _2470 * _2466;
        float _2474 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_2444].xyz));
        float _4361 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2478 = dot(vec3(_497, _498, _499), vec3(_2471, _2472, _2473));
        float _4372 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2482 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_2471, _2472, _2473));
        float _4383 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2486 = _2463 * _2463;
        float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
        float _2497 = exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0);
        float _2504 = 1.0 - _2463;
        float _2514 = (0.5 / (((_2246 * ((_2477 * _2504) + _2463)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2504) + _2463) * _2477))) * _2477;
        float _4394 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2516 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
        float _2517 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2438 = (((((_2497 * _2268) + _648) * cbLight._m0[_2448].x) * _2516) * _2517) + _2380;
        _2440 = (((((_2497 * _2270) + _650) * cbLight._m0[_2448].y) * _2516) * _2517) + _2381;
        _2442 = (((((_2497 * _2271) + _651) * cbLight._m0[_2448].z) * _2516) * _2517) + _2382;
    }
    float _2548;
    float _2550;
    float _2552;
    if (_2155)
    {
        _2548 = _2438;
        _2550 = _2440;
        _2552 = _2442;
    }
    else
    {
        uint _2559 = _1969 + 3u;
        uint _2563 = _1969 + 11u;
        float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2559].w)) * _500) * 0.949999988079071044921875);
        float _2578 = _2577 * _2577;
        float _2579 = cbLight._m0[_2559].x + _577;
        float _2580 = cbLight._m0[_2559].y + _578;
        float _2581 = cbLight._m0[_2559].z + _579;
        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
        float _2586 = _2585 * _2579;
        float _2587 = _2585 * _2580;
        float _2588 = _2585 * _2581;
        float _2589 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_2559].xyz));
        float _4410 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2593 = dot(vec3(_497, _498, _499), vec3(_2586, _2587, _2588));
        float _4421 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2597 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_2586, _2587, _2588));
        float _4432 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2601 = _2578 * _2578;
        float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
        float _2612 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
        float _2619 = 1.0 - _2578;
        float _2629 = (0.5 / (((_2246 * ((_2592 * _2619) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2619) + _2578) * _2592))) * _2592;
        float _4443 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2631 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
        float _2632 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2548 = (((((_2612 * _2268) + _648) * cbLight._m0[_2563].x) * _2631) * _2632) + _2438;
        _2550 = (((((_2612 * _2270) + _650) * cbLight._m0[_2563].y) * _2631) * _2632) + _2440;
        _2552 = (((((_2612 * _2271) + _651) * cbLight._m0[_2563].z) * _2631) * _2632) + _2442;
    }
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_1967.y == 0u)
    {
        uvec4 _2653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2654 = _2653.x;
        uint _2665 = uint((float(_2653.y) * floor(float(uint(cbSceneParam._m0[85u].y * _586) / _2654))) + floor(float(uint(cbSceneParam._m0[85u].x * _585) / _2654)));
        float _2675 = (log2(_1745 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2676 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        uint _2679 = uint(isnan(14.0) ? _2676 : (isnan(_2676) ? 14.0 : min(_2676, 14.0)));
        uvec4 _2684 = texelFetch(g_lightClusterGridBuffer, int(((_2679 << 2u) + (_2665 << 6u)) >> 2u));
        uint _2685 = _2684.x;
        uint _2686 = _2653.z;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        if (((((1u << ((_2686 >> 4u) & 15u)) + 4294967295u) & _2685) == 0u) || ((_2686 & 240u) == 0u))
        {
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
        }
        else
        {
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            uint _2916 = 0u;
            uint _2925;
            bool _2926;
            for (;;)
            {
                _2925 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_2916 << 2u)) >> 2u)).x;
                _2926 = _2925 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2926)
                {
                    frontier_phi_66_pred = _2915;
                    frontier_phi_66_pred_1 = _2914;
                    frontier_phi_66_pred_2 = _2913;
                    frontier_phi_66_pred_3 = _2912;
                    frontier_phi_66_pred_4 = _2911;
                    frontier_phi_66_pred_5 = _2910;
                }
                else
                {
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    uint _3040;
                    _3034 = _2910;
                    _3035 = _2911;
                    _3036 = _2912;
                    _3037 = _2913;
                    _3038 = _2914;
                    _3039 = _2915;
                    _3040 = _2925;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    for (;;)
                    {
                        uint _3044 = uint(findLSB(_3040)) + (_2916 << 5u);
                        uint _3041 = (_3040 + 4294967295u) & _3040;
                        uint _3046 = _3044 * 48u;
                        vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 3u)).x));
                        uint _3066 = (_3044 * 48u) + 4u;
                        vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 3u)).x));
                        uint _3085 = (_3044 * 48u) + 8u;
                        vec3 _3096 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x));
                        float _3100 = _3060.x - _1743;
                        float _3101 = _3060.y - _1744;
                        float _3102 = _3060.z - _1745;
                        float _3103 = dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102));
                        float _3106 = inversesqrt(_3103);
                        float _3107 = _3106 * _3100;
                        float _3108 = _3106 * _3101;
                        float _3109 = _3106 * _3102;
                        float _3110 = dot(vec3(_604, _607, _610), vec3(_3107, _3108, _3109));
                        float _3115 = 1.0 - (_3103 * _3060.w);
                        float _4469 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3116 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3117 = sqrt(_3103) * _3079.w;
                        float _3120 = 1.39999997615814208984375 / (_3117 + 1.39999997615814208984375);
                        float _3121 = _3120 * _3120;
                        float _3124 = ((1.0 - _3121) * _3110) + _3121;
                        float _3127 = _3117 * _3117;
                        float _3131 = ((isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))) * _3116) / ((_3127 * 0.699999988079071044921875) + 1.0);
                        float _3135 = (-0.0) - _1743;
                        float _3136 = (-0.0) - _1744;
                        float _3137 = (-0.0) - _1745;
                        float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                        float _3142 = _3141 * _3135;
                        float _3143 = _3141 * _3136;
                        float _3144 = _3141 * _3137;
                        float _3151 = exp2(log2(1.0 / ((_3127 * 3.5) + 5.0)) * 0.25);
                        float _3152 = 1.0 - _679;
                        float _3159 = sqrt(1.0 - ((1.0 - (_3152 * _3152)) * (1.0 - (_3151 * _3151))));
                        float _3160 = _3159 * _3159;
                        float _3161 = _3160 * _3160;
                        float _3162 = _3142 + _3107;
                        float _3163 = _3143 + _3108;
                        float _3164 = _3144 + _3109;
                        float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                        float _3172 = dot(vec3(_604, _607, _610), vec3(_3142, _3143, _3144));
                        float _4485 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3175 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3176 = dot(vec3(_604, _607, _610), vec3(_3168 * _3162, _3168 * _3163, _3168 * _3164));
                        float _4496 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3179 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3183 = ((_3179 * _3179) * (_3161 + (-1.0))) + 1.0;
                        float _3184 = _3120 * _3160;
                        float _3185 = _3184 * _3184;
                        float _3188 = ((1.0 - _3185) * _3110) + _3185;
                        float _4507 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3189 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3190 = 1.0 - _3160;
                        float _3200 = (0.5 / (((_3189 * ((_3175 * _3190) + _3160)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3160) * _3175))) * _3189;
                        float _4518 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3211 = (((_3161 * 3.1415927410125732421875) * (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) / ((_3183 * _3183) * ((_3127 * 2.1991131305694580078125) + 3.141590118408203125))) * _3116;
                        _2969 = (_3131 * _3079.x) + _3037;
                        _2970 = (_3131 * _3079.y) + _3038;
                        _2971 = (_3131 * _3079.z) + _3039;
                        _2966 = (_3211 * _3096.x) + _3034;
                        _2967 = (_3211 * _3096.y) + _3035;
                        _2968 = (_3211 * _3096.z) + _3036;
                        if (_3041 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3034 = _2966;
                            _3035 = _2967;
                            _3036 = _2968;
                            _3037 = _2969;
                            _3038 = _2970;
                            _3039 = _2971;
                            _3040 = _3041;
                        }
                    }
                    frontier_phi_66_pred = _2971;
                    frontier_phi_66_pred_1 = _2970;
                    frontier_phi_66_pred_2 = _2969;
                    frontier_phi_66_pred_3 = _2968;
                    frontier_phi_66_pred_4 = _2967;
                    frontier_phi_66_pred_5 = _2966;
                }
                _2776 = frontier_phi_66_pred;
                _2774 = frontier_phi_66_pred_1;
                _2772 = frontier_phi_66_pred_2;
                _2770 = frontier_phi_66_pred_3;
                _2768 = frontier_phi_66_pred_4;
                _2766 = frontier_phi_66_pred_5;
                uint _2917 = _2916 + 1u;
                if (_2917 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2910 = _2766;
                    _2911 = _2768;
                    _2912 = _2770;
                    _2913 = _2772;
                    _2914 = _2774;
                    _2915 = _2776;
                    _2916 = _2917;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
        }
        uvec4 _2779 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2780 = _2779.z;
        uint _2782 = (_2780 >> 8u) & 15u;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        if (((4294967295u << _2782) & _2685) == 0u)
        {
            _2878 = _2765;
            _2880 = _2767;
            _2882 = _2769;
            _2884 = _2771;
            _2886 = _2773;
            _2888 = _2775;
        }
        else
        {
            float _2903 = inversesqrt(dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745)));
            float _2904 = _2903 * _1743;
            float _2905 = _2903 * _1744;
            float _2906 = _2903 * _1745;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2782 < ((_2780 >> 12u) & 15u))
            {
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _3017 = _2765;
                float _3018 = _2767;
                float _3019 = _2769;
                float _3020 = _2771;
                float _3021 = _2773;
                float _3022 = _2775;
                uint _3023 = _2782;
                uint _3032;
                bool _3033;
                for (;;)
                {
                    _3032 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_3023 << 2u)) >> 2u)).x;
                    _3033 = _3032 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3033)
                    {
                        frontier_phi_72_pred = _3022;
                        frontier_phi_72_pred_1 = _3021;
                        frontier_phi_72_pred_2 = _3020;
                        frontier_phi_72_pred_3 = _3019;
                        frontier_phi_72_pred_4 = _3018;
                        frontier_phi_72_pred_5 = _3017;
                    }
                    else
                    {
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3229 = _3017;
                        float _3230 = _3018;
                        float _3231 = _3019;
                        float _3232 = _3020;
                        float _3233 = _3021;
                        float _3234 = _3022;
                        uint _3235 = _3032;
                        uint _3236;
                        vec4 _3261;
                        float _3262;
                        vec4 _3277;
                        vec3 _3289;
                        vec4 _3305;
                        vec4 _3321;
                        float _3368;
                        bool _3369;
                        for (;;)
                        {
                            uint _3246 = ((_3023 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3235));
                            _3236 = (_3235 + 4294967295u) & _3235;
                            uint _3248 = _3246 * 40u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3262 = _3261.w;
                            uint _3264 = (_3246 * 40u) + 4u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3246 * 40u) + 8u;
                            _3289 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x));
                            uint _3292 = (_3246 * 40u) + 16u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3308 = (_3246 * 40u) + 20u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3324 = (_3246 * 40u) + 24u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3343 = (_3246 * 40u) + 28u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3368 = fma(_1745, _3356.z, fma(_1744, _3356.y, _3356.x * _1743)) + _3356.w;
                            _3369 = !((fma(_1745, _3337.z, fma(_1744, _3337.y, _3337.x * _1743)) + _3337.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3369)
                            {
                                float _3396 = _3261.x - _1743;
                                float _3397 = _3261.y - _1744;
                                float _3398 = _3261.z - _1745;
                                float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                                float _3402 = inversesqrt(_3399);
                                float _3403 = _3402 * _3396;
                                float _3404 = _3402 * _3397;
                                float _3405 = _3402 * _3398;
                                float _3409 = 1.0 - (_3399 / (_3262 * _3262));
                                float _4529 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3414 = sqrt(_3399) * _3277.w;
                                float _3416 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                                float _3417 = _3416 * _3416;
                                float _3420 = ((1.0 - _3417) * dot(vec3(_3403, _3404, _3405), vec3(_604, _607, _610))) + _3417;
                                float _3423 = _3414 * _3414;
                                float _3427 = (fma(_1745, _3305.z, fma(_1744, _3305.y, _3305.x * _1743)) + _3305.w) / _3368;
                                float _3428 = (fma(_1745, _3321.z, fma(_1744, _3321.y, _3321.x * _1743)) + _3321.w) / _3368;
                                float _3432 = 1.0 - dot(vec2(_3427, _3428), vec2(_3427, _3428));
                                float _4545 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3434 = _3433 * (((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3410) / ((_3423 * 0.699999988079071044921875) + 1.0));
                                float _3446 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                                float _3447 = 1.0 - _679;
                                float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                                float _3455 = _3454 * _3454;
                                float _3456 = _3455 * _3455;
                                float _3457 = _3403 - _2904;
                                float _3458 = _3404 - _2905;
                                float _3459 = _3405 - _2906;
                                float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                                float _3467 = dot(vec3(_604, _607, _610), vec3((-0.0) - _2904, (-0.0) - _2905, (-0.0) - _2906));
                                float _4556 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3471 = dot(vec3(_604, _607, _610), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                                float _4567 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                                float _3479 = _3416 * _3455;
                                float _3480 = _3479 * _3479;
                                float _3486 = ((1.0 - _3480) * dot(vec3(_604, _607, _610), vec3(_3403, _3404, _3405))) + _3480;
                                float _4578 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3488 = 1.0 - _3455;
                                float _3498 = (0.5 / (((_3487 * ((_3470 * _3488) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3487 * _3488) + _3455) * _3470))) * _3487;
                                float _4589 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3508 = (_3433 * _3410) * (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) / ((_3478 * _3478) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3434 * _3277.y;
                                frontier_phi_78_pred_1 = _3434 * _3277.x;
                                frontier_phi_78_pred_2 = _3508 * _3289.z;
                                frontier_phi_78_pred_3 = _3508 * _3289.y;
                                frontier_phi_78_pred_4 = _3508 * _3289.x;
                                frontier_phi_78_pred_5 = _3434 * _3277.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3516 = frontier_phi_78_pred;
                            _3515 = frontier_phi_78_pred_1;
                            _3514 = frontier_phi_78_pred_2;
                            _3513 = frontier_phi_78_pred_3;
                            _3512 = frontier_phi_78_pred_4;
                            _3517 = frontier_phi_78_pred_5;
                            _3219 = _3515 + _3232;
                            _3220 = _3516 + _3233;
                            _3221 = _3517 + _3234;
                            _3216 = _3512 + _3229;
                            _3217 = _3513 + _3230;
                            _3218 = _3514 + _3231;
                            if (_3236 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3236;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3221;
                        frontier_phi_72_pred_1 = _3220;
                        frontier_phi_72_pred_2 = _3219;
                        frontier_phi_72_pred_3 = _3218;
                        frontier_phi_72_pred_4 = _3217;
                        frontier_phi_72_pred_5 = _3216;
                    }
                    _2889 = frontier_phi_72_pred;
                    _2887 = frontier_phi_72_pred_1;
                    _2885 = frontier_phi_72_pred_2;
                    _2883 = frontier_phi_72_pred_3;
                    _2881 = frontier_phi_72_pred_4;
                    _2879 = frontier_phi_72_pred_5;
                    uint _3024 = _3023 + 1u;
                    if (_3024 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3017 = _2879;
                        _3018 = _2881;
                        _3019 = _2883;
                        _3020 = _2885;
                        _3021 = _2887;
                        _3022 = _2889;
                        _3023 = _3024;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2889;
                frontier_phi_60_61_ladder_1 = _2887;
                frontier_phi_60_61_ladder_2 = _2883;
                frontier_phi_60_61_ladder_3 = _2881;
                frontier_phi_60_61_ladder_4 = _2879;
                frontier_phi_60_61_ladder_5 = _2885;
            }
            else
            {
                frontier_phi_60_61_ladder = _2775;
                frontier_phi_60_61_ladder_1 = _2773;
                frontier_phi_60_61_ladder_2 = _2769;
                frontier_phi_60_61_ladder_3 = _2767;
                frontier_phi_60_61_ladder_4 = _2765;
                frontier_phi_60_61_ladder_5 = _2771;
            }
            _2878 = frontier_phi_60_61_ladder_4;
            _2880 = frontier_phi_60_61_ladder_3;
            _2882 = frontier_phi_60_61_ladder_2;
            _2884 = frontier_phi_60_61_ladder_5;
            _2886 = frontier_phi_60_61_ladder_1;
            _2888 = frontier_phi_60_61_ladder;
        }
        float _2893 = isnan(1.0) ? _663 : (isnan(_663) ? 1.0 : min(_663, 1.0));
        _2698 = (_2893 * _2884) + _2210;
        _2700 = (_2893 * _2886) + _2212;
        _2702 = (_2893 * _2888) + _2214;
        _2704 = ((_2878 * _648) * _2893) + _2548;
        _2706 = ((_2880 * _650) * _2893) + _2550;
        _2708 = ((_2882 * _651) * _2893) + _2552;
    }
    else
    {
        _2698 = _2210;
        _2700 = _2212;
        _2702 = _2214;
        _2704 = _2548;
        _2706 = _2550;
        _2708 = _2552;
    }
    float _4605 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4616 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4627 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    uint _2728 = _623 + 6u;
    float _2736 = _585 / cbSceneParam._m0[86u].x;
    float _2737 = _586 / cbSceneParam._m0[86u].y;
    vec4 _2751 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, (log2((isnan(cbSceneParam._m0[77u].w) ? _520 : (isnan(_520) ? cbSceneParam._m0[77u].w : min(_520, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2753 = _2751.x;
    float _2754 = _2751.y;
    float _2755 = _2751.z;
    float _2756 = _2751.w;
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    if (_520 > cbSceneParam._m0[78u].w)
    {
        float _2790 = isnan(_520) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _520 : min(cbSceneParam._m0[80u].w, _520));
        float _2791 = _2790 / _520;
        float _2802 = _2791 * _570;
        float _2803 = _571 * _2791;
        float _2804 = (-0.0) - _2803;
        float _2806 = _2791 * _572;
        float _2808 = (cbSceneParam._m0[77u].w * _2804) / _2790;
        float _2809 = _2808 + cbSceneParam._m0[79u].w;
        float _2810 = cbSceneParam._m0[79u].w - _2803;
        float _2816 = sqrt(((_2802 * _2802) + (_2803 * _2803)) + (_2806 * _2806));
        float _2819 = (1.0 - (cbSceneParam._m0[77u].w / _2790)) * _2816;
        float _2824 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2826 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2979;
        if (abs((_2804 - _2808) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2979 = ((((_2809 > 0.0) ? exp2(_2824 * _2809) : (2.0 - exp2(_2826 * _2809))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2819;
        }
        else
        {
            float _2939 = 1.0 / cbSceneParam._m0[80u].x;
            float _2940 = isnan(_2810) ? _2809 : (isnan(_2809) ? _2810 : max(_2809, _2810));
            float _2941 = isnan(_2810) ? _2809 : (isnan(_2809) ? _2810 : min(_2809, _2810));
            float _2950 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : min(_2940, 0.0));
            float _2951 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : min(_2941, 0.0));
            _2979 = ((abs(_2816 / _2804) * cbSceneParam._m0[80u].y) * ((((_2950 - _2951) * 2.0) - ((exp2(_2824 * (isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0)))) - exp2(_2824 * (isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))))) * _2939)) - ((exp2(_2826 * _2950) - exp2(_2826 * _2951)) * _2939))) + (_2819 * cbSceneParam._m0[80u].z);
        }
        vec4 _2981 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, 1.0), 0.0);
        float _2990 = exp2((_2979 * (-1.44269502162933349609375)) * (1.0 - _2981.w));
        float _2991 = log2(_2990);
        float _3007 = log2(_2756);
        _2828 = (exp2(_3007 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].x)) * _2981.x) / cbSceneParam._m0[78u].x)) + _2753;
        _2830 = (exp2(_3007 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].y)) * _2981.y) / cbSceneParam._m0[78u].y)) + _2754;
        _2832 = (exp2(_3007 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].z)) * _2981.z) / cbSceneParam._m0[78u].z)) + _2755;
        _2834 = _2990 * _2756;
    }
    else
    {
        _2828 = _2753;
        _2830 = _2754;
        _2832 = _2755;
        _2834 = _2756;
    }
    float _2846 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2847 = _2846 == 3.0;
    float _2848 = log2(_2834);
    float _2855 = exp2(_2848 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2698 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _663))) + ((_2704 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1473)) * cbPerFrame._m0[3u].x));
    float _2856 = exp2(_2848 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2700 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _663))) + ((_2706 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1473)) * cbPerFrame._m0[3u].x));
    float _2857 = exp2(_2848 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2702 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _663))) + ((_2708 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1473)) * cbPerFrame._m0[3u].x));
    float _2866 = (_2846 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2866 * (_2847 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2828)));
    SV_Target.y = _2866 * (_2847 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2830)));
    SV_Target.z = _2866 * (_2847 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2832)));
    SV_Target.w = cbInstanceData._m0[_2728].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2728].w;
}


