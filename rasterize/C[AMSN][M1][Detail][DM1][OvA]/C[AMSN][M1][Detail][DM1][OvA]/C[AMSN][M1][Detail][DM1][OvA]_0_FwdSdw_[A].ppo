#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1084;
float _3754;
float _3755;
float _3756;
float _3757;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _257 = _251.x * cbMtdParam._m0[10u].x;
    float _258 = _251.y * cbMtdParam._m0[10u].y;
    float _259 = _251.z * cbMtdParam._m0[10u].z;
    float _264 = 1.0 - cbMtdParam._m0[13u].z;
    float _3766 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _266 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    vec4 _284 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _292 = ((_257 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _284.x;
    float _295 = ((_258 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _284.y;
    float _298 = ((_259 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _284.z;
    float _305 = ((_257 - _292) * _266) + _292;
    float _306 = ((_258 - _295) * _266) + _295;
    float _307 = ((_259 - _298) * _266) + _298;
    vec4 _325 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _355 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3777 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _363 = (_356 * ((_325.x * cbMtdParam._m0[11u].x) - _305)) + _305;
    float _364 = (_356 * ((_325.y * cbMtdParam._m0[11u].y) - _306)) + _306;
    float _365 = (_356 * ((_325.z * cbMtdParam._m0[11u].z) - _307)) + _307;
    vec4 _378 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _380 = _378.x;
    float _385 = 1.0 - cbMtdParam._m0[14u].z;
    float _3788 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _389 = _380 - ((_380 * TEXCOORD_5.x) * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))));
    vec4 _403 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _407 = _403.z;
    vec4 _420 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _431 = cbMtdParam._m0[13u].w * _407;
    float _434 = (((((_407 * 2.0) * _420.z) * cbMtdParam._m0[14u].x) - _431) * cbMtdParam._m0[13u].y) + _431;
    vec4 _447 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _462 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_447.z * cbMtdParam._m0[14u].y) - _434)) + _434;
    float _469 = (_403.x * 2.0) + (-1.0);
    float _470 = (_403.y * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3799 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _476 = sqrt(1.0 - (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))));
    float _487 = ((cbMtdParam._m0[13u].x * ((_420.x * 2.0) + (-1.0))) + _469) + ((((_447.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _488 = ((cbMtdParam._m0[13u].x * ((_420.y * 2.0) + (-1.0))) + _470) + ((((_447.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _491 = fma(_476, _216 * NORMAL.x, fma(_488, _223 * TANGENT.x, (_209 * _201) * _487));
    float _494 = fma(_476, _216 * NORMAL.y, fma(_488, _223 * TANGENT.y, (_209 * _202) * _487));
    float _497 = fma(_476, _216 * NORMAL.z, fma(_488, _223 * TANGENT.z, (_209 * _203) * _487));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    float _502 = _501 * _491;
    float _503 = _501 * _494;
    float _504 = _501 * _497;
    float _3810 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _505 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _3821 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _3832 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _3843 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _3854 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _509 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _525 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _575 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _565);
    float _576 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _565);
    float _577 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _565);
    float _581 = inversesqrt(dot(vec3(_575, _576, _577), vec3(_575, _576, _577)));
    float _582 = _575 * _581;
    float _583 = _576 * _581;
    float _584 = _577 * _581;
    vec4 _589 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _591 = _589.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _764 = sqrt(((_575 * _575) + (_576 * _576)) + (_577 * _577));
        float _770 = (cbMatDynParam._m0[5u].x * _764) + cbMatDynParam._m0[5u].y;
        float _3865 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _775 = (cbMatDynParam._m0[5u].z * _764) + cbMatDynParam._m0[5u].w;
        float _3876 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) - _771)) + _771) < ((_591 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _602 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _603 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _622 = fma(_504, cbSceneParam._m0[5u].z, fma(_503, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _502));
    float _625 = fma(_504, cbSceneParam._m0[6u].z, fma(_503, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _502));
    float _628 = fma(_504, cbSceneParam._m0[7u].z, fma(_503, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _502));
    uint _641 = uint(roundEven(NORMAL.w)) * 13u;
    uint _642 = _641 + 9u;
    uint _643 = _642 + uint(cbMatDynParam._m0[0u].w);
    float _649 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * cbInstanceData._m0[_643].x;
    float _650 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * cbInstanceData._m0[_643].y;
    float _651 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * cbInstanceData._m0[_643].z;
    float _3887 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _3898 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _655 = 1.0 - _509;
    float _656 = _652 * _655;
    float _657 = _653 * _655;
    float _658 = _654 * _655;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _509;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _509;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _509;
    float _666 = _663 + 0.039999999105930328369140625;
    float _668 = _664 + 0.039999999105930328369140625;
    float _669 = _665 + 0.039999999105930328369140625;
    vec4 _678 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _602, cbSceneParam._m0[86u].y * _603));
    float _681 = _678.x * TEXCOORD_5.w;
    float _682 = dot(vec3(_502, _503, _504), vec3(_582, _583, _584));
    float _685 = _682 * 2.0;
    float _689 = (_685 * _502) - _582;
    float _690 = (_685 * _503) - _583;
    float _691 = (_685 * _504) - _584;
    float _695 = abs(dot(vec3(_582, _583, _584), vec3(_502, _503, _504)));
    float _3920 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _697 = sqrt(_505);
    float _710 = exp2((_697 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_697 * 3.0));
    float _716 = (1.0 - _710) * ((_697 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _717 = _710 * _697;
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1083;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _808 = fma(_753, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _745));
        float _812 = fma(_753, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _745));
        float _816 = fma(_753, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _745));
        float _841 = _745 + _502;
        float _842 = _749 + _503;
        float _843 = _753 + _504;
        float _853 = fma(_843, cbModelParam._m0[26u].z, fma(_842, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _841)) - _808;
        float _854 = fma(_843, cbModelParam._m0[27u].z, fma(_842, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _841)) - _812;
        float _855 = fma(_843, cbModelParam._m0[28u].z, fma(_842, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _841)) - _816;
        float _859 = inversesqrt(dot(vec3(_853, _854, _855), vec3(_853, _854, _855)));
        float _872 = ((_859 * _853) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_808 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _873 = ((_859 * _854) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_812 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_859 * _855) / cbModelParam._m0[34u].z) + ((((((_816 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        float _911 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_877.x + (-0.5));
        float _913 = _911 * (_877.y + (-0.5));
        float _914 = _911 * (_877.z + (-0.5));
        float _921 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_884.x + (-0.5));
        float _923 = _921 * (_884.y + (-0.5));
        float _924 = _921 * (_884.z + (-0.5));
        float _931 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_891.x + (-0.5));
        float _933 = _931 * (_891.y + (-0.5));
        float _934 = _931 * (_891.z + (-0.5));
        float _941 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_898.x + (-0.5));
        float _943 = _941 * (_898.y + (-0.5));
        float _944 = _941 * (_898.z + (-0.5));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = _912 * 0.5;
        float _949 = _922 * 0.5;
        float _950 = _932 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _965 = (dot(vec3(_502, _503, _504), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _975 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3968 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_977 + 1.0))) + _982) * _945;
        float _992 = _913 * 0.5;
        float _993 = _923 * 0.5;
        float _994 = _933 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_502, _503, _504), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _4001 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1019 + 1.0))) + _1024) * _946;
        float _1034 = _914 * 0.5;
        float _1035 = _924 * 0.5;
        float _1036 = _934 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_502, _503, _504), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _4034 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1061 + 1.0))) + _1066) * _947;
        _1083 = _914;
        _1085 = _913;
        _1086 = _912;
        _1087 = _924;
        _1088 = _923;
        _1089 = _922;
        _1090 = _934;
        _1091 = _933;
        _1092 = _932;
        _1093 = _947;
        _1094 = _946;
        _1095 = _945;
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
    }
    else
    {
        _1083 = _1084;
        _1085 = _1084;
        _1086 = _1084;
        _1087 = _1084;
        _1088 = _1084;
        _1089 = _1084;
        _1090 = _1084;
        _1091 = _1084;
        _1092 = _1084;
        _1093 = _1084;
        _1094 = _1084;
        _1095 = _1084;
        _1096 = 0.0;
        _1097 = 0.0;
        _1098 = 0.0;
    }
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1127 = fma(_753, cbModelParam._m0[30u].z, fma(_749, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _745));
        float _1131 = fma(_753, cbModelParam._m0[31u].z, fma(_749, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _745));
        float _1135 = fma(_753, cbModelParam._m0[32u].z, fma(_749, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _745));
        float _1158 = _745 + _502;
        float _1159 = _749 + _503;
        float _1160 = _753 + _504;
        float _1170 = fma(_1160, cbModelParam._m0[30u].z, fma(_1159, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1158)) - _1127;
        float _1171 = fma(_1160, cbModelParam._m0[31u].z, fma(_1159, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1158)) - _1131;
        float _1172 = fma(_1160, cbModelParam._m0[32u].z, fma(_1159, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1158)) - _1135;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1127 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1131 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[35u].z) + ((((((_1135 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1226 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1193.x + (-0.5));
        float _1228 = _1226 * (_1193.y + (-0.5));
        float _1229 = _1226 * (_1193.z + (-0.5));
        float _1236 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1200.x + (-0.5));
        float _1238 = _1236 * (_1200.y + (-0.5));
        float _1239 = _1236 * (_1200.z + (-0.5));
        float _1246 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1207.x + (-0.5));
        float _1248 = _1246 * (_1207.y + (-0.5));
        float _1249 = _1246 * (_1207.z + (-0.5));
        float _1256 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1214.x + (-0.5));
        float _1258 = _1256 * (_1214.y + (-0.5));
        float _1259 = _1256 * (_1214.z + (-0.5));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = _1227 * 0.5;
        float _1264 = _1237 * 0.5;
        float _1265 = _1247 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_502, _503, _504), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4097 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1290 + 1.0))) + _1295) * _1260;
        float _1305 = _1228 * 0.5;
        float _1306 = _1238 * 0.5;
        float _1307 = _1248 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_502, _503, _504), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4130 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1332 + 1.0))) + _1337) * _1261;
        float _1347 = _1229 * 0.5;
        float _1348 = _1239 * 0.5;
        float _1349 = _1249 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_502, _503, _504), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4163 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1374 + 1.0))) + _1379) * _1262;
        _1396 = _1229;
        _1397 = _1228;
        _1398 = _1227;
        _1399 = _1239;
        _1400 = _1238;
        _1401 = _1237;
        _1402 = _1249;
        _1403 = _1248;
        _1404 = _1247;
        _1405 = _1262;
        _1406 = _1261;
        _1407 = _1260;
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1409 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _1084;
        _1397 = _1084;
        _1398 = _1084;
        _1399 = _1084;
        _1400 = _1084;
        _1401 = _1084;
        _1402 = _1084;
        _1403 = _1084;
        _1404 = _1084;
        _1405 = _1084;
        _1406 = _1084;
        _1407 = _1084;
        _1408 = 0.0;
        _1409 = 0.0;
        _1410 = 0.0;
    }
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1096)) + _1096;
    float _1421 = (cbModelParam._m0[1u].x * (_1409 - _1097)) + _1097;
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1098)) + _1098;
    float _1443 = fma(_1422, cbSceneParam._m0[89u].z, fma(_1421, cbSceneParam._m0[89u].y, _1420 * cbSceneParam._m0[89u].x));
    float _1446 = fma(_1422, cbSceneParam._m0[90u].z, fma(_1421, cbSceneParam._m0[90u].y, _1420 * cbSceneParam._m0[90u].x));
    float _1449 = fma(_1422, cbSceneParam._m0[91u].z, fma(_1421, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1420));
    float _1464 = _689 * 0.5;
    float _1465 = _690 * 0.5;
    float _1466 = _691 * 0.5;
    float _1467 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1470 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1397, _1400, _1403, _1406));
    float _1473 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1507;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1480 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1083, _1087, _1090, _1093));
        float _1484 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1085, _1088, _1091, _1094));
        float _1488 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1086, _1089, _1092, _1095));
        float _1495 = dot(vec4(cbModelParam._m0[39u]), vec4(_1464, _1465, _1466, 1.0));
        _1507 = dot(vec3(isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1495) ? 0.0 : (isnan(0.0) ? _1495 : max(0.0, _1495))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1507 = 1.0;
    }
    float _1518;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1509 = dot(vec4(cbModelParam._m0[40u]), vec4(_1464, _1465, _1466, 1.0));
        _1518 = dot(vec3(isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1509) ? 0.0 : (isnan(0.0) ? _1509 : max(0.0, _1509))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1518 = 1.0;
    }
    float _1522 = (_1518 * cbModelParam._m0[1u].x) + (_1507 * (1.0 - cbModelParam._m0[1u].x));
    float _1532 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _505);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1532 : min(cbModelParam._m0[25u].z, _1532));
    float _1613;
    float _1615;
    float _1617;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1580 = fma(_753, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745)) + cbModelParam._m0[13u].w;
        float _1584 = fma(_753, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745)) + cbModelParam._m0[14u].w;
        float _1588 = fma(_753, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745)) + cbModelParam._m0[15u].w;
        float _1591 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1594 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1597 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1625;
        if (_1591 > 0.0)
        {
            _1625 = abs((1.0 - _1580) / _1591);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1580 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1625 = frontier_phi_17_15_ladder;
        }
        float _1800;
        if (_1594 > 0.0)
        {
            _1800 = abs((1.0 - _1584) / _1594);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1584 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1800 = frontier_phi_26_22_ladder;
        }
        float _2095;
        if (_1597 > 0.0)
        {
            _2095 = abs((1.0 - _1588) / _1597);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1588 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2095 = frontier_phi_38_33_ladder;
        }
        float _2097 = isnan(_1800) ? _1625 : (isnan(_1625) ? _1800 : min(_1625, _1800));
        float _2098 = isnan(_2095) ? _2097 : (isnan(_2097) ? _2095 : min(_2097, _2095));
        float _2102 = (_2098 * _1591) + _1580;
        float _2103 = (_2098 * _1594) + _1584;
        float _2104 = (_2098 * _1597) + _1588;
        float _2105 = _2098 * 9.9999997473787516355514526367188e-05;
        float _2107 = (-1.0) - _2105;
        float _2109 = _2105 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2104 > _2109) || ((_2104 < _2107) || ((_2103 > _2109) || ((_2103 < _2107) || ((_2102 < _2107) || (_2102 > _2109))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2249 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2104, cbModelParam._m0[9u].z, fma(_2103, cbModelParam._m0[9u].y, _2102 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2104, cbModelParam._m0[10u].z, fma(_2103, cbModelParam._m0[10u].y, _2102 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2104, cbModelParam._m0[11u].z, fma(_2103, cbModelParam._m0[11u].y, _2102 * cbModelParam._m0[11u].x))), _1533);
            frontier_phi_16_38_ladder = _2249.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2249.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2249.x * cbModelParam._m0[1u].y;
        }
        _1613 = frontier_phi_16_38_ladder_2;
        _1615 = frontier_phi_16_38_ladder_1;
        _1617 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1601 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1533);
        _1613 = _1601.x * cbModelParam._m0[1u].y;
        _1615 = _1601.y * cbModelParam._m0[1u].y;
        _1617 = _1601.z * cbModelParam._m0[1u].y;
    }
    float _1621 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _505);
    float _1622 = isnan(_1621) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1621 : min(cbModelParam._m0[25u].w, _1621));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1679 = fma(_753, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745)) + cbModelParam._m0[21u].w;
        float _1683 = fma(_753, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745)) + cbModelParam._m0[22u].w;
        float _1687 = fma(_753, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745)) + cbModelParam._m0[23u].w;
        float _1690 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1693 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1696 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1805;
        if (_1690 > 0.0)
        {
            _1805 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1805 = frontier_phi_28_24_ladder;
        }
        float _2122;
        if (_1693 > 0.0)
        {
            _2122 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2122 = frontier_phi_40_35_ladder;
        }
        float _2460;
        if (_1696 > 0.0)
        {
            _2460 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2460 = frontier_phi_50_47_ladder;
        }
        float _2462 = isnan(_2122) ? _1805 : (isnan(_1805) ? _2122 : min(_1805, _2122));
        float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
        float _2467 = (_2463 * _1690) + _1679;
        float _2468 = (_2463 * _1693) + _1683;
        float _2469 = (_2463 * _1696) + _1687;
        float _2470 = _2463 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2470;
        float _2473 = _2470 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2469 > _2473) || ((_2469 < _2471) || ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 < _2471) || (_2467 > _2473))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2469, cbModelParam._m0[17u].z, fma(_2468, cbModelParam._m0[17u].y, _2467 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2469, cbModelParam._m0[18u].z, fma(_2468, cbModelParam._m0[18u].y, _2467 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2469, cbModelParam._m0[19u].z, fma(_2468, cbModelParam._m0[19u].y, _2467 * cbModelParam._m0[19u].x))), _1622);
            frontier_phi_25_50_ladder = _2591.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2591.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2591.x * cbModelParam._m0[1u].z;
        }
        _1715 = frontier_phi_25_50_ladder_2;
        _1717 = frontier_phi_25_50_ladder_1;
        _1719 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1699 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1622);
        _1715 = _1699.x * cbModelParam._m0[1u].z;
        _1717 = _1699.y * cbModelParam._m0[1u].z;
        _1719 = _1699.z * cbModelParam._m0[1u].z;
    }
    float _1732 = (((_716 * _666) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1715 - _1613)) + _1613);
    float _1734 = (((_716 * _668) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1717 - _1615)) + _1615);
    float _1736 = (((_716 * _669) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1719 - _1617)) + _1617);
    float _1739 = fma(_1736, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1732 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1736, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1732 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1736, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, _1732 * cbSceneParam._m0[91u].x));
    float _1779 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1783 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1787 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1791 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1792 = _1779 / _1791;
    float _1793 = _1783 / _1791;
    float _1794 = _1787 / _1791;
    float _1941;
    float _1942;
    float _1943;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1821 = ((uint(_1794 > cbSceneParam._m0[59u].y) + uint(_1794 > cbSceneParam._m0[59u].x)) + uint(_1794 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1822 = _1821 + 43u;
        uint _1830 = _1821 + 44u;
        uint _1838 = _1821 + 45u;
        uint _1846 = _1821 + 46u;
        float _1857 = fma(_1791, cbSceneParam._m0[_1822].w, fma(_1787, cbSceneParam._m0[_1822].z, fma(_1783, cbSceneParam._m0[_1822].y, _1779 * cbSceneParam._m0[_1822].x)));
        float _1861 = fma(_1791, cbSceneParam._m0[_1830].w, fma(_1787, cbSceneParam._m0[_1830].z, fma(_1783, cbSceneParam._m0[_1830].y, _1779 * cbSceneParam._m0[_1830].x)));
        float _1869 = fma(_1791, cbSceneParam._m0[_1846].w, fma(_1787, cbSceneParam._m0[_1846].z, fma(_1783, cbSceneParam._m0[_1846].y, _1779 * cbSceneParam._m0[_1846].x)));
        float _1874 = cbSceneParam._m0[33u].z * _1869;
        float _1876 = cbSceneParam._m0[33u].w * _1869;
        float _1879 = fma(_1791, cbSceneParam._m0[_1838].w, fma(_1787, cbSceneParam._m0[_1838].z, fma(_1783, cbSceneParam._m0[_1838].y, _1779 * cbSceneParam._m0[_1838].x))) / _1869;
        float _1927 = (cbSceneParam._m0[33u].x - sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794))) * cbSceneParam._m0[33u].y;
        float _4289 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1934 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1874 + _1857) / _1869, (_1876 + _1861) / _1869), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1876 + _1857) / _1869, (_1861 - _1874) / _1869), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1857 - _1874) / _1869, (_1861 - _1876) / _1869), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1857 - _1876) / _1869, (_1874 + _1861) / _1869), _1879), 0.0)).x), vec4(0.25)));
        _1941 = 1.0 - (_1934 * cbSceneParam._m0[34u].x);
        _1942 = 1.0 - (_1934 * cbSceneParam._m0[34u].y);
        _1943 = 1.0 - (_1934 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1941 = 1.0;
        _1942 = 1.0;
        _1943 = 1.0;
    }
    float _2007;
    float _2009;
    float _2011;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1995 = fma(_1791, cbSceneParam._m0[63u].w, fma(_1787, cbSceneParam._m0[63u].z, fma(_1783, cbSceneParam._m0[63u].y, _1779 * cbSceneParam._m0[63u].x)));
        float _1996 = fma(_1791, cbSceneParam._m0[60u].w, fma(_1787, cbSceneParam._m0[60u].z, fma(_1783, cbSceneParam._m0[60u].y, _1779 * cbSceneParam._m0[60u].x))) / _1995;
        float _1997 = fma(_1791, cbSceneParam._m0[61u].w, fma(_1787, cbSceneParam._m0[61u].z, fma(_1783, cbSceneParam._m0[61u].y, _1779 * cbSceneParam._m0[61u].x))) / _1995;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1996 >= cbSceneParam._m0[64u].x) && (_1997 >= cbSceneParam._m0[64u].y)) && (_1996 <= cbSceneParam._m0[64u].z)) && (_1997 <= cbSceneParam._m0[64u].w))
        {
            float _2135 = fma(_1791, cbSceneParam._m0[62u].w, fma(_1787, cbSceneParam._m0[62u].z, fma(_1783, cbSceneParam._m0[62u].y, _1779 * cbSceneParam._m0[62u].x))) / _1995;
            float _2139 = isnan(cbSceneParam._m0[41u].w) ? _2135 : (isnan(_2135) ? cbSceneParam._m0[41u].w : max(_2135, cbSceneParam._m0[41u].w));
            float _2182 = (cbSceneParam._m0[33u].x - sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794))) * cbSceneParam._m0[33u].y;
            float _4305 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
            float _2189 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1996, cbSceneParam._m0[33u].w + _1997), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1996, _1997 - cbSceneParam._m0[33u].z), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1996 - cbSceneParam._m0[33u].z, _1997 - cbSceneParam._m0[33u].w), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1996 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1997), _2139), 0.0)).x), vec4(0.25)));
            float _2193 = 1.0 - (_2189 * cbSceneParam._m0[34u].x);
            float _2194 = 1.0 - (_2189 * cbSceneParam._m0[34u].y);
            float _2195 = 1.0 - (_2189 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2195) ? _1943 : (isnan(_1943) ? _2195 : min(_1943, _2195));
            frontier_phi_37_36_ladder_1 = isnan(_2194) ? _1942 : (isnan(_1942) ? _2194 : min(_1942, _2194));
            frontier_phi_37_36_ladder_2 = isnan(_2193) ? _1941 : (isnan(_1941) ? _2193 : min(_1941, _2193));
        }
        else
        {
            frontier_phi_37_36_ladder = _1943;
            frontier_phi_37_36_ladder_1 = _1942;
            frontier_phi_37_36_ladder_2 = _1941;
        }
        _2007 = frontier_phi_37_36_ladder_2;
        _2009 = frontier_phi_37_36_ladder_1;
        _2011 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2007 = _1941;
        _2009 = _1942;
        _2011 = _1943;
    }
    uvec4 _2016 = floatBitsToUint(cbInstanceData._m0[_641 + 5u]);
    uint _2018 = _2016.x * 14u;
    uint _2019 = _2018 + 13u;
    float _2026 = _681 + (-1.0);
    float _2031 = (cbLight._m0[_2019].x * _2026) + 1.0;
    float _2032 = (cbLight._m0[_2019].y * _2026) + 1.0;
    float _2033 = (cbLight._m0[_2019].z * _2026) + 1.0;
    float _2034 = (cbLight._m0[_2019].w * _2026) + 1.0;
    uint _2035 = _2018 + 5u;
    float _2041 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2045 = _2018 + 4u;
    float _2054 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2058 = _2018 | 1u;
    float _2069 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_502, _503, _504));
    float _2072 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_502, _503, _504));
    float _4341 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _4352 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2077 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.3183098733425140380859375;
    float _2079 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * 0.3183098733425140380859375;
    float _2086 = ((cbLight._m0[_2035].x * _2041) * _2079) + (((cbLight._m0[_2045].x * _2007) * _2054) * _2077);
    float _2087 = ((_2041 * cbLight._m0[_2035].y) * _2079) + (((cbLight._m0[_2045].y * _2009) * _2054) * _2077);
    float _2088 = ((_2041 * cbLight._m0[_2035].z) * _2079) + (((cbLight._m0[_2045].z * _2011) * _2054) * _2077);
    uvec4 _2092 = floatBitsToUint(cbLight._m0[_2018 + 12u]);
    bool _2094 = _2092.x == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2094)
    {
        _2196 = _2086;
        _2198 = _2087;
        _2200 = _2088;
    }
    else
    {
        uint _2204 = _2018 + 6u;
        float _2220 = (dot(vec3(cbLight._m0[_2018 + 2u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4363 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2223 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2196 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _2086;
        _2198 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _2087;
        _2200 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _2088;
    }
    bool _2203 = _2092.y == 0u;
    float _2258;
    float _2260;
    float _2262;
    if (_2203)
    {
        _2258 = _2196;
        _2260 = _2198;
        _2262 = _2200;
    }
    else
    {
        uint _2431 = _2018 + 7u;
        float _2447 = (dot(vec3(cbLight._m0[_2018 + 3u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _2448 = _2447 * _2447;
        float _4379 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2449 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2450 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2258 = (((cbLight._m0[_2431].x * 0.3183098733425140380859375) * _2449) * _2450) + _2196;
        _2260 = (((cbLight._m0[_2431].y * 0.3183098733425140380859375) * _2449) * _2450) + _2198;
        _2262 = (((cbLight._m0[_2431].z * 0.3183098733425140380859375) * _2449) * _2450) + _2200;
    }
    uint _2265 = _2018 + 8u;
    float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _505) * 0.949999988079071044921875);
    float _2279 = _2278 * _2278;
    float _2280 = cbLight._m0[_2018].x + _582;
    float _2281 = cbLight._m0[_2018].y + _583;
    float _2282 = cbLight._m0[_2018].z + _584;
    float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
    float _2287 = _2286 * _2280;
    float _2288 = _2286 * _2281;
    float _2289 = _2286 * _2282;
    float _2290 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2018].xyz));
    float _4395 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _4406 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _2294 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2295 = dot(vec3(_502, _503, _504), vec3(_2287, _2288, _2289));
    float _4417 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2299 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2287, _2288, _2289));
    float _4428 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2303 = _2279 * _2279;
    float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
    float _2315 = exp2(log2(1.0 - (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) * 5.0);
    float _2316 = 0.959999978542327880859375 - _663;
    float _2318 = 0.959999978542327880859375 - _664;
    float _2319 = 0.959999978542327880859375 - _665;
    float _2326 = 1.0 - _2279;
    float _2337 = (0.5 / (((_2294 * ((_2293 * _2326) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2326) + _2279) * _2293))) * _2293;
    float _4439 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2339 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
    uint _2353 = _2018 + 9u;
    float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _505) * 0.949999988079071044921875);
    float _2365 = _2364 * _2364;
    float _2366 = cbLight._m0[_2058].x + _582;
    float _2367 = cbLight._m0[_2058].y + _583;
    float _2368 = cbLight._m0[_2058].z + _584;
    float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
    float _2373 = _2372 * _2366;
    float _2374 = _2372 * _2367;
    float _2375 = _2372 * _2368;
    float _2376 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2058].xyz));
    float _4450 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2380 = dot(vec3(_502, _503, _504), vec3(_2373, _2374, _2375));
    float _4461 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2384 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2373, _2374, _2375));
    float _4472 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2388 = _2365 * _2365;
    float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
    float _2399 = exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0);
    float _2406 = 1.0 - _2365;
    float _2416 = (0.5 / (((_2294 * ((_2379 * _2406) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2406) + _2365) * _2379))) * _2379;
    float _4483 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2418 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
    float _2428 = (((((_2399 * _2316) + _666) * cbLight._m0[_2353].x) * _2418) * _2041) + ((((cbLight._m0[_2265].x * _2007) * ((_2315 * _2316) + _666)) * _2339) * _2054);
    float _2429 = (((((_2399 * _2318) + _668) * cbLight._m0[_2353].y) * _2418) * _2041) + ((((cbLight._m0[_2265].y * _2009) * ((_2315 * _2318) + _668)) * _2339) * _2054);
    float _2430 = (((((_2399 * _2319) + _669) * cbLight._m0[_2353].z) * _2418) * _2041) + ((((cbLight._m0[_2265].z * _2011) * ((_2315 * _2319) + _669)) * _2339) * _2054);
    float _2486;
    float _2488;
    float _2490;
    if (_2094)
    {
        _2486 = _2428;
        _2488 = _2429;
        _2490 = _2430;
    }
    else
    {
        uint _2492 = _2018 + 2u;
        uint _2496 = _2018 + 10u;
        float _2510 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2492].w)) * _505) * 0.949999988079071044921875);
        float _2511 = _2510 * _2510;
        float _2512 = cbLight._m0[_2492].x + _582;
        float _2513 = cbLight._m0[_2492].y + _583;
        float _2514 = cbLight._m0[_2492].z + _584;
        float _2518 = inversesqrt(dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514)));
        float _2519 = _2518 * _2512;
        float _2520 = _2518 * _2513;
        float _2521 = _2518 * _2514;
        float _2522 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2492].xyz));
        float _4494 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2526 = dot(vec3(_502, _503, _504), vec3(_2519, _2520, _2521));
        float _4505 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2530 = dot(vec3(cbLight._m0[_2492].xyz), vec3(_2519, _2520, _2521));
        float _4516 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2534 = _2511 * _2511;
        float _2538 = ((_2529 * _2529) * (_2534 + (-1.0))) + 1.0;
        float _2545 = exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0);
        float _2552 = 1.0 - _2511;
        float _2562 = (0.5 / (((_2294 * ((_2525 * _2552) + _2511)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2552) + _2511) * _2525))) * _2525;
        float _4527 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2564 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2534 / ((_2538 * _2538) * 3.141590118408203125));
        float _2565 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2486 = (((((_2545 * _2316) + _666) * cbLight._m0[_2496].x) * _2564) * _2565) + _2428;
        _2488 = (((((_2545 * _2318) + _668) * cbLight._m0[_2496].y) * _2564) * _2565) + _2429;
        _2490 = (((((_2545 * _2319) + _669) * cbLight._m0[_2496].z) * _2564) * _2565) + _2430;
    }
    float _2596;
    float _2598;
    float _2600;
    if (_2203)
    {
        _2596 = _2486;
        _2598 = _2488;
        _2600 = _2490;
    }
    else
    {
        uint _2607 = _2018 + 3u;
        uint _2611 = _2018 + 11u;
        float _2625 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2607].w)) * _505) * 0.949999988079071044921875);
        float _2626 = _2625 * _2625;
        float _2627 = cbLight._m0[_2607].x + _582;
        float _2628 = cbLight._m0[_2607].y + _583;
        float _2629 = cbLight._m0[_2607].z + _584;
        float _2633 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
        float _2634 = _2633 * _2627;
        float _2635 = _2633 * _2628;
        float _2636 = _2633 * _2629;
        float _2637 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2607].xyz));
        float _4543 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2640 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2641 = dot(vec3(_502, _503, _504), vec3(_2634, _2635, _2636));
        float _4554 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2645 = dot(vec3(cbLight._m0[_2607].xyz), vec3(_2634, _2635, _2636));
        float _4565 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2649 = _2626 * _2626;
        float _2653 = ((_2644 * _2644) * (_2649 + (-1.0))) + 1.0;
        float _2660 = exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0);
        float _2667 = 1.0 - _2626;
        float _2677 = (0.5 / (((_2294 * ((_2640 * _2667) + _2626)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2667) + _2626) * _2640))) * _2640;
        float _4576 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2679 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2649 / ((_2653 * _2653) * 3.141590118408203125));
        float _2680 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2596 = (((((_2660 * _2316) + _666) * cbLight._m0[_2611].x) * _2679) * _2680) + _2486;
        _2598 = (((((_2660 * _2318) + _668) * cbLight._m0[_2611].y) * _2679) * _2680) + _2488;
        _2600 = (((((_2660 * _2319) + _669) * cbLight._m0[_2611].z) * _2679) * _2680) + _2490;
    }
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    if (_2016.y == 0u)
    {
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.x;
        uint _2713 = uint((float(_2701.y) * floor(float(uint(cbSceneParam._m0[85u].y * _603) / _2702))) + floor(float(uint(cbSceneParam._m0[85u].x * _602) / _2702)));
        float _2723 = (log2(_1794 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2724 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        uint _2727 = uint(isnan(14.0) ? _2724 : (isnan(_2724) ? 14.0 : min(_2724, 14.0)));
        uvec4 _2732 = texelFetch(g_lightClusterGridBuffer, int(((_2727 << 2u) + (_2713 << 6u)) >> 2u));
        uint _2733 = _2732.x;
        uint _2734 = _2701.z;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        if (((((1u << ((_2734 >> 4u) & 15u)) + 4294967295u) & _2733) == 0u) || ((_2734 & 240u) == 0u))
        {
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
        }
        else
        {
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            uint _2972 = 0u;
            uint _2981;
            bool _2982;
            for (;;)
            {
                _2981 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                _2982 = _2981 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2982)
                {
                    frontier_phi_71_pred = _2971;
                    frontier_phi_71_pred_1 = _2970;
                    frontier_phi_71_pred_2 = _2969;
                    frontier_phi_71_pred_3 = _2968;
                    frontier_phi_71_pred_4 = _2967;
                    frontier_phi_71_pred_5 = _2966;
                }
                else
                {
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    uint _3117;
                    _3111 = _2966;
                    _3112 = _2967;
                    _3113 = _2968;
                    _3114 = _2969;
                    _3115 = _2970;
                    _3116 = _2971;
                    _3117 = _2981;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    for (;;)
                    {
                        uint _3121 = uint(findLSB(_3117)) + (_2972 << 5u);
                        uint _3118 = (_3117 + 4294967295u) & _3117;
                        uint _3123 = _3121 * 48u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3143 = (_3121 * 48u) + 4u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3162 = (_3121 * 48u) + 8u;
                        vec3 _3173 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x));
                        float _3177 = _3137.x - _1792;
                        float _3178 = _3137.y - _1793;
                        float _3179 = _3137.z - _1794;
                        float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                        float _3183 = inversesqrt(_3180);
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3187 = dot(vec3(_622, _625, _628), vec3(_3184, _3185, _3186));
                        float _3192 = 1.0 - (_3180 * _3137.w);
                        float _4602 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3193 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3194 = sqrt(_3180) * _3156.w;
                        float _3197 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3187) + _3198;
                        float _3204 = _3194 * _3194;
                        float _3208 = ((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3193) / ((_3204 * 0.699999988079071044921875) + 1.0);
                        float _3212 = (-0.0) - _1792;
                        float _3213 = (-0.0) - _1793;
                        float _3214 = (-0.0) - _1794;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3228 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                        float _3229 = 1.0 - _697;
                        float _3236 = sqrt(1.0 - ((1.0 - (_3229 * _3229)) * (1.0 - (_3228 * _3228))));
                        float _3237 = _3236 * _3236;
                        float _3238 = _3237 * _3237;
                        float _3239 = _3219 + _3184;
                        float _3240 = _3220 + _3185;
                        float _3241 = _3221 + _3186;
                        float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                        float _3249 = dot(vec3(_622, _625, _628), vec3(_3219, _3220, _3221));
                        float _4618 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3252 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3253 = dot(vec3(_622, _625, _628), vec3(_3245 * _3239, _3245 * _3240, _3245 * _3241));
                        float _4629 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3256 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3260 = ((_3256 * _3256) * (_3238 + (-1.0))) + 1.0;
                        float _3261 = _3197 * _3237;
                        float _3262 = _3261 * _3261;
                        float _3265 = ((1.0 - _3262) * _3187) + _3262;
                        float _4640 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3267 = 1.0 - _3237;
                        float _3277 = (0.5 / (((_3266 * ((_3252 * _3267) + _3237)) + 9.9999999392252902907785028219223e-09) + (((_3266 * _3267) + _3237) * _3252))) * _3266;
                        float _4651 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3288 = (((_3238 * 3.1415927410125732421875) * (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) / ((_3260 * _3260) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125))) * _3193;
                        _3041 = (_3208 * _3156.x) + _3114;
                        _3042 = (_3208 * _3156.y) + _3115;
                        _3043 = (_3208 * _3156.z) + _3116;
                        _3038 = (_3288 * _3173.x) + _3111;
                        _3039 = (_3288 * _3173.y) + _3112;
                        _3040 = (_3288 * _3173.z) + _3113;
                        if (_3118 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3111 = _3038;
                            _3112 = _3039;
                            _3113 = _3040;
                            _3114 = _3041;
                            _3115 = _3042;
                            _3116 = _3043;
                            _3117 = _3118;
                        }
                    }
                    frontier_phi_71_pred = _3043;
                    frontier_phi_71_pred_1 = _3042;
                    frontier_phi_71_pred_2 = _3041;
                    frontier_phi_71_pred_3 = _3040;
                    frontier_phi_71_pred_4 = _3039;
                    frontier_phi_71_pred_5 = _3038;
                }
                _2824 = frontier_phi_71_pred;
                _2822 = frontier_phi_71_pred_1;
                _2820 = frontier_phi_71_pred_2;
                _2818 = frontier_phi_71_pred_3;
                _2816 = frontier_phi_71_pred_4;
                _2814 = frontier_phi_71_pred_5;
                uint _2973 = _2972 + 1u;
                if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2966 = _2814;
                    _2967 = _2816;
                    _2968 = _2818;
                    _2969 = _2820;
                    _2970 = _2822;
                    _2971 = _2824;
                    _2972 = _2973;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
        }
        uvec4 _2827 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2828 = _2827.z;
        uint _2830 = (_2828 >> 8u) & 15u;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        if (((4294967295u << _2830) & _2733) == 0u)
        {
            _2934 = _2813;
            _2936 = _2815;
            _2938 = _2817;
            _2940 = _2819;
            _2942 = _2821;
            _2944 = _2823;
        }
        else
        {
            float _2959 = inversesqrt(dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794)));
            float _2960 = _2959 * _1792;
            float _2961 = _2959 * _1793;
            float _2962 = _2959 * _1794;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2830 < ((_2828 >> 12u) & 15u))
            {
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _3094 = _2813;
                float _3095 = _2815;
                float _3096 = _2817;
                float _3097 = _2819;
                float _3098 = _2821;
                float _3099 = _2823;
                uint _3100 = _2830;
                uint _3109;
                bool _3110;
                for (;;)
                {
                    _3109 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                    _3110 = _3109 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3110)
                    {
                        frontier_phi_82_pred = _3099;
                        frontier_phi_82_pred_1 = _3098;
                        frontier_phi_82_pred_2 = _3097;
                        frontier_phi_82_pred_3 = _3096;
                        frontier_phi_82_pred_4 = _3095;
                        frontier_phi_82_pred_5 = _3094;
                    }
                    else
                    {
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3315 = _3094;
                        float _3316 = _3095;
                        float _3317 = _3096;
                        float _3318 = _3097;
                        float _3319 = _3098;
                        float _3320 = _3099;
                        uint _3321 = _3109;
                        uint _3322;
                        vec4 _3347;
                        float _3348;
                        vec4 _3363;
                        vec3 _3375;
                        vec4 _3391;
                        vec4 _3407;
                        float _3454;
                        bool _3455;
                        for (;;)
                        {
                            uint _3332 = ((_3100 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3321));
                            _3322 = (_3321 + 4294967295u) & _3321;
                            uint _3334 = _3332 * 40u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            _3348 = _3347.w;
                            uint _3350 = (_3332 * 40u) + 4u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3332 * 40u) + 8u;
                            _3375 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x));
                            uint _3378 = (_3332 * 40u) + 16u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3394 = (_3332 * 40u) + 20u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3410 = (_3332 * 40u) + 24u;
                            vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3429 = (_3332 * 40u) + 28u;
                            vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            _3454 = fma(_1794, _3442.z, fma(_1793, _3442.y, _3442.x * _1792)) + _3442.w;
                            _3455 = !((fma(_1794, _3423.z, fma(_1793, _3423.y, _3423.x * _1792)) + _3423.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3455)
                            {
                                float _3482 = _3347.x - _1792;
                                float _3483 = _3347.y - _1793;
                                float _3484 = _3347.z - _1794;
                                float _3485 = dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484));
                                float _3488 = inversesqrt(_3485);
                                float _3489 = _3488 * _3482;
                                float _3490 = _3488 * _3483;
                                float _3491 = _3488 * _3484;
                                float _3495 = 1.0 - (_3485 / (_3348 * _3348));
                                float _4662 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3500 = sqrt(_3485) * _3363.w;
                                float _3502 = 1.39999997615814208984375 / (_3500 + 1.39999997615814208984375);
                                float _3503 = _3502 * _3502;
                                float _3506 = ((1.0 - _3503) * dot(vec3(_3489, _3490, _3491), vec3(_622, _625, _628))) + _3503;
                                float _3509 = _3500 * _3500;
                                float _3513 = (fma(_1794, _3391.z, fma(_1793, _3391.y, _3391.x * _1792)) + _3391.w) / _3454;
                                float _3514 = (fma(_1794, _3407.z, fma(_1793, _3407.y, _3407.x * _1792)) + _3407.w) / _3454;
                                float _3518 = 1.0 - dot(vec2(_3513, _3514), vec2(_3513, _3514));
                                float _4678 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3520 = _3519 * (((isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0))) * _3496) / ((_3509 * 0.699999988079071044921875) + 1.0));
                                float _3532 = exp2(log2(1.0 / ((_3509 * 3.5) + 5.0)) * 0.25);
                                float _3533 = 1.0 - _697;
                                float _3540 = sqrt(1.0 - ((1.0 - (_3533 * _3533)) * (1.0 - (_3532 * _3532))));
                                float _3541 = _3540 * _3540;
                                float _3542 = _3541 * _3541;
                                float _3543 = _3489 - _2960;
                                float _3544 = _3490 - _2961;
                                float _3545 = _3491 - _2962;
                                float _3549 = inversesqrt(dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545)));
                                float _3553 = dot(vec3(_622, _625, _628), vec3((-0.0) - _2960, (-0.0) - _2961, (-0.0) - _2962));
                                float _4689 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3556 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3557 = dot(vec3(_622, _625, _628), vec3(_3549 * _3543, _3549 * _3544, _3549 * _3545));
                                float _4700 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3560 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3564 = ((_3560 * _3560) * (_3542 + (-1.0))) + 1.0;
                                float _3565 = _3502 * _3541;
                                float _3566 = _3565 * _3565;
                                float _3572 = ((1.0 - _3566) * dot(vec3(_622, _625, _628), vec3(_3489, _3490, _3491))) + _3566;
                                float _4711 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3573 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3574 = 1.0 - _3541;
                                float _3584 = (0.5 / (((_3573 * ((_3556 * _3574) + _3541)) + 9.9999999392252902907785028219223e-09) + (((_3573 * _3574) + _3541) * _3556))) * _3573;
                                float _4722 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3594 = (_3519 * _3496) * (((_3542 * 3.1415927410125732421875) * (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) / ((_3564 * _3564) * ((_3509 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3520 * _3363.z;
                                frontier_phi_88_pred_1 = _3520 * _3363.y;
                                frontier_phi_88_pred_2 = _3520 * _3363.x;
                                frontier_phi_88_pred_3 = _3594 * _3375.z;
                                frontier_phi_88_pred_4 = _3594 * _3375.y;
                                frontier_phi_88_pred_5 = _3594 * _3375.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3603 = frontier_phi_88_pred;
                            _3602 = frontier_phi_88_pred_1;
                            _3601 = frontier_phi_88_pred_2;
                            _3600 = frontier_phi_88_pred_3;
                            _3599 = frontier_phi_88_pred_4;
                            _3598 = frontier_phi_88_pred_5;
                            _3305 = _3601 + _3318;
                            _3306 = _3602 + _3319;
                            _3307 = _3603 + _3320;
                            _3302 = _3598 + _3315;
                            _3303 = _3599 + _3316;
                            _3304 = _3600 + _3317;
                            if (_3322 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3322;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3307;
                        frontier_phi_82_pred_1 = _3306;
                        frontier_phi_82_pred_2 = _3305;
                        frontier_phi_82_pred_3 = _3304;
                        frontier_phi_82_pred_4 = _3303;
                        frontier_phi_82_pred_5 = _3302;
                    }
                    _2945 = frontier_phi_82_pred;
                    _2943 = frontier_phi_82_pred_1;
                    _2941 = frontier_phi_82_pred_2;
                    _2939 = frontier_phi_82_pred_3;
                    _2937 = frontier_phi_82_pred_4;
                    _2935 = frontier_phi_82_pred_5;
                    uint _3101 = _3100 + 1u;
                    if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3094 = _2935;
                        _3095 = _2937;
                        _3096 = _2939;
                        _3097 = _2941;
                        _3098 = _2943;
                        _3099 = _2945;
                        _3100 = _3101;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2941;
                frontier_phi_63_64_ladder_1 = _2945;
                frontier_phi_63_64_ladder_2 = _2943;
                frontier_phi_63_64_ladder_3 = _2939;
                frontier_phi_63_64_ladder_4 = _2937;
                frontier_phi_63_64_ladder_5 = _2935;
            }
            else
            {
                frontier_phi_63_64_ladder = _2819;
                frontier_phi_63_64_ladder_1 = _2823;
                frontier_phi_63_64_ladder_2 = _2821;
                frontier_phi_63_64_ladder_3 = _2817;
                frontier_phi_63_64_ladder_4 = _2815;
                frontier_phi_63_64_ladder_5 = _2813;
            }
            _2934 = frontier_phi_63_64_ladder_5;
            _2936 = frontier_phi_63_64_ladder_4;
            _2938 = frontier_phi_63_64_ladder_3;
            _2940 = frontier_phi_63_64_ladder;
            _2942 = frontier_phi_63_64_ladder_2;
            _2944 = frontier_phi_63_64_ladder_1;
        }
        float _2949 = isnan(1.0) ? _681 : (isnan(_681) ? 1.0 : min(_681, 1.0));
        _2746 = (_2949 * _2940) + _2258;
        _2748 = (_2949 * _2942) + _2260;
        _2750 = (_2949 * _2944) + _2262;
        _2752 = ((_2934 * _666) * _2949) + _2596;
        _2754 = ((_2936 * _668) * _2949) + _2598;
        _2756 = ((_2938 * _669) * _2949) + _2600;
    }
    else
    {
        _2746 = _2258;
        _2748 = _2260;
        _2750 = _2262;
        _2752 = _2596;
        _2754 = _2598;
        _2756 = _2600;
    }
    float _4738 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4749 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4760 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _2773 = ((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2746 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _681))) + ((_2752 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1522)) * cbPerFrame._m0[3u].x);
    float _2774 = ((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2748 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _681))) + ((_2754 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1522)) * cbPerFrame._m0[3u].x);
    float _2775 = ((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2750 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _681))) + ((_2756 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1522)) * cbPerFrame._m0[3u].x);
    uint _2776 = _641 + 6u;
    float _2784 = _602 / cbSceneParam._m0[86u].x;
    float _2785 = _603 / cbSceneParam._m0[86u].y;
    vec4 _2799 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, (log2((isnan(cbSceneParam._m0[77u].w) ? _525 : (isnan(_525) ? cbSceneParam._m0[77u].w : min(_525, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2801 = _2799.x;
    float _2802 = _2799.y;
    float _2803 = _2799.z;
    float _2804 = _2799.w;
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    if (_525 > cbSceneParam._m0[78u].w)
    {
        float _2838 = isnan(_525) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _525 : min(cbSceneParam._m0[80u].w, _525));
        float _2839 = _2838 / _525;
        float _2850 = _2839 * _575;
        float _2851 = _576 * _2839;
        float _2852 = (-0.0) - _2851;
        float _2854 = _2839 * _577;
        float _2856 = (cbSceneParam._m0[77u].w * _2852) / _2838;
        float _2857 = _2856 + cbSceneParam._m0[79u].w;
        float _2858 = cbSceneParam._m0[79u].w - _2851;
        float _2864 = sqrt(((_2850 * _2850) + (_2851 * _2851)) + (_2854 * _2854));
        float _2867 = (1.0 - (cbSceneParam._m0[77u].w / _2838)) * _2864;
        float _2872 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2874 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3051;
        if (abs((_2852 - _2856) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3051 = ((((_2857 > 0.0) ? exp2(_2872 * _2857) : (2.0 - exp2(_2874 * _2857))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2867;
        }
        else
        {
            float _2995 = 1.0 / cbSceneParam._m0[80u].x;
            float _2996 = isnan(_2858) ? _2857 : (isnan(_2857) ? _2858 : max(_2857, _2858));
            float _2997 = isnan(_2858) ? _2857 : (isnan(_2857) ? _2858 : min(_2857, _2858));
            float _3006 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : min(_2996, 0.0));
            float _3007 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : min(_2997, 0.0));
            _3051 = ((abs(_2864 / _2852) * cbSceneParam._m0[80u].y) * ((((_3006 - _3007) * 2.0) - ((exp2(_2872 * (isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0)))) - exp2(_2872 * (isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))))) * _2995)) - ((exp2(_2874 * _3006) - exp2(_2874 * _3007)) * _2995))) + (_2867 * cbSceneParam._m0[80u].z);
        }
        vec4 _3053 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, 1.0), 0.0);
        float _3062 = exp2((_3051 * (-1.44269502162933349609375)) * (1.0 - _3053.w));
        float _3063 = log2(_3062);
        float _3079 = log2(_2804);
        _2876 = (exp2(_3079 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].x)) * _3053.x) / cbSceneParam._m0[78u].x)) + _2801;
        _2878 = (exp2(_3079 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].y)) * _3053.y) / cbSceneParam._m0[78u].y)) + _2802;
        _2880 = (exp2(_3079 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].z)) * _3053.z) / cbSceneParam._m0[78u].z)) + _2803;
        _2882 = _3062 * _2804;
    }
    else
    {
        _2876 = _2801;
        _2878 = _2802;
        _2880 = _2803;
        _2882 = _2804;
    }
    bool _3089;
    vec4 _2892;
    vec4 _2914;
    float _2916;
    float _2920;
    float _2921;
    float _2922;
    float _2923;
    bool _2933;
    for (;;)
    {
        _2892 = cbMatDynParam._m0[0u];
        float _2894 = roundEven(_2892.y);
        bool _2895 = _2894 == 3.0;
        float _2896 = log2(_2882);
        float _2903 = exp2(_2896 * cbSceneParam._m0[78u].x) * _2773;
        float _2904 = exp2(_2896 * cbSceneParam._m0[78u].y) * _2774;
        float _2905 = exp2(_2896 * cbSceneParam._m0[78u].z) * _2775;
        float _2912 = _591 + (-0.5);
        _2914 = cbMtdParam._m0[1u];
        _2916 = _2914.y * _2912;
        float _2919 = (_2894 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2920 = _2919 * (_2895 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2876)));
        _2921 = _2919 * (_2895 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2878)));
        _2922 = _2919 * (_2895 ? _2905 : (_2905 + (cbSceneParam._m0[72u].w * _2880)));
        _2923 = _2912 * 0.999000012874603271484375;
        _2933 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2933)
        {
            if ((cbInstanceData._m0[_641 + 7u].x + _2923) < 0.5)
            {
                _3089 = true;
                break;
            }
        }
        uint _3030 = _642 + uint(_2892.w);
        if ((cbInstanceData._m0[_3030].w < 1.0) && ((cbInstanceData._m0[_3030].w + _2923) < 0.5))
        {
            _3089 = true;
            break;
        }
        if ((_2916 + 1.0) < _2914.x)
        {
            _3089 = true;
            break;
        }
        _3089 = false;
        break;
    }
    float _3293;
    if (_3089)
    {
        discard_state = true;
        _3293 = 0.0;
    }
    else
    {
        _3293 = cbInstanceData._m0[_2776].w;
    }
    SV_Target.x = _2920;
    SV_Target.y = _2921;
    SV_Target.z = _2922;
    SV_Target.w = _3293;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2776].w;
    discard_exit();
}


