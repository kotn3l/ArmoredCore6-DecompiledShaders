#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _998;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _251 = _245.x * cbMtdParam._m0[10u].x;
    float _252 = _245.y * cbMtdParam._m0[10u].y;
    float _253 = _245.z * cbMtdParam._m0[10u].z;
    float _258 = 1.0 - cbMtdParam._m0[13u].z;
    float _3594 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _260 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    vec4 _278 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _286 = ((_251 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _278.x;
    float _289 = ((_252 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _278.y;
    float _292 = ((_253 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _278.z;
    float _299 = ((_251 - _286) * _260) + _286;
    float _300 = ((_252 - _289) * _260) + _289;
    float _301 = ((_253 - _292) * _260) + _292;
    vec4 _319 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _349 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3605 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _357 = (_350 * ((_319.x * cbMtdParam._m0[11u].x) - _299)) + _299;
    float _358 = (_350 * ((_319.y * cbMtdParam._m0[11u].y) - _300)) + _300;
    float _359 = (_350 * ((_319.z * cbMtdParam._m0[11u].z) - _301)) + _301;
    vec4 _373 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _377 = _373.z;
    vec4 _390 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _404 = cbMtdParam._m0[13u].w * _377;
    float _407 = (((((_377 * 2.0) * _390.z) * cbMtdParam._m0[14u].x) - _404) * cbMtdParam._m0[13u].y) + _404;
    vec4 _420 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _435 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_420.z * cbMtdParam._m0[14u].y) - _407)) + _407;
    float _442 = (_373.x * 2.0) + (-1.0);
    float _443 = (_373.y * 2.0) + (-1.0);
    float _444 = dot(vec2(_442, _443), vec2(_442, _443));
    float _3616 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _449 = sqrt(1.0 - (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))));
    float _460 = ((cbMtdParam._m0[13u].x * ((_390.x * 2.0) + (-1.0))) + _442) + ((((_420.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _461 = ((cbMtdParam._m0[13u].x * ((_390.y * 2.0) + (-1.0))) + _443) + ((((_420.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _464 = fma(_449, _210 * NORMAL.x, fma(_461, _217 * TANGENT.x, (_203 * _195) * _460));
    float _467 = fma(_449, _210 * NORMAL.y, fma(_461, _217 * TANGENT.y, (_203 * _196) * _460));
    float _470 = fma(_449, _210 * NORMAL.z, fma(_461, _217 * TANGENT.z, (_203 * _197) * _460));
    float _474 = inversesqrt(dot(vec3(_464, _467, _470), vec3(_464, _467, _470)));
    float _475 = _474 * _464;
    float _476 = _474 * _467;
    float _477 = _474 * _470;
    float _3627 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _478 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _3638 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _3649 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _3660 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _497 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _547 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _537);
    float _548 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _537);
    float _549 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _537);
    float _553 = inversesqrt(dot(vec3(_547, _548, _549), vec3(_547, _548, _549)));
    float _554 = _547 * _553;
    float _555 = _548 * _553;
    float _556 = _549 * _553;
    float _562 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _563 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _582 = fma(_477, cbSceneParam._m0[5u].z, fma(_476, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _475));
    float _585 = fma(_477, cbSceneParam._m0[6u].z, fma(_476, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _475));
    float _588 = fma(_477, cbSceneParam._m0[7u].z, fma(_476, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _475));
    uint _601 = uint(roundEven(NORMAL.w)) * 13u;
    uint _603 = (_601 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _609 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) * cbInstanceData._m0[_603].x;
    float _610 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) * cbInstanceData._m0[_603].y;
    float _611 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) * cbInstanceData._m0[_603].z;
    float _3671 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _3682 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    vec4 _623 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _562, cbSceneParam._m0[86u].y * _563));
    float _626 = _623.x * TEXCOORD_5.w;
    float _627 = dot(vec3(_475, _476, _477), vec3(_554, _555, _556));
    float _630 = _627 * 2.0;
    float _634 = (_630 * _475) - _554;
    float _635 = (_630 * _476) - _555;
    float _636 = (_630 * _477) - _556;
    float _640 = abs(dot(vec3(_554, _555, _556), vec3(_475, _476, _477)));
    float _3704 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _642 = sqrt(_478);
    float _655 = exp2((_642 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_642 * 3.0));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _997;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _722 = fma(_695, cbModelParam._m0[26u].z, fma(_691, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687));
        float _726 = fma(_695, cbModelParam._m0[27u].z, fma(_691, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687));
        float _730 = fma(_695, cbModelParam._m0[28u].z, fma(_691, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687));
        float _755 = _687 + _475;
        float _756 = _691 + _476;
        float _757 = _695 + _477;
        float _767 = fma(_757, cbModelParam._m0[26u].z, fma(_756, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _755)) - _722;
        float _768 = fma(_757, cbModelParam._m0[27u].z, fma(_756, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _755)) - _726;
        float _769 = fma(_757, cbModelParam._m0[28u].z, fma(_756, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _755)) - _730;
        float _773 = inversesqrt(dot(vec3(_767, _768, _769), vec3(_767, _768, _769)));
        float _786 = ((_773 * _767) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_722 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _787 = ((_773 * _768) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_726 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _788 = ((_773 * _769) / cbModelParam._m0[34u].z) + ((((((_730 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        float _825 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_791.x + (-0.5));
        float _827 = _825 * (_791.y + (-0.5));
        float _828 = _825 * (_791.z + (-0.5));
        float _835 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_798.x + (-0.5));
        float _837 = _835 * (_798.y + (-0.5));
        float _838 = _835 * (_798.z + (-0.5));
        float _845 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_805.x + (-0.5));
        float _847 = _845 * (_805.y + (-0.5));
        float _848 = _845 * (_805.z + (-0.5));
        float _855 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_812.x + (-0.5));
        float _857 = _855 * (_812.y + (-0.5));
        float _858 = _855 * (_812.z + (-0.5));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = _826 * 0.5;
        float _863 = _836 * 0.5;
        float _864 = _846 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _879 = (dot(vec3(_475, _476, _477), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _889 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3752 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_891 + 1.0))) + _896) * _859;
        float _906 = _827 * 0.5;
        float _907 = _837 * 0.5;
        float _908 = _847 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_475, _476, _477), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3785 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_933 + 1.0))) + _938) * _860;
        float _948 = _828 * 0.5;
        float _949 = _838 * 0.5;
        float _950 = _848 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_475, _476, _477), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3818 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_975 + 1.0))) + _980) * _861;
        _997 = _828;
        _999 = _827;
        _1000 = _826;
        _1001 = _838;
        _1002 = _837;
        _1003 = _836;
        _1004 = _848;
        _1005 = _847;
        _1006 = _846;
        _1007 = _861;
        _1008 = _860;
        _1009 = _859;
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
    }
    else
    {
        _997 = _998;
        _999 = _998;
        _1000 = _998;
        _1001 = _998;
        _1002 = _998;
        _1003 = _998;
        _1004 = _998;
        _1005 = _998;
        _1006 = _998;
        _1007 = _998;
        _1008 = _998;
        _1009 = _998;
        _1010 = 0.0;
        _1011 = 0.0;
        _1012 = 0.0;
    }
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1038 = fma(_695, cbModelParam._m0[30u].z, fma(_691, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _687));
        float _1042 = fma(_695, cbModelParam._m0[31u].z, fma(_691, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _687));
        float _1046 = fma(_695, cbModelParam._m0[32u].z, fma(_691, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _687));
        float _1069 = _687 + _475;
        float _1070 = _691 + _476;
        float _1071 = _695 + _477;
        float _1081 = fma(_1071, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069)) - _1038;
        float _1082 = fma(_1071, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069)) - _1042;
        float _1083 = fma(_1071, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069)) - _1046;
        float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
        float _1100 = ((_1087 * _1081) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1038 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1087 * _1082) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1042 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1087 * _1083) / cbModelParam._m0[35u].z) + ((((((_1046 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        float _1137 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1104.x + (-0.5));
        float _1139 = _1137 * (_1104.y + (-0.5));
        float _1140 = _1137 * (_1104.z + (-0.5));
        float _1147 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1111.x + (-0.5));
        float _1149 = _1147 * (_1111.y + (-0.5));
        float _1150 = _1147 * (_1111.z + (-0.5));
        float _1157 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1118.x + (-0.5));
        float _1159 = _1157 * (_1118.y + (-0.5));
        float _1160 = _1157 * (_1118.z + (-0.5));
        float _1167 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1125.x + (-0.5));
        float _1169 = _1167 * (_1125.y + (-0.5));
        float _1170 = _1167 * (_1125.z + (-0.5));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = _1138 * 0.5;
        float _1175 = _1148 * 0.5;
        float _1176 = _1158 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_475, _476, _477), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3881 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1201 + 1.0))) + _1206) * _1171;
        float _1216 = _1139 * 0.5;
        float _1217 = _1149 * 0.5;
        float _1218 = _1159 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_475, _476, _477), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3914 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1243 + 1.0))) + _1248) * _1172;
        float _1258 = _1140 * 0.5;
        float _1259 = _1150 * 0.5;
        float _1260 = _1160 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_475, _476, _477), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3947 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1285 + 1.0))) + _1290) * _1173;
        _1307 = _1140;
        _1308 = _1139;
        _1309 = _1138;
        _1310 = _1150;
        _1311 = _1149;
        _1312 = _1148;
        _1313 = _1160;
        _1314 = _1159;
        _1315 = _1158;
        _1316 = _1173;
        _1317 = _1172;
        _1318 = _1171;
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _998;
        _1308 = _998;
        _1309 = _998;
        _1310 = _998;
        _1311 = _998;
        _1312 = _998;
        _1313 = _998;
        _1314 = _998;
        _1315 = _998;
        _1316 = _998;
        _1317 = _998;
        _1318 = _998;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1010)) + _1010;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1011)) + _1011;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1012)) + _1012;
    float _1354 = fma(_1333, cbSceneParam._m0[89u].z, fma(_1332, cbSceneParam._m0[89u].y, _1331 * cbSceneParam._m0[89u].x));
    float _1357 = fma(_1333, cbSceneParam._m0[90u].z, fma(_1332, cbSceneParam._m0[90u].y, _1331 * cbSceneParam._m0[90u].x));
    float _1360 = fma(_1333, cbSceneParam._m0[91u].z, fma(_1332, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1331));
    float _1375 = _634 * 0.5;
    float _1376 = _635 * 0.5;
    float _1377 = _636 * 0.5;
    float _1378 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1381 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1384 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1418;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1391 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_997, _1001, _1004, _1007));
        float _1395 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_999, _1002, _1005, _1008));
        float _1399 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1000, _1003, _1006, _1009));
        float _1406 = dot(vec4(cbModelParam._m0[39u]), vec4(_1375, _1376, _1377, 1.0));
        _1418 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1418 = 1.0;
    }
    float _1429;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1420 = dot(vec4(cbModelParam._m0[40u]), vec4(_1375, _1376, _1377, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1420) ? 0.0 : (isnan(0.0) ? _1420 : max(0.0, _1420))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1433 = (_1429 * cbModelParam._m0[1u].x) + (_1418 * (1.0 - cbModelParam._m0[1u].x));
    float _1443 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _478);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1443 : min(cbModelParam._m0[25u].z, _1443));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1491 = fma(_695, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687)) + cbModelParam._m0[13u].w;
        float _1495 = fma(_695, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687)) + cbModelParam._m0[14u].w;
        float _1499 = fma(_695, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687)) + cbModelParam._m0[15u].w;
        float _1502 = fma(_636, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634));
        float _1505 = fma(_636, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634));
        float _1508 = fma(_636, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634));
        float _1536;
        if (_1502 > 0.0)
        {
            _1536 = abs((1.0 - _1491) / _1502);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1491 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1536 = frontier_phi_14_12_ladder;
        }
        float _1709;
        if (_1505 > 0.0)
        {
            _1709 = abs((1.0 - _1495) / _1505);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1495 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1709 = frontier_phi_23_19_ladder;
        }
        float _2005;
        if (_1508 > 0.0)
        {
            _2005 = abs((1.0 - _1499) / _1508);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1499 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2005 = frontier_phi_35_30_ladder;
        }
        float _2007 = isnan(_1709) ? _1536 : (isnan(_1536) ? _1709 : min(_1536, _1709));
        float _2008 = isnan(_2005) ? _2007 : (isnan(_2007) ? _2005 : min(_2007, _2005));
        float _2012 = (_2008 * _1502) + _1491;
        float _2013 = (_2008 * _1505) + _1495;
        float _2014 = (_2008 * _1508) + _1499;
        float _2015 = _2008 * 9.9999997473787516355514526367188e-05;
        float _2017 = (-1.0) - _2015;
        float _2019 = _2015 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2014 > _2019) || ((_2014 < _2017) || ((_2013 > _2019) || ((_2013 < _2017) || ((_2012 < _2017) || (_2012 > _2019))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2159 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2014, cbModelParam._m0[9u].z, fma(_2013, cbModelParam._m0[9u].y, _2012 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2014, cbModelParam._m0[10u].z, fma(_2013, cbModelParam._m0[10u].y, _2012 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2014, cbModelParam._m0[11u].z, fma(_2013, cbModelParam._m0[11u].y, _2012 * cbModelParam._m0[11u].x))), _1444);
            frontier_phi_13_35_ladder = _2159.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2159.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2159.x * cbModelParam._m0[1u].y;
        }
        _1524 = frontier_phi_13_35_ladder_2;
        _1526 = frontier_phi_13_35_ladder_1;
        _1528 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_634, _635, _636), _1444);
        _1524 = _1512.x * cbModelParam._m0[1u].y;
        _1526 = _1512.y * cbModelParam._m0[1u].y;
        _1528 = _1512.z * cbModelParam._m0[1u].y;
    }
    float _1532 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _478);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1532 : min(cbModelParam._m0[25u].w, _1532));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1590 = fma(_695, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687)) + cbModelParam._m0[21u].w;
        float _1594 = fma(_695, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687)) + cbModelParam._m0[22u].w;
        float _1598 = fma(_695, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687)) + cbModelParam._m0[23u].w;
        float _1601 = fma(_636, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634));
        float _1604 = fma(_636, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634));
        float _1607 = fma(_636, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634));
        float _1714;
        if (_1601 > 0.0)
        {
            _1714 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1714 = frontier_phi_25_21_ladder;
        }
        float _2032;
        if (_1604 > 0.0)
        {
            _2032 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2032 = frontier_phi_37_32_ladder;
        }
        float _2359;
        if (_1607 > 0.0)
        {
            _2359 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2359 = frontier_phi_47_44_ladder;
        }
        float _2361 = isnan(_2032) ? _1714 : (isnan(_1714) ? _2032 : min(_1714, _2032));
        float _2362 = isnan(_2359) ? _2361 : (isnan(_2361) ? _2359 : min(_2361, _2359));
        float _2366 = (_2362 * _1601) + _1590;
        float _2367 = (_2362 * _1604) + _1594;
        float _2368 = (_2362 * _1607) + _1598;
        float _2369 = _2362 * 9.9999997473787516355514526367188e-05;
        float _2370 = (-1.0) - _2369;
        float _2372 = _2369 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2368 > _2372) || ((_2368 < _2370) || ((_2367 > _2372) || ((_2367 < _2370) || ((_2366 < _2370) || (_2366 > _2372))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2486 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2368, cbModelParam._m0[17u].z, fma(_2367, cbModelParam._m0[17u].y, _2366 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2368, cbModelParam._m0[18u].z, fma(_2367, cbModelParam._m0[18u].y, _2366 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2368, cbModelParam._m0[19u].z, fma(_2367, cbModelParam._m0[19u].y, _2366 * cbModelParam._m0[19u].x))), _1533);
            frontier_phi_22_47_ladder = _2486.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2486.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2486.x * cbModelParam._m0[1u].z;
        }
        _1626 = frontier_phi_22_47_ladder_2;
        _1628 = frontier_phi_22_47_ladder_1;
        _1630 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_634, _635, _636), _1533);
        _1626 = _1610.x * cbModelParam._m0[1u].z;
        _1628 = _1610.y * cbModelParam._m0[1u].z;
        _1630 = _1610.z * cbModelParam._m0[1u].z;
    }
    float _1642 = ((((1.0 - _655) * ((_642 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_655 * _642)) * _626;
    float _1643 = _1642 * ((cbModelParam._m0[1u].w * (_1626 - _1524)) + _1524);
    float _1644 = _1642 * ((cbModelParam._m0[1u].w * (_1628 - _1526)) + _1526);
    float _1645 = _1642 * ((cbModelParam._m0[1u].w * (_1630 - _1528)) + _1528);
    float _1648 = fma(_1645, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1651 = fma(_1645, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1654 = fma(_1645, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, _1643 * cbSceneParam._m0[91u].x));
    float _1688 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1692 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1696 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1700 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1701 = _1688 / _1700;
    float _1702 = _1692 / _1700;
    float _1703 = _1696 / _1700;
    float _1850;
    float _1851;
    float _1852;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1730 = ((uint(_1703 > cbSceneParam._m0[59u].y) + uint(_1703 > cbSceneParam._m0[59u].x)) + uint(_1703 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1731 = _1730 + 43u;
        uint _1739 = _1730 + 44u;
        uint _1747 = _1730 + 45u;
        uint _1755 = _1730 + 46u;
        float _1766 = fma(_1700, cbSceneParam._m0[_1731].w, fma(_1696, cbSceneParam._m0[_1731].z, fma(_1692, cbSceneParam._m0[_1731].y, _1688 * cbSceneParam._m0[_1731].x)));
        float _1770 = fma(_1700, cbSceneParam._m0[_1739].w, fma(_1696, cbSceneParam._m0[_1739].z, fma(_1692, cbSceneParam._m0[_1739].y, _1688 * cbSceneParam._m0[_1739].x)));
        float _1778 = fma(_1700, cbSceneParam._m0[_1755].w, fma(_1696, cbSceneParam._m0[_1755].z, fma(_1692, cbSceneParam._m0[_1755].y, _1688 * cbSceneParam._m0[_1755].x)));
        float _1783 = cbSceneParam._m0[33u].z * _1778;
        float _1785 = cbSceneParam._m0[33u].w * _1778;
        float _1788 = fma(_1700, cbSceneParam._m0[_1747].w, fma(_1696, cbSceneParam._m0[_1747].z, fma(_1692, cbSceneParam._m0[_1747].y, _1688 * cbSceneParam._m0[_1747].x))) / _1778;
        float _1836 = (cbSceneParam._m0[33u].x - sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703))) * cbSceneParam._m0[33u].y;
        float _4073 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1843 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1783 + _1766) / _1778, (_1785 + _1770) / _1778), _1788), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1785 + _1766) / _1778, (_1770 - _1783) / _1778), _1788), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1766 - _1783) / _1778, (_1770 - _1785) / _1778), _1788), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1766 - _1785) / _1778, (_1783 + _1770) / _1778), _1788), 0.0)).x), vec4(0.25)));
        _1850 = 1.0 - (_1843 * cbSceneParam._m0[34u].x);
        _1851 = 1.0 - (_1843 * cbSceneParam._m0[34u].y);
        _1852 = 1.0 - (_1843 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1850 = 1.0;
        _1851 = 1.0;
        _1852 = 1.0;
    }
    float _1916;
    float _1918;
    float _1920;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1904 = fma(_1700, cbSceneParam._m0[63u].w, fma(_1696, cbSceneParam._m0[63u].z, fma(_1692, cbSceneParam._m0[63u].y, _1688 * cbSceneParam._m0[63u].x)));
        float _1905 = fma(_1700, cbSceneParam._m0[60u].w, fma(_1696, cbSceneParam._m0[60u].z, fma(_1692, cbSceneParam._m0[60u].y, _1688 * cbSceneParam._m0[60u].x))) / _1904;
        float _1906 = fma(_1700, cbSceneParam._m0[61u].w, fma(_1696, cbSceneParam._m0[61u].z, fma(_1692, cbSceneParam._m0[61u].y, _1688 * cbSceneParam._m0[61u].x))) / _1904;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1905 >= cbSceneParam._m0[64u].x) && (_1906 >= cbSceneParam._m0[64u].y)) && (_1905 <= cbSceneParam._m0[64u].z)) && (_1906 <= cbSceneParam._m0[64u].w))
        {
            float _2045 = fma(_1700, cbSceneParam._m0[62u].w, fma(_1696, cbSceneParam._m0[62u].z, fma(_1692, cbSceneParam._m0[62u].y, _1688 * cbSceneParam._m0[62u].x))) / _1904;
            float _2049 = isnan(cbSceneParam._m0[41u].w) ? _2045 : (isnan(_2045) ? cbSceneParam._m0[41u].w : max(_2045, cbSceneParam._m0[41u].w));
            float _2092 = (cbSceneParam._m0[33u].x - sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703))) * cbSceneParam._m0[33u].y;
            float _4089 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
            float _2099 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1905, cbSceneParam._m0[33u].w + _1906), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1905, _1906 - cbSceneParam._m0[33u].z), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1905 - cbSceneParam._m0[33u].z, _1906 - cbSceneParam._m0[33u].w), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1905 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1906), _2049), 0.0)).x), vec4(0.25)));
            float _2103 = 1.0 - (_2099 * cbSceneParam._m0[34u].x);
            float _2104 = 1.0 - (_2099 * cbSceneParam._m0[34u].y);
            float _2105 = 1.0 - (_2099 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2105) ? _1852 : (isnan(_1852) ? _2105 : min(_1852, _2105));
            frontier_phi_34_33_ladder_1 = isnan(_2104) ? _1851 : (isnan(_1851) ? _2104 : min(_1851, _2104));
            frontier_phi_34_33_ladder_2 = isnan(_2103) ? _1850 : (isnan(_1850) ? _2103 : min(_1850, _2103));
        }
        else
        {
            frontier_phi_34_33_ladder = _1852;
            frontier_phi_34_33_ladder_1 = _1851;
            frontier_phi_34_33_ladder_2 = _1850;
        }
        _1916 = frontier_phi_34_33_ladder_2;
        _1918 = frontier_phi_34_33_ladder_1;
        _1920 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1916 = _1850;
        _1918 = _1851;
        _1920 = _1852;
    }
    uvec4 _1925 = floatBitsToUint(cbInstanceData._m0[_601 + 5u]);
    uint _1927 = _1925.x * 14u;
    uint _1928 = _1927 + 13u;
    float _1935 = _626 + (-1.0);
    float _1940 = (cbLight._m0[_1928].x * _1935) + 1.0;
    float _1941 = (cbLight._m0[_1928].y * _1935) + 1.0;
    float _1942 = (cbLight._m0[_1928].z * _1935) + 1.0;
    float _1943 = (cbLight._m0[_1928].w * _1935) + 1.0;
    uint _1944 = _1927 + 5u;
    float _1950 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
    uint _1954 = _1927 + 4u;
    float _1964 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
    uint _1968 = _1927 | 1u;
    float _1979 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_475, _476, _477));
    float _1982 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_475, _476, _477));
    float _4125 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _4136 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1987 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.3183098733425140380859375;
    float _1989 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
    float _1996 = ((cbLight._m0[_1944].x * _1950) * _1989) + (((cbLight._m0[_1954].x * _1916) * _1964) * _1987);
    float _1997 = ((_1950 * cbLight._m0[_1944].y) * _1989) + (((cbLight._m0[_1954].y * _1918) * _1964) * _1987);
    float _1998 = ((_1950 * cbLight._m0[_1944].z) * _1989) + (((cbLight._m0[_1954].z * _1920) * _1964) * _1987);
    uvec4 _2002 = floatBitsToUint(cbLight._m0[_1927 + 12u]);
    bool _2004 = _2002.x == 0u;
    float _2106;
    float _2108;
    float _2110;
    if (_2004)
    {
        _2106 = _1996;
        _2108 = _1997;
        _2110 = _1998;
    }
    else
    {
        uint _2114 = _1927 + 6u;
        float _2130 = (dot(vec3(cbLight._m0[_1927 + 2u].xyz), vec3(_475, _476, _477)) * 0.5) + 0.5;
        float _2131 = _2130 * _2130;
        float _4147 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2132 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2133 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2106 = (((cbLight._m0[_2114].x * 0.3183098733425140380859375) * _2132) * _2133) + _1996;
        _2108 = (((cbLight._m0[_2114].y * 0.3183098733425140380859375) * _2132) * _2133) + _1997;
        _2110 = (((cbLight._m0[_2114].z * 0.3183098733425140380859375) * _2132) * _2133) + _1998;
    }
    bool _2113 = _2002.y == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2113)
    {
        _2168 = _2106;
        _2170 = _2108;
        _2172 = _2110;
    }
    else
    {
        uint _2330 = _1927 + 7u;
        float _2346 = (dot(vec3(cbLight._m0[_1927 + 3u].xyz), vec3(_475, _476, _477)) * 0.5) + 0.5;
        float _2347 = _2346 * _2346;
        float _4163 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2348 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2349 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2168 = (((cbLight._m0[_2330].x * 0.3183098733425140380859375) * _2348) * _2349) + _2106;
        _2170 = (((cbLight._m0[_2330].y * 0.3183098733425140380859375) * _2348) * _2349) + _2108;
        _2172 = (((cbLight._m0[_2330].z * 0.3183098733425140380859375) * _2348) * _2349) + _2110;
    }
    uint _2175 = _1927 + 8u;
    float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1927].w)) * _478) * 0.949999988079071044921875);
    float _2189 = _2188 * _2188;
    float _2190 = cbLight._m0[_1927].x + _554;
    float _2191 = cbLight._m0[_1927].y + _555;
    float _2192 = cbLight._m0[_1927].z + _556;
    float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
    float _2197 = _2196 * _2190;
    float _2198 = _2196 * _2191;
    float _2199 = _2196 * _2192;
    float _2200 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1927].xyz));
    float _4179 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _2204 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2205 = dot(vec3(_475, _476, _477), vec3(_2197, _2198, _2199));
    float _4201 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2209 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_2197, _2198, _2199));
    float _4212 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2213 = _2189 * _2189;
    float _2217 = ((_2208 * _2208) * (_2213 + (-1.0))) + 1.0;
    float _2228 = (exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2229 = 1.0 - _2189;
    float _2240 = (0.5 / (((_2204 * ((_2203 * _2229) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2229) + _2189) * _2203))) * _2203;
    float _4223 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2242 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2213 / ((_2217 * _2217) * 3.141590118408203125));
    uint _2256 = _1927 + 9u;
    float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _478) * 0.949999988079071044921875);
    float _2268 = _2267 * _2267;
    float _2269 = cbLight._m0[_1968].x + _554;
    float _2270 = cbLight._m0[_1968].y + _555;
    float _2271 = cbLight._m0[_1968].z + _556;
    float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
    float _2276 = _2275 * _2269;
    float _2277 = _2275 * _2270;
    float _2278 = _2275 * _2271;
    float _2279 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1968].xyz));
    float _4234 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2283 = dot(vec3(_475, _476, _477), vec3(_2276, _2277, _2278));
    float _4245 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2287 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_2276, _2277, _2278));
    float _4256 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2291 = _2268 * _2268;
    float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
    float _2304 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2305 = 1.0 - _2268;
    float _2315 = (0.5 / (((_2204 * ((_2282 * _2305) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2305) + _2268) * _2282))) * _2282;
    float _4267 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2317 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
    float _2327 = (((_2304 * cbLight._m0[_2256].x) * _2317) * _1950) + ((((cbLight._m0[_2175].x * _1916) * _2228) * _2242) * _1964);
    float _2328 = (((_2304 * cbLight._m0[_2256].y) * _2317) * _1950) + ((((cbLight._m0[_2175].y * _1918) * _2228) * _2242) * _1964);
    float _2329 = (((_2304 * cbLight._m0[_2256].z) * _2317) * _1950) + ((((cbLight._m0[_2175].z * _1920) * _2228) * _2242) * _1964);
    float _2385;
    float _2387;
    float _2389;
    if (_2004)
    {
        _2385 = _2327;
        _2387 = _2328;
        _2389 = _2329;
    }
    else
    {
        uint _2391 = _1927 + 2u;
        uint _2395 = _1927 + 10u;
        float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _478) * 0.949999988079071044921875);
        float _2410 = _2409 * _2409;
        float _2411 = cbLight._m0[_2391].x + _554;
        float _2412 = cbLight._m0[_2391].y + _555;
        float _2413 = cbLight._m0[_2391].z + _556;
        float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
        float _2418 = _2417 * _2411;
        float _2419 = _2417 * _2412;
        float _2420 = _2417 * _2413;
        float _2421 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_2391].xyz));
        float _4278 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2425 = dot(vec3(_475, _476, _477), vec3(_2418, _2419, _2420));
        float _4289 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2429 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2418, _2419, _2420));
        float _4300 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2433 = _2410 * _2410;
        float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
        float _2446 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2447 = 1.0 - _2410;
        float _2457 = (0.5 / (((_2204 * ((_2424 * _2447) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2447) + _2410) * _2424))) * _2424;
        float _4311 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2459 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
        float _2460 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2385 = (((_2446 * cbLight._m0[_2395].x) * _2459) * _2460) + _2327;
        _2387 = (((_2446 * cbLight._m0[_2395].y) * _2459) * _2460) + _2328;
        _2389 = (((_2446 * cbLight._m0[_2395].z) * _2459) * _2460) + _2329;
    }
    float _2491;
    float _2493;
    float _2495;
    if (_2113)
    {
        _2491 = _2385;
        _2493 = _2387;
        _2495 = _2389;
    }
    else
    {
        uint _2502 = _1927 + 3u;
        uint _2506 = _1927 + 11u;
        float _2520 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2502].w)) * _478) * 0.949999988079071044921875);
        float _2521 = _2520 * _2520;
        float _2522 = cbLight._m0[_2502].x + _554;
        float _2523 = cbLight._m0[_2502].y + _555;
        float _2524 = cbLight._m0[_2502].z + _556;
        float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
        float _2529 = _2528 * _2522;
        float _2530 = _2528 * _2523;
        float _2531 = _2528 * _2524;
        float _2532 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_2502].xyz));
        float _4327 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2536 = dot(vec3(_475, _476, _477), vec3(_2529, _2530, _2531));
        float _4338 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2540 = dot(vec3(cbLight._m0[_2502].xyz), vec3(_2529, _2530, _2531));
        float _4349 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2544 = _2521 * _2521;
        float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
        float _2557 = (exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2558 = 1.0 - _2521;
        float _2568 = (0.5 / (((_2204 * ((_2535 * _2558) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2558) + _2521) * _2535))) * _2535;
        float _4360 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2570 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
        float _2571 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2491 = (((_2557 * cbLight._m0[_2506].x) * _2570) * _2571) + _2385;
        _2493 = (((_2557 * cbLight._m0[_2506].y) * _2570) * _2571) + _2387;
        _2495 = (((_2557 * cbLight._m0[_2506].z) * _2570) * _2571) + _2389;
    }
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_1925.y == 0u)
    {
        uvec4 _2592 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2593 = _2592.x;
        uint _2604 = uint((float(_2592.y) * floor(float(uint(cbSceneParam._m0[85u].y * _563) / _2593))) + floor(float(uint(cbSceneParam._m0[85u].x * _562) / _2593)));
        float _2614 = (log2(_1703 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2615 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        uint _2618 = uint(isnan(14.0) ? _2615 : (isnan(_2615) ? 14.0 : min(_2615, 14.0)));
        uvec4 _2623 = texelFetch(g_lightClusterGridBuffer, int(((_2618 << 2u) + (_2604 << 6u)) >> 2u));
        uint _2624 = _2623.x;
        uint _2625 = _2592.z;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        if (((((1u << ((_2625 >> 4u) & 15u)) + 4294967295u) & _2624) == 0u) || ((_2625 & 240u) == 0u))
        {
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
        }
        else
        {
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            uint _2855 = 0u;
            uint _2864;
            bool _2865;
            for (;;)
            {
                _2864 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_2855 << 2u)) >> 2u)).x;
                _2865 = _2864 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2865)
                {
                    frontier_phi_66_pred = _2854;
                    frontier_phi_66_pred_1 = _2853;
                    frontier_phi_66_pred_2 = _2852;
                    frontier_phi_66_pred_3 = _2851;
                    frontier_phi_66_pred_4 = _2850;
                    frontier_phi_66_pred_5 = _2849;
                }
                else
                {
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    uint _2979;
                    _2973 = _2849;
                    _2974 = _2850;
                    _2975 = _2851;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2854;
                    _2979 = _2864;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    for (;;)
                    {
                        uint _2983 = uint(findLSB(_2979)) + (_2855 << 5u);
                        uint _2980 = (_2979 + 4294967295u) & _2979;
                        uint _2985 = _2983 * 48u;
                        vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2985)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 3u)).x));
                        uint _3005 = (_2983 * 48u) + 4u;
                        vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 3u)).x));
                        uint _3024 = (_2983 * 48u) + 8u;
                        vec3 _3035 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3024)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 2u)).x));
                        float _3039 = _2999.x - _1701;
                        float _3040 = _2999.y - _1702;
                        float _3041 = _2999.z - _1703;
                        float _3042 = dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041));
                        float _3045 = inversesqrt(_3042);
                        float _3046 = _3045 * _3039;
                        float _3047 = _3045 * _3040;
                        float _3048 = _3045 * _3041;
                        float _3049 = dot(vec3(_582, _585, _588), vec3(_3046, _3047, _3048));
                        float _3054 = 1.0 - (_3042 * _2999.w);
                        float _4386 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3055 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3056 = sqrt(_3042) * _3018.w;
                        float _3059 = 1.39999997615814208984375 / (_3056 + 1.39999997615814208984375);
                        float _3060 = _3059 * _3059;
                        float _3063 = ((1.0 - _3060) * _3049) + _3060;
                        float _3066 = _3056 * _3056;
                        float _3070 = ((isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0))) * _3055) / ((_3066 * 0.699999988079071044921875) + 1.0);
                        float _3074 = (-0.0) - _1701;
                        float _3075 = (-0.0) - _1702;
                        float _3076 = (-0.0) - _1703;
                        float _3080 = inversesqrt(dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076)));
                        float _3081 = _3080 * _3074;
                        float _3082 = _3080 * _3075;
                        float _3083 = _3080 * _3076;
                        float _3090 = exp2(log2(1.0 / ((_3066 * 3.5) + 5.0)) * 0.25);
                        float _3091 = 1.0 - _642;
                        float _3098 = sqrt(1.0 - ((1.0 - (_3091 * _3091)) * (1.0 - (_3090 * _3090))));
                        float _3099 = _3098 * _3098;
                        float _3100 = _3099 * _3099;
                        float _3101 = _3081 + _3046;
                        float _3102 = _3082 + _3047;
                        float _3103 = _3083 + _3048;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3111 = dot(vec3(_582, _585, _588), vec3(_3081, _3082, _3083));
                        float _4402 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3114 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3115 = dot(vec3(_582, _585, _588), vec3(_3107 * _3101, _3107 * _3102, _3107 * _3103));
                        float _4413 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3118 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3122 = ((_3118 * _3118) * (_3100 + (-1.0))) + 1.0;
                        float _3123 = _3059 * _3099;
                        float _3124 = _3123 * _3123;
                        float _3127 = ((1.0 - _3124) * _3049) + _3124;
                        float _4424 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3128 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3129 = 1.0 - _3099;
                        float _3139 = (0.5 / (((_3128 * ((_3114 * _3129) + _3099)) + 9.9999999392252902907785028219223e-09) + (((_3128 * _3129) + _3099) * _3114))) * _3128;
                        float _4435 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3150 = (((_3100 * 3.1415927410125732421875) * (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) / ((_3122 * _3122) * ((_3066 * 2.1991131305694580078125) + 3.141590118408203125))) * _3055;
                        _2908 = (_3070 * _3018.x) + _2976;
                        _2909 = (_3070 * _3018.y) + _2977;
                        _2910 = (_3070 * _3018.z) + _2978;
                        _2905 = (_3150 * _3035.x) + _2973;
                        _2906 = (_3150 * _3035.y) + _2974;
                        _2907 = (_3150 * _3035.z) + _2975;
                        if (_2980 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2973 = _2905;
                            _2974 = _2906;
                            _2975 = _2907;
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2910;
                            _2979 = _2980;
                        }
                    }
                    frontier_phi_66_pred = _2910;
                    frontier_phi_66_pred_1 = _2909;
                    frontier_phi_66_pred_2 = _2908;
                    frontier_phi_66_pred_3 = _2907;
                    frontier_phi_66_pred_4 = _2906;
                    frontier_phi_66_pred_5 = _2905;
                }
                _2715 = frontier_phi_66_pred;
                _2713 = frontier_phi_66_pred_1;
                _2711 = frontier_phi_66_pred_2;
                _2709 = frontier_phi_66_pred_3;
                _2707 = frontier_phi_66_pred_4;
                _2705 = frontier_phi_66_pred_5;
                uint _2856 = _2855 + 1u;
                if (_2856 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2849 = _2705;
                    _2850 = _2707;
                    _2851 = _2709;
                    _2852 = _2711;
                    _2853 = _2713;
                    _2854 = _2715;
                    _2855 = _2856;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
        }
        uvec4 _2718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2719 = _2718.z;
        uint _2721 = (_2719 >> 8u) & 15u;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        if (((4294967295u << _2721) & _2624) == 0u)
        {
            _2817 = _2704;
            _2819 = _2706;
            _2821 = _2708;
            _2823 = _2710;
            _2825 = _2712;
            _2827 = _2714;
        }
        else
        {
            float _2842 = inversesqrt(dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703)));
            float _2843 = _2842 * _1701;
            float _2844 = _2842 * _1702;
            float _2845 = _2842 * _1703;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2721 < ((_2719 >> 12u) & 15u))
            {
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2956 = _2704;
                float _2957 = _2706;
                float _2958 = _2708;
                float _2959 = _2710;
                float _2960 = _2712;
                float _2961 = _2714;
                uint _2962 = _2721;
                uint _2971;
                bool _2972;
                for (;;)
                {
                    _2971 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_2962 << 2u)) >> 2u)).x;
                    _2972 = _2971 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2972)
                    {
                        frontier_phi_72_pred = _2961;
                        frontier_phi_72_pred_1 = _2960;
                        frontier_phi_72_pred_2 = _2959;
                        frontier_phi_72_pred_3 = _2958;
                        frontier_phi_72_pred_4 = _2957;
                        frontier_phi_72_pred_5 = _2956;
                    }
                    else
                    {
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3168 = _2956;
                        float _3169 = _2957;
                        float _3170 = _2958;
                        float _3171 = _2959;
                        float _3172 = _2960;
                        float _3173 = _2961;
                        uint _3174 = _2971;
                        uint _3175;
                        vec4 _3200;
                        float _3201;
                        vec4 _3216;
                        vec3 _3228;
                        vec4 _3244;
                        vec4 _3260;
                        float _3307;
                        bool _3308;
                        for (;;)
                        {
                            uint _3185 = ((_2962 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3174));
                            _3175 = (_3174 + 4294967295u) & _3174;
                            uint _3187 = _3185 * 40u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            _3201 = _3200.w;
                            uint _3203 = (_3185 * 40u) + 4u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3218 = (_3185 * 40u) + 8u;
                            _3228 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x));
                            uint _3231 = (_3185 * 40u) + 16u;
                            _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3247 = (_3185 * 40u) + 20u;
                            _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3263 = (_3185 * 40u) + 24u;
                            vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3282 = (_3185 * 40u) + 28u;
                            vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            _3307 = fma(_1703, _3295.z, fma(_1702, _3295.y, _3295.x * _1701)) + _3295.w;
                            _3308 = !((fma(_1703, _3276.z, fma(_1702, _3276.y, _3276.x * _1701)) + _3276.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3308)
                            {
                                float _3335 = _3200.x - _1701;
                                float _3336 = _3200.y - _1702;
                                float _3337 = _3200.z - _1703;
                                float _3338 = dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337));
                                float _3341 = inversesqrt(_3338);
                                float _3342 = _3341 * _3335;
                                float _3343 = _3341 * _3336;
                                float _3344 = _3341 * _3337;
                                float _3348 = 1.0 - (_3338 / (_3201 * _3201));
                                float _4446 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3349 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3353 = sqrt(_3338) * _3216.w;
                                float _3355 = 1.39999997615814208984375 / (_3353 + 1.39999997615814208984375);
                                float _3356 = _3355 * _3355;
                                float _3359 = ((1.0 - _3356) * dot(vec3(_3342, _3343, _3344), vec3(_582, _585, _588))) + _3356;
                                float _3362 = _3353 * _3353;
                                float _3366 = (fma(_1703, _3244.z, fma(_1702, _3244.y, _3244.x * _1701)) + _3244.w) / _3307;
                                float _3367 = (fma(_1703, _3260.z, fma(_1702, _3260.y, _3260.x * _1701)) + _3260.w) / _3307;
                                float _3371 = 1.0 - dot(vec2(_3366, _3367), vec2(_3366, _3367));
                                float _4462 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3372 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3373 = _3372 * (((isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0))) * _3349) / ((_3362 * 0.699999988079071044921875) + 1.0));
                                float _3385 = exp2(log2(1.0 / ((_3362 * 3.5) + 5.0)) * 0.25);
                                float _3386 = 1.0 - _642;
                                float _3393 = sqrt(1.0 - ((1.0 - (_3386 * _3386)) * (1.0 - (_3385 * _3385))));
                                float _3394 = _3393 * _3393;
                                float _3395 = _3394 * _3394;
                                float _3396 = _3342 - _2843;
                                float _3397 = _3343 - _2844;
                                float _3398 = _3344 - _2845;
                                float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                                float _3406 = dot(vec3(_582, _585, _588), vec3((-0.0) - _2843, (-0.0) - _2844, (-0.0) - _2845));
                                float _4473 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3409 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3410 = dot(vec3(_582, _585, _588), vec3(_3402 * _3396, _3402 * _3397, _3402 * _3398));
                                float _4484 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3413 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3417 = ((_3413 * _3413) * (_3395 + (-1.0))) + 1.0;
                                float _3418 = _3355 * _3394;
                                float _3419 = _3418 * _3418;
                                float _3425 = ((1.0 - _3419) * dot(vec3(_582, _585, _588), vec3(_3342, _3343, _3344))) + _3419;
                                float _4495 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3427 = 1.0 - _3394;
                                float _3437 = (0.5 / (((_3426 * ((_3409 * _3427) + _3394)) + 9.9999999392252902907785028219223e-09) + (((_3426 * _3427) + _3394) * _3409))) * _3426;
                                float _4506 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3447 = (_3372 * _3349) * (((_3395 * 3.1415927410125732421875) * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) / ((_3417 * _3417) * ((_3362 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3373 * _3216.y;
                                frontier_phi_78_pred_1 = _3373 * _3216.x;
                                frontier_phi_78_pred_2 = _3447 * _3228.z;
                                frontier_phi_78_pred_3 = _3447 * _3228.y;
                                frontier_phi_78_pred_4 = _3447 * _3228.x;
                                frontier_phi_78_pred_5 = _3373 * _3216.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3455 = frontier_phi_78_pred;
                            _3454 = frontier_phi_78_pred_1;
                            _3453 = frontier_phi_78_pred_2;
                            _3452 = frontier_phi_78_pred_3;
                            _3451 = frontier_phi_78_pred_4;
                            _3456 = frontier_phi_78_pred_5;
                            _3158 = _3454 + _3171;
                            _3159 = _3455 + _3172;
                            _3160 = _3456 + _3173;
                            _3155 = _3451 + _3168;
                            _3156 = _3452 + _3169;
                            _3157 = _3453 + _3170;
                            if (_3175 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3175;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3160;
                        frontier_phi_72_pred_1 = _3159;
                        frontier_phi_72_pred_2 = _3158;
                        frontier_phi_72_pred_3 = _3157;
                        frontier_phi_72_pred_4 = _3156;
                        frontier_phi_72_pred_5 = _3155;
                    }
                    _2828 = frontier_phi_72_pred;
                    _2826 = frontier_phi_72_pred_1;
                    _2824 = frontier_phi_72_pred_2;
                    _2822 = frontier_phi_72_pred_3;
                    _2820 = frontier_phi_72_pred_4;
                    _2818 = frontier_phi_72_pred_5;
                    uint _2963 = _2962 + 1u;
                    if (_2963 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2956 = _2818;
                        _2957 = _2820;
                        _2958 = _2822;
                        _2959 = _2824;
                        _2960 = _2826;
                        _2961 = _2828;
                        _2962 = _2963;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2828;
                frontier_phi_60_61_ladder_1 = _2826;
                frontier_phi_60_61_ladder_2 = _2822;
                frontier_phi_60_61_ladder_3 = _2820;
                frontier_phi_60_61_ladder_4 = _2818;
                frontier_phi_60_61_ladder_5 = _2824;
            }
            else
            {
                frontier_phi_60_61_ladder = _2714;
                frontier_phi_60_61_ladder_1 = _2712;
                frontier_phi_60_61_ladder_2 = _2708;
                frontier_phi_60_61_ladder_3 = _2706;
                frontier_phi_60_61_ladder_4 = _2704;
                frontier_phi_60_61_ladder_5 = _2710;
            }
            _2817 = frontier_phi_60_61_ladder_4;
            _2819 = frontier_phi_60_61_ladder_3;
            _2821 = frontier_phi_60_61_ladder_2;
            _2823 = frontier_phi_60_61_ladder_5;
            _2825 = frontier_phi_60_61_ladder_1;
            _2827 = frontier_phi_60_61_ladder;
        }
        float _2832 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
        _2637 = (_2832 * _2823) + _2168;
        _2639 = (_2832 * _2825) + _2170;
        _2641 = (_2832 * _2827) + _2172;
        _2643 = ((_2817 * 0.039999999105930328369140625) * _2832) + _2491;
        _2645 = ((_2819 * 0.039999999105930328369140625) * _2832) + _2493;
        _2647 = ((_2821 * 0.039999999105930328369140625) * _2832) + _2495;
    }
    else
    {
        _2637 = _2168;
        _2639 = _2170;
        _2641 = _2172;
        _2643 = _2491;
        _2645 = _2493;
        _2647 = _2495;
    }
    float _4522 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4533 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4544 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    uint _2667 = _601 + 6u;
    float _2675 = _562 / cbSceneParam._m0[86u].x;
    float _2676 = _563 / cbSceneParam._m0[86u].y;
    vec4 _2690 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2675, _2676, (log2((isnan(cbSceneParam._m0[77u].w) ? _497 : (isnan(_497) ? cbSceneParam._m0[77u].w : min(_497, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2692 = _2690.x;
    float _2693 = _2690.y;
    float _2694 = _2690.z;
    float _2695 = _2690.w;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    if (_497 > cbSceneParam._m0[78u].w)
    {
        float _2729 = isnan(_497) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _497 : min(cbSceneParam._m0[80u].w, _497));
        float _2730 = _2729 / _497;
        float _2741 = _2730 * _547;
        float _2742 = _548 * _2730;
        float _2743 = (-0.0) - _2742;
        float _2745 = _2730 * _549;
        float _2747 = (cbSceneParam._m0[77u].w * _2743) / _2729;
        float _2748 = _2747 + cbSceneParam._m0[79u].w;
        float _2749 = cbSceneParam._m0[79u].w - _2742;
        float _2755 = sqrt(((_2741 * _2741) + (_2742 * _2742)) + (_2745 * _2745));
        float _2758 = (1.0 - (cbSceneParam._m0[77u].w / _2729)) * _2755;
        float _2763 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2765 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2918;
        if (abs((_2743 - _2747) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2918 = ((((_2748 > 0.0) ? exp2(_2763 * _2748) : (2.0 - exp2(_2765 * _2748))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2758;
        }
        else
        {
            float _2878 = 1.0 / cbSceneParam._m0[80u].x;
            float _2879 = isnan(_2749) ? _2748 : (isnan(_2748) ? _2749 : max(_2748, _2749));
            float _2880 = isnan(_2749) ? _2748 : (isnan(_2748) ? _2749 : min(_2748, _2749));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            float _2890 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : min(_2880, 0.0));
            _2918 = ((abs(_2755 / _2743) * cbSceneParam._m0[80u].y) * ((((_2889 - _2890) * 2.0) - ((exp2(_2763 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0)))) - exp2(_2763 * (isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0))))) * _2878)) - ((exp2(_2765 * _2889) - exp2(_2765 * _2890)) * _2878))) + (_2758 * cbSceneParam._m0[80u].z);
        }
        vec4 _2920 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2675, _2676, 1.0), 0.0);
        float _2929 = exp2((_2918 * (-1.44269502162933349609375)) * (1.0 - _2920.w));
        float _2930 = log2(_2929);
        float _2946 = log2(_2695);
        _2767 = (exp2(_2946 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2930 * cbSceneParam._m0[78u].x)) * _2920.x) / cbSceneParam._m0[78u].x)) + _2692;
        _2769 = (exp2(_2946 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2930 * cbSceneParam._m0[78u].y)) * _2920.y) / cbSceneParam._m0[78u].y)) + _2693;
        _2771 = (exp2(_2946 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2930 * cbSceneParam._m0[78u].z)) * _2920.z) / cbSceneParam._m0[78u].z)) + _2694;
        _2773 = _2929 * _2695;
    }
    else
    {
        _2767 = _2692;
        _2769 = _2693;
        _2771 = _2694;
        _2773 = _2695;
    }
    float _2785 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2786 = _2785 == 3.0;
    float _2787 = log2(_2773);
    float _2794 = exp2(_2787 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2637 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _626))) + ((_2643 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1433)) * cbPerFrame._m0[3u].x));
    float _2795 = exp2(_2787 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2639 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _626))) + ((_2645 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1433)) * cbPerFrame._m0[3u].x));
    float _2796 = exp2(_2787 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2641 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _626))) + ((_2647 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1433)) * cbPerFrame._m0[3u].x));
    float _2805 = (_2785 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2805 * (_2786 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2767)));
    SV_Target.y = _2805 * (_2786 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2769)));
    SV_Target.z = _2805 * (_2786 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2771)));
    SV_Target.w = cbInstanceData._m0[_2667].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2667].w;
}


