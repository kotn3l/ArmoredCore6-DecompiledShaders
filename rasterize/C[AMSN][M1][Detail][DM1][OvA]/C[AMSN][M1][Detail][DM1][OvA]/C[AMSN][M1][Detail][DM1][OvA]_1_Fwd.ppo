#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _994;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _247 = _241.x * cbMtdParam._m0[10u].x;
    float _248 = _241.y * cbMtdParam._m0[10u].y;
    float _249 = _241.z * cbMtdParam._m0[10u].z;
    float _254 = 1.0 - cbMtdParam._m0[13u].z;
    float _3307 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _256 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    vec4 _274 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _282 = ((_247 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _274.x;
    float _285 = ((_248 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _274.y;
    float _288 = ((_249 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _274.z;
    float _295 = ((_247 - _282) * _256) + _282;
    float _296 = ((_248 - _285) * _256) + _285;
    float _297 = ((_249 - _288) * _256) + _288;
    vec4 _315 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _345 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3318 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
    float _353 = (_346 * ((_315.x * cbMtdParam._m0[11u].x) - _295)) + _295;
    float _354 = (_346 * ((_315.y * cbMtdParam._m0[11u].y) - _296)) + _296;
    float _355 = (_346 * ((_315.z * cbMtdParam._m0[11u].z) - _297)) + _297;
    vec4 _369 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _373 = _369.z;
    vec4 _386 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _400 = cbMtdParam._m0[13u].w * _373;
    float _403 = (((((_373 * 2.0) * _386.z) * cbMtdParam._m0[14u].x) - _400) * cbMtdParam._m0[13u].y) + _400;
    vec4 _416 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _431 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_416.z * cbMtdParam._m0[14u].y) - _403)) + _403;
    float _438 = (_369.x * 2.0) + (-1.0);
    float _439 = (_369.y * 2.0) + (-1.0);
    float _440 = dot(vec2(_438, _439), vec2(_438, _439));
    float _3329 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _445 = sqrt(1.0 - (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0))));
    float _456 = ((cbMtdParam._m0[13u].x * ((_386.x * 2.0) + (-1.0))) + _438) + ((((_416.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _457 = ((cbMtdParam._m0[13u].x * ((_386.y * 2.0) + (-1.0))) + _439) + ((((_416.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _460 = fma(_445, _206 * NORMAL.x, fma(_457, _213 * TANGENT.x, (_199 * _191) * _456));
    float _463 = fma(_445, _206 * NORMAL.y, fma(_457, _213 * TANGENT.y, (_199 * _192) * _456));
    float _466 = fma(_445, _206 * NORMAL.z, fma(_457, _213 * TANGENT.z, (_199 * _193) * _456));
    float _470 = inversesqrt(dot(vec3(_460, _463, _466), vec3(_460, _463, _466)));
    float _471 = _470 * _460;
    float _472 = _470 * _463;
    float _473 = _470 * _466;
    float _3340 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _474 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    float _3351 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3362 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _3373 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _493 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _543 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _533);
    float _544 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _533);
    float _545 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _533);
    float _549 = inversesqrt(dot(vec3(_543, _544, _545), vec3(_543, _544, _545)));
    float _550 = _543 * _549;
    float _551 = _544 * _549;
    float _552 = _545 * _549;
    float _558 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _559 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _578 = fma(_473, cbSceneParam._m0[5u].z, fma(_472, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _471));
    float _581 = fma(_473, cbSceneParam._m0[6u].z, fma(_472, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _471));
    float _584 = fma(_473, cbSceneParam._m0[7u].z, fma(_472, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _471));
    uint _597 = uint(roundEven(NORMAL.w)) * 13u;
    uint _599 = (_597 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _605 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0)))) * cbInstanceData._m0[_599].x;
    float _606 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0)))) * cbInstanceData._m0[_599].y;
    float _607 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0)))) * cbInstanceData._m0[_599].z;
    float _3384 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
    float _3395 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    float _3406 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    vec4 _619 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _558, cbSceneParam._m0[86u].y * _559));
    float _622 = _619.x * TEXCOORD_5.w;
    float _623 = dot(vec3(_471, _472, _473), vec3(_550, _551, _552));
    float _626 = _623 * 2.0;
    float _630 = (_626 * _471) - _550;
    float _631 = (_626 * _472) - _551;
    float _632 = (_626 * _473) - _552;
    float _636 = abs(dot(vec3(_550, _551, _552), vec3(_471, _472, _473)));
    float _3417 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _638 = sqrt(_474);
    float _651 = exp2((_638 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_638 * 3.0));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _993;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _718 = fma(_691, cbModelParam._m0[26u].z, fma(_687, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683));
        float _722 = fma(_691, cbModelParam._m0[27u].z, fma(_687, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683));
        float _726 = fma(_691, cbModelParam._m0[28u].z, fma(_687, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683));
        float _751 = _683 + _471;
        float _752 = _687 + _472;
        float _753 = _691 + _473;
        float _763 = fma(_753, cbModelParam._m0[26u].z, fma(_752, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _751)) - _718;
        float _764 = fma(_753, cbModelParam._m0[27u].z, fma(_752, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _751)) - _722;
        float _765 = fma(_753, cbModelParam._m0[28u].z, fma(_752, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _751)) - _726;
        float _769 = inversesqrt(dot(vec3(_763, _764, _765), vec3(_763, _764, _765)));
        float _782 = ((_769 * _763) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_718 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _783 = ((_769 * _764) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_722 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _784 = ((_769 * _765) / cbModelParam._m0[34u].z) + ((((((_726 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        float _821 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_787.x + (-0.5));
        float _823 = _821 * (_787.y + (-0.5));
        float _824 = _821 * (_787.z + (-0.5));
        float _831 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_794.x + (-0.5));
        float _833 = _831 * (_794.y + (-0.5));
        float _834 = _831 * (_794.z + (-0.5));
        float _841 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_801.x + (-0.5));
        float _843 = _841 * (_801.y + (-0.5));
        float _844 = _841 * (_801.z + (-0.5));
        float _851 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_808.x + (-0.5));
        float _853 = _851 * (_808.y + (-0.5));
        float _854 = _851 * (_808.z + (-0.5));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = _822 * 0.5;
        float _859 = _832 * 0.5;
        float _860 = _842 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _875 = (dot(vec3(_471, _472, _473), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _885 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3465 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_887 + 1.0))) + _892) * _855;
        float _902 = _823 * 0.5;
        float _903 = _833 * 0.5;
        float _904 = _843 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_471, _472, _473), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3498 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_929 + 1.0))) + _934) * _856;
        float _944 = _824 * 0.5;
        float _945 = _834 * 0.5;
        float _946 = _844 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_471, _472, _473), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3531 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_971 + 1.0))) + _976) * _857;
        _993 = _824;
        _995 = _823;
        _996 = _822;
        _997 = _834;
        _998 = _833;
        _999 = _832;
        _1000 = _844;
        _1001 = _843;
        _1002 = _842;
        _1003 = _857;
        _1004 = _856;
        _1005 = _855;
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
    }
    else
    {
        _993 = _994;
        _995 = _994;
        _996 = _994;
        _997 = _994;
        _998 = _994;
        _999 = _994;
        _1000 = _994;
        _1001 = _994;
        _1002 = _994;
        _1003 = _994;
        _1004 = _994;
        _1005 = _994;
        _1006 = 0.0;
        _1007 = 0.0;
        _1008 = 0.0;
    }
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1034 = fma(_691, cbModelParam._m0[30u].z, fma(_687, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _683));
        float _1038 = fma(_691, cbModelParam._m0[31u].z, fma(_687, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _683));
        float _1042 = fma(_691, cbModelParam._m0[32u].z, fma(_687, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _683));
        float _1065 = _683 + _471;
        float _1066 = _687 + _472;
        float _1067 = _691 + _473;
        float _1077 = fma(_1067, cbModelParam._m0[30u].z, fma(_1066, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1065)) - _1034;
        float _1078 = fma(_1067, cbModelParam._m0[31u].z, fma(_1066, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1065)) - _1038;
        float _1079 = fma(_1067, cbModelParam._m0[32u].z, fma(_1066, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1065)) - _1042;
        float _1083 = inversesqrt(dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079)));
        float _1096 = ((_1083 * _1077) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1034 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1083 * _1078) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1038 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1083 * _1079) / cbModelParam._m0[35u].z) + ((((((_1042 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        float _1133 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1100.x + (-0.5));
        float _1135 = _1133 * (_1100.y + (-0.5));
        float _1136 = _1133 * (_1100.z + (-0.5));
        float _1143 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1107.x + (-0.5));
        float _1145 = _1143 * (_1107.y + (-0.5));
        float _1146 = _1143 * (_1107.z + (-0.5));
        float _1153 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1114.x + (-0.5));
        float _1155 = _1153 * (_1114.y + (-0.5));
        float _1156 = _1153 * (_1114.z + (-0.5));
        float _1163 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1121.x + (-0.5));
        float _1165 = _1163 * (_1121.y + (-0.5));
        float _1166 = _1163 * (_1121.z + (-0.5));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = _1134 * 0.5;
        float _1171 = _1144 * 0.5;
        float _1172 = _1154 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_471, _472, _473), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3594 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1197 + 1.0))) + _1202) * _1167;
        float _1212 = _1135 * 0.5;
        float _1213 = _1145 * 0.5;
        float _1214 = _1155 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_471, _472, _473), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3627 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1239 + 1.0))) + _1244) * _1168;
        float _1254 = _1136 * 0.5;
        float _1255 = _1146 * 0.5;
        float _1256 = _1156 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_471, _472, _473), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3660 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1281 + 1.0))) + _1286) * _1169;
        _1303 = _1136;
        _1304 = _1135;
        _1305 = _1134;
        _1306 = _1146;
        _1307 = _1145;
        _1308 = _1144;
        _1309 = _1156;
        _1310 = _1155;
        _1311 = _1154;
        _1312 = _1169;
        _1313 = _1168;
        _1314 = _1167;
        _1315 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1316 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
    }
    else
    {
        _1303 = _994;
        _1304 = _994;
        _1305 = _994;
        _1306 = _994;
        _1307 = _994;
        _1308 = _994;
        _1309 = _994;
        _1310 = _994;
        _1311 = _994;
        _1312 = _994;
        _1313 = _994;
        _1314 = _994;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1327 = (cbModelParam._m0[1u].x * (_1315 - _1006)) + _1006;
    float _1328 = (cbModelParam._m0[1u].x * (_1316 - _1007)) + _1007;
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1008)) + _1008;
    float _1350 = fma(_1329, cbSceneParam._m0[89u].z, fma(_1328, cbSceneParam._m0[89u].y, _1327 * cbSceneParam._m0[89u].x));
    float _1353 = fma(_1329, cbSceneParam._m0[90u].z, fma(_1328, cbSceneParam._m0[90u].y, _1327 * cbSceneParam._m0[90u].x));
    float _1356 = fma(_1329, cbSceneParam._m0[91u].z, fma(_1328, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1327));
    float _1371 = _630 * 0.5;
    float _1372 = _631 * 0.5;
    float _1373 = _632 * 0.5;
    float _1374 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1377 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1304, _1307, _1310, _1313));
    float _1380 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1303, _1306, _1309, _1312));
    float _1414;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1387 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_993, _997, _1000, _1003));
        float _1391 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_995, _998, _1001, _1004));
        float _1395 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_996, _999, _1002, _1005));
        float _1402 = dot(vec4(cbModelParam._m0[39u]), vec4(_1371, _1372, _1373, 1.0));
        _1414 = dot(vec3(isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1414 = 1.0;
    }
    float _1425;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1416 = dot(vec4(cbModelParam._m0[40u]), vec4(_1371, _1372, _1373, 1.0));
        _1425 = dot(vec3(isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1416) ? 0.0 : (isnan(0.0) ? _1416 : max(0.0, _1416))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1425 = 1.0;
    }
    float _1429 = (_1425 * cbModelParam._m0[1u].x) + (_1414 * (1.0 - cbModelParam._m0[1u].x));
    float _1439 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _474);
    float _1440 = isnan(_1439) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1439 : min(cbModelParam._m0[25u].z, _1439));
    float _1520;
    float _1522;
    float _1524;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1487 = fma(_691, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _683)) + cbModelParam._m0[13u].w;
        float _1491 = fma(_691, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _683)) + cbModelParam._m0[14u].w;
        float _1495 = fma(_691, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _683)) + cbModelParam._m0[15u].w;
        float _1498 = fma(_632, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _630));
        float _1501 = fma(_632, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _630));
        float _1504 = fma(_632, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _630));
        float _1532;
        if (_1498 > 0.0)
        {
            _1532 = abs((1.0 - _1487) / _1498);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1487 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1532 = frontier_phi_14_12_ladder;
        }
        float _1737;
        if (_1501 > 0.0)
        {
            _1737 = abs((1.0 - _1491) / _1501);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1491 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1737 = frontier_phi_23_19_ladder;
        }
        float _1980;
        if (_1504 > 0.0)
        {
            _1980 = abs((1.0 - _1495) / _1504);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1495 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1980 = frontier_phi_35_30_ladder;
        }
        float _1982 = isnan(_1737) ? _1532 : (isnan(_1532) ? _1737 : min(_1532, _1737));
        float _1983 = isnan(_1980) ? _1982 : (isnan(_1982) ? _1980 : min(_1982, _1980));
        float _1987 = (_1983 * _1498) + _1487;
        float _1988 = (_1983 * _1501) + _1491;
        float _1989 = (_1983 * _1504) + _1495;
        float _1990 = _1983 * 9.9999997473787516355514526367188e-05;
        float _1992 = (-1.0) - _1990;
        float _1994 = _1990 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1989 > _1994) || ((_1989 < _1992) || ((_1988 > _1994) || ((_1988 < _1992) || ((_1987 < _1992) || (_1987 > _1994))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2113 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1989, cbModelParam._m0[9u].z, fma(_1988, cbModelParam._m0[9u].y, _1987 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1989, cbModelParam._m0[10u].z, fma(_1988, cbModelParam._m0[10u].y, _1987 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1989, cbModelParam._m0[11u].z, fma(_1988, cbModelParam._m0[11u].y, _1987 * cbModelParam._m0[11u].x))), _1440);
            frontier_phi_13_35_ladder = _2113.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2113.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2113.x * cbModelParam._m0[1u].y;
        }
        _1520 = frontier_phi_13_35_ladder_2;
        _1522 = frontier_phi_13_35_ladder_1;
        _1524 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1508 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_630, _631, _632), _1440);
        _1520 = _1508.x * cbModelParam._m0[1u].y;
        _1522 = _1508.y * cbModelParam._m0[1u].y;
        _1524 = _1508.z * cbModelParam._m0[1u].y;
    }
    float _1528 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _474);
    float _1529 = isnan(_1528) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1528 : min(cbModelParam._m0[25u].w, _1528));
    float _1622;
    float _1624;
    float _1626;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1586 = fma(_691, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _683)) + cbModelParam._m0[21u].w;
        float _1590 = fma(_691, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _683)) + cbModelParam._m0[22u].w;
        float _1594 = fma(_691, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _683)) + cbModelParam._m0[23u].w;
        float _1597 = fma(_632, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _630));
        float _1600 = fma(_632, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _630));
        float _1603 = fma(_632, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _630));
        float _1742;
        if (_1597 > 0.0)
        {
            _1742 = abs((1.0 - _1586) / _1597);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1586 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1742 = frontier_phi_25_21_ladder;
        }
        float _2007;
        if (_1600 > 0.0)
        {
            _2007 = abs((1.0 - _1590) / _1600);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1590 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2007 = frontier_phi_37_32_ladder;
        }
        float _2212;
        if (_1603 > 0.0)
        {
            _2212 = abs((1.0 - _1594) / _1603);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1594 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2212 = frontier_phi_46_43_ladder;
        }
        float _2214 = isnan(_2007) ? _1742 : (isnan(_1742) ? _2007 : min(_1742, _2007));
        float _2215 = isnan(_2212) ? _2214 : (isnan(_2214) ? _2212 : min(_2214, _2212));
        float _2219 = (_2215 * _1597) + _1586;
        float _2220 = (_2215 * _1600) + _1590;
        float _2221 = (_2215 * _1603) + _1594;
        float _2222 = _2215 * 9.9999997473787516355514526367188e-05;
        float _2223 = (-1.0) - _2222;
        float _2225 = _2222 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2221 > _2225) || ((_2221 < _2223) || ((_2220 > _2225) || ((_2220 < _2223) || ((_2219 < _2223) || (_2219 > _2225))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2221, cbModelParam._m0[17u].z, fma(_2220, cbModelParam._m0[17u].y, _2219 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2221, cbModelParam._m0[18u].z, fma(_2220, cbModelParam._m0[18u].y, _2219 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2221, cbModelParam._m0[19u].z, fma(_2220, cbModelParam._m0[19u].y, _2219 * cbModelParam._m0[19u].x))), _1529);
            frontier_phi_22_46_ladder = _2420.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2420.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2420.x * cbModelParam._m0[1u].z;
        }
        _1622 = frontier_phi_22_46_ladder_2;
        _1624 = frontier_phi_22_46_ladder_1;
        _1626 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1606 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_630, _631, _632), _1529);
        _1622 = _1606.x * cbModelParam._m0[1u].z;
        _1624 = _1606.y * cbModelParam._m0[1u].z;
        _1626 = _1606.z * cbModelParam._m0[1u].z;
    }
    float _1638 = ((((1.0 - _651) * ((_638 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_651 * _638)) * _622;
    float _1639 = _1638 * ((cbModelParam._m0[1u].w * (_1622 - _1520)) + _1520);
    float _1640 = _1638 * ((cbModelParam._m0[1u].w * (_1624 - _1522)) + _1522);
    float _1641 = _1638 * ((cbModelParam._m0[1u].w * (_1626 - _1524)) + _1524);
    float _1644 = fma(_1641, cbSceneParam._m0[89u].z, fma(_1640, cbSceneParam._m0[89u].y, _1639 * cbSceneParam._m0[89u].x));
    float _1647 = fma(_1641, cbSceneParam._m0[90u].z, fma(_1640, cbSceneParam._m0[90u].y, _1639 * cbSceneParam._m0[90u].x));
    float _1650 = fma(_1641, cbSceneParam._m0[91u].z, fma(_1640, cbSceneParam._m0[91u].y, _1639 * cbSceneParam._m0[91u].x));
    uvec4 _1660 = floatBitsToUint(cbInstanceData._m0[_597 + 5u]);
    uint _1662 = _1660.x * 14u;
    uint _1663 = _1662 + 13u;
    float _1670 = _622 + (-1.0);
    float _1675 = (cbLight._m0[_1663].x * _1670) + 1.0;
    float _1676 = (cbLight._m0[_1663].y * _1670) + 1.0;
    float _1677 = (cbLight._m0[_1663].z * _1670) + 1.0;
    float _1678 = (cbLight._m0[_1663].w * _1670) + 1.0;
    uint _1679 = _1662 + 5u;
    float _1685 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1689 = _1662 + 4u;
    float _1696 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
    uint _1700 = _1662 | 1u;
    float _1711 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_471, _472, _473));
    float _1714 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_471, _472, _473));
    float _3796 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _3807 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1719 = (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * 0.3183098733425140380859375;
    float _1721 = (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * 0.3183098733425140380859375;
    float _1728 = ((cbLight._m0[_1679].x * _1685) * _1721) + ((cbLight._m0[_1689].x * _1696) * _1719);
    float _1729 = ((_1685 * cbLight._m0[_1679].y) * _1721) + ((_1696 * cbLight._m0[_1689].y) * _1719);
    float _1730 = ((_1685 * cbLight._m0[_1679].z) * _1721) + ((_1696 * cbLight._m0[_1689].z) * _1719);
    uvec4 _1734 = floatBitsToUint(cbLight._m0[_1662 + 12u]);
    bool _1736 = _1734.x == 0u;
    float _1747;
    float _1749;
    float _1751;
    if (_1736)
    {
        _1747 = _1728;
        _1749 = _1729;
        _1751 = _1730;
    }
    else
    {
        uint _1755 = _1662 + 6u;
        float _1771 = (dot(vec3(cbLight._m0[_1662 + 2u].xyz), vec3(_471, _472, _473)) * 0.5) + 0.5;
        float _1772 = _1771 * _1771;
        float _3818 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1774 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _1747 = (((cbLight._m0[_1755].x * 0.3183098733425140380859375) * _1773) * _1774) + _1728;
        _1749 = (((cbLight._m0[_1755].y * 0.3183098733425140380859375) * _1773) * _1774) + _1729;
        _1751 = (((cbLight._m0[_1755].z * 0.3183098733425140380859375) * _1773) * _1774) + _1730;
    }
    bool _1754 = _1734.y == 0u;
    float _1792;
    float _1794;
    float _1796;
    if (_1754)
    {
        _1792 = _1747;
        _1794 = _1749;
        _1796 = _1751;
    }
    else
    {
        uint _1951 = _1662 + 7u;
        float _1967 = (dot(vec3(cbLight._m0[_1662 + 3u].xyz), vec3(_471, _472, _473)) * 0.5) + 0.5;
        float _1968 = _1967 * _1967;
        float _3834 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1969 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1970 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _1792 = (((cbLight._m0[_1951].x * 0.3183098733425140380859375) * _1969) * _1970) + _1747;
        _1794 = (((cbLight._m0[_1951].y * 0.3183098733425140380859375) * _1969) * _1970) + _1749;
        _1796 = (((cbLight._m0[_1951].z * 0.3183098733425140380859375) * _1969) * _1970) + _1751;
    }
    uint _1799 = _1662 + 8u;
    float _1812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1662].w)) * _474) * 0.949999988079071044921875);
    float _1813 = _1812 * _1812;
    float _1814 = cbLight._m0[_1662].x + _550;
    float _1815 = cbLight._m0[_1662].y + _551;
    float _1816 = cbLight._m0[_1662].z + _552;
    float _1820 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
    float _1821 = _1820 * _1814;
    float _1822 = _1820 * _1815;
    float _1823 = _1820 * _1816;
    float _1824 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_1662].xyz));
    float _3850 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _1828 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _1829 = dot(vec3(_471, _472, _473), vec3(_1821, _1822, _1823));
    float _3872 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _1833 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_1821, _1822, _1823));
    float _3883 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1837 = _1813 * _1813;
    float _1841 = ((_1832 * _1832) * (_1837 + (-1.0))) + 1.0;
    float _1852 = (exp2(log2(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1853 = 1.0 - _1813;
    float _1864 = (0.5 / (((_1828 * ((_1827 * _1853) + _1813)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _1853) + _1813) * _1827))) * _1827;
    float _3894 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1866 = (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1837 / ((_1841 * _1841) * 3.141590118408203125));
    uint _1877 = _1662 + 9u;
    float _1888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1700].w)) * _474) * 0.949999988079071044921875);
    float _1889 = _1888 * _1888;
    float _1890 = cbLight._m0[_1700].x + _550;
    float _1891 = cbLight._m0[_1700].y + _551;
    float _1892 = cbLight._m0[_1700].z + _552;
    float _1896 = inversesqrt(dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892)));
    float _1897 = _1896 * _1890;
    float _1898 = _1896 * _1891;
    float _1899 = _1896 * _1892;
    float _1900 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_1700].xyz));
    float _3905 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1903 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _1904 = dot(vec3(_471, _472, _473), vec3(_1897, _1898, _1899));
    float _3916 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _1908 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_1897, _1898, _1899));
    float _3927 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1912 = _1889 * _1889;
    float _1916 = ((_1907 * _1907) * (_1912 + (-1.0))) + 1.0;
    float _1925 = (exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1926 = 1.0 - _1889;
    float _1936 = (0.5 / (((_1828 * ((_1903 * _1926) + _1889)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _1926) + _1889) * _1903))) * _1903;
    float _3938 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1938 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1912 / ((_1916 * _1916) * 3.141590118408203125));
    float _1948 = (((_1925 * cbLight._m0[_1877].x) * _1938) * _1685) + (((_1852 * cbLight._m0[_1799].x) * _1866) * _1696);
    float _1949 = (((_1925 * cbLight._m0[_1877].y) * _1938) * _1685) + (((_1852 * cbLight._m0[_1799].y) * _1866) * _1696);
    float _1950 = (((_1925 * cbLight._m0[_1877].z) * _1938) * _1685) + (((_1852 * cbLight._m0[_1799].z) * _1866) * _1696);
    float _2012;
    float _2014;
    float _2016;
    if (_1736)
    {
        _2012 = _1948;
        _2014 = _1949;
        _2016 = _1950;
    }
    else
    {
        uint _2018 = _1662 + 2u;
        uint _2022 = _1662 + 10u;
        float _2036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _474) * 0.949999988079071044921875);
        float _2037 = _2036 * _2036;
        float _2038 = cbLight._m0[_2018].x + _550;
        float _2039 = cbLight._m0[_2018].y + _551;
        float _2040 = cbLight._m0[_2018].z + _552;
        float _2044 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
        float _2045 = _2044 * _2038;
        float _2046 = _2044 * _2039;
        float _2047 = _2044 * _2040;
        float _2048 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_2018].xyz));
        float _3949 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2051 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _2052 = dot(vec3(_471, _472, _473), vec3(_2045, _2046, _2047));
        float _3960 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2055 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _2056 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2045, _2046, _2047));
        float _3971 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2060 = _2037 * _2037;
        float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
        float _2073 = (exp2(log2(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2074 = 1.0 - _2037;
        float _2084 = (0.5 / (((_1828 * ((_2051 * _2074) + _2037)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _2074) + _2037) * _2051))) * _2051;
        float _3982 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2086 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
        float _2087 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _2012 = (((_2073 * cbLight._m0[_2022].x) * _2086) * _2087) + _1948;
        _2014 = (((_2073 * cbLight._m0[_2022].y) * _2086) * _2087) + _1949;
        _2016 = (((_2073 * cbLight._m0[_2022].z) * _2086) * _2087) + _1950;
    }
    float _2122;
    float _2124;
    float _2126;
    if (_1754)
    {
        _2122 = _2012;
        _2124 = _2014;
        _2126 = _2016;
    }
    else
    {
        uint _2133 = _1662 + 3u;
        uint _2137 = _1662 + 11u;
        float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2133].w)) * _474) * 0.949999988079071044921875);
        float _2152 = _2151 * _2151;
        float _2153 = cbLight._m0[_2133].x + _550;
        float _2154 = cbLight._m0[_2133].y + _551;
        float _2155 = cbLight._m0[_2133].z + _552;
        float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
        float _2160 = _2159 * _2153;
        float _2161 = _2159 * _2154;
        float _2162 = _2159 * _2155;
        float _2163 = dot(vec3(_471, _472, _473), vec3(cbLight._m0[_2133].xyz));
        float _3998 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2166 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _2167 = dot(vec3(_471, _472, _473), vec3(_2160, _2161, _2162));
        float _4009 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2170 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _2171 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_2160, _2161, _2162));
        float _4020 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2175 = _2152 * _2152;
        float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
        float _2188 = (exp2(log2(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2189 = 1.0 - _2152;
        float _2199 = (0.5 / (((_1828 * ((_2166 * _2189) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _2189) + _2152) * _2166))) * _2166;
        float _4031 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2201 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
        float _2202 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _2122 = (((_2188 * cbLight._m0[_2137].x) * _2201) * _2202) + _2012;
        _2124 = (((_2188 * cbLight._m0[_2137].y) * _2201) * _2202) + _2014;
        _2126 = (((_2188 * cbLight._m0[_2137].z) * _2201) * _2202) + _2016;
    }
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    if (_1660.y == 0u)
    {
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2277;
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2277;
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2277;
        uvec4 _2292 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2293 = _2292.x;
        uint _2304 = uint((float(_2292.y) * floor(float(uint(cbSceneParam._m0[85u].y * _559) / _2293))) + floor(float(uint(cbSceneParam._m0[85u].x * _558) / _2293)));
        float _2314 = (log2(_2280 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2315 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        uint _2318 = uint(isnan(14.0) ? _2315 : (isnan(_2315) ? 14.0 : min(_2315, 14.0)));
        uvec4 _2323 = texelFetch(g_lightClusterGridBuffer, int(((_2318 << 2u) + (_2304 << 6u)) >> 2u));
        uint _2324 = _2323.x;
        uint _2325 = _2292.z;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        if (((((1u << ((_2325 >> 4u) & 15u)) + 4294967295u) & _2324) == 0u) || ((_2325 & 240u) == 0u))
        {
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
        }
        else
        {
            float _2426;
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            uint _2576 = 0u;
            uint _2585;
            bool _2586;
            for (;;)
            {
                _2585 = texelFetch(g_lightClassification, int((((_2318 << 5u) + (_2304 << 9u)) + (_2576 << 2u)) >> 2u)).x;
                _2586 = _2585 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2586)
                {
                    frontier_phi_61_pred = _2570;
                    frontier_phi_61_pred_1 = _2575;
                    frontier_phi_61_pred_2 = _2574;
                    frontier_phi_61_pred_3 = _2573;
                    frontier_phi_61_pred_4 = _2572;
                    frontier_phi_61_pred_5 = _2571;
                }
                else
                {
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    uint _2700;
                    _2694 = _2570;
                    _2695 = _2571;
                    _2696 = _2572;
                    _2697 = _2573;
                    _2698 = _2574;
                    _2699 = _2575;
                    _2700 = _2585;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    for (;;)
                    {
                        uint _2704 = uint(findLSB(_2700)) + (_2576 << 5u);
                        uint _2701 = (_2700 + 4294967295u) & _2700;
                        uint _2706 = _2704 * 48u;
                        vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2706)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 3u)).x));
                        uint _2726 = (_2704 * 48u) + 4u;
                        vec4 _2739 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 3u)).x));
                        uint _2745 = (_2704 * 48u) + 8u;
                        vec3 _2756 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x));
                        float _2760 = _2720.x - _2278;
                        float _2761 = _2720.y - _2279;
                        float _2762 = _2720.z - _2280;
                        float _2763 = dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762));
                        float _2766 = inversesqrt(_2763);
                        float _2767 = _2766 * _2760;
                        float _2768 = _2766 * _2761;
                        float _2769 = _2766 * _2762;
                        float _2770 = dot(vec3(_578, _581, _584), vec3(_2767, _2768, _2769));
                        float _2775 = 1.0 - (_2763 * _2720.w);
                        float _4057 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2776 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                        float _2777 = sqrt(_2763) * _2739.w;
                        float _2780 = 1.39999997615814208984375 / (_2777 + 1.39999997615814208984375);
                        float _2781 = _2780 * _2780;
                        float _2784 = ((1.0 - _2781) * _2770) + _2781;
                        float _2787 = _2777 * _2777;
                        float _2791 = ((isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0))) * _2776) / ((_2787 * 0.699999988079071044921875) + 1.0);
                        float _2795 = (-0.0) - _2278;
                        float _2796 = (-0.0) - _2279;
                        float _2797 = (-0.0) - _2280;
                        float _2801 = inversesqrt(dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797)));
                        float _2802 = _2801 * _2795;
                        float _2803 = _2801 * _2796;
                        float _2804 = _2801 * _2797;
                        float _2812 = exp2(log2(1.0 / ((_2787 * 3.5) + 5.0)) * 0.25);
                        float _2813 = 1.0 - _638;
                        float _2820 = sqrt(1.0 - ((1.0 - (_2813 * _2813)) * (1.0 - (_2812 * _2812))));
                        float _2821 = _2820 * _2820;
                        float _2822 = _2821 * _2821;
                        float _2823 = _2802 + _2767;
                        float _2824 = _2803 + _2768;
                        float _2825 = _2804 + _2769;
                        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
                        float _2833 = dot(vec3(_578, _581, _584), vec3(_2802, _2803, _2804));
                        float _4073 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2836 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                        float _2837 = dot(vec3(_578, _581, _584), vec3(_2829 * _2823, _2829 * _2824, _2829 * _2825));
                        float _4084 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2840 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                        float _2844 = ((_2840 * _2840) * (_2822 + (-1.0))) + 1.0;
                        float _2845 = _2780 * _2821;
                        float _2846 = _2845 * _2845;
                        float _2849 = ((1.0 - _2846) * _2770) + _2846;
                        float _4095 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2850 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                        float _2851 = 1.0 - _2821;
                        float _2861 = (0.5 / (((_2850 * ((_2836 * _2851) + _2821)) + 9.9999999392252902907785028219223e-09) + (((_2850 * _2851) + _2821) * _2836))) * _2850;
                        float _4106 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2872 = (((_2822 * 3.1415927410125732421875) * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) / ((_2844 * _2844) * ((_2787 * 2.1991131305694580078125) + 3.141590118408203125))) * _2776;
                        _2629 = (_2791 * _2739.x) + _2697;
                        _2630 = (_2791 * _2739.y) + _2698;
                        _2631 = (_2791 * _2739.z) + _2699;
                        _2626 = (_2872 * _2756.x) + _2694;
                        _2627 = (_2872 * _2756.y) + _2695;
                        _2628 = (_2872 * _2756.z) + _2696;
                        if (_2701 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2694 = _2626;
                            _2695 = _2627;
                            _2696 = _2628;
                            _2697 = _2629;
                            _2698 = _2630;
                            _2699 = _2631;
                            _2700 = _2701;
                        }
                    }
                    frontier_phi_61_pred = _2626;
                    frontier_phi_61_pred_1 = _2631;
                    frontier_phi_61_pred_2 = _2630;
                    frontier_phi_61_pred_3 = _2629;
                    frontier_phi_61_pred_4 = _2628;
                    frontier_phi_61_pred_5 = _2627;
                }
                _2426 = frontier_phi_61_pred;
                _2436 = frontier_phi_61_pred_1;
                _2434 = frontier_phi_61_pred_2;
                _2432 = frontier_phi_61_pred_3;
                _2430 = frontier_phi_61_pred_4;
                _2428 = frontier_phi_61_pred_5;
                uint _2577 = _2576 + 1u;
                if (_2577 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2570 = _2426;
                    _2571 = _2428;
                    _2572 = _2430;
                    _2573 = _2432;
                    _2574 = _2434;
                    _2575 = _2436;
                    _2576 = _2577;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
        }
        uvec4 _2439 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2440 = _2439.z;
        uint _2442 = (_2440 >> 8u) & 15u;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        if (((4294967295u << _2442) & _2324) == 0u)
        {
            _2538 = _2425;
            _2540 = _2427;
            _2542 = _2429;
            _2544 = _2431;
            _2546 = _2433;
            _2548 = _2435;
        }
        else
        {
            float _2563 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
            float _2564 = _2563 * _2278;
            float _2565 = _2563 * _2279;
            float _2566 = _2563 * _2280;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2442 < ((_2440 >> 12u) & 15u))
            {
                float _2539;
                float _2541;
                float _2543;
                float _2545;
                float _2547;
                float _2549;
                float _2677 = _2425;
                float _2678 = _2427;
                float _2679 = _2429;
                float _2680 = _2431;
                float _2681 = _2433;
                float _2682 = _2435;
                uint _2683 = _2442;
                uint _2692;
                bool _2693;
                for (;;)
                {
                    _2692 = texelFetch(g_lightClassification, int((((_2318 << 5u) + (_2304 << 9u)) + (_2683 << 2u)) >> 2u)).x;
                    _2693 = _2692 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2693)
                    {
                        frontier_phi_67_pred = _2680;
                        frontier_phi_67_pred_1 = _2681;
                        frontier_phi_67_pred_2 = _2682;
                        frontier_phi_67_pred_3 = _2679;
                        frontier_phi_67_pred_4 = _2678;
                        frontier_phi_67_pred_5 = _2677;
                    }
                    else
                    {
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _2890 = _2677;
                        float _2891 = _2678;
                        float _2892 = _2679;
                        float _2893 = _2680;
                        float _2894 = _2681;
                        float _2895 = _2682;
                        uint _2896 = _2692;
                        uint _2897;
                        vec4 _2922;
                        float _2923;
                        vec4 _2938;
                        vec3 _2950;
                        vec4 _2966;
                        vec4 _2982;
                        float _3029;
                        bool _3030;
                        for (;;)
                        {
                            uint _2907 = ((_2683 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2896));
                            _2897 = (_2896 + 4294967295u) & _2896;
                            uint _2909 = _2907 * 40u;
                            _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            _2923 = _2922.w;
                            uint _2925 = (_2907 * 40u) + 4u;
                            _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            uint _2940 = (_2907 * 40u) + 8u;
                            _2950 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x));
                            uint _2953 = (_2907 * 40u) + 16u;
                            _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2969 = (_2907 * 40u) + 20u;
                            _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            uint _2985 = (_2907 * 40u) + 24u;
                            vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            uint _3004 = (_2907 * 40u) + 28u;
                            vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            _3029 = fma(_2280, _3017.z, fma(_2279, _3017.y, _3017.x * _2278)) + _3017.w;
                            _3030 = !((fma(_2280, _2998.z, fma(_2279, _2998.y, _2998.x * _2278)) + _2998.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3030)
                            {
                                float _3057 = _2922.x - _2278;
                                float _3058 = _2922.y - _2279;
                                float _3059 = _2922.z - _2280;
                                float _3060 = dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059));
                                float _3063 = inversesqrt(_3060);
                                float _3064 = _3063 * _3057;
                                float _3065 = _3063 * _3058;
                                float _3066 = _3063 * _3059;
                                float _3070 = 1.0 - (_3060 / (_2923 * _2923));
                                float _4117 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3071 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                                float _3075 = sqrt(_3060) * _2938.w;
                                float _3077 = 1.39999997615814208984375 / (_3075 + 1.39999997615814208984375);
                                float _3078 = _3077 * _3077;
                                float _3081 = ((1.0 - _3078) * dot(vec3(_3064, _3065, _3066), vec3(_578, _581, _584))) + _3078;
                                float _3084 = _3075 * _3075;
                                float _3088 = (fma(_2280, _2966.z, fma(_2279, _2966.y, _2966.x * _2278)) + _2966.w) / _3029;
                                float _3089 = (fma(_2280, _2982.z, fma(_2279, _2982.y, _2982.x * _2278)) + _2982.w) / _3029;
                                float _3093 = 1.0 - dot(vec2(_3088, _3089), vec2(_3088, _3089));
                                float _4133 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3094 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                                float _3095 = _3094 * (((isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0))) * _3071) / ((_3084 * 0.699999988079071044921875) + 1.0));
                                float _3107 = exp2(log2(1.0 / ((_3084 * 3.5) + 5.0)) * 0.25);
                                float _3108 = 1.0 - _638;
                                float _3115 = sqrt(1.0 - ((1.0 - (_3108 * _3108)) * (1.0 - (_3107 * _3107))));
                                float _3116 = _3115 * _3115;
                                float _3117 = _3116 * _3116;
                                float _3118 = _3064 - _2564;
                                float _3119 = _3065 - _2565;
                                float _3120 = _3066 - _2566;
                                float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                                float _3128 = dot(vec3(_578, _581, _584), vec3((-0.0) - _2564, (-0.0) - _2565, (-0.0) - _2566));
                                float _4144 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3131 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                                float _3132 = dot(vec3(_578, _581, _584), vec3(_3124 * _3118, _3124 * _3119, _3124 * _3120));
                                float _4155 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3135 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                                float _3139 = ((_3135 * _3135) * (_3117 + (-1.0))) + 1.0;
                                float _3140 = _3077 * _3116;
                                float _3141 = _3140 * _3140;
                                float _3147 = ((1.0 - _3141) * dot(vec3(_578, _581, _584), vec3(_3064, _3065, _3066))) + _3141;
                                float _4166 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3148 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                                float _3149 = 1.0 - _3116;
                                float _3159 = (0.5 / (((_3148 * ((_3131 * _3149) + _3116)) + 9.9999999392252902907785028219223e-09) + (((_3148 * _3149) + _3116) * _3131))) * _3148;
                                float _4177 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3169 = (_3094 * _3071) * (((_3117 * 3.1415927410125732421875) * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) / ((_3139 * _3139) * ((_3084 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3169 * _2950.x;
                                frontier_phi_73_pred_1 = _3169 * _2950.y;
                                frontier_phi_73_pred_2 = _3095 * _2938.z;
                                frontier_phi_73_pred_3 = _3095 * _2938.y;
                                frontier_phi_73_pred_4 = _3095 * _2938.x;
                                frontier_phi_73_pred_5 = _3169 * _2950.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3173 = frontier_phi_73_pred;
                            _3174 = frontier_phi_73_pred_1;
                            _3178 = frontier_phi_73_pred_2;
                            _3177 = frontier_phi_73_pred_3;
                            _3176 = frontier_phi_73_pred_4;
                            _3175 = frontier_phi_73_pred_5;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            _2882 = _3178 + _2895;
                            _2877 = _3173 + _2890;
                            _2878 = _3174 + _2891;
                            _2879 = _3175 + _2892;
                            if (_2897 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2897;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2880;
                        frontier_phi_67_pred_1 = _2881;
                        frontier_phi_67_pred_2 = _2882;
                        frontier_phi_67_pred_3 = _2879;
                        frontier_phi_67_pred_4 = _2878;
                        frontier_phi_67_pred_5 = _2877;
                    }
                    _2545 = frontier_phi_67_pred;
                    _2547 = frontier_phi_67_pred_1;
                    _2549 = frontier_phi_67_pred_2;
                    _2543 = frontier_phi_67_pred_3;
                    _2541 = frontier_phi_67_pred_4;
                    _2539 = frontier_phi_67_pred_5;
                    uint _2684 = _2683 + 1u;
                    if (_2684 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2677 = _2539;
                        _2678 = _2541;
                        _2679 = _2543;
                        _2680 = _2545;
                        _2681 = _2547;
                        _2682 = _2549;
                        _2683 = _2684;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2547;
                frontier_phi_55_56_ladder_1 = _2549;
                frontier_phi_55_56_ladder_2 = _2545;
                frontier_phi_55_56_ladder_3 = _2543;
                frontier_phi_55_56_ladder_4 = _2541;
                frontier_phi_55_56_ladder_5 = _2539;
            }
            else
            {
                frontier_phi_55_56_ladder = _2433;
                frontier_phi_55_56_ladder_1 = _2435;
                frontier_phi_55_56_ladder_2 = _2431;
                frontier_phi_55_56_ladder_3 = _2429;
                frontier_phi_55_56_ladder_4 = _2427;
                frontier_phi_55_56_ladder_5 = _2425;
            }
            _2538 = frontier_phi_55_56_ladder_5;
            _2540 = frontier_phi_55_56_ladder_4;
            _2542 = frontier_phi_55_56_ladder_3;
            _2544 = frontier_phi_55_56_ladder_2;
            _2546 = frontier_phi_55_56_ladder;
            _2548 = frontier_phi_55_56_ladder_1;
        }
        float _2553 = isnan(1.0) ? _622 : (isnan(_622) ? 1.0 : min(_622, 1.0));
        _2337 = (_2553 * _2544) + _1792;
        _2339 = (_2553 * _2546) + _1794;
        _2341 = (_2553 * _2548) + _1796;
        _2343 = ((_2538 * 0.039999999105930328369140625) * _2553) + _2122;
        _2345 = ((_2540 * 0.039999999105930328369140625) * _2553) + _2124;
        _2347 = ((_2542 * 0.039999999105930328369140625) * _2553) + _2126;
    }
    else
    {
        _2337 = _1792;
        _2339 = _1794;
        _2341 = _1796;
        _2343 = _2122;
        _2345 = _2124;
        _2347 = _2126;
    }
    float _4193 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _4204 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _4215 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    uint _2367 = _597 + 6u;
    float _2375 = _558 / cbSceneParam._m0[86u].x;
    float _2376 = _559 / cbSceneParam._m0[86u].y;
    vec4 _2390 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2375, _2376, (log2((isnan(cbSceneParam._m0[77u].w) ? _493 : (isnan(_493) ? cbSceneParam._m0[77u].w : min(_493, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2392 = _2390.x;
    float _2393 = _2390.y;
    float _2394 = _2390.z;
    float _2395 = _2390.w;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    if (_493 > cbSceneParam._m0[78u].w)
    {
        float _2450 = isnan(_493) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _493 : min(cbSceneParam._m0[80u].w, _493));
        float _2451 = _2450 / _493;
        float _2462 = _2451 * _543;
        float _2463 = _544 * _2451;
        float _2464 = (-0.0) - _2463;
        float _2466 = _2451 * _545;
        float _2468 = (cbSceneParam._m0[77u].w * _2464) / _2450;
        float _2469 = _2468 + cbSceneParam._m0[79u].w;
        float _2470 = cbSceneParam._m0[79u].w - _2463;
        float _2476 = sqrt(((_2462 * _2462) + (_2463 * _2463)) + (_2466 * _2466));
        float _2479 = (1.0 - (cbSceneParam._m0[77u].w / _2450)) * _2476;
        float _2484 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2486 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2639;
        if (abs((_2464 - _2468) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2639 = ((((_2469 > 0.0) ? exp2(_2484 * _2469) : (2.0 - exp2(_2486 * _2469))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2479;
        }
        else
        {
            float _2599 = 1.0 / cbSceneParam._m0[80u].x;
            float _2600 = isnan(_2470) ? _2469 : (isnan(_2469) ? _2470 : max(_2469, _2470));
            float _2601 = isnan(_2470) ? _2469 : (isnan(_2469) ? _2470 : min(_2469, _2470));
            float _2610 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : min(_2600, 0.0));
            float _2611 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : min(_2601, 0.0));
            _2639 = ((abs(_2476 / _2464) * cbSceneParam._m0[80u].y) * ((((_2610 - _2611) * 2.0) - ((exp2(_2484 * (isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0)))) - exp2(_2484 * (isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0))))) * _2599)) - ((exp2(_2486 * _2610) - exp2(_2486 * _2611)) * _2599))) + (_2479 * cbSceneParam._m0[80u].z);
        }
        vec4 _2641 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2375, _2376, 1.0), 0.0);
        float _2650 = exp2((_2639 * (-1.44269502162933349609375)) * (1.0 - _2641.w));
        float _2651 = log2(_2650);
        float _2667 = log2(_2395);
        _2488 = (exp2(_2667 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2651 * cbSceneParam._m0[78u].x)) * _2641.x) / cbSceneParam._m0[78u].x)) + _2392;
        _2490 = (exp2(_2667 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2651 * cbSceneParam._m0[78u].y)) * _2641.y) / cbSceneParam._m0[78u].y)) + _2393;
        _2492 = (exp2(_2667 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2651 * cbSceneParam._m0[78u].z)) * _2641.z) / cbSceneParam._m0[78u].z)) + _2394;
        _2494 = _2650 * _2395;
    }
    else
    {
        _2488 = _2392;
        _2490 = _2393;
        _2492 = _2394;
        _2494 = _2395;
    }
    float _2506 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2507 = _2506 == 3.0;
    float _2508 = log2(_2494);
    float _2515 = exp2(_2508 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_2337 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _622))) + ((_2343 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1429)) * cbPerFrame._m0[3u].x));
    float _2516 = exp2(_2508 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2339 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _622))) + ((_2345 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _1429)) * cbPerFrame._m0[3u].x));
    float _2517 = exp2(_2508 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2341 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _622))) + ((_2347 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1429)) * cbPerFrame._m0[3u].x));
    float _2526 = (_2506 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2526 * (_2507 ? _2515 : (_2515 + (cbSceneParam._m0[72u].w * _2488)));
    SV_Target.y = _2526 * (_2507 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2490)));
    SV_Target.z = _2526 * (_2507 ? _2517 : (_2517 + (cbSceneParam._m0[72u].w * _2492)));
    SV_Target.w = cbInstanceData._m0[_2367].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2367].w;
}


