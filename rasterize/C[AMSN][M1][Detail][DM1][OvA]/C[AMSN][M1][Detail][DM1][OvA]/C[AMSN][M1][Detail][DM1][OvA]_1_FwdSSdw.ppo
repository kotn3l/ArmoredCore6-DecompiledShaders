#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _996;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _249 = _243.x * cbMtdParam._m0[10u].x;
    float _250 = _243.y * cbMtdParam._m0[10u].y;
    float _251 = _243.z * cbMtdParam._m0[10u].z;
    float _256 = 1.0 - cbMtdParam._m0[13u].z;
    float _3333 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _258 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    vec4 _276 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _284 = ((_249 * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _276.x;
    float _287 = ((_250 * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _276.y;
    float _290 = ((_251 * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _276.z;
    float _297 = ((_249 - _284) * _258) + _284;
    float _298 = ((_250 - _287) * _258) + _287;
    float _299 = ((_251 - _290) * _258) + _290;
    vec4 _317 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _347 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3344 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _348 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _355 = (_348 * ((_317.x * cbMtdParam._m0[11u].x) - _297)) + _297;
    float _356 = (_348 * ((_317.y * cbMtdParam._m0[11u].y) - _298)) + _298;
    float _357 = (_348 * ((_317.z * cbMtdParam._m0[11u].z) - _299)) + _299;
    vec4 _371 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _375 = _371.z;
    vec4 _388 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _402 = cbMtdParam._m0[13u].w * _375;
    float _405 = (((((_375 * 2.0) * _388.z) * cbMtdParam._m0[14u].x) - _402) * cbMtdParam._m0[13u].y) + _402;
    vec4 _418 = texture(sampler2D(C_AMSN_M1_Detail_DM1_OvA_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _433 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_418.z * cbMtdParam._m0[14u].y) - _405)) + _405;
    float _440 = (_371.x * 2.0) + (-1.0);
    float _441 = (_371.y * 2.0) + (-1.0);
    float _442 = dot(vec2(_440, _441), vec2(_440, _441));
    float _3355 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _447 = sqrt(1.0 - (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))));
    float _458 = ((cbMtdParam._m0[13u].x * ((_388.x * 2.0) + (-1.0))) + _440) + ((((_418.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x);
    float _459 = ((cbMtdParam._m0[13u].x * ((_388.y * 2.0) + (-1.0))) + _441) + ((((_418.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x);
    float _462 = fma(_447, _208 * NORMAL.x, fma(_459, _215 * TANGENT.x, (_201 * _193) * _458));
    float _465 = fma(_447, _208 * NORMAL.y, fma(_459, _215 * TANGENT.y, (_201 * _194) * _458));
    float _468 = fma(_447, _208 * NORMAL.z, fma(_459, _215 * TANGENT.z, (_201 * _195) * _458));
    float _472 = inversesqrt(dot(vec3(_462, _465, _468), vec3(_462, _465, _468)));
    float _473 = _472 * _462;
    float _474 = _472 * _465;
    float _475 = _472 * _468;
    float _3366 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _476 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _3377 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _3388 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _3399 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _495 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _545 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _535);
    float _546 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _535);
    float _547 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _535);
    float _551 = inversesqrt(dot(vec3(_545, _546, _547), vec3(_545, _546, _547)));
    float _552 = _545 * _551;
    float _553 = _546 * _551;
    float _554 = _547 * _551;
    float _560 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _561 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _580 = fma(_475, cbSceneParam._m0[5u].z, fma(_474, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _473));
    float _583 = fma(_475, cbSceneParam._m0[6u].z, fma(_474, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _473));
    float _586 = fma(_475, cbSceneParam._m0[7u].z, fma(_474, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _473));
    uint _599 = uint(roundEven(NORMAL.w)) * 13u;
    uint _601 = (_599 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _607 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0)))) * cbInstanceData._m0[_601].x;
    float _608 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0)))) * cbInstanceData._m0[_601].y;
    float _609 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) * cbInstanceData._m0[_601].z;
    float _3410 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    float _3421 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    vec4 _621 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _560, cbSceneParam._m0[86u].y * _561));
    float _624 = _621.x * TEXCOORD_5.w;
    float _625 = dot(vec3(_473, _474, _475), vec3(_552, _553, _554));
    float _628 = _625 * 2.0;
    float _632 = (_628 * _473) - _552;
    float _633 = (_628 * _474) - _553;
    float _634 = (_628 * _475) - _554;
    float _638 = abs(dot(vec3(_552, _553, _554), vec3(_473, _474, _475)));
    float _3443 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _640 = sqrt(_476);
    float _653 = exp2((_640 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_640 * 3.0));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _995;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _720 = fma(_693, cbModelParam._m0[26u].z, fma(_689, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _685));
        float _724 = fma(_693, cbModelParam._m0[27u].z, fma(_689, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _685));
        float _728 = fma(_693, cbModelParam._m0[28u].z, fma(_689, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _685));
        float _753 = _685 + _473;
        float _754 = _689 + _474;
        float _755 = _693 + _475;
        float _765 = fma(_755, cbModelParam._m0[26u].z, fma(_754, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _753)) - _720;
        float _766 = fma(_755, cbModelParam._m0[27u].z, fma(_754, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _753)) - _724;
        float _767 = fma(_755, cbModelParam._m0[28u].z, fma(_754, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _753)) - _728;
        float _771 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
        float _784 = ((_771 * _765) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_720 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _785 = ((_771 * _766) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_724 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _786 = ((_771 * _767) / cbModelParam._m0[34u].z) + ((((((_728 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        float _823 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_789.x + (-0.5));
        float _825 = _823 * (_789.y + (-0.5));
        float _826 = _823 * (_789.z + (-0.5));
        float _833 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_796.x + (-0.5));
        float _835 = _833 * (_796.y + (-0.5));
        float _836 = _833 * (_796.z + (-0.5));
        float _843 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_803.x + (-0.5));
        float _845 = _843 * (_803.y + (-0.5));
        float _846 = _843 * (_803.z + (-0.5));
        float _853 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_810.x + (-0.5));
        float _855 = _853 * (_810.y + (-0.5));
        float _856 = _853 * (_810.z + (-0.5));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = _824 * 0.5;
        float _861 = _834 * 0.5;
        float _862 = _844 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _877 = (dot(vec3(_473, _474, _475), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _887 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3491 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_889 + 1.0))) + _894) * _857;
        float _904 = _825 * 0.5;
        float _905 = _835 * 0.5;
        float _906 = _845 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_473, _474, _475), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3524 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_931 + 1.0))) + _936) * _858;
        float _946 = _826 * 0.5;
        float _947 = _836 * 0.5;
        float _948 = _846 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_473, _474, _475), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3557 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_973 + 1.0))) + _978) * _859;
        _995 = _826;
        _997 = _825;
        _998 = _824;
        _999 = _836;
        _1000 = _835;
        _1001 = _834;
        _1002 = _846;
        _1003 = _845;
        _1004 = _844;
        _1005 = _859;
        _1006 = _858;
        _1007 = _857;
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
    }
    else
    {
        _995 = _996;
        _997 = _996;
        _998 = _996;
        _999 = _996;
        _1000 = _996;
        _1001 = _996;
        _1002 = _996;
        _1003 = _996;
        _1004 = _996;
        _1005 = _996;
        _1006 = _996;
        _1007 = _996;
        _1008 = 0.0;
        _1009 = 0.0;
        _1010 = 0.0;
    }
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1036 = fma(_693, cbModelParam._m0[30u].z, fma(_689, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _685));
        float _1040 = fma(_693, cbModelParam._m0[31u].z, fma(_689, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _685));
        float _1044 = fma(_693, cbModelParam._m0[32u].z, fma(_689, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _685));
        float _1067 = _685 + _473;
        float _1068 = _689 + _474;
        float _1069 = _693 + _475;
        float _1079 = fma(_1069, cbModelParam._m0[30u].z, fma(_1068, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1067)) - _1036;
        float _1080 = fma(_1069, cbModelParam._m0[31u].z, fma(_1068, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1067)) - _1040;
        float _1081 = fma(_1069, cbModelParam._m0[32u].z, fma(_1068, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1067)) - _1044;
        float _1085 = inversesqrt(dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081)));
        float _1098 = ((_1085 * _1079) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1036 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1085 * _1080) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1040 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1085 * _1081) / cbModelParam._m0[35u].z) + ((((((_1044 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        float _1135 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1102.x + (-0.5));
        float _1137 = _1135 * (_1102.y + (-0.5));
        float _1138 = _1135 * (_1102.z + (-0.5));
        float _1145 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1109.x + (-0.5));
        float _1147 = _1145 * (_1109.y + (-0.5));
        float _1148 = _1145 * (_1109.z + (-0.5));
        float _1155 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1116.x + (-0.5));
        float _1157 = _1155 * (_1116.y + (-0.5));
        float _1158 = _1155 * (_1116.z + (-0.5));
        float _1165 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1123.x + (-0.5));
        float _1167 = _1165 * (_1123.y + (-0.5));
        float _1168 = _1165 * (_1123.z + (-0.5));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = _1136 * 0.5;
        float _1173 = _1146 * 0.5;
        float _1174 = _1156 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_473, _474, _475), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3620 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1199 + 1.0))) + _1204) * _1169;
        float _1214 = _1137 * 0.5;
        float _1215 = _1147 * 0.5;
        float _1216 = _1157 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_473, _474, _475), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3653 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_1241 + 1.0))) + _1246) * _1170;
        float _1256 = _1138 * 0.5;
        float _1257 = _1148 * 0.5;
        float _1258 = _1158 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_473, _474, _475), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3686 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1283 + 1.0))) + _1288) * _1171;
        _1305 = _1138;
        _1306 = _1137;
        _1307 = _1136;
        _1308 = _1148;
        _1309 = _1147;
        _1310 = _1146;
        _1311 = _1158;
        _1312 = _1157;
        _1313 = _1156;
        _1314 = _1171;
        _1315 = _1170;
        _1316 = _1169;
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _996;
        _1306 = _996;
        _1307 = _996;
        _1308 = _996;
        _1309 = _996;
        _1310 = _996;
        _1311 = _996;
        _1312 = _996;
        _1313 = _996;
        _1314 = _996;
        _1315 = _996;
        _1316 = _996;
        _1317 = 0.0;
        _1318 = 0.0;
        _1319 = 0.0;
    }
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1008)) + _1008;
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1009)) + _1009;
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1010)) + _1010;
    float _1352 = fma(_1331, cbSceneParam._m0[89u].z, fma(_1330, cbSceneParam._m0[89u].y, _1329 * cbSceneParam._m0[89u].x));
    float _1355 = fma(_1331, cbSceneParam._m0[90u].z, fma(_1330, cbSceneParam._m0[90u].y, _1329 * cbSceneParam._m0[90u].x));
    float _1358 = fma(_1331, cbSceneParam._m0[91u].z, fma(_1330, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1329));
    float _1373 = _632 * 0.5;
    float _1374 = _633 * 0.5;
    float _1375 = _634 * 0.5;
    float _1376 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1379 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1382 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1416;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1389 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_995, _999, _1002, _1005));
        float _1393 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_997, _1000, _1003, _1006));
        float _1397 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_998, _1001, _1004, _1007));
        float _1404 = dot(vec4(cbModelParam._m0[39u]), vec4(_1373, _1374, _1375, 1.0));
        _1416 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1404) ? 0.0 : (isnan(0.0) ? _1404 : max(0.0, _1404))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1416 = 1.0;
    }
    float _1427;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1418 = dot(vec4(cbModelParam._m0[40u]), vec4(_1373, _1374, _1375, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1418) ? 0.0 : (isnan(0.0) ? _1418 : max(0.0, _1418))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1431 = (_1427 * cbModelParam._m0[1u].x) + (_1416 * (1.0 - cbModelParam._m0[1u].x));
    float _1441 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _476);
    float _1442 = isnan(_1441) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1441 : min(cbModelParam._m0[25u].z, _1441));
    float _1522;
    float _1524;
    float _1526;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1489 = fma(_693, cbModelParam._m0[13u].z, fma(_689, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _685)) + cbModelParam._m0[13u].w;
        float _1493 = fma(_693, cbModelParam._m0[14u].z, fma(_689, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _685)) + cbModelParam._m0[14u].w;
        float _1497 = fma(_693, cbModelParam._m0[15u].z, fma(_689, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _685)) + cbModelParam._m0[15u].w;
        float _1500 = fma(_634, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _632));
        float _1503 = fma(_634, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _632));
        float _1506 = fma(_634, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _632));
        float _1534;
        if (_1500 > 0.0)
        {
            _1534 = abs((1.0 - _1489) / _1500);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1489 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1534 = frontier_phi_14_12_ladder;
        }
        float _1760;
        if (_1503 > 0.0)
        {
            _1760 = abs((1.0 - _1493) / _1503);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1493 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1760 = frontier_phi_23_19_ladder;
        }
        float _2006;
        if (_1506 > 0.0)
        {
            _2006 = abs((1.0 - _1497) / _1506);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1497 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2006 = frontier_phi_35_30_ladder;
        }
        float _2008 = isnan(_1760) ? _1534 : (isnan(_1534) ? _1760 : min(_1534, _1760));
        float _2009 = isnan(_2006) ? _2008 : (isnan(_2008) ? _2006 : min(_2008, _2006));
        float _2013 = (_2009 * _1500) + _1489;
        float _2014 = (_2009 * _1503) + _1493;
        float _2015 = (_2009 * _1506) + _1497;
        float _2016 = _2009 * 9.9999997473787516355514526367188e-05;
        float _2018 = (-1.0) - _2016;
        float _2020 = _2016 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2015 > _2020) || ((_2015 < _2018) || ((_2014 > _2020) || ((_2014 < _2018) || ((_2013 < _2018) || (_2013 > _2020))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2139 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2015, cbModelParam._m0[9u].z, fma(_2014, cbModelParam._m0[9u].y, _2013 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2015, cbModelParam._m0[10u].z, fma(_2014, cbModelParam._m0[10u].y, _2013 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2015, cbModelParam._m0[11u].z, fma(_2014, cbModelParam._m0[11u].y, _2013 * cbModelParam._m0[11u].x))), _1442);
            frontier_phi_13_35_ladder = _2139.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2139.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2139.x * cbModelParam._m0[1u].y;
        }
        _1522 = frontier_phi_13_35_ladder_2;
        _1524 = frontier_phi_13_35_ladder_1;
        _1526 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1510 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_632, _633, _634), _1442);
        _1522 = _1510.x * cbModelParam._m0[1u].y;
        _1524 = _1510.y * cbModelParam._m0[1u].y;
        _1526 = _1510.z * cbModelParam._m0[1u].y;
    }
    float _1530 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _476);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1530 : min(cbModelParam._m0[25u].w, _1530));
    float _1624;
    float _1626;
    float _1628;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1588 = fma(_693, cbModelParam._m0[21u].z, fma(_689, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _685)) + cbModelParam._m0[21u].w;
        float _1592 = fma(_693, cbModelParam._m0[22u].z, fma(_689, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _685)) + cbModelParam._m0[22u].w;
        float _1596 = fma(_693, cbModelParam._m0[23u].z, fma(_689, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _685)) + cbModelParam._m0[23u].w;
        float _1599 = fma(_634, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _632));
        float _1602 = fma(_634, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _632));
        float _1605 = fma(_634, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _632));
        float _1765;
        if (_1599 > 0.0)
        {
            _1765 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1765 = frontier_phi_25_21_ladder;
        }
        float _2033;
        if (_1602 > 0.0)
        {
            _2033 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2033 = frontier_phi_37_32_ladder;
        }
        float _2238;
        if (_1605 > 0.0)
        {
            _2238 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2238 = frontier_phi_46_43_ladder;
        }
        float _2240 = isnan(_2033) ? _1765 : (isnan(_1765) ? _2033 : min(_1765, _2033));
        float _2241 = isnan(_2238) ? _2240 : (isnan(_2240) ? _2238 : min(_2240, _2238));
        float _2245 = (_2241 * _1599) + _1588;
        float _2246 = (_2241 * _1602) + _1592;
        float _2247 = (_2241 * _1605) + _1596;
        float _2248 = _2241 * 9.9999997473787516355514526367188e-05;
        float _2249 = (-1.0) - _2248;
        float _2251 = _2248 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2247 > _2251) || ((_2247 < _2249) || ((_2246 > _2251) || ((_2246 < _2249) || ((_2245 < _2249) || (_2245 > _2251))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2446 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2247, cbModelParam._m0[17u].z, fma(_2246, cbModelParam._m0[17u].y, _2245 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2247, cbModelParam._m0[18u].z, fma(_2246, cbModelParam._m0[18u].y, _2245 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2247, cbModelParam._m0[19u].z, fma(_2246, cbModelParam._m0[19u].y, _2245 * cbModelParam._m0[19u].x))), _1531);
            frontier_phi_22_46_ladder = _2446.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2446.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2446.x * cbModelParam._m0[1u].z;
        }
        _1624 = frontier_phi_22_46_ladder_2;
        _1626 = frontier_phi_22_46_ladder_1;
        _1628 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_632, _633, _634), _1531);
        _1624 = _1608.x * cbModelParam._m0[1u].z;
        _1626 = _1608.y * cbModelParam._m0[1u].z;
        _1628 = _1608.z * cbModelParam._m0[1u].z;
    }
    float _1640 = ((((1.0 - _653) * ((_640 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_653 * _640)) * _624;
    float _1641 = _1640 * ((cbModelParam._m0[1u].w * (_1624 - _1522)) + _1522);
    float _1642 = _1640 * ((cbModelParam._m0[1u].w * (_1626 - _1524)) + _1524);
    float _1643 = _1640 * ((cbModelParam._m0[1u].w * (_1628 - _1526)) + _1526);
    float _1646 = fma(_1643, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1641 * cbSceneParam._m0[89u].x));
    float _1649 = fma(_1643, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1641 * cbSceneParam._m0[90u].x));
    float _1652 = fma(_1643, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, _1641 * cbSceneParam._m0[91u].x));
    vec4 _1660 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_560, _561));
    float _1662 = _1660.w;
    float _1674 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1662);
    float _1675 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1662);
    float _1676 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1662);
    uvec4 _1680 = floatBitsToUint(cbInstanceData._m0[_599 + 5u]);
    uint _1682 = _1680.x * 14u;
    uint _1683 = _1682 + 13u;
    float _1690 = _624 + (-1.0);
    float _1695 = (cbLight._m0[_1683].x * _1690) + 1.0;
    float _1696 = (cbLight._m0[_1683].y * _1690) + 1.0;
    float _1697 = (cbLight._m0[_1683].z * _1690) + 1.0;
    float _1698 = (cbLight._m0[_1683].w * _1690) + 1.0;
    uint _1699 = _1682 + 5u;
    float _1705 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1709 = _1682 + 4u;
    float _1719 = isnan(1.0) ? _1695 : (isnan(_1695) ? 1.0 : min(_1695, 1.0));
    uint _1723 = _1682 | 1u;
    float _1734 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_473, _474, _475));
    float _1737 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_473, _474, _475));
    float _3822 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _3833 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1742 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * 0.3183098733425140380859375;
    float _1744 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 0.3183098733425140380859375;
    float _1751 = ((cbLight._m0[_1699].x * _1705) * _1744) + (((cbLight._m0[_1709].x * _1674) * _1719) * _1742);
    float _1752 = ((_1705 * cbLight._m0[_1699].y) * _1744) + (((cbLight._m0[_1709].y * _1675) * _1719) * _1742);
    float _1753 = ((_1705 * cbLight._m0[_1699].z) * _1744) + (((cbLight._m0[_1709].z * _1676) * _1719) * _1742);
    uvec4 _1757 = floatBitsToUint(cbLight._m0[_1682 + 12u]);
    bool _1759 = _1757.x == 0u;
    float _1770;
    float _1772;
    float _1774;
    if (_1759)
    {
        _1770 = _1751;
        _1772 = _1752;
        _1774 = _1753;
    }
    else
    {
        uint _1778 = _1682 + 6u;
        float _1794 = (dot(vec3(cbLight._m0[_1682 + 2u].xyz), vec3(_473, _474, _475)) * 0.5) + 0.5;
        float _1795 = _1794 * _1794;
        float _3844 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1797 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
        _1770 = (((cbLight._m0[_1778].x * 0.3183098733425140380859375) * _1796) * _1797) + _1751;
        _1772 = (((cbLight._m0[_1778].y * 0.3183098733425140380859375) * _1796) * _1797) + _1752;
        _1774 = (((cbLight._m0[_1778].z * 0.3183098733425140380859375) * _1796) * _1797) + _1753;
    }
    bool _1777 = _1757.y == 0u;
    float _1815;
    float _1817;
    float _1819;
    if (_1777)
    {
        _1815 = _1770;
        _1817 = _1772;
        _1819 = _1774;
    }
    else
    {
        uint _1977 = _1682 + 7u;
        float _1993 = (dot(vec3(cbLight._m0[_1682 + 3u].xyz), vec3(_473, _474, _475)) * 0.5) + 0.5;
        float _1994 = _1993 * _1993;
        float _3860 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _1995 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1996 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _1815 = (((cbLight._m0[_1977].x * 0.3183098733425140380859375) * _1995) * _1996) + _1770;
        _1817 = (((cbLight._m0[_1977].y * 0.3183098733425140380859375) * _1995) * _1996) + _1772;
        _1819 = (((cbLight._m0[_1977].z * 0.3183098733425140380859375) * _1995) * _1996) + _1774;
    }
    uint _1822 = _1682 + 8u;
    float _1835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1682].w)) * _476) * 0.949999988079071044921875);
    float _1836 = _1835 * _1835;
    float _1837 = cbLight._m0[_1682].x + _552;
    float _1838 = cbLight._m0[_1682].y + _553;
    float _1839 = cbLight._m0[_1682].z + _554;
    float _1843 = inversesqrt(dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839)));
    float _1844 = _1843 * _1837;
    float _1845 = _1843 * _1838;
    float _1846 = _1843 * _1839;
    float _1847 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_1682].xyz));
    float _3876 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _1851 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _1852 = dot(vec3(_473, _474, _475), vec3(_1844, _1845, _1846));
    float _3898 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _1856 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_1844, _1845, _1846));
    float _3909 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1860 = _1836 * _1836;
    float _1864 = ((_1855 * _1855) * (_1860 + (-1.0))) + 1.0;
    float _1875 = (exp2(log2(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1876 = 1.0 - _1836;
    float _1887 = (0.5 / (((_1851 * ((_1850 * _1876) + _1836)) + 9.9999999392252902907785028219223e-09) + (((_1851 * _1876) + _1836) * _1850))) * _1850;
    float _3920 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1889 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1860 / ((_1864 * _1864) * 3.141590118408203125));
    uint _1903 = _1682 + 9u;
    float _1914 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1723].w)) * _476) * 0.949999988079071044921875);
    float _1915 = _1914 * _1914;
    float _1916 = cbLight._m0[_1723].x + _552;
    float _1917 = cbLight._m0[_1723].y + _553;
    float _1918 = cbLight._m0[_1723].z + _554;
    float _1922 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
    float _1923 = _1922 * _1916;
    float _1924 = _1922 * _1917;
    float _1925 = _1922 * _1918;
    float _1926 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_1723].xyz));
    float _3931 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1929 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _1930 = dot(vec3(_473, _474, _475), vec3(_1923, _1924, _1925));
    float _3942 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _1934 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_1923, _1924, _1925));
    float _3953 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1938 = _1915 * _1915;
    float _1942 = ((_1933 * _1933) * (_1938 + (-1.0))) + 1.0;
    float _1951 = (exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1952 = 1.0 - _1915;
    float _1962 = (0.5 / (((_1851 * ((_1929 * _1952) + _1915)) + 9.9999999392252902907785028219223e-09) + (((_1851 * _1952) + _1915) * _1929))) * _1929;
    float _3964 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1964 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1938 / ((_1942 * _1942) * 3.141590118408203125));
    float _1974 = (((_1951 * cbLight._m0[_1903].x) * _1964) * _1705) + ((((cbLight._m0[_1822].x * _1674) * _1875) * _1889) * _1719);
    float _1975 = (((_1951 * cbLight._m0[_1903].y) * _1964) * _1705) + ((((cbLight._m0[_1822].y * _1675) * _1875) * _1889) * _1719);
    float _1976 = (((_1951 * cbLight._m0[_1903].z) * _1964) * _1705) + ((((cbLight._m0[_1822].z * _1676) * _1875) * _1889) * _1719);
    float _2038;
    float _2040;
    float _2042;
    if (_1759)
    {
        _2038 = _1974;
        _2040 = _1975;
        _2042 = _1976;
    }
    else
    {
        uint _2044 = _1682 + 2u;
        uint _2048 = _1682 + 10u;
        float _2062 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2044].w)) * _476) * 0.949999988079071044921875);
        float _2063 = _2062 * _2062;
        float _2064 = cbLight._m0[_2044].x + _552;
        float _2065 = cbLight._m0[_2044].y + _553;
        float _2066 = cbLight._m0[_2044].z + _554;
        float _2070 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
        float _2071 = _2070 * _2064;
        float _2072 = _2070 * _2065;
        float _2073 = _2070 * _2066;
        float _2074 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_2044].xyz));
        float _3975 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2077 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _2078 = dot(vec3(_473, _474, _475), vec3(_2071, _2072, _2073));
        float _3986 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2081 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _2082 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_2071, _2072, _2073));
        float _3997 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2086 = _2063 * _2063;
        float _2090 = ((_2081 * _2081) * (_2086 + (-1.0))) + 1.0;
        float _2099 = (exp2(log2(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2100 = 1.0 - _2063;
        float _2110 = (0.5 / (((_1851 * ((_2077 * _2100) + _2063)) + 9.9999999392252902907785028219223e-09) + (((_1851 * _2100) + _2063) * _2077))) * _2077;
        float _4008 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2112 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_2086 / ((_2090 * _2090) * 3.141590118408203125));
        float _2113 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
        _2038 = (((_2099 * cbLight._m0[_2048].x) * _2112) * _2113) + _1974;
        _2040 = (((_2099 * cbLight._m0[_2048].y) * _2112) * _2113) + _1975;
        _2042 = (((_2099 * cbLight._m0[_2048].z) * _2112) * _2113) + _1976;
    }
    float _2148;
    float _2150;
    float _2152;
    if (_1777)
    {
        _2148 = _2038;
        _2150 = _2040;
        _2152 = _2042;
    }
    else
    {
        uint _2159 = _1682 + 3u;
        uint _2163 = _1682 + 11u;
        float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _476) * 0.949999988079071044921875);
        float _2178 = _2177 * _2177;
        float _2179 = cbLight._m0[_2159].x + _552;
        float _2180 = cbLight._m0[_2159].y + _553;
        float _2181 = cbLight._m0[_2159].z + _554;
        float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
        float _2186 = _2185 * _2179;
        float _2187 = _2185 * _2180;
        float _2188 = _2185 * _2181;
        float _2189 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_2159].xyz));
        float _4024 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2193 = dot(vec3(_473, _474, _475), vec3(_2186, _2187, _2188));
        float _4035 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2196 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2197 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2186, _2187, _2188));
        float _4046 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2201 = _2178 * _2178;
        float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
        float _2214 = (exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2215 = 1.0 - _2178;
        float _2225 = (0.5 / (((_1851 * ((_2192 * _2215) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_1851 * _2215) + _2178) * _2192))) * _2192;
        float _4057 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2227 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
        float _2228 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _2148 = (((_2214 * cbLight._m0[_2163].x) * _2227) * _2228) + _2038;
        _2150 = (((_2214 * cbLight._m0[_2163].y) * _2227) * _2228) + _2040;
        _2152 = (((_2214 * cbLight._m0[_2163].z) * _2227) * _2228) + _2042;
    }
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    float _2373;
    if (_1680.y == 0u)
    {
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2303;
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2303;
        float _2306 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2303;
        uvec4 _2318 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2319 = _2318.x;
        uint _2330 = uint((float(_2318.y) * floor(float(uint(cbSceneParam._m0[85u].y * _561) / _2319))) + floor(float(uint(cbSceneParam._m0[85u].x * _560) / _2319)));
        float _2340 = (log2(_2306 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2341 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        uint _2344 = uint(isnan(14.0) ? _2341 : (isnan(_2341) ? 14.0 : min(_2341, 14.0)));
        uvec4 _2349 = texelFetch(g_lightClusterGridBuffer, int(((_2344 << 2u) + (_2330 << 6u)) >> 2u));
        uint _2350 = _2349.x;
        uint _2351 = _2318.z;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        if (((((1u << ((_2351 >> 4u) & 15u)) + 4294967295u) & _2350) == 0u) || ((_2351 & 240u) == 0u))
        {
            _2451 = 0.0;
            _2453 = 0.0;
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
        }
        else
        {
            float _2452;
            float _2454;
            float _2456;
            float _2458;
            float _2460;
            float _2462;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            float _2599 = 0.0;
            float _2600 = 0.0;
            float _2601 = 0.0;
            uint _2602 = 0u;
            uint _2611;
            bool _2612;
            for (;;)
            {
                _2611 = texelFetch(g_lightClassification, int((((_2344 << 5u) + (_2330 << 9u)) + (_2602 << 2u)) >> 2u)).x;
                _2612 = _2611 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2612)
                {
                    frontier_phi_61_pred = _2596;
                    frontier_phi_61_pred_1 = _2601;
                    frontier_phi_61_pred_2 = _2600;
                    frontier_phi_61_pred_3 = _2599;
                    frontier_phi_61_pred_4 = _2598;
                    frontier_phi_61_pred_5 = _2597;
                }
                else
                {
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    uint _2726;
                    _2720 = _2596;
                    _2721 = _2597;
                    _2722 = _2598;
                    _2723 = _2599;
                    _2724 = _2600;
                    _2725 = _2601;
                    _2726 = _2611;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    for (;;)
                    {
                        uint _2730 = uint(findLSB(_2726)) + (_2602 << 5u);
                        uint _2727 = (_2726 + 4294967295u) & _2726;
                        uint _2732 = _2730 * 48u;
                        vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 3u)).x));
                        uint _2752 = (_2730 * 48u) + 4u;
                        vec4 _2765 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 3u)).x));
                        uint _2771 = (_2730 * 48u) + 8u;
                        vec3 _2782 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2771)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 2u)).x));
                        float _2786 = _2746.x - _2304;
                        float _2787 = _2746.y - _2305;
                        float _2788 = _2746.z - _2306;
                        float _2789 = dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788));
                        float _2792 = inversesqrt(_2789);
                        float _2793 = _2792 * _2786;
                        float _2794 = _2792 * _2787;
                        float _2795 = _2792 * _2788;
                        float _2796 = dot(vec3(_580, _583, _586), vec3(_2793, _2794, _2795));
                        float _2801 = 1.0 - (_2789 * _2746.w);
                        float _4083 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2802 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                        float _2803 = sqrt(_2789) * _2765.w;
                        float _2806 = 1.39999997615814208984375 / (_2803 + 1.39999997615814208984375);
                        float _2807 = _2806 * _2806;
                        float _2810 = ((1.0 - _2807) * _2796) + _2807;
                        float _2813 = _2803 * _2803;
                        float _2817 = ((isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))) * _2802) / ((_2813 * 0.699999988079071044921875) + 1.0);
                        float _2821 = (-0.0) - _2304;
                        float _2822 = (-0.0) - _2305;
                        float _2823 = (-0.0) - _2306;
                        float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
                        float _2828 = _2827 * _2821;
                        float _2829 = _2827 * _2822;
                        float _2830 = _2827 * _2823;
                        float _2838 = exp2(log2(1.0 / ((_2813 * 3.5) + 5.0)) * 0.25);
                        float _2839 = 1.0 - _640;
                        float _2846 = sqrt(1.0 - ((1.0 - (_2839 * _2839)) * (1.0 - (_2838 * _2838))));
                        float _2847 = _2846 * _2846;
                        float _2848 = _2847 * _2847;
                        float _2849 = _2828 + _2793;
                        float _2850 = _2829 + _2794;
                        float _2851 = _2830 + _2795;
                        float _2855 = inversesqrt(dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851)));
                        float _2859 = dot(vec3(_580, _583, _586), vec3(_2828, _2829, _2830));
                        float _4099 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2862 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                        float _2863 = dot(vec3(_580, _583, _586), vec3(_2855 * _2849, _2855 * _2850, _2855 * _2851));
                        float _4110 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2866 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                        float _2870 = ((_2866 * _2866) * (_2848 + (-1.0))) + 1.0;
                        float _2871 = _2806 * _2847;
                        float _2872 = _2871 * _2871;
                        float _2875 = ((1.0 - _2872) * _2796) + _2872;
                        float _4121 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2876 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                        float _2877 = 1.0 - _2847;
                        float _2887 = (0.5 / (((_2876 * ((_2862 * _2877) + _2847)) + 9.9999999392252902907785028219223e-09) + (((_2876 * _2877) + _2847) * _2862))) * _2876;
                        float _4132 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2898 = (((_2848 * 3.1415927410125732421875) * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) / ((_2870 * _2870) * ((_2813 * 2.1991131305694580078125) + 3.141590118408203125))) * _2802;
                        _2655 = (_2817 * _2765.x) + _2723;
                        _2656 = (_2817 * _2765.y) + _2724;
                        _2657 = (_2817 * _2765.z) + _2725;
                        _2652 = (_2898 * _2782.x) + _2720;
                        _2653 = (_2898 * _2782.y) + _2721;
                        _2654 = (_2898 * _2782.z) + _2722;
                        if (_2727 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2720 = _2652;
                            _2721 = _2653;
                            _2722 = _2654;
                            _2723 = _2655;
                            _2724 = _2656;
                            _2725 = _2657;
                            _2726 = _2727;
                        }
                    }
                    frontier_phi_61_pred = _2652;
                    frontier_phi_61_pred_1 = _2657;
                    frontier_phi_61_pred_2 = _2656;
                    frontier_phi_61_pred_3 = _2655;
                    frontier_phi_61_pred_4 = _2654;
                    frontier_phi_61_pred_5 = _2653;
                }
                _2452 = frontier_phi_61_pred;
                _2462 = frontier_phi_61_pred_1;
                _2460 = frontier_phi_61_pred_2;
                _2458 = frontier_phi_61_pred_3;
                _2456 = frontier_phi_61_pred_4;
                _2454 = frontier_phi_61_pred_5;
                uint _2603 = _2602 + 1u;
                if (_2603 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2596 = _2452;
                    _2597 = _2454;
                    _2598 = _2456;
                    _2599 = _2458;
                    _2600 = _2460;
                    _2601 = _2462;
                    _2602 = _2603;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2451 = _2452;
            _2453 = _2454;
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
        }
        uvec4 _2465 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2466 = _2465.z;
        uint _2468 = (_2466 >> 8u) & 15u;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        if (((4294967295u << _2468) & _2350) == 0u)
        {
            _2564 = _2451;
            _2566 = _2453;
            _2568 = _2455;
            _2570 = _2457;
            _2572 = _2459;
            _2574 = _2461;
        }
        else
        {
            float _2589 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
            float _2590 = _2589 * _2304;
            float _2591 = _2589 * _2305;
            float _2592 = _2589 * _2306;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2468 < ((_2466 >> 12u) & 15u))
            {
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2573;
                float _2575;
                float _2703 = _2451;
                float _2704 = _2453;
                float _2705 = _2455;
                float _2706 = _2457;
                float _2707 = _2459;
                float _2708 = _2461;
                uint _2709 = _2468;
                uint _2718;
                bool _2719;
                for (;;)
                {
                    _2718 = texelFetch(g_lightClassification, int((((_2344 << 5u) + (_2330 << 9u)) + (_2709 << 2u)) >> 2u)).x;
                    _2719 = _2718 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2719)
                    {
                        frontier_phi_67_pred = _2706;
                        frontier_phi_67_pred_1 = _2707;
                        frontier_phi_67_pred_2 = _2708;
                        frontier_phi_67_pred_3 = _2705;
                        frontier_phi_67_pred_4 = _2704;
                        frontier_phi_67_pred_5 = _2703;
                    }
                    else
                    {
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _2908;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _2916 = _2703;
                        float _2917 = _2704;
                        float _2918 = _2705;
                        float _2919 = _2706;
                        float _2920 = _2707;
                        float _2921 = _2708;
                        uint _2922 = _2718;
                        uint _2923;
                        vec4 _2948;
                        float _2949;
                        vec4 _2964;
                        vec3 _2976;
                        vec4 _2992;
                        vec4 _3008;
                        float _3055;
                        bool _3056;
                        for (;;)
                        {
                            uint _2933 = ((_2709 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2922));
                            _2923 = (_2922 + 4294967295u) & _2922;
                            uint _2935 = _2933 * 40u;
                            _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            _2949 = _2948.w;
                            uint _2951 = (_2933 * 40u) + 4u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2966 = (_2933 * 40u) + 8u;
                            _2976 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x));
                            uint _2979 = (_2933 * 40u) + 16u;
                            _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            uint _2995 = (_2933 * 40u) + 20u;
                            _3008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 3u)).x));
                            uint _3011 = (_2933 * 40u) + 24u;
                            vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            uint _3030 = (_2933 * 40u) + 28u;
                            vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            _3055 = fma(_2306, _3043.z, fma(_2305, _3043.y, _3043.x * _2304)) + _3043.w;
                            _3056 = !((fma(_2306, _3024.z, fma(_2305, _3024.y, _3024.x * _2304)) + _3024.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3056)
                            {
                                float _3083 = _2948.x - _2304;
                                float _3084 = _2948.y - _2305;
                                float _3085 = _2948.z - _2306;
                                float _3086 = dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085));
                                float _3089 = inversesqrt(_3086);
                                float _3090 = _3089 * _3083;
                                float _3091 = _3089 * _3084;
                                float _3092 = _3089 * _3085;
                                float _3096 = 1.0 - (_3086 / (_2949 * _2949));
                                float _4143 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3097 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                                float _3101 = sqrt(_3086) * _2964.w;
                                float _3103 = 1.39999997615814208984375 / (_3101 + 1.39999997615814208984375);
                                float _3104 = _3103 * _3103;
                                float _3107 = ((1.0 - _3104) * dot(vec3(_3090, _3091, _3092), vec3(_580, _583, _586))) + _3104;
                                float _3110 = _3101 * _3101;
                                float _3114 = (fma(_2306, _2992.z, fma(_2305, _2992.y, _2992.x * _2304)) + _2992.w) / _3055;
                                float _3115 = (fma(_2306, _3008.z, fma(_2305, _3008.y, _3008.x * _2304)) + _3008.w) / _3055;
                                float _3119 = 1.0 - dot(vec2(_3114, _3115), vec2(_3114, _3115));
                                float _4159 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3120 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                                float _3121 = _3120 * (((isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0))) * _3097) / ((_3110 * 0.699999988079071044921875) + 1.0));
                                float _3133 = exp2(log2(1.0 / ((_3110 * 3.5) + 5.0)) * 0.25);
                                float _3134 = 1.0 - _640;
                                float _3141 = sqrt(1.0 - ((1.0 - (_3134 * _3134)) * (1.0 - (_3133 * _3133))));
                                float _3142 = _3141 * _3141;
                                float _3143 = _3142 * _3142;
                                float _3144 = _3090 - _2590;
                                float _3145 = _3091 - _2591;
                                float _3146 = _3092 - _2592;
                                float _3150 = inversesqrt(dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146)));
                                float _3154 = dot(vec3(_580, _583, _586), vec3((-0.0) - _2590, (-0.0) - _2591, (-0.0) - _2592));
                                float _4170 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3157 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                                float _3158 = dot(vec3(_580, _583, _586), vec3(_3150 * _3144, _3150 * _3145, _3150 * _3146));
                                float _4181 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3161 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                                float _3165 = ((_3161 * _3161) * (_3143 + (-1.0))) + 1.0;
                                float _3166 = _3103 * _3142;
                                float _3167 = _3166 * _3166;
                                float _3173 = ((1.0 - _3167) * dot(vec3(_580, _583, _586), vec3(_3090, _3091, _3092))) + _3167;
                                float _4192 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3174 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3175 = 1.0 - _3142;
                                float _3185 = (0.5 / (((_3174 * ((_3157 * _3175) + _3142)) + 9.9999999392252902907785028219223e-09) + (((_3174 * _3175) + _3142) * _3157))) * _3174;
                                float _4203 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3195 = (_3120 * _3097) * (((_3143 * 3.1415927410125732421875) * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) / ((_3165 * _3165) * ((_3110 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3195 * _2976.x;
                                frontier_phi_73_pred_1 = _3195 * _2976.y;
                                frontier_phi_73_pred_2 = _3121 * _2964.z;
                                frontier_phi_73_pred_3 = _3121 * _2964.y;
                                frontier_phi_73_pred_4 = _3121 * _2964.x;
                                frontier_phi_73_pred_5 = _3195 * _2976.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3199 = frontier_phi_73_pred;
                            _3200 = frontier_phi_73_pred_1;
                            _3204 = frontier_phi_73_pred_2;
                            _3203 = frontier_phi_73_pred_3;
                            _3202 = frontier_phi_73_pred_4;
                            _3201 = frontier_phi_73_pred_5;
                            _2906 = _3202 + _2919;
                            _2907 = _3203 + _2920;
                            _2908 = _3204 + _2921;
                            _2903 = _3199 + _2916;
                            _2904 = _3200 + _2917;
                            _2905 = _3201 + _2918;
                            if (_2923 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2923;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2906;
                        frontier_phi_67_pred_1 = _2907;
                        frontier_phi_67_pred_2 = _2908;
                        frontier_phi_67_pred_3 = _2905;
                        frontier_phi_67_pred_4 = _2904;
                        frontier_phi_67_pred_5 = _2903;
                    }
                    _2571 = frontier_phi_67_pred;
                    _2573 = frontier_phi_67_pred_1;
                    _2575 = frontier_phi_67_pred_2;
                    _2569 = frontier_phi_67_pred_3;
                    _2567 = frontier_phi_67_pred_4;
                    _2565 = frontier_phi_67_pred_5;
                    uint _2710 = _2709 + 1u;
                    if (_2710 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2703 = _2565;
                        _2704 = _2567;
                        _2705 = _2569;
                        _2706 = _2571;
                        _2707 = _2573;
                        _2708 = _2575;
                        _2709 = _2710;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2573;
                frontier_phi_55_56_ladder_1 = _2575;
                frontier_phi_55_56_ladder_2 = _2571;
                frontier_phi_55_56_ladder_3 = _2569;
                frontier_phi_55_56_ladder_4 = _2567;
                frontier_phi_55_56_ladder_5 = _2565;
            }
            else
            {
                frontier_phi_55_56_ladder = _2459;
                frontier_phi_55_56_ladder_1 = _2461;
                frontier_phi_55_56_ladder_2 = _2457;
                frontier_phi_55_56_ladder_3 = _2455;
                frontier_phi_55_56_ladder_4 = _2453;
                frontier_phi_55_56_ladder_5 = _2451;
            }
            _2564 = frontier_phi_55_56_ladder_5;
            _2566 = frontier_phi_55_56_ladder_4;
            _2568 = frontier_phi_55_56_ladder_3;
            _2570 = frontier_phi_55_56_ladder_2;
            _2572 = frontier_phi_55_56_ladder;
            _2574 = frontier_phi_55_56_ladder_1;
        }
        float _2579 = isnan(1.0) ? _624 : (isnan(_624) ? 1.0 : min(_624, 1.0));
        _2363 = (_2579 * _2570) + _1815;
        _2365 = (_2579 * _2572) + _1817;
        _2367 = (_2579 * _2574) + _1819;
        _2369 = ((_2564 * 0.039999999105930328369140625) * _2579) + _2148;
        _2371 = ((_2566 * 0.039999999105930328369140625) * _2579) + _2150;
        _2373 = ((_2568 * 0.039999999105930328369140625) * _2579) + _2152;
    }
    else
    {
        _2363 = _1815;
        _2365 = _1817;
        _2367 = _1819;
        _2369 = _2148;
        _2371 = _2150;
        _2373 = _2152;
    }
    float _4219 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4230 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4241 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    uint _2393 = _599 + 6u;
    float _2401 = _560 / cbSceneParam._m0[86u].x;
    float _2402 = _561 / cbSceneParam._m0[86u].y;
    vec4 _2416 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2401, _2402, (log2((isnan(cbSceneParam._m0[77u].w) ? _495 : (isnan(_495) ? cbSceneParam._m0[77u].w : min(_495, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2418 = _2416.x;
    float _2419 = _2416.y;
    float _2420 = _2416.z;
    float _2421 = _2416.w;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    if (_495 > cbSceneParam._m0[78u].w)
    {
        float _2476 = isnan(_495) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _495 : min(cbSceneParam._m0[80u].w, _495));
        float _2477 = _2476 / _495;
        float _2488 = _2477 * _545;
        float _2489 = _546 * _2477;
        float _2490 = (-0.0) - _2489;
        float _2492 = _2477 * _547;
        float _2494 = (cbSceneParam._m0[77u].w * _2490) / _2476;
        float _2495 = _2494 + cbSceneParam._m0[79u].w;
        float _2496 = cbSceneParam._m0[79u].w - _2489;
        float _2502 = sqrt(((_2488 * _2488) + (_2489 * _2489)) + (_2492 * _2492));
        float _2505 = (1.0 - (cbSceneParam._m0[77u].w / _2476)) * _2502;
        float _2510 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2512 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2665;
        if (abs((_2490 - _2494) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2665 = ((((_2495 > 0.0) ? exp2(_2510 * _2495) : (2.0 - exp2(_2512 * _2495))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2505;
        }
        else
        {
            float _2625 = 1.0 / cbSceneParam._m0[80u].x;
            float _2626 = isnan(_2496) ? _2495 : (isnan(_2495) ? _2496 : max(_2495, _2496));
            float _2627 = isnan(_2496) ? _2495 : (isnan(_2495) ? _2496 : min(_2495, _2496));
            float _2636 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : min(_2626, 0.0));
            float _2637 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : min(_2627, 0.0));
            _2665 = ((abs(_2502 / _2490) * cbSceneParam._m0[80u].y) * ((((_2636 - _2637) * 2.0) - ((exp2(_2510 * (isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0)))) - exp2(_2510 * (isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0))))) * _2625)) - ((exp2(_2512 * _2636) - exp2(_2512 * _2637)) * _2625))) + (_2505 * cbSceneParam._m0[80u].z);
        }
        vec4 _2667 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2401, _2402, 1.0), 0.0);
        float _2676 = exp2((_2665 * (-1.44269502162933349609375)) * (1.0 - _2667.w));
        float _2677 = log2(_2676);
        float _2693 = log2(_2421);
        _2514 = (exp2(_2693 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2677 * cbSceneParam._m0[78u].x)) * _2667.x) / cbSceneParam._m0[78u].x)) + _2418;
        _2516 = (exp2(_2693 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2677 * cbSceneParam._m0[78u].y)) * _2667.y) / cbSceneParam._m0[78u].y)) + _2419;
        _2518 = (exp2(_2693 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2677 * cbSceneParam._m0[78u].z)) * _2667.z) / cbSceneParam._m0[78u].z)) + _2420;
        _2520 = _2676 * _2421;
    }
    else
    {
        _2514 = _2418;
        _2516 = _2419;
        _2518 = _2420;
        _2520 = _2421;
    }
    float _2532 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2533 = _2532 == 3.0;
    float _2534 = log2(_2520);
    float _2541 = exp2(_2534 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2363 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _624))) + ((_2369 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1431)) * cbPerFrame._m0[3u].x));
    float _2542 = exp2(_2534 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2365 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _624))) + ((_2371 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1431)) * cbPerFrame._m0[3u].x));
    float _2543 = exp2(_2534 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2367 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _624))) + ((_2373 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1431)) * cbPerFrame._m0[3u].x));
    float _2552 = (_2532 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2552 * (_2533 ? _2541 : (_2541 + (cbSceneParam._m0[72u].w * _2514)));
    SV_Target.y = _2552 * (_2533 ? _2542 : (_2542 + (cbSceneParam._m0[72u].w * _2516)));
    SV_Target.z = _2552 * (_2533 ? _2543 : (_2543 + (cbSceneParam._m0[72u].w * _2518)));
    SV_Target.w = cbInstanceData._m0[_2393].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2393].w;
}


