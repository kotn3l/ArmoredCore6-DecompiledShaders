#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D SLOD_LookCamBillboard_SAT_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D SLOD_LookCamBillboard_SAT_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D SLOD_LookCamBillboard_SAT_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D SLOD_LookCamBillboard_SAT_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_2;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _861;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = floor(cbMtdParam._m0[9u].x * TEXCOORD.z) / cbMtdParam._m0[9u].x;
    float _220 = floor(cbMtdParam._m0[9u].x * TEXCOORD.w) / cbMtdParam._m0[9u].x;
    float _3222 = isnan(0.0) ? _219 : (isnan(_219) ? 0.0 : max(_219, 0.0));
    float _3233 = isnan(0.0) ? _220 : (isnan(_220) ? 0.0 : max(_220, 0.0));
    float _226 = (TEXCOORD.x / cbMtdParam._m0[9u].x) + (isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0)));
    float _227 = (TEXCOORD.y / cbMtdParam._m0[9u].x) + (isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0)));
    vec4 _240 = texture(sampler2D(SLOD_LookCamBillboard_SAT_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _226) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _227) + cbTextureTilingScale._m0[3u].w));
    float _243 = _240.x;
    float _244 = _240.y;
    float _245 = _240.z;
    vec4 _257 = texture(sampler2D(SLOD_LookCamBillboard_SAT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * _226) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _227) + cbTextureTilingScale._m0[0u].w));
    vec4 _272 = texture(sampler2D(SLOD_LookCamBillboard_SAT_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _226) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _227) + cbTextureTilingScale._m0[1u].w));
    float _274 = _272.x;
    vec4 _286 = texture(sampler2D(SLOD_LookCamBillboard_SAT_snp_0_Texture2D_2, SS_SpecularMap), vec2((cbTextureTilingScale._m0[2u].x * _226) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _227) + cbTextureTilingScale._m0[2u].w));
    float _288 = _286.x;
    float _292 = (_257.x * 2.0) + (-1.0);
    float _294 = (_257.y * 2.0) + (-1.0);
    float _295 = dot(vec2(_292, _294), vec2(_292, _294));
    float _3244 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _300 = sqrt(1.0 - (isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0))));
    float _303 = fma(_300, _199 * NORMAL.x, fma(_294, _206 * TANGENT.x, (_192 * _184) * _292));
    float _306 = fma(_300, _199 * NORMAL.y, fma(_294, _206 * TANGENT.y, (_192 * _185) * _292));
    float _309 = fma(_300, _199 * NORMAL.z, fma(_294, _206 * TANGENT.z, (_192 * _186) * _292));
    float _313 = inversesqrt(dot(vec3(_303, _306, _309), vec3(_303, _306, _309)));
    float _314 = _313 * _303;
    float _315 = _313 * _306;
    float _316 = _313 * _309;
    float _3255 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _317 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
    float _3266 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3277 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3288 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3299 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _321 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
    float _337 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _379 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _389 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _379);
    float _390 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _379);
    float _391 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _379);
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _389 * _395;
    float _397 = _390 * _395;
    float _398 = _391 * _395;
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _426 = fma(_316, cbSceneParam._m0[5u].z, fma(_315, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _314));
    float _429 = fma(_316, cbSceneParam._m0[6u].z, fma(_315, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _314));
    float _432 = fma(_316, cbSceneParam._m0[7u].z, fma(_315, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _314));
    uint _445 = uint(roundEven(NORMAL.w)) * 13u;
    uint _448 = (_445 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _454 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0)))) * cbInstanceData._m0[_448].x;
    float _455 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0)))) * cbInstanceData._m0[_448].y;
    float _456 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0)))) * cbInstanceData._m0[_448].z;
    float _3310 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _3321 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _3332 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
    float _460 = 1.0 - _321;
    float _461 = _457 * _460;
    float _462 = _458 * _460;
    float _463 = _459 * _460;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _321;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _321;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _321;
    float _471 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    vec4 _483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _486 = _483.x * TEXCOORD_2;
    float _487 = dot(vec3(_314, _315, _316), vec3(_396, _397, _398));
    float _490 = _487 * 2.0;
    float _494 = (_490 * _314) - _396;
    float _495 = (_490 * _315) - _397;
    float _496 = (_490 * _316) - _398;
    float _500 = abs(dot(vec3(_396, _397, _398), vec3(_314, _315, _316)));
    float _3343 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _502 = sqrt(_317);
    float _515 = exp2((_502 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_502 * 3.0));
    float _521 = (1.0 - _515) * ((_502 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _522 = _515 * _502;
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _860;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _585 = fma(_558, cbModelParam._m0[26u].z, fma(_554, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _550));
        float _589 = fma(_558, cbModelParam._m0[27u].z, fma(_554, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _550));
        float _593 = fma(_558, cbModelParam._m0[28u].z, fma(_554, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _550));
        float _618 = _550 + _314;
        float _619 = _554 + _315;
        float _620 = _558 + _316;
        float _630 = fma(_620, cbModelParam._m0[26u].z, fma(_619, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618)) - _585;
        float _631 = fma(_620, cbModelParam._m0[27u].z, fma(_619, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618)) - _589;
        float _632 = fma(_620, cbModelParam._m0[28u].z, fma(_619, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618)) - _593;
        float _636 = inversesqrt(dot(vec3(_630, _631, _632), vec3(_630, _631, _632)));
        float _649 = ((_636 * _630) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_585 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _650 = ((_636 * _631) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_589 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _651 = ((_636 * _632) / cbModelParam._m0[34u].z) + ((((((_593 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        float _688 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_654.x + (-0.5));
        float _690 = _688 * (_654.y + (-0.5));
        float _691 = _688 * (_654.z + (-0.5));
        float _698 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_661.x + (-0.5));
        float _700 = _698 * (_661.y + (-0.5));
        float _701 = _698 * (_661.z + (-0.5));
        float _708 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_668.x + (-0.5));
        float _710 = _708 * (_668.y + (-0.5));
        float _711 = _708 * (_668.z + (-0.5));
        float _718 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_675.x + (-0.5));
        float _720 = _718 * (_675.y + (-0.5));
        float _721 = _718 * (_675.z + (-0.5));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = _689 * 0.5;
        float _726 = _699 * 0.5;
        float _727 = _709 * 0.5;
        float _728 = dot(vec3(_725, _726, _727), vec3(_725, _726, _727));
        float _733 = (_728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_728);
        float _742 = (dot(vec3(_314, _315, _316), vec3(_733 * _725, _733 * _726, _733 * _727)) + 1.0) * 0.5;
        float _3369 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _752 = sqrt(((_726 * _726) + (_725 * _725)) + (_727 * _727)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3380 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
        float _754 = _753 * 2.0;
        float _758 = (1.0 - _753) / (_753 + 1.0);
        float _3391 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _768 = ((((1.0 - _759) * (_754 + 2.0)) * exp2(log2(isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0))) * (_754 + 1.0))) + _759) * _722;
        float _769 = _690 * 0.5;
        float _770 = _700 * 0.5;
        float _771 = _710 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _785 = (dot(vec3(_314, _315, _316), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _3402 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _794 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_723 + 9.9999997473787516355514526367188e-06);
        float _3413 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _3424 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) * (_796 + 1.0))) + _801) * _723;
        float _811 = _691 * 0.5;
        float _812 = _701 * 0.5;
        float _813 = _711 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _827 = (dot(vec3(_314, _315, _316), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _3435 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _836 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3446 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _838 = _837 * 2.0;
        float _842 = (1.0 - _837) / (_837 + 1.0);
        float _3457 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _852 = ((((1.0 - _843) * (_838 + 2.0)) * exp2(log2(isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * (_838 + 1.0))) + _843) * _724;
        _860 = _691;
        _862 = _690;
        _863 = _689;
        _864 = _701;
        _865 = _700;
        _866 = _699;
        _867 = _711;
        _868 = _710;
        _869 = _709;
        _870 = _724;
        _871 = _723;
        _872 = _722;
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0)));
        _874 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)));
    }
    else
    {
        _860 = _861;
        _862 = _861;
        _863 = _861;
        _864 = _861;
        _865 = _861;
        _866 = _861;
        _867 = _861;
        _868 = _861;
        _869 = _861;
        _870 = _861;
        _871 = _861;
        _872 = _861;
        _873 = 0.0;
        _874 = 0.0;
        _875 = 0.0;
    }
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _901 = fma(_558, cbModelParam._m0[30u].z, fma(_554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _550));
        float _905 = fma(_558, cbModelParam._m0[31u].z, fma(_554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _550));
        float _909 = fma(_558, cbModelParam._m0[32u].z, fma(_554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _550));
        float _932 = _550 + _314;
        float _933 = _554 + _315;
        float _934 = _558 + _316;
        float _944 = fma(_934, cbModelParam._m0[30u].z, fma(_933, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932)) - _901;
        float _945 = fma(_934, cbModelParam._m0[31u].z, fma(_933, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932)) - _905;
        float _946 = fma(_934, cbModelParam._m0[32u].z, fma(_933, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932)) - _909;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_901 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_905 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[35u].z) + ((((((_909 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1000 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_967.x + (-0.5));
        float _1002 = _1000 * (_967.y + (-0.5));
        float _1003 = _1000 * (_967.z + (-0.5));
        float _1010 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_974.x + (-0.5));
        float _1012 = _1010 * (_974.y + (-0.5));
        float _1013 = _1010 * (_974.z + (-0.5));
        float _1020 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_981.x + (-0.5));
        float _1022 = _1020 * (_981.y + (-0.5));
        float _1023 = _1020 * (_981.z + (-0.5));
        float _1030 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_988.x + (-0.5));
        float _1032 = _1030 * (_988.y + (-0.5));
        float _1033 = _1030 * (_988.z + (-0.5));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = _1001 * 0.5;
        float _1038 = _1011 * 0.5;
        float _1039 = _1021 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_314, _315, _316), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3498 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3509 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3520 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * (_1064 + 1.0))) + _1069) * _1034;
        float _1079 = _1002 * 0.5;
        float _1080 = _1012 * 0.5;
        float _1081 = _1022 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_314, _315, _316), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3531 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3542 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3553 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * (_1106 + 1.0))) + _1111) * _1035;
        float _1121 = _1003 * 0.5;
        float _1122 = _1013 * 0.5;
        float _1123 = _1023 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_314, _315, _316), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3586 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_1148 + 1.0))) + _1153) * _1036;
        _1170 = _1003;
        _1171 = _1002;
        _1172 = _1001;
        _1173 = _1013;
        _1174 = _1012;
        _1175 = _1011;
        _1176 = _1023;
        _1177 = _1022;
        _1178 = _1021;
        _1179 = _1036;
        _1180 = _1035;
        _1181 = _1034;
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _861;
        _1171 = _861;
        _1172 = _861;
        _1173 = _861;
        _1174 = _861;
        _1175 = _861;
        _1176 = _861;
        _1177 = _861;
        _1178 = _861;
        _1179 = _861;
        _1180 = _861;
        _1181 = _861;
        _1182 = 0.0;
        _1183 = 0.0;
        _1184 = 0.0;
    }
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _873)) + _873;
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _874)) + _874;
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _875)) + _875;
    float _1217 = fma(_1196, cbSceneParam._m0[89u].z, fma(_1195, cbSceneParam._m0[89u].y, _1194 * cbSceneParam._m0[89u].x));
    float _1220 = fma(_1196, cbSceneParam._m0[90u].z, fma(_1195, cbSceneParam._m0[90u].y, _1194 * cbSceneParam._m0[90u].x));
    float _1223 = fma(_1196, cbSceneParam._m0[91u].z, fma(_1195, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1194));
    float _1238 = _494 * 0.5;
    float _1239 = _495 * 0.5;
    float _1240 = _496 * 0.5;
    float _1241 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1244 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1247 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1281;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1254 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_860, _864, _867, _870));
        float _1258 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_862, _865, _868, _871));
        float _1262 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_863, _866, _869, _872));
        float _1269 = dot(vec4(cbModelParam._m0[39u]), vec4(_1238, _1239, _1240, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1292;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1283 = dot(vec4(cbModelParam._m0[40u]), vec4(_1238, _1239, _1240, 1.0));
        _1292 = dot(vec3(isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1283) ? 0.0 : (isnan(0.0) ? _1283 : max(0.0, _1283))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1292 = 1.0;
    }
    float _1296 = (_1292 * cbModelParam._m0[1u].x) + (_1281 * (1.0 - cbModelParam._m0[1u].x));
    float _1306 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _317);
    float _1307 = isnan(_1306) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1306 : min(cbModelParam._m0[25u].z, _1306));
    float _1389;
    float _1391;
    float _1393;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1356 = fma(_558, cbModelParam._m0[13u].z, fma(_554, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _550)) + cbModelParam._m0[13u].w;
        float _1360 = fma(_558, cbModelParam._m0[14u].z, fma(_554, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _550)) + cbModelParam._m0[14u].w;
        float _1364 = fma(_558, cbModelParam._m0[15u].z, fma(_554, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _550)) + cbModelParam._m0[15u].w;
        float _1367 = fma(_496, cbModelParam._m0[13u].z, fma(_495, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494));
        float _1370 = fma(_496, cbModelParam._m0[14u].z, fma(_495, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494));
        float _1373 = fma(_496, cbModelParam._m0[15u].z, fma(_495, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494));
        float _1401;
        if (_1367 > 0.0)
        {
            _1401 = abs((1.0 - _1356) / _1367);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1356 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1401 = frontier_phi_14_12_ladder;
        }
        float _1630;
        if (_1370 > 0.0)
        {
            _1630 = abs((1.0 - _1360) / _1370);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1360 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1630 = frontier_phi_23_19_ladder;
        }
        float _1887;
        if (_1373 > 0.0)
        {
            _1887 = abs((1.0 - _1364) / _1373);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1364 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1887 = frontier_phi_35_30_ladder;
        }
        float _1889 = isnan(_1630) ? _1401 : (isnan(_1401) ? _1630 : min(_1401, _1630));
        float _1890 = isnan(_1887) ? _1889 : (isnan(_1889) ? _1887 : min(_1889, _1887));
        float _1894 = (_1890 * _1367) + _1356;
        float _1895 = (_1890 * _1370) + _1360;
        float _1896 = (_1890 * _1373) + _1364;
        float _1897 = _1890 * 9.9999997473787516355514526367188e-05;
        float _1899 = (-1.0) - _1897;
        float _1901 = _1897 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1896 > _1901) || ((_1896 < _1899) || ((_1895 > _1901) || ((_1895 < _1899) || ((_1894 < _1899) || (_1894 > _1901))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2024 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1896, cbModelParam._m0[9u].z, fma(_1895, cbModelParam._m0[9u].y, _1894 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1896, cbModelParam._m0[10u].z, fma(_1895, cbModelParam._m0[10u].y, _1894 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1896, cbModelParam._m0[11u].z, fma(_1895, cbModelParam._m0[11u].y, _1894 * cbModelParam._m0[11u].x))), _1307);
            frontier_phi_13_35_ladder = _2024.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2024.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2024.x * cbModelParam._m0[1u].y;
        }
        _1389 = frontier_phi_13_35_ladder_2;
        _1391 = frontier_phi_13_35_ladder_1;
        _1393 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_494, _495, _496), _1307);
        _1389 = _1377.x * cbModelParam._m0[1u].y;
        _1391 = _1377.y * cbModelParam._m0[1u].y;
        _1393 = _1377.z * cbModelParam._m0[1u].y;
    }
    float _1397 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _317);
    float _1398 = isnan(_1397) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1397 : min(cbModelParam._m0[25u].w, _1397));
    float _1491;
    float _1493;
    float _1495;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1455 = fma(_558, cbModelParam._m0[21u].z, fma(_554, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _550)) + cbModelParam._m0[21u].w;
        float _1459 = fma(_558, cbModelParam._m0[22u].z, fma(_554, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _550)) + cbModelParam._m0[22u].w;
        float _1463 = fma(_558, cbModelParam._m0[23u].z, fma(_554, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _550)) + cbModelParam._m0[23u].w;
        float _1466 = fma(_496, cbModelParam._m0[21u].z, fma(_495, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494));
        float _1469 = fma(_496, cbModelParam._m0[22u].z, fma(_495, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494));
        float _1472 = fma(_496, cbModelParam._m0[23u].z, fma(_495, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494));
        float _1635;
        if (_1466 > 0.0)
        {
            _1635 = abs((1.0 - _1455) / _1466);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1455 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1635 = frontier_phi_25_21_ladder;
        }
        float _1914;
        if (_1469 > 0.0)
        {
            _1914 = abs((1.0 - _1459) / _1469);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1459 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1914 = frontier_phi_37_32_ladder;
        }
        float _2127;
        if (_1472 > 0.0)
        {
            _2127 = abs((1.0 - _1463) / _1472);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1463 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2127 = frontier_phi_46_43_ladder;
        }
        float _2129 = isnan(_1914) ? _1635 : (isnan(_1635) ? _1914 : min(_1635, _1914));
        float _2130 = isnan(_2127) ? _2129 : (isnan(_2129) ? _2127 : min(_2129, _2127));
        float _2134 = (_2130 * _1466) + _1455;
        float _2135 = (_2130 * _1469) + _1459;
        float _2136 = (_2130 * _1472) + _1463;
        float _2137 = _2130 * 9.9999997473787516355514526367188e-05;
        float _2138 = (-1.0) - _2137;
        float _2140 = _2137 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2136 > _2140) || ((_2136 < _2138) || ((_2135 > _2140) || ((_2135 < _2138) || ((_2134 < _2138) || (_2134 > _2140))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2335 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2136, cbModelParam._m0[17u].z, fma(_2135, cbModelParam._m0[17u].y, _2134 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2136, cbModelParam._m0[18u].z, fma(_2135, cbModelParam._m0[18u].y, _2134 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2136, cbModelParam._m0[19u].z, fma(_2135, cbModelParam._m0[19u].y, _2134 * cbModelParam._m0[19u].x))), _1398);
            frontier_phi_22_46_ladder = _2335.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2335.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2335.x * cbModelParam._m0[1u].z;
        }
        _1491 = frontier_phi_22_46_ladder_2;
        _1493 = frontier_phi_22_46_ladder_1;
        _1495 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1475 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_494, _495, _496), _1398);
        _1491 = _1475.x * cbModelParam._m0[1u].z;
        _1493 = _1475.y * cbModelParam._m0[1u].z;
        _1495 = _1475.z * cbModelParam._m0[1u].z;
    }
    float _1508 = (((_521 * _471) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1510 = (((_521 * _473) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1512 = (((_521 * _474) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1515 = fma(_1512, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1508 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1512, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1508 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1512, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, _1508 * cbSceneParam._m0[91u].x));
    vec4 _1529 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_404, _405));
    float _1531 = _1529.w;
    float _1543 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1531);
    float _1544 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1531);
    float _1545 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1531);
    uvec4 _1549 = floatBitsToUint(cbInstanceData._m0[_445 + 5u]);
    uint _1551 = _1549.x * 14u;
    uint _1552 = _1551 + 13u;
    float _1559 = _486 + (-1.0);
    float _1564 = (cbLight._m0[_1552].x * _1559) + 1.0;
    float _1565 = (cbLight._m0[_1552].y * _1559) + 1.0;
    float _1566 = (cbLight._m0[_1552].z * _1559) + 1.0;
    float _1567 = (cbLight._m0[_1552].w * _1559) + 1.0;
    uint _1568 = _1551 + 5u;
    float _1574 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
    uint _1578 = _1551 + 4u;
    float _1588 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
    uint _1592 = _1551 | 1u;
    float _1603 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_314, _315, _316));
    float _1606 = dot(vec3(cbLight._m0[_1592].xyz), vec3(_314, _315, _316));
    float _3722 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _3733 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
    float _1611 = (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * 0.3183098733425140380859375;
    float _1613 = (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * 0.3183098733425140380859375;
    float _1620 = ((cbLight._m0[_1568].x * _1574) * _1613) + (((cbLight._m0[_1578].x * _1543) * _1588) * _1611);
    float _1621 = ((_1574 * cbLight._m0[_1568].y) * _1613) + (((cbLight._m0[_1578].y * _1544) * _1588) * _1611);
    float _1622 = ((_1574 * cbLight._m0[_1568].z) * _1613) + (((cbLight._m0[_1578].z * _1545) * _1588) * _1611);
    uvec4 _1627 = floatBitsToUint(cbLight._m0[_1551 + 12u]);
    bool _1629 = _1627.x == 0u;
    float _1640;
    float _1642;
    float _1644;
    if (_1629)
    {
        _1640 = _1620;
        _1642 = _1621;
        _1644 = _1622;
    }
    else
    {
        uint _1648 = _1551 + 6u;
        float _1664 = (dot(vec3(cbLight._m0[_1551 + 2u].xyz), vec3(_314, _315, _316)) * 0.5) + 0.5;
        float _1665 = _1664 * _1664;
        float _3744 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1667 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1640 = (((cbLight._m0[_1648].x * 0.3183098733425140380859375) * _1666) * _1667) + _1620;
        _1642 = (((cbLight._m0[_1648].y * 0.3183098733425140380859375) * _1666) * _1667) + _1621;
        _1644 = (((cbLight._m0[_1648].z * 0.3183098733425140380859375) * _1666) * _1667) + _1622;
    }
    bool _1647 = _1627.y == 0u;
    float _1685;
    float _1687;
    float _1689;
    if (_1647)
    {
        _1685 = _1640;
        _1687 = _1642;
        _1689 = _1644;
    }
    else
    {
        uint _1858 = _1551 + 7u;
        float _1874 = (dot(vec3(cbLight._m0[_1551 + 3u].xyz), vec3(_314, _315, _316)) * 0.5) + 0.5;
        float _1875 = _1874 * _1874;
        float _3760 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1877 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1685 = (((cbLight._m0[_1858].x * 0.3183098733425140380859375) * _1876) * _1877) + _1640;
        _1687 = (((cbLight._m0[_1858].y * 0.3183098733425140380859375) * _1876) * _1877) + _1642;
        _1689 = (((cbLight._m0[_1858].z * 0.3183098733425140380859375) * _1876) * _1877) + _1644;
    }
    uint _1692 = _1551 + 8u;
    float _1705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1551].w)) * _317) * 0.949999988079071044921875);
    float _1706 = _1705 * _1705;
    float _1707 = cbLight._m0[_1551].x + _396;
    float _1708 = cbLight._m0[_1551].y + _397;
    float _1709 = cbLight._m0[_1551].z + _398;
    float _1713 = inversesqrt(dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709)));
    float _1714 = _1713 * _1707;
    float _1715 = _1713 * _1708;
    float _1716 = _1713 * _1709;
    float _1717 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1551].xyz));
    float _3776 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1720 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _1721 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _1722 = dot(vec3(_314, _315, _316), vec3(_1714, _1715, _1716));
    float _3798 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1725 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _1726 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_1714, _1715, _1716));
    float _3809 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1730 = _1706 * _1706;
    float _1734 = ((_1725 * _1725) * (_1730 + (-1.0))) + 1.0;
    float _1742 = exp2(log2(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * 5.0);
    float _1743 = 0.959999978542327880859375 - _468;
    float _1745 = 0.959999978542327880859375 - _469;
    float _1746 = 0.959999978542327880859375 - _470;
    float _1753 = 1.0 - _1706;
    float _1764 = (0.5 / (((_1721 * ((_1720 * _1753) + _1706)) + 9.9999999392252902907785028219223e-09) + (((_1721 * _1753) + _1706) * _1720))) * _1720;
    float _3820 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1766 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1730 / ((_1734 * _1734) * 3.141590118408203125));
    uint _1780 = _1551 + 9u;
    float _1791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1592].w)) * _317) * 0.949999988079071044921875);
    float _1792 = _1791 * _1791;
    float _1793 = cbLight._m0[_1592].x + _396;
    float _1794 = cbLight._m0[_1592].y + _397;
    float _1795 = cbLight._m0[_1592].z + _398;
    float _1799 = inversesqrt(dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795)));
    float _1800 = _1799 * _1793;
    float _1801 = _1799 * _1794;
    float _1802 = _1799 * _1795;
    float _1803 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1592].xyz));
    float _3831 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _1807 = dot(vec3(_314, _315, _316), vec3(_1800, _1801, _1802));
    float _3842 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1810 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _1811 = dot(vec3(cbLight._m0[_1592].xyz), vec3(_1800, _1801, _1802));
    float _3853 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1815 = _1792 * _1792;
    float _1819 = ((_1810 * _1810) * (_1815 + (-1.0))) + 1.0;
    float _1826 = exp2(log2(1.0 - (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * 5.0);
    float _1833 = 1.0 - _1792;
    float _1843 = (0.5 / (((_1721 * ((_1806 * _1833) + _1792)) + 9.9999999392252902907785028219223e-09) + (((_1721 * _1833) + _1792) * _1806))) * _1806;
    float _3864 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1845 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1815 / ((_1819 * _1819) * 3.141590118408203125));
    float _1855 = (((((_1826 * _1743) + _471) * cbLight._m0[_1780].x) * _1845) * _1574) + ((((cbLight._m0[_1692].x * _1543) * ((_1742 * _1743) + _471)) * _1766) * _1588);
    float _1856 = (((((_1826 * _1745) + _473) * cbLight._m0[_1780].y) * _1845) * _1574) + ((((cbLight._m0[_1692].y * _1544) * ((_1742 * _1745) + _473)) * _1766) * _1588);
    float _1857 = (((((_1826 * _1746) + _474) * cbLight._m0[_1780].z) * _1845) * _1574) + ((((cbLight._m0[_1692].z * _1545) * ((_1742 * _1746) + _474)) * _1766) * _1588);
    float _1919;
    float _1921;
    float _1923;
    if (_1629)
    {
        _1919 = _1855;
        _1921 = _1856;
        _1923 = _1857;
    }
    else
    {
        uint _1925 = _1551 + 2u;
        uint _1929 = _1551 + 10u;
        float _1943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1925].w)) * _317) * 0.949999988079071044921875);
        float _1944 = _1943 * _1943;
        float _1945 = cbLight._m0[_1925].x + _396;
        float _1946 = cbLight._m0[_1925].y + _397;
        float _1947 = cbLight._m0[_1925].z + _398;
        float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
        float _1952 = _1951 * _1945;
        float _1953 = _1951 * _1946;
        float _1954 = _1951 * _1947;
        float _1955 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1925].xyz));
        float _3875 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1958 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1959 = dot(vec3(_314, _315, _316), vec3(_1952, _1953, _1954));
        float _3886 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1962 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1963 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_1952, _1953, _1954));
        float _3897 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1967 = _1944 * _1944;
        float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
        float _1978 = exp2(log2(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * 5.0);
        float _1985 = 1.0 - _1944;
        float _1995 = (0.5 / (((_1721 * ((_1958 * _1985) + _1944)) + 9.9999999392252902907785028219223e-09) + (((_1721 * _1985) + _1944) * _1958))) * _1958;
        float _3908 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1997 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
        float _1998 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1919 = (((((_1978 * _1743) + _471) * cbLight._m0[_1929].x) * _1997) * _1998) + _1855;
        _1921 = (((((_1978 * _1745) + _473) * cbLight._m0[_1929].y) * _1997) * _1998) + _1856;
        _1923 = (((((_1978 * _1746) + _474) * cbLight._m0[_1929].z) * _1997) * _1998) + _1857;
    }
    float _2033;
    float _2035;
    float _2037;
    if (_1647)
    {
        _2033 = _1919;
        _2035 = _1921;
        _2037 = _1923;
    }
    else
    {
        uint _2044 = _1551 + 3u;
        uint _2048 = _1551 + 11u;
        float _2062 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2044].w)) * _317) * 0.949999988079071044921875);
        float _2063 = _2062 * _2062;
        float _2064 = cbLight._m0[_2044].x + _396;
        float _2065 = cbLight._m0[_2044].y + _397;
        float _2066 = cbLight._m0[_2044].z + _398;
        float _2070 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
        float _2071 = _2070 * _2064;
        float _2072 = _2070 * _2065;
        float _2073 = _2070 * _2066;
        float _2074 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_2044].xyz));
        float _3924 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2077 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _2078 = dot(vec3(_314, _315, _316), vec3(_2071, _2072, _2073));
        float _3935 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2081 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _2082 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_2071, _2072, _2073));
        float _3946 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2086 = _2063 * _2063;
        float _2090 = ((_2081 * _2081) * (_2086 + (-1.0))) + 1.0;
        float _2097 = exp2(log2(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * 5.0);
        float _2104 = 1.0 - _2063;
        float _2114 = (0.5 / (((_1721 * ((_2077 * _2104) + _2063)) + 9.9999999392252902907785028219223e-09) + (((_1721 * _2104) + _2063) * _2077))) * _2077;
        float _3957 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2116 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_2086 / ((_2090 * _2090) * 3.141590118408203125));
        float _2117 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _2033 = (((((_2097 * _1743) + _471) * cbLight._m0[_2048].x) * _2116) * _2117) + _1919;
        _2035 = (((((_2097 * _1745) + _473) * cbLight._m0[_2048].y) * _2116) * _2117) + _1921;
        _2037 = (((((_2097 * _1746) + _474) * cbLight._m0[_2048].z) * _2116) * _2117) + _1923;
    }
    float _2252;
    float _2254;
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    if (_1549.y == 0u)
    {
        float _2192 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2193 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2192;
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2192;
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2192;
        uvec4 _2207 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2208 = _2207.x;
        uint _2219 = uint((float(_2207.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2208))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2208)));
        float _2229 = (log2(_2195 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2230 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        uint _2233 = uint(isnan(14.0) ? _2230 : (isnan(_2230) ? 14.0 : min(_2230, 14.0)));
        uvec4 _2238 = texelFetch(g_lightClusterGridBuffer, int(((_2233 << 2u) + (_2219 << 6u)) >> 2u));
        uint _2239 = _2238.x;
        uint _2240 = _2207.z;
        float _2340;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        float _2350;
        if (((((1u << ((_2240 >> 4u) & 15u)) + 4294967295u) & _2239) == 0u) || ((_2240 & 240u) == 0u))
        {
            _2340 = 0.0;
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
        }
        else
        {
            float _2341;
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2351;
            float _2485 = 0.0;
            float _2486 = 0.0;
            float _2487 = 0.0;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            uint _2491 = 0u;
            uint _2500;
            bool _2501;
            for (;;)
            {
                _2500 = texelFetch(g_lightClassification, int((((_2233 << 5u) + (_2219 << 9u)) + (_2491 << 2u)) >> 2u)).x;
                _2501 = _2500 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2501)
                {
                    frontier_phi_61_pred = _2485;
                    frontier_phi_61_pred_1 = _2490;
                    frontier_phi_61_pred_2 = _2489;
                    frontier_phi_61_pred_3 = _2488;
                    frontier_phi_61_pred_4 = _2487;
                    frontier_phi_61_pred_5 = _2486;
                }
                else
                {
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    uint _2615;
                    _2609 = _2485;
                    _2610 = _2486;
                    _2611 = _2487;
                    _2612 = _2488;
                    _2613 = _2489;
                    _2614 = _2490;
                    _2615 = _2500;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    float _2546;
                    for (;;)
                    {
                        uint _2619 = uint(findLSB(_2615)) + (_2491 << 5u);
                        uint _2616 = (_2615 + 4294967295u) & _2615;
                        uint _2621 = _2619 * 48u;
                        vec4 _2635 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2621)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 3u)).x));
                        uint _2641 = (_2619 * 48u) + 4u;
                        vec4 _2654 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2641)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 3u)).x));
                        uint _2660 = (_2619 * 48u) + 8u;
                        vec3 _2671 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2660)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 2u)).x));
                        float _2675 = _2635.x - _2193;
                        float _2676 = _2635.y - _2194;
                        float _2677 = _2635.z - _2195;
                        float _2678 = dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677));
                        float _2681 = inversesqrt(_2678);
                        float _2682 = _2681 * _2675;
                        float _2683 = _2681 * _2676;
                        float _2684 = _2681 * _2677;
                        float _2685 = dot(vec3(_426, _429, _432), vec3(_2682, _2683, _2684));
                        float _2690 = 1.0 - (_2678 * _2635.w);
                        float _3983 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
                        float _2691 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                        float _2692 = sqrt(_2678) * _2654.w;
                        float _2695 = 1.39999997615814208984375 / (_2692 + 1.39999997615814208984375);
                        float _2696 = _2695 * _2695;
                        float _2699 = ((1.0 - _2696) * _2685) + _2696;
                        float _2702 = _2692 * _2692;
                        float _2706 = ((isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0))) * _2691) / ((_2702 * 0.699999988079071044921875) + 1.0);
                        float _2710 = (-0.0) - _2193;
                        float _2711 = (-0.0) - _2194;
                        float _2712 = (-0.0) - _2195;
                        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
                        float _2717 = _2716 * _2710;
                        float _2718 = _2716 * _2711;
                        float _2719 = _2716 * _2712;
                        float _2727 = exp2(log2(1.0 / ((_2702 * 3.5) + 5.0)) * 0.25);
                        float _2728 = 1.0 - _502;
                        float _2735 = sqrt(1.0 - ((1.0 - (_2728 * _2728)) * (1.0 - (_2727 * _2727))));
                        float _2736 = _2735 * _2735;
                        float _2737 = _2736 * _2736;
                        float _2738 = _2717 + _2682;
                        float _2739 = _2718 + _2683;
                        float _2740 = _2719 + _2684;
                        float _2744 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
                        float _2748 = dot(vec3(_426, _429, _432), vec3(_2717, _2718, _2719));
                        float _3999 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2751 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2752 = dot(vec3(_426, _429, _432), vec3(_2744 * _2738, _2744 * _2739, _2744 * _2740));
                        float _4010 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2755 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2759 = ((_2755 * _2755) * (_2737 + (-1.0))) + 1.0;
                        float _2760 = _2695 * _2736;
                        float _2761 = _2760 * _2760;
                        float _2764 = ((1.0 - _2761) * _2685) + _2761;
                        float _4021 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2765 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                        float _2766 = 1.0 - _2736;
                        float _2776 = (0.5 / (((_2765 * ((_2751 * _2766) + _2736)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _2766) + _2736) * _2751))) * _2765;
                        float _4032 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                        float _2787 = (((_2737 * 3.1415927410125732421875) * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) / ((_2759 * _2759) * ((_2702 * 2.1991131305694580078125) + 3.141590118408203125))) * _2691;
                        _2544 = (_2706 * _2654.x) + _2612;
                        _2545 = (_2706 * _2654.y) + _2613;
                        _2546 = (_2706 * _2654.z) + _2614;
                        _2541 = (_2787 * _2671.x) + _2609;
                        _2542 = (_2787 * _2671.y) + _2610;
                        _2543 = (_2787 * _2671.z) + _2611;
                        if (_2616 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2609 = _2541;
                            _2610 = _2542;
                            _2611 = _2543;
                            _2612 = _2544;
                            _2613 = _2545;
                            _2614 = _2546;
                            _2615 = _2616;
                        }
                    }
                    frontier_phi_61_pred = _2541;
                    frontier_phi_61_pred_1 = _2546;
                    frontier_phi_61_pred_2 = _2545;
                    frontier_phi_61_pred_3 = _2544;
                    frontier_phi_61_pred_4 = _2543;
                    frontier_phi_61_pred_5 = _2542;
                }
                _2341 = frontier_phi_61_pred;
                _2351 = frontier_phi_61_pred_1;
                _2349 = frontier_phi_61_pred_2;
                _2347 = frontier_phi_61_pred_3;
                _2345 = frontier_phi_61_pred_4;
                _2343 = frontier_phi_61_pred_5;
                uint _2492 = _2491 + 1u;
                if (_2492 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2485 = _2341;
                    _2486 = _2343;
                    _2487 = _2345;
                    _2488 = _2347;
                    _2489 = _2349;
                    _2490 = _2351;
                    _2491 = _2492;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2340 = _2341;
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
        }
        uvec4 _2354 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2355 = _2354.z;
        uint _2357 = (_2355 >> 8u) & 15u;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        if (((4294967295u << _2357) & _2239) == 0u)
        {
            _2453 = _2340;
            _2455 = _2342;
            _2457 = _2344;
            _2459 = _2346;
            _2461 = _2348;
            _2463 = _2350;
        }
        else
        {
            float _2478 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
            float _2479 = _2478 * _2193;
            float _2480 = _2478 * _2194;
            float _2481 = _2478 * _2195;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2357 < ((_2355 >> 12u) & 15u))
            {
                float _2454;
                float _2456;
                float _2458;
                float _2460;
                float _2462;
                float _2464;
                float _2592 = _2340;
                float _2593 = _2342;
                float _2594 = _2344;
                float _2595 = _2346;
                float _2596 = _2348;
                float _2597 = _2350;
                uint _2598 = _2357;
                uint _2607;
                bool _2608;
                for (;;)
                {
                    _2607 = texelFetch(g_lightClassification, int((((_2233 << 5u) + (_2219 << 9u)) + (_2598 << 2u)) >> 2u)).x;
                    _2608 = _2607 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2608)
                    {
                        frontier_phi_67_pred = _2595;
                        frontier_phi_67_pred_1 = _2596;
                        frontier_phi_67_pred_2 = _2597;
                        frontier_phi_67_pred_3 = _2594;
                        frontier_phi_67_pred_4 = _2593;
                        frontier_phi_67_pred_5 = _2592;
                    }
                    else
                    {
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _2805 = _2592;
                        float _2806 = _2593;
                        float _2807 = _2594;
                        float _2808 = _2595;
                        float _2809 = _2596;
                        float _2810 = _2597;
                        uint _2811 = _2607;
                        uint _2812;
                        vec4 _2837;
                        float _2838;
                        vec4 _2853;
                        vec3 _2865;
                        vec4 _2881;
                        vec4 _2897;
                        float _2944;
                        bool _2945;
                        for (;;)
                        {
                            uint _2822 = ((_2598 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2811));
                            _2812 = (_2811 + 4294967295u) & _2811;
                            uint _2824 = _2822 * 40u;
                            _2837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 3u)).x));
                            _2838 = _2837.w;
                            uint _2840 = (_2822 * 40u) + 4u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            uint _2855 = (_2822 * 40u) + 8u;
                            _2865 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x));
                            uint _2868 = (_2822 * 40u) + 16u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            uint _2884 = (_2822 * 40u) + 20u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2900 = (_2822 * 40u) + 24u;
                            vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2919 = (_2822 * 40u) + 28u;
                            vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            _2944 = fma(_2195, _2932.z, fma(_2194, _2932.y, _2932.x * _2193)) + _2932.w;
                            _2945 = !((fma(_2195, _2913.z, fma(_2194, _2913.y, _2913.x * _2193)) + _2913.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2945)
                            {
                                float _2972 = _2837.x - _2193;
                                float _2973 = _2837.y - _2194;
                                float _2974 = _2837.z - _2195;
                                float _2975 = dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974));
                                float _2978 = inversesqrt(_2975);
                                float _2979 = _2978 * _2972;
                                float _2980 = _2978 * _2973;
                                float _2981 = _2978 * _2974;
                                float _2985 = 1.0 - (_2975 / (_2838 * _2838));
                                float _4043 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                                float _2986 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                                float _2990 = sqrt(_2975) * _2853.w;
                                float _2992 = 1.39999997615814208984375 / (_2990 + 1.39999997615814208984375);
                                float _2993 = _2992 * _2992;
                                float _2996 = ((1.0 - _2993) * dot(vec3(_2979, _2980, _2981), vec3(_426, _429, _432))) + _2993;
                                float _2999 = _2990 * _2990;
                                float _3003 = (fma(_2195, _2881.z, fma(_2194, _2881.y, _2881.x * _2193)) + _2881.w) / _2944;
                                float _3004 = (fma(_2195, _2897.z, fma(_2194, _2897.y, _2897.x * _2193)) + _2897.w) / _2944;
                                float _3008 = 1.0 - dot(vec2(_3003, _3004), vec2(_3003, _3004));
                                float _4059 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3009 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3010 = _3009 * (((isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0))) * _2986) / ((_2999 * 0.699999988079071044921875) + 1.0));
                                float _3022 = exp2(log2(1.0 / ((_2999 * 3.5) + 5.0)) * 0.25);
                                float _3023 = 1.0 - _502;
                                float _3030 = sqrt(1.0 - ((1.0 - (_3023 * _3023)) * (1.0 - (_3022 * _3022))));
                                float _3031 = _3030 * _3030;
                                float _3032 = _3031 * _3031;
                                float _3033 = _2979 - _2479;
                                float _3034 = _2980 - _2480;
                                float _3035 = _2981 - _2481;
                                float _3039 = inversesqrt(dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035)));
                                float _3043 = dot(vec3(_426, _429, _432), vec3((-0.0) - _2479, (-0.0) - _2480, (-0.0) - _2481));
                                float _4070 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3046 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3047 = dot(vec3(_426, _429, _432), vec3(_3039 * _3033, _3039 * _3034, _3039 * _3035));
                                float _4081 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3050 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                                float _3054 = ((_3050 * _3050) * (_3032 + (-1.0))) + 1.0;
                                float _3055 = _2992 * _3031;
                                float _3056 = _3055 * _3055;
                                float _3062 = ((1.0 - _3056) * dot(vec3(_426, _429, _432), vec3(_2979, _2980, _2981))) + _3056;
                                float _4092 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                                float _3063 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                                float _3064 = 1.0 - _3031;
                                float _3074 = (0.5 / (((_3063 * ((_3046 * _3064) + _3031)) + 9.9999999392252902907785028219223e-09) + (((_3063 * _3064) + _3031) * _3046))) * _3063;
                                float _4103 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3084 = (_3009 * _2986) * (((_3032 * 3.1415927410125732421875) * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) / ((_3054 * _3054) * ((_2999 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3084 * _2865.x;
                                frontier_phi_73_pred_1 = _3084 * _2865.y;
                                frontier_phi_73_pred_2 = _3010 * _2853.z;
                                frontier_phi_73_pred_3 = _3010 * _2853.y;
                                frontier_phi_73_pred_4 = _3010 * _2853.x;
                                frontier_phi_73_pred_5 = _3084 * _2865.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3088 = frontier_phi_73_pred;
                            _3089 = frontier_phi_73_pred_1;
                            _3093 = frontier_phi_73_pred_2;
                            _3092 = frontier_phi_73_pred_3;
                            _3091 = frontier_phi_73_pred_4;
                            _3090 = frontier_phi_73_pred_5;
                            _2795 = _3091 + _2808;
                            _2796 = _3092 + _2809;
                            _2797 = _3093 + _2810;
                            _2792 = _3088 + _2805;
                            _2793 = _3089 + _2806;
                            _2794 = _3090 + _2807;
                            if (_2812 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2812;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2795;
                        frontier_phi_67_pred_1 = _2796;
                        frontier_phi_67_pred_2 = _2797;
                        frontier_phi_67_pred_3 = _2794;
                        frontier_phi_67_pred_4 = _2793;
                        frontier_phi_67_pred_5 = _2792;
                    }
                    _2460 = frontier_phi_67_pred;
                    _2462 = frontier_phi_67_pred_1;
                    _2464 = frontier_phi_67_pred_2;
                    _2458 = frontier_phi_67_pred_3;
                    _2456 = frontier_phi_67_pred_4;
                    _2454 = frontier_phi_67_pred_5;
                    uint _2599 = _2598 + 1u;
                    if (_2599 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2592 = _2454;
                        _2593 = _2456;
                        _2594 = _2458;
                        _2595 = _2460;
                        _2596 = _2462;
                        _2597 = _2464;
                        _2598 = _2599;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2462;
                frontier_phi_55_56_ladder_1 = _2464;
                frontier_phi_55_56_ladder_2 = _2460;
                frontier_phi_55_56_ladder_3 = _2458;
                frontier_phi_55_56_ladder_4 = _2456;
                frontier_phi_55_56_ladder_5 = _2454;
            }
            else
            {
                frontier_phi_55_56_ladder = _2348;
                frontier_phi_55_56_ladder_1 = _2350;
                frontier_phi_55_56_ladder_2 = _2346;
                frontier_phi_55_56_ladder_3 = _2344;
                frontier_phi_55_56_ladder_4 = _2342;
                frontier_phi_55_56_ladder_5 = _2340;
            }
            _2453 = frontier_phi_55_56_ladder_5;
            _2455 = frontier_phi_55_56_ladder_4;
            _2457 = frontier_phi_55_56_ladder_3;
            _2459 = frontier_phi_55_56_ladder_2;
            _2461 = frontier_phi_55_56_ladder;
            _2463 = frontier_phi_55_56_ladder_1;
        }
        float _2468 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
        _2252 = (_2468 * _2459) + _1685;
        _2254 = (_2468 * _2461) + _1687;
        _2256 = (_2468 * _2463) + _1689;
        _2258 = ((_2453 * _471) * _2468) + _2033;
        _2260 = ((_2455 * _473) * _2468) + _2035;
        _2262 = ((_2457 * _474) * _2468) + _2037;
    }
    else
    {
        _2252 = _1685;
        _2254 = _1687;
        _2256 = _1689;
        _2258 = _2033;
        _2260 = _2035;
        _2262 = _2037;
    }
    float _4119 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4130 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4141 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    uint _2282 = _445 + 6u;
    float _2290 = _404 / cbSceneParam._m0[86u].x;
    float _2291 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2305 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2290, _2291, (log2((isnan(cbSceneParam._m0[77u].w) ? _337 : (isnan(_337) ? cbSceneParam._m0[77u].w : min(_337, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2307 = _2305.x;
    float _2308 = _2305.y;
    float _2309 = _2305.z;
    float _2310 = _2305.w;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    if (_337 > cbSceneParam._m0[78u].w)
    {
        float _2365 = isnan(_337) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _337 : min(cbSceneParam._m0[80u].w, _337));
        float _2366 = _2365 / _337;
        float _2377 = _2366 * _389;
        float _2378 = _390 * _2366;
        float _2379 = (-0.0) - _2378;
        float _2381 = _2366 * _391;
        float _2383 = (cbSceneParam._m0[77u].w * _2379) / _2365;
        float _2384 = _2383 + cbSceneParam._m0[79u].w;
        float _2385 = cbSceneParam._m0[79u].w - _2378;
        float _2391 = sqrt(((_2377 * _2377) + (_2378 * _2378)) + (_2381 * _2381));
        float _2394 = (1.0 - (cbSceneParam._m0[77u].w / _2365)) * _2391;
        float _2399 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2401 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2554;
        if (abs((_2379 - _2383) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2554 = ((((_2384 > 0.0) ? exp2(_2399 * _2384) : (2.0 - exp2(_2401 * _2384))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2394;
        }
        else
        {
            float _2514 = 1.0 / cbSceneParam._m0[80u].x;
            float _2515 = isnan(_2385) ? _2384 : (isnan(_2384) ? _2385 : max(_2384, _2385));
            float _2516 = isnan(_2385) ? _2384 : (isnan(_2384) ? _2385 : min(_2384, _2385));
            float _2525 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : min(_2515, 0.0));
            float _2526 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : min(_2516, 0.0));
            _2554 = ((abs(_2391 / _2379) * cbSceneParam._m0[80u].y) * ((((_2525 - _2526) * 2.0) - ((exp2(_2399 * (isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0)))) - exp2(_2399 * (isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0))))) * _2514)) - ((exp2(_2401 * _2525) - exp2(_2401 * _2526)) * _2514))) + (_2394 * cbSceneParam._m0[80u].z);
        }
        vec4 _2556 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2290, _2291, 1.0), 0.0);
        float _2565 = exp2((_2554 * (-1.44269502162933349609375)) * (1.0 - _2556.w));
        float _2566 = log2(_2565);
        float _2582 = log2(_2310);
        _2403 = (exp2(_2582 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2566 * cbSceneParam._m0[78u].x)) * _2556.x) / cbSceneParam._m0[78u].x)) + _2307;
        _2405 = (exp2(_2582 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2566 * cbSceneParam._m0[78u].y)) * _2556.y) / cbSceneParam._m0[78u].y)) + _2308;
        _2407 = (exp2(_2582 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2566 * cbSceneParam._m0[78u].z)) * _2556.z) / cbSceneParam._m0[78u].z)) + _2309;
        _2409 = _2565 * _2310;
    }
    else
    {
        _2403 = _2307;
        _2405 = _2308;
        _2407 = _2309;
        _2409 = _2310;
    }
    float _2421 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2422 = _2421 == 3.0;
    float _2423 = log2(_2409);
    float _2430 = exp2(_2423 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2252 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _486))) + ((_2258 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1296)) * cbPerFrame._m0[3u].x));
    float _2431 = exp2(_2423 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2254 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _486))) + ((_2260 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1296)) * cbPerFrame._m0[3u].x));
    float _2432 = exp2(_2423 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2256 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _486))) + ((_2262 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1296)) * cbPerFrame._m0[3u].x));
    float _2441 = (_2421 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2441 * (_2422 ? _2430 : (_2430 + (cbSceneParam._m0[72u].w * _2403)));
    SV_Target.y = _2441 * (_2422 ? _2431 : (_2431 + (cbSceneParam._m0[72u].w * _2405)));
    SV_Target.z = _2441 * (_2422 ? _2432 : (_2432 + (cbSceneParam._m0[72u].w * _2407)));
    SV_Target.w = cbInstanceData._m0[_2282].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2282].w;
}


