#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D SLOD_LookCamBillboard_SAT_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D SLOD_LookCamBillboard_SAT_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D SLOD_LookCamBillboard_SAT_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D SLOD_LookCamBillboard_SAT_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_2;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _907;
float _3322;
float _3323;
float _3324;
float _3325;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = floor(cbMtdParam._m0[9u].x * TEXCOORD.z) / cbMtdParam._m0[9u].x;
    float _224 = floor(cbMtdParam._m0[9u].x * TEXCOORD.w) / cbMtdParam._m0[9u].x;
    float _3334 = isnan(0.0) ? _223 : (isnan(_223) ? 0.0 : max(_223, 0.0));
    float _3345 = isnan(0.0) ? _224 : (isnan(_224) ? 0.0 : max(_224, 0.0));
    float _230 = (TEXCOORD.x / cbMtdParam._m0[9u].x) + (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0)));
    float _231 = (TEXCOORD.y / cbMtdParam._m0[9u].x) + (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)));
    vec4 _244 = texture(sampler2D(SLOD_LookCamBillboard_SAT_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _230) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _231) + cbTextureTilingScale._m0[3u].w));
    float _247 = _244.x;
    float _248 = _244.y;
    float _249 = _244.z;
    vec4 _261 = texture(sampler2D(SLOD_LookCamBillboard_SAT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * _230) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _231) + cbTextureTilingScale._m0[0u].w));
    float _263 = _261.x;
    float _264 = _261.y;
    float _265 = _263 + _264;
    vec4 _277 = texture(sampler2D(SLOD_LookCamBillboard_SAT_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _230) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _231) + cbTextureTilingScale._m0[1u].w));
    float _279 = _277.x;
    vec4 _291 = texture(sampler2D(SLOD_LookCamBillboard_SAT_snp_0_Texture2D_2, SS_SpecularMap), vec2((cbTextureTilingScale._m0[2u].x * _230) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _231) + cbTextureTilingScale._m0[2u].w));
    float _293 = _291.x;
    float _297 = (_263 * 2.0) + (-1.0);
    float _299 = (_264 * 2.0) + (-1.0);
    float _300 = dot(vec2(_297, _299), vec2(_297, _299));
    float _3356 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _305 = sqrt(1.0 - (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))));
    float _308 = fma(_305, _203 * NORMAL.x, fma(_299, _210 * TANGENT.x, (_196 * _188) * _297));
    float _311 = fma(_305, _203 * NORMAL.y, fma(_299, _210 * TANGENT.y, (_196 * _189) * _297));
    float _314 = fma(_305, _203 * NORMAL.z, fma(_299, _210 * TANGENT.z, (_196 * _190) * _297));
    float _318 = inversesqrt(dot(vec3(_308, _311, _314), vec3(_308, _311, _314)));
    float _319 = _318 * _308;
    float _320 = _318 * _311;
    float _321 = _318 * _314;
    float _3367 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _322 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _3378 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3389 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3400 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3411 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _326 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _342 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _384 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _394 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _384);
    float _395 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _384);
    float _396 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _384);
    float _400 = inversesqrt(dot(vec3(_394, _395, _396), vec3(_394, _395, _396)));
    float _401 = _394 * _400;
    float _402 = _395 * _400;
    float _403 = _396 * _400;
    vec4 _408 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _410 = _408.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _586 = sqrt(((_394 * _394) + (_395 * _395)) + (_396 * _396));
        float _592 = (cbMatDynParam._m0[5u].x * _586) + cbMatDynParam._m0[5u].y;
        float _3422 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        float _593 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _597 = (cbMatDynParam._m0[5u].z * _586) + cbMatDynParam._m0[5u].w;
        float _3433 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) - _593)) + _593) < ((_410 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _422 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _423 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _443 = fma(_321, cbSceneParam._m0[5u].z, fma(_320, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _319));
    float _446 = fma(_321, cbSceneParam._m0[6u].z, fma(_320, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _319));
    float _449 = fma(_321, cbSceneParam._m0[7u].z, fma(_320, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _319));
    uint _462 = uint(roundEven(NORMAL.w)) * 13u;
    uint _464 = _462 + 9u;
    uint _465 = _464 + uint(cbMatDynParam._m0[0u].w);
    float _471 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0)))) * cbInstanceData._m0[_465].x;
    float _472 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) * cbInstanceData._m0[_465].y;
    float _473 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * cbInstanceData._m0[_465].z;
    float _3444 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _3466 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _477 = 1.0 - _326;
    float _478 = _474 * _477;
    float _479 = _475 * _477;
    float _480 = _476 * _477;
    float _485 = (_474 + (-0.039999999105930328369140625)) * _326;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _326;
    float _487 = (_476 + (-0.039999999105930328369140625)) * _326;
    float _488 = _485 + 0.039999999105930328369140625;
    float _490 = _486 + 0.039999999105930328369140625;
    float _491 = _487 + 0.039999999105930328369140625;
    vec4 _500 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _422, cbSceneParam._m0[86u].y * _423));
    float _503 = _500.x * TEXCOORD_2;
    float _504 = dot(vec3(_319, _320, _321), vec3(_401, _402, _403));
    float _507 = _504 * 2.0;
    float _511 = (_507 * _319) - _401;
    float _512 = (_507 * _320) - _402;
    float _513 = (_507 * _321) - _403;
    float _517 = abs(dot(vec3(_401, _402, _403), vec3(_319, _320, _321)));
    float _3477 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _519 = sqrt(_322);
    float _532 = exp2((_519 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_519 * 3.0));
    float _538 = (1.0 - _532) * ((_519 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _539 = _532 * _519;
    float _567 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _571 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _575 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _906;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _631 = fma(_575, cbModelParam._m0[26u].z, fma(_571, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _567));
        float _635 = fma(_575, cbModelParam._m0[27u].z, fma(_571, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _567));
        float _639 = fma(_575, cbModelParam._m0[28u].z, fma(_571, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _567));
        float _664 = _567 + _319;
        float _665 = _571 + _320;
        float _666 = _575 + _321;
        float _676 = fma(_666, cbModelParam._m0[26u].z, fma(_665, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664)) - _631;
        float _677 = fma(_666, cbModelParam._m0[27u].z, fma(_665, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664)) - _635;
        float _678 = fma(_666, cbModelParam._m0[28u].z, fma(_665, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664)) - _639;
        float _682 = inversesqrt(dot(vec3(_676, _677, _678), vec3(_676, _677, _678)));
        float _695 = ((_682 * _676) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_631 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _696 = ((_682 * _677) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_635 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _697 = ((_682 * _678) / cbModelParam._m0[34u].z) + ((((((_639 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        float _734 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_700.x + (-0.5));
        float _736 = _734 * (_700.y + (-0.5));
        float _737 = _734 * (_700.z + (-0.5));
        float _744 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_707.x + (-0.5));
        float _746 = _744 * (_707.y + (-0.5));
        float _747 = _744 * (_707.z + (-0.5));
        float _754 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_714.x + (-0.5));
        float _756 = _754 * (_714.y + (-0.5));
        float _757 = _754 * (_714.z + (-0.5));
        float _764 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_721.x + (-0.5));
        float _766 = _764 * (_721.y + (-0.5));
        float _767 = _764 * (_721.z + (-0.5));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = _735 * 0.5;
        float _772 = _745 * 0.5;
        float _773 = _755 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _788 = (dot(vec3(_319, _320, _321), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _798 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3525 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_800 + 1.0))) + _805) * _768;
        float _815 = _736 * 0.5;
        float _816 = _746 * 0.5;
        float _817 = _756 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_319, _320, _321), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3558 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_842 + 1.0))) + _847) * _769;
        float _857 = _737 * 0.5;
        float _858 = _747 * 0.5;
        float _859 = _757 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _873 = (dot(vec3(_319, _320, _321), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _882 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3591 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_884 + 1.0))) + _889) * _770;
        _906 = _737;
        _908 = _736;
        _909 = _735;
        _910 = _747;
        _911 = _746;
        _912 = _745;
        _913 = _757;
        _914 = _756;
        _915 = _755;
        _916 = _770;
        _917 = _769;
        _918 = _768;
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
    }
    else
    {
        _906 = _907;
        _908 = _907;
        _909 = _907;
        _910 = _907;
        _911 = _907;
        _912 = _907;
        _913 = _907;
        _914 = _907;
        _915 = _907;
        _916 = _907;
        _917 = _907;
        _918 = _907;
        _919 = 0.0;
        _920 = 0.0;
        _921 = 0.0;
    }
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _950 = fma(_575, cbModelParam._m0[30u].z, fma(_571, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _567));
        float _954 = fma(_575, cbModelParam._m0[31u].z, fma(_571, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _567));
        float _958 = fma(_575, cbModelParam._m0[32u].z, fma(_571, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _567));
        float _981 = _567 + _319;
        float _982 = _571 + _320;
        float _983 = _575 + _321;
        float _993 = fma(_983, cbModelParam._m0[30u].z, fma(_982, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _981)) - _950;
        float _994 = fma(_983, cbModelParam._m0[31u].z, fma(_982, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _981)) - _954;
        float _995 = fma(_983, cbModelParam._m0[32u].z, fma(_982, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _981)) - _958;
        float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
        float _1012 = ((_999 * _993) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_950 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_999 * _994) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_954 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_999 * _995) / cbModelParam._m0[35u].z) + ((((((_958 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        float _1049 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1016.x + (-0.5));
        float _1051 = _1049 * (_1016.y + (-0.5));
        float _1052 = _1049 * (_1016.z + (-0.5));
        float _1059 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1023.x + (-0.5));
        float _1061 = _1059 * (_1023.y + (-0.5));
        float _1062 = _1059 * (_1023.z + (-0.5));
        float _1069 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1030.x + (-0.5));
        float _1071 = _1069 * (_1030.y + (-0.5));
        float _1072 = _1069 * (_1030.z + (-0.5));
        float _1079 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1037.x + (-0.5));
        float _1081 = _1079 * (_1037.y + (-0.5));
        float _1082 = _1079 * (_1037.z + (-0.5));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = _1050 * 0.5;
        float _1087 = _1060 * 0.5;
        float _1088 = _1070 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_319, _320, _321), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3654 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1113 + 1.0))) + _1118) * _1083;
        float _1128 = _1051 * 0.5;
        float _1129 = _1061 * 0.5;
        float _1130 = _1071 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_319, _320, _321), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3687 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1155 + 1.0))) + _1160) * _1084;
        float _1170 = _1052 * 0.5;
        float _1171 = _1062 * 0.5;
        float _1172 = _1072 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_319, _320, _321), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3720 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1197 + 1.0))) + _1202) * _1085;
        _1219 = _1052;
        _1220 = _1051;
        _1221 = _1050;
        _1222 = _1062;
        _1223 = _1061;
        _1224 = _1060;
        _1225 = _1072;
        _1226 = _1071;
        _1227 = _1070;
        _1228 = _1085;
        _1229 = _1084;
        _1230 = _1083;
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
    }
    else
    {
        _1219 = _907;
        _1220 = _907;
        _1221 = _907;
        _1222 = _907;
        _1223 = _907;
        _1224 = _907;
        _1225 = _907;
        _1226 = _907;
        _1227 = _907;
        _1228 = _907;
        _1229 = _907;
        _1230 = _907;
        _1231 = 0.0;
        _1232 = 0.0;
        _1233 = 0.0;
    }
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _919)) + _919;
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _920)) + _920;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _921)) + _921;
    float _1266 = fma(_1245, cbSceneParam._m0[89u].z, fma(_1244, cbSceneParam._m0[89u].y, _1243 * cbSceneParam._m0[89u].x));
    float _1269 = fma(_1245, cbSceneParam._m0[90u].z, fma(_1244, cbSceneParam._m0[90u].y, _1243 * cbSceneParam._m0[90u].x));
    float _1272 = fma(_1245, cbSceneParam._m0[91u].z, fma(_1244, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1243));
    float _1287 = _511 * 0.5;
    float _1288 = _512 * 0.5;
    float _1289 = _513 * 0.5;
    float _1290 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1293 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1296 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1330;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1303 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_906, _910, _913, _916));
        float _1307 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_908, _911, _914, _917));
        float _1311 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_909, _912, _915, _918));
        float _1318 = dot(vec4(cbModelParam._m0[39u]), vec4(_1287, _1288, _1289, 1.0));
        _1330 = dot(vec3(isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1318) ? 0.0 : (isnan(0.0) ? _1318 : max(0.0, _1318))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1330 = 1.0;
    }
    float _1341;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1332 = dot(vec4(cbModelParam._m0[40u]), vec4(_1287, _1288, _1289, 1.0));
        _1341 = dot(vec3(isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1332) ? 0.0 : (isnan(0.0) ? _1332 : max(0.0, _1332))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1341 = 1.0;
    }
    float _1345 = (_1341 * cbModelParam._m0[1u].x) + (_1330 * (1.0 - cbModelParam._m0[1u].x));
    float _1355 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _322);
    float _1356 = isnan(_1355) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1355 : min(cbModelParam._m0[25u].z, _1355));
    float _1438;
    float _1440;
    float _1442;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1405 = fma(_575, cbModelParam._m0[13u].z, fma(_571, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _567)) + cbModelParam._m0[13u].w;
        float _1409 = fma(_575, cbModelParam._m0[14u].z, fma(_571, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _567)) + cbModelParam._m0[14u].w;
        float _1413 = fma(_575, cbModelParam._m0[15u].z, fma(_571, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _567)) + cbModelParam._m0[15u].w;
        float _1416 = fma(_513, cbModelParam._m0[13u].z, fma(_512, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _511));
        float _1419 = fma(_513, cbModelParam._m0[14u].z, fma(_512, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _511));
        float _1422 = fma(_513, cbModelParam._m0[15u].z, fma(_512, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _511));
        float _1450;
        if (_1416 > 0.0)
        {
            _1450 = abs((1.0 - _1405) / _1416);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1405 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1450 = frontier_phi_17_15_ladder;
        }
        float _1679;
        if (_1419 > 0.0)
        {
            _1679 = abs((1.0 - _1409) / _1419);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1409 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1679 = frontier_phi_26_22_ladder;
        }
        float _1936;
        if (_1422 > 0.0)
        {
            _1936 = abs((1.0 - _1413) / _1422);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1413 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1936 = frontier_phi_38_33_ladder;
        }
        float _1938 = isnan(_1679) ? _1450 : (isnan(_1450) ? _1679 : min(_1450, _1679));
        float _1939 = isnan(_1936) ? _1938 : (isnan(_1938) ? _1936 : min(_1938, _1936));
        float _1943 = (_1939 * _1416) + _1405;
        float _1944 = (_1939 * _1419) + _1409;
        float _1945 = (_1939 * _1422) + _1413;
        float _1946 = _1939 * 9.9999997473787516355514526367188e-05;
        float _1948 = (-1.0) - _1946;
        float _1950 = _1946 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1945 > _1950) || ((_1945 < _1948) || ((_1944 > _1950) || ((_1944 < _1948) || ((_1943 < _1948) || (_1943 > _1950))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2073 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1945, cbModelParam._m0[9u].z, fma(_1944, cbModelParam._m0[9u].y, _1943 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1945, cbModelParam._m0[10u].z, fma(_1944, cbModelParam._m0[10u].y, _1943 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1945, cbModelParam._m0[11u].z, fma(_1944, cbModelParam._m0[11u].y, _1943 * cbModelParam._m0[11u].x))), _1356);
            frontier_phi_16_38_ladder = _2073.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2073.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2073.x * cbModelParam._m0[1u].y;
        }
        _1438 = frontier_phi_16_38_ladder_2;
        _1440 = frontier_phi_16_38_ladder_1;
        _1442 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_511, _512, _513), _1356);
        _1438 = _1426.x * cbModelParam._m0[1u].y;
        _1440 = _1426.y * cbModelParam._m0[1u].y;
        _1442 = _1426.z * cbModelParam._m0[1u].y;
    }
    float _1446 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _322);
    float _1447 = isnan(_1446) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1446 : min(cbModelParam._m0[25u].w, _1446));
    float _1540;
    float _1542;
    float _1544;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1504 = fma(_575, cbModelParam._m0[21u].z, fma(_571, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _567)) + cbModelParam._m0[21u].w;
        float _1508 = fma(_575, cbModelParam._m0[22u].z, fma(_571, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _567)) + cbModelParam._m0[22u].w;
        float _1512 = fma(_575, cbModelParam._m0[23u].z, fma(_571, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _567)) + cbModelParam._m0[23u].w;
        float _1515 = fma(_513, cbModelParam._m0[21u].z, fma(_512, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _511));
        float _1518 = fma(_513, cbModelParam._m0[22u].z, fma(_512, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _511));
        float _1521 = fma(_513, cbModelParam._m0[23u].z, fma(_512, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _511));
        float _1684;
        if (_1515 > 0.0)
        {
            _1684 = abs((1.0 - _1504) / _1515);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1504 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1684 = frontier_phi_28_24_ladder;
        }
        float _1963;
        if (_1518 > 0.0)
        {
            _1963 = abs((1.0 - _1508) / _1518);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1508 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1963 = frontier_phi_40_35_ladder;
        }
        float _2176;
        if (_1521 > 0.0)
        {
            _2176 = abs((1.0 - _1512) / _1521);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1512 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2176 = frontier_phi_49_46_ladder;
        }
        float _2178 = isnan(_1963) ? _1684 : (isnan(_1684) ? _1963 : min(_1684, _1963));
        float _2179 = isnan(_2176) ? _2178 : (isnan(_2178) ? _2176 : min(_2178, _2176));
        float _2183 = (_2179 * _1515) + _1504;
        float _2184 = (_2179 * _1518) + _1508;
        float _2185 = (_2179 * _1521) + _1512;
        float _2186 = _2179 * 9.9999997473787516355514526367188e-05;
        float _2187 = (-1.0) - _2186;
        float _2189 = _2186 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2185 > _2189) || ((_2185 < _2187) || ((_2184 > _2189) || ((_2184 < _2187) || ((_2183 < _2187) || (_2183 > _2189))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2384 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2185, cbModelParam._m0[17u].z, fma(_2184, cbModelParam._m0[17u].y, _2183 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2185, cbModelParam._m0[18u].z, fma(_2184, cbModelParam._m0[18u].y, _2183 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2185, cbModelParam._m0[19u].z, fma(_2184, cbModelParam._m0[19u].y, _2183 * cbModelParam._m0[19u].x))), _1447);
            frontier_phi_25_49_ladder = _2384.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2384.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2384.x * cbModelParam._m0[1u].z;
        }
        _1540 = frontier_phi_25_49_ladder_2;
        _1542 = frontier_phi_25_49_ladder_1;
        _1544 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1524 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_511, _512, _513), _1447);
        _1540 = _1524.x * cbModelParam._m0[1u].z;
        _1542 = _1524.y * cbModelParam._m0[1u].z;
        _1544 = _1524.z * cbModelParam._m0[1u].z;
    }
    float _1557 = (((_538 * _488) + _539) * _503) * ((cbModelParam._m0[1u].w * (_1540 - _1438)) + _1438);
    float _1559 = (((_538 * _490) + _539) * _503) * ((cbModelParam._m0[1u].w * (_1542 - _1440)) + _1440);
    float _1561 = (((_538 * _491) + _539) * _503) * ((cbModelParam._m0[1u].w * (_1544 - _1442)) + _1442);
    float _1564 = fma(_1561, cbSceneParam._m0[89u].z, fma(_1559, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1561, cbSceneParam._m0[90u].z, fma(_1559, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1561, cbSceneParam._m0[91u].z, fma(_1559, cbSceneParam._m0[91u].y, _1557 * cbSceneParam._m0[91u].x));
    vec4 _1578 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_422, _423));
    float _1580 = _1578.w;
    float _1592 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1580);
    float _1593 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1580);
    float _1594 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1580);
    uvec4 _1598 = floatBitsToUint(cbInstanceData._m0[_462 + 5u]);
    uint _1600 = _1598.x * 14u;
    uint _1601 = _1600 + 13u;
    float _1608 = _503 + (-1.0);
    float _1613 = (cbLight._m0[_1601].x * _1608) + 1.0;
    float _1614 = (cbLight._m0[_1601].y * _1608) + 1.0;
    float _1615 = (cbLight._m0[_1601].z * _1608) + 1.0;
    float _1616 = (cbLight._m0[_1601].w * _1608) + 1.0;
    uint _1617 = _1600 + 5u;
    float _1623 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
    uint _1627 = _1600 + 4u;
    float _1637 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1641 = _1600 | 1u;
    float _1652 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_319, _320, _321));
    float _1655 = dot(vec3(cbLight._m0[_1641].xyz), vec3(_319, _320, _321));
    float _3856 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
    float _3867 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _1660 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.3183098733425140380859375;
    float _1662 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * 0.3183098733425140380859375;
    float _1669 = ((cbLight._m0[_1617].x * _1623) * _1662) + (((cbLight._m0[_1627].x * _1592) * _1637) * _1660);
    float _1670 = ((_1623 * cbLight._m0[_1617].y) * _1662) + (((cbLight._m0[_1627].y * _1593) * _1637) * _1660);
    float _1671 = ((_1623 * cbLight._m0[_1617].z) * _1662) + (((cbLight._m0[_1627].z * _1594) * _1637) * _1660);
    uvec4 _1676 = floatBitsToUint(cbLight._m0[_1600 + 12u]);
    bool _1678 = _1676.x == 0u;
    float _1689;
    float _1691;
    float _1693;
    if (_1678)
    {
        _1689 = _1669;
        _1691 = _1670;
        _1693 = _1671;
    }
    else
    {
        uint _1697 = _1600 + 6u;
        float _1713 = (dot(vec3(cbLight._m0[_1600 + 2u].xyz), vec3(_319, _320, _321)) * 0.5) + 0.5;
        float _1714 = _1713 * _1713;
        float _3878 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1716 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1689 = (((cbLight._m0[_1697].x * 0.3183098733425140380859375) * _1715) * _1716) + _1669;
        _1691 = (((cbLight._m0[_1697].y * 0.3183098733425140380859375) * _1715) * _1716) + _1670;
        _1693 = (((cbLight._m0[_1697].z * 0.3183098733425140380859375) * _1715) * _1716) + _1671;
    }
    bool _1696 = _1676.y == 0u;
    float _1734;
    float _1736;
    float _1738;
    if (_1696)
    {
        _1734 = _1689;
        _1736 = _1691;
        _1738 = _1693;
    }
    else
    {
        uint _1907 = _1600 + 7u;
        float _1923 = (dot(vec3(cbLight._m0[_1600 + 3u].xyz), vec3(_319, _320, _321)) * 0.5) + 0.5;
        float _1924 = _1923 * _1923;
        float _3894 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1925 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1926 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1734 = (((cbLight._m0[_1907].x * 0.3183098733425140380859375) * _1925) * _1926) + _1689;
        _1736 = (((cbLight._m0[_1907].y * 0.3183098733425140380859375) * _1925) * _1926) + _1691;
        _1738 = (((cbLight._m0[_1907].z * 0.3183098733425140380859375) * _1925) * _1926) + _1693;
    }
    uint _1741 = _1600 + 8u;
    float _1754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1600].w)) * _322) * 0.949999988079071044921875);
    float _1755 = _1754 * _1754;
    float _1756 = cbLight._m0[_1600].x + _401;
    float _1757 = cbLight._m0[_1600].y + _402;
    float _1758 = cbLight._m0[_1600].z + _403;
    float _1762 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
    float _1763 = _1762 * _1756;
    float _1764 = _1762 * _1757;
    float _1765 = _1762 * _1758;
    float _1766 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1600].xyz));
    float _3910 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _1770 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1771 = dot(vec3(_319, _320, _321), vec3(_1763, _1764, _1765));
    float _3932 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _1775 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_1763, _1764, _1765));
    float _3943 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1779 = _1755 * _1755;
    float _1783 = ((_1774 * _1774) * (_1779 + (-1.0))) + 1.0;
    float _1791 = exp2(log2(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * 5.0);
    float _1792 = 0.959999978542327880859375 - _485;
    float _1794 = 0.959999978542327880859375 - _486;
    float _1795 = 0.959999978542327880859375 - _487;
    float _1802 = 1.0 - _1755;
    float _1813 = (0.5 / (((_1770 * ((_1769 * _1802) + _1755)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1802) + _1755) * _1769))) * _1769;
    float _3954 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1815 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1779 / ((_1783 * _1783) * 3.141590118408203125));
    uint _1829 = _1600 + 9u;
    float _1840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1641].w)) * _322) * 0.949999988079071044921875);
    float _1841 = _1840 * _1840;
    float _1842 = cbLight._m0[_1641].x + _401;
    float _1843 = cbLight._m0[_1641].y + _402;
    float _1844 = cbLight._m0[_1641].z + _403;
    float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
    float _1849 = _1848 * _1842;
    float _1850 = _1848 * _1843;
    float _1851 = _1848 * _1844;
    float _1852 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1641].xyz));
    float _3965 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1856 = dot(vec3(_319, _320, _321), vec3(_1849, _1850, _1851));
    float _3976 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1860 = dot(vec3(cbLight._m0[_1641].xyz), vec3(_1849, _1850, _1851));
    float _3987 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1864 = _1841 * _1841;
    float _1868 = ((_1859 * _1859) * (_1864 + (-1.0))) + 1.0;
    float _1875 = exp2(log2(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * 5.0);
    float _1882 = 1.0 - _1841;
    float _1892 = (0.5 / (((_1770 * ((_1855 * _1882) + _1841)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1882) + _1841) * _1855))) * _1855;
    float _3998 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1894 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1864 / ((_1868 * _1868) * 3.141590118408203125));
    float _1904 = (((((_1875 * _1792) + _488) * cbLight._m0[_1829].x) * _1894) * _1623) + ((((cbLight._m0[_1741].x * _1592) * ((_1791 * _1792) + _488)) * _1815) * _1637);
    float _1905 = (((((_1875 * _1794) + _490) * cbLight._m0[_1829].y) * _1894) * _1623) + ((((cbLight._m0[_1741].y * _1593) * ((_1791 * _1794) + _490)) * _1815) * _1637);
    float _1906 = (((((_1875 * _1795) + _491) * cbLight._m0[_1829].z) * _1894) * _1623) + ((((cbLight._m0[_1741].z * _1594) * ((_1791 * _1795) + _491)) * _1815) * _1637);
    float _1968;
    float _1970;
    float _1972;
    if (_1678)
    {
        _1968 = _1904;
        _1970 = _1905;
        _1972 = _1906;
    }
    else
    {
        uint _1974 = _1600 + 2u;
        uint _1978 = _1600 + 10u;
        float _1992 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1974].w)) * _322) * 0.949999988079071044921875);
        float _1993 = _1992 * _1992;
        float _1994 = cbLight._m0[_1974].x + _401;
        float _1995 = cbLight._m0[_1974].y + _402;
        float _1996 = cbLight._m0[_1974].z + _403;
        float _2000 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
        float _2001 = _2000 * _1994;
        float _2002 = _2000 * _1995;
        float _2003 = _2000 * _1996;
        float _2004 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1974].xyz));
        float _4009 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2007 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _2008 = dot(vec3(_319, _320, _321), vec3(_2001, _2002, _2003));
        float _4020 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2011 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _2012 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_2001, _2002, _2003));
        float _4031 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2016 = _1993 * _1993;
        float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
        float _2027 = exp2(log2(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * 5.0);
        float _2034 = 1.0 - _1993;
        float _2044 = (0.5 / (((_1770 * ((_2007 * _2034) + _1993)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _2034) + _1993) * _2007))) * _2007;
        float _4042 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2046 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
        float _2047 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1968 = (((((_2027 * _1792) + _488) * cbLight._m0[_1978].x) * _2046) * _2047) + _1904;
        _1970 = (((((_2027 * _1794) + _490) * cbLight._m0[_1978].y) * _2046) * _2047) + _1905;
        _1972 = (((((_2027 * _1795) + _491) * cbLight._m0[_1978].z) * _2046) * _2047) + _1906;
    }
    float _2082;
    float _2084;
    float _2086;
    if (_1696)
    {
        _2082 = _1968;
        _2084 = _1970;
        _2086 = _1972;
    }
    else
    {
        uint _2093 = _1600 + 3u;
        uint _2097 = _1600 + 11u;
        float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _322) * 0.949999988079071044921875);
        float _2112 = _2111 * _2111;
        float _2113 = cbLight._m0[_2093].x + _401;
        float _2114 = cbLight._m0[_2093].y + _402;
        float _2115 = cbLight._m0[_2093].z + _403;
        float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
        float _2120 = _2119 * _2113;
        float _2121 = _2119 * _2114;
        float _2122 = _2119 * _2115;
        float _2123 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_2093].xyz));
        float _4058 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2127 = dot(vec3(_319, _320, _321), vec3(_2120, _2121, _2122));
        float _4069 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2131 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2120, _2121, _2122));
        float _4080 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2135 = _2112 * _2112;
        float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
        float _2146 = exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0);
        float _2153 = 1.0 - _2112;
        float _2163 = (0.5 / (((_1770 * ((_2126 * _2153) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _2153) + _2112) * _2126))) * _2126;
        float _4091 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2165 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
        float _2166 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _2082 = (((((_2146 * _1792) + _488) * cbLight._m0[_2097].x) * _2165) * _2166) + _1968;
        _2084 = (((((_2146 * _1794) + _490) * cbLight._m0[_2097].y) * _2165) * _2166) + _1970;
        _2086 = (((((_2146 * _1795) + _491) * cbLight._m0[_2097].z) * _2165) * _2166) + _1972;
    }
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    if (_1598.y == 0u)
    {
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2241;
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2241;
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2241;
        uvec4 _2256 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2257 = _2256.x;
        uint _2268 = uint((float(_2256.y) * floor(float(uint(cbSceneParam._m0[85u].y * _423) / _2257))) + floor(float(uint(cbSceneParam._m0[85u].x * _422) / _2257)));
        float _2278 = (log2(_2244 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2279 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        uint _2282 = uint(isnan(14.0) ? _2279 : (isnan(_2279) ? 14.0 : min(_2279, 14.0)));
        uvec4 _2287 = texelFetch(g_lightClusterGridBuffer, int(((_2282 << 2u) + (_2268 << 6u)) >> 2u));
        uint _2288 = _2287.x;
        uint _2289 = _2256.z;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        if (((((1u << ((_2289 >> 4u) & 15u)) + 4294967295u) & _2288) == 0u) || ((_2289 & 240u) == 0u))
        {
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
            _2399 = 0.0;
        }
        else
        {
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2400;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            uint _2548 = 0u;
            uint _2557;
            bool _2558;
            for (;;)
            {
                _2557 = texelFetch(g_lightClassification, int((((_2282 << 5u) + (_2268 << 9u)) + (_2548 << 2u)) >> 2u)).x;
                _2558 = _2557 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2558)
                {
                    frontier_phi_66_pred = _2542;
                    frontier_phi_66_pred_1 = _2547;
                    frontier_phi_66_pred_2 = _2546;
                    frontier_phi_66_pred_3 = _2545;
                    frontier_phi_66_pred_4 = _2544;
                    frontier_phi_66_pred_5 = _2543;
                }
                else
                {
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    uint _2693;
                    _2687 = _2542;
                    _2688 = _2543;
                    _2689 = _2544;
                    _2690 = _2545;
                    _2691 = _2546;
                    _2692 = _2547;
                    _2693 = _2557;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    for (;;)
                    {
                        uint _2697 = uint(findLSB(_2693)) + (_2548 << 5u);
                        uint _2694 = (_2693 + 4294967295u) & _2693;
                        uint _2699 = _2697 * 48u;
                        vec4 _2713 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 3u)).x));
                        uint _2719 = (_2697 * 48u) + 4u;
                        vec4 _2732 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 3u)).x));
                        uint _2738 = (_2697 * 48u) + 8u;
                        vec3 _2749 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x));
                        float _2753 = _2713.x - _2242;
                        float _2754 = _2713.y - _2243;
                        float _2755 = _2713.z - _2244;
                        float _2756 = dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755));
                        float _2759 = inversesqrt(_2756);
                        float _2760 = _2759 * _2753;
                        float _2761 = _2759 * _2754;
                        float _2762 = _2759 * _2755;
                        float _2763 = dot(vec3(_443, _446, _449), vec3(_2760, _2761, _2762));
                        float _2768 = 1.0 - (_2756 * _2713.w);
                        float _4117 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2769 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                        float _2770 = sqrt(_2756) * _2732.w;
                        float _2773 = 1.39999997615814208984375 / (_2770 + 1.39999997615814208984375);
                        float _2774 = _2773 * _2773;
                        float _2777 = ((1.0 - _2774) * _2763) + _2774;
                        float _2780 = _2770 * _2770;
                        float _2784 = ((isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0))) * _2769) / ((_2780 * 0.699999988079071044921875) + 1.0);
                        float _2788 = (-0.0) - _2242;
                        float _2789 = (-0.0) - _2243;
                        float _2790 = (-0.0) - _2244;
                        float _2794 = inversesqrt(dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790)));
                        float _2795 = _2794 * _2788;
                        float _2796 = _2794 * _2789;
                        float _2797 = _2794 * _2790;
                        float _2805 = exp2(log2(1.0 / ((_2780 * 3.5) + 5.0)) * 0.25);
                        float _2806 = 1.0 - _519;
                        float _2813 = sqrt(1.0 - ((1.0 - (_2806 * _2806)) * (1.0 - (_2805 * _2805))));
                        float _2814 = _2813 * _2813;
                        float _2815 = _2814 * _2814;
                        float _2816 = _2795 + _2760;
                        float _2817 = _2796 + _2761;
                        float _2818 = _2797 + _2762;
                        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
                        float _2826 = dot(vec3(_443, _446, _449), vec3(_2795, _2796, _2797));
                        float _4133 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2829 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2830 = dot(vec3(_443, _446, _449), vec3(_2822 * _2816, _2822 * _2817, _2822 * _2818));
                        float _4144 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2833 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2837 = ((_2833 * _2833) * (_2815 + (-1.0))) + 1.0;
                        float _2838 = _2773 * _2814;
                        float _2839 = _2838 * _2838;
                        float _2842 = ((1.0 - _2839) * _2763) + _2839;
                        float _4155 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2843 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2844 = 1.0 - _2814;
                        float _2854 = (0.5 / (((_2843 * ((_2829 * _2844) + _2814)) + 9.9999999392252902907785028219223e-09) + (((_2843 * _2844) + _2814) * _2829))) * _2843;
                        float _4166 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2865 = (((_2815 * 3.1415927410125732421875) * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) / ((_2837 * _2837) * ((_2780 * 2.1991131305694580078125) + 3.141590118408203125))) * _2769;
                        _2617 = (_2784 * _2732.x) + _2690;
                        _2618 = (_2784 * _2732.y) + _2691;
                        _2619 = (_2784 * _2732.z) + _2692;
                        _2614 = (_2865 * _2749.x) + _2687;
                        _2615 = (_2865 * _2749.y) + _2688;
                        _2616 = (_2865 * _2749.z) + _2689;
                        if (_2694 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2687 = _2614;
                            _2688 = _2615;
                            _2689 = _2616;
                            _2690 = _2617;
                            _2691 = _2618;
                            _2692 = _2619;
                            _2693 = _2694;
                        }
                    }
                    frontier_phi_66_pred = _2614;
                    frontier_phi_66_pred_1 = _2619;
                    frontier_phi_66_pred_2 = _2618;
                    frontier_phi_66_pred_3 = _2617;
                    frontier_phi_66_pred_4 = _2616;
                    frontier_phi_66_pred_5 = _2615;
                }
                _2390 = frontier_phi_66_pred;
                _2400 = frontier_phi_66_pred_1;
                _2398 = frontier_phi_66_pred_2;
                _2396 = frontier_phi_66_pred_3;
                _2394 = frontier_phi_66_pred_4;
                _2392 = frontier_phi_66_pred_5;
                uint _2549 = _2548 + 1u;
                if (_2549 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2542 = _2390;
                    _2543 = _2392;
                    _2544 = _2394;
                    _2545 = _2396;
                    _2546 = _2398;
                    _2547 = _2400;
                    _2548 = _2549;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
            _2399 = _2400;
        }
        uvec4 _2403 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2404 = _2403.z;
        uint _2406 = (_2404 >> 8u) & 15u;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        if (((4294967295u << _2406) & _2288) == 0u)
        {
            _2510 = _2389;
            _2512 = _2391;
            _2514 = _2393;
            _2516 = _2395;
            _2518 = _2397;
            _2520 = _2399;
        }
        else
        {
            float _2535 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
            float _2536 = _2535 * _2242;
            float _2537 = _2535 * _2243;
            float _2538 = _2535 * _2244;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2406 < ((_2404 >> 12u) & 15u))
            {
                float _2511;
                float _2513;
                float _2515;
                float _2517;
                float _2519;
                float _2521;
                float _2670 = _2389;
                float _2671 = _2391;
                float _2672 = _2393;
                float _2673 = _2395;
                float _2674 = _2397;
                float _2675 = _2399;
                uint _2676 = _2406;
                uint _2685;
                bool _2686;
                for (;;)
                {
                    _2685 = texelFetch(g_lightClassification, int((((_2282 << 5u) + (_2268 << 9u)) + (_2676 << 2u)) >> 2u)).x;
                    _2686 = _2685 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2686)
                    {
                        frontier_phi_77_pred = _2675;
                        frontier_phi_77_pred_1 = _2674;
                        frontier_phi_77_pred_2 = _2673;
                        frontier_phi_77_pred_3 = _2672;
                        frontier_phi_77_pred_4 = _2671;
                        frontier_phi_77_pred_5 = _2670;
                    }
                    else
                    {
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _2892 = _2670;
                        float _2893 = _2671;
                        float _2894 = _2672;
                        float _2895 = _2673;
                        float _2896 = _2674;
                        float _2897 = _2675;
                        uint _2898 = _2685;
                        uint _2899;
                        vec4 _2924;
                        float _2925;
                        vec4 _2940;
                        vec3 _2952;
                        vec4 _2968;
                        vec4 _2984;
                        float _3031;
                        bool _3032;
                        for (;;)
                        {
                            uint _2909 = ((_2676 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2898));
                            _2899 = (_2898 + 4294967295u) & _2898;
                            uint _2911 = _2909 * 40u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            _2925 = _2924.w;
                            uint _2927 = (_2909 * 40u) + 4u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2942 = (_2909 * 40u) + 8u;
                            _2952 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x));
                            uint _2955 = (_2909 * 40u) + 16u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2971 = (_2909 * 40u) + 20u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2987 = (_2909 * 40u) + 24u;
                            vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3006 = (_2909 * 40u) + 28u;
                            vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            _3031 = fma(_2244, _3019.z, fma(_2243, _3019.y, _3019.x * _2242)) + _3019.w;
                            _3032 = !((fma(_2244, _3000.z, fma(_2243, _3000.y, _3000.x * _2242)) + _3000.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3032)
                            {
                                float _3059 = _2924.x - _2242;
                                float _3060 = _2924.y - _2243;
                                float _3061 = _2924.z - _2244;
                                float _3062 = dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061));
                                float _3065 = inversesqrt(_3062);
                                float _3066 = _3065 * _3059;
                                float _3067 = _3065 * _3060;
                                float _3068 = _3065 * _3061;
                                float _3072 = 1.0 - (_3062 / (_2925 * _2925));
                                float _4177 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3077 = sqrt(_3062) * _2940.w;
                                float _3079 = 1.39999997615814208984375 / (_3077 + 1.39999997615814208984375);
                                float _3080 = _3079 * _3079;
                                float _3083 = ((1.0 - _3080) * dot(vec3(_3066, _3067, _3068), vec3(_443, _446, _449))) + _3080;
                                float _3086 = _3077 * _3077;
                                float _3090 = (fma(_2244, _2968.z, fma(_2243, _2968.y, _2968.x * _2242)) + _2968.w) / _3031;
                                float _3091 = (fma(_2244, _2984.z, fma(_2243, _2984.y, _2984.x * _2242)) + _2984.w) / _3031;
                                float _3095 = 1.0 - dot(vec2(_3090, _3091), vec2(_3090, _3091));
                                float _4193 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3097 = _3096 * (((isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))) * _3073) / ((_3086 * 0.699999988079071044921875) + 1.0));
                                float _3109 = exp2(log2(1.0 / ((_3086 * 3.5) + 5.0)) * 0.25);
                                float _3110 = 1.0 - _519;
                                float _3117 = sqrt(1.0 - ((1.0 - (_3110 * _3110)) * (1.0 - (_3109 * _3109))));
                                float _3118 = _3117 * _3117;
                                float _3119 = _3118 * _3118;
                                float _3120 = _3066 - _2536;
                                float _3121 = _3067 - _2537;
                                float _3122 = _3068 - _2538;
                                float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
                                float _3130 = dot(vec3(_443, _446, _449), vec3((-0.0) - _2536, (-0.0) - _2537, (-0.0) - _2538));
                                float _4204 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3133 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3134 = dot(vec3(_443, _446, _449), vec3(_3126 * _3120, _3126 * _3121, _3126 * _3122));
                                float _4215 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3137 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3141 = ((_3137 * _3137) * (_3119 + (-1.0))) + 1.0;
                                float _3142 = _3079 * _3118;
                                float _3143 = _3142 * _3142;
                                float _3149 = ((1.0 - _3143) * dot(vec3(_443, _446, _449), vec3(_3066, _3067, _3068))) + _3143;
                                float _4226 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3151 = 1.0 - _3118;
                                float _3161 = (0.5 / (((_3150 * ((_3133 * _3151) + _3118)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3118) * _3133))) * _3150;
                                float _4237 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3171 = (_3096 * _3073) * (((_3119 * 3.1415927410125732421875) * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) / ((_3141 * _3141) * ((_3086 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3097 * _2940.y;
                                frontier_phi_83_pred_1 = _3097 * _2940.x;
                                frontier_phi_83_pred_2 = _3171 * _2952.z;
                                frontier_phi_83_pred_3 = _3171 * _2952.y;
                                frontier_phi_83_pred_4 = _3171 * _2952.x;
                                frontier_phi_83_pred_5 = _3097 * _2940.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3179 = frontier_phi_83_pred;
                            _3178 = frontier_phi_83_pred_1;
                            _3177 = frontier_phi_83_pred_2;
                            _3176 = frontier_phi_83_pred_3;
                            _3175 = frontier_phi_83_pred_4;
                            _3180 = frontier_phi_83_pred_5;
                            _2882 = _3178 + _2895;
                            _2883 = _3179 + _2896;
                            _2884 = _3180 + _2897;
                            _2879 = _3175 + _2892;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            if (_2899 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2899;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2884;
                        frontier_phi_77_pred_1 = _2883;
                        frontier_phi_77_pred_2 = _2882;
                        frontier_phi_77_pred_3 = _2881;
                        frontier_phi_77_pred_4 = _2880;
                        frontier_phi_77_pred_5 = _2879;
                    }
                    _2521 = frontier_phi_77_pred;
                    _2519 = frontier_phi_77_pred_1;
                    _2517 = frontier_phi_77_pred_2;
                    _2515 = frontier_phi_77_pred_3;
                    _2513 = frontier_phi_77_pred_4;
                    _2511 = frontier_phi_77_pred_5;
                    uint _2677 = _2676 + 1u;
                    if (_2677 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2670 = _2511;
                        _2671 = _2513;
                        _2672 = _2515;
                        _2673 = _2517;
                        _2674 = _2519;
                        _2675 = _2521;
                        _2676 = _2677;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2515;
                frontier_phi_58_59_ladder_1 = _2521;
                frontier_phi_58_59_ladder_2 = _2519;
                frontier_phi_58_59_ladder_3 = _2517;
                frontier_phi_58_59_ladder_4 = _2513;
                frontier_phi_58_59_ladder_5 = _2511;
            }
            else
            {
                frontier_phi_58_59_ladder = _2393;
                frontier_phi_58_59_ladder_1 = _2399;
                frontier_phi_58_59_ladder_2 = _2397;
                frontier_phi_58_59_ladder_3 = _2395;
                frontier_phi_58_59_ladder_4 = _2391;
                frontier_phi_58_59_ladder_5 = _2389;
            }
            _2510 = frontier_phi_58_59_ladder_5;
            _2512 = frontier_phi_58_59_ladder_4;
            _2514 = frontier_phi_58_59_ladder;
            _2516 = frontier_phi_58_59_ladder_3;
            _2518 = frontier_phi_58_59_ladder_2;
            _2520 = frontier_phi_58_59_ladder_1;
        }
        float _2525 = isnan(1.0) ? _503 : (isnan(_503) ? 1.0 : min(_503, 1.0));
        _2301 = (_2525 * _2516) + _1734;
        _2303 = (_2525 * _2518) + _1736;
        _2305 = (_2525 * _2520) + _1738;
        _2307 = ((_2510 * _488) * _2525) + _2082;
        _2309 = ((_2512 * _490) * _2525) + _2084;
        _2311 = ((_2514 * _491) * _2525) + _2086;
    }
    else
    {
        _2301 = _1734;
        _2303 = _1736;
        _2305 = _1738;
        _2307 = _2082;
        _2309 = _2084;
        _2311 = _2086;
    }
    float _4253 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _4264 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4275 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _2328 = ((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2301 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _503))) + ((_2307 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1345)) * cbPerFrame._m0[3u].x);
    float _2329 = ((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2303 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _503))) + ((_2309 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1345)) * cbPerFrame._m0[3u].x);
    float _2330 = ((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2305 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _503))) + ((_2311 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1345)) * cbPerFrame._m0[3u].x);
    uint _2331 = _462 + 6u;
    float _2339 = _422 / cbSceneParam._m0[86u].x;
    float _2340 = _423 / cbSceneParam._m0[86u].y;
    vec4 _2354 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2339, _2340, (log2((isnan(cbSceneParam._m0[77u].w) ? _342 : (isnan(_342) ? cbSceneParam._m0[77u].w : min(_342, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2356 = _2354.x;
    float _2357 = _2354.y;
    float _2358 = _2354.z;
    float _2359 = _2354.w;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    if (_342 > cbSceneParam._m0[78u].w)
    {
        float _2414 = isnan(_342) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _342 : min(cbSceneParam._m0[80u].w, _342));
        float _2415 = _2414 / _342;
        float _2426 = _2415 * _394;
        float _2427 = _395 * _2415;
        float _2428 = (-0.0) - _2427;
        float _2430 = _2415 * _396;
        float _2432 = (cbSceneParam._m0[77u].w * _2428) / _2414;
        float _2433 = _2432 + cbSceneParam._m0[79u].w;
        float _2434 = cbSceneParam._m0[79u].w - _2427;
        float _2440 = sqrt(((_2426 * _2426) + (_2427 * _2427)) + (_2430 * _2430));
        float _2443 = (1.0 - (cbSceneParam._m0[77u].w / _2414)) * _2440;
        float _2448 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2450 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2627;
        if (abs((_2428 - _2432) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2627 = ((((_2433 > 0.0) ? exp2(_2448 * _2433) : (2.0 - exp2(_2450 * _2433))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2443;
        }
        else
        {
            float _2571 = 1.0 / cbSceneParam._m0[80u].x;
            float _2572 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : max(_2433, _2434));
            float _2573 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : min(_2433, _2434));
            float _2582 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : min(_2572, 0.0));
            float _2583 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : min(_2573, 0.0));
            _2627 = ((abs(_2440 / _2428) * cbSceneParam._m0[80u].y) * ((((_2582 - _2583) * 2.0) - ((exp2(_2448 * (isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0)))) - exp2(_2448 * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0))))) * _2571)) - ((exp2(_2450 * _2582) - exp2(_2450 * _2583)) * _2571))) + (_2443 * cbSceneParam._m0[80u].z);
        }
        vec4 _2629 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2339, _2340, 1.0), 0.0);
        float _2638 = exp2((_2627 * (-1.44269502162933349609375)) * (1.0 - _2629.w));
        float _2639 = log2(_2638);
        float _2655 = log2(_2359);
        _2452 = (exp2(_2655 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].x)) * _2629.x) / cbSceneParam._m0[78u].x)) + _2356;
        _2454 = (exp2(_2655 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].y)) * _2629.y) / cbSceneParam._m0[78u].y)) + _2357;
        _2456 = (exp2(_2655 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].z)) * _2629.z) / cbSceneParam._m0[78u].z)) + _2358;
        _2458 = _2638 * _2359;
    }
    else
    {
        _2452 = _2356;
        _2454 = _2357;
        _2456 = _2358;
        _2458 = _2359;
    }
    bool _2665;
    vec4 _2468;
    vec4 _2490;
    float _2492;
    float _2496;
    float _2497;
    float _2498;
    float _2499;
    bool _2509;
    for (;;)
    {
        _2468 = cbMatDynParam._m0[0u];
        float _2470 = roundEven(_2468.y);
        bool _2471 = _2470 == 3.0;
        float _2472 = log2(_2458);
        float _2479 = exp2(_2472 * cbSceneParam._m0[78u].x) * _2328;
        float _2480 = exp2(_2472 * cbSceneParam._m0[78u].y) * _2329;
        float _2481 = exp2(_2472 * cbSceneParam._m0[78u].z) * _2330;
        float _2488 = _410 + (-0.5);
        _2490 = cbMtdParam._m0[1u];
        _2492 = _2490.y * _2488;
        float _2495 = (_2470 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2496 = _2495 * (_2471 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2452)));
        _2497 = _2495 * (_2471 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2454)));
        _2498 = _2495 * (_2471 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2456)));
        _2499 = _2488 * 0.999000012874603271484375;
        _2509 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2509)
        {
            if ((cbInstanceData._m0[_462 + 7u].x + _2499) < 0.5)
            {
                _2665 = true;
                break;
            }
        }
        uint _2606 = _464 + uint(_2468.w);
        if ((cbInstanceData._m0[_2606].w < 1.0) && ((cbInstanceData._m0[_2606].w + _2499) < 0.5))
        {
            _2665 = true;
            break;
        }
        if ((_265 + _2492) < _2490.x)
        {
            _2665 = true;
            break;
        }
        _2665 = false;
        break;
    }
    float _2870;
    if (_2665)
    {
        discard_state = true;
        _2870 = 0.0;
    }
    else
    {
        _2870 = cbInstanceData._m0[_2331].w;
    }
    SV_Target.x = _2496;
    SV_Target.y = _2497;
    SV_Target.z = _2498;
    SV_Target.w = _2870;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2331].w;
    discard_exit();
}


