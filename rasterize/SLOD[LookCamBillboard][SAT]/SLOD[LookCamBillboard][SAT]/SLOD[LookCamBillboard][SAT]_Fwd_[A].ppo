#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D SLOD_LookCamBillboard_SAT_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D SLOD_LookCamBillboard_SAT_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D SLOD_LookCamBillboard_SAT_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D SLOD_LookCamBillboard_SAT_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_2;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _905;
float _3296;
float _3297;
float _3298;
float _3299;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = floor(cbMtdParam._m0[9u].x * TEXCOORD.z) / cbMtdParam._m0[9u].x;
    float _222 = floor(cbMtdParam._m0[9u].x * TEXCOORD.w) / cbMtdParam._m0[9u].x;
    float _3308 = isnan(0.0) ? _221 : (isnan(_221) ? 0.0 : max(_221, 0.0));
    float _3319 = isnan(0.0) ? _222 : (isnan(_222) ? 0.0 : max(_222, 0.0));
    float _228 = (TEXCOORD.x / cbMtdParam._m0[9u].x) + (isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0)));
    float _229 = (TEXCOORD.y / cbMtdParam._m0[9u].x) + (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)));
    vec4 _242 = texture(sampler2D(SLOD_LookCamBillboard_SAT_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _228) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _229) + cbTextureTilingScale._m0[3u].w));
    float _245 = _242.x;
    float _246 = _242.y;
    float _247 = _242.z;
    vec4 _259 = texture(sampler2D(SLOD_LookCamBillboard_SAT_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * _228) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _229) + cbTextureTilingScale._m0[0u].w));
    float _261 = _259.x;
    float _262 = _259.y;
    float _263 = _261 + _262;
    vec4 _275 = texture(sampler2D(SLOD_LookCamBillboard_SAT_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _228) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _229) + cbTextureTilingScale._m0[1u].w));
    float _277 = _275.x;
    vec4 _289 = texture(sampler2D(SLOD_LookCamBillboard_SAT_snp_0_Texture2D_2, SS_SpecularMap), vec2((cbTextureTilingScale._m0[2u].x * _228) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _229) + cbTextureTilingScale._m0[2u].w));
    float _291 = _289.x;
    float _295 = (_261 * 2.0) + (-1.0);
    float _297 = (_262 * 2.0) + (-1.0);
    float _298 = dot(vec2(_295, _297), vec2(_295, _297));
    float _3330 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _303 = sqrt(1.0 - (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))));
    float _306 = fma(_303, _201 * NORMAL.x, fma(_297, _208 * TANGENT.x, (_194 * _186) * _295));
    float _309 = fma(_303, _201 * NORMAL.y, fma(_297, _208 * TANGENT.y, (_194 * _187) * _295));
    float _312 = fma(_303, _201 * NORMAL.z, fma(_297, _208 * TANGENT.z, (_194 * _188) * _295));
    float _316 = inversesqrt(dot(vec3(_306, _309, _312), vec3(_306, _309, _312)));
    float _317 = _316 * _306;
    float _318 = _316 * _309;
    float _319 = _316 * _312;
    float _3341 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _320 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _3352 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3363 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3374 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3385 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _324 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _340 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _382 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _392 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _382);
    float _393 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _382);
    float _394 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _382);
    float _398 = inversesqrt(dot(vec3(_392, _393, _394), vec3(_392, _393, _394)));
    float _399 = _392 * _398;
    float _400 = _393 * _398;
    float _401 = _394 * _398;
    vec4 _406 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _408 = _406.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _584 = sqrt(((_392 * _392) + (_393 * _393)) + (_394 * _394));
        float _590 = (cbMatDynParam._m0[5u].x * _584) + cbMatDynParam._m0[5u].y;
        float _3396 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        float _591 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _595 = (cbMatDynParam._m0[5u].z * _584) + cbMatDynParam._m0[5u].w;
        float _3407 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) - _591)) + _591) < ((_408 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _420 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _421 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _441 = fma(_319, cbSceneParam._m0[5u].z, fma(_318, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _317));
    float _444 = fma(_319, cbSceneParam._m0[6u].z, fma(_318, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _317));
    float _447 = fma(_319, cbSceneParam._m0[7u].z, fma(_318, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _317));
    uint _460 = uint(roundEven(NORMAL.w)) * 13u;
    uint _462 = _460 + 9u;
    uint _463 = _462 + uint(cbMatDynParam._m0[0u].w);
    float _469 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0)))) * cbInstanceData._m0[_463].x;
    float _470 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0)))) * cbInstanceData._m0[_463].y;
    float _471 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * cbInstanceData._m0[_463].z;
    float _3418 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _3440 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _475 = 1.0 - _324;
    float _476 = _472 * _475;
    float _477 = _473 * _475;
    float _478 = _474 * _475;
    float _483 = (_472 + (-0.039999999105930328369140625)) * _324;
    float _484 = (_473 + (-0.039999999105930328369140625)) * _324;
    float _485 = (_474 + (-0.039999999105930328369140625)) * _324;
    float _486 = _483 + 0.039999999105930328369140625;
    float _488 = _484 + 0.039999999105930328369140625;
    float _489 = _485 + 0.039999999105930328369140625;
    vec4 _498 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _420, cbSceneParam._m0[86u].y * _421));
    float _501 = _498.x * TEXCOORD_2;
    float _502 = dot(vec3(_317, _318, _319), vec3(_399, _400, _401));
    float _505 = _502 * 2.0;
    float _509 = (_505 * _317) - _399;
    float _510 = (_505 * _318) - _400;
    float _511 = (_505 * _319) - _401;
    float _515 = abs(dot(vec3(_399, _400, _401), vec3(_317, _318, _319)));
    float _3451 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _517 = sqrt(_320);
    float _530 = exp2((_517 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_517 * 3.0));
    float _536 = (1.0 - _530) * ((_517 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _537 = _530 * _517;
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _573 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _904;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _629 = fma(_573, cbModelParam._m0[26u].z, fma(_569, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _565));
        float _633 = fma(_573, cbModelParam._m0[27u].z, fma(_569, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _565));
        float _637 = fma(_573, cbModelParam._m0[28u].z, fma(_569, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _565));
        float _662 = _565 + _317;
        float _663 = _569 + _318;
        float _664 = _573 + _319;
        float _674 = fma(_664, cbModelParam._m0[26u].z, fma(_663, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _662)) - _629;
        float _675 = fma(_664, cbModelParam._m0[27u].z, fma(_663, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _662)) - _633;
        float _676 = fma(_664, cbModelParam._m0[28u].z, fma(_663, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _662)) - _637;
        float _680 = inversesqrt(dot(vec3(_674, _675, _676), vec3(_674, _675, _676)));
        float _693 = ((_680 * _674) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_629 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _694 = ((_680 * _675) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_633 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _695 = ((_680 * _676) / cbModelParam._m0[34u].z) + ((((((_637 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        float _732 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_698.x + (-0.5));
        float _734 = _732 * (_698.y + (-0.5));
        float _735 = _732 * (_698.z + (-0.5));
        float _742 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_705.x + (-0.5));
        float _744 = _742 * (_705.y + (-0.5));
        float _745 = _742 * (_705.z + (-0.5));
        float _752 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_712.x + (-0.5));
        float _754 = _752 * (_712.y + (-0.5));
        float _755 = _752 * (_712.z + (-0.5));
        float _762 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_719.x + (-0.5));
        float _764 = _762 * (_719.y + (-0.5));
        float _765 = _762 * (_719.z + (-0.5));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = _733 * 0.5;
        float _770 = _743 * 0.5;
        float _771 = _753 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _786 = (dot(vec3(_317, _318, _319), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _796 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3499 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_798 + 1.0))) + _803) * _766;
        float _813 = _734 * 0.5;
        float _814 = _744 * 0.5;
        float _815 = _754 * 0.5;
        float _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _829 = (dot(vec3(_317, _318, _319), vec3(_821 * _813, _821 * _814, _821 * _815)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _838 = sqrt(((_814 * _814) + (_813 * _813)) + (_815 * _815)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3532 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_840 + 1.0))) + _845) * _767;
        float _855 = _735 * 0.5;
        float _856 = _745 * 0.5;
        float _857 = _755 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _871 = (dot(vec3(_317, _318, _319), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _880 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _882 = _881 * 2.0;
        float _886 = (1.0 - _881) / (_881 + 1.0);
        float _3565 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _896 = ((((1.0 - _887) * (_882 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_882 + 1.0))) + _887) * _768;
        _904 = _735;
        _906 = _734;
        _907 = _733;
        _908 = _745;
        _909 = _744;
        _910 = _743;
        _911 = _755;
        _912 = _754;
        _913 = _753;
        _914 = _768;
        _915 = _767;
        _916 = _766;
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0)));
    }
    else
    {
        _904 = _905;
        _906 = _905;
        _907 = _905;
        _908 = _905;
        _909 = _905;
        _910 = _905;
        _911 = _905;
        _912 = _905;
        _913 = _905;
        _914 = _905;
        _915 = _905;
        _916 = _905;
        _917 = 0.0;
        _918 = 0.0;
        _919 = 0.0;
    }
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _948 = fma(_573, cbModelParam._m0[30u].z, fma(_569, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _565));
        float _952 = fma(_573, cbModelParam._m0[31u].z, fma(_569, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _565));
        float _956 = fma(_573, cbModelParam._m0[32u].z, fma(_569, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _565));
        float _979 = _565 + _317;
        float _980 = _569 + _318;
        float _981 = _573 + _319;
        float _991 = fma(_981, cbModelParam._m0[30u].z, fma(_980, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _979)) - _948;
        float _992 = fma(_981, cbModelParam._m0[31u].z, fma(_980, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _979)) - _952;
        float _993 = fma(_981, cbModelParam._m0[32u].z, fma(_980, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _979)) - _956;
        float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
        float _1010 = ((_997 * _991) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_948 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_997 * _992) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_952 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_997 * _993) / cbModelParam._m0[35u].z) + ((((((_956 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        float _1047 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1014.x + (-0.5));
        float _1049 = _1047 * (_1014.y + (-0.5));
        float _1050 = _1047 * (_1014.z + (-0.5));
        float _1057 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1021.x + (-0.5));
        float _1059 = _1057 * (_1021.y + (-0.5));
        float _1060 = _1057 * (_1021.z + (-0.5));
        float _1067 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1028.x + (-0.5));
        float _1069 = _1067 * (_1028.y + (-0.5));
        float _1070 = _1067 * (_1028.z + (-0.5));
        float _1077 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1035.x + (-0.5));
        float _1079 = _1077 * (_1035.y + (-0.5));
        float _1080 = _1077 * (_1035.z + (-0.5));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = _1048 * 0.5;
        float _1085 = _1058 * 0.5;
        float _1086 = _1068 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_317, _318, _319), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3628 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1111 + 1.0))) + _1116) * _1081;
        float _1126 = _1049 * 0.5;
        float _1127 = _1059 * 0.5;
        float _1128 = _1069 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_317, _318, _319), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3661 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1153 + 1.0))) + _1158) * _1082;
        float _1168 = _1050 * 0.5;
        float _1169 = _1060 * 0.5;
        float _1170 = _1070 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_317, _318, _319), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3694 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1195 + 1.0))) + _1200) * _1083;
        _1217 = _1050;
        _1218 = _1049;
        _1219 = _1048;
        _1220 = _1060;
        _1221 = _1059;
        _1222 = _1058;
        _1223 = _1070;
        _1224 = _1069;
        _1225 = _1068;
        _1226 = _1083;
        _1227 = _1082;
        _1228 = _1081;
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
    }
    else
    {
        _1217 = _905;
        _1218 = _905;
        _1219 = _905;
        _1220 = _905;
        _1221 = _905;
        _1222 = _905;
        _1223 = _905;
        _1224 = _905;
        _1225 = _905;
        _1226 = _905;
        _1227 = _905;
        _1228 = _905;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
    }
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _917)) + _917;
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _918)) + _918;
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _919)) + _919;
    float _1264 = fma(_1243, cbSceneParam._m0[89u].z, fma(_1242, cbSceneParam._m0[89u].y, _1241 * cbSceneParam._m0[89u].x));
    float _1267 = fma(_1243, cbSceneParam._m0[90u].z, fma(_1242, cbSceneParam._m0[90u].y, _1241 * cbSceneParam._m0[90u].x));
    float _1270 = fma(_1243, cbSceneParam._m0[91u].z, fma(_1242, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1241));
    float _1285 = _509 * 0.5;
    float _1286 = _510 * 0.5;
    float _1287 = _511 * 0.5;
    float _1288 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1291 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1294 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1328;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1301 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_904, _908, _911, _914));
        float _1305 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_906, _909, _912, _915));
        float _1309 = dot(vec4(_1285, _1286, _1287, 1.0), vec4(_907, _910, _913, _916));
        float _1316 = dot(vec4(cbModelParam._m0[39u]), vec4(_1285, _1286, _1287, 1.0));
        _1328 = dot(vec3(isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1316) ? 0.0 : (isnan(0.0) ? _1316 : max(0.0, _1316))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1328 = 1.0;
    }
    float _1339;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1330 = dot(vec4(cbModelParam._m0[40u]), vec4(_1285, _1286, _1287, 1.0));
        _1339 = dot(vec3(isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1330) ? 0.0 : (isnan(0.0) ? _1330 : max(0.0, _1330))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1339 = 1.0;
    }
    float _1343 = (_1339 * cbModelParam._m0[1u].x) + (_1328 * (1.0 - cbModelParam._m0[1u].x));
    float _1353 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _320);
    float _1354 = isnan(_1353) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1353 : min(cbModelParam._m0[25u].z, _1353));
    float _1436;
    float _1438;
    float _1440;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1403 = fma(_573, cbModelParam._m0[13u].z, fma(_569, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _565)) + cbModelParam._m0[13u].w;
        float _1407 = fma(_573, cbModelParam._m0[14u].z, fma(_569, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _565)) + cbModelParam._m0[14u].w;
        float _1411 = fma(_573, cbModelParam._m0[15u].z, fma(_569, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _565)) + cbModelParam._m0[15u].w;
        float _1414 = fma(_511, cbModelParam._m0[13u].z, fma(_510, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _509));
        float _1417 = fma(_511, cbModelParam._m0[14u].z, fma(_510, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _509));
        float _1420 = fma(_511, cbModelParam._m0[15u].z, fma(_510, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _509));
        float _1448;
        if (_1414 > 0.0)
        {
            _1448 = abs((1.0 - _1403) / _1414);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1403 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1448 = frontier_phi_17_15_ladder;
        }
        float _1656;
        if (_1417 > 0.0)
        {
            _1656 = abs((1.0 - _1407) / _1417);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1407 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1656 = frontier_phi_26_22_ladder;
        }
        float _1910;
        if (_1420 > 0.0)
        {
            _1910 = abs((1.0 - _1411) / _1420);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1411 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1910 = frontier_phi_38_33_ladder;
        }
        float _1912 = isnan(_1656) ? _1448 : (isnan(_1448) ? _1656 : min(_1448, _1656));
        float _1913 = isnan(_1910) ? _1912 : (isnan(_1912) ? _1910 : min(_1912, _1910));
        float _1917 = (_1913 * _1414) + _1403;
        float _1918 = (_1913 * _1417) + _1407;
        float _1919 = (_1913 * _1420) + _1411;
        float _1920 = _1913 * 9.9999997473787516355514526367188e-05;
        float _1922 = (-1.0) - _1920;
        float _1924 = _1920 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1919 > _1924) || ((_1919 < _1922) || ((_1918 > _1924) || ((_1918 < _1922) || ((_1917 < _1922) || (_1917 > _1924))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2047 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1919, cbModelParam._m0[9u].z, fma(_1918, cbModelParam._m0[9u].y, _1917 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1919, cbModelParam._m0[10u].z, fma(_1918, cbModelParam._m0[10u].y, _1917 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1919, cbModelParam._m0[11u].z, fma(_1918, cbModelParam._m0[11u].y, _1917 * cbModelParam._m0[11u].x))), _1354);
            frontier_phi_16_38_ladder = _2047.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2047.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2047.x * cbModelParam._m0[1u].y;
        }
        _1436 = frontier_phi_16_38_ladder_2;
        _1438 = frontier_phi_16_38_ladder_1;
        _1440 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1424 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_509, _510, _511), _1354);
        _1436 = _1424.x * cbModelParam._m0[1u].y;
        _1438 = _1424.y * cbModelParam._m0[1u].y;
        _1440 = _1424.z * cbModelParam._m0[1u].y;
    }
    float _1444 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _320);
    float _1445 = isnan(_1444) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1444 : min(cbModelParam._m0[25u].w, _1444));
    float _1538;
    float _1540;
    float _1542;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1502 = fma(_573, cbModelParam._m0[21u].z, fma(_569, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _565)) + cbModelParam._m0[21u].w;
        float _1506 = fma(_573, cbModelParam._m0[22u].z, fma(_569, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _565)) + cbModelParam._m0[22u].w;
        float _1510 = fma(_573, cbModelParam._m0[23u].z, fma(_569, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _565)) + cbModelParam._m0[23u].w;
        float _1513 = fma(_511, cbModelParam._m0[21u].z, fma(_510, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _509));
        float _1516 = fma(_511, cbModelParam._m0[22u].z, fma(_510, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _509));
        float _1519 = fma(_511, cbModelParam._m0[23u].z, fma(_510, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _509));
        float _1661;
        if (_1513 > 0.0)
        {
            _1661 = abs((1.0 - _1502) / _1513);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1502 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1661 = frontier_phi_28_24_ladder;
        }
        float _1937;
        if (_1516 > 0.0)
        {
            _1937 = abs((1.0 - _1506) / _1516);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1506 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1937 = frontier_phi_40_35_ladder;
        }
        float _2150;
        if (_1519 > 0.0)
        {
            _2150 = abs((1.0 - _1510) / _1519);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1510 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2150 = frontier_phi_49_46_ladder;
        }
        float _2152 = isnan(_1937) ? _1661 : (isnan(_1661) ? _1937 : min(_1661, _1937));
        float _2153 = isnan(_2150) ? _2152 : (isnan(_2152) ? _2150 : min(_2152, _2150));
        float _2157 = (_2153 * _1513) + _1502;
        float _2158 = (_2153 * _1516) + _1506;
        float _2159 = (_2153 * _1519) + _1510;
        float _2160 = _2153 * 9.9999997473787516355514526367188e-05;
        float _2161 = (-1.0) - _2160;
        float _2163 = _2160 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2159 > _2163) || ((_2159 < _2161) || ((_2158 > _2163) || ((_2158 < _2161) || ((_2157 < _2161) || (_2157 > _2163))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2159, cbModelParam._m0[17u].z, fma(_2158, cbModelParam._m0[17u].y, _2157 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2159, cbModelParam._m0[18u].z, fma(_2158, cbModelParam._m0[18u].y, _2157 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2159, cbModelParam._m0[19u].z, fma(_2158, cbModelParam._m0[19u].y, _2157 * cbModelParam._m0[19u].x))), _1445);
            frontier_phi_25_49_ladder = _2358.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2358.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2358.x * cbModelParam._m0[1u].z;
        }
        _1538 = frontier_phi_25_49_ladder_2;
        _1540 = frontier_phi_25_49_ladder_1;
        _1542 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1522 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_509, _510, _511), _1445);
        _1538 = _1522.x * cbModelParam._m0[1u].z;
        _1540 = _1522.y * cbModelParam._m0[1u].z;
        _1542 = _1522.z * cbModelParam._m0[1u].z;
    }
    float _1555 = (((_536 * _486) + _537) * _501) * ((cbModelParam._m0[1u].w * (_1538 - _1436)) + _1436);
    float _1557 = (((_536 * _488) + _537) * _501) * ((cbModelParam._m0[1u].w * (_1540 - _1438)) + _1438);
    float _1559 = (((_536 * _489) + _537) * _501) * ((cbModelParam._m0[1u].w * (_1542 - _1440)) + _1440);
    float _1562 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1557, cbSceneParam._m0[89u].y, _1555 * cbSceneParam._m0[89u].x));
    float _1565 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1557, cbSceneParam._m0[90u].y, _1555 * cbSceneParam._m0[90u].x));
    float _1568 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1557, cbSceneParam._m0[91u].y, _1555 * cbSceneParam._m0[91u].x));
    uvec4 _1578 = floatBitsToUint(cbInstanceData._m0[_460 + 5u]);
    uint _1580 = _1578.x * 14u;
    uint _1581 = _1580 + 13u;
    float _1588 = _501 + (-1.0);
    float _1593 = (cbLight._m0[_1581].x * _1588) + 1.0;
    float _1594 = (cbLight._m0[_1581].y * _1588) + 1.0;
    float _1595 = (cbLight._m0[_1581].z * _1588) + 1.0;
    float _1596 = (cbLight._m0[_1581].w * _1588) + 1.0;
    uint _1597 = _1580 + 5u;
    float _1603 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
    uint _1607 = _1580 + 4u;
    float _1614 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
    uint _1618 = _1580 | 1u;
    float _1629 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_317, _318, _319));
    float _1632 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_317, _318, _319));
    float _3830 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _3841 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1637 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.3183098733425140380859375;
    float _1639 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.3183098733425140380859375;
    float _1646 = ((cbLight._m0[_1597].x * _1603) * _1639) + ((cbLight._m0[_1607].x * _1614) * _1637);
    float _1647 = ((_1603 * cbLight._m0[_1597].y) * _1639) + ((_1614 * cbLight._m0[_1607].y) * _1637);
    float _1648 = ((_1603 * cbLight._m0[_1597].z) * _1639) + ((_1614 * cbLight._m0[_1607].z) * _1637);
    uvec4 _1653 = floatBitsToUint(cbLight._m0[_1580 + 12u]);
    bool _1655 = _1653.x == 0u;
    float _1666;
    float _1668;
    float _1670;
    if (_1655)
    {
        _1666 = _1646;
        _1668 = _1647;
        _1670 = _1648;
    }
    else
    {
        uint _1674 = _1580 + 6u;
        float _1690 = (dot(vec3(cbLight._m0[_1580 + 2u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _1691 = _1690 * _1690;
        float _3852 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1693 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1666 = (((cbLight._m0[_1674].x * 0.3183098733425140380859375) * _1692) * _1693) + _1646;
        _1668 = (((cbLight._m0[_1674].y * 0.3183098733425140380859375) * _1692) * _1693) + _1647;
        _1670 = (((cbLight._m0[_1674].z * 0.3183098733425140380859375) * _1692) * _1693) + _1648;
    }
    bool _1673 = _1653.y == 0u;
    float _1711;
    float _1713;
    float _1715;
    if (_1673)
    {
        _1711 = _1666;
        _1713 = _1668;
        _1715 = _1670;
    }
    else
    {
        uint _1881 = _1580 + 7u;
        float _1897 = (dot(vec3(cbLight._m0[_1580 + 3u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _1898 = _1897 * _1897;
        float _3868 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1900 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _1711 = (((cbLight._m0[_1881].x * 0.3183098733425140380859375) * _1899) * _1900) + _1666;
        _1713 = (((cbLight._m0[_1881].y * 0.3183098733425140380859375) * _1899) * _1900) + _1668;
        _1715 = (((cbLight._m0[_1881].z * 0.3183098733425140380859375) * _1899) * _1900) + _1670;
    }
    uint _1718 = _1580 + 8u;
    float _1731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1580].w)) * _320) * 0.949999988079071044921875);
    float _1732 = _1731 * _1731;
    float _1733 = cbLight._m0[_1580].x + _399;
    float _1734 = cbLight._m0[_1580].y + _400;
    float _1735 = cbLight._m0[_1580].z + _401;
    float _1739 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
    float _1740 = _1739 * _1733;
    float _1741 = _1739 * _1734;
    float _1742 = _1739 * _1735;
    float _1743 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1580].xyz));
    float _3884 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _1747 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1748 = dot(vec3(_317, _318, _319), vec3(_1740, _1741, _1742));
    float _3906 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _1752 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_1740, _1741, _1742));
    float _3917 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1756 = _1732 * _1732;
    float _1760 = ((_1751 * _1751) * (_1756 + (-1.0))) + 1.0;
    float _1768 = exp2(log2(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * 5.0);
    float _1769 = 0.959999978542327880859375 - _483;
    float _1771 = 0.959999978542327880859375 - _484;
    float _1772 = 0.959999978542327880859375 - _485;
    float _1779 = 1.0 - _1732;
    float _1790 = (0.5 / (((_1747 * ((_1746 * _1779) + _1732)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1779) + _1732) * _1746))) * _1746;
    float _3928 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1792 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1756 / ((_1760 * _1760) * 3.141590118408203125));
    uint _1803 = _1580 + 9u;
    float _1814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1618].w)) * _320) * 0.949999988079071044921875);
    float _1815 = _1814 * _1814;
    float _1816 = cbLight._m0[_1618].x + _399;
    float _1817 = cbLight._m0[_1618].y + _400;
    float _1818 = cbLight._m0[_1618].z + _401;
    float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
    float _1823 = _1822 * _1816;
    float _1824 = _1822 * _1817;
    float _1825 = _1822 * _1818;
    float _1826 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1618].xyz));
    float _3939 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _1830 = dot(vec3(_317, _318, _319), vec3(_1823, _1824, _1825));
    float _3950 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1834 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_1823, _1824, _1825));
    float _3961 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1838 = _1815 * _1815;
    float _1842 = ((_1833 * _1833) * (_1838 + (-1.0))) + 1.0;
    float _1849 = exp2(log2(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * 5.0);
    float _1856 = 1.0 - _1815;
    float _1866 = (0.5 / (((_1747 * ((_1829 * _1856) + _1815)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1856) + _1815) * _1829))) * _1829;
    float _3972 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1868 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1838 / ((_1842 * _1842) * 3.141590118408203125));
    float _1878 = (((((_1849 * _1769) + _486) * cbLight._m0[_1803].x) * _1868) * _1603) + (((((_1768 * _1769) + _486) * cbLight._m0[_1718].x) * _1792) * _1614);
    float _1879 = (((((_1849 * _1771) + _488) * cbLight._m0[_1803].y) * _1868) * _1603) + (((((_1768 * _1771) + _488) * cbLight._m0[_1718].y) * _1792) * _1614);
    float _1880 = (((((_1849 * _1772) + _489) * cbLight._m0[_1803].z) * _1868) * _1603) + (((((_1768 * _1772) + _489) * cbLight._m0[_1718].z) * _1792) * _1614);
    float _1942;
    float _1944;
    float _1946;
    if (_1655)
    {
        _1942 = _1878;
        _1944 = _1879;
        _1946 = _1880;
    }
    else
    {
        uint _1948 = _1580 + 2u;
        uint _1952 = _1580 + 10u;
        float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _320) * 0.949999988079071044921875);
        float _1967 = _1966 * _1966;
        float _1968 = cbLight._m0[_1948].x + _399;
        float _1969 = cbLight._m0[_1948].y + _400;
        float _1970 = cbLight._m0[_1948].z + _401;
        float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
        float _1975 = _1974 * _1968;
        float _1976 = _1974 * _1969;
        float _1977 = _1974 * _1970;
        float _1978 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1948].xyz));
        float _3983 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1981 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1982 = dot(vec3(_317, _318, _319), vec3(_1975, _1976, _1977));
        float _3994 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1985 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1986 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_1975, _1976, _1977));
        float _4005 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1990 = _1967 * _1967;
        float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
        float _2001 = exp2(log2(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * 5.0);
        float _2008 = 1.0 - _1967;
        float _2018 = (0.5 / (((_1747 * ((_1981 * _2008) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _2008) + _1967) * _1981))) * _1981;
        float _4016 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2020 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
        float _2021 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1942 = (((((_2001 * _1769) + _486) * cbLight._m0[_1952].x) * _2020) * _2021) + _1878;
        _1944 = (((((_2001 * _1771) + _488) * cbLight._m0[_1952].y) * _2020) * _2021) + _1879;
        _1946 = (((((_2001 * _1772) + _489) * cbLight._m0[_1952].z) * _2020) * _2021) + _1880;
    }
    float _2056;
    float _2058;
    float _2060;
    if (_1673)
    {
        _2056 = _1942;
        _2058 = _1944;
        _2060 = _1946;
    }
    else
    {
        uint _2067 = _1580 + 3u;
        uint _2071 = _1580 + 11u;
        float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _320) * 0.949999988079071044921875);
        float _2086 = _2085 * _2085;
        float _2087 = cbLight._m0[_2067].x + _399;
        float _2088 = cbLight._m0[_2067].y + _400;
        float _2089 = cbLight._m0[_2067].z + _401;
        float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
        float _2094 = _2093 * _2087;
        float _2095 = _2093 * _2088;
        float _2096 = _2093 * _2089;
        float _2097 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_2067].xyz));
        float _4032 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2101 = dot(vec3(_317, _318, _319), vec3(_2094, _2095, _2096));
        float _4043 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2104 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2105 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2094, _2095, _2096));
        float _4054 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2109 = _2086 * _2086;
        float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
        float _2120 = exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0);
        float _2127 = 1.0 - _2086;
        float _2137 = (0.5 / (((_1747 * ((_2100 * _2127) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _2127) + _2086) * _2100))) * _2100;
        float _4065 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2139 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
        float _2140 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _2056 = (((((_2120 * _1769) + _486) * cbLight._m0[_2071].x) * _2139) * _2140) + _1942;
        _2058 = (((((_2120 * _1771) + _488) * cbLight._m0[_2071].y) * _2139) * _2140) + _1944;
        _2060 = (((((_2120 * _1772) + _489) * cbLight._m0[_2071].z) * _2139) * _2140) + _1946;
    }
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    if (_1578.y == 0u)
    {
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2215;
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2215;
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2215;
        uvec4 _2230 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2231 = _2230.x;
        uint _2242 = uint((float(_2230.y) * floor(float(uint(cbSceneParam._m0[85u].y * _421) / _2231))) + floor(float(uint(cbSceneParam._m0[85u].x * _420) / _2231)));
        float _2252 = (log2(_2218 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2253 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        uint _2256 = uint(isnan(14.0) ? _2253 : (isnan(_2253) ? 14.0 : min(_2253, 14.0)));
        uvec4 _2261 = texelFetch(g_lightClusterGridBuffer, int(((_2256 << 2u) + (_2242 << 6u)) >> 2u));
        uint _2262 = _2261.x;
        uint _2263 = _2230.z;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        if (((((1u << ((_2263 >> 4u) & 15u)) + 4294967295u) & _2262) == 0u) || ((_2263 & 240u) == 0u))
        {
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
        }
        else
        {
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            uint _2522 = 0u;
            uint _2531;
            bool _2532;
            for (;;)
            {
                _2531 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2522 << 2u)) >> 2u)).x;
                _2532 = _2531 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2532)
                {
                    frontier_phi_66_pred = _2516;
                    frontier_phi_66_pred_1 = _2521;
                    frontier_phi_66_pred_2 = _2520;
                    frontier_phi_66_pred_3 = _2519;
                    frontier_phi_66_pred_4 = _2518;
                    frontier_phi_66_pred_5 = _2517;
                }
                else
                {
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    uint _2667;
                    _2661 = _2516;
                    _2662 = _2517;
                    _2663 = _2518;
                    _2664 = _2519;
                    _2665 = _2520;
                    _2666 = _2521;
                    _2667 = _2531;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    for (;;)
                    {
                        uint _2671 = uint(findLSB(_2667)) + (_2522 << 5u);
                        uint _2668 = (_2667 + 4294967295u) & _2667;
                        uint _2673 = _2671 * 48u;
                        vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2673)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 3u)).x));
                        uint _2693 = (_2671 * 48u) + 4u;
                        vec4 _2706 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 3u)).x));
                        uint _2712 = (_2671 * 48u) + 8u;
                        vec3 _2723 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2712)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 2u)).x));
                        float _2727 = _2687.x - _2216;
                        float _2728 = _2687.y - _2217;
                        float _2729 = _2687.z - _2218;
                        float _2730 = dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729));
                        float _2733 = inversesqrt(_2730);
                        float _2734 = _2733 * _2727;
                        float _2735 = _2733 * _2728;
                        float _2736 = _2733 * _2729;
                        float _2737 = dot(vec3(_441, _444, _447), vec3(_2734, _2735, _2736));
                        float _2742 = 1.0 - (_2730 * _2687.w);
                        float _4091 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                        float _2743 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                        float _2744 = sqrt(_2730) * _2706.w;
                        float _2747 = 1.39999997615814208984375 / (_2744 + 1.39999997615814208984375);
                        float _2748 = _2747 * _2747;
                        float _2751 = ((1.0 - _2748) * _2737) + _2748;
                        float _2754 = _2744 * _2744;
                        float _2758 = ((isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0))) * _2743) / ((_2754 * 0.699999988079071044921875) + 1.0);
                        float _2762 = (-0.0) - _2216;
                        float _2763 = (-0.0) - _2217;
                        float _2764 = (-0.0) - _2218;
                        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
                        float _2769 = _2768 * _2762;
                        float _2770 = _2768 * _2763;
                        float _2771 = _2768 * _2764;
                        float _2779 = exp2(log2(1.0 / ((_2754 * 3.5) + 5.0)) * 0.25);
                        float _2780 = 1.0 - _517;
                        float _2787 = sqrt(1.0 - ((1.0 - (_2780 * _2780)) * (1.0 - (_2779 * _2779))));
                        float _2788 = _2787 * _2787;
                        float _2789 = _2788 * _2788;
                        float _2790 = _2769 + _2734;
                        float _2791 = _2770 + _2735;
                        float _2792 = _2771 + _2736;
                        float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
                        float _2800 = dot(vec3(_441, _444, _447), vec3(_2769, _2770, _2771));
                        float _4107 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2803 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2804 = dot(vec3(_441, _444, _447), vec3(_2796 * _2790, _2796 * _2791, _2796 * _2792));
                        float _4118 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2807 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2811 = ((_2807 * _2807) * (_2789 + (-1.0))) + 1.0;
                        float _2812 = _2747 * _2788;
                        float _2813 = _2812 * _2812;
                        float _2816 = ((1.0 - _2813) * _2737) + _2813;
                        float _4129 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2817 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2818 = 1.0 - _2788;
                        float _2828 = (0.5 / (((_2817 * ((_2803 * _2818) + _2788)) + 9.9999999392252902907785028219223e-09) + (((_2817 * _2818) + _2788) * _2803))) * _2817;
                        float _4140 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2839 = (((_2789 * 3.1415927410125732421875) * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) / ((_2811 * _2811) * ((_2754 * 2.1991131305694580078125) + 3.141590118408203125))) * _2743;
                        _2591 = (_2758 * _2706.x) + _2664;
                        _2592 = (_2758 * _2706.y) + _2665;
                        _2593 = (_2758 * _2706.z) + _2666;
                        _2588 = (_2839 * _2723.x) + _2661;
                        _2589 = (_2839 * _2723.y) + _2662;
                        _2590 = (_2839 * _2723.z) + _2663;
                        if (_2668 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2661 = _2588;
                            _2662 = _2589;
                            _2663 = _2590;
                            _2664 = _2591;
                            _2665 = _2592;
                            _2666 = _2593;
                            _2667 = _2668;
                        }
                    }
                    frontier_phi_66_pred = _2588;
                    frontier_phi_66_pred_1 = _2593;
                    frontier_phi_66_pred_2 = _2592;
                    frontier_phi_66_pred_3 = _2591;
                    frontier_phi_66_pred_4 = _2590;
                    frontier_phi_66_pred_5 = _2589;
                }
                _2364 = frontier_phi_66_pred;
                _2374 = frontier_phi_66_pred_1;
                _2372 = frontier_phi_66_pred_2;
                _2370 = frontier_phi_66_pred_3;
                _2368 = frontier_phi_66_pred_4;
                _2366 = frontier_phi_66_pred_5;
                uint _2523 = _2522 + 1u;
                if (_2523 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2516 = _2364;
                    _2517 = _2366;
                    _2518 = _2368;
                    _2519 = _2370;
                    _2520 = _2372;
                    _2521 = _2374;
                    _2522 = _2523;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
        }
        uvec4 _2377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2378 = _2377.z;
        uint _2380 = (_2378 >> 8u) & 15u;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        if (((4294967295u << _2380) & _2262) == 0u)
        {
            _2484 = _2363;
            _2486 = _2365;
            _2488 = _2367;
            _2490 = _2369;
            _2492 = _2371;
            _2494 = _2373;
        }
        else
        {
            float _2509 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
            float _2510 = _2509 * _2216;
            float _2511 = _2509 * _2217;
            float _2512 = _2509 * _2218;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2380 < ((_2378 >> 12u) & 15u))
            {
                float _2485;
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2644 = _2363;
                float _2645 = _2365;
                float _2646 = _2367;
                float _2647 = _2369;
                float _2648 = _2371;
                float _2649 = _2373;
                uint _2650 = _2380;
                uint _2659;
                bool _2660;
                for (;;)
                {
                    _2659 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2650 << 2u)) >> 2u)).x;
                    _2660 = _2659 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2660)
                    {
                        frontier_phi_77_pred = _2649;
                        frontier_phi_77_pred_1 = _2648;
                        frontier_phi_77_pred_2 = _2647;
                        frontier_phi_77_pred_3 = _2646;
                        frontier_phi_77_pred_4 = _2645;
                        frontier_phi_77_pred_5 = _2644;
                    }
                    else
                    {
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _2866 = _2644;
                        float _2867 = _2645;
                        float _2868 = _2646;
                        float _2869 = _2647;
                        float _2870 = _2648;
                        float _2871 = _2649;
                        uint _2872 = _2659;
                        uint _2873;
                        vec4 _2898;
                        float _2899;
                        vec4 _2914;
                        vec3 _2926;
                        vec4 _2942;
                        vec4 _2958;
                        float _3005;
                        bool _3006;
                        for (;;)
                        {
                            uint _2883 = ((_2650 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2872));
                            _2873 = (_2872 + 4294967295u) & _2872;
                            uint _2885 = _2883 * 40u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            _2899 = _2898.w;
                            uint _2901 = (_2883 * 40u) + 4u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2916 = (_2883 * 40u) + 8u;
                            _2926 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x));
                            uint _2929 = (_2883 * 40u) + 16u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2945 = (_2883 * 40u) + 20u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2961 = (_2883 * 40u) + 24u;
                            vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2980 = (_2883 * 40u) + 28u;
                            vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            _3005 = fma(_2218, _2993.z, fma(_2217, _2993.y, _2993.x * _2216)) + _2993.w;
                            _3006 = !((fma(_2218, _2974.z, fma(_2217, _2974.y, _2974.x * _2216)) + _2974.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3006)
                            {
                                float _3033 = _2898.x - _2216;
                                float _3034 = _2898.y - _2217;
                                float _3035 = _2898.z - _2218;
                                float _3036 = dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035));
                                float _3039 = inversesqrt(_3036);
                                float _3040 = _3039 * _3033;
                                float _3041 = _3039 * _3034;
                                float _3042 = _3039 * _3035;
                                float _3046 = 1.0 - (_3036 / (_2899 * _2899));
                                float _4151 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3051 = sqrt(_3036) * _2914.w;
                                float _3053 = 1.39999997615814208984375 / (_3051 + 1.39999997615814208984375);
                                float _3054 = _3053 * _3053;
                                float _3057 = ((1.0 - _3054) * dot(vec3(_3040, _3041, _3042), vec3(_441, _444, _447))) + _3054;
                                float _3060 = _3051 * _3051;
                                float _3064 = (fma(_2218, _2942.z, fma(_2217, _2942.y, _2942.x * _2216)) + _2942.w) / _3005;
                                float _3065 = (fma(_2218, _2958.z, fma(_2217, _2958.y, _2958.x * _2216)) + _2958.w) / _3005;
                                float _3069 = 1.0 - dot(vec2(_3064, _3065), vec2(_3064, _3065));
                                float _4167 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3070 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3071 = _3070 * (((isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))) * _3047) / ((_3060 * 0.699999988079071044921875) + 1.0));
                                float _3083 = exp2(log2(1.0 / ((_3060 * 3.5) + 5.0)) * 0.25);
                                float _3084 = 1.0 - _517;
                                float _3091 = sqrt(1.0 - ((1.0 - (_3084 * _3084)) * (1.0 - (_3083 * _3083))));
                                float _3092 = _3091 * _3091;
                                float _3093 = _3092 * _3092;
                                float _3094 = _3040 - _2510;
                                float _3095 = _3041 - _2511;
                                float _3096 = _3042 - _2512;
                                float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
                                float _3104 = dot(vec3(_441, _444, _447), vec3((-0.0) - _2510, (-0.0) - _2511, (-0.0) - _2512));
                                float _4178 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3107 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3108 = dot(vec3(_441, _444, _447), vec3(_3100 * _3094, _3100 * _3095, _3100 * _3096));
                                float _4189 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3111 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3115 = ((_3111 * _3111) * (_3093 + (-1.0))) + 1.0;
                                float _3116 = _3053 * _3092;
                                float _3117 = _3116 * _3116;
                                float _3123 = ((1.0 - _3117) * dot(vec3(_441, _444, _447), vec3(_3040, _3041, _3042))) + _3117;
                                float _4200 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3124 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3125 = 1.0 - _3092;
                                float _3135 = (0.5 / (((_3124 * ((_3107 * _3125) + _3092)) + 9.9999999392252902907785028219223e-09) + (((_3124 * _3125) + _3092) * _3107))) * _3124;
                                float _4211 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3145 = (_3070 * _3047) * (((_3093 * 3.1415927410125732421875) * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) / ((_3115 * _3115) * ((_3060 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3071 * _2914.y;
                                frontier_phi_83_pred_1 = _3071 * _2914.x;
                                frontier_phi_83_pred_2 = _3145 * _2926.z;
                                frontier_phi_83_pred_3 = _3145 * _2926.y;
                                frontier_phi_83_pred_4 = _3145 * _2926.x;
                                frontier_phi_83_pred_5 = _3071 * _2914.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3153 = frontier_phi_83_pred;
                            _3152 = frontier_phi_83_pred_1;
                            _3151 = frontier_phi_83_pred_2;
                            _3150 = frontier_phi_83_pred_3;
                            _3149 = frontier_phi_83_pred_4;
                            _3154 = frontier_phi_83_pred_5;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            _2853 = _3149 + _2866;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            if (_2873 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2873;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2858;
                        frontier_phi_77_pred_1 = _2857;
                        frontier_phi_77_pred_2 = _2856;
                        frontier_phi_77_pred_3 = _2855;
                        frontier_phi_77_pred_4 = _2854;
                        frontier_phi_77_pred_5 = _2853;
                    }
                    _2495 = frontier_phi_77_pred;
                    _2493 = frontier_phi_77_pred_1;
                    _2491 = frontier_phi_77_pred_2;
                    _2489 = frontier_phi_77_pred_3;
                    _2487 = frontier_phi_77_pred_4;
                    _2485 = frontier_phi_77_pred_5;
                    uint _2651 = _2650 + 1u;
                    if (_2651 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2644 = _2485;
                        _2645 = _2487;
                        _2646 = _2489;
                        _2647 = _2491;
                        _2648 = _2493;
                        _2649 = _2495;
                        _2650 = _2651;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2489;
                frontier_phi_58_59_ladder_1 = _2495;
                frontier_phi_58_59_ladder_2 = _2493;
                frontier_phi_58_59_ladder_3 = _2491;
                frontier_phi_58_59_ladder_4 = _2487;
                frontier_phi_58_59_ladder_5 = _2485;
            }
            else
            {
                frontier_phi_58_59_ladder = _2367;
                frontier_phi_58_59_ladder_1 = _2373;
                frontier_phi_58_59_ladder_2 = _2371;
                frontier_phi_58_59_ladder_3 = _2369;
                frontier_phi_58_59_ladder_4 = _2365;
                frontier_phi_58_59_ladder_5 = _2363;
            }
            _2484 = frontier_phi_58_59_ladder_5;
            _2486 = frontier_phi_58_59_ladder_4;
            _2488 = frontier_phi_58_59_ladder;
            _2490 = frontier_phi_58_59_ladder_3;
            _2492 = frontier_phi_58_59_ladder_2;
            _2494 = frontier_phi_58_59_ladder_1;
        }
        float _2499 = isnan(1.0) ? _501 : (isnan(_501) ? 1.0 : min(_501, 1.0));
        _2275 = (_2499 * _2490) + _1711;
        _2277 = (_2499 * _2492) + _1713;
        _2279 = (_2499 * _2494) + _1715;
        _2281 = ((_2484 * _486) * _2499) + _2056;
        _2283 = ((_2486 * _488) * _2499) + _2058;
        _2285 = ((_2488 * _489) * _2499) + _2060;
    }
    else
    {
        _2275 = _1711;
        _2277 = _1713;
        _2279 = _1715;
        _2281 = _2056;
        _2283 = _2058;
        _2285 = _2060;
    }
    float _4227 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _4238 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4249 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _2302 = ((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2275 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _501))) + ((_2281 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1343)) * cbPerFrame._m0[3u].x);
    float _2303 = ((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2277 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _501))) + ((_2283 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1343)) * cbPerFrame._m0[3u].x);
    float _2304 = ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2279 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _501))) + ((_2285 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1343)) * cbPerFrame._m0[3u].x);
    uint _2305 = _460 + 6u;
    float _2313 = _420 / cbSceneParam._m0[86u].x;
    float _2314 = _421 / cbSceneParam._m0[86u].y;
    vec4 _2328 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2313, _2314, (log2((isnan(cbSceneParam._m0[77u].w) ? _340 : (isnan(_340) ? cbSceneParam._m0[77u].w : min(_340, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2330 = _2328.x;
    float _2331 = _2328.y;
    float _2332 = _2328.z;
    float _2333 = _2328.w;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    if (_340 > cbSceneParam._m0[78u].w)
    {
        float _2388 = isnan(_340) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _340 : min(cbSceneParam._m0[80u].w, _340));
        float _2389 = _2388 / _340;
        float _2400 = _2389 * _392;
        float _2401 = _393 * _2389;
        float _2402 = (-0.0) - _2401;
        float _2404 = _2389 * _394;
        float _2406 = (cbSceneParam._m0[77u].w * _2402) / _2388;
        float _2407 = _2406 + cbSceneParam._m0[79u].w;
        float _2408 = cbSceneParam._m0[79u].w - _2401;
        float _2414 = sqrt(((_2400 * _2400) + (_2401 * _2401)) + (_2404 * _2404));
        float _2417 = (1.0 - (cbSceneParam._m0[77u].w / _2388)) * _2414;
        float _2422 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2424 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2601;
        if (abs((_2402 - _2406) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2601 = ((((_2407 > 0.0) ? exp2(_2422 * _2407) : (2.0 - exp2(_2424 * _2407))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2417;
        }
        else
        {
            float _2545 = 1.0 / cbSceneParam._m0[80u].x;
            float _2546 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : max(_2407, _2408));
            float _2547 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : min(_2407, _2408));
            float _2556 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : min(_2546, 0.0));
            float _2557 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : min(_2547, 0.0));
            _2601 = ((abs(_2414 / _2402) * cbSceneParam._m0[80u].y) * ((((_2556 - _2557) * 2.0) - ((exp2(_2422 * (isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0)))) - exp2(_2422 * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0))))) * _2545)) - ((exp2(_2424 * _2556) - exp2(_2424 * _2557)) * _2545))) + (_2417 * cbSceneParam._m0[80u].z);
        }
        vec4 _2603 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2313, _2314, 1.0), 0.0);
        float _2612 = exp2((_2601 * (-1.44269502162933349609375)) * (1.0 - _2603.w));
        float _2613 = log2(_2612);
        float _2629 = log2(_2333);
        _2426 = (exp2(_2629 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].x)) * _2603.x) / cbSceneParam._m0[78u].x)) + _2330;
        _2428 = (exp2(_2629 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].y)) * _2603.y) / cbSceneParam._m0[78u].y)) + _2331;
        _2430 = (exp2(_2629 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].z)) * _2603.z) / cbSceneParam._m0[78u].z)) + _2332;
        _2432 = _2612 * _2333;
    }
    else
    {
        _2426 = _2330;
        _2428 = _2331;
        _2430 = _2332;
        _2432 = _2333;
    }
    bool _2639;
    vec4 _2442;
    vec4 _2464;
    float _2466;
    float _2470;
    float _2471;
    float _2472;
    float _2473;
    bool _2483;
    for (;;)
    {
        _2442 = cbMatDynParam._m0[0u];
        float _2444 = roundEven(_2442.y);
        bool _2445 = _2444 == 3.0;
        float _2446 = log2(_2432);
        float _2453 = exp2(_2446 * cbSceneParam._m0[78u].x) * _2302;
        float _2454 = exp2(_2446 * cbSceneParam._m0[78u].y) * _2303;
        float _2455 = exp2(_2446 * cbSceneParam._m0[78u].z) * _2304;
        float _2462 = _408 + (-0.5);
        _2464 = cbMtdParam._m0[1u];
        _2466 = _2464.y * _2462;
        float _2469 = (_2444 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2470 = _2469 * (_2445 ? _2453 : (_2453 + (cbSceneParam._m0[72u].w * _2426)));
        _2471 = _2469 * (_2445 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2428)));
        _2472 = _2469 * (_2445 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2430)));
        _2473 = _2462 * 0.999000012874603271484375;
        _2483 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2483)
        {
            if ((cbInstanceData._m0[_460 + 7u].x + _2473) < 0.5)
            {
                _2639 = true;
                break;
            }
        }
        uint _2580 = _462 + uint(_2442.w);
        if ((cbInstanceData._m0[_2580].w < 1.0) && ((cbInstanceData._m0[_2580].w + _2473) < 0.5))
        {
            _2639 = true;
            break;
        }
        if ((_263 + _2466) < _2464.x)
        {
            _2639 = true;
            break;
        }
        _2639 = false;
        break;
    }
    float _2844;
    if (_2639)
    {
        discard_state = true;
        _2844 = 0.0;
    }
    else
    {
        _2844 = cbInstanceData._m0[_2305].w;
    }
    SV_Target.x = _2470;
    SV_Target.y = _2471;
    SV_Target.z = _2472;
    SV_Target.w = _2844;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2305].w;
    discard_exit();
}


