#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _912;
float _3367;
float _3368;
float _3369;
float _3370;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _234 = texture(sampler2D(M_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _234.x;
    float _238 = _234.y;
    float _239 = _234.z;
    float _240 = _234.w;
    float _241 = _240 * TEXCOORD_1.z;
    vec4 _257 = texture(sampler2D(M_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _260 = _257.x + cbMtdParam._m0[9u].x;
    vec4 _272 = texture(sampler2D(M_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _272.z;
    float _280 = (_272.x * 2.0) + (-1.0);
    float _282 = (_272.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3379 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))));
    vec4 _302 = texture(sampler2D(M_AMSN_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    float _312 = fma(_289, _218, fma(_282, _210 * TANGENT.x, (_196 * _188) * _280));
    float _315 = fma(_289, _219, fma(_282, _210 * TANGENT.y, (_196 * _189) * _280));
    float _318 = fma(_289, _220, fma(_282, _210 * TANGENT.z, (_196 * _190) * _280));
    float _322 = inversesqrt(dot(vec3(_312, _315, _318), vec3(_312, _315, _318)));
    float _323 = _322 * _312;
    float _324 = _322 * _315;
    float _325 = _322 * _318;
    float _3390 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _326 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _3401 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _327 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3423 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3434 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3445 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _331 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _347 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _389 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _399 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _389);
    float _400 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _389);
    float _401 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _389);
    float _405 = inversesqrt(dot(vec3(_399, _400, _401), vec3(_399, _400, _401)));
    float _406 = _399 * _405;
    float _407 = _400 * _405;
    float _408 = _401 * _405;
    vec4 _413 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _415 = _413.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _591 = sqrt(((_399 * _399) + (_400 * _400)) + (_401 * _401));
        float _597 = (cbMatDynParam._m0[5u].x * _591) + cbMatDynParam._m0[5u].y;
        float _3456 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        float _598 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _602 = (cbMatDynParam._m0[5u].z * _591) + cbMatDynParam._m0[5u].w;
        float _3467 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) - _598)) + _598) < ((_415 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _427 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _428 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _448 = fma(_325, cbSceneParam._m0[5u].z, fma(_324, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _323));
    float _451 = fma(_325, cbSceneParam._m0[6u].z, fma(_324, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _323));
    float _454 = fma(_325, cbSceneParam._m0[7u].z, fma(_324, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _323));
    uint _467 = uint(roundEven(NORMAL.w)) * 13u;
    uint _469 = _467 + 9u;
    uint _470 = _469 + uint(cbMatDynParam._m0[0u].w);
    float _476 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * cbInstanceData._m0[_470].x;
    float _477 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) * cbInstanceData._m0[_470].y;
    float _478 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * cbInstanceData._m0[_470].z;
    float _3478 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _3489 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _3500 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _482 = 1.0 - _331;
    float _483 = _479 * _482;
    float _484 = _480 * _482;
    float _485 = _481 * _482;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _331;
    float _491 = (_480 + (-0.039999999105930328369140625)) * _331;
    float _492 = (_481 + (-0.039999999105930328369140625)) * _331;
    float _493 = _490 + 0.039999999105930328369140625;
    float _495 = _491 + 0.039999999105930328369140625;
    float _496 = _492 + 0.039999999105930328369140625;
    vec4 _505 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _427, cbSceneParam._m0[86u].y * _428));
    float _508 = _505.x * TEXCOORD_1.w;
    float _509 = dot(vec3(_323, _324, _325), vec3(_406, _407, _408));
    float _512 = _509 * 2.0;
    float _516 = (_512 * _323) - _406;
    float _517 = (_512 * _324) - _407;
    float _518 = (_512 * _325) - _408;
    float _522 = abs(dot(vec3(_406, _407, _408), vec3(_323, _324, _325)));
    float _3511 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _524 = sqrt(_327);
    float _537 = exp2((_524 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_524 * 3.0));
    float _543 = (1.0 - _537) * ((_524 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _544 = _537 * _524;
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _911;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _636 = fma(_580, cbModelParam._m0[26u].z, fma(_576, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _572));
        float _640 = fma(_580, cbModelParam._m0[27u].z, fma(_576, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _572));
        float _644 = fma(_580, cbModelParam._m0[28u].z, fma(_576, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _572));
        float _669 = _572 + _323;
        float _670 = _576 + _324;
        float _671 = _580 + _325;
        float _681 = fma(_671, cbModelParam._m0[26u].z, fma(_670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _669)) - _636;
        float _682 = fma(_671, cbModelParam._m0[27u].z, fma(_670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _669)) - _640;
        float _683 = fma(_671, cbModelParam._m0[28u].z, fma(_670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _669)) - _644;
        float _687 = inversesqrt(dot(vec3(_681, _682, _683), vec3(_681, _682, _683)));
        float _700 = ((_687 * _681) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_636 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _701 = ((_687 * _682) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_640 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _702 = ((_687 * _683) / cbModelParam._m0[34u].z) + ((((((_644 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        float _739 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_705.x + (-0.5));
        float _741 = _739 * (_705.y + (-0.5));
        float _742 = _739 * (_705.z + (-0.5));
        float _749 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_712.x + (-0.5));
        float _751 = _749 * (_712.y + (-0.5));
        float _752 = _749 * (_712.z + (-0.5));
        float _759 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_719.x + (-0.5));
        float _761 = _759 * (_719.y + (-0.5));
        float _762 = _759 * (_719.z + (-0.5));
        float _769 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_726.x + (-0.5));
        float _771 = _769 * (_726.y + (-0.5));
        float _772 = _769 * (_726.z + (-0.5));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = _740 * 0.5;
        float _777 = _750 * 0.5;
        float _778 = _760 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _793 = (dot(vec3(_323, _324, _325), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _803 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _805 = _804 * 2.0;
        float _809 = (1.0 - _804) / (_804 + 1.0);
        float _3559 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _819 = ((((1.0 - _810) * (_805 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_805 + 1.0))) + _810) * _773;
        float _820 = _741 * 0.5;
        float _821 = _751 * 0.5;
        float _822 = _761 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _836 = (dot(vec3(_323, _324, _325), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _845 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3592 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_847 + 1.0))) + _852) * _774;
        float _862 = _742 * 0.5;
        float _863 = _752 * 0.5;
        float _864 = _762 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _878 = (dot(vec3(_323, _324, _325), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _887 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3625 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_889 + 1.0))) + _894) * _775;
        _911 = _742;
        _913 = _741;
        _914 = _740;
        _915 = _752;
        _916 = _751;
        _917 = _750;
        _918 = _762;
        _919 = _761;
        _920 = _760;
        _921 = _775;
        _922 = _774;
        _923 = _773;
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0)));
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
    }
    else
    {
        _911 = _912;
        _913 = _912;
        _914 = _912;
        _915 = _912;
        _916 = _912;
        _917 = _912;
        _918 = _912;
        _919 = _912;
        _920 = _912;
        _921 = _912;
        _922 = _912;
        _923 = _912;
        _924 = 0.0;
        _925 = 0.0;
        _926 = 0.0;
    }
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _955 = fma(_580, cbModelParam._m0[30u].z, fma(_576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _572));
        float _959 = fma(_580, cbModelParam._m0[31u].z, fma(_576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _572));
        float _963 = fma(_580, cbModelParam._m0[32u].z, fma(_576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _572));
        float _986 = _572 + _323;
        float _987 = _576 + _324;
        float _988 = _580 + _325;
        float _998 = fma(_988, cbModelParam._m0[30u].z, fma(_987, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _986)) - _955;
        float _999 = fma(_988, cbModelParam._m0[31u].z, fma(_987, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _986)) - _959;
        float _1000 = fma(_988, cbModelParam._m0[32u].z, fma(_987, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _986)) - _963;
        float _1004 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
        float _1017 = ((_1004 * _998) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_955 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1004 * _999) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_959 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1004 * _1000) / cbModelParam._m0[35u].z) + ((((((_963 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        float _1054 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1021.x + (-0.5));
        float _1056 = _1054 * (_1021.y + (-0.5));
        float _1057 = _1054 * (_1021.z + (-0.5));
        float _1064 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1028.x + (-0.5));
        float _1066 = _1064 * (_1028.y + (-0.5));
        float _1067 = _1064 * (_1028.z + (-0.5));
        float _1074 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1035.x + (-0.5));
        float _1076 = _1074 * (_1035.y + (-0.5));
        float _1077 = _1074 * (_1035.z + (-0.5));
        float _1084 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1042.x + (-0.5));
        float _1086 = _1084 * (_1042.y + (-0.5));
        float _1087 = _1084 * (_1042.z + (-0.5));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = _1055 * 0.5;
        float _1092 = _1065 * 0.5;
        float _1093 = _1075 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_323, _324, _325), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3688 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1118 + 1.0))) + _1123) * _1088;
        float _1133 = _1056 * 0.5;
        float _1134 = _1066 * 0.5;
        float _1135 = _1076 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_323, _324, _325), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3721 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1160 + 1.0))) + _1165) * _1089;
        float _1175 = _1057 * 0.5;
        float _1176 = _1067 * 0.5;
        float _1177 = _1077 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_323, _324, _325), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3754 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1202 + 1.0))) + _1207) * _1090;
        _1224 = _1057;
        _1225 = _1056;
        _1226 = _1055;
        _1227 = _1067;
        _1228 = _1066;
        _1229 = _1065;
        _1230 = _1077;
        _1231 = _1076;
        _1232 = _1075;
        _1233 = _1090;
        _1234 = _1089;
        _1235 = _1088;
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1237 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
    }
    else
    {
        _1224 = _912;
        _1225 = _912;
        _1226 = _912;
        _1227 = _912;
        _1228 = _912;
        _1229 = _912;
        _1230 = _912;
        _1231 = _912;
        _1232 = _912;
        _1233 = _912;
        _1234 = _912;
        _1235 = _912;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _924)) + _924;
    float _1249 = (cbModelParam._m0[1u].x * (_1237 - _925)) + _925;
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _926)) + _926;
    float _1271 = fma(_1250, cbSceneParam._m0[89u].z, fma(_1249, cbSceneParam._m0[89u].y, _1248 * cbSceneParam._m0[89u].x));
    float _1274 = fma(_1250, cbSceneParam._m0[90u].z, fma(_1249, cbSceneParam._m0[90u].y, _1248 * cbSceneParam._m0[90u].x));
    float _1277 = fma(_1250, cbSceneParam._m0[91u].z, fma(_1249, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1248));
    float _1292 = _516 * 0.5;
    float _1293 = _517 * 0.5;
    float _1294 = _518 * 0.5;
    float _1295 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1298 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1225, _1228, _1231, _1234));
    float _1301 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1335;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1308 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_911, _915, _918, _921));
        float _1312 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_913, _916, _919, _922));
        float _1316 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_914, _917, _920, _923));
        float _1323 = dot(vec4(cbModelParam._m0[39u]), vec4(_1292, _1293, _1294, 1.0));
        _1335 = dot(vec3(isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1323) ? 0.0 : (isnan(0.0) ? _1323 : max(0.0, _1323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1335 = 1.0;
    }
    float _1346;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1337 = dot(vec4(cbModelParam._m0[40u]), vec4(_1292, _1293, _1294, 1.0));
        _1346 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1346 = 1.0;
    }
    float _1350 = (_1346 * cbModelParam._m0[1u].x) + (_1335 * (1.0 - cbModelParam._m0[1u].x));
    float _1360 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _327);
    float _1361 = isnan(_1360) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1360 : min(cbModelParam._m0[25u].z, _1360));
    float _1443;
    float _1445;
    float _1447;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1410 = fma(_580, cbModelParam._m0[13u].z, fma(_576, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _572)) + cbModelParam._m0[13u].w;
        float _1414 = fma(_580, cbModelParam._m0[14u].z, fma(_576, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _572)) + cbModelParam._m0[14u].w;
        float _1418 = fma(_580, cbModelParam._m0[15u].z, fma(_576, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _572)) + cbModelParam._m0[15u].w;
        float _1421 = fma(_518, cbModelParam._m0[13u].z, fma(_517, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _516));
        float _1424 = fma(_518, cbModelParam._m0[14u].z, fma(_517, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _516));
        float _1427 = fma(_518, cbModelParam._m0[15u].z, fma(_517, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _516));
        float _1455;
        if (_1421 > 0.0)
        {
            _1455 = abs((1.0 - _1410) / _1421);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1410 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1455 = frontier_phi_19_17_ladder;
        }
        float _1684;
        if (_1424 > 0.0)
        {
            _1684 = abs((1.0 - _1414) / _1424);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1414 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1684 = frontier_phi_28_24_ladder;
        }
        float _1941;
        if (_1427 > 0.0)
        {
            _1941 = abs((1.0 - _1418) / _1427);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1418 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1941 = frontier_phi_40_35_ladder;
        }
        float _1943 = isnan(_1684) ? _1455 : (isnan(_1455) ? _1684 : min(_1455, _1684));
        float _1944 = isnan(_1941) ? _1943 : (isnan(_1943) ? _1941 : min(_1943, _1941));
        float _1948 = (_1944 * _1421) + _1410;
        float _1949 = (_1944 * _1424) + _1414;
        float _1950 = (_1944 * _1427) + _1418;
        float _1951 = _1944 * 9.9999997473787516355514526367188e-05;
        float _1953 = (-1.0) - _1951;
        float _1955 = _1951 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1950 > _1955) || ((_1950 < _1953) || ((_1949 > _1955) || ((_1949 < _1953) || ((_1948 < _1953) || (_1948 > _1955))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2078 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1950, cbModelParam._m0[9u].z, fma(_1949, cbModelParam._m0[9u].y, _1948 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1950, cbModelParam._m0[10u].z, fma(_1949, cbModelParam._m0[10u].y, _1948 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1950, cbModelParam._m0[11u].z, fma(_1949, cbModelParam._m0[11u].y, _1948 * cbModelParam._m0[11u].x))), _1361);
            frontier_phi_18_40_ladder = _2078.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2078.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2078.x * cbModelParam._m0[1u].y;
        }
        _1443 = frontier_phi_18_40_ladder_2;
        _1445 = frontier_phi_18_40_ladder_1;
        _1447 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_516, _517, _518), _1361);
        _1443 = _1431.x * cbModelParam._m0[1u].y;
        _1445 = _1431.y * cbModelParam._m0[1u].y;
        _1447 = _1431.z * cbModelParam._m0[1u].y;
    }
    float _1451 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _327);
    float _1452 = isnan(_1451) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1451 : min(cbModelParam._m0[25u].w, _1451));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1509 = fma(_580, cbModelParam._m0[21u].z, fma(_576, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _572)) + cbModelParam._m0[21u].w;
        float _1513 = fma(_580, cbModelParam._m0[22u].z, fma(_576, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _572)) + cbModelParam._m0[22u].w;
        float _1517 = fma(_580, cbModelParam._m0[23u].z, fma(_576, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _572)) + cbModelParam._m0[23u].w;
        float _1520 = fma(_518, cbModelParam._m0[21u].z, fma(_517, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _516));
        float _1523 = fma(_518, cbModelParam._m0[22u].z, fma(_517, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _516));
        float _1526 = fma(_518, cbModelParam._m0[23u].z, fma(_517, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _516));
        float _1689;
        if (_1520 > 0.0)
        {
            _1689 = abs((1.0 - _1509) / _1520);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1509 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1689 = frontier_phi_30_26_ladder;
        }
        float _1968;
        if (_1523 > 0.0)
        {
            _1968 = abs((1.0 - _1513) / _1523);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1513 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1968 = frontier_phi_42_37_ladder;
        }
        float _2181;
        if (_1526 > 0.0)
        {
            _2181 = abs((1.0 - _1517) / _1526);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1517 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2181 = frontier_phi_51_48_ladder;
        }
        float _2183 = isnan(_1968) ? _1689 : (isnan(_1689) ? _1968 : min(_1689, _1968));
        float _2184 = isnan(_2181) ? _2183 : (isnan(_2183) ? _2181 : min(_2183, _2181));
        float _2188 = (_2184 * _1520) + _1509;
        float _2189 = (_2184 * _1523) + _1513;
        float _2190 = (_2184 * _1526) + _1517;
        float _2191 = _2184 * 9.9999997473787516355514526367188e-05;
        float _2192 = (-1.0) - _2191;
        float _2194 = _2191 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2190 > _2194) || ((_2190 < _2192) || ((_2189 > _2194) || ((_2189 < _2192) || ((_2188 < _2192) || (_2188 > _2194))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2419 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2190, cbModelParam._m0[17u].z, fma(_2189, cbModelParam._m0[17u].y, _2188 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2190, cbModelParam._m0[18u].z, fma(_2189, cbModelParam._m0[18u].y, _2188 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2190, cbModelParam._m0[19u].z, fma(_2189, cbModelParam._m0[19u].y, _2188 * cbModelParam._m0[19u].x))), _1452);
            frontier_phi_27_51_ladder = _2419.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2419.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2419.x * cbModelParam._m0[1u].z;
        }
        _1545 = frontier_phi_27_51_ladder_2;
        _1547 = frontier_phi_27_51_ladder_1;
        _1549 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_516, _517, _518), _1452);
        _1545 = _1529.x * cbModelParam._m0[1u].z;
        _1547 = _1529.y * cbModelParam._m0[1u].z;
        _1549 = _1529.z * cbModelParam._m0[1u].z;
    }
    float _1562 = (((_543 * _493) + _544) * _508) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1564 = (((_543 * _495) + _544) * _508) * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1566 = (((_543 * _496) + _544) * _508) * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1569 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1562 * cbSceneParam._m0[89u].x));
    float _1572 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1562 * cbSceneParam._m0[90u].x));
    float _1575 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, _1562 * cbSceneParam._m0[91u].x));
    vec4 _1583 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_427, _428));
    float _1585 = _1583.w;
    float _1597 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1585);
    float _1598 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1585);
    float _1599 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1585);
    uvec4 _1603 = floatBitsToUint(cbInstanceData._m0[_467 + 5u]);
    uint _1605 = _1603.x * 14u;
    uint _1606 = _1605 + 13u;
    float _1613 = _508 + (-1.0);
    float _1618 = (cbLight._m0[_1606].x * _1613) + 1.0;
    float _1619 = (cbLight._m0[_1606].y * _1613) + 1.0;
    float _1620 = (cbLight._m0[_1606].z * _1613) + 1.0;
    float _1621 = (cbLight._m0[_1606].w * _1613) + 1.0;
    uint _1622 = _1605 + 5u;
    float _1628 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
    uint _1632 = _1605 + 4u;
    float _1642 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
    uint _1646 = _1605 | 1u;
    float _1657 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_323, _324, _325));
    float _1660 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_323, _324, _325));
    float _3890 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _3901 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1665 = (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * 0.3183098733425140380859375;
    float _1667 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * 0.3183098733425140380859375;
    float _1674 = ((cbLight._m0[_1622].x * _1628) * _1667) + (((cbLight._m0[_1632].x * _1597) * _1642) * _1665);
    float _1675 = ((_1628 * cbLight._m0[_1622].y) * _1667) + (((cbLight._m0[_1632].y * _1598) * _1642) * _1665);
    float _1676 = ((_1628 * cbLight._m0[_1622].z) * _1667) + (((cbLight._m0[_1632].z * _1599) * _1642) * _1665);
    uvec4 _1681 = floatBitsToUint(cbLight._m0[_1605 + 12u]);
    bool _1683 = _1681.x == 0u;
    float _1694;
    float _1696;
    float _1698;
    if (_1683)
    {
        _1694 = _1674;
        _1696 = _1675;
        _1698 = _1676;
    }
    else
    {
        uint _1702 = _1605 + 6u;
        float _1718 = (dot(vec3(cbLight._m0[_1605 + 2u].xyz), vec3(_323, _324, _325)) * 0.5) + 0.5;
        float _1719 = _1718 * _1718;
        float _3912 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1721 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1694 = (((cbLight._m0[_1702].x * 0.3183098733425140380859375) * _1720) * _1721) + _1674;
        _1696 = (((cbLight._m0[_1702].y * 0.3183098733425140380859375) * _1720) * _1721) + _1675;
        _1698 = (((cbLight._m0[_1702].z * 0.3183098733425140380859375) * _1720) * _1721) + _1676;
    }
    bool _1701 = _1681.y == 0u;
    float _1739;
    float _1741;
    float _1743;
    if (_1701)
    {
        _1739 = _1694;
        _1741 = _1696;
        _1743 = _1698;
    }
    else
    {
        uint _1912 = _1605 + 7u;
        float _1928 = (dot(vec3(cbLight._m0[_1605 + 3u].xyz), vec3(_323, _324, _325)) * 0.5) + 0.5;
        float _1929 = _1928 * _1928;
        float _3928 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1930 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1931 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _1739 = (((cbLight._m0[_1912].x * 0.3183098733425140380859375) * _1930) * _1931) + _1694;
        _1741 = (((cbLight._m0[_1912].y * 0.3183098733425140380859375) * _1930) * _1931) + _1696;
        _1743 = (((cbLight._m0[_1912].z * 0.3183098733425140380859375) * _1930) * _1931) + _1698;
    }
    uint _1746 = _1605 + 8u;
    float _1759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1605].w)) * _327) * 0.949999988079071044921875);
    float _1760 = _1759 * _1759;
    float _1761 = cbLight._m0[_1605].x + _406;
    float _1762 = cbLight._m0[_1605].y + _407;
    float _1763 = cbLight._m0[_1605].z + _408;
    float _1767 = inversesqrt(dot(vec3(_1761, _1762, _1763), vec3(_1761, _1762, _1763)));
    float _1768 = _1767 * _1761;
    float _1769 = _1767 * _1762;
    float _1770 = _1767 * _1763;
    float _1771 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_1605].xyz));
    float _3944 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _1775 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _1776 = dot(vec3(_323, _324, _325), vec3(_1768, _1769, _1770));
    float _3966 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _1780 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_1768, _1769, _1770));
    float _3977 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1784 = _1760 * _1760;
    float _1788 = ((_1779 * _1779) * (_1784 + (-1.0))) + 1.0;
    float _1796 = exp2(log2(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * 5.0);
    float _1797 = 0.959999978542327880859375 - _490;
    float _1799 = 0.959999978542327880859375 - _491;
    float _1800 = 0.959999978542327880859375 - _492;
    float _1807 = 1.0 - _1760;
    float _1818 = (0.5 / (((_1775 * ((_1774 * _1807) + _1760)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _1807) + _1760) * _1774))) * _1774;
    float _3988 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1820 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1784 / ((_1788 * _1788) * 3.141590118408203125));
    uint _1834 = _1605 + 9u;
    float _1845 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1646].w)) * _327) * 0.949999988079071044921875);
    float _1846 = _1845 * _1845;
    float _1847 = cbLight._m0[_1646].x + _406;
    float _1848 = cbLight._m0[_1646].y + _407;
    float _1849 = cbLight._m0[_1646].z + _408;
    float _1853 = inversesqrt(dot(vec3(_1847, _1848, _1849), vec3(_1847, _1848, _1849)));
    float _1854 = _1853 * _1847;
    float _1855 = _1853 * _1848;
    float _1856 = _1853 * _1849;
    float _1857 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_1646].xyz));
    float _3999 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1861 = dot(vec3(_323, _324, _325), vec3(_1854, _1855, _1856));
    float _4010 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1864 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1865 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_1854, _1855, _1856));
    float _4021 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1869 = _1846 * _1846;
    float _1873 = ((_1864 * _1864) * (_1869 + (-1.0))) + 1.0;
    float _1880 = exp2(log2(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * 5.0);
    float _1887 = 1.0 - _1846;
    float _1897 = (0.5 / (((_1775 * ((_1860 * _1887) + _1846)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _1887) + _1846) * _1860))) * _1860;
    float _4032 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1899 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1869 / ((_1873 * _1873) * 3.141590118408203125));
    float _1909 = (((((_1880 * _1797) + _493) * cbLight._m0[_1834].x) * _1899) * _1628) + ((((cbLight._m0[_1746].x * _1597) * ((_1796 * _1797) + _493)) * _1820) * _1642);
    float _1910 = (((((_1880 * _1799) + _495) * cbLight._m0[_1834].y) * _1899) * _1628) + ((((cbLight._m0[_1746].y * _1598) * ((_1796 * _1799) + _495)) * _1820) * _1642);
    float _1911 = (((((_1880 * _1800) + _496) * cbLight._m0[_1834].z) * _1899) * _1628) + ((((cbLight._m0[_1746].z * _1599) * ((_1796 * _1800) + _496)) * _1820) * _1642);
    float _1973;
    float _1975;
    float _1977;
    if (_1683)
    {
        _1973 = _1909;
        _1975 = _1910;
        _1977 = _1911;
    }
    else
    {
        uint _1979 = _1605 + 2u;
        uint _1983 = _1605 + 10u;
        float _1997 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _327) * 0.949999988079071044921875);
        float _1998 = _1997 * _1997;
        float _1999 = cbLight._m0[_1979].x + _406;
        float _2000 = cbLight._m0[_1979].y + _407;
        float _2001 = cbLight._m0[_1979].z + _408;
        float _2005 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
        float _2006 = _2005 * _1999;
        float _2007 = _2005 * _2000;
        float _2008 = _2005 * _2001;
        float _2009 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_1979].xyz));
        float _4043 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2012 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2013 = dot(vec3(_323, _324, _325), vec3(_2006, _2007, _2008));
        float _4054 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2016 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2017 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2006, _2007, _2008));
        float _4065 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2021 = _1998 * _1998;
        float _2025 = ((_2016 * _2016) * (_2021 + (-1.0))) + 1.0;
        float _2032 = exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0);
        float _2039 = 1.0 - _1998;
        float _2049 = (0.5 / (((_1775 * ((_2012 * _2039) + _1998)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _2039) + _1998) * _2012))) * _2012;
        float _4076 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2051 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2021 / ((_2025 * _2025) * 3.141590118408203125));
        float _2052 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1973 = (((((_2032 * _1797) + _493) * cbLight._m0[_1983].x) * _2051) * _2052) + _1909;
        _1975 = (((((_2032 * _1799) + _495) * cbLight._m0[_1983].y) * _2051) * _2052) + _1910;
        _1977 = (((((_2032 * _1800) + _496) * cbLight._m0[_1983].z) * _2051) * _2052) + _1911;
    }
    float _2087;
    float _2089;
    float _2091;
    if (_1701)
    {
        _2087 = _1973;
        _2089 = _1975;
        _2091 = _1977;
    }
    else
    {
        uint _2098 = _1605 + 3u;
        uint _2102 = _1605 + 11u;
        float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _327) * 0.949999988079071044921875);
        float _2117 = _2116 * _2116;
        float _2118 = cbLight._m0[_2098].x + _406;
        float _2119 = cbLight._m0[_2098].y + _407;
        float _2120 = cbLight._m0[_2098].z + _408;
        float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
        float _2125 = _2124 * _2118;
        float _2126 = _2124 * _2119;
        float _2127 = _2124 * _2120;
        float _2128 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_2098].xyz));
        float _4092 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2132 = dot(vec3(_323, _324, _325), vec3(_2125, _2126, _2127));
        float _4103 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2135 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2136 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2125, _2126, _2127));
        float _4114 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2140 = _2117 * _2117;
        float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
        float _2151 = exp2(log2(1.0 - (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * 5.0);
        float _2158 = 1.0 - _2117;
        float _2168 = (0.5 / (((_1775 * ((_2131 * _2158) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _2158) + _2117) * _2131))) * _2131;
        float _4125 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2170 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
        float _2171 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _2087 = (((((_2151 * _1797) + _493) * cbLight._m0[_2102].x) * _2170) * _2171) + _1973;
        _2089 = (((((_2151 * _1799) + _495) * cbLight._m0[_2102].y) * _2170) * _2171) + _1975;
        _2091 = (((((_2151 * _1800) + _496) * cbLight._m0[_2102].z) * _2170) * _2171) + _1977;
    }
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    if (_1603.y == 0u)
    {
        float _2246 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2247 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2246;
        float _2248 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2246;
        float _2249 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2246;
        uvec4 _2261 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2262 = _2261.x;
        uint _2273 = uint((float(_2261.y) * floor(float(uint(cbSceneParam._m0[85u].y * _428) / _2262))) + floor(float(uint(cbSceneParam._m0[85u].x * _427) / _2262)));
        float _2283 = (log2(_2249 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2284 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        uint _2287 = uint(isnan(14.0) ? _2284 : (isnan(_2284) ? 14.0 : min(_2284, 14.0)));
        uvec4 _2292 = texelFetch(g_lightClusterGridBuffer, int(((_2287 << 2u) + (_2273 << 6u)) >> 2u));
        uint _2293 = _2292.x;
        uint _2294 = _2261.z;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        if (((((1u << ((_2294 >> 4u) & 15u)) + 4294967295u) & _2293) == 0u) || ((_2294 & 240u) == 0u))
        {
            _2424 = 0.0;
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
        }
        else
        {
            float _2425;
            float _2427;
            float _2429;
            float _2431;
            float _2433;
            float _2435;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            uint _2591 = 0u;
            uint _2600;
            bool _2601;
            for (;;)
            {
                _2600 = texelFetch(g_lightClassification, int((((_2287 << 5u) + (_2273 << 9u)) + (_2591 << 2u)) >> 2u)).x;
                _2601 = _2600 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2601)
                {
                    frontier_phi_68_pred = _2587;
                    frontier_phi_68_pred_1 = _2590;
                    frontier_phi_68_pred_2 = _2589;
                    frontier_phi_68_pred_3 = _2588;
                    frontier_phi_68_pred_4 = _2586;
                    frontier_phi_68_pred_5 = _2585;
                }
                else
                {
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    uint _2736;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2600;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    for (;;)
                    {
                        uint _2740 = uint(findLSB(_2736)) + (_2591 << 5u);
                        uint _2737 = (_2736 + 4294967295u) & _2736;
                        uint _2742 = _2740 * 48u;
                        vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2742)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 3u)).x));
                        uint _2762 = (_2740 * 48u) + 4u;
                        vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2762)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 3u)).x));
                        uint _2781 = (_2740 * 48u) + 8u;
                        vec3 _2792 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x));
                        float _2796 = _2756.x - _2247;
                        float _2797 = _2756.y - _2248;
                        float _2798 = _2756.z - _2249;
                        float _2799 = dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798));
                        float _2802 = inversesqrt(_2799);
                        float _2803 = _2802 * _2796;
                        float _2804 = _2802 * _2797;
                        float _2805 = _2802 * _2798;
                        float _2806 = dot(vec3(_448, _451, _454), vec3(_2803, _2804, _2805));
                        float _2811 = 1.0 - (_2799 * _2756.w);
                        float _4151 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2812 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                        float _2813 = sqrt(_2799) * _2775.w;
                        float _2816 = 1.39999997615814208984375 / (_2813 + 1.39999997615814208984375);
                        float _2817 = _2816 * _2816;
                        float _2820 = ((1.0 - _2817) * _2806) + _2817;
                        float _2823 = _2813 * _2813;
                        float _2827 = ((isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))) * _2812) / ((_2823 * 0.699999988079071044921875) + 1.0);
                        float _2831 = (-0.0) - _2247;
                        float _2832 = (-0.0) - _2248;
                        float _2833 = (-0.0) - _2249;
                        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
                        float _2838 = _2837 * _2831;
                        float _2839 = _2837 * _2832;
                        float _2840 = _2837 * _2833;
                        float _2848 = exp2(log2(1.0 / ((_2823 * 3.5) + 5.0)) * 0.25);
                        float _2849 = 1.0 - _524;
                        float _2856 = sqrt(1.0 - ((1.0 - (_2849 * _2849)) * (1.0 - (_2848 * _2848))));
                        float _2857 = _2856 * _2856;
                        float _2858 = _2857 * _2857;
                        float _2859 = _2838 + _2803;
                        float _2860 = _2839 + _2804;
                        float _2861 = _2840 + _2805;
                        float _2865 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
                        float _2869 = dot(vec3(_448, _451, _454), vec3(_2838, _2839, _2840));
                        float _4167 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2872 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                        float _2873 = dot(vec3(_448, _451, _454), vec3(_2865 * _2859, _2865 * _2860, _2865 * _2861));
                        float _4178 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2876 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2880 = ((_2876 * _2876) * (_2858 + (-1.0))) + 1.0;
                        float _2881 = _2816 * _2857;
                        float _2882 = _2881 * _2881;
                        float _2885 = ((1.0 - _2882) * _2806) + _2882;
                        float _4189 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2886 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                        float _2887 = 1.0 - _2857;
                        float _2897 = (0.5 / (((_2886 * ((_2872 * _2887) + _2857)) + 9.9999999392252902907785028219223e-09) + (((_2886 * _2887) + _2857) * _2872))) * _2886;
                        float _4200 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2908 = (((_2858 * 3.1415927410125732421875) * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) / ((_2880 * _2880) * ((_2823 * 2.1991131305694580078125) + 3.141590118408203125))) * _2812;
                        _2660 = (_2827 * _2775.x) + _2733;
                        _2661 = (_2827 * _2775.y) + _2734;
                        _2662 = (_2827 * _2775.z) + _2735;
                        _2657 = (_2908 * _2792.x) + _2730;
                        _2658 = (_2908 * _2792.y) + _2731;
                        _2659 = (_2908 * _2792.z) + _2732;
                        if (_2737 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2660;
                            _2734 = _2661;
                            _2735 = _2662;
                            _2736 = _2737;
                        }
                    }
                    frontier_phi_68_pred = _2659;
                    frontier_phi_68_pred_1 = _2662;
                    frontier_phi_68_pred_2 = _2661;
                    frontier_phi_68_pred_3 = _2660;
                    frontier_phi_68_pred_4 = _2658;
                    frontier_phi_68_pred_5 = _2657;
                }
                _2429 = frontier_phi_68_pred;
                _2435 = frontier_phi_68_pred_1;
                _2433 = frontier_phi_68_pred_2;
                _2431 = frontier_phi_68_pred_3;
                _2427 = frontier_phi_68_pred_4;
                _2425 = frontier_phi_68_pred_5;
                uint _2592 = _2591 + 1u;
                if (_2592 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2585 = _2425;
                    _2586 = _2427;
                    _2587 = _2429;
                    _2588 = _2431;
                    _2589 = _2433;
                    _2590 = _2435;
                    _2591 = _2592;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2424 = _2425;
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
        }
        uvec4 _2438 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2439 = _2438.z;
        uint _2441 = (_2439 >> 8u) & 15u;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((4294967295u << _2441) & _2293) == 0u)
        {
            _2553 = _2424;
            _2555 = _2426;
            _2557 = _2428;
            _2559 = _2430;
            _2561 = _2432;
            _2563 = _2434;
        }
        else
        {
            float _2578 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
            float _2579 = _2578 * _2247;
            float _2580 = _2578 * _2248;
            float _2581 = _2578 * _2249;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2441 < ((_2439 >> 12u) & 15u))
            {
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2564;
                float _2713 = _2424;
                float _2714 = _2426;
                float _2715 = _2428;
                float _2716 = _2430;
                float _2717 = _2432;
                float _2718 = _2434;
                uint _2719 = _2441;
                uint _2728;
                bool _2729;
                for (;;)
                {
                    _2728 = texelFetch(g_lightClassification, int((((_2287 << 5u) + (_2273 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                    _2729 = _2728 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2729)
                    {
                        frontier_phi_79_pred = _2718;
                        frontier_phi_79_pred_1 = _2717;
                        frontier_phi_79_pred_2 = _2716;
                        frontier_phi_79_pred_3 = _2715;
                        frontier_phi_79_pred_4 = _2714;
                        frontier_phi_79_pred_5 = _2713;
                    }
                    else
                    {
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        float _2937 = _2715;
                        float _2938 = _2716;
                        float _2939 = _2717;
                        float _2940 = _2718;
                        uint _2941 = _2728;
                        uint _2942;
                        vec4 _2967;
                        float _2968;
                        vec4 _2983;
                        vec3 _2995;
                        vec4 _3011;
                        vec4 _3027;
                        float _3074;
                        bool _3075;
                        for (;;)
                        {
                            uint _2952 = ((_2719 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2941));
                            _2942 = (_2941 + 4294967295u) & _2941;
                            uint _2954 = _2952 * 40u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            _2968 = _2967.w;
                            uint _2970 = (_2952 * 40u) + 4u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2985 = (_2952 * 40u) + 8u;
                            _2995 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x));
                            uint _2998 = (_2952 * 40u) + 16u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3014 = (_2952 * 40u) + 20u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3030 = (_2952 * 40u) + 24u;
                            vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3049 = (_2952 * 40u) + 28u;
                            vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            _3074 = fma(_2249, _3062.z, fma(_2248, _3062.y, _3062.x * _2247)) + _3062.w;
                            _3075 = !((fma(_2249, _3043.z, fma(_2248, _3043.y, _3043.x * _2247)) + _3043.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3075)
                            {
                                float _3102 = _2967.x - _2247;
                                float _3103 = _2967.y - _2248;
                                float _3104 = _2967.z - _2249;
                                float _3105 = dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104));
                                float _3108 = inversesqrt(_3105);
                                float _3109 = _3108 * _3102;
                                float _3110 = _3108 * _3103;
                                float _3111 = _3108 * _3104;
                                float _3115 = 1.0 - (_3105 / (_2968 * _2968));
                                float _4211 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                                float _3120 = sqrt(_3105) * _2983.w;
                                float _3122 = 1.39999997615814208984375 / (_3120 + 1.39999997615814208984375);
                                float _3123 = _3122 * _3122;
                                float _3126 = ((1.0 - _3123) * dot(vec3(_3109, _3110, _3111), vec3(_448, _451, _454))) + _3123;
                                float _3129 = _3120 * _3120;
                                float _3133 = (fma(_2249, _3011.z, fma(_2248, _3011.y, _3011.x * _2247)) + _3011.w) / _3074;
                                float _3134 = (fma(_2249, _3027.z, fma(_2248, _3027.y, _3027.x * _2247)) + _3027.w) / _3074;
                                float _3138 = 1.0 - dot(vec2(_3133, _3134), vec2(_3133, _3134));
                                float _4227 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3139 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3140 = _3139 * (((isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))) * _3116) / ((_3129 * 0.699999988079071044921875) + 1.0));
                                float _3152 = exp2(log2(1.0 / ((_3129 * 3.5) + 5.0)) * 0.25);
                                float _3153 = 1.0 - _524;
                                float _3160 = sqrt(1.0 - ((1.0 - (_3153 * _3153)) * (1.0 - (_3152 * _3152))));
                                float _3161 = _3160 * _3160;
                                float _3162 = _3161 * _3161;
                                float _3163 = _3109 - _2579;
                                float _3164 = _3110 - _2580;
                                float _3165 = _3111 - _2581;
                                float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                                float _3173 = dot(vec3(_448, _451, _454), vec3((-0.0) - _2579, (-0.0) - _2580, (-0.0) - _2581));
                                float _4238 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3176 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3177 = dot(vec3(_448, _451, _454), vec3(_3169 * _3163, _3169 * _3164, _3169 * _3165));
                                float _4249 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3180 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3184 = ((_3180 * _3180) * (_3162 + (-1.0))) + 1.0;
                                float _3185 = _3122 * _3161;
                                float _3186 = _3185 * _3185;
                                float _3192 = ((1.0 - _3186) * dot(vec3(_448, _451, _454), vec3(_3109, _3110, _3111))) + _3186;
                                float _4260 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3194 = 1.0 - _3161;
                                float _3204 = (0.5 / (((_3193 * ((_3176 * _3194) + _3161)) + 9.9999999392252902907785028219223e-09) + (((_3193 * _3194) + _3161) * _3176))) * _3193;
                                float _4271 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3214 = (_3139 * _3116) * (((_3162 * 3.1415927410125732421875) * (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) / ((_3184 * _3184) * ((_3129 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3140 * _2983.z;
                                frontier_phi_85_pred_1 = _3140 * _2983.y;
                                frontier_phi_85_pred_2 = _3140 * _2983.x;
                                frontier_phi_85_pred_3 = _3214 * _2995.z;
                                frontier_phi_85_pred_4 = _3214 * _2995.y;
                                frontier_phi_85_pred_5 = _3214 * _2995.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3223 = frontier_phi_85_pred;
                            _3222 = frontier_phi_85_pred_1;
                            _3221 = frontier_phi_85_pred_2;
                            _3220 = frontier_phi_85_pred_3;
                            _3219 = frontier_phi_85_pred_4;
                            _3218 = frontier_phi_85_pred_5;
                            _2925 = _3221 + _2938;
                            _2926 = _3222 + _2939;
                            _2927 = _3223 + _2940;
                            _2922 = _3218 + _2935;
                            _2923 = _3219 + _2936;
                            _2924 = _3220 + _2937;
                            if (_2942 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2942;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2927;
                        frontier_phi_79_pred_1 = _2926;
                        frontier_phi_79_pred_2 = _2925;
                        frontier_phi_79_pred_3 = _2924;
                        frontier_phi_79_pred_4 = _2923;
                        frontier_phi_79_pred_5 = _2922;
                    }
                    _2564 = frontier_phi_79_pred;
                    _2562 = frontier_phi_79_pred_1;
                    _2560 = frontier_phi_79_pred_2;
                    _2558 = frontier_phi_79_pred_3;
                    _2556 = frontier_phi_79_pred_4;
                    _2554 = frontier_phi_79_pred_5;
                    uint _2720 = _2719 + 1u;
                    if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2713 = _2554;
                        _2714 = _2556;
                        _2715 = _2558;
                        _2716 = _2560;
                        _2717 = _2562;
                        _2718 = _2564;
                        _2719 = _2720;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2560;
                frontier_phi_60_61_ladder_1 = _2564;
                frontier_phi_60_61_ladder_2 = _2562;
                frontier_phi_60_61_ladder_3 = _2558;
                frontier_phi_60_61_ladder_4 = _2556;
                frontier_phi_60_61_ladder_5 = _2554;
            }
            else
            {
                frontier_phi_60_61_ladder = _2430;
                frontier_phi_60_61_ladder_1 = _2434;
                frontier_phi_60_61_ladder_2 = _2432;
                frontier_phi_60_61_ladder_3 = _2428;
                frontier_phi_60_61_ladder_4 = _2426;
                frontier_phi_60_61_ladder_5 = _2424;
            }
            _2553 = frontier_phi_60_61_ladder_5;
            _2555 = frontier_phi_60_61_ladder_4;
            _2557 = frontier_phi_60_61_ladder_3;
            _2559 = frontier_phi_60_61_ladder;
            _2561 = frontier_phi_60_61_ladder_2;
            _2563 = frontier_phi_60_61_ladder_1;
        }
        float _2568 = isnan(1.0) ? _508 : (isnan(_508) ? 1.0 : min(_508, 1.0));
        _2305 = (_2568 * _2559) + _1739;
        _2307 = (_2568 * _2561) + _1741;
        _2309 = (_2568 * _2563) + _1743;
        _2311 = ((_2553 * _493) * _2568) + _2087;
        _2313 = ((_2555 * _495) * _2568) + _2089;
        _2315 = ((_2557 * _496) * _2568) + _2091;
    }
    else
    {
        _2305 = _1739;
        _2307 = _1741;
        _2309 = _1743;
        _2311 = _2087;
        _2313 = _2089;
        _2315 = _2091;
    }
    uint _2321 = _469 + uint(cbMatDynParam._m0[0u].w);
    float _2327 = (_302.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2321].x;
    float _2328 = (_302.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2321].y;
    float _2329 = (_302.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2321].z;
    float _4287 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4298 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _4309 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _4320 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _2347 = (((isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2305 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _508))) + ((_2311 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1350)) * cbPerFrame._m0[3u].x)) + _2327;
    float _2349 = (_2328 + ((_2313 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1350)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2307 + ((isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))) * _508)));
    float _2351 = (_2329 + ((_2315 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1350)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2309 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _508)));
    float _2352 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2353 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2354 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2360 = cbMtdParam._m0[2u].x * _2327;
    float _2361 = cbMtdParam._m0[2u].y * _2328;
    float _2362 = cbMtdParam._m0[2u].z * _2329;
    float _4346 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2364 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2369 = cbInstanceData._m0[_467 + 6u].w * (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)));
    float _2374 = _427 / cbSceneParam._m0[86u].x;
    float _2375 = _428 / cbSceneParam._m0[86u].y;
    vec4 _2389 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2374, _2375, (log2((isnan(cbSceneParam._m0[77u].w) ? _347 : (isnan(_347) ? cbSceneParam._m0[77u].w : min(_347, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2391 = _2389.x;
    float _2392 = _2389.y;
    float _2393 = _2389.z;
    float _2394 = _2389.w;
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    if (_347 > cbSceneParam._m0[78u].w)
    {
        float _2449 = isnan(_347) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _347 : min(cbSceneParam._m0[80u].w, _347));
        float _2450 = _2449 / _347;
        float _2461 = _2450 * _399;
        float _2462 = _400 * _2450;
        float _2463 = (-0.0) - _2462;
        float _2464 = _2450 * _401;
        float _2466 = (cbSceneParam._m0[77u].w * _2463) / _2449;
        float _2467 = _2466 + cbSceneParam._m0[79u].w;
        float _2468 = cbSceneParam._m0[79u].w - _2462;
        float _2474 = sqrt(((_2461 * _2461) + (_2462 * _2462)) + (_2464 * _2464));
        float _2477 = (1.0 - (cbSceneParam._m0[77u].w / _2449)) * _2474;
        float _2482 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2484 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2670;
        if (abs((_2463 - _2466) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2670 = ((((_2467 > 0.0) ? exp2(_2482 * _2467) : (2.0 - exp2(_2484 * _2467))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2477;
        }
        else
        {
            float _2614 = 1.0 / cbSceneParam._m0[80u].x;
            float _2615 = isnan(_2468) ? _2467 : (isnan(_2467) ? _2468 : max(_2467, _2468));
            float _2616 = isnan(_2468) ? _2467 : (isnan(_2467) ? _2468 : min(_2467, _2468));
            float _2625 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : min(_2615, 0.0));
            float _2626 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : min(_2616, 0.0));
            _2670 = ((abs(_2474 / _2463) * cbSceneParam._m0[80u].y) * ((((_2625 - _2626) * 2.0) - ((exp2(_2482 * (isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0)))) - exp2(_2482 * (isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0))))) * _2614)) - ((exp2(_2484 * _2625) - exp2(_2484 * _2626)) * _2614))) + (_2477 * cbSceneParam._m0[80u].z);
        }
        vec4 _2672 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2374, _2375, 1.0), 0.0);
        float _2681 = exp2((_2670 * (-1.44269502162933349609375)) * (1.0 - _2672.w));
        float _2682 = log2(_2681);
        float _2698 = log2(_2394);
        _2486 = (exp2(_2698 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].x)) * _2672.x) / cbSceneParam._m0[78u].x)) + _2391;
        _2488 = (exp2(_2698 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].y)) * _2672.y) / cbSceneParam._m0[78u].y)) + _2392;
        _2490 = (exp2(_2698 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].z)) * _2672.z) / cbSceneParam._m0[78u].z)) + _2393;
        _2492 = _2681 * _2394;
    }
    else
    {
        _2486 = _2391;
        _2488 = _2392;
        _2490 = _2393;
        _2492 = _2394;
    }
    bool _2708;
    vec4 _2502;
    vec4 _2524;
    float _2526;
    float _2530;
    float _2531;
    float _2532;
    float _2535;
    float _2538;
    float _2541;
    float _2542;
    bool _2552;
    for (;;)
    {
        _2502 = cbMatDynParam._m0[0u];
        float _2504 = roundEven(_2502.y);
        bool _2505 = _2504 == 3.0;
        float _2506 = log2(_2492);
        float _2510 = exp2(_2506 * cbSceneParam._m0[78u].x);
        float _2511 = exp2(_2506 * cbSceneParam._m0[78u].y);
        float _2512 = exp2(_2506 * cbSceneParam._m0[78u].z);
        float _2513 = _2510 * _2352;
        float _2514 = _2511 * _2353;
        float _2515 = _2512 * _2354;
        float _2522 = _415 + (-0.5);
        _2524 = cbMtdParam._m0[1u];
        _2526 = _2524.y * _2522;
        float _2529 = (_2504 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2530 = _2529 * (_2505 ? _2513 : (_2513 + (cbSceneParam._m0[72u].w * _2486)));
        _2531 = _2529 * (_2505 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2488)));
        _2532 = _2529 * (_2505 ? _2515 : (_2515 + (cbSceneParam._m0[72u].w * _2490)));
        _2535 = ((_2360 * _2364) * _2510) * _2529;
        _2538 = ((_2361 * _2364) * _2511) * _2529;
        _2541 = ((_2362 * _2364) * _2512) * _2529;
        _2542 = _2522 * 0.999000012874603271484375;
        _2552 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2552)
        {
            if ((cbInstanceData._m0[_467 + 7u].x + _2542) < 0.5)
            {
                _2708 = true;
                break;
            }
        }
        uint _2649 = _469 + uint(_2502.w);
        if ((cbInstanceData._m0[_2649].w < 1.0) && ((cbInstanceData._m0[_2649].w + _2542) < 0.5))
        {
            _2708 = true;
            break;
        }
        if ((_2526 + _240) < _2524.x)
        {
            _2708 = true;
            break;
        }
        _2708 = false;
        break;
    }
    float _2913;
    if (_2708)
    {
        discard_state = true;
        _2913 = 0.0;
    }
    else
    {
        _2913 = _2369;
    }
    SV_Target.x = _2530;
    SV_Target.y = _2531;
    SV_Target.z = _2532;
    SV_Target.w = _2913;
    SV_Target_1.x = _2535;
    SV_Target_1.y = _2538;
    SV_Target_1.z = _2541;
    SV_Target_1.w = _2369;
    discard_exit();
}


