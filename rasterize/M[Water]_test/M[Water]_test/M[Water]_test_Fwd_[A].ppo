#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_test_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_test_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_test_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_test_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_test_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1088;
float _3605;
float _3606;
float _3607;
float _3608;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x;
    vec4 _264 = texture(sampler2D(M_Water_test_snp_0_Texture2D_2, SS_WrapLinear), vec2((((_242 * cbMtdParam._m0[14u].z) + TEXCOORD) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[14u].w * _242) + TEXCOORD_1) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _270 = exp2(log2(_264.x) * cbMtdParam._m0[12u].y);
    float _284 = (cbMtdParam._m0[15u].z * _242) + TEXCOORD;
    float _285 = (cbMtdParam._m0[15u].w * _242) + TEXCOORD_1;
    vec4 _297 = texture(sampler2D(M_Water_test_snp_0_Texture2D_3, SS_WrapLinear), vec2((_284 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_285 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _303 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[13u].x * cbMtdParam._m0[11u].w);
    float _310 = ((_297.y * 0.5) + (-0.25)) * cbMtdParam._m0[12u].w;
    float _312 = (-0.0) - (cbMtdParam._m0[12u].w * ((_297.x * 0.5) + (-0.25)));
    float _314 = fract(_303);
    float _316 = fract(_303 + 0.5);
    float _328 = abs((_314 * 2.0) + (-1.0));
    vec4 _345 = texture(sampler2D(M_Water_test_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_314 * _312) + _284) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_310 * _314) + _285) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _347 = _345.x;
    float _348 = _345.y;
    float _349 = _345.z;
    vec4 _350 = texture(sampler2D(M_Water_test_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_316 * _312) + _284) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_310 * _316) + _285) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _373 = (((cbMtdParam._m0[10u].x * TEXCOORD_3.x) * _270) * (((_350.x - _347) * _328) + _347)) + cbMtdParam._m0[9u].x;
    float _374 = (((cbMtdParam._m0[10u].y * TEXCOORD_3.x) * _270) * (((_350.y - _348) * _328) + _348)) + cbMtdParam._m0[9u].y;
    float _375 = (((cbMtdParam._m0[10u].z * TEXCOORD_3.x) * _270) * (((_350.z - _349) * _328) + _349)) + cbMtdParam._m0[9u].z;
    vec4 _396 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[14u].x * _242) + TEXCOORD) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[14u].y * _242) + TEXCOORD_1) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _421 = texture(sampler2D(M_Water_test_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[13u].z * _242) + TEXCOORD) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[13u].w * _242) + TEXCOORD_1) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _427 = (_421.x * 2.0) + (-1.0);
    float _428 = (_421.y * 2.0) + (-1.0);
    float _429 = dot(vec2(_427, _428), vec2(_427, _428));
    float _3617 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))));
    float _444 = (cbMtdParam._m0[15u].x * _242) + TEXCOORD;
    float _445 = (cbMtdParam._m0[15u].y * _242) + TEXCOORD_1;
    vec4 _450 = texture(sampler2D(M_Water_test_snp_0_Texture2D_3, SS_WrapLinear), vec2((_444 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_445 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _458 = ((_450.y * 0.5) + (-0.25)) * cbMtdParam._m0[12u].w;
    float _460 = (-0.0) - (cbMtdParam._m0[12u].w * ((_450.x * 0.5) + (-0.25)));
    vec4 _477 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((_314 * _460) + _444) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_458 * _314) + _445) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _479 = _477.x;
    float _480 = _477.y;
    vec4 _481 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((_316 * _460) + _444) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_458 * _316) + _445) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _497 = (_427 + (((_396.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z)) + ((((((_481.x - _479) * _328) + _479) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y);
    float _498 = (_428 + (((_396.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z)) + ((((((_481.y - _480) * _328) + _480) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y);
    float _504 = fma(_435, _211 * NORMAL.x, fma(_498, _218 * TANGENT.x, _497 * _205));
    float _507 = fma(_435, _211 * NORMAL.y, fma(_498, _218 * TANGENT.y, _497 * _206));
    float _510 = fma(_435, _211 * NORMAL.z, fma(_498, _218 * TANGENT.z, _497 * _207));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    float _515 = _514 * _504;
    float _516 = _514 * _507;
    float _517 = _514 * _510;
    float _3628 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _518 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3650 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3661 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _537 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _588 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _578);
    float _589 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _578);
    float _590 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _578);
    float _594 = inversesqrt(dot(vec3(_588, _589, _590), vec3(_588, _589, _590)));
    float _595 = _588 * _594;
    float _596 = _589 * _594;
    float _597 = _590 * _594;
    vec4 _602 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _604 = _602.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _768 = sqrt(((_588 * _588) + (_589 * _589)) + (_590 * _590));
        float _774 = (cbMatDynParam._m0[5u].x * _768) + cbMatDynParam._m0[5u].y;
        float _3672 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _779 = (cbMatDynParam._m0[5u].z * _768) + cbMatDynParam._m0[5u].w;
        float _3683 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) - _775)) + _775) < ((_604 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _616 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _617 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _637 = fma(_517, cbSceneParam._m0[5u].z, fma(_516, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _515));
    float _640 = fma(_517, cbSceneParam._m0[6u].z, fma(_516, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _515));
    float _643 = fma(_517, cbSceneParam._m0[7u].z, fma(_516, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _515));
    uint _656 = uint(roundEven(NORMAL.w)) * 13u;
    uint _657 = _656 + 9u;
    uint _658 = _657 + uint(cbMatDynParam._m0[0u].w);
    float _664 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * cbInstanceData._m0[_658].x;
    float _665 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) * cbInstanceData._m0[_658].y;
    float _666 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_658].z;
    float _3694 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    vec4 _678 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _616, cbSceneParam._m0[86u].y * _617));
    float _681 = _678.x * TEXCOORD_3.w;
    float _682 = dot(vec3(_515, _516, _517), vec3(_595, _596, _597));
    float _685 = _682 * 2.0;
    float _689 = (_685 * _515) - _595;
    float _690 = (_685 * _516) - _596;
    float _691 = (_685 * _517) - _597;
    float _695 = abs(dot(vec3(_595, _596, _597), vec3(_515, _516, _517)));
    float _3727 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _696 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _704 = 10.0 / (_537 + 10.0);
    float _705 = sqrt(_518);
    float _717 = exp2((_705 * 5.0) * log2(1.0 - (_696 * 0.999000012874603271484375))) / (4.0 - (_705 * 3.0));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1087;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _813 = fma(_757, cbModelParam._m0[26u].z, fma(_753, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _749));
        float _817 = fma(_757, cbModelParam._m0[27u].z, fma(_753, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _749));
        float _821 = fma(_757, cbModelParam._m0[28u].z, fma(_753, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _749));
        float _845 = _749 + _515;
        float _846 = _753 + _516;
        float _847 = _757 + _517;
        float _857 = fma(_847, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _845)) - _813;
        float _858 = fma(_847, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _845)) - _817;
        float _859 = fma(_847, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _845)) - _821;
        float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
        float _876 = ((_863 * _857) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_813 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_863 * _858) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_817 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_863 * _859) / cbModelParam._m0[34u].z) + ((((((_821 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        float _915 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_881.x + (-0.5));
        float _917 = _915 * (_881.y + (-0.5));
        float _918 = _915 * (_881.z + (-0.5));
        float _925 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_888.x + (-0.5));
        float _927 = _925 * (_888.y + (-0.5));
        float _928 = _925 * (_888.z + (-0.5));
        float _935 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_895.x + (-0.5));
        float _937 = _935 * (_895.y + (-0.5));
        float _938 = _935 * (_895.z + (-0.5));
        float _945 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_902.x + (-0.5));
        float _947 = _945 * (_902.y + (-0.5));
        float _948 = _945 * (_902.z + (-0.5));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = _916 * 0.5;
        float _953 = _926 * 0.5;
        float _954 = _936 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _969 = (dot(vec3(_515, _516, _517), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _979 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3775 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_981 + 1.0))) + _986) * _949;
        float _996 = _917 * 0.5;
        float _997 = _927 * 0.5;
        float _998 = _937 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_515, _516, _517), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3808 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1023 + 1.0))) + _1028) * _950;
        float _1038 = _918 * 0.5;
        float _1039 = _928 * 0.5;
        float _1040 = _938 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_515, _516, _517), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3841 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1065 + 1.0))) + _1070) * _951;
        _1087 = _918;
        _1089 = _917;
        _1090 = _916;
        _1091 = _928;
        _1092 = _927;
        _1093 = _926;
        _1094 = _938;
        _1095 = _937;
        _1096 = _936;
        _1097 = _951;
        _1098 = _950;
        _1099 = _949;
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
    }
    else
    {
        _1087 = _1088;
        _1089 = _1088;
        _1090 = _1088;
        _1091 = _1088;
        _1092 = _1088;
        _1093 = _1088;
        _1094 = _1088;
        _1095 = _1088;
        _1096 = _1088;
        _1097 = _1088;
        _1098 = _1088;
        _1099 = _1088;
        _1100 = 0.0;
        _1101 = 0.0;
        _1102 = 0.0;
    }
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1131 = fma(_757, cbModelParam._m0[30u].z, fma(_753, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _749));
        float _1135 = fma(_757, cbModelParam._m0[31u].z, fma(_753, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _749));
        float _1139 = fma(_757, cbModelParam._m0[32u].z, fma(_753, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _749));
        float _1162 = _749 + _515;
        float _1163 = _753 + _516;
        float _1164 = _757 + _517;
        float _1174 = fma(_1164, cbModelParam._m0[30u].z, fma(_1163, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1162)) - _1131;
        float _1175 = fma(_1164, cbModelParam._m0[31u].z, fma(_1163, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1162)) - _1135;
        float _1176 = fma(_1164, cbModelParam._m0[32u].z, fma(_1163, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1162)) - _1139;
        float _1180 = inversesqrt(dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176)));
        float _1193 = ((_1180 * _1174) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1131 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1180 * _1175) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1135 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1180 * _1176) / cbModelParam._m0[35u].z) + ((((((_1139 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        float _1230 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1197.x + (-0.5));
        float _1232 = _1230 * (_1197.y + (-0.5));
        float _1233 = _1230 * (_1197.z + (-0.5));
        float _1240 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1204.x + (-0.5));
        float _1242 = _1240 * (_1204.y + (-0.5));
        float _1243 = _1240 * (_1204.z + (-0.5));
        float _1250 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1211.x + (-0.5));
        float _1252 = _1250 * (_1211.y + (-0.5));
        float _1253 = _1250 * (_1211.z + (-0.5));
        float _1260 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1218.x + (-0.5));
        float _1262 = _1260 * (_1218.y + (-0.5));
        float _1263 = _1260 * (_1218.z + (-0.5));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = _1231 * 0.5;
        float _1268 = _1241 * 0.5;
        float _1269 = _1251 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_515, _516, _517), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3904 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1294 + 1.0))) + _1299) * _1264;
        float _1309 = _1232 * 0.5;
        float _1310 = _1242 * 0.5;
        float _1311 = _1252 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_515, _516, _517), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3937 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1336 + 1.0))) + _1341) * _1265;
        float _1351 = _1233 * 0.5;
        float _1352 = _1243 * 0.5;
        float _1353 = _1253 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_515, _516, _517), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3970 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1378 + 1.0))) + _1383) * _1266;
        _1400 = _1233;
        _1401 = _1232;
        _1402 = _1231;
        _1403 = _1243;
        _1404 = _1242;
        _1405 = _1241;
        _1406 = _1253;
        _1407 = _1252;
        _1408 = _1251;
        _1409 = _1266;
        _1410 = _1265;
        _1411 = _1264;
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1088;
        _1401 = _1088;
        _1402 = _1088;
        _1403 = _1088;
        _1404 = _1088;
        _1405 = _1088;
        _1406 = _1088;
        _1407 = _1088;
        _1408 = _1088;
        _1409 = _1088;
        _1410 = _1088;
        _1411 = _1088;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1100)) + _1100;
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1101)) + _1101;
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1102)) + _1102;
    float _1447 = fma(_1426, cbSceneParam._m0[89u].z, fma(_1425, cbSceneParam._m0[89u].y, _1424 * cbSceneParam._m0[89u].x));
    float _1450 = fma(_1426, cbSceneParam._m0[90u].z, fma(_1425, cbSceneParam._m0[90u].y, _1424 * cbSceneParam._m0[90u].x));
    float _1453 = fma(_1426, cbSceneParam._m0[91u].z, fma(_1425, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1424));
    float _1468 = _689 * 0.5;
    float _1469 = _690 * 0.5;
    float _1470 = _691 * 0.5;
    float _1471 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1474 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1477 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1511;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1484 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1087, _1091, _1094, _1097));
        float _1488 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1089, _1092, _1095, _1098));
        float _1492 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1090, _1093, _1096, _1099));
        float _1499 = dot(vec4(cbModelParam._m0[39u]), vec4(_1468, _1469, _1470, 1.0));
        _1511 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1499) ? 0.0 : (isnan(0.0) ? _1499 : max(0.0, _1499))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1511 = 1.0;
    }
    float _1522;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1513 = dot(vec4(cbModelParam._m0[40u]), vec4(_1468, _1469, _1470, 1.0));
        _1522 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1513) ? 0.0 : (isnan(0.0) ? _1513 : max(0.0, _1513))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1522 = 1.0;
    }
    float _1526 = (_1522 * cbModelParam._m0[1u].x) + (_1511 * (1.0 - cbModelParam._m0[1u].x));
    float _1536 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _518);
    float _1537 = isnan(_1536) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1536 : min(cbModelParam._m0[25u].z, _1536));
    float _1617;
    float _1619;
    float _1621;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1584 = fma(_757, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749)) + cbModelParam._m0[13u].w;
        float _1588 = fma(_757, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749)) + cbModelParam._m0[14u].w;
        float _1592 = fma(_757, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749)) + cbModelParam._m0[15u].w;
        float _1595 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1598 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1601 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1629;
        if (_1595 > 0.0)
        {
            _1629 = abs((1.0 - _1584) / _1595);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1584 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1629 = frontier_phi_17_15_ladder;
        }
        float _1884;
        if (_1598 > 0.0)
        {
            _1884 = abs((1.0 - _1588) / _1598);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1588 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1884 = frontier_phi_26_22_ladder;
        }
        float _2127;
        if (_1601 > 0.0)
        {
            _2127 = abs((1.0 - _1592) / _1601);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1592 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2127 = frontier_phi_38_33_ladder;
        }
        float _2129 = isnan(_1884) ? _1629 : (isnan(_1629) ? _1884 : min(_1629, _1884));
        float _2130 = isnan(_2127) ? _2129 : (isnan(_2129) ? _2127 : min(_2129, _2127));
        float _2134 = (_2130 * _1595) + _1584;
        float _2135 = (_2130 * _1598) + _1588;
        float _2136 = (_2130 * _1601) + _1592;
        float _2137 = _2130 * 9.9999997473787516355514526367188e-05;
        float _2139 = (-1.0) - _2137;
        float _2141 = _2137 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2136 > _2141) || ((_2136 < _2139) || ((_2135 > _2141) || ((_2135 < _2139) || ((_2134 < _2139) || (_2134 > _2141))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2260 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2136, cbModelParam._m0[9u].z, fma(_2135, cbModelParam._m0[9u].y, _2134 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2136, cbModelParam._m0[10u].z, fma(_2135, cbModelParam._m0[10u].y, _2134 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2136, cbModelParam._m0[11u].z, fma(_2135, cbModelParam._m0[11u].y, _2134 * cbModelParam._m0[11u].x))), _1537);
            frontier_phi_16_38_ladder = _2260.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2260.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2260.x * cbModelParam._m0[1u].y;
        }
        _1617 = frontier_phi_16_38_ladder_2;
        _1619 = frontier_phi_16_38_ladder_1;
        _1621 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1537);
        _1617 = _1605.x * cbModelParam._m0[1u].y;
        _1619 = _1605.y * cbModelParam._m0[1u].y;
        _1621 = _1605.z * cbModelParam._m0[1u].y;
    }
    float _1625 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _518);
    float _1626 = isnan(_1625) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1625 : min(cbModelParam._m0[25u].w, _1625));
    float _1718;
    float _1720;
    float _1722;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1682 = fma(_757, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749)) + cbModelParam._m0[21u].w;
        float _1686 = fma(_757, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749)) + cbModelParam._m0[22u].w;
        float _1690 = fma(_757, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749)) + cbModelParam._m0[23u].w;
        float _1693 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1696 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1699 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1889;
        if (_1693 > 0.0)
        {
            _1889 = abs((1.0 - _1682) / _1693);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1682 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1889 = frontier_phi_28_24_ladder;
        }
        float _2154;
        if (_1696 > 0.0)
        {
            _2154 = abs((1.0 - _1686) / _1696);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1686 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2154 = frontier_phi_40_35_ladder;
        }
        float _2359;
        if (_1699 > 0.0)
        {
            _2359 = abs((1.0 - _1690) / _1699);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1690 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2359 = frontier_phi_49_46_ladder;
        }
        float _2361 = isnan(_2154) ? _1889 : (isnan(_1889) ? _2154 : min(_1889, _2154));
        float _2362 = isnan(_2359) ? _2361 : (isnan(_2361) ? _2359 : min(_2361, _2359));
        float _2366 = (_2362 * _1693) + _1682;
        float _2367 = (_2362 * _1696) + _1686;
        float _2368 = (_2362 * _1699) + _1690;
        float _2369 = _2362 * 9.9999997473787516355514526367188e-05;
        float _2370 = (-1.0) - _2369;
        float _2372 = _2369 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2368 > _2372) || ((_2368 < _2370) || ((_2367 > _2372) || ((_2367 < _2370) || ((_2366 < _2370) || (_2366 > _2372))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2636 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2368, cbModelParam._m0[17u].z, fma(_2367, cbModelParam._m0[17u].y, _2366 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2368, cbModelParam._m0[18u].z, fma(_2367, cbModelParam._m0[18u].y, _2366 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2368, cbModelParam._m0[19u].z, fma(_2367, cbModelParam._m0[19u].y, _2366 * cbModelParam._m0[19u].x))), _1626);
            frontier_phi_25_49_ladder = _2636.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2636.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2636.x * cbModelParam._m0[1u].z;
        }
        _1718 = frontier_phi_25_49_ladder_2;
        _1720 = frontier_phi_25_49_ladder_1;
        _1722 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1702 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1626);
        _1718 = _1702.x * cbModelParam._m0[1u].z;
        _1720 = _1702.y * cbModelParam._m0[1u].z;
        _1722 = _1702.z * cbModelParam._m0[1u].z;
    }
    float _1734 = ((((1.0 - _717) * ((_705 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_717 * _705)) * _681;
    float _1735 = _1734 * ((cbModelParam._m0[1u].w * (_1718 - _1617)) + _1617);
    float _1736 = _1734 * ((cbModelParam._m0[1u].w * (_1720 - _1619)) + _1619);
    float _1737 = _1734 * ((cbModelParam._m0[1u].w * (_1722 - _1621)) + _1621);
    float _1740 = fma(_1737, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1735 * cbSceneParam._m0[89u].x));
    float _1743 = fma(_1737, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1735 * cbSceneParam._m0[90u].x));
    float _1746 = fma(_1737, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, _1735 * cbSceneParam._m0[91u].x));
    float _1757 = _616 / cbSceneParam._m0[86u].x;
    float _1765 = (cbSceneParam._m0[88u].y * (1.0 - _518)) + cbSceneParam._m0[88u].z;
    float _4096 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1767 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 5.0;
    float _1772 = (_704 * cbMtdParam._m0[12u].x) * dot(vec3(_515, _516, _517), vec3(1.0, 0.0, 0.0));
    vec4 _1782 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1772 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1772 + _1757) * cbSceneParam._m0[86u].x, _617), _1767).w) + _1757) * cbSceneParam._m0[86u].x, _617), _1767);
    float _1798 = 1.0 - _1782.w;
    uvec4 _1808 = floatBitsToUint(cbInstanceData._m0[_656 + 5u]);
    uint _1810 = _1808.x * 14u;
    uint _1811 = _1810 + 13u;
    float _1818 = _681 + (-1.0);
    float _1823 = (cbLight._m0[_1811].x * _1818) + 1.0;
    float _1824 = (cbLight._m0[_1811].y * _1818) + 1.0;
    float _1825 = (cbLight._m0[_1811].z * _1818) + 1.0;
    float _1826 = (cbLight._m0[_1811].w * _1818) + 1.0;
    uint _1827 = _1810 + 5u;
    float _1833 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
    uint _1837 = _1810 + 4u;
    float _1843 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
    uint _1847 = _1810 | 1u;
    float _1858 = dot(vec3(cbLight._m0[_1810].xyz), vec3(_515, _516, _517));
    float _1861 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_515, _516, _517));
    float _4117 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _4128 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1866 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.3183098733425140380859375;
    float _1868 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.3183098733425140380859375;
    float _1875 = ((cbLight._m0[_1827].x * _1833) * _1868) + ((cbLight._m0[_1837].x * _1843) * _1866);
    float _1876 = ((_1833 * cbLight._m0[_1827].y) * _1868) + ((_1843 * cbLight._m0[_1837].y) * _1866);
    float _1877 = ((_1833 * cbLight._m0[_1827].z) * _1868) + ((_1843 * cbLight._m0[_1837].z) * _1866);
    uvec4 _1881 = floatBitsToUint(cbLight._m0[_1810 + 12u]);
    bool _1883 = _1881.x == 0u;
    float _1894;
    float _1896;
    float _1898;
    if (_1883)
    {
        _1894 = _1875;
        _1896 = _1876;
        _1898 = _1877;
    }
    else
    {
        uint _1902 = _1810 + 6u;
        float _1918 = (dot(vec3(cbLight._m0[_1810 + 2u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _1919 = _1918 * _1918;
        float _4139 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1921 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
        _1894 = (((cbLight._m0[_1902].x * 0.3183098733425140380859375) * _1920) * _1921) + _1875;
        _1896 = (((cbLight._m0[_1902].y * 0.3183098733425140380859375) * _1920) * _1921) + _1876;
        _1898 = (((cbLight._m0[_1902].z * 0.3183098733425140380859375) * _1920) * _1921) + _1877;
    }
    bool _1901 = _1881.y == 0u;
    float _1939;
    float _1941;
    float _1943;
    if (_1901)
    {
        _1939 = _1894;
        _1941 = _1896;
        _1943 = _1898;
    }
    else
    {
        uint _2098 = _1810 + 7u;
        float _2114 = (dot(vec3(cbLight._m0[_1810 + 3u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _2115 = _2114 * _2114;
        float _4155 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2116 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2117 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
        _1939 = (((cbLight._m0[_2098].x * 0.3183098733425140380859375) * _2116) * _2117) + _1894;
        _1941 = (((cbLight._m0[_2098].y * 0.3183098733425140380859375) * _2116) * _2117) + _1896;
        _1943 = (((cbLight._m0[_2098].z * 0.3183098733425140380859375) * _2116) * _2117) + _1898;
    }
    uint _1946 = _1810 + 8u;
    float _1959 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1810].w)) * _518) * 0.949999988079071044921875);
    float _1960 = _1959 * _1959;
    float _1961 = cbLight._m0[_1810].x + _595;
    float _1962 = cbLight._m0[_1810].y + _596;
    float _1963 = cbLight._m0[_1810].z + _597;
    float _1967 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
    float _1968 = _1967 * _1961;
    float _1969 = _1967 * _1962;
    float _1970 = _1967 * _1963;
    float _1971 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1810].xyz));
    float _4171 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1974 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _1975 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _1976 = dot(vec3(_515, _516, _517), vec3(_1968, _1969, _1970));
    float _4193 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1810].xyz), vec3(_1968, _1969, _1970));
    float _4204 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1984 = _1960 * _1960;
    float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
    float _1999 = (exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2000 = 1.0 - _1960;
    float _2011 = (0.5 / (((_1975 * ((_1974 * _2000) + _1960)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2000) + _1960) * _1974))) * _1974;
    float _4215 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2013 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
    uint _2024 = _1810 + 9u;
    float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1847].w)) * _518) * 0.949999988079071044921875);
    float _2036 = _2035 * _2035;
    float _2037 = cbLight._m0[_1847].x + _595;
    float _2038 = cbLight._m0[_1847].y + _596;
    float _2039 = cbLight._m0[_1847].z + _597;
    float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
    float _2044 = _2043 * _2037;
    float _2045 = _2043 * _2038;
    float _2046 = _2043 * _2039;
    float _2047 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1847].xyz));
    float _4226 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2051 = dot(vec3(_515, _516, _517), vec3(_2044, _2045, _2046));
    float _4237 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _2055 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_2044, _2045, _2046));
    float _4248 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2059 = _2036 * _2036;
    float _2063 = ((_2054 * _2054) * (_2059 + (-1.0))) + 1.0;
    float _2072 = (exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2073 = 1.0 - _2036;
    float _2083 = (0.5 / (((_1975 * ((_2050 * _2073) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2073) + _2036) * _2050))) * _2050;
    float _4259 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2085 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2059 / ((_2063 * _2063) * 3.141590118408203125));
    float _2095 = (((_2072 * cbLight._m0[_2024].x) * _2085) * _1833) + (((_1999 * cbLight._m0[_1946].x) * _2013) * _1843);
    float _2096 = (((_2072 * cbLight._m0[_2024].y) * _2085) * _1833) + (((_1999 * cbLight._m0[_1946].y) * _2013) * _1843);
    float _2097 = (((_2072 * cbLight._m0[_2024].z) * _2085) * _1833) + (((_1999 * cbLight._m0[_1946].z) * _2013) * _1843);
    float _2159;
    float _2161;
    float _2163;
    if (_1883)
    {
        _2159 = _2095;
        _2161 = _2096;
        _2163 = _2097;
    }
    else
    {
        uint _2165 = _1810 + 2u;
        uint _2169 = _1810 + 10u;
        float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _518) * 0.949999988079071044921875);
        float _2184 = _2183 * _2183;
        float _2185 = cbLight._m0[_2165].x + _595;
        float _2186 = cbLight._m0[_2165].y + _596;
        float _2187 = cbLight._m0[_2165].z + _597;
        float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
        float _2192 = _2191 * _2185;
        float _2193 = _2191 * _2186;
        float _2194 = _2191 * _2187;
        float _2195 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2165].xyz));
        float _4270 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2198 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2199 = dot(vec3(_515, _516, _517), vec3(_2192, _2193, _2194));
        float _4281 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2203 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2192, _2193, _2194));
        float _4292 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2207 = _2184 * _2184;
        float _2211 = ((_2202 * _2202) * (_2207 + (-1.0))) + 1.0;
        float _2220 = (exp2(log2(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2221 = 1.0 - _2184;
        float _2231 = (0.5 / (((_1975 * ((_2198 * _2221) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2221) + _2184) * _2198))) * _2198;
        float _4303 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2233 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2207 / ((_2211 * _2211) * 3.141590118408203125));
        float _2234 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
        _2159 = (((_2220 * cbLight._m0[_2169].x) * _2233) * _2234) + _2095;
        _2161 = (((_2220 * cbLight._m0[_2169].y) * _2233) * _2234) + _2096;
        _2163 = (((_2220 * cbLight._m0[_2169].z) * _2233) * _2234) + _2097;
    }
    float _2269;
    float _2271;
    float _2273;
    if (_1901)
    {
        _2269 = _2159;
        _2271 = _2161;
        _2273 = _2163;
    }
    else
    {
        uint _2280 = _1810 + 3u;
        uint _2284 = _1810 + 11u;
        float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2280].w)) * _518) * 0.949999988079071044921875);
        float _2299 = _2298 * _2298;
        float _2300 = cbLight._m0[_2280].x + _595;
        float _2301 = cbLight._m0[_2280].y + _596;
        float _2302 = cbLight._m0[_2280].z + _597;
        float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
        float _2307 = _2306 * _2300;
        float _2308 = _2306 * _2301;
        float _2309 = _2306 * _2302;
        float _2310 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2280].xyz));
        float _4319 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2313 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2314 = dot(vec3(_515, _516, _517), vec3(_2307, _2308, _2309));
        float _4330 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2318 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_2307, _2308, _2309));
        float _4341 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2322 = _2299 * _2299;
        float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
        float _2335 = (exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2336 = 1.0 - _2299;
        float _2346 = (0.5 / (((_1975 * ((_2313 * _2336) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2336) + _2299) * _2313))) * _2313;
        float _4352 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2348 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
        float _2349 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
        _2269 = (((_2335 * cbLight._m0[_2284].x) * _2348) * _2349) + _2159;
        _2271 = (((_2335 * cbLight._m0[_2284].y) * _2348) * _2349) + _2161;
        _2273 = (((_2335 * cbLight._m0[_2284].z) * _2348) * _2349) + _2163;
    }
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    if (_1808.y == 0u)
    {
        float _2424 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2425 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2424;
        float _2426 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2424;
        float _2427 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2424;
        uvec4 _2439 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2440 = _2439.x;
        uint _2451 = uint((float(_2439.y) * floor(float(uint(cbSceneParam._m0[85u].y * _617) / _2440))) + floor(float(uint(cbSceneParam._m0[85u].x * _616) / _2440)));
        float _2461 = (log2(_2427 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2462 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        uint _2465 = uint(isnan(14.0) ? _2462 : (isnan(_2462) ? 14.0 : min(_2462, 14.0)));
        uvec4 _2470 = texelFetch(g_lightClusterGridBuffer, int(((_2465 << 2u) + (_2451 << 6u)) >> 2u));
        uint _2471 = _2470.x;
        uint _2472 = _2439.z;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        if (((((1u << ((_2472 >> 4u) & 15u)) + 4294967295u) & _2471) == 0u) || ((_2472 & 240u) == 0u))
        {
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
        }
        else
        {
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            uint _2831 = 0u;
            uint _2840;
            bool _2841;
            for (;;)
            {
                _2840 = texelFetch(g_lightClassification, int((((_2465 << 5u) + (_2451 << 9u)) + (_2831 << 2u)) >> 2u)).x;
                _2841 = _2840 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2841)
                {
                    frontier_phi_66_pred = _2825;
                    frontier_phi_66_pred_1 = _2830;
                    frontier_phi_66_pred_2 = _2829;
                    frontier_phi_66_pred_3 = _2828;
                    frontier_phi_66_pred_4 = _2827;
                    frontier_phi_66_pred_5 = _2826;
                }
                else
                {
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    uint _2976;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2830;
                    _2976 = _2840;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    for (;;)
                    {
                        uint _2980 = uint(findLSB(_2976)) + (_2831 << 5u);
                        uint _2977 = (_2976 + 4294967295u) & _2976;
                        uint _2982 = _2980 * 48u;
                        vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 3u)).x));
                        uint _3002 = (_2980 * 48u) + 4u;
                        vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 3u)).x));
                        uint _3021 = (_2980 * 48u) + 8u;
                        vec3 _3032 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x));
                        float _3036 = _2996.x - _2425;
                        float _3037 = _2996.y - _2426;
                        float _3038 = _2996.z - _2427;
                        float _3039 = dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038));
                        float _3042 = inversesqrt(_3039);
                        float _3043 = _3042 * _3036;
                        float _3044 = _3042 * _3037;
                        float _3045 = _3042 * _3038;
                        float _3046 = dot(vec3(_637, _640, _643), vec3(_3043, _3044, _3045));
                        float _3051 = 1.0 - (_3039 * _2996.w);
                        float _4378 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3052 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3053 = sqrt(_3039) * _3015.w;
                        float _3056 = 1.39999997615814208984375 / (_3053 + 1.39999997615814208984375);
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _3046) + _3057;
                        float _3063 = _3053 * _3053;
                        float _3067 = ((isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))) * _3052) / ((_3063 * 0.699999988079071044921875) + 1.0);
                        float _3071 = (-0.0) - _2425;
                        float _3072 = (-0.0) - _2426;
                        float _3073 = (-0.0) - _2427;
                        float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
                        float _3078 = _3077 * _3071;
                        float _3079 = _3077 * _3072;
                        float _3080 = _3077 * _3073;
                        float _3088 = exp2(log2(1.0 / ((_3063 * 3.5) + 5.0)) * 0.25);
                        float _3089 = 1.0 - _705;
                        float _3096 = sqrt(1.0 - ((1.0 - (_3089 * _3089)) * (1.0 - (_3088 * _3088))));
                        float _3097 = _3096 * _3096;
                        float _3098 = _3097 * _3097;
                        float _3099 = _3078 + _3043;
                        float _3100 = _3079 + _3044;
                        float _3101 = _3080 + _3045;
                        float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                        float _3109 = dot(vec3(_637, _640, _643), vec3(_3078, _3079, _3080));
                        float _4394 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3112 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                        float _3113 = dot(vec3(_637, _640, _643), vec3(_3105 * _3099, _3105 * _3100, _3105 * _3101));
                        float _4405 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3116 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                        float _3120 = ((_3116 * _3116) * (_3098 + (-1.0))) + 1.0;
                        float _3121 = _3056 * _3097;
                        float _3122 = _3121 * _3121;
                        float _3125 = ((1.0 - _3122) * _3046) + _3122;
                        float _4416 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3126 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                        float _3127 = 1.0 - _3097;
                        float _3137 = (0.5 / (((_3126 * ((_3112 * _3127) + _3097)) + 9.9999999392252902907785028219223e-09) + (((_3126 * _3127) + _3097) * _3112))) * _3126;
                        float _4427 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3148 = (((_3098 * 3.1415927410125732421875) * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) / ((_3120 * _3120) * ((_3063 * 2.1991131305694580078125) + 3.141590118408203125))) * _3052;
                        _2900 = (_3067 * _3015.x) + _2973;
                        _2901 = (_3067 * _3015.y) + _2974;
                        _2902 = (_3067 * _3015.z) + _2975;
                        _2897 = (_3148 * _3032.x) + _2970;
                        _2898 = (_3148 * _3032.y) + _2971;
                        _2899 = (_3148 * _3032.z) + _2972;
                        if (_2977 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2902;
                            _2976 = _2977;
                        }
                    }
                    frontier_phi_66_pred = _2897;
                    frontier_phi_66_pred_1 = _2902;
                    frontier_phi_66_pred_2 = _2901;
                    frontier_phi_66_pred_3 = _2900;
                    frontier_phi_66_pred_4 = _2899;
                    frontier_phi_66_pred_5 = _2898;
                }
                _2642 = frontier_phi_66_pred;
                _2652 = frontier_phi_66_pred_1;
                _2650 = frontier_phi_66_pred_2;
                _2648 = frontier_phi_66_pred_3;
                _2646 = frontier_phi_66_pred_4;
                _2644 = frontier_phi_66_pred_5;
                uint _2832 = _2831 + 1u;
                if (_2832 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2825 = _2642;
                    _2826 = _2644;
                    _2827 = _2646;
                    _2828 = _2648;
                    _2829 = _2650;
                    _2830 = _2652;
                    _2831 = _2832;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
        }
        uvec4 _2655 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2656 = _2655.z;
        uint _2658 = (_2656 >> 8u) & 15u;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        if (((4294967295u << _2658) & _2471) == 0u)
        {
            _2793 = _2641;
            _2795 = _2643;
            _2797 = _2645;
            _2799 = _2647;
            _2801 = _2649;
            _2803 = _2651;
        }
        else
        {
            float _2818 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
            float _2819 = _2818 * _2425;
            float _2820 = _2818 * _2426;
            float _2821 = _2818 * _2427;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2658 < ((_2656 >> 12u) & 15u))
            {
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _2953 = _2641;
                float _2954 = _2643;
                float _2955 = _2645;
                float _2956 = _2647;
                float _2957 = _2649;
                float _2958 = _2651;
                uint _2959 = _2658;
                uint _2968;
                bool _2969;
                for (;;)
                {
                    _2968 = texelFetch(g_lightClassification, int((((_2465 << 5u) + (_2451 << 9u)) + (_2959 << 2u)) >> 2u)).x;
                    _2969 = _2968 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2969)
                    {
                        frontier_phi_77_pred = _2958;
                        frontier_phi_77_pred_1 = _2957;
                        frontier_phi_77_pred_2 = _2956;
                        frontier_phi_77_pred_3 = _2955;
                        frontier_phi_77_pred_4 = _2954;
                        frontier_phi_77_pred_5 = _2953;
                    }
                    else
                    {
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3175 = _2953;
                        float _3176 = _2954;
                        float _3177 = _2955;
                        float _3178 = _2956;
                        float _3179 = _2957;
                        float _3180 = _2958;
                        uint _3181 = _2968;
                        uint _3182;
                        vec4 _3207;
                        float _3208;
                        vec4 _3223;
                        vec3 _3235;
                        vec4 _3251;
                        vec4 _3267;
                        float _3314;
                        bool _3315;
                        for (;;)
                        {
                            uint _3192 = ((_2959 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3181));
                            _3182 = (_3181 + 4294967295u) & _3181;
                            uint _3194 = _3192 * 40u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            _3208 = _3207.w;
                            uint _3210 = (_3192 * 40u) + 4u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3225 = (_3192 * 40u) + 8u;
                            _3235 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x));
                            uint _3238 = (_3192 * 40u) + 16u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3254 = (_3192 * 40u) + 20u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3270 = (_3192 * 40u) + 24u;
                            vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3289 = (_3192 * 40u) + 28u;
                            vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3314 = fma(_2427, _3302.z, fma(_2426, _3302.y, _3302.x * _2425)) + _3302.w;
                            _3315 = !((fma(_2427, _3283.z, fma(_2426, _3283.y, _3283.x * _2425)) + _3283.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3315)
                            {
                                float _3342 = _3207.x - _2425;
                                float _3343 = _3207.y - _2426;
                                float _3344 = _3207.z - _2427;
                                float _3345 = dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344));
                                float _3348 = inversesqrt(_3345);
                                float _3349 = _3348 * _3342;
                                float _3350 = _3348 * _3343;
                                float _3351 = _3348 * _3344;
                                float _3355 = 1.0 - (_3345 / (_3208 * _3208));
                                float _4438 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3360 = sqrt(_3345) * _3223.w;
                                float _3362 = 1.39999997615814208984375 / (_3360 + 1.39999997615814208984375);
                                float _3363 = _3362 * _3362;
                                float _3366 = ((1.0 - _3363) * dot(vec3(_3349, _3350, _3351), vec3(_637, _640, _643))) + _3363;
                                float _3369 = _3360 * _3360;
                                float _3373 = (fma(_2427, _3251.z, fma(_2426, _3251.y, _3251.x * _2425)) + _3251.w) / _3314;
                                float _3374 = (fma(_2427, _3267.z, fma(_2426, _3267.y, _3267.x * _2425)) + _3267.w) / _3314;
                                float _3378 = 1.0 - dot(vec2(_3373, _3374), vec2(_3373, _3374));
                                float _4454 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3380 = _3379 * (((isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))) * _3356) / ((_3369 * 0.699999988079071044921875) + 1.0));
                                float _3392 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                                float _3393 = 1.0 - _705;
                                float _3400 = sqrt(1.0 - ((1.0 - (_3393 * _3393)) * (1.0 - (_3392 * _3392))));
                                float _3401 = _3400 * _3400;
                                float _3402 = _3401 * _3401;
                                float _3403 = _3349 - _2819;
                                float _3404 = _3350 - _2820;
                                float _3405 = _3351 - _2821;
                                float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                                float _3413 = dot(vec3(_637, _640, _643), vec3((-0.0) - _2819, (-0.0) - _2820, (-0.0) - _2821));
                                float _4465 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3416 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                                float _3417 = dot(vec3(_637, _640, _643), vec3(_3409 * _3403, _3409 * _3404, _3409 * _3405));
                                float _4476 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3420 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3424 = ((_3420 * _3420) * (_3402 + (-1.0))) + 1.0;
                                float _3425 = _3362 * _3401;
                                float _3426 = _3425 * _3425;
                                float _3432 = ((1.0 - _3426) * dot(vec3(_637, _640, _643), vec3(_3349, _3350, _3351))) + _3426;
                                float _4487 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3434 = 1.0 - _3401;
                                float _3444 = (0.5 / (((_3433 * ((_3416 * _3434) + _3401)) + 9.9999999392252902907785028219223e-09) + (((_3433 * _3434) + _3401) * _3416))) * _3433;
                                float _4498 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3454 = (_3379 * _3356) * (((_3402 * 3.1415927410125732421875) * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) / ((_3424 * _3424) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3380 * _3223.y;
                                frontier_phi_83_pred_1 = _3380 * _3223.x;
                                frontier_phi_83_pred_2 = _3454 * _3235.z;
                                frontier_phi_83_pred_3 = _3454 * _3235.y;
                                frontier_phi_83_pred_4 = _3454 * _3235.x;
                                frontier_phi_83_pred_5 = _3380 * _3223.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3462 = frontier_phi_83_pred;
                            _3461 = frontier_phi_83_pred_1;
                            _3460 = frontier_phi_83_pred_2;
                            _3459 = frontier_phi_83_pred_3;
                            _3458 = frontier_phi_83_pred_4;
                            _3463 = frontier_phi_83_pred_5;
                            _3165 = _3461 + _3178;
                            _3166 = _3462 + _3179;
                            _3167 = _3463 + _3180;
                            _3162 = _3458 + _3175;
                            _3163 = _3459 + _3176;
                            _3164 = _3460 + _3177;
                            if (_3182 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3182;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3167;
                        frontier_phi_77_pred_1 = _3166;
                        frontier_phi_77_pred_2 = _3165;
                        frontier_phi_77_pred_3 = _3164;
                        frontier_phi_77_pred_4 = _3163;
                        frontier_phi_77_pred_5 = _3162;
                    }
                    _2804 = frontier_phi_77_pred;
                    _2802 = frontier_phi_77_pred_1;
                    _2800 = frontier_phi_77_pred_2;
                    _2798 = frontier_phi_77_pred_3;
                    _2796 = frontier_phi_77_pred_4;
                    _2794 = frontier_phi_77_pred_5;
                    uint _2960 = _2959 + 1u;
                    if (_2960 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2953 = _2794;
                        _2954 = _2796;
                        _2955 = _2798;
                        _2956 = _2800;
                        _2957 = _2802;
                        _2958 = _2804;
                        _2959 = _2960;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2798;
                frontier_phi_58_59_ladder_1 = _2804;
                frontier_phi_58_59_ladder_2 = _2802;
                frontier_phi_58_59_ladder_3 = _2800;
                frontier_phi_58_59_ladder_4 = _2796;
                frontier_phi_58_59_ladder_5 = _2794;
            }
            else
            {
                frontier_phi_58_59_ladder = _2645;
                frontier_phi_58_59_ladder_1 = _2651;
                frontier_phi_58_59_ladder_2 = _2649;
                frontier_phi_58_59_ladder_3 = _2647;
                frontier_phi_58_59_ladder_4 = _2643;
                frontier_phi_58_59_ladder_5 = _2641;
            }
            _2793 = frontier_phi_58_59_ladder_5;
            _2795 = frontier_phi_58_59_ladder_4;
            _2797 = frontier_phi_58_59_ladder;
            _2799 = frontier_phi_58_59_ladder_3;
            _2801 = frontier_phi_58_59_ladder_2;
            _2803 = frontier_phi_58_59_ladder_1;
        }
        float _2808 = isnan(1.0) ? _681 : (isnan(_681) ? 1.0 : min(_681, 1.0));
        _2484 = (_2808 * _2799) + _1939;
        _2486 = (_2808 * _2801) + _1941;
        _2488 = (_2808 * _2803) + _1943;
        _2490 = ((_2793 * 0.039999999105930328369140625) * _2808) + _2269;
        _2492 = ((_2795 * 0.039999999105930328369140625) * _2808) + _2271;
        _2494 = ((_2797 * 0.039999999105930328369140625) * _2808) + _2273;
    }
    else
    {
        _2484 = _1939;
        _2486 = _1941;
        _2488 = _1943;
        _2490 = _2269;
        _2492 = _2271;
        _2494 = _2273;
    }
    float _2508 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2509 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2510 = cbSceneParam._m0[86u].x * (_1757 + ((_704 * cbMtdParam._m0[11u].y) * dot(vec3(_515, _516, _517), vec3(_205, _206, _207))));
    float _2511 = isnan(_2508) ? _2510 : (isnan(_2510) ? _2508 : min(_2510, _2508));
    float _2512 = isnan(_2509) ? _617 : (isnan(_617) ? _2509 : min(_617, _2509));
    vec4 _2514 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2511, _2512), 0.0);
    float _2516 = _2514.x;
    bool _2536 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2516)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2516))) > _537;
    vec4 _2540 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2536 ? _2511 : _616, _2536 ? _2512 : _617));
    float _4524 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4535 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4546 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _2564 = 0.959999978542327880859375 - (exp2(log2(1.0 - _696) * 5.0) * 0.959999978542327880859375);
    float _2566 = (_2540.x * _2564) * cbSceneParam._m0[72u].w;
    float _2568 = (_2540.y * _2564) * cbSceneParam._m0[72u].w;
    float _2570 = (_2540.z * _2564) * cbSceneParam._m0[72u].w;
    float _2578 = (_2566 + (((((_1734 * _1782.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1526) * _1798)) + _2490) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2484 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _681))) - _2566) * 0.5);
    float _2580 = (_2568 + (((((_1734 * _1782.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1526) * _1798)) + _2492) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2486 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _681))) - _2568) * 0.5);
    float _2582 = (_2570 + (((((_1734 * _1782.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1526) * _1798)) + _2494) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2488 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _681))) - _2570) * 0.5);
    uint _2583 = _656 + 6u;
    float _2591 = _616 / cbSceneParam._m0[86u].x;
    float _2592 = _617 / cbSceneParam._m0[86u].y;
    vec4 _2606 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2591, _2592, (log2((isnan(cbSceneParam._m0[77u].w) ? _537 : (isnan(_537) ? cbSceneParam._m0[77u].w : min(_537, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2608 = _2606.x;
    float _2609 = _2606.y;
    float _2610 = _2606.z;
    float _2611 = _2606.w;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    if (_537 > cbSceneParam._m0[78u].w)
    {
        float _2666 = isnan(_537) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _537 : min(cbSceneParam._m0[80u].w, _537));
        float _2667 = _2666 / _537;
        float _2678 = _2667 * _588;
        float _2679 = _589 * _2667;
        float _2680 = (-0.0) - _2679;
        float _2681 = _2667 * _590;
        float _2683 = (cbSceneParam._m0[77u].w * _2680) / _2666;
        float _2684 = _2683 + cbSceneParam._m0[79u].w;
        float _2685 = cbSceneParam._m0[79u].w - _2679;
        float _2691 = sqrt(((_2678 * _2678) + (_2679 * _2679)) + (_2681 * _2681));
        float _2694 = (1.0 - (cbSceneParam._m0[77u].w / _2666)) * _2691;
        float _2699 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2701 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2910;
        if (abs((_2680 - _2683) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2910 = ((((_2684 > 0.0) ? exp2(_2699 * _2684) : (2.0 - exp2(_2701 * _2684))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2694;
        }
        else
        {
            float _2854 = 1.0 / cbSceneParam._m0[80u].x;
            float _2855 = isnan(_2685) ? _2684 : (isnan(_2684) ? _2685 : max(_2684, _2685));
            float _2856 = isnan(_2685) ? _2684 : (isnan(_2684) ? _2685 : min(_2684, _2685));
            float _2865 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : min(_2855, 0.0));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            _2910 = ((abs(_2691 / _2680) * cbSceneParam._m0[80u].y) * ((((_2865 - _2866) * 2.0) - ((exp2(_2699 * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0)))) - exp2(_2699 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0))))) * _2854)) - ((exp2(_2701 * _2865) - exp2(_2701 * _2866)) * _2854))) + (_2694 * cbSceneParam._m0[80u].z);
        }
        vec4 _2912 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2591, _2592, 1.0), 0.0);
        float _2921 = exp2((_2910 * (-1.44269502162933349609375)) * (1.0 - _2912.w));
        float _2922 = log2(_2921);
        float _2938 = log2(_2611);
        _2703 = (exp2(_2938 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].x)) * _2912.x) / cbSceneParam._m0[78u].x)) + _2608;
        _2705 = (exp2(_2938 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].y)) * _2912.y) / cbSceneParam._m0[78u].y)) + _2609;
        _2707 = (exp2(_2938 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].z)) * _2912.z) / cbSceneParam._m0[78u].z)) + _2610;
        _2709 = _2921 * _2611;
    }
    else
    {
        _2703 = _2608;
        _2705 = _2609;
        _2707 = _2610;
        _2709 = _2611;
    }
    bool _2948;
    float _2764;
    vec4 _2767;
    float _2769;
    vec4 _2771;
    float _2779;
    float _2780;
    float _2781;
    float _2782;
    bool _2792;
    for (;;)
    {
        bool _2721 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2722 = log2(_2709);
        float _2729 = exp2(_2722 * cbSceneParam._m0[78u].x) * _2578;
        float _2730 = exp2(_2722 * cbSceneParam._m0[78u].y) * _2580;
        float _2731 = exp2(_2722 * cbSceneParam._m0[78u].z) * _2582;
        vec4 _2739 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_616, _617));
        float _2741 = _2739.x;
        float _2762 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2741)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2741))) - _537) * cbMtdParam._m0[12u].z;
        float _4597 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        _2764 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * cbInstanceData._m0[_2583].w;
        float _2765 = _604 + (-0.5);
        _2767 = cbMtdParam._m0[1u];
        _2769 = _2767.y * _2765;
        _2771 = cbMatDynParam._m0[0u];
        float _2778 = (roundEven(_2771.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2779 = _2778 * (_2721 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2703)));
        _2780 = _2778 * (_2721 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2705)));
        _2781 = _2778 * (_2721 ? _2731 : (_2731 + (cbSceneParam._m0[72u].w * _2707)));
        _2782 = _2765 * 0.999000012874603271484375;
        _2792 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2792)
        {
            if ((cbInstanceData._m0[_656 + 7u].x + _2782) < 0.5)
            {
                _2948 = true;
                break;
            }
        }
        uint _2889 = _657 + uint(_2771.w);
        if ((cbInstanceData._m0[_2889].w < 1.0) && ((cbInstanceData._m0[_2889].w + _2782) < 0.5))
        {
            _2948 = true;
            break;
        }
        if ((_2769 + 1.0) < _2767.x)
        {
            _2948 = true;
            break;
        }
        _2948 = false;
        break;
    }
    float _3153;
    if (_2948)
    {
        discard_state = true;
        _3153 = 0.0;
    }
    else
    {
        _3153 = _2764;
    }
    SV_Target.x = _2779;
    SV_Target.y = _2780;
    SV_Target.z = _2781;
    SV_Target.w = _3153;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2764;
    discard_exit();
}


