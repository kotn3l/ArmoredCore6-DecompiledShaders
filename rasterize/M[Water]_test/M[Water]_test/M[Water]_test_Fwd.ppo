#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_test_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_test_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_test_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_test_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_test_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1043;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x;
    float _266 = exp2(log2(texture(sampler2D(M_Water_test_snp_0_Texture2D_2, SS_WrapLinear), vec2((((_238 * cbMtdParam._m0[14u].z) + TEXCOORD) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[14u].w * _238) + TEXCOORD_1) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w)).x) * cbMtdParam._m0[12u].y);
    float _280 = (cbMtdParam._m0[15u].z * _238) + TEXCOORD;
    float _281 = (cbMtdParam._m0[15u].w * _238) + TEXCOORD_1;
    vec4 _293 = texture(sampler2D(M_Water_test_snp_0_Texture2D_3, SS_WrapLinear), vec2((_280 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_281 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _299 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[13u].x * cbMtdParam._m0[11u].w);
    float _306 = ((_293.y * 0.5) + (-0.25)) * cbMtdParam._m0[12u].w;
    float _308 = (-0.0) - (cbMtdParam._m0[12u].w * ((_293.x * 0.5) + (-0.25)));
    float _310 = fract(_299);
    float _312 = fract(_299 + 0.5);
    float _324 = abs((_310 * 2.0) + (-1.0));
    vec4 _341 = texture(sampler2D(M_Water_test_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_310 * _308) + _280) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_306 * _310) + _281) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _343 = _341.x;
    float _344 = _341.y;
    float _345 = _341.z;
    vec4 _346 = texture(sampler2D(M_Water_test_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_312 * _308) + _280) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_306 * _312) + _281) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _369 = (((cbMtdParam._m0[10u].x * TEXCOORD_3.x) * _266) * (((_346.x - _343) * _324) + _343)) + cbMtdParam._m0[9u].x;
    float _370 = (((cbMtdParam._m0[10u].y * TEXCOORD_3.x) * _266) * (((_346.y - _344) * _324) + _344)) + cbMtdParam._m0[9u].y;
    float _371 = (((cbMtdParam._m0[10u].z * TEXCOORD_3.x) * _266) * (((_346.z - _345) * _324) + _345)) + cbMtdParam._m0[9u].z;
    vec4 _392 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[14u].x * _238) + TEXCOORD) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[14u].y * _238) + TEXCOORD_1) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _417 = texture(sampler2D(M_Water_test_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[13u].z * _238) + TEXCOORD) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[13u].w * _238) + TEXCOORD_1) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _423 = (_417.x * 2.0) + (-1.0);
    float _424 = (_417.y * 2.0) + (-1.0);
    float _425 = dot(vec2(_423, _424), vec2(_423, _424));
    float _3506 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))));
    float _440 = (cbMtdParam._m0[15u].x * _238) + TEXCOORD;
    float _441 = (cbMtdParam._m0[15u].y * _238) + TEXCOORD_1;
    vec4 _446 = texture(sampler2D(M_Water_test_snp_0_Texture2D_3, SS_WrapLinear), vec2((_440 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_441 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _454 = ((_446.y * 0.5) + (-0.25)) * cbMtdParam._m0[12u].w;
    float _456 = (-0.0) - (cbMtdParam._m0[12u].w * ((_446.x * 0.5) + (-0.25)));
    vec4 _473 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((_310 * _456) + _440) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_454 * _310) + _441) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _475 = _473.x;
    float _476 = _473.y;
    vec4 _477 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((_312 * _456) + _440) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_454 * _312) + _441) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _493 = (_423 + (((_392.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z)) + ((((((_477.x - _475) * _324) + _475) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y);
    float _494 = (_424 + (((_392.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z)) + ((((((_477.y - _476) * _324) + _476) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y);
    float _500 = fma(_431, _207 * NORMAL.x, fma(_494, _214 * TANGENT.x, _493 * _201));
    float _503 = fma(_431, _207 * NORMAL.y, fma(_494, _214 * TANGENT.y, _493 * _202));
    float _506 = fma(_431, _207 * NORMAL.z, fma(_494, _214 * TANGENT.z, _493 * _203));
    float _510 = inversesqrt(dot(vec3(_500, _503, _506), vec3(_500, _503, _506)));
    float _511 = _510 * _500;
    float _512 = _510 * _503;
    float _513 = _510 * _506;
    float _3517 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _514 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3539 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3550 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _533 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _584 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _574);
    float _585 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _574);
    float _586 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _574);
    float _590 = inversesqrt(dot(vec3(_584, _585, _586), vec3(_584, _585, _586)));
    float _591 = _584 * _590;
    float _592 = _585 * _590;
    float _593 = _586 * _590;
    float _599 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _600 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _621 = fma(_513, cbSceneParam._m0[5u].z, fma(_512, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _511));
    float _624 = fma(_513, cbSceneParam._m0[6u].z, fma(_512, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _511));
    float _627 = fma(_513, cbSceneParam._m0[7u].z, fma(_512, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _511));
    uint _640 = uint(roundEven(NORMAL.w)) * 13u;
    uint _642 = (_640 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _648 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * cbInstanceData._m0[_642].x;
    float _649 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_642].y;
    float _650 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_642].z;
    float _3561 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _3583 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    vec4 _662 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _599, cbSceneParam._m0[86u].y * _600));
    float _665 = _662.x * TEXCOORD_3.w;
    float _666 = dot(vec3(_511, _512, _513), vec3(_591, _592, _593));
    float _669 = _666 * 2.0;
    float _673 = (_669 * _511) - _591;
    float _674 = (_669 * _512) - _592;
    float _675 = (_669 * _513) - _593;
    float _679 = abs(dot(vec3(_591, _592, _593), vec3(_511, _512, _513)));
    float _3594 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _680 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _688 = 10.0 / (_533 + 10.0);
    float _689 = sqrt(_514);
    float _701 = exp2((_689 * 5.0) * log2(1.0 - (_680 * 0.999000012874603271484375))) / (4.0 - (_689 * 3.0));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1042;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _768 = fma(_741, cbModelParam._m0[26u].z, fma(_737, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _733));
        float _772 = fma(_741, cbModelParam._m0[27u].z, fma(_737, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _733));
        float _776 = fma(_741, cbModelParam._m0[28u].z, fma(_737, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _733));
        float _800 = _733 + _511;
        float _801 = _737 + _512;
        float _802 = _741 + _513;
        float _812 = fma(_802, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800)) - _768;
        float _813 = fma(_802, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800)) - _772;
        float _814 = fma(_802, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800)) - _776;
        float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
        float _831 = ((_818 * _812) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_768 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_818 * _813) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_772 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_818 * _814) / cbModelParam._m0[34u].z) + ((((((_776 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _870 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_836.x + (-0.5));
        float _872 = _870 * (_836.y + (-0.5));
        float _873 = _870 * (_836.z + (-0.5));
        float _880 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_843.x + (-0.5));
        float _882 = _880 * (_843.y + (-0.5));
        float _883 = _880 * (_843.z + (-0.5));
        float _890 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_850.x + (-0.5));
        float _892 = _890 * (_850.y + (-0.5));
        float _893 = _890 * (_850.z + (-0.5));
        float _900 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_857.x + (-0.5));
        float _902 = _900 * (_857.y + (-0.5));
        float _903 = _900 * (_857.z + (-0.5));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = _871 * 0.5;
        float _908 = _881 * 0.5;
        float _909 = _891 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _924 = (dot(vec3(_511, _512, _513), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _934 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3642 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_936 + 1.0))) + _941) * _904;
        float _951 = _872 * 0.5;
        float _952 = _882 * 0.5;
        float _953 = _892 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_511, _512, _513), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3675 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_978 + 1.0))) + _983) * _905;
        float _993 = _873 * 0.5;
        float _994 = _883 * 0.5;
        float _995 = _893 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_511, _512, _513), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3708 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1020 + 1.0))) + _1025) * _906;
        _1042 = _873;
        _1044 = _872;
        _1045 = _871;
        _1046 = _883;
        _1047 = _882;
        _1048 = _881;
        _1049 = _893;
        _1050 = _892;
        _1051 = _891;
        _1052 = _906;
        _1053 = _905;
        _1054 = _904;
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
    }
    else
    {
        _1042 = _1043;
        _1044 = _1043;
        _1045 = _1043;
        _1046 = _1043;
        _1047 = _1043;
        _1048 = _1043;
        _1049 = _1043;
        _1050 = _1043;
        _1051 = _1043;
        _1052 = _1043;
        _1053 = _1043;
        _1054 = _1043;
        _1055 = 0.0;
        _1056 = 0.0;
        _1057 = 0.0;
    }
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1083 = fma(_741, cbModelParam._m0[30u].z, fma(_737, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _733));
        float _1087 = fma(_741, cbModelParam._m0[31u].z, fma(_737, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _733));
        float _1091 = fma(_741, cbModelParam._m0[32u].z, fma(_737, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _733));
        float _1114 = _733 + _511;
        float _1115 = _737 + _512;
        float _1116 = _741 + _513;
        float _1126 = fma(_1116, cbModelParam._m0[30u].z, fma(_1115, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1114)) - _1083;
        float _1127 = fma(_1116, cbModelParam._m0[31u].z, fma(_1115, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1114)) - _1087;
        float _1128 = fma(_1116, cbModelParam._m0[32u].z, fma(_1115, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1114)) - _1091;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1083 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1087 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[35u].z) + ((((((_1091 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1182 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1149.x + (-0.5));
        float _1184 = _1182 * (_1149.y + (-0.5));
        float _1185 = _1182 * (_1149.z + (-0.5));
        float _1192 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1156.x + (-0.5));
        float _1194 = _1192 * (_1156.y + (-0.5));
        float _1195 = _1192 * (_1156.z + (-0.5));
        float _1202 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1163.x + (-0.5));
        float _1204 = _1202 * (_1163.y + (-0.5));
        float _1205 = _1202 * (_1163.z + (-0.5));
        float _1212 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1170.x + (-0.5));
        float _1214 = _1212 * (_1170.y + (-0.5));
        float _1215 = _1212 * (_1170.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_511, _512, _513), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3771 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1246 + 1.0))) + _1251) * _1216;
        float _1261 = _1184 * 0.5;
        float _1262 = _1194 * 0.5;
        float _1263 = _1204 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_511, _512, _513), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3804 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1288 + 1.0))) + _1293) * _1217;
        float _1303 = _1185 * 0.5;
        float _1304 = _1195 * 0.5;
        float _1305 = _1205 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_511, _512, _513), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3837 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1330 + 1.0))) + _1335) * _1218;
        _1352 = _1185;
        _1353 = _1184;
        _1354 = _1183;
        _1355 = _1195;
        _1356 = _1194;
        _1357 = _1193;
        _1358 = _1205;
        _1359 = _1204;
        _1360 = _1203;
        _1361 = _1218;
        _1362 = _1217;
        _1363 = _1216;
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1043;
        _1353 = _1043;
        _1354 = _1043;
        _1355 = _1043;
        _1356 = _1043;
        _1357 = _1043;
        _1358 = _1043;
        _1359 = _1043;
        _1360 = _1043;
        _1361 = _1043;
        _1362 = _1043;
        _1363 = _1043;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1055)) + _1055;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1056)) + _1056;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1399 = fma(_1378, cbSceneParam._m0[89u].z, fma(_1377, cbSceneParam._m0[89u].y, _1376 * cbSceneParam._m0[89u].x));
    float _1402 = fma(_1378, cbSceneParam._m0[90u].z, fma(_1377, cbSceneParam._m0[90u].y, _1376 * cbSceneParam._m0[90u].x));
    float _1405 = fma(_1378, cbSceneParam._m0[91u].z, fma(_1377, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1376));
    float _1420 = _673 * 0.5;
    float _1421 = _674 * 0.5;
    float _1422 = _675 * 0.5;
    float _1423 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1426 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1429 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1463;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1436 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1042, _1046, _1049, _1052));
        float _1440 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1444 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1451 = dot(vec4(cbModelParam._m0[39u]), vec4(_1420, _1421, _1422, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1451) ? 0.0 : (isnan(0.0) ? _1451 : max(0.0, _1451))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1474;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1465 = dot(vec4(cbModelParam._m0[40u]), vec4(_1420, _1421, _1422, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1478 = (_1474 * cbModelParam._m0[1u].x) + (_1463 * (1.0 - cbModelParam._m0[1u].x));
    float _1488 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _514);
    float _1489 = isnan(_1488) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1488 : min(cbModelParam._m0[25u].z, _1488));
    float _1569;
    float _1571;
    float _1573;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1536 = fma(_741, cbModelParam._m0[13u].z, fma(_737, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _733)) + cbModelParam._m0[13u].w;
        float _1540 = fma(_741, cbModelParam._m0[14u].z, fma(_737, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _733)) + cbModelParam._m0[14u].w;
        float _1544 = fma(_741, cbModelParam._m0[15u].z, fma(_737, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _733)) + cbModelParam._m0[15u].w;
        float _1547 = fma(_675, cbModelParam._m0[13u].z, fma(_674, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673));
        float _1550 = fma(_675, cbModelParam._m0[14u].z, fma(_674, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673));
        float _1553 = fma(_675, cbModelParam._m0[15u].z, fma(_674, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673));
        float _1581;
        if (_1547 > 0.0)
        {
            _1581 = abs((1.0 - _1536) / _1547);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1536 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1581 = frontier_phi_14_12_ladder;
        }
        float _1836;
        if (_1550 > 0.0)
        {
            _1836 = abs((1.0 - _1540) / _1550);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1540 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1836 = frontier_phi_23_19_ladder;
        }
        float _2079;
        if (_1553 > 0.0)
        {
            _2079 = abs((1.0 - _1544) / _1553);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1544 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2079 = frontier_phi_35_30_ladder;
        }
        float _2081 = isnan(_1836) ? _1581 : (isnan(_1581) ? _1836 : min(_1581, _1836));
        float _2082 = isnan(_2079) ? _2081 : (isnan(_2081) ? _2079 : min(_2081, _2079));
        float _2086 = (_2082 * _1547) + _1536;
        float _2087 = (_2082 * _1550) + _1540;
        float _2088 = (_2082 * _1553) + _1544;
        float _2089 = _2082 * 9.9999997473787516355514526367188e-05;
        float _2091 = (-1.0) - _2089;
        float _2093 = _2089 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2088 > _2093) || ((_2088 < _2091) || ((_2087 > _2093) || ((_2087 < _2091) || ((_2086 < _2091) || (_2086 > _2093))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2212 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2088, cbModelParam._m0[9u].z, fma(_2087, cbModelParam._m0[9u].y, _2086 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2088, cbModelParam._m0[10u].z, fma(_2087, cbModelParam._m0[10u].y, _2086 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2088, cbModelParam._m0[11u].z, fma(_2087, cbModelParam._m0[11u].y, _2086 * cbModelParam._m0[11u].x))), _1489);
            frontier_phi_13_35_ladder = _2212.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2212.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2212.x * cbModelParam._m0[1u].y;
        }
        _1569 = frontier_phi_13_35_ladder_2;
        _1571 = frontier_phi_13_35_ladder_1;
        _1573 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_673, _674, _675), _1489);
        _1569 = _1557.x * cbModelParam._m0[1u].y;
        _1571 = _1557.y * cbModelParam._m0[1u].y;
        _1573 = _1557.z * cbModelParam._m0[1u].y;
    }
    float _1577 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _514);
    float _1578 = isnan(_1577) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1577 : min(cbModelParam._m0[25u].w, _1577));
    float _1670;
    float _1672;
    float _1674;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1634 = fma(_741, cbModelParam._m0[21u].z, fma(_737, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _733)) + cbModelParam._m0[21u].w;
        float _1638 = fma(_741, cbModelParam._m0[22u].z, fma(_737, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _733)) + cbModelParam._m0[22u].w;
        float _1642 = fma(_741, cbModelParam._m0[23u].z, fma(_737, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _733)) + cbModelParam._m0[23u].w;
        float _1645 = fma(_675, cbModelParam._m0[21u].z, fma(_674, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673));
        float _1648 = fma(_675, cbModelParam._m0[22u].z, fma(_674, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673));
        float _1651 = fma(_675, cbModelParam._m0[23u].z, fma(_674, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673));
        float _1841;
        if (_1645 > 0.0)
        {
            _1841 = abs((1.0 - _1634) / _1645);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1634 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1841 = frontier_phi_25_21_ladder;
        }
        float _2106;
        if (_1648 > 0.0)
        {
            _2106 = abs((1.0 - _1638) / _1648);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1638 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2106 = frontier_phi_37_32_ladder;
        }
        float _2311;
        if (_1651 > 0.0)
        {
            _2311 = abs((1.0 - _1642) / _1651);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1642 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2311 = frontier_phi_46_43_ladder;
        }
        float _2313 = isnan(_2106) ? _1841 : (isnan(_1841) ? _2106 : min(_1841, _2106));
        float _2314 = isnan(_2311) ? _2313 : (isnan(_2313) ? _2311 : min(_2313, _2311));
        float _2318 = (_2314 * _1645) + _1634;
        float _2319 = (_2314 * _1648) + _1638;
        float _2320 = (_2314 * _1651) + _1642;
        float _2321 = _2314 * 9.9999997473787516355514526367188e-05;
        float _2322 = (-1.0) - _2321;
        float _2324 = _2321 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2320 > _2324) || ((_2320 < _2322) || ((_2319 > _2324) || ((_2319 < _2322) || ((_2318 < _2322) || (_2318 > _2324))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2588 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2320, cbModelParam._m0[17u].z, fma(_2319, cbModelParam._m0[17u].y, _2318 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2320, cbModelParam._m0[18u].z, fma(_2319, cbModelParam._m0[18u].y, _2318 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2320, cbModelParam._m0[19u].z, fma(_2319, cbModelParam._m0[19u].y, _2318 * cbModelParam._m0[19u].x))), _1578);
            frontier_phi_22_46_ladder = _2588.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2588.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2588.x * cbModelParam._m0[1u].z;
        }
        _1670 = frontier_phi_22_46_ladder_2;
        _1672 = frontier_phi_22_46_ladder_1;
        _1674 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1654 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_673, _674, _675), _1578);
        _1670 = _1654.x * cbModelParam._m0[1u].z;
        _1672 = _1654.y * cbModelParam._m0[1u].z;
        _1674 = _1654.z * cbModelParam._m0[1u].z;
    }
    float _1686 = ((((1.0 - _701) * ((_689 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_701 * _689)) * _665;
    float _1687 = _1686 * ((cbModelParam._m0[1u].w * (_1670 - _1569)) + _1569);
    float _1688 = _1686 * ((cbModelParam._m0[1u].w * (_1672 - _1571)) + _1571);
    float _1689 = _1686 * ((cbModelParam._m0[1u].w * (_1674 - _1573)) + _1573);
    float _1692 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, _1687 * cbSceneParam._m0[91u].x));
    float _1709 = _599 / cbSceneParam._m0[86u].x;
    float _1717 = (cbSceneParam._m0[88u].y * (1.0 - _514)) + cbSceneParam._m0[88u].z;
    float _3963 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1719 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 5.0;
    float _1724 = (_688 * cbMtdParam._m0[12u].x) * dot(vec3(_511, _512, _513), vec3(1.0, 0.0, 0.0));
    vec4 _1734 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1724 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1724 + _1709) * cbSceneParam._m0[86u].x, _600), _1719).w) + _1709) * cbSceneParam._m0[86u].x, _600), _1719);
    float _1750 = 1.0 - _1734.w;
    uvec4 _1760 = floatBitsToUint(cbInstanceData._m0[_640 + 5u]);
    uint _1762 = _1760.x * 14u;
    uint _1763 = _1762 + 13u;
    float _1770 = _665 + (-1.0);
    float _1775 = (cbLight._m0[_1763].x * _1770) + 1.0;
    float _1776 = (cbLight._m0[_1763].y * _1770) + 1.0;
    float _1777 = (cbLight._m0[_1763].z * _1770) + 1.0;
    float _1778 = (cbLight._m0[_1763].w * _1770) + 1.0;
    uint _1779 = _1762 + 5u;
    float _1785 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
    uint _1789 = _1762 + 4u;
    float _1795 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
    uint _1799 = _1762 | 1u;
    float _1810 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_511, _512, _513));
    float _1813 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_511, _512, _513));
    float _3984 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _3995 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1818 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * 0.3183098733425140380859375;
    float _1820 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.3183098733425140380859375;
    float _1827 = ((cbLight._m0[_1779].x * _1785) * _1820) + ((cbLight._m0[_1789].x * _1795) * _1818);
    float _1828 = ((_1785 * cbLight._m0[_1779].y) * _1820) + ((_1795 * cbLight._m0[_1789].y) * _1818);
    float _1829 = ((_1785 * cbLight._m0[_1779].z) * _1820) + ((_1795 * cbLight._m0[_1789].z) * _1818);
    uvec4 _1833 = floatBitsToUint(cbLight._m0[_1762 + 12u]);
    bool _1835 = _1833.x == 0u;
    float _1846;
    float _1848;
    float _1850;
    if (_1835)
    {
        _1846 = _1827;
        _1848 = _1828;
        _1850 = _1829;
    }
    else
    {
        uint _1854 = _1762 + 6u;
        float _1870 = (dot(vec3(cbLight._m0[_1762 + 2u].xyz), vec3(_511, _512, _513)) * 0.5) + 0.5;
        float _1871 = _1870 * _1870;
        float _4006 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1873 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
        _1846 = (((cbLight._m0[_1854].x * 0.3183098733425140380859375) * _1872) * _1873) + _1827;
        _1848 = (((cbLight._m0[_1854].y * 0.3183098733425140380859375) * _1872) * _1873) + _1828;
        _1850 = (((cbLight._m0[_1854].z * 0.3183098733425140380859375) * _1872) * _1873) + _1829;
    }
    bool _1853 = _1833.y == 0u;
    float _1891;
    float _1893;
    float _1895;
    if (_1853)
    {
        _1891 = _1846;
        _1893 = _1848;
        _1895 = _1850;
    }
    else
    {
        uint _2050 = _1762 + 7u;
        float _2066 = (dot(vec3(cbLight._m0[_1762 + 3u].xyz), vec3(_511, _512, _513)) * 0.5) + 0.5;
        float _2067 = _2066 * _2066;
        float _4022 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2068 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2069 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
        _1891 = (((cbLight._m0[_2050].x * 0.3183098733425140380859375) * _2068) * _2069) + _1846;
        _1893 = (((cbLight._m0[_2050].y * 0.3183098733425140380859375) * _2068) * _2069) + _1848;
        _1895 = (((cbLight._m0[_2050].z * 0.3183098733425140380859375) * _2068) * _2069) + _1850;
    }
    uint _1898 = _1762 + 8u;
    float _1911 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1762].w)) * _514) * 0.949999988079071044921875);
    float _1912 = _1911 * _1911;
    float _1913 = cbLight._m0[_1762].x + _591;
    float _1914 = cbLight._m0[_1762].y + _592;
    float _1915 = cbLight._m0[_1762].z + _593;
    float _1919 = inversesqrt(dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915)));
    float _1920 = _1919 * _1913;
    float _1921 = _1919 * _1914;
    float _1922 = _1919 * _1915;
    float _1923 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_1762].xyz));
    float _4038 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _4049 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _1927 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _1928 = dot(vec3(_511, _512, _513), vec3(_1920, _1921, _1922));
    float _4060 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _1932 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_1920, _1921, _1922));
    float _4071 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1936 = _1912 * _1912;
    float _1940 = ((_1931 * _1931) * (_1936 + (-1.0))) + 1.0;
    float _1951 = (exp2(log2(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1952 = 1.0 - _1912;
    float _1963 = (0.5 / (((_1927 * ((_1926 * _1952) + _1912)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _1952) + _1912) * _1926))) * _1926;
    float _4082 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1965 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1936 / ((_1940 * _1940) * 3.141590118408203125));
    uint _1976 = _1762 + 9u;
    float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1799].w)) * _514) * 0.949999988079071044921875);
    float _1988 = _1987 * _1987;
    float _1989 = cbLight._m0[_1799].x + _591;
    float _1990 = cbLight._m0[_1799].y + _592;
    float _1991 = cbLight._m0[_1799].z + _593;
    float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
    float _1996 = _1995 * _1989;
    float _1997 = _1995 * _1990;
    float _1998 = _1995 * _1991;
    float _1999 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_1799].xyz));
    float _4093 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _2003 = dot(vec3(_511, _512, _513), vec3(_1996, _1997, _1998));
    float _4104 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _2007 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_1996, _1997, _1998));
    float _4115 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2011 = _1988 * _1988;
    float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
    float _2024 = (exp2(log2(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2025 = 1.0 - _1988;
    float _2035 = (0.5 / (((_1927 * ((_2002 * _2025) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2025) + _1988) * _2002))) * _2002;
    float _4126 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2037 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
    float _2047 = (((_2024 * cbLight._m0[_1976].x) * _2037) * _1785) + (((_1951 * cbLight._m0[_1898].x) * _1965) * _1795);
    float _2048 = (((_2024 * cbLight._m0[_1976].y) * _2037) * _1785) + (((_1951 * cbLight._m0[_1898].y) * _1965) * _1795);
    float _2049 = (((_2024 * cbLight._m0[_1976].z) * _2037) * _1785) + (((_1951 * cbLight._m0[_1898].z) * _1965) * _1795);
    float _2111;
    float _2113;
    float _2115;
    if (_1835)
    {
        _2111 = _2047;
        _2113 = _2048;
        _2115 = _2049;
    }
    else
    {
        uint _2117 = _1762 + 2u;
        uint _2121 = _1762 + 10u;
        float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _514) * 0.949999988079071044921875);
        float _2136 = _2135 * _2135;
        float _2137 = cbLight._m0[_2117].x + _591;
        float _2138 = cbLight._m0[_2117].y + _592;
        float _2139 = cbLight._m0[_2117].z + _593;
        float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
        float _2144 = _2143 * _2137;
        float _2145 = _2143 * _2138;
        float _2146 = _2143 * _2139;
        float _2147 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_2117].xyz));
        float _4137 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _2151 = dot(vec3(_511, _512, _513), vec3(_2144, _2145, _2146));
        float _4148 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2155 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2144, _2145, _2146));
        float _4159 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2159 = _2136 * _2136;
        float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
        float _2172 = (exp2(log2(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2173 = 1.0 - _2136;
        float _2183 = (0.5 / (((_1927 * ((_2150 * _2173) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2173) + _2136) * _2150))) * _2150;
        float _4170 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2185 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
        float _2186 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
        _2111 = (((_2172 * cbLight._m0[_2121].x) * _2185) * _2186) + _2047;
        _2113 = (((_2172 * cbLight._m0[_2121].y) * _2185) * _2186) + _2048;
        _2115 = (((_2172 * cbLight._m0[_2121].z) * _2185) * _2186) + _2049;
    }
    float _2221;
    float _2223;
    float _2225;
    if (_1853)
    {
        _2221 = _2111;
        _2223 = _2113;
        _2225 = _2115;
    }
    else
    {
        uint _2232 = _1762 + 3u;
        uint _2236 = _1762 + 11u;
        float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _514) * 0.949999988079071044921875);
        float _2251 = _2250 * _2250;
        float _2252 = cbLight._m0[_2232].x + _591;
        float _2253 = cbLight._m0[_2232].y + _592;
        float _2254 = cbLight._m0[_2232].z + _593;
        float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
        float _2259 = _2258 * _2252;
        float _2260 = _2258 * _2253;
        float _2261 = _2258 * _2254;
        float _2262 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_2232].xyz));
        float _4186 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2266 = dot(vec3(_511, _512, _513), vec3(_2259, _2260, _2261));
        float _4197 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2270 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2259, _2260, _2261));
        float _4208 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2274 = _2251 * _2251;
        float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
        float _2287 = (exp2(log2(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2288 = 1.0 - _2251;
        float _2298 = (0.5 / (((_1927 * ((_2265 * _2288) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2288) + _2251) * _2265))) * _2265;
        float _4219 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2300 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
        float _2301 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
        _2221 = (((_2287 * cbLight._m0[_2236].x) * _2300) * _2301) + _2111;
        _2223 = (((_2287 * cbLight._m0[_2236].y) * _2300) * _2301) + _2113;
        _2225 = (((_2287 * cbLight._m0[_2236].z) * _2300) * _2301) + _2115;
    }
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    if (_1760.y == 0u)
    {
        float _2376 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2377 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2376;
        float _2378 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2376;
        float _2379 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2376;
        uvec4 _2391 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2392 = _2391.x;
        uint _2403 = uint((float(_2391.y) * floor(float(uint(cbSceneParam._m0[85u].y * _600) / _2392))) + floor(float(uint(cbSceneParam._m0[85u].x * _599) / _2392)));
        float _2413 = (log2(_2379 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2414 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        uint _2417 = uint(isnan(14.0) ? _2414 : (isnan(_2414) ? 14.0 : min(_2414, 14.0)));
        uvec4 _2422 = texelFetch(g_lightClusterGridBuffer, int(((_2417 << 2u) + (_2403 << 6u)) >> 2u));
        uint _2423 = _2422.x;
        uint _2424 = _2391.z;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        if (((((1u << ((_2424 >> 4u) & 15u)) + 4294967295u) & _2423) == 0u) || ((_2424 & 240u) == 0u))
        {
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
        }
        else
        {
            float _2594;
            float _2596;
            float _2598;
            float _2600;
            float _2602;
            float _2604;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            uint _2775 = 0u;
            uint _2784;
            bool _2785;
            for (;;)
            {
                _2784 = texelFetch(g_lightClassification, int((((_2417 << 5u) + (_2403 << 9u)) + (_2775 << 2u)) >> 2u)).x;
                _2785 = _2784 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2785)
                {
                    frontier_phi_61_pred = _2769;
                    frontier_phi_61_pred_1 = _2774;
                    frontier_phi_61_pred_2 = _2773;
                    frontier_phi_61_pred_3 = _2772;
                    frontier_phi_61_pred_4 = _2771;
                    frontier_phi_61_pred_5 = _2770;
                }
                else
                {
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    uint _2899;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2784;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    for (;;)
                    {
                        uint _2903 = uint(findLSB(_2899)) + (_2775 << 5u);
                        uint _2900 = (_2899 + 4294967295u) & _2899;
                        uint _2905 = _2903 * 48u;
                        vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 3u)).x));
                        uint _2925 = (_2903 * 48u) + 4u;
                        vec4 _2938 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 3u)).x));
                        uint _2944 = (_2903 * 48u) + 8u;
                        vec3 _2955 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2944)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 2u)).x));
                        float _2959 = _2919.x - _2377;
                        float _2960 = _2919.y - _2378;
                        float _2961 = _2919.z - _2379;
                        float _2962 = dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961));
                        float _2965 = inversesqrt(_2962);
                        float _2966 = _2965 * _2959;
                        float _2967 = _2965 * _2960;
                        float _2968 = _2965 * _2961;
                        float _2969 = dot(vec3(_621, _624, _627), vec3(_2966, _2967, _2968));
                        float _2974 = 1.0 - (_2962 * _2919.w);
                        float _4245 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2975 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                        float _2976 = sqrt(_2962) * _2938.w;
                        float _2979 = 1.39999997615814208984375 / (_2976 + 1.39999997615814208984375);
                        float _2980 = _2979 * _2979;
                        float _2983 = ((1.0 - _2980) * _2969) + _2980;
                        float _2986 = _2976 * _2976;
                        float _2990 = ((isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))) * _2975) / ((_2986 * 0.699999988079071044921875) + 1.0);
                        float _2994 = (-0.0) - _2377;
                        float _2995 = (-0.0) - _2378;
                        float _2996 = (-0.0) - _2379;
                        float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                        float _3001 = _3000 * _2994;
                        float _3002 = _3000 * _2995;
                        float _3003 = _3000 * _2996;
                        float _3011 = exp2(log2(1.0 / ((_2986 * 3.5) + 5.0)) * 0.25);
                        float _3012 = 1.0 - _689;
                        float _3019 = sqrt(1.0 - ((1.0 - (_3012 * _3012)) * (1.0 - (_3011 * _3011))));
                        float _3020 = _3019 * _3019;
                        float _3021 = _3020 * _3020;
                        float _3022 = _3001 + _2966;
                        float _3023 = _3002 + _2967;
                        float _3024 = _3003 + _2968;
                        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                        float _3032 = dot(vec3(_621, _624, _627), vec3(_3001, _3002, _3003));
                        float _4261 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3035 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _3036 = dot(vec3(_621, _624, _627), vec3(_3028 * _3022, _3028 * _3023, _3028 * _3024));
                        float _4272 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3039 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                        float _3043 = ((_3039 * _3039) * (_3021 + (-1.0))) + 1.0;
                        float _3044 = _2979 * _3020;
                        float _3045 = _3044 * _3044;
                        float _3048 = ((1.0 - _3045) * _2969) + _3045;
                        float _4283 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3049 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _3050 = 1.0 - _3020;
                        float _3060 = (0.5 / (((_3049 * ((_3035 * _3050) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_3049 * _3050) + _3020) * _3035))) * _3049;
                        float _4294 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3071 = (((_3021 * 3.1415927410125732421875) * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) / ((_3043 * _3043) * ((_2986 * 2.1991131305694580078125) + 3.141590118408203125))) * _2975;
                        _2828 = (_2990 * _2938.x) + _2896;
                        _2829 = (_2990 * _2938.y) + _2897;
                        _2830 = (_2990 * _2938.z) + _2898;
                        _2825 = (_3071 * _2955.x) + _2893;
                        _2826 = (_3071 * _2955.y) + _2894;
                        _2827 = (_3071 * _2955.z) + _2895;
                        if (_2900 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2900;
                        }
                    }
                    frontier_phi_61_pred = _2825;
                    frontier_phi_61_pred_1 = _2830;
                    frontier_phi_61_pred_2 = _2829;
                    frontier_phi_61_pred_3 = _2828;
                    frontier_phi_61_pred_4 = _2827;
                    frontier_phi_61_pred_5 = _2826;
                }
                _2594 = frontier_phi_61_pred;
                _2604 = frontier_phi_61_pred_1;
                _2602 = frontier_phi_61_pred_2;
                _2600 = frontier_phi_61_pred_3;
                _2598 = frontier_phi_61_pred_4;
                _2596 = frontier_phi_61_pred_5;
                uint _2776 = _2775 + 1u;
                if (_2776 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2769 = _2594;
                    _2770 = _2596;
                    _2771 = _2598;
                    _2772 = _2600;
                    _2773 = _2602;
                    _2774 = _2604;
                    _2775 = _2776;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
        }
        uvec4 _2607 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2608 = _2607.z;
        uint _2610 = (_2608 >> 8u) & 15u;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        if (((4294967295u << _2610) & _2423) == 0u)
        {
            _2737 = _2593;
            _2739 = _2595;
            _2741 = _2597;
            _2743 = _2599;
            _2745 = _2601;
            _2747 = _2603;
        }
        else
        {
            float _2762 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
            float _2763 = _2762 * _2377;
            float _2764 = _2762 * _2378;
            float _2765 = _2762 * _2379;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2610 < ((_2608 >> 12u) & 15u))
            {
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2876 = _2593;
                float _2877 = _2595;
                float _2878 = _2597;
                float _2879 = _2599;
                float _2880 = _2601;
                float _2881 = _2603;
                uint _2882 = _2610;
                uint _2891;
                bool _2892;
                for (;;)
                {
                    _2891 = texelFetch(g_lightClassification, int((((_2417 << 5u) + (_2403 << 9u)) + (_2882 << 2u)) >> 2u)).x;
                    _2892 = _2891 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2892)
                    {
                        frontier_phi_67_pred = _2879;
                        frontier_phi_67_pred_1 = _2880;
                        frontier_phi_67_pred_2 = _2881;
                        frontier_phi_67_pred_3 = _2878;
                        frontier_phi_67_pred_4 = _2877;
                        frontier_phi_67_pred_5 = _2876;
                    }
                    else
                    {
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3089 = _2876;
                        float _3090 = _2877;
                        float _3091 = _2878;
                        float _3092 = _2879;
                        float _3093 = _2880;
                        float _3094 = _2881;
                        uint _3095 = _2891;
                        uint _3096;
                        vec4 _3121;
                        float _3122;
                        vec4 _3137;
                        vec3 _3149;
                        vec4 _3165;
                        vec4 _3181;
                        float _3228;
                        bool _3229;
                        for (;;)
                        {
                            uint _3106 = ((_2882 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3095));
                            _3096 = (_3095 + 4294967295u) & _3095;
                            uint _3108 = _3106 * 40u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            _3122 = _3121.w;
                            uint _3124 = (_3106 * 40u) + 4u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3139 = (_3106 * 40u) + 8u;
                            _3149 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x));
                            uint _3152 = (_3106 * 40u) + 16u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3168 = (_3106 * 40u) + 20u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3184 = (_3106 * 40u) + 24u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3203 = (_3106 * 40u) + 28u;
                            vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3228 = fma(_2379, _3216.z, fma(_2378, _3216.y, _3216.x * _2377)) + _3216.w;
                            _3229 = !((fma(_2379, _3197.z, fma(_2378, _3197.y, _3197.x * _2377)) + _3197.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3229)
                            {
                                float _3256 = _3121.x - _2377;
                                float _3257 = _3121.y - _2378;
                                float _3258 = _3121.z - _2379;
                                float _3259 = dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258));
                                float _3262 = inversesqrt(_3259);
                                float _3263 = _3262 * _3256;
                                float _3264 = _3262 * _3257;
                                float _3265 = _3262 * _3258;
                                float _3269 = 1.0 - (_3259 / (_3122 * _3122));
                                float _4305 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3270 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3274 = sqrt(_3259) * _3137.w;
                                float _3276 = 1.39999997615814208984375 / (_3274 + 1.39999997615814208984375);
                                float _3277 = _3276 * _3276;
                                float _3280 = ((1.0 - _3277) * dot(vec3(_3263, _3264, _3265), vec3(_621, _624, _627))) + _3277;
                                float _3283 = _3274 * _3274;
                                float _3287 = (fma(_2379, _3165.z, fma(_2378, _3165.y, _3165.x * _2377)) + _3165.w) / _3228;
                                float _3288 = (fma(_2379, _3181.z, fma(_2378, _3181.y, _3181.x * _2377)) + _3181.w) / _3228;
                                float _3292 = 1.0 - dot(vec2(_3287, _3288), vec2(_3287, _3288));
                                float _4321 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3294 = _3293 * (((isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))) * _3270) / ((_3283 * 0.699999988079071044921875) + 1.0));
                                float _3306 = exp2(log2(1.0 / ((_3283 * 3.5) + 5.0)) * 0.25);
                                float _3307 = 1.0 - _689;
                                float _3314 = sqrt(1.0 - ((1.0 - (_3307 * _3307)) * (1.0 - (_3306 * _3306))));
                                float _3315 = _3314 * _3314;
                                float _3316 = _3315 * _3315;
                                float _3317 = _3263 - _2763;
                                float _3318 = _3264 - _2764;
                                float _3319 = _3265 - _2765;
                                float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                                float _3327 = dot(vec3(_621, _624, _627), vec3((-0.0) - _2763, (-0.0) - _2764, (-0.0) - _2765));
                                float _4332 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3330 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3331 = dot(vec3(_621, _624, _627), vec3(_3323 * _3317, _3323 * _3318, _3323 * _3319));
                                float _4343 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3334 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3338 = ((_3334 * _3334) * (_3316 + (-1.0))) + 1.0;
                                float _3339 = _3276 * _3315;
                                float _3340 = _3339 * _3339;
                                float _3346 = ((1.0 - _3340) * dot(vec3(_621, _624, _627), vec3(_3263, _3264, _3265))) + _3340;
                                float _4354 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3348 = 1.0 - _3315;
                                float _3358 = (0.5 / (((_3347 * ((_3330 * _3348) + _3315)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3315) * _3330))) * _3347;
                                float _4365 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3368 = (_3293 * _3270) * (((_3316 * 3.1415927410125732421875) * (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) / ((_3338 * _3338) * ((_3283 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3368 * _3149.x;
                                frontier_phi_73_pred_1 = _3368 * _3149.y;
                                frontier_phi_73_pred_2 = _3294 * _3137.z;
                                frontier_phi_73_pred_3 = _3294 * _3137.y;
                                frontier_phi_73_pred_4 = _3294 * _3137.x;
                                frontier_phi_73_pred_5 = _3368 * _3149.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3372 = frontier_phi_73_pred;
                            _3373 = frontier_phi_73_pred_1;
                            _3377 = frontier_phi_73_pred_2;
                            _3376 = frontier_phi_73_pred_3;
                            _3375 = frontier_phi_73_pred_4;
                            _3374 = frontier_phi_73_pred_5;
                            _3079 = _3375 + _3092;
                            _3080 = _3376 + _3093;
                            _3081 = _3377 + _3094;
                            _3076 = _3372 + _3089;
                            _3077 = _3373 + _3090;
                            _3078 = _3374 + _3091;
                            if (_3096 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3096;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3079;
                        frontier_phi_67_pred_1 = _3080;
                        frontier_phi_67_pred_2 = _3081;
                        frontier_phi_67_pred_3 = _3078;
                        frontier_phi_67_pred_4 = _3077;
                        frontier_phi_67_pred_5 = _3076;
                    }
                    _2744 = frontier_phi_67_pred;
                    _2746 = frontier_phi_67_pred_1;
                    _2748 = frontier_phi_67_pred_2;
                    _2742 = frontier_phi_67_pred_3;
                    _2740 = frontier_phi_67_pred_4;
                    _2738 = frontier_phi_67_pred_5;
                    uint _2883 = _2882 + 1u;
                    if (_2883 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2876 = _2738;
                        _2877 = _2740;
                        _2878 = _2742;
                        _2879 = _2744;
                        _2880 = _2746;
                        _2881 = _2748;
                        _2882 = _2883;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2746;
                frontier_phi_55_56_ladder_1 = _2748;
                frontier_phi_55_56_ladder_2 = _2744;
                frontier_phi_55_56_ladder_3 = _2742;
                frontier_phi_55_56_ladder_4 = _2740;
                frontier_phi_55_56_ladder_5 = _2738;
            }
            else
            {
                frontier_phi_55_56_ladder = _2601;
                frontier_phi_55_56_ladder_1 = _2603;
                frontier_phi_55_56_ladder_2 = _2599;
                frontier_phi_55_56_ladder_3 = _2597;
                frontier_phi_55_56_ladder_4 = _2595;
                frontier_phi_55_56_ladder_5 = _2593;
            }
            _2737 = frontier_phi_55_56_ladder_5;
            _2739 = frontier_phi_55_56_ladder_4;
            _2741 = frontier_phi_55_56_ladder_3;
            _2743 = frontier_phi_55_56_ladder_2;
            _2745 = frontier_phi_55_56_ladder;
            _2747 = frontier_phi_55_56_ladder_1;
        }
        float _2752 = isnan(1.0) ? _665 : (isnan(_665) ? 1.0 : min(_665, 1.0));
        _2436 = (_2752 * _2743) + _1891;
        _2438 = (_2752 * _2745) + _1893;
        _2440 = (_2752 * _2747) + _1895;
        _2442 = ((_2737 * 0.039999999105930328369140625) * _2752) + _2221;
        _2444 = ((_2739 * 0.039999999105930328369140625) * _2752) + _2223;
        _2446 = ((_2741 * 0.039999999105930328369140625) * _2752) + _2225;
    }
    else
    {
        _2436 = _1891;
        _2438 = _1893;
        _2440 = _1895;
        _2442 = _2221;
        _2444 = _2223;
        _2446 = _2225;
    }
    float _2460 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2461 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2462 = cbSceneParam._m0[86u].x * (_1709 + ((_688 * cbMtdParam._m0[11u].y) * dot(vec3(_511, _512, _513), vec3(_201, _202, _203))));
    float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
    float _2464 = isnan(_2461) ? _600 : (isnan(_600) ? _2461 : min(_600, _2461));
    vec4 _2466 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2463, _2464), 0.0);
    float _2468 = _2466.x;
    bool _2488 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2468)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2468))) > _533;
    vec4 _2492 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2488 ? _2463 : _599, _2488 ? _2464 : _600));
    float _4391 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4402 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4413 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _2516 = 0.959999978542327880859375 - (exp2(log2(1.0 - _680) * 5.0) * 0.959999978542327880859375);
    float _2518 = (_2492.x * _2516) * cbSceneParam._m0[72u].w;
    float _2520 = (_2492.y * _2516) * cbSceneParam._m0[72u].w;
    float _2522 = (_2492.z * _2516) * cbSceneParam._m0[72u].w;
    float _2543 = _599 / cbSceneParam._m0[86u].x;
    float _2544 = _600 / cbSceneParam._m0[86u].y;
    vec4 _2558 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2543, _2544, (log2((isnan(cbSceneParam._m0[77u].w) ? _533 : (isnan(_533) ? cbSceneParam._m0[77u].w : min(_533, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2560 = _2558.x;
    float _2561 = _2558.y;
    float _2562 = _2558.z;
    float _2563 = _2558.w;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_533 > cbSceneParam._m0[78u].w)
    {
        float _2618 = isnan(_533) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _533 : min(cbSceneParam._m0[80u].w, _533));
        float _2619 = _2618 / _533;
        float _2630 = _2619 * _584;
        float _2631 = _585 * _2619;
        float _2632 = (-0.0) - _2631;
        float _2633 = _2619 * _586;
        float _2635 = (cbSceneParam._m0[77u].w * _2632) / _2618;
        float _2636 = _2635 + cbSceneParam._m0[79u].w;
        float _2637 = cbSceneParam._m0[79u].w - _2631;
        float _2643 = sqrt(((_2630 * _2630) + (_2631 * _2631)) + (_2633 * _2633));
        float _2646 = (1.0 - (cbSceneParam._m0[77u].w / _2618)) * _2643;
        float _2651 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2653 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2838;
        if (abs((_2632 - _2635) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2838 = ((((_2636 > 0.0) ? exp2(_2651 * _2636) : (2.0 - exp2(_2653 * _2636))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2646;
        }
        else
        {
            float _2798 = 1.0 / cbSceneParam._m0[80u].x;
            float _2799 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : max(_2636, _2637));
            float _2800 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : min(_2636, _2637));
            float _2809 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : min(_2799, 0.0));
            float _2810 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : min(_2800, 0.0));
            _2838 = ((abs(_2643 / _2632) * cbSceneParam._m0[80u].y) * ((((_2809 - _2810) * 2.0) - ((exp2(_2651 * (isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0)))) - exp2(_2651 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0))))) * _2798)) - ((exp2(_2653 * _2809) - exp2(_2653 * _2810)) * _2798))) + (_2646 * cbSceneParam._m0[80u].z);
        }
        vec4 _2840 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2543, _2544, 1.0), 0.0);
        float _2849 = exp2((_2838 * (-1.44269502162933349609375)) * (1.0 - _2840.w));
        float _2850 = log2(_2849);
        float _2866 = log2(_2563);
        _2655 = (exp2(_2866 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].x)) * _2840.x) / cbSceneParam._m0[78u].x)) + _2560;
        _2657 = (exp2(_2866 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].y)) * _2840.y) / cbSceneParam._m0[78u].y)) + _2561;
        _2659 = (exp2(_2866 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].z)) * _2840.z) / cbSceneParam._m0[78u].z)) + _2562;
        _2661 = _2849 * _2563;
    }
    else
    {
        _2655 = _2560;
        _2657 = _2561;
        _2659 = _2562;
        _2661 = _2563;
    }
    bool _2673 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2674 = log2(_2661);
    float _2681 = exp2(_2674 * cbSceneParam._m0[78u].x) * ((_2518 + (((((_1686 * _1734.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1478) * _1750)) + _2442) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2436 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _665))) - _2518) * 0.5));
    float _2682 = exp2(_2674 * cbSceneParam._m0[78u].y) * ((_2520 + (((((_1686 * _1734.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1478) * _1750)) + _2444) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2438 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _665))) - _2520) * 0.5));
    float _2683 = exp2(_2674 * cbSceneParam._m0[78u].z) * ((_2522 + (((((_1686 * _1734.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1478) * _1750)) + _2446) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2440 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _665))) - _2522) * 0.5));
    vec4 _2691 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_599, _600));
    float _2693 = _2691.x;
    float _2714 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2693)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2693))) - _533) * cbMtdParam._m0[12u].z;
    float _4464 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2716 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * cbInstanceData._m0[_640 + 6u].w;
    float _2725 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2725 * (_2673 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2655)));
    SV_Target.y = _2725 * (_2673 ? _2682 : (_2682 + (cbSceneParam._m0[72u].w * _2657)));
    SV_Target.z = _2725 * (_2673 ? _2683 : (_2683 + (cbSceneParam._m0[72u].w * _2659)));
    SV_Target.w = _2716;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2716;
}


