#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_test_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_test_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_test_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_test_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_test_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1047;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x;
    float _270 = exp2(log2(texture(sampler2D(M_Water_test_snp_0_Texture2D_2, SS_WrapLinear), vec2((((_242 * cbMtdParam._m0[14u].z) + TEXCOORD) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[14u].w * _242) + TEXCOORD_1) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w)).x) * cbMtdParam._m0[12u].y);
    float _284 = (cbMtdParam._m0[15u].z * _242) + TEXCOORD;
    float _285 = (cbMtdParam._m0[15u].w * _242) + TEXCOORD_1;
    vec4 _297 = texture(sampler2D(M_Water_test_snp_0_Texture2D_3, SS_WrapLinear), vec2((_284 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_285 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _303 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[13u].x * cbMtdParam._m0[11u].w);
    float _310 = ((_297.y * 0.5) + (-0.25)) * cbMtdParam._m0[12u].w;
    float _312 = (-0.0) - (cbMtdParam._m0[12u].w * ((_297.x * 0.5) + (-0.25)));
    float _314 = fract(_303);
    float _316 = fract(_303 + 0.5);
    float _328 = abs((_314 * 2.0) + (-1.0));
    vec4 _345 = texture(sampler2D(M_Water_test_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_314 * _312) + _284) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_310 * _314) + _285) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _347 = _345.x;
    float _348 = _345.y;
    float _349 = _345.z;
    vec4 _350 = texture(sampler2D(M_Water_test_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_316 * _312) + _284) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_310 * _316) + _285) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _373 = (((cbMtdParam._m0[10u].x * TEXCOORD_3.x) * _270) * (((_350.x - _347) * _328) + _347)) + cbMtdParam._m0[9u].x;
    float _374 = (((cbMtdParam._m0[10u].y * TEXCOORD_3.x) * _270) * (((_350.y - _348) * _328) + _348)) + cbMtdParam._m0[9u].y;
    float _375 = (((cbMtdParam._m0[10u].z * TEXCOORD_3.x) * _270) * (((_350.z - _349) * _328) + _349)) + cbMtdParam._m0[9u].z;
    vec4 _396 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[14u].x * _242) + TEXCOORD) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[14u].y * _242) + TEXCOORD_1) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _421 = texture(sampler2D(M_Water_test_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[13u].z * _242) + TEXCOORD) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[13u].w * _242) + TEXCOORD_1) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _427 = (_421.x * 2.0) + (-1.0);
    float _428 = (_421.y * 2.0) + (-1.0);
    float _429 = dot(vec2(_427, _428), vec2(_427, _428));
    float _3793 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))));
    float _444 = (cbMtdParam._m0[15u].x * _242) + TEXCOORD;
    float _445 = (cbMtdParam._m0[15u].y * _242) + TEXCOORD_1;
    vec4 _450 = texture(sampler2D(M_Water_test_snp_0_Texture2D_3, SS_WrapLinear), vec2((_444 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_445 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _458 = ((_450.y * 0.5) + (-0.25)) * cbMtdParam._m0[12u].w;
    float _460 = (-0.0) - (cbMtdParam._m0[12u].w * ((_450.x * 0.5) + (-0.25)));
    vec4 _477 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((_314 * _460) + _444) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_458 * _314) + _445) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _479 = _477.x;
    float _480 = _477.y;
    vec4 _481 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((_316 * _460) + _444) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_458 * _316) + _445) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _497 = (_427 + (((_396.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z)) + ((((((_481.x - _479) * _328) + _479) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y);
    float _498 = (_428 + (((_396.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z)) + ((((((_481.y - _480) * _328) + _480) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y);
    float _504 = fma(_435, _211 * NORMAL.x, fma(_498, _218 * TANGENT.x, _497 * _205));
    float _507 = fma(_435, _211 * NORMAL.y, fma(_498, _218 * TANGENT.y, _497 * _206));
    float _510 = fma(_435, _211 * NORMAL.z, fma(_498, _218 * TANGENT.z, _497 * _207));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    float _515 = _514 * _504;
    float _516 = _514 * _507;
    float _517 = _514 * _510;
    float _3804 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _518 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3826 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3837 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _537 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _588 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _578);
    float _589 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _578);
    float _590 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _578);
    float _594 = inversesqrt(dot(vec3(_588, _589, _590), vec3(_588, _589, _590)));
    float _595 = _588 * _594;
    float _596 = _589 * _594;
    float _597 = _590 * _594;
    float _603 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _604 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _625 = fma(_517, cbSceneParam._m0[5u].z, fma(_516, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _515));
    float _628 = fma(_517, cbSceneParam._m0[6u].z, fma(_516, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _515));
    float _631 = fma(_517, cbSceneParam._m0[7u].z, fma(_516, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _515));
    uint _644 = uint(roundEven(NORMAL.w)) * 13u;
    uint _646 = (_644 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _652 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_646].x;
    float _653 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_646].y;
    float _654 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_646].z;
    float _3848 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    vec4 _666 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _603, cbSceneParam._m0[86u].y * _604));
    float _669 = _666.x * TEXCOORD_3.w;
    float _670 = dot(vec3(_515, _516, _517), vec3(_595, _596, _597));
    float _673 = _670 * 2.0;
    float _677 = (_673 * _515) - _595;
    float _678 = (_673 * _516) - _596;
    float _679 = (_673 * _517) - _597;
    float _683 = abs(dot(vec3(_595, _596, _597), vec3(_515, _516, _517)));
    float _3881 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _684 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _692 = 10.0 / (_537 + 10.0);
    float _693 = sqrt(_518);
    float _705 = exp2((_693 * 5.0) * log2(1.0 - (_684 * 0.999000012874603271484375))) / (4.0 - (_693 * 3.0));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1046;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _772 = fma(_745, cbModelParam._m0[26u].z, fma(_741, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _737));
        float _776 = fma(_745, cbModelParam._m0[27u].z, fma(_741, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _737));
        float _780 = fma(_745, cbModelParam._m0[28u].z, fma(_741, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _737));
        float _804 = _737 + _515;
        float _805 = _741 + _516;
        float _806 = _745 + _517;
        float _816 = fma(_806, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804)) - _772;
        float _817 = fma(_806, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804)) - _776;
        float _818 = fma(_806, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804)) - _780;
        float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
        float _835 = ((_822 * _816) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_772 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_822 * _817) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_776 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_822 * _818) / cbModelParam._m0[34u].z) + ((((((_780 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        float _874 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_840.x + (-0.5));
        float _876 = _874 * (_840.y + (-0.5));
        float _877 = _874 * (_840.z + (-0.5));
        float _884 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_847.x + (-0.5));
        float _886 = _884 * (_847.y + (-0.5));
        float _887 = _884 * (_847.z + (-0.5));
        float _894 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_854.x + (-0.5));
        float _896 = _894 * (_854.y + (-0.5));
        float _897 = _894 * (_854.z + (-0.5));
        float _904 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_861.x + (-0.5));
        float _906 = _904 * (_861.y + (-0.5));
        float _907 = _904 * (_861.z + (-0.5));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = _875 * 0.5;
        float _912 = _885 * 0.5;
        float _913 = _895 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _928 = (dot(vec3(_515, _516, _517), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _938 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3929 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_940 + 1.0))) + _945) * _908;
        float _955 = _876 * 0.5;
        float _956 = _886 * 0.5;
        float _957 = _896 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_515, _516, _517), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3962 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_982 + 1.0))) + _987) * _909;
        float _997 = _877 * 0.5;
        float _998 = _887 * 0.5;
        float _999 = _897 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_515, _516, _517), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3995 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1024 + 1.0))) + _1029) * _910;
        _1046 = _877;
        _1048 = _876;
        _1049 = _875;
        _1050 = _887;
        _1051 = _886;
        _1052 = _885;
        _1053 = _897;
        _1054 = _896;
        _1055 = _895;
        _1056 = _910;
        _1057 = _909;
        _1058 = _908;
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
    }
    else
    {
        _1046 = _1047;
        _1048 = _1047;
        _1049 = _1047;
        _1050 = _1047;
        _1051 = _1047;
        _1052 = _1047;
        _1053 = _1047;
        _1054 = _1047;
        _1055 = _1047;
        _1056 = _1047;
        _1057 = _1047;
        _1058 = _1047;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
    }
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1087 = fma(_745, cbModelParam._m0[30u].z, fma(_741, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _737));
        float _1091 = fma(_745, cbModelParam._m0[31u].z, fma(_741, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _737));
        float _1095 = fma(_745, cbModelParam._m0[32u].z, fma(_741, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _737));
        float _1118 = _737 + _515;
        float _1119 = _741 + _516;
        float _1120 = _745 + _517;
        float _1130 = fma(_1120, cbModelParam._m0[30u].z, fma(_1119, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118)) - _1087;
        float _1131 = fma(_1120, cbModelParam._m0[31u].z, fma(_1119, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118)) - _1091;
        float _1132 = fma(_1120, cbModelParam._m0[32u].z, fma(_1119, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118)) - _1095;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1087 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1091 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[35u].z) + ((((((_1095 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1186 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1153.x + (-0.5));
        float _1188 = _1186 * (_1153.y + (-0.5));
        float _1189 = _1186 * (_1153.z + (-0.5));
        float _1196 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1160.x + (-0.5));
        float _1198 = _1196 * (_1160.y + (-0.5));
        float _1199 = _1196 * (_1160.z + (-0.5));
        float _1206 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1167.x + (-0.5));
        float _1208 = _1206 * (_1167.y + (-0.5));
        float _1209 = _1206 * (_1167.z + (-0.5));
        float _1216 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1174.x + (-0.5));
        float _1218 = _1216 * (_1174.y + (-0.5));
        float _1219 = _1216 * (_1174.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_515, _516, _517), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4058 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1250 + 1.0))) + _1255) * _1220;
        float _1265 = _1188 * 0.5;
        float _1266 = _1198 * 0.5;
        float _1267 = _1208 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_515, _516, _517), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4091 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1292 + 1.0))) + _1297) * _1221;
        float _1307 = _1189 * 0.5;
        float _1308 = _1199 * 0.5;
        float _1309 = _1209 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_515, _516, _517), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4124 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1334 + 1.0))) + _1339) * _1222;
        _1356 = _1189;
        _1357 = _1188;
        _1358 = _1187;
        _1359 = _1199;
        _1360 = _1198;
        _1361 = _1197;
        _1362 = _1209;
        _1363 = _1208;
        _1364 = _1207;
        _1365 = _1222;
        _1366 = _1221;
        _1367 = _1220;
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1047;
        _1357 = _1047;
        _1358 = _1047;
        _1359 = _1047;
        _1360 = _1047;
        _1361 = _1047;
        _1362 = _1047;
        _1363 = _1047;
        _1364 = _1047;
        _1365 = _1047;
        _1366 = _1047;
        _1367 = _1047;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1060)) + _1060;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1061)) + _1061;
    float _1403 = fma(_1382, cbSceneParam._m0[89u].z, fma(_1381, cbSceneParam._m0[89u].y, _1380 * cbSceneParam._m0[89u].x));
    float _1406 = fma(_1382, cbSceneParam._m0[90u].z, fma(_1381, cbSceneParam._m0[90u].y, _1380 * cbSceneParam._m0[90u].x));
    float _1409 = fma(_1382, cbSceneParam._m0[91u].z, fma(_1381, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1380));
    float _1424 = _677 * 0.5;
    float _1425 = _678 * 0.5;
    float _1426 = _679 * 0.5;
    float _1427 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1430 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1433 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1467;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1440 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1046, _1050, _1053, _1056));
        float _1444 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1448 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1455 = dot(vec4(cbModelParam._m0[39u]), vec4(_1424, _1425, _1426, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1478;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1469 = dot(vec4(cbModelParam._m0[40u]), vec4(_1424, _1425, _1426, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1482 = (_1478 * cbModelParam._m0[1u].x) + (_1467 * (1.0 - cbModelParam._m0[1u].x));
    float _1492 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _518);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1492 : min(cbModelParam._m0[25u].z, _1492));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_745, cbModelParam._m0[13u].z, fma(_741, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _737)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_745, cbModelParam._m0[14u].z, fma(_741, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _737)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_745, cbModelParam._m0[15u].z, fma(_741, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _737)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_679, cbModelParam._m0[13u].z, fma(_678, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _677));
        float _1554 = fma(_679, cbModelParam._m0[14u].z, fma(_678, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _677));
        float _1557 = fma(_679, cbModelParam._m0[15u].z, fma(_678, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _677));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1585 = frontier_phi_14_12_ladder;
        }
        float _1809;
        if (_1554 > 0.0)
        {
            _1809 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1809 = frontier_phi_23_19_ladder;
        }
        float _2104;
        if (_1557 > 0.0)
        {
            _2104 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2104 = frontier_phi_35_30_ladder;
        }
        float _2106 = isnan(_1809) ? _1585 : (isnan(_1585) ? _1809 : min(_1585, _1809));
        float _2107 = isnan(_2104) ? _2106 : (isnan(_2106) ? _2104 : min(_2106, _2104));
        float _2111 = (_2107 * _1551) + _1540;
        float _2112 = (_2107 * _1554) + _1544;
        float _2113 = (_2107 * _1557) + _1548;
        float _2114 = _2107 * 9.9999997473787516355514526367188e-05;
        float _2116 = (-1.0) - _2114;
        float _2118 = _2114 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2113 > _2118) || ((_2113 < _2116) || ((_2112 > _2118) || ((_2112 < _2116) || ((_2111 < _2116) || (_2111 > _2118))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2258 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2113, cbModelParam._m0[9u].z, fma(_2112, cbModelParam._m0[9u].y, _2111 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2113, cbModelParam._m0[10u].z, fma(_2112, cbModelParam._m0[10u].y, _2111 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2113, cbModelParam._m0[11u].z, fma(_2112, cbModelParam._m0[11u].y, _2111 * cbModelParam._m0[11u].x))), _1493);
            frontier_phi_13_35_ladder = _2258.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2258.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2258.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_13_35_ladder_2;
        _1575 = frontier_phi_13_35_ladder_1;
        _1577 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_677, _678, _679), _1493);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _518);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1638 = fma(_745, cbModelParam._m0[21u].z, fma(_741, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _737)) + cbModelParam._m0[21u].w;
        float _1642 = fma(_745, cbModelParam._m0[22u].z, fma(_741, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _737)) + cbModelParam._m0[22u].w;
        float _1646 = fma(_745, cbModelParam._m0[23u].z, fma(_741, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _737)) + cbModelParam._m0[23u].w;
        float _1649 = fma(_679, cbModelParam._m0[21u].z, fma(_678, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _677));
        float _1652 = fma(_679, cbModelParam._m0[22u].z, fma(_678, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _677));
        float _1655 = fma(_679, cbModelParam._m0[23u].z, fma(_678, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _677));
        float _1814;
        if (_1649 > 0.0)
        {
            _1814 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1814 = frontier_phi_25_21_ladder;
        }
        float _2131;
        if (_1652 > 0.0)
        {
            _2131 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2131 = frontier_phi_37_32_ladder;
        }
        float _2458;
        if (_1655 > 0.0)
        {
            _2458 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2458 = frontier_phi_47_44_ladder;
        }
        float _2460 = isnan(_2131) ? _1814 : (isnan(_1814) ? _2131 : min(_1814, _2131));
        float _2461 = isnan(_2458) ? _2460 : (isnan(_2460) ? _2458 : min(_2460, _2458));
        float _2465 = (_2461 * _1649) + _1638;
        float _2466 = (_2461 * _1652) + _1642;
        float _2467 = (_2461 * _1655) + _1646;
        float _2468 = _2461 * 9.9999997473787516355514526367188e-05;
        float _2469 = (-1.0) - _2468;
        float _2471 = _2468 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2467 > _2471) || ((_2467 < _2469) || ((_2466 > _2471) || ((_2466 < _2469) || ((_2465 < _2469) || (_2465 > _2471))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2585 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2467, cbModelParam._m0[17u].z, fma(_2466, cbModelParam._m0[17u].y, _2465 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2467, cbModelParam._m0[18u].z, fma(_2466, cbModelParam._m0[18u].y, _2465 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2467, cbModelParam._m0[19u].z, fma(_2466, cbModelParam._m0[19u].y, _2465 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_22_47_ladder = _2585.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2585.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2585.x * cbModelParam._m0[1u].z;
        }
        _1674 = frontier_phi_22_47_ladder_2;
        _1676 = frontier_phi_22_47_ladder_1;
        _1678 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_677, _678, _679), _1582);
        _1674 = _1658.x * cbModelParam._m0[1u].z;
        _1676 = _1658.y * cbModelParam._m0[1u].z;
        _1678 = _1658.z * cbModelParam._m0[1u].z;
    }
    float _1690 = ((((1.0 - _705) * ((_693 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_705 * _693)) * _669;
    float _1691 = _1690 * ((cbModelParam._m0[1u].w * (_1674 - _1573)) + _1573);
    float _1692 = _1690 * ((cbModelParam._m0[1u].w * (_1676 - _1575)) + _1575);
    float _1693 = _1690 * ((cbModelParam._m0[1u].w * (_1678 - _1577)) + _1577);
    float _1696 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, _1691 * cbSceneParam._m0[91u].x));
    float _1713 = _603 / cbSceneParam._m0[86u].x;
    float _1721 = (cbSceneParam._m0[88u].y * (1.0 - _518)) + cbSceneParam._m0[88u].z;
    float _4250 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1723 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 5.0;
    float _1728 = (_692 * cbMtdParam._m0[12u].x) * dot(vec3(_515, _516, _517), vec3(1.0, 0.0, 0.0));
    vec4 _1738 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1728 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1728 + _1713) * cbSceneParam._m0[86u].x, _604), _1723).w) + _1713) * cbSceneParam._m0[86u].x, _604), _1723);
    float _1754 = 1.0 - _1738.w;
    float _1788 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1792 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1796 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1800 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1801 = _1788 / _1800;
    float _1802 = _1792 / _1800;
    float _1803 = _1796 / _1800;
    float _1950;
    float _1951;
    float _1952;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1830 = ((uint(_1803 > cbSceneParam._m0[59u].y) + uint(_1803 > cbSceneParam._m0[59u].x)) + uint(_1803 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1831 = _1830 + 43u;
        uint _1839 = _1830 + 44u;
        uint _1847 = _1830 + 45u;
        uint _1855 = _1830 + 46u;
        float _1866 = fma(_1800, cbSceneParam._m0[_1831].w, fma(_1796, cbSceneParam._m0[_1831].z, fma(_1792, cbSceneParam._m0[_1831].y, _1788 * cbSceneParam._m0[_1831].x)));
        float _1870 = fma(_1800, cbSceneParam._m0[_1839].w, fma(_1796, cbSceneParam._m0[_1839].z, fma(_1792, cbSceneParam._m0[_1839].y, _1788 * cbSceneParam._m0[_1839].x)));
        float _1878 = fma(_1800, cbSceneParam._m0[_1855].w, fma(_1796, cbSceneParam._m0[_1855].z, fma(_1792, cbSceneParam._m0[_1855].y, _1788 * cbSceneParam._m0[_1855].x)));
        float _1883 = cbSceneParam._m0[33u].z * _1878;
        float _1885 = cbSceneParam._m0[33u].w * _1878;
        float _1888 = fma(_1800, cbSceneParam._m0[_1847].w, fma(_1796, cbSceneParam._m0[_1847].z, fma(_1792, cbSceneParam._m0[_1847].y, _1788 * cbSceneParam._m0[_1847].x))) / _1878;
        float _1936 = (cbSceneParam._m0[33u].x - sqrt(((_1802 * _1802) + (_1801 * _1801)) + (_1803 * _1803))) * cbSceneParam._m0[33u].y;
        float _4261 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1943 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1883 + _1866) / _1878, (_1885 + _1870) / _1878), _1888), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1885 + _1866) / _1878, (_1870 - _1883) / _1878), _1888), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1866 - _1883) / _1878, (_1870 - _1885) / _1878), _1888), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1866 - _1885) / _1878, (_1883 + _1870) / _1878), _1888), 0.0)).x), vec4(0.25)));
        _1950 = 1.0 - (_1943 * cbSceneParam._m0[34u].x);
        _1951 = 1.0 - (_1943 * cbSceneParam._m0[34u].y);
        _1952 = 1.0 - (_1943 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1950 = 1.0;
        _1951 = 1.0;
        _1952 = 1.0;
    }
    float _2016;
    float _2018;
    float _2020;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2004 = fma(_1800, cbSceneParam._m0[63u].w, fma(_1796, cbSceneParam._m0[63u].z, fma(_1792, cbSceneParam._m0[63u].y, _1788 * cbSceneParam._m0[63u].x)));
        float _2005 = fma(_1800, cbSceneParam._m0[60u].w, fma(_1796, cbSceneParam._m0[60u].z, fma(_1792, cbSceneParam._m0[60u].y, _1788 * cbSceneParam._m0[60u].x))) / _2004;
        float _2006 = fma(_1800, cbSceneParam._m0[61u].w, fma(_1796, cbSceneParam._m0[61u].z, fma(_1792, cbSceneParam._m0[61u].y, _1788 * cbSceneParam._m0[61u].x))) / _2004;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2005 >= cbSceneParam._m0[64u].x) && (_2006 >= cbSceneParam._m0[64u].y)) && (_2005 <= cbSceneParam._m0[64u].z)) && (_2006 <= cbSceneParam._m0[64u].w))
        {
            float _2144 = fma(_1800, cbSceneParam._m0[62u].w, fma(_1796, cbSceneParam._m0[62u].z, fma(_1792, cbSceneParam._m0[62u].y, _1788 * cbSceneParam._m0[62u].x))) / _2004;
            float _2148 = isnan(cbSceneParam._m0[41u].w) ? _2144 : (isnan(_2144) ? cbSceneParam._m0[41u].w : max(_2144, cbSceneParam._m0[41u].w));
            float _2191 = (cbSceneParam._m0[33u].x - sqrt(((_1802 * _1802) + (_1801 * _1801)) + (_1803 * _1803))) * cbSceneParam._m0[33u].y;
            float _4277 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
            float _2198 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2005, cbSceneParam._m0[33u].w + _2006), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2005, _2006 - cbSceneParam._m0[33u].z), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2005 - cbSceneParam._m0[33u].z, _2006 - cbSceneParam._m0[33u].w), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2005 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2006), _2148), 0.0)).x), vec4(0.25)));
            float _2202 = 1.0 - (_2198 * cbSceneParam._m0[34u].x);
            float _2203 = 1.0 - (_2198 * cbSceneParam._m0[34u].y);
            float _2204 = 1.0 - (_2198 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2204) ? _1952 : (isnan(_1952) ? _2204 : min(_1952, _2204));
            frontier_phi_34_33_ladder_1 = isnan(_2203) ? _1951 : (isnan(_1951) ? _2203 : min(_1951, _2203));
            frontier_phi_34_33_ladder_2 = isnan(_2202) ? _1950 : (isnan(_1950) ? _2202 : min(_1950, _2202));
        }
        else
        {
            frontier_phi_34_33_ladder = _1952;
            frontier_phi_34_33_ladder_1 = _1951;
            frontier_phi_34_33_ladder_2 = _1950;
        }
        _2016 = frontier_phi_34_33_ladder_2;
        _2018 = frontier_phi_34_33_ladder_1;
        _2020 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2016 = _1950;
        _2018 = _1951;
        _2020 = _1952;
    }
    uvec4 _2025 = floatBitsToUint(cbInstanceData._m0[_644 + 5u]);
    uint _2027 = _2025.x * 14u;
    uint _2028 = _2027 + 13u;
    float _2035 = _669 + (-1.0);
    float _2040 = (cbLight._m0[_2028].x * _2035) + 1.0;
    float _2041 = (cbLight._m0[_2028].y * _2035) + 1.0;
    float _2042 = (cbLight._m0[_2028].z * _2035) + 1.0;
    float _2043 = (cbLight._m0[_2028].w * _2035) + 1.0;
    uint _2044 = _2027 + 5u;
    float _2050 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
    uint _2054 = _2027 + 4u;
    float _2063 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
    uint _2067 = _2027 | 1u;
    float _2078 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_515, _516, _517));
    float _2081 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_515, _516, _517));
    float _4313 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _4324 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2086 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * 0.3183098733425140380859375;
    float _2088 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 0.3183098733425140380859375;
    float _2095 = ((cbLight._m0[_2044].x * _2050) * _2088) + (((cbLight._m0[_2054].x * _2016) * _2063) * _2086);
    float _2096 = ((_2050 * cbLight._m0[_2044].y) * _2088) + (((cbLight._m0[_2054].y * _2018) * _2063) * _2086);
    float _2097 = ((_2050 * cbLight._m0[_2044].z) * _2088) + (((cbLight._m0[_2054].z * _2020) * _2063) * _2086);
    uvec4 _2101 = floatBitsToUint(cbLight._m0[_2027 + 12u]);
    bool _2103 = _2101.x == 0u;
    float _2205;
    float _2207;
    float _2209;
    if (_2103)
    {
        _2205 = _2095;
        _2207 = _2096;
        _2209 = _2097;
    }
    else
    {
        uint _2213 = _2027 + 6u;
        float _2229 = (dot(vec3(cbLight._m0[_2027 + 2u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _2230 = _2229 * _2229;
        float _4335 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2231 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2232 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2205 = (((cbLight._m0[_2213].x * 0.3183098733425140380859375) * _2231) * _2232) + _2095;
        _2207 = (((cbLight._m0[_2213].y * 0.3183098733425140380859375) * _2231) * _2232) + _2096;
        _2209 = (((cbLight._m0[_2213].z * 0.3183098733425140380859375) * _2231) * _2232) + _2097;
    }
    bool _2212 = _2101.y == 0u;
    float _2267;
    float _2269;
    float _2271;
    if (_2212)
    {
        _2267 = _2205;
        _2269 = _2207;
        _2271 = _2209;
    }
    else
    {
        uint _2429 = _2027 + 7u;
        float _2445 = (dot(vec3(cbLight._m0[_2027 + 3u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _2446 = _2445 * _2445;
        float _4351 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2447 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2448 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2267 = (((cbLight._m0[_2429].x * 0.3183098733425140380859375) * _2447) * _2448) + _2205;
        _2269 = (((cbLight._m0[_2429].y * 0.3183098733425140380859375) * _2447) * _2448) + _2207;
        _2271 = (((cbLight._m0[_2429].z * 0.3183098733425140380859375) * _2447) * _2448) + _2209;
    }
    uint _2274 = _2027 + 8u;
    float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _518) * 0.949999988079071044921875);
    float _2288 = _2287 * _2287;
    float _2289 = cbLight._m0[_2027].x + _595;
    float _2290 = cbLight._m0[_2027].y + _596;
    float _2291 = cbLight._m0[_2027].z + _597;
    float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
    float _2296 = _2295 * _2289;
    float _2297 = _2295 * _2290;
    float _2298 = _2295 * _2291;
    float _2299 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2027].xyz));
    float _4367 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _4378 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _2303 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2304 = dot(vec3(_515, _516, _517), vec3(_2296, _2297, _2298));
    float _4389 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2296, _2297, _2298));
    float _4400 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2288 * _2288;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2327 = (exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2328 = 1.0 - _2288;
    float _2339 = (0.5 / (((_2303 * ((_2302 * _2328) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2328) + _2288) * _2302))) * _2302;
    float _4411 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2341 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    uint _2355 = _2027 + 9u;
    float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _518) * 0.949999988079071044921875);
    float _2367 = _2366 * _2366;
    float _2368 = cbLight._m0[_2067].x + _595;
    float _2369 = cbLight._m0[_2067].y + _596;
    float _2370 = cbLight._m0[_2067].z + _597;
    float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
    float _2375 = _2374 * _2368;
    float _2376 = _2374 * _2369;
    float _2377 = _2374 * _2370;
    float _2378 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2067].xyz));
    float _4422 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2382 = dot(vec3(_515, _516, _517), vec3(_2375, _2376, _2377));
    float _4433 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2386 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2375, _2376, _2377));
    float _4444 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2390 = _2367 * _2367;
    float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
    float _2403 = (exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2404 = 1.0 - _2367;
    float _2414 = (0.5 / (((_2303 * ((_2381 * _2404) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2404) + _2367) * _2381))) * _2381;
    float _4455 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2416 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
    float _2426 = (((_2403 * cbLight._m0[_2355].x) * _2416) * _2050) + ((((cbLight._m0[_2274].x * _2016) * _2327) * _2341) * _2063);
    float _2427 = (((_2403 * cbLight._m0[_2355].y) * _2416) * _2050) + ((((cbLight._m0[_2274].y * _2018) * _2327) * _2341) * _2063);
    float _2428 = (((_2403 * cbLight._m0[_2355].z) * _2416) * _2050) + ((((cbLight._m0[_2274].z * _2020) * _2327) * _2341) * _2063);
    float _2484;
    float _2486;
    float _2488;
    if (_2103)
    {
        _2484 = _2426;
        _2486 = _2427;
        _2488 = _2428;
    }
    else
    {
        uint _2490 = _2027 + 2u;
        uint _2494 = _2027 + 10u;
        float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2490].w)) * _518) * 0.949999988079071044921875);
        float _2509 = _2508 * _2508;
        float _2510 = cbLight._m0[_2490].x + _595;
        float _2511 = cbLight._m0[_2490].y + _596;
        float _2512 = cbLight._m0[_2490].z + _597;
        float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
        float _2517 = _2516 * _2510;
        float _2518 = _2516 * _2511;
        float _2519 = _2516 * _2512;
        float _2520 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2490].xyz));
        float _4466 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2524 = dot(vec3(_515, _516, _517), vec3(_2517, _2518, _2519));
        float _4477 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2528 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_2517, _2518, _2519));
        float _4488 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2532 = _2509 * _2509;
        float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
        float _2545 = (exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2546 = 1.0 - _2509;
        float _2556 = (0.5 / (((_2303 * ((_2523 * _2546) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2546) + _2509) * _2523))) * _2523;
        float _4499 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2558 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
        float _2559 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2484 = (((_2545 * cbLight._m0[_2494].x) * _2558) * _2559) + _2426;
        _2486 = (((_2545 * cbLight._m0[_2494].y) * _2558) * _2559) + _2427;
        _2488 = (((_2545 * cbLight._m0[_2494].z) * _2558) * _2559) + _2428;
    }
    float _2590;
    float _2592;
    float _2594;
    if (_2212)
    {
        _2590 = _2484;
        _2592 = _2486;
        _2594 = _2488;
    }
    else
    {
        uint _2601 = _2027 + 3u;
        uint _2605 = _2027 + 11u;
        float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2601].w)) * _518) * 0.949999988079071044921875);
        float _2620 = _2619 * _2619;
        float _2621 = cbLight._m0[_2601].x + _595;
        float _2622 = cbLight._m0[_2601].y + _596;
        float _2623 = cbLight._m0[_2601].z + _597;
        float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
        float _2628 = _2627 * _2621;
        float _2629 = _2627 * _2622;
        float _2630 = _2627 * _2623;
        float _2631 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2601].xyz));
        float _4515 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2635 = dot(vec3(_515, _516, _517), vec3(_2628, _2629, _2630));
        float _4526 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2639 = dot(vec3(cbLight._m0[_2601].xyz), vec3(_2628, _2629, _2630));
        float _4537 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2643 = _2620 * _2620;
        float _2647 = ((_2638 * _2638) * (_2643 + (-1.0))) + 1.0;
        float _2656 = (exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2657 = 1.0 - _2620;
        float _2667 = (0.5 / (((_2303 * ((_2634 * _2657) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2657) + _2620) * _2634))) * _2634;
        float _4548 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2669 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2643 / ((_2647 * _2647) * 3.141590118408203125));
        float _2670 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2590 = (((_2656 * cbLight._m0[_2605].x) * _2669) * _2670) + _2484;
        _2592 = (((_2656 * cbLight._m0[_2605].y) * _2669) * _2670) + _2486;
        _2594 = (((_2656 * cbLight._m0[_2605].z) * _2669) * _2670) + _2488;
    }
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    if (_2025.y == 0u)
    {
        uvec4 _2691 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2692 = _2691.x;
        uint _2703 = uint((float(_2691.y) * floor(float(uint(cbSceneParam._m0[85u].y * _604) / _2692))) + floor(float(uint(cbSceneParam._m0[85u].x * _603) / _2692)));
        float _2713 = (log2(_1803 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2714 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        uint _2717 = uint(isnan(14.0) ? _2714 : (isnan(_2714) ? 14.0 : min(_2714, 14.0)));
        uvec4 _2722 = texelFetch(g_lightClusterGridBuffer, int(((_2717 << 2u) + (_2703 << 6u)) >> 2u));
        uint _2723 = _2722.x;
        uint _2724 = _2691.z;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        if (((((1u << ((_2724 >> 4u) & 15u)) + 4294967295u) & _2723) == 0u) || ((_2724 & 240u) == 0u))
        {
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
        }
        else
        {
            float _2873;
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            uint _3054 = 0u;
            uint _3063;
            bool _3064;
            for (;;)
            {
                _3063 = texelFetch(g_lightClassification, int((((_2717 << 5u) + (_2703 << 9u)) + (_3054 << 2u)) >> 2u)).x;
                _3064 = _3063 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3064)
                {
                    frontier_phi_66_pred = _3053;
                    frontier_phi_66_pred_1 = _3052;
                    frontier_phi_66_pred_2 = _3051;
                    frontier_phi_66_pred_3 = _3050;
                    frontier_phi_66_pred_4 = _3049;
                    frontier_phi_66_pred_5 = _3048;
                }
                else
                {
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    uint _3178;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3050;
                    _3175 = _3051;
                    _3176 = _3052;
                    _3177 = _3053;
                    _3178 = _3063;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    for (;;)
                    {
                        uint _3182 = uint(findLSB(_3178)) + (_3054 << 5u);
                        uint _3179 = (_3178 + 4294967295u) & _3178;
                        uint _3184 = _3182 * 48u;
                        vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3204 = (_3182 * 48u) + 4u;
                        vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 3u)).x));
                        uint _3223 = (_3182 * 48u) + 8u;
                        vec3 _3234 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x));
                        float _3238 = _3198.x - _1801;
                        float _3239 = _3198.y - _1802;
                        float _3240 = _3198.z - _1803;
                        float _3241 = dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240));
                        float _3244 = inversesqrt(_3241);
                        float _3245 = _3244 * _3238;
                        float _3246 = _3244 * _3239;
                        float _3247 = _3244 * _3240;
                        float _3248 = dot(vec3(_625, _628, _631), vec3(_3245, _3246, _3247));
                        float _3253 = 1.0 - (_3241 * _3198.w);
                        float _4574 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3254 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                        float _3255 = sqrt(_3241) * _3217.w;
                        float _3258 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                        float _3259 = _3258 * _3258;
                        float _3262 = ((1.0 - _3259) * _3248) + _3259;
                        float _3265 = _3255 * _3255;
                        float _3269 = ((isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))) * _3254) / ((_3265 * 0.699999988079071044921875) + 1.0);
                        float _3273 = (-0.0) - _1801;
                        float _3274 = (-0.0) - _1802;
                        float _3275 = (-0.0) - _1803;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3280 = _3279 * _3273;
                        float _3281 = _3279 * _3274;
                        float _3282 = _3279 * _3275;
                        float _3289 = exp2(log2(1.0 / ((_3265 * 3.5) + 5.0)) * 0.25);
                        float _3290 = 1.0 - _693;
                        float _3297 = sqrt(1.0 - ((1.0 - (_3290 * _3290)) * (1.0 - (_3289 * _3289))));
                        float _3298 = _3297 * _3297;
                        float _3299 = _3298 * _3298;
                        float _3300 = _3280 + _3245;
                        float _3301 = _3281 + _3246;
                        float _3302 = _3282 + _3247;
                        float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                        float _3310 = dot(vec3(_625, _628, _631), vec3(_3280, _3281, _3282));
                        float _4590 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3313 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3314 = dot(vec3(_625, _628, _631), vec3(_3306 * _3300, _3306 * _3301, _3306 * _3302));
                        float _4601 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3317 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3321 = ((_3317 * _3317) * (_3299 + (-1.0))) + 1.0;
                        float _3322 = _3258 * _3298;
                        float _3323 = _3322 * _3322;
                        float _3326 = ((1.0 - _3323) * _3248) + _3323;
                        float _4612 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3327 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3328 = 1.0 - _3298;
                        float _3338 = (0.5 / (((_3327 * ((_3313 * _3328) + _3298)) + 9.9999999392252902907785028219223e-09) + (((_3327 * _3328) + _3298) * _3313))) * _3327;
                        float _4623 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3349 = (((_3299 * 3.1415927410125732421875) * (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) / ((_3321 * _3321) * ((_3265 * 2.1991131305694580078125) + 3.141590118408203125))) * _3254;
                        _3107 = (_3269 * _3217.x) + _3175;
                        _3108 = (_3269 * _3217.y) + _3176;
                        _3109 = (_3269 * _3217.z) + _3177;
                        _3104 = (_3349 * _3234.x) + _3172;
                        _3105 = (_3349 * _3234.y) + _3173;
                        _3106 = (_3349 * _3234.z) + _3174;
                        if (_3179 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3106;
                            _3175 = _3107;
                            _3176 = _3108;
                            _3177 = _3109;
                            _3178 = _3179;
                        }
                    }
                    frontier_phi_66_pred = _3109;
                    frontier_phi_66_pred_1 = _3108;
                    frontier_phi_66_pred_2 = _3107;
                    frontier_phi_66_pred_3 = _3106;
                    frontier_phi_66_pred_4 = _3105;
                    frontier_phi_66_pred_5 = _3104;
                }
                _2883 = frontier_phi_66_pred;
                _2881 = frontier_phi_66_pred_1;
                _2879 = frontier_phi_66_pred_2;
                _2877 = frontier_phi_66_pred_3;
                _2875 = frontier_phi_66_pred_4;
                _2873 = frontier_phi_66_pred_5;
                uint _3055 = _3054 + 1u;
                if (_3055 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3048 = _2873;
                    _3049 = _2875;
                    _3050 = _2877;
                    _3051 = _2879;
                    _3052 = _2881;
                    _3053 = _2883;
                    _3054 = _3055;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
        }
        uvec4 _2886 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2887 = _2886.z;
        uint _2889 = (_2887 >> 8u) & 15u;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        if (((4294967295u << _2889) & _2723) == 0u)
        {
            _3016 = _2872;
            _3018 = _2874;
            _3020 = _2876;
            _3022 = _2878;
            _3024 = _2880;
            _3026 = _2882;
        }
        else
        {
            float _3041 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
            float _3042 = _3041 * _1801;
            float _3043 = _3041 * _1802;
            float _3044 = _3041 * _1803;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2889 < ((_2887 >> 12u) & 15u))
            {
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3155 = _2872;
                float _3156 = _2874;
                float _3157 = _2876;
                float _3158 = _2878;
                float _3159 = _2880;
                float _3160 = _2882;
                uint _3161 = _2889;
                uint _3170;
                bool _3171;
                for (;;)
                {
                    _3170 = texelFetch(g_lightClassification, int((((_2717 << 5u) + (_2703 << 9u)) + (_3161 << 2u)) >> 2u)).x;
                    _3171 = _3170 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3171)
                    {
                        frontier_phi_72_pred = _3160;
                        frontier_phi_72_pred_1 = _3159;
                        frontier_phi_72_pred_2 = _3158;
                        frontier_phi_72_pred_3 = _3157;
                        frontier_phi_72_pred_4 = _3156;
                        frontier_phi_72_pred_5 = _3155;
                    }
                    else
                    {
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3367 = _3155;
                        float _3368 = _3156;
                        float _3369 = _3157;
                        float _3370 = _3158;
                        float _3371 = _3159;
                        float _3372 = _3160;
                        uint _3373 = _3170;
                        uint _3374;
                        vec4 _3399;
                        float _3400;
                        vec4 _3415;
                        vec3 _3427;
                        vec4 _3443;
                        vec4 _3459;
                        float _3506;
                        bool _3507;
                        for (;;)
                        {
                            uint _3384 = ((_3161 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3373));
                            _3374 = (_3373 + 4294967295u) & _3373;
                            uint _3386 = _3384 * 40u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            _3400 = _3399.w;
                            uint _3402 = (_3384 * 40u) + 4u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3417 = (_3384 * 40u) + 8u;
                            _3427 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x));
                            uint _3430 = (_3384 * 40u) + 16u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3446 = (_3384 * 40u) + 20u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3462 = (_3384 * 40u) + 24u;
                            vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3481 = (_3384 * 40u) + 28u;
                            vec4 _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            _3506 = fma(_1803, _3494.z, fma(_1802, _3494.y, _3494.x * _1801)) + _3494.w;
                            _3507 = !((fma(_1803, _3475.z, fma(_1802, _3475.y, _3475.x * _1801)) + _3475.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3507)
                            {
                                float _3534 = _3399.x - _1801;
                                float _3535 = _3399.y - _1802;
                                float _3536 = _3399.z - _1803;
                                float _3537 = dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536));
                                float _3540 = inversesqrt(_3537);
                                float _3541 = _3540 * _3534;
                                float _3542 = _3540 * _3535;
                                float _3543 = _3540 * _3536;
                                float _3547 = 1.0 - (_3537 / (_3400 * _3400));
                                float _4634 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3552 = sqrt(_3537) * _3415.w;
                                float _3554 = 1.39999997615814208984375 / (_3552 + 1.39999997615814208984375);
                                float _3555 = _3554 * _3554;
                                float _3558 = ((1.0 - _3555) * dot(vec3(_3541, _3542, _3543), vec3(_625, _628, _631))) + _3555;
                                float _3561 = _3552 * _3552;
                                float _3565 = (fma(_1803, _3443.z, fma(_1802, _3443.y, _3443.x * _1801)) + _3443.w) / _3506;
                                float _3566 = (fma(_1803, _3459.z, fma(_1802, _3459.y, _3459.x * _1801)) + _3459.w) / _3506;
                                float _3570 = 1.0 - dot(vec2(_3565, _3566), vec2(_3565, _3566));
                                float _4650 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3571 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3572 = _3571 * (((isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0))) * _3548) / ((_3561 * 0.699999988079071044921875) + 1.0));
                                float _3584 = exp2(log2(1.0 / ((_3561 * 3.5) + 5.0)) * 0.25);
                                float _3585 = 1.0 - _693;
                                float _3592 = sqrt(1.0 - ((1.0 - (_3585 * _3585)) * (1.0 - (_3584 * _3584))));
                                float _3593 = _3592 * _3592;
                                float _3594 = _3593 * _3593;
                                float _3595 = _3541 - _3042;
                                float _3596 = _3542 - _3043;
                                float _3597 = _3543 - _3044;
                                float _3601 = inversesqrt(dot(vec3(_3595, _3596, _3597), vec3(_3595, _3596, _3597)));
                                float _3605 = dot(vec3(_625, _628, _631), vec3((-0.0) - _3042, (-0.0) - _3043, (-0.0) - _3044));
                                float _4661 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3608 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3609 = dot(vec3(_625, _628, _631), vec3(_3601 * _3595, _3601 * _3596, _3601 * _3597));
                                float _4672 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3612 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3616 = ((_3612 * _3612) * (_3594 + (-1.0))) + 1.0;
                                float _3617 = _3554 * _3593;
                                float _3618 = _3617 * _3617;
                                float _3624 = ((1.0 - _3618) * dot(vec3(_625, _628, _631), vec3(_3541, _3542, _3543))) + _3618;
                                float _4683 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3625 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3626 = 1.0 - _3593;
                                float _3636 = (0.5 / (((_3625 * ((_3608 * _3626) + _3593)) + 9.9999999392252902907785028219223e-09) + (((_3625 * _3626) + _3593) * _3608))) * _3625;
                                float _4694 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3646 = (_3571 * _3548) * (((_3594 * 3.1415927410125732421875) * (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) / ((_3616 * _3616) * ((_3561 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3572 * _3415.y;
                                frontier_phi_78_pred_1 = _3572 * _3415.x;
                                frontier_phi_78_pred_2 = _3646 * _3427.z;
                                frontier_phi_78_pred_3 = _3646 * _3427.y;
                                frontier_phi_78_pred_4 = _3646 * _3427.x;
                                frontier_phi_78_pred_5 = _3572 * _3415.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3654 = frontier_phi_78_pred;
                            _3653 = frontier_phi_78_pred_1;
                            _3652 = frontier_phi_78_pred_2;
                            _3651 = frontier_phi_78_pred_3;
                            _3650 = frontier_phi_78_pred_4;
                            _3655 = frontier_phi_78_pred_5;
                            _3357 = _3653 + _3370;
                            _3358 = _3654 + _3371;
                            _3359 = _3655 + _3372;
                            _3354 = _3650 + _3367;
                            _3355 = _3651 + _3368;
                            _3356 = _3652 + _3369;
                            if (_3374 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3374;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3359;
                        frontier_phi_72_pred_1 = _3358;
                        frontier_phi_72_pred_2 = _3357;
                        frontier_phi_72_pred_3 = _3356;
                        frontier_phi_72_pred_4 = _3355;
                        frontier_phi_72_pred_5 = _3354;
                    }
                    _3027 = frontier_phi_72_pred;
                    _3025 = frontier_phi_72_pred_1;
                    _3023 = frontier_phi_72_pred_2;
                    _3021 = frontier_phi_72_pred_3;
                    _3019 = frontier_phi_72_pred_4;
                    _3017 = frontier_phi_72_pred_5;
                    uint _3162 = _3161 + 1u;
                    if (_3162 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3155 = _3017;
                        _3156 = _3019;
                        _3157 = _3021;
                        _3158 = _3023;
                        _3159 = _3025;
                        _3160 = _3027;
                        _3161 = _3162;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3027;
                frontier_phi_60_61_ladder_1 = _3025;
                frontier_phi_60_61_ladder_2 = _3021;
                frontier_phi_60_61_ladder_3 = _3019;
                frontier_phi_60_61_ladder_4 = _3017;
                frontier_phi_60_61_ladder_5 = _3023;
            }
            else
            {
                frontier_phi_60_61_ladder = _2882;
                frontier_phi_60_61_ladder_1 = _2880;
                frontier_phi_60_61_ladder_2 = _2876;
                frontier_phi_60_61_ladder_3 = _2874;
                frontier_phi_60_61_ladder_4 = _2872;
                frontier_phi_60_61_ladder_5 = _2878;
            }
            _3016 = frontier_phi_60_61_ladder_4;
            _3018 = frontier_phi_60_61_ladder_3;
            _3020 = frontier_phi_60_61_ladder_2;
            _3022 = frontier_phi_60_61_ladder_5;
            _3024 = frontier_phi_60_61_ladder_1;
            _3026 = frontier_phi_60_61_ladder;
        }
        float _3031 = isnan(1.0) ? _669 : (isnan(_669) ? 1.0 : min(_669, 1.0));
        _2736 = (_3031 * _3022) + _2267;
        _2738 = (_3031 * _3024) + _2269;
        _2740 = (_3031 * _3026) + _2271;
        _2742 = ((_3016 * 0.039999999105930328369140625) * _3031) + _2590;
        _2744 = ((_3018 * 0.039999999105930328369140625) * _3031) + _2592;
        _2746 = ((_3020 * 0.039999999105930328369140625) * _3031) + _2594;
    }
    else
    {
        _2736 = _2267;
        _2738 = _2269;
        _2740 = _2271;
        _2742 = _2590;
        _2744 = _2592;
        _2746 = _2594;
    }
    float _2760 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2761 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2762 = cbSceneParam._m0[86u].x * (_1713 + ((_692 * cbMtdParam._m0[11u].y) * dot(vec3(_515, _516, _517), vec3(_205, _206, _207))));
    float _2763 = isnan(_2760) ? _2762 : (isnan(_2762) ? _2760 : min(_2762, _2760));
    float _2764 = isnan(_2761) ? _604 : (isnan(_604) ? _2761 : min(_604, _2761));
    vec4 _2766 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2763, _2764), 0.0);
    float _2768 = _2766.x;
    bool _2788 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2768)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2768))) > _537;
    vec4 _2792 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2788 ? _2763 : _603, _2788 ? _2764 : _604));
    float _4720 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4731 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4742 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _2816 = 0.959999978542327880859375 - (exp2(log2(1.0 - _684) * 5.0) * 0.959999978542327880859375);
    float _2818 = (_2792.x * _2816) * cbSceneParam._m0[72u].w;
    float _2820 = (_2792.y * _2816) * cbSceneParam._m0[72u].w;
    float _2822 = (_2792.z * _2816) * cbSceneParam._m0[72u].w;
    float _2843 = _603 / cbSceneParam._m0[86u].x;
    float _2844 = _604 / cbSceneParam._m0[86u].y;
    vec4 _2858 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2843, _2844, (log2((isnan(cbSceneParam._m0[77u].w) ? _537 : (isnan(_537) ? cbSceneParam._m0[77u].w : min(_537, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2860 = _2858.x;
    float _2861 = _2858.y;
    float _2862 = _2858.z;
    float _2863 = _2858.w;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    if (_537 > cbSceneParam._m0[78u].w)
    {
        float _2897 = isnan(_537) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _537 : min(cbSceneParam._m0[80u].w, _537));
        float _2898 = _2897 / _537;
        float _2909 = _2898 * _588;
        float _2910 = _589 * _2898;
        float _2911 = (-0.0) - _2910;
        float _2912 = _2898 * _590;
        float _2914 = (cbSceneParam._m0[77u].w * _2911) / _2897;
        float _2915 = _2914 + cbSceneParam._m0[79u].w;
        float _2916 = cbSceneParam._m0[79u].w - _2910;
        float _2922 = sqrt(((_2909 * _2909) + (_2910 * _2910)) + (_2912 * _2912));
        float _2925 = (1.0 - (cbSceneParam._m0[77u].w / _2897)) * _2922;
        float _2930 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2932 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3117;
        if (abs((_2911 - _2914) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3117 = ((((_2915 > 0.0) ? exp2(_2930 * _2915) : (2.0 - exp2(_2932 * _2915))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2925;
        }
        else
        {
            float _3077 = 1.0 / cbSceneParam._m0[80u].x;
            float _3078 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : max(_2915, _2916));
            float _3079 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : min(_2915, _2916));
            float _3088 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : min(_3078, 0.0));
            float _3089 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : min(_3079, 0.0));
            _3117 = ((abs(_2922 / _2911) * cbSceneParam._m0[80u].y) * ((((_3088 - _3089) * 2.0) - ((exp2(_2930 * (isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0)))) - exp2(_2930 * (isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))))) * _3077)) - ((exp2(_2932 * _3088) - exp2(_2932 * _3089)) * _3077))) + (_2925 * cbSceneParam._m0[80u].z);
        }
        vec4 _3119 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2843, _2844, 1.0), 0.0);
        float _3128 = exp2((_3117 * (-1.44269502162933349609375)) * (1.0 - _3119.w));
        float _3129 = log2(_3128);
        float _3145 = log2(_2863);
        _2934 = (exp2(_3145 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].x)) * _3119.x) / cbSceneParam._m0[78u].x)) + _2860;
        _2936 = (exp2(_3145 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].y)) * _3119.y) / cbSceneParam._m0[78u].y)) + _2861;
        _2938 = (exp2(_3145 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].z)) * _3119.z) / cbSceneParam._m0[78u].z)) + _2862;
        _2940 = _3128 * _2863;
    }
    else
    {
        _2934 = _2860;
        _2936 = _2861;
        _2938 = _2862;
        _2940 = _2863;
    }
    bool _2952 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2953 = log2(_2940);
    float _2960 = exp2(_2953 * cbSceneParam._m0[78u].x) * ((_2818 + (((((_1690 * _1738.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1482) * _1754)) + _2742) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2736 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _669))) - _2818) * 0.5));
    float _2961 = exp2(_2953 * cbSceneParam._m0[78u].y) * ((_2820 + (((((_1690 * _1738.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1482) * _1754)) + _2744) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2738 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _669))) - _2820) * 0.5));
    float _2962 = exp2(_2953 * cbSceneParam._m0[78u].z) * ((_2822 + (((((_1690 * _1738.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1482) * _1754)) + _2746) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2740 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _669))) - _2822) * 0.5));
    vec4 _2970 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_603, _604));
    float _2972 = _2970.x;
    float _2993 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2972)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2972))) - _537) * cbMtdParam._m0[12u].z;
    float _4793 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
    float _2995 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * cbInstanceData._m0[_644 + 6u].w;
    float _3004 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3004 * (_2952 ? _2960 : (_2960 + (cbSceneParam._m0[72u].w * _2934)));
    SV_Target.y = _3004 * (_2952 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2936)));
    SV_Target.z = _3004 * (_2952 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2938)));
    SV_Target.w = _2995;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2995;
}


