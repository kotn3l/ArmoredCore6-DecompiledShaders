#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_test_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_test_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_test_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_test_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_test_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1045;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x;
    float _268 = exp2(log2(texture(sampler2D(M_Water_test_snp_0_Texture2D_2, SS_WrapLinear), vec2((((_240 * cbMtdParam._m0[14u].z) + TEXCOORD) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[14u].w * _240) + TEXCOORD_1) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w)).x) * cbMtdParam._m0[12u].y);
    float _282 = (cbMtdParam._m0[15u].z * _240) + TEXCOORD;
    float _283 = (cbMtdParam._m0[15u].w * _240) + TEXCOORD_1;
    vec4 _295 = texture(sampler2D(M_Water_test_snp_0_Texture2D_3, SS_WrapLinear), vec2((_282 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_283 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _301 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[13u].x * cbMtdParam._m0[11u].w);
    float _308 = ((_295.y * 0.5) + (-0.25)) * cbMtdParam._m0[12u].w;
    float _310 = (-0.0) - (cbMtdParam._m0[12u].w * ((_295.x * 0.5) + (-0.25)));
    float _312 = fract(_301);
    float _314 = fract(_301 + 0.5);
    float _326 = abs((_312 * 2.0) + (-1.0));
    vec4 _343 = texture(sampler2D(M_Water_test_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_312 * _310) + _282) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_308 * _312) + _283) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _345 = _343.x;
    float _346 = _343.y;
    float _347 = _343.z;
    vec4 _348 = texture(sampler2D(M_Water_test_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_314 * _310) + _282) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_308 * _314) + _283) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _371 = (((cbMtdParam._m0[10u].x * TEXCOORD_3.x) * _268) * (((_348.x - _345) * _326) + _345)) + cbMtdParam._m0[9u].x;
    float _372 = (((cbMtdParam._m0[10u].y * TEXCOORD_3.x) * _268) * (((_348.y - _346) * _326) + _346)) + cbMtdParam._m0[9u].y;
    float _373 = (((cbMtdParam._m0[10u].z * TEXCOORD_3.x) * _268) * (((_348.z - _347) * _326) + _347)) + cbMtdParam._m0[9u].z;
    vec4 _394 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[14u].x * _240) + TEXCOORD) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[14u].y * _240) + TEXCOORD_1) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _419 = texture(sampler2D(M_Water_test_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[13u].z * _240) + TEXCOORD) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[13u].w * _240) + TEXCOORD_1) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _425 = (_419.x * 2.0) + (-1.0);
    float _426 = (_419.y * 2.0) + (-1.0);
    float _427 = dot(vec2(_425, _426), vec2(_425, _426));
    float _3538 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _433 = sqrt(1.0 - (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))));
    float _442 = (cbMtdParam._m0[15u].x * _240) + TEXCOORD;
    float _443 = (cbMtdParam._m0[15u].y * _240) + TEXCOORD_1;
    vec4 _448 = texture(sampler2D(M_Water_test_snp_0_Texture2D_3, SS_WrapLinear), vec2((_442 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_443 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _456 = ((_448.y * 0.5) + (-0.25)) * cbMtdParam._m0[12u].w;
    float _458 = (-0.0) - (cbMtdParam._m0[12u].w * ((_448.x * 0.5) + (-0.25)));
    vec4 _475 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((_312 * _458) + _442) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_456 * _312) + _443) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _477 = _475.x;
    float _478 = _475.y;
    vec4 _479 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((_314 * _458) + _442) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_456 * _314) + _443) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _495 = (_425 + (((_394.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z)) + ((((((_479.x - _477) * _326) + _477) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y);
    float _496 = (_426 + (((_394.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z)) + ((((((_479.y - _478) * _326) + _478) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y);
    float _502 = fma(_433, _209 * NORMAL.x, fma(_496, _216 * TANGENT.x, _495 * _203));
    float _505 = fma(_433, _209 * NORMAL.y, fma(_496, _216 * TANGENT.y, _495 * _204));
    float _508 = fma(_433, _209 * NORMAL.z, fma(_496, _216 * TANGENT.z, _495 * _205));
    float _512 = inversesqrt(dot(vec3(_502, _505, _508), vec3(_502, _505, _508)));
    float _513 = _512 * _502;
    float _514 = _512 * _505;
    float _515 = _512 * _508;
    float _3549 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _516 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3571 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3582 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _535 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _586 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _576);
    float _587 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _576);
    float _588 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _576);
    float _592 = inversesqrt(dot(vec3(_586, _587, _588), vec3(_586, _587, _588)));
    float _593 = _586 * _592;
    float _594 = _587 * _592;
    float _595 = _588 * _592;
    float _601 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _602 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _623 = fma(_515, cbSceneParam._m0[5u].z, fma(_514, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _513));
    float _626 = fma(_515, cbSceneParam._m0[6u].z, fma(_514, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _513));
    float _629 = fma(_515, cbSceneParam._m0[7u].z, fma(_514, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _513));
    uint _642 = uint(roundEven(NORMAL.w)) * 13u;
    uint _644 = (_642 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _650 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * cbInstanceData._m0[_644].x;
    float _651 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_644].y;
    float _652 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_644].z;
    float _3593 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _3604 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _3615 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    vec4 _664 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _601, cbSceneParam._m0[86u].y * _602));
    float _667 = _664.x * TEXCOORD_3.w;
    float _668 = dot(vec3(_513, _514, _515), vec3(_593, _594, _595));
    float _671 = _668 * 2.0;
    float _675 = (_671 * _513) - _593;
    float _676 = (_671 * _514) - _594;
    float _677 = (_671 * _515) - _595;
    float _681 = abs(dot(vec3(_593, _594, _595), vec3(_513, _514, _515)));
    float _3626 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _682 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _690 = 10.0 / (_535 + 10.0);
    float _691 = sqrt(_516);
    float _703 = exp2((_691 * 5.0) * log2(1.0 - (_682 * 0.999000012874603271484375))) / (4.0 - (_691 * 3.0));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _770 = fma(_743, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _735));
        float _774 = fma(_743, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _735));
        float _778 = fma(_743, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _735));
        float _802 = _735 + _513;
        float _803 = _739 + _514;
        float _804 = _743 + _515;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _770;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _774;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _778;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_770 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_774 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_778 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_513, _514, _515), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3674 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_513, _514, _515), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3707 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_513, _514, _515), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3740 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_743, cbModelParam._m0[30u].z, fma(_739, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _735));
        float _1089 = fma(_743, cbModelParam._m0[31u].z, fma(_739, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _735));
        float _1093 = fma(_743, cbModelParam._m0[32u].z, fma(_739, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _735));
        float _1116 = _735 + _513;
        float _1117 = _739 + _514;
        float _1118 = _743 + _515;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_513, _514, _515), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3803 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_513, _514, _515), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3836 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_513, _514, _515), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3869 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1045;
        _1355 = _1045;
        _1356 = _1045;
        _1357 = _1045;
        _1358 = _1045;
        _1359 = _1045;
        _1360 = _1045;
        _1361 = _1045;
        _1362 = _1045;
        _1363 = _1045;
        _1364 = _1045;
        _1365 = _1045;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1058)) + _1058;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _675 * 0.5;
    float _1423 = _676 * 0.5;
    float _1424 = _677 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _516);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1571;
    float _1573;
    float _1575;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1538 = fma(_743, cbModelParam._m0[13u].z, fma(_739, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _735)) + cbModelParam._m0[13u].w;
        float _1542 = fma(_743, cbModelParam._m0[14u].z, fma(_739, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _735)) + cbModelParam._m0[14u].w;
        float _1546 = fma(_743, cbModelParam._m0[15u].z, fma(_739, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _735)) + cbModelParam._m0[15u].w;
        float _1549 = fma(_677, cbModelParam._m0[13u].z, fma(_676, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675));
        float _1552 = fma(_677, cbModelParam._m0[14u].z, fma(_676, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675));
        float _1555 = fma(_677, cbModelParam._m0[15u].z, fma(_676, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675));
        float _1583;
        if (_1549 > 0.0)
        {
            _1583 = abs((1.0 - _1538) / _1549);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1538 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1583 = frontier_phi_14_12_ladder;
        }
        float _1859;
        if (_1552 > 0.0)
        {
            _1859 = abs((1.0 - _1542) / _1552);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1542 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1859 = frontier_phi_23_19_ladder;
        }
        float _2105;
        if (_1555 > 0.0)
        {
            _2105 = abs((1.0 - _1546) / _1555);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1546 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2105 = frontier_phi_35_30_ladder;
        }
        float _2107 = isnan(_1859) ? _1583 : (isnan(_1583) ? _1859 : min(_1583, _1859));
        float _2108 = isnan(_2105) ? _2107 : (isnan(_2107) ? _2105 : min(_2107, _2105));
        float _2112 = (_2108 * _1549) + _1538;
        float _2113 = (_2108 * _1552) + _1542;
        float _2114 = (_2108 * _1555) + _1546;
        float _2115 = _2108 * 9.9999997473787516355514526367188e-05;
        float _2117 = (-1.0) - _2115;
        float _2119 = _2115 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2114 > _2119) || ((_2114 < _2117) || ((_2113 > _2119) || ((_2113 < _2117) || ((_2112 < _2117) || (_2112 > _2119))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2238 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2114, cbModelParam._m0[9u].z, fma(_2113, cbModelParam._m0[9u].y, _2112 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2114, cbModelParam._m0[10u].z, fma(_2113, cbModelParam._m0[10u].y, _2112 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2114, cbModelParam._m0[11u].z, fma(_2113, cbModelParam._m0[11u].y, _2112 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_13_35_ladder = _2238.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2238.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2238.x * cbModelParam._m0[1u].y;
        }
        _1571 = frontier_phi_13_35_ladder_2;
        _1573 = frontier_phi_13_35_ladder_1;
        _1575 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_675, _676, _677), _1491);
        _1571 = _1559.x * cbModelParam._m0[1u].y;
        _1573 = _1559.y * cbModelParam._m0[1u].y;
        _1575 = _1559.z * cbModelParam._m0[1u].y;
    }
    float _1579 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _516);
    float _1580 = isnan(_1579) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1579 : min(cbModelParam._m0[25u].w, _1579));
    float _1672;
    float _1674;
    float _1676;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1636 = fma(_743, cbModelParam._m0[21u].z, fma(_739, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _735)) + cbModelParam._m0[21u].w;
        float _1640 = fma(_743, cbModelParam._m0[22u].z, fma(_739, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _735)) + cbModelParam._m0[22u].w;
        float _1644 = fma(_743, cbModelParam._m0[23u].z, fma(_739, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _735)) + cbModelParam._m0[23u].w;
        float _1647 = fma(_677, cbModelParam._m0[21u].z, fma(_676, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675));
        float _1650 = fma(_677, cbModelParam._m0[22u].z, fma(_676, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675));
        float _1653 = fma(_677, cbModelParam._m0[23u].z, fma(_676, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675));
        float _1864;
        if (_1647 > 0.0)
        {
            _1864 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1864 = frontier_phi_25_21_ladder;
        }
        float _2132;
        if (_1650 > 0.0)
        {
            _2132 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2132 = frontier_phi_37_32_ladder;
        }
        float _2337;
        if (_1653 > 0.0)
        {
            _2337 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2337 = frontier_phi_46_43_ladder;
        }
        float _2339 = isnan(_2132) ? _1864 : (isnan(_1864) ? _2132 : min(_1864, _2132));
        float _2340 = isnan(_2337) ? _2339 : (isnan(_2339) ? _2337 : min(_2339, _2337));
        float _2344 = (_2340 * _1647) + _1636;
        float _2345 = (_2340 * _1650) + _1640;
        float _2346 = (_2340 * _1653) + _1644;
        float _2347 = _2340 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2347;
        float _2350 = _2347 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2346 > _2350) || ((_2346 < _2348) || ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 < _2348) || (_2344 > _2350))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2346, cbModelParam._m0[17u].z, fma(_2345, cbModelParam._m0[17u].y, _2344 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2346, cbModelParam._m0[18u].z, fma(_2345, cbModelParam._m0[18u].y, _2344 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2346, cbModelParam._m0[19u].z, fma(_2345, cbModelParam._m0[19u].y, _2344 * cbModelParam._m0[19u].x))), _1580);
            frontier_phi_22_46_ladder = _2620.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2620.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2620.x * cbModelParam._m0[1u].z;
        }
        _1672 = frontier_phi_22_46_ladder_2;
        _1674 = frontier_phi_22_46_ladder_1;
        _1676 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_675, _676, _677), _1580);
        _1672 = _1656.x * cbModelParam._m0[1u].z;
        _1674 = _1656.y * cbModelParam._m0[1u].z;
        _1676 = _1656.z * cbModelParam._m0[1u].z;
    }
    float _1688 = ((((1.0 - _703) * ((_691 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_703 * _691)) * _667;
    float _1689 = _1688 * ((cbModelParam._m0[1u].w * (_1672 - _1571)) + _1571);
    float _1690 = _1688 * ((cbModelParam._m0[1u].w * (_1674 - _1573)) + _1573);
    float _1691 = _1688 * ((cbModelParam._m0[1u].w * (_1676 - _1575)) + _1575);
    float _1694 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, _1689 * cbSceneParam._m0[91u].x));
    float _1711 = _601 / cbSceneParam._m0[86u].x;
    float _1719 = (cbSceneParam._m0[88u].y * (1.0 - _516)) + cbSceneParam._m0[88u].z;
    float _3995 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1721 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 5.0;
    float _1726 = (_690 * cbMtdParam._m0[12u].x) * dot(vec3(_513, _514, _515), vec3(1.0, 0.0, 0.0));
    vec4 _1736 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1726 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1726 + _1711) * cbSceneParam._m0[86u].x, _602), _1721).w) + _1711) * cbSceneParam._m0[86u].x, _602), _1721);
    float _1752 = 1.0 - _1736.w;
    vec4 _1760 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_601, _602));
    float _1762 = _1760.w;
    float _1774 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1762);
    float _1775 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1762);
    float _1776 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1762);
    uvec4 _1780 = floatBitsToUint(cbInstanceData._m0[_642 + 5u]);
    uint _1782 = _1780.x * 14u;
    uint _1783 = _1782 + 13u;
    float _1790 = _667 + (-1.0);
    float _1795 = (cbLight._m0[_1783].x * _1790) + 1.0;
    float _1796 = (cbLight._m0[_1783].y * _1790) + 1.0;
    float _1797 = (cbLight._m0[_1783].z * _1790) + 1.0;
    float _1798 = (cbLight._m0[_1783].w * _1790) + 1.0;
    uint _1799 = _1782 + 5u;
    float _1805 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
    uint _1809 = _1782 + 4u;
    float _1818 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1822 = _1782 | 1u;
    float _1833 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_513, _514, _515));
    float _1836 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_513, _514, _515));
    float _4016 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _4027 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1841 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * 0.3183098733425140380859375;
    float _1843 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 0.3183098733425140380859375;
    float _1850 = ((cbLight._m0[_1799].x * _1805) * _1843) + (((cbLight._m0[_1809].x * _1774) * _1818) * _1841);
    float _1851 = ((_1805 * cbLight._m0[_1799].y) * _1843) + (((cbLight._m0[_1809].y * _1775) * _1818) * _1841);
    float _1852 = ((_1805 * cbLight._m0[_1799].z) * _1843) + (((cbLight._m0[_1809].z * _1776) * _1818) * _1841);
    uvec4 _1856 = floatBitsToUint(cbLight._m0[_1782 + 12u]);
    bool _1858 = _1856.x == 0u;
    float _1869;
    float _1871;
    float _1873;
    if (_1858)
    {
        _1869 = _1850;
        _1871 = _1851;
        _1873 = _1852;
    }
    else
    {
        uint _1877 = _1782 + 6u;
        float _1893 = (dot(vec3(cbLight._m0[_1782 + 2u].xyz), vec3(_513, _514, _515)) * 0.5) + 0.5;
        float _1894 = _1893 * _1893;
        float _4038 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1896 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _1869 = (((cbLight._m0[_1877].x * 0.3183098733425140380859375) * _1895) * _1896) + _1850;
        _1871 = (((cbLight._m0[_1877].y * 0.3183098733425140380859375) * _1895) * _1896) + _1851;
        _1873 = (((cbLight._m0[_1877].z * 0.3183098733425140380859375) * _1895) * _1896) + _1852;
    }
    bool _1876 = _1856.y == 0u;
    float _1914;
    float _1916;
    float _1918;
    if (_1876)
    {
        _1914 = _1869;
        _1916 = _1871;
        _1918 = _1873;
    }
    else
    {
        uint _2076 = _1782 + 7u;
        float _2092 = (dot(vec3(cbLight._m0[_1782 + 3u].xyz), vec3(_513, _514, _515)) * 0.5) + 0.5;
        float _2093 = _2092 * _2092;
        float _4054 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2094 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2095 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _1914 = (((cbLight._m0[_2076].x * 0.3183098733425140380859375) * _2094) * _2095) + _1869;
        _1916 = (((cbLight._m0[_2076].y * 0.3183098733425140380859375) * _2094) * _2095) + _1871;
        _1918 = (((cbLight._m0[_2076].z * 0.3183098733425140380859375) * _2094) * _2095) + _1873;
    }
    uint _1921 = _1782 + 8u;
    float _1934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1782].w)) * _516) * 0.949999988079071044921875);
    float _1935 = _1934 * _1934;
    float _1936 = cbLight._m0[_1782].x + _593;
    float _1937 = cbLight._m0[_1782].y + _594;
    float _1938 = cbLight._m0[_1782].z + _595;
    float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
    float _1943 = _1942 * _1936;
    float _1944 = _1942 * _1937;
    float _1945 = _1942 * _1938;
    float _1946 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_1782].xyz));
    float _4070 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _1950 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _1951 = dot(vec3(_513, _514, _515), vec3(_1943, _1944, _1945));
    float _4092 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _1955 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_1943, _1944, _1945));
    float _4103 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1959 = _1935 * _1935;
    float _1963 = ((_1954 * _1954) * (_1959 + (-1.0))) + 1.0;
    float _1974 = (exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1975 = 1.0 - _1935;
    float _1986 = (0.5 / (((_1950 * ((_1949 * _1975) + _1935)) + 9.9999999392252902907785028219223e-09) + (((_1950 * _1975) + _1935) * _1949))) * _1949;
    float _4114 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1988 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1959 / ((_1963 * _1963) * 3.141590118408203125));
    uint _2002 = _1782 + 9u;
    float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1822].w)) * _516) * 0.949999988079071044921875);
    float _2014 = _2013 * _2013;
    float _2015 = cbLight._m0[_1822].x + _593;
    float _2016 = cbLight._m0[_1822].y + _594;
    float _2017 = cbLight._m0[_1822].z + _595;
    float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
    float _2022 = _2021 * _2015;
    float _2023 = _2021 * _2016;
    float _2024 = _2021 * _2017;
    float _2025 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_1822].xyz));
    float _4125 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2029 = dot(vec3(_513, _514, _515), vec3(_2022, _2023, _2024));
    float _4136 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_2022, _2023, _2024));
    float _4147 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2037 = _2014 * _2014;
    float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
    float _2050 = (exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2051 = 1.0 - _2014;
    float _2061 = (0.5 / (((_1950 * ((_2028 * _2051) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_1950 * _2051) + _2014) * _2028))) * _2028;
    float _4158 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2063 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
    float _2073 = (((_2050 * cbLight._m0[_2002].x) * _2063) * _1805) + ((((cbLight._m0[_1921].x * _1774) * _1974) * _1988) * _1818);
    float _2074 = (((_2050 * cbLight._m0[_2002].y) * _2063) * _1805) + ((((cbLight._m0[_1921].y * _1775) * _1974) * _1988) * _1818);
    float _2075 = (((_2050 * cbLight._m0[_2002].z) * _2063) * _1805) + ((((cbLight._m0[_1921].z * _1776) * _1974) * _1988) * _1818);
    float _2137;
    float _2139;
    float _2141;
    if (_1858)
    {
        _2137 = _2073;
        _2139 = _2074;
        _2141 = _2075;
    }
    else
    {
        uint _2143 = _1782 + 2u;
        uint _2147 = _1782 + 10u;
        float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _516) * 0.949999988079071044921875);
        float _2162 = _2161 * _2161;
        float _2163 = cbLight._m0[_2143].x + _593;
        float _2164 = cbLight._m0[_2143].y + _594;
        float _2165 = cbLight._m0[_2143].z + _595;
        float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
        float _2170 = _2169 * _2163;
        float _2171 = _2169 * _2164;
        float _2172 = _2169 * _2165;
        float _2173 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_2143].xyz));
        float _4169 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2177 = dot(vec3(_513, _514, _515), vec3(_2170, _2171, _2172));
        float _4180 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2181 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2170, _2171, _2172));
        float _4191 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2185 = _2162 * _2162;
        float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
        float _2198 = (exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2199 = 1.0 - _2162;
        float _2209 = (0.5 / (((_1950 * ((_2176 * _2199) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_1950 * _2199) + _2162) * _2176))) * _2176;
        float _4202 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2211 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
        float _2212 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2137 = (((_2198 * cbLight._m0[_2147].x) * _2211) * _2212) + _2073;
        _2139 = (((_2198 * cbLight._m0[_2147].y) * _2211) * _2212) + _2074;
        _2141 = (((_2198 * cbLight._m0[_2147].z) * _2211) * _2212) + _2075;
    }
    float _2247;
    float _2249;
    float _2251;
    if (_1876)
    {
        _2247 = _2137;
        _2249 = _2139;
        _2251 = _2141;
    }
    else
    {
        uint _2258 = _1782 + 3u;
        uint _2262 = _1782 + 11u;
        float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _516) * 0.949999988079071044921875);
        float _2277 = _2276 * _2276;
        float _2278 = cbLight._m0[_2258].x + _593;
        float _2279 = cbLight._m0[_2258].y + _594;
        float _2280 = cbLight._m0[_2258].z + _595;
        float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
        float _2285 = _2284 * _2278;
        float _2286 = _2284 * _2279;
        float _2287 = _2284 * _2280;
        float _2288 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_2258].xyz));
        float _4218 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2292 = dot(vec3(_513, _514, _515), vec3(_2285, _2286, _2287));
        float _4229 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2296 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2285, _2286, _2287));
        float _4240 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2300 = _2277 * _2277;
        float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
        float _2313 = (exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2314 = 1.0 - _2277;
        float _2324 = (0.5 / (((_1950 * ((_2291 * _2314) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_1950 * _2314) + _2277) * _2291))) * _2291;
        float _4251 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2326 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
        float _2327 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2247 = (((_2313 * cbLight._m0[_2262].x) * _2326) * _2327) + _2137;
        _2249 = (((_2313 * cbLight._m0[_2262].y) * _2326) * _2327) + _2139;
        _2251 = (((_2313 * cbLight._m0[_2262].z) * _2326) * _2327) + _2141;
    }
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    float _2470;
    float _2472;
    if (_1780.y == 0u)
    {
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2402;
        float _2404 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2402;
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2402;
        uvec4 _2417 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2418 = _2417.x;
        uint _2429 = uint((float(_2417.y) * floor(float(uint(cbSceneParam._m0[85u].y * _602) / _2418))) + floor(float(uint(cbSceneParam._m0[85u].x * _601) / _2418)));
        float _2439 = (log2(_2405 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2440 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        uint _2443 = uint(isnan(14.0) ? _2440 : (isnan(_2440) ? 14.0 : min(_2440, 14.0)));
        uvec4 _2448 = texelFetch(g_lightClusterGridBuffer, int(((_2443 << 2u) + (_2429 << 6u)) >> 2u));
        uint _2449 = _2448.x;
        uint _2450 = _2417.z;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        if (((((1u << ((_2450 >> 4u) & 15u)) + 4294967295u) & _2449) == 0u) || ((_2450 & 240u) == 0u))
        {
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
        }
        else
        {
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            uint _2807 = 0u;
            uint _2816;
            bool _2817;
            for (;;)
            {
                _2816 = texelFetch(g_lightClassification, int((((_2443 << 5u) + (_2429 << 9u)) + (_2807 << 2u)) >> 2u)).x;
                _2817 = _2816 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2817)
                {
                    frontier_phi_61_pred = _2801;
                    frontier_phi_61_pred_1 = _2806;
                    frontier_phi_61_pred_2 = _2805;
                    frontier_phi_61_pred_3 = _2804;
                    frontier_phi_61_pred_4 = _2803;
                    frontier_phi_61_pred_5 = _2802;
                }
                else
                {
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    uint _2931;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2816;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    for (;;)
                    {
                        uint _2935 = uint(findLSB(_2931)) + (_2807 << 5u);
                        uint _2932 = (_2931 + 4294967295u) & _2931;
                        uint _2937 = _2935 * 48u;
                        vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 3u)).x));
                        uint _2957 = (_2935 * 48u) + 4u;
                        vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 3u)).x));
                        uint _2976 = (_2935 * 48u) + 8u;
                        vec3 _2987 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x));
                        float _2991 = _2951.x - _2403;
                        float _2992 = _2951.y - _2404;
                        float _2993 = _2951.z - _2405;
                        float _2994 = dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993));
                        float _2997 = inversesqrt(_2994);
                        float _2998 = _2997 * _2991;
                        float _2999 = _2997 * _2992;
                        float _3000 = _2997 * _2993;
                        float _3001 = dot(vec3(_623, _626, _629), vec3(_2998, _2999, _3000));
                        float _3006 = 1.0 - (_2994 * _2951.w);
                        float _4277 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3007 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _3008 = sqrt(_2994) * _2970.w;
                        float _3011 = 1.39999997615814208984375 / (_3008 + 1.39999997615814208984375);
                        float _3012 = _3011 * _3011;
                        float _3015 = ((1.0 - _3012) * _3001) + _3012;
                        float _3018 = _3008 * _3008;
                        float _3022 = ((isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))) * _3007) / ((_3018 * 0.699999988079071044921875) + 1.0);
                        float _3026 = (-0.0) - _2403;
                        float _3027 = (-0.0) - _2404;
                        float _3028 = (-0.0) - _2405;
                        float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                        float _3033 = _3032 * _3026;
                        float _3034 = _3032 * _3027;
                        float _3035 = _3032 * _3028;
                        float _3043 = exp2(log2(1.0 / ((_3018 * 3.5) + 5.0)) * 0.25);
                        float _3044 = 1.0 - _691;
                        float _3051 = sqrt(1.0 - ((1.0 - (_3044 * _3044)) * (1.0 - (_3043 * _3043))));
                        float _3052 = _3051 * _3051;
                        float _3053 = _3052 * _3052;
                        float _3054 = _3033 + _2998;
                        float _3055 = _3034 + _2999;
                        float _3056 = _3035 + _3000;
                        float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                        float _3064 = dot(vec3(_623, _626, _629), vec3(_3033, _3034, _3035));
                        float _4293 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _3068 = dot(vec3(_623, _626, _629), vec3(_3060 * _3054, _3060 * _3055, _3060 * _3056));
                        float _4304 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _3075 = ((_3071 * _3071) * (_3053 + (-1.0))) + 1.0;
                        float _3076 = _3011 * _3052;
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3001) + _3077;
                        float _4315 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3081 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _3082 = 1.0 - _3052;
                        float _3092 = (0.5 / (((_3081 * ((_3067 * _3082) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3052) * _3067))) * _3081;
                        float _4326 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3103 = (((_3053 * 3.1415927410125732421875) * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) / ((_3075 * _3075) * ((_3018 * 2.1991131305694580078125) + 3.141590118408203125))) * _3007;
                        _2860 = (_3022 * _2970.x) + _2928;
                        _2861 = (_3022 * _2970.y) + _2929;
                        _2862 = (_3022 * _2970.z) + _2930;
                        _2857 = (_3103 * _2987.x) + _2925;
                        _2858 = (_3103 * _2987.y) + _2926;
                        _2859 = (_3103 * _2987.z) + _2927;
                        if (_2932 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2932;
                        }
                    }
                    frontier_phi_61_pred = _2857;
                    frontier_phi_61_pred_1 = _2862;
                    frontier_phi_61_pred_2 = _2861;
                    frontier_phi_61_pred_3 = _2860;
                    frontier_phi_61_pred_4 = _2859;
                    frontier_phi_61_pred_5 = _2858;
                }
                _2626 = frontier_phi_61_pred;
                _2636 = frontier_phi_61_pred_1;
                _2634 = frontier_phi_61_pred_2;
                _2632 = frontier_phi_61_pred_3;
                _2630 = frontier_phi_61_pred_4;
                _2628 = frontier_phi_61_pred_5;
                uint _2808 = _2807 + 1u;
                if (_2808 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2801 = _2626;
                    _2802 = _2628;
                    _2803 = _2630;
                    _2804 = _2632;
                    _2805 = _2634;
                    _2806 = _2636;
                    _2807 = _2808;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
        }
        uvec4 _2639 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2640 = _2639.z;
        uint _2642 = (_2640 >> 8u) & 15u;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((4294967295u << _2642) & _2449) == 0u)
        {
            _2769 = _2625;
            _2771 = _2627;
            _2773 = _2629;
            _2775 = _2631;
            _2777 = _2633;
            _2779 = _2635;
        }
        else
        {
            float _2794 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
            float _2795 = _2794 * _2403;
            float _2796 = _2794 * _2404;
            float _2797 = _2794 * _2405;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2642 < ((_2640 >> 12u) & 15u))
            {
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2908 = _2625;
                float _2909 = _2627;
                float _2910 = _2629;
                float _2911 = _2631;
                float _2912 = _2633;
                float _2913 = _2635;
                uint _2914 = _2642;
                uint _2923;
                bool _2924;
                for (;;)
                {
                    _2923 = texelFetch(g_lightClassification, int((((_2443 << 5u) + (_2429 << 9u)) + (_2914 << 2u)) >> 2u)).x;
                    _2924 = _2923 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2924)
                    {
                        frontier_phi_67_pred = _2911;
                        frontier_phi_67_pred_1 = _2912;
                        frontier_phi_67_pred_2 = _2913;
                        frontier_phi_67_pred_3 = _2910;
                        frontier_phi_67_pred_4 = _2909;
                        frontier_phi_67_pred_5 = _2908;
                    }
                    else
                    {
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3121 = _2908;
                        float _3122 = _2909;
                        float _3123 = _2910;
                        float _3124 = _2911;
                        float _3125 = _2912;
                        float _3126 = _2913;
                        uint _3127 = _2923;
                        uint _3128;
                        vec4 _3153;
                        float _3154;
                        vec4 _3169;
                        vec3 _3181;
                        vec4 _3197;
                        vec4 _3213;
                        float _3260;
                        bool _3261;
                        for (;;)
                        {
                            uint _3138 = ((_2914 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3127));
                            _3128 = (_3127 + 4294967295u) & _3127;
                            uint _3140 = _3138 * 40u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            _3154 = _3153.w;
                            uint _3156 = (_3138 * 40u) + 4u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3138 * 40u) + 8u;
                            _3181 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x));
                            uint _3184 = (_3138 * 40u) + 16u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3200 = (_3138 * 40u) + 20u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3216 = (_3138 * 40u) + 24u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3235 = (_3138 * 40u) + 28u;
                            vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            _3260 = fma(_2405, _3248.z, fma(_2404, _3248.y, _3248.x * _2403)) + _3248.w;
                            _3261 = !((fma(_2405, _3229.z, fma(_2404, _3229.y, _3229.x * _2403)) + _3229.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3261)
                            {
                                float _3288 = _3153.x - _2403;
                                float _3289 = _3153.y - _2404;
                                float _3290 = _3153.z - _2405;
                                float _3291 = dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290));
                                float _3294 = inversesqrt(_3291);
                                float _3295 = _3294 * _3288;
                                float _3296 = _3294 * _3289;
                                float _3297 = _3294 * _3290;
                                float _3301 = 1.0 - (_3291 / (_3154 * _3154));
                                float _4337 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3306 = sqrt(_3291) * _3169.w;
                                float _3308 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                                float _3309 = _3308 * _3308;
                                float _3312 = ((1.0 - _3309) * dot(vec3(_3295, _3296, _3297), vec3(_623, _626, _629))) + _3309;
                                float _3315 = _3306 * _3306;
                                float _3319 = (fma(_2405, _3197.z, fma(_2404, _3197.y, _3197.x * _2403)) + _3197.w) / _3260;
                                float _3320 = (fma(_2405, _3213.z, fma(_2404, _3213.y, _3213.x * _2403)) + _3213.w) / _3260;
                                float _3324 = 1.0 - dot(vec2(_3319, _3320), vec2(_3319, _3320));
                                float _4353 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3326 = _3325 * (((isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0))) * _3302) / ((_3315 * 0.699999988079071044921875) + 1.0));
                                float _3338 = exp2(log2(1.0 / ((_3315 * 3.5) + 5.0)) * 0.25);
                                float _3339 = 1.0 - _691;
                                float _3346 = sqrt(1.0 - ((1.0 - (_3339 * _3339)) * (1.0 - (_3338 * _3338))));
                                float _3347 = _3346 * _3346;
                                float _3348 = _3347 * _3347;
                                float _3349 = _3295 - _2795;
                                float _3350 = _3296 - _2796;
                                float _3351 = _3297 - _2797;
                                float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                                float _3359 = dot(vec3(_623, _626, _629), vec3((-0.0) - _2795, (-0.0) - _2796, (-0.0) - _2797));
                                float _4364 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3362 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3363 = dot(vec3(_623, _626, _629), vec3(_3355 * _3349, _3355 * _3350, _3355 * _3351));
                                float _4375 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3366 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3370 = ((_3366 * _3366) * (_3348 + (-1.0))) + 1.0;
                                float _3371 = _3308 * _3347;
                                float _3372 = _3371 * _3371;
                                float _3378 = ((1.0 - _3372) * dot(vec3(_623, _626, _629), vec3(_3295, _3296, _3297))) + _3372;
                                float _4386 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3380 = 1.0 - _3347;
                                float _3390 = (0.5 / (((_3379 * ((_3362 * _3380) + _3347)) + 9.9999999392252902907785028219223e-09) + (((_3379 * _3380) + _3347) * _3362))) * _3379;
                                float _4397 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3400 = (_3325 * _3302) * (((_3348 * 3.1415927410125732421875) * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) / ((_3370 * _3370) * ((_3315 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3400 * _3181.x;
                                frontier_phi_73_pred_1 = _3400 * _3181.y;
                                frontier_phi_73_pred_2 = _3326 * _3169.z;
                                frontier_phi_73_pred_3 = _3326 * _3169.y;
                                frontier_phi_73_pred_4 = _3326 * _3169.x;
                                frontier_phi_73_pred_5 = _3400 * _3181.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3404 = frontier_phi_73_pred;
                            _3405 = frontier_phi_73_pred_1;
                            _3409 = frontier_phi_73_pred_2;
                            _3408 = frontier_phi_73_pred_3;
                            _3407 = frontier_phi_73_pred_4;
                            _3406 = frontier_phi_73_pred_5;
                            _3111 = _3407 + _3124;
                            _3112 = _3408 + _3125;
                            _3113 = _3409 + _3126;
                            _3108 = _3404 + _3121;
                            _3109 = _3405 + _3122;
                            _3110 = _3406 + _3123;
                            if (_3128 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3128;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3111;
                        frontier_phi_67_pred_1 = _3112;
                        frontier_phi_67_pred_2 = _3113;
                        frontier_phi_67_pred_3 = _3110;
                        frontier_phi_67_pred_4 = _3109;
                        frontier_phi_67_pred_5 = _3108;
                    }
                    _2776 = frontier_phi_67_pred;
                    _2778 = frontier_phi_67_pred_1;
                    _2780 = frontier_phi_67_pred_2;
                    _2774 = frontier_phi_67_pred_3;
                    _2772 = frontier_phi_67_pred_4;
                    _2770 = frontier_phi_67_pred_5;
                    uint _2915 = _2914 + 1u;
                    if (_2915 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2908 = _2770;
                        _2909 = _2772;
                        _2910 = _2774;
                        _2911 = _2776;
                        _2912 = _2778;
                        _2913 = _2780;
                        _2914 = _2915;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2778;
                frontier_phi_55_56_ladder_1 = _2780;
                frontier_phi_55_56_ladder_2 = _2776;
                frontier_phi_55_56_ladder_3 = _2774;
                frontier_phi_55_56_ladder_4 = _2772;
                frontier_phi_55_56_ladder_5 = _2770;
            }
            else
            {
                frontier_phi_55_56_ladder = _2633;
                frontier_phi_55_56_ladder_1 = _2635;
                frontier_phi_55_56_ladder_2 = _2631;
                frontier_phi_55_56_ladder_3 = _2629;
                frontier_phi_55_56_ladder_4 = _2627;
                frontier_phi_55_56_ladder_5 = _2625;
            }
            _2769 = frontier_phi_55_56_ladder_5;
            _2771 = frontier_phi_55_56_ladder_4;
            _2773 = frontier_phi_55_56_ladder_3;
            _2775 = frontier_phi_55_56_ladder_2;
            _2777 = frontier_phi_55_56_ladder;
            _2779 = frontier_phi_55_56_ladder_1;
        }
        float _2784 = isnan(1.0) ? _667 : (isnan(_667) ? 1.0 : min(_667, 1.0));
        _2462 = (_2784 * _2775) + _1914;
        _2464 = (_2784 * _2777) + _1916;
        _2466 = (_2784 * _2779) + _1918;
        _2468 = ((_2769 * 0.039999999105930328369140625) * _2784) + _2247;
        _2470 = ((_2771 * 0.039999999105930328369140625) * _2784) + _2249;
        _2472 = ((_2773 * 0.039999999105930328369140625) * _2784) + _2251;
    }
    else
    {
        _2462 = _1914;
        _2464 = _1916;
        _2466 = _1918;
        _2468 = _2247;
        _2470 = _2249;
        _2472 = _2251;
    }
    float _2492 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2493 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2494 = cbSceneParam._m0[86u].x * ((_601 / cbSceneParam._m0[86u].x) + ((_690 * cbMtdParam._m0[11u].y) * dot(vec3(_513, _514, _515), vec3(_203, _204, _205))));
    float _2495 = isnan(_2492) ? _2494 : (isnan(_2494) ? _2492 : min(_2494, _2492));
    float _2496 = isnan(_2493) ? _602 : (isnan(_602) ? _2493 : min(_602, _2493));
    vec4 _2498 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2495, _2496), 0.0);
    float _2500 = _2498.x;
    bool _2520 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2500)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2500))) > _535;
    vec4 _2524 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2520 ? _2495 : _601, _2520 ? _2496 : _602));
    float _4423 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4434 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4445 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _2548 = 0.959999978542327880859375 - (exp2(log2(1.0 - _682) * 5.0) * 0.959999978542327880859375);
    float _2550 = (_2524.x * _2548) * cbSceneParam._m0[72u].w;
    float _2552 = (_2524.y * _2548) * cbSceneParam._m0[72u].w;
    float _2554 = (_2524.z * _2548) * cbSceneParam._m0[72u].w;
    float _2575 = _601 / cbSceneParam._m0[86u].x;
    float _2576 = _602 / cbSceneParam._m0[86u].y;
    vec4 _2590 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2575, _2576, (log2((isnan(cbSceneParam._m0[77u].w) ? _535 : (isnan(_535) ? cbSceneParam._m0[77u].w : min(_535, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2592 = _2590.x;
    float _2593 = _2590.y;
    float _2594 = _2590.z;
    float _2595 = _2590.w;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    if (_535 > cbSceneParam._m0[78u].w)
    {
        float _2650 = isnan(_535) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _535 : min(cbSceneParam._m0[80u].w, _535));
        float _2651 = _2650 / _535;
        float _2662 = _2651 * _586;
        float _2663 = _587 * _2651;
        float _2664 = (-0.0) - _2663;
        float _2665 = _2651 * _588;
        float _2667 = (cbSceneParam._m0[77u].w * _2664) / _2650;
        float _2668 = _2667 + cbSceneParam._m0[79u].w;
        float _2669 = cbSceneParam._m0[79u].w - _2663;
        float _2675 = sqrt(((_2662 * _2662) + (_2663 * _2663)) + (_2665 * _2665));
        float _2678 = (1.0 - (cbSceneParam._m0[77u].w / _2650)) * _2675;
        float _2683 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2685 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2870;
        if (abs((_2664 - _2667) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2870 = ((((_2668 > 0.0) ? exp2(_2683 * _2668) : (2.0 - exp2(_2685 * _2668))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2678;
        }
        else
        {
            float _2830 = 1.0 / cbSceneParam._m0[80u].x;
            float _2831 = isnan(_2669) ? _2668 : (isnan(_2668) ? _2669 : max(_2668, _2669));
            float _2832 = isnan(_2669) ? _2668 : (isnan(_2668) ? _2669 : min(_2668, _2669));
            float _2841 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : min(_2831, 0.0));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            _2870 = ((abs(_2675 / _2664) * cbSceneParam._m0[80u].y) * ((((_2841 - _2842) * 2.0) - ((exp2(_2683 * (isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0)))) - exp2(_2683 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))))) * _2830)) - ((exp2(_2685 * _2841) - exp2(_2685 * _2842)) * _2830))) + (_2678 * cbSceneParam._m0[80u].z);
        }
        vec4 _2872 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2575, _2576, 1.0), 0.0);
        float _2881 = exp2((_2870 * (-1.44269502162933349609375)) * (1.0 - _2872.w));
        float _2882 = log2(_2881);
        float _2898 = log2(_2595);
        _2687 = (exp2(_2898 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].x)) * _2872.x) / cbSceneParam._m0[78u].x)) + _2592;
        _2689 = (exp2(_2898 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].y)) * _2872.y) / cbSceneParam._m0[78u].y)) + _2593;
        _2691 = (exp2(_2898 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].z)) * _2872.z) / cbSceneParam._m0[78u].z)) + _2594;
        _2693 = _2881 * _2595;
    }
    else
    {
        _2687 = _2592;
        _2689 = _2593;
        _2691 = _2594;
        _2693 = _2595;
    }
    bool _2705 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2706 = log2(_2693);
    float _2713 = exp2(_2706 * cbSceneParam._m0[78u].x) * ((_2550 + (((((_1688 * _1736.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1480) * _1752)) + _2468) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2462 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _667))) - _2550) * 0.5));
    float _2714 = exp2(_2706 * cbSceneParam._m0[78u].y) * ((_2552 + (((((_1688 * _1736.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1480) * _1752)) + _2470) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2464 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _667))) - _2552) * 0.5));
    float _2715 = exp2(_2706 * cbSceneParam._m0[78u].z) * ((_2554 + (((((_1688 * _1736.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1480) * _1752)) + _2472) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2466 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _667))) - _2554) * 0.5));
    vec4 _2723 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_601, _602));
    float _2725 = _2723.x;
    float _2746 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2725)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2725))) - _535) * cbMtdParam._m0[12u].z;
    float _4496 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
    float _2748 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * cbInstanceData._m0[_642 + 6u].w;
    float _2757 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2757 * (_2705 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2687)));
    SV_Target.y = _2757 * (_2705 ? _2714 : (_2714 + (cbSceneParam._m0[72u].w * _2689)));
    SV_Target.z = _2757 * (_2705 ? _2715 : (_2715 + (cbSceneParam._m0[72u].w * _2691)));
    SV_Target.w = _2748;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2748;
}


