#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_test_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_test_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_test_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_test_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_test_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1092;
float _3892;
float _3893;
float _3894;
float _3895;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x;
    vec4 _268 = texture(sampler2D(M_Water_test_snp_0_Texture2D_2, SS_WrapLinear), vec2((((_246 * cbMtdParam._m0[14u].z) + TEXCOORD) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[14u].w * _246) + TEXCOORD_1) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _274 = exp2(log2(_268.x) * cbMtdParam._m0[12u].y);
    float _288 = (cbMtdParam._m0[15u].z * _246) + TEXCOORD;
    float _289 = (cbMtdParam._m0[15u].w * _246) + TEXCOORD_1;
    vec4 _301 = texture(sampler2D(M_Water_test_snp_0_Texture2D_3, SS_WrapLinear), vec2((_288 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_289 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _307 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[13u].x * cbMtdParam._m0[11u].w);
    float _314 = ((_301.y * 0.5) + (-0.25)) * cbMtdParam._m0[12u].w;
    float _316 = (-0.0) - (cbMtdParam._m0[12u].w * ((_301.x * 0.5) + (-0.25)));
    float _318 = fract(_307);
    float _320 = fract(_307 + 0.5);
    float _332 = abs((_318 * 2.0) + (-1.0));
    vec4 _349 = texture(sampler2D(M_Water_test_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_318 * _316) + _288) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_314 * _318) + _289) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _351 = _349.x;
    float _352 = _349.y;
    float _353 = _349.z;
    vec4 _354 = texture(sampler2D(M_Water_test_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_320 * _316) + _288) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_314 * _320) + _289) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _377 = (((cbMtdParam._m0[10u].x * TEXCOORD_3.x) * _274) * (((_354.x - _351) * _332) + _351)) + cbMtdParam._m0[9u].x;
    float _378 = (((cbMtdParam._m0[10u].y * TEXCOORD_3.x) * _274) * (((_354.y - _352) * _332) + _352)) + cbMtdParam._m0[9u].y;
    float _379 = (((cbMtdParam._m0[10u].z * TEXCOORD_3.x) * _274) * (((_354.z - _353) * _332) + _353)) + cbMtdParam._m0[9u].z;
    vec4 _400 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[14u].x * _246) + TEXCOORD) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[14u].y * _246) + TEXCOORD_1) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _425 = texture(sampler2D(M_Water_test_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[13u].z * _246) + TEXCOORD) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[13u].w * _246) + TEXCOORD_1) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _431 = (_425.x * 2.0) + (-1.0);
    float _432 = (_425.y * 2.0) + (-1.0);
    float _433 = dot(vec2(_431, _432), vec2(_431, _432));
    float _3904 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _439 = sqrt(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))));
    float _448 = (cbMtdParam._m0[15u].x * _246) + TEXCOORD;
    float _449 = (cbMtdParam._m0[15u].y * _246) + TEXCOORD_1;
    vec4 _454 = texture(sampler2D(M_Water_test_snp_0_Texture2D_3, SS_WrapLinear), vec2((_448 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_449 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _462 = ((_454.y * 0.5) + (-0.25)) * cbMtdParam._m0[12u].w;
    float _464 = (-0.0) - (cbMtdParam._m0[12u].w * ((_454.x * 0.5) + (-0.25)));
    vec4 _481 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((_318 * _464) + _448) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_462 * _318) + _449) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _483 = _481.x;
    float _484 = _481.y;
    vec4 _485 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((_320 * _464) + _448) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_462 * _320) + _449) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _501 = (_431 + (((_400.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z)) + ((((((_485.x - _483) * _332) + _483) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y);
    float _502 = (_432 + (((_400.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z)) + ((((((_485.y - _484) * _332) + _484) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y);
    float _508 = fma(_439, _215 * NORMAL.x, fma(_502, _222 * TANGENT.x, _501 * _209));
    float _511 = fma(_439, _215 * NORMAL.y, fma(_502, _222 * TANGENT.y, _501 * _210));
    float _514 = fma(_439, _215 * NORMAL.z, fma(_502, _222 * TANGENT.z, _501 * _211));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    float _519 = _518 * _508;
    float _520 = _518 * _511;
    float _521 = _518 * _514;
    float _3915 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _522 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3937 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3948 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _541 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _592 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _582);
    float _593 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _582);
    float _594 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _582);
    float _598 = inversesqrt(dot(vec3(_592, _593, _594), vec3(_592, _593, _594)));
    float _599 = _592 * _598;
    float _600 = _593 * _598;
    float _601 = _594 * _598;
    vec4 _606 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _608 = _606.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _772 = sqrt(((_592 * _592) + (_593 * _593)) + (_594 * _594));
        float _778 = (cbMatDynParam._m0[5u].x * _772) + cbMatDynParam._m0[5u].y;
        float _3959 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _783 = (cbMatDynParam._m0[5u].z * _772) + cbMatDynParam._m0[5u].w;
        float _3970 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) - _779)) + _779) < ((_608 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _620 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _621 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _641 = fma(_521, cbSceneParam._m0[5u].z, fma(_520, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _519));
    float _644 = fma(_521, cbSceneParam._m0[6u].z, fma(_520, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _519));
    float _647 = fma(_521, cbSceneParam._m0[7u].z, fma(_520, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _519));
    uint _660 = uint(roundEven(NORMAL.w)) * 13u;
    uint _661 = _660 + 9u;
    uint _662 = _661 + uint(cbMatDynParam._m0[0u].w);
    float _668 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_662].x;
    float _669 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * cbInstanceData._m0[_662].y;
    float _670 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * cbInstanceData._m0[_662].z;
    float _3981 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _672 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _673 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    vec4 _682 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _620, cbSceneParam._m0[86u].y * _621));
    float _685 = _682.x * TEXCOORD_3.w;
    float _686 = dot(vec3(_519, _520, _521), vec3(_599, _600, _601));
    float _689 = _686 * 2.0;
    float _693 = (_689 * _519) - _599;
    float _694 = (_689 * _520) - _600;
    float _695 = (_689 * _521) - _601;
    float _699 = abs(dot(vec3(_599, _600, _601), vec3(_519, _520, _521)));
    float _4014 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _700 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _708 = 10.0 / (_541 + 10.0);
    float _709 = sqrt(_522);
    float _721 = exp2((_709 * 5.0) * log2(1.0 - (_700 * 0.999000012874603271484375))) / (4.0 - (_709 * 3.0));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1091;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _817 = fma(_761, cbModelParam._m0[26u].z, fma(_757, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _753));
        float _821 = fma(_761, cbModelParam._m0[27u].z, fma(_757, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _753));
        float _825 = fma(_761, cbModelParam._m0[28u].z, fma(_757, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _753));
        float _849 = _753 + _519;
        float _850 = _757 + _520;
        float _851 = _761 + _521;
        float _861 = fma(_851, cbModelParam._m0[26u].z, fma(_850, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _849)) - _817;
        float _862 = fma(_851, cbModelParam._m0[27u].z, fma(_850, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _849)) - _821;
        float _863 = fma(_851, cbModelParam._m0[28u].z, fma(_850, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _849)) - _825;
        float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
        float _880 = ((_867 * _861) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_817 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_867 * _862) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_821 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_867 * _863) / cbModelParam._m0[34u].z) + ((((((_825 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        float _919 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_885.x + (-0.5));
        float _921 = _919 * (_885.y + (-0.5));
        float _922 = _919 * (_885.z + (-0.5));
        float _929 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_892.x + (-0.5));
        float _931 = _929 * (_892.y + (-0.5));
        float _932 = _929 * (_892.z + (-0.5));
        float _939 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_899.x + (-0.5));
        float _941 = _939 * (_899.y + (-0.5));
        float _942 = _939 * (_899.z + (-0.5));
        float _949 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_906.x + (-0.5));
        float _951 = _949 * (_906.y + (-0.5));
        float _952 = _949 * (_906.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _973 = (dot(vec3(_519, _520, _521), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _983 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _4062 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_985 + 1.0))) + _990) * _953;
        float _1000 = _921 * 0.5;
        float _1001 = _931 * 0.5;
        float _1002 = _941 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_519, _520, _521), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _4095 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1027 + 1.0))) + _1032) * _954;
        float _1042 = _922 * 0.5;
        float _1043 = _932 * 0.5;
        float _1044 = _942 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_519, _520, _521), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _4128 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1069 + 1.0))) + _1074) * _955;
        _1091 = _922;
        _1093 = _921;
        _1094 = _920;
        _1095 = _932;
        _1096 = _931;
        _1097 = _930;
        _1098 = _942;
        _1099 = _941;
        _1100 = _940;
        _1101 = _955;
        _1102 = _954;
        _1103 = _953;
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _1092;
        _1093 = _1092;
        _1094 = _1092;
        _1095 = _1092;
        _1096 = _1092;
        _1097 = _1092;
        _1098 = _1092;
        _1099 = _1092;
        _1100 = _1092;
        _1101 = _1092;
        _1102 = _1092;
        _1103 = _1092;
        _1104 = 0.0;
        _1105 = 0.0;
        _1106 = 0.0;
    }
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1135 = fma(_761, cbModelParam._m0[30u].z, fma(_757, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _753));
        float _1139 = fma(_761, cbModelParam._m0[31u].z, fma(_757, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _753));
        float _1143 = fma(_761, cbModelParam._m0[32u].z, fma(_757, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _753));
        float _1166 = _753 + _519;
        float _1167 = _757 + _520;
        float _1168 = _761 + _521;
        float _1178 = fma(_1168, cbModelParam._m0[30u].z, fma(_1167, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166)) - _1135;
        float _1179 = fma(_1168, cbModelParam._m0[31u].z, fma(_1167, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166)) - _1139;
        float _1180 = fma(_1168, cbModelParam._m0[32u].z, fma(_1167, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166)) - _1143;
        float _1184 = inversesqrt(dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180)));
        float _1197 = ((_1184 * _1178) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1135 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1184 * _1179) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1139 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1184 * _1180) / cbModelParam._m0[35u].z) + ((((((_1143 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        float _1234 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1201.x + (-0.5));
        float _1236 = _1234 * (_1201.y + (-0.5));
        float _1237 = _1234 * (_1201.z + (-0.5));
        float _1244 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1208.x + (-0.5));
        float _1246 = _1244 * (_1208.y + (-0.5));
        float _1247 = _1244 * (_1208.z + (-0.5));
        float _1254 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1215.x + (-0.5));
        float _1256 = _1254 * (_1215.y + (-0.5));
        float _1257 = _1254 * (_1215.z + (-0.5));
        float _1264 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1222.x + (-0.5));
        float _1266 = _1264 * (_1222.y + (-0.5));
        float _1267 = _1264 * (_1222.z + (-0.5));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = _1235 * 0.5;
        float _1272 = _1245 * 0.5;
        float _1273 = _1255 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_519, _520, _521), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4191 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1298 + 1.0))) + _1303) * _1268;
        float _1313 = _1236 * 0.5;
        float _1314 = _1246 * 0.5;
        float _1315 = _1256 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_519, _520, _521), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4224 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1340 + 1.0))) + _1345) * _1269;
        float _1355 = _1237 * 0.5;
        float _1356 = _1247 * 0.5;
        float _1357 = _1257 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_519, _520, _521), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4257 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1382 + 1.0))) + _1387) * _1270;
        _1404 = _1237;
        _1405 = _1236;
        _1406 = _1235;
        _1407 = _1247;
        _1408 = _1246;
        _1409 = _1245;
        _1410 = _1257;
        _1411 = _1256;
        _1412 = _1255;
        _1413 = _1270;
        _1414 = _1269;
        _1415 = _1268;
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
    }
    else
    {
        _1404 = _1092;
        _1405 = _1092;
        _1406 = _1092;
        _1407 = _1092;
        _1408 = _1092;
        _1409 = _1092;
        _1410 = _1092;
        _1411 = _1092;
        _1412 = _1092;
        _1413 = _1092;
        _1414 = _1092;
        _1415 = _1092;
        _1416 = 0.0;
        _1417 = 0.0;
        _1418 = 0.0;
    }
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1104)) + _1104;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1105)) + _1105;
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1106)) + _1106;
    float _1451 = fma(_1430, cbSceneParam._m0[89u].z, fma(_1429, cbSceneParam._m0[89u].y, _1428 * cbSceneParam._m0[89u].x));
    float _1454 = fma(_1430, cbSceneParam._m0[90u].z, fma(_1429, cbSceneParam._m0[90u].y, _1428 * cbSceneParam._m0[90u].x));
    float _1457 = fma(_1430, cbSceneParam._m0[91u].z, fma(_1429, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1428));
    float _1472 = _693 * 0.5;
    float _1473 = _694 * 0.5;
    float _1474 = _695 * 0.5;
    float _1475 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1478 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1481 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1515;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1488 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1091, _1095, _1098, _1101));
        float _1492 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1496 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1503 = dot(vec4(cbModelParam._m0[39u]), vec4(_1472, _1473, _1474, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1526;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1517 = dot(vec4(cbModelParam._m0[40u]), vec4(_1472, _1473, _1474, 1.0));
        _1526 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1526 = 1.0;
    }
    float _1530 = (_1526 * cbModelParam._m0[1u].x) + (_1515 * (1.0 - cbModelParam._m0[1u].x));
    float _1540 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _522);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1540 : min(cbModelParam._m0[25u].z, _1540));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1588 = fma(_761, cbModelParam._m0[13u].z, fma(_757, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _753)) + cbModelParam._m0[13u].w;
        float _1592 = fma(_761, cbModelParam._m0[14u].z, fma(_757, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _753)) + cbModelParam._m0[14u].w;
        float _1596 = fma(_761, cbModelParam._m0[15u].z, fma(_757, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _753)) + cbModelParam._m0[15u].w;
        float _1599 = fma(_695, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693));
        float _1602 = fma(_695, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693));
        float _1605 = fma(_695, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693));
        float _1633;
        if (_1599 > 0.0)
        {
            _1633 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1633 = frontier_phi_17_15_ladder;
        }
        float _1857;
        if (_1602 > 0.0)
        {
            _1857 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1857 = frontier_phi_26_22_ladder;
        }
        float _2152;
        if (_1605 > 0.0)
        {
            _2152 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2152 = frontier_phi_38_33_ladder;
        }
        float _2154 = isnan(_1857) ? _1633 : (isnan(_1633) ? _1857 : min(_1633, _1857));
        float _2155 = isnan(_2152) ? _2154 : (isnan(_2154) ? _2152 : min(_2154, _2152));
        float _2159 = (_2155 * _1599) + _1588;
        float _2160 = (_2155 * _1602) + _1592;
        float _2161 = (_2155 * _1605) + _1596;
        float _2162 = _2155 * 9.9999997473787516355514526367188e-05;
        float _2164 = (-1.0) - _2162;
        float _2166 = _2162 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2161 > _2166) || ((_2161 < _2164) || ((_2160 > _2166) || ((_2160 < _2164) || ((_2159 < _2164) || (_2159 > _2166))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2306 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2161, cbModelParam._m0[9u].z, fma(_2160, cbModelParam._m0[9u].y, _2159 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2161, cbModelParam._m0[10u].z, fma(_2160, cbModelParam._m0[10u].y, _2159 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2161, cbModelParam._m0[11u].z, fma(_2160, cbModelParam._m0[11u].y, _2159 * cbModelParam._m0[11u].x))), _1541);
            frontier_phi_16_38_ladder = _2306.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2306.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2306.x * cbModelParam._m0[1u].y;
        }
        _1621 = frontier_phi_16_38_ladder_2;
        _1623 = frontier_phi_16_38_ladder_1;
        _1625 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_693, _694, _695), _1541);
        _1621 = _1609.x * cbModelParam._m0[1u].y;
        _1623 = _1609.y * cbModelParam._m0[1u].y;
        _1625 = _1609.z * cbModelParam._m0[1u].y;
    }
    float _1629 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _522);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1629 : min(cbModelParam._m0[25u].w, _1629));
    float _1722;
    float _1724;
    float _1726;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1686 = fma(_761, cbModelParam._m0[21u].z, fma(_757, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _753)) + cbModelParam._m0[21u].w;
        float _1690 = fma(_761, cbModelParam._m0[22u].z, fma(_757, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _753)) + cbModelParam._m0[22u].w;
        float _1694 = fma(_761, cbModelParam._m0[23u].z, fma(_757, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _753)) + cbModelParam._m0[23u].w;
        float _1697 = fma(_695, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693));
        float _1700 = fma(_695, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693));
        float _1703 = fma(_695, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693));
        float _1862;
        if (_1697 > 0.0)
        {
            _1862 = abs((1.0 - _1686) / _1697);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1686 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1862 = frontier_phi_28_24_ladder;
        }
        float _2179;
        if (_1700 > 0.0)
        {
            _2179 = abs((1.0 - _1690) / _1700);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1690 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2179 = frontier_phi_40_35_ladder;
        }
        float _2506;
        if (_1703 > 0.0)
        {
            _2506 = abs((1.0 - _1694) / _1703);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1694 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2506 = frontier_phi_50_47_ladder;
        }
        float _2508 = isnan(_2179) ? _1862 : (isnan(_1862) ? _2179 : min(_1862, _2179));
        float _2509 = isnan(_2506) ? _2508 : (isnan(_2508) ? _2506 : min(_2508, _2506));
        float _2513 = (_2509 * _1697) + _1686;
        float _2514 = (_2509 * _1700) + _1690;
        float _2515 = (_2509 * _1703) + _1694;
        float _2516 = _2509 * 9.9999997473787516355514526367188e-05;
        float _2517 = (-1.0) - _2516;
        float _2519 = _2516 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2515 > _2519) || ((_2515 < _2517) || ((_2514 > _2519) || ((_2514 < _2517) || ((_2513 < _2517) || (_2513 > _2519))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2633 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2515, cbModelParam._m0[17u].z, fma(_2514, cbModelParam._m0[17u].y, _2513 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2515, cbModelParam._m0[18u].z, fma(_2514, cbModelParam._m0[18u].y, _2513 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2515, cbModelParam._m0[19u].z, fma(_2514, cbModelParam._m0[19u].y, _2513 * cbModelParam._m0[19u].x))), _1630);
            frontier_phi_25_50_ladder = _2633.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2633.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2633.x * cbModelParam._m0[1u].z;
        }
        _1722 = frontier_phi_25_50_ladder_2;
        _1724 = frontier_phi_25_50_ladder_1;
        _1726 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1706 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_693, _694, _695), _1630);
        _1722 = _1706.x * cbModelParam._m0[1u].z;
        _1724 = _1706.y * cbModelParam._m0[1u].z;
        _1726 = _1706.z * cbModelParam._m0[1u].z;
    }
    float _1738 = ((((1.0 - _721) * ((_709 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_721 * _709)) * _685;
    float _1739 = _1738 * ((cbModelParam._m0[1u].w * (_1722 - _1621)) + _1621);
    float _1740 = _1738 * ((cbModelParam._m0[1u].w * (_1724 - _1623)) + _1623);
    float _1741 = _1738 * ((cbModelParam._m0[1u].w * (_1726 - _1625)) + _1625);
    float _1744 = fma(_1741, cbSceneParam._m0[89u].z, fma(_1740, cbSceneParam._m0[89u].y, _1739 * cbSceneParam._m0[89u].x));
    float _1747 = fma(_1741, cbSceneParam._m0[90u].z, fma(_1740, cbSceneParam._m0[90u].y, _1739 * cbSceneParam._m0[90u].x));
    float _1750 = fma(_1741, cbSceneParam._m0[91u].z, fma(_1740, cbSceneParam._m0[91u].y, _1739 * cbSceneParam._m0[91u].x));
    float _1761 = _620 / cbSceneParam._m0[86u].x;
    float _1769 = (cbSceneParam._m0[88u].y * (1.0 - _522)) + cbSceneParam._m0[88u].z;
    float _4383 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1771 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * 5.0;
    float _1776 = (_708 * cbMtdParam._m0[12u].x) * dot(vec3(_519, _520, _521), vec3(1.0, 0.0, 0.0));
    vec4 _1786 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1776 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1776 + _1761) * cbSceneParam._m0[86u].x, _621), _1771).w) + _1761) * cbSceneParam._m0[86u].x, _621), _1771);
    float _1802 = 1.0 - _1786.w;
    float _1836 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1840 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1844 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1848 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1849 = _1836 / _1848;
    float _1850 = _1840 / _1848;
    float _1851 = _1844 / _1848;
    float _1998;
    float _1999;
    float _2000;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1878 = ((uint(_1851 > cbSceneParam._m0[59u].y) + uint(_1851 > cbSceneParam._m0[59u].x)) + uint(_1851 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1879 = _1878 + 43u;
        uint _1887 = _1878 + 44u;
        uint _1895 = _1878 + 45u;
        uint _1903 = _1878 + 46u;
        float _1914 = fma(_1848, cbSceneParam._m0[_1879].w, fma(_1844, cbSceneParam._m0[_1879].z, fma(_1840, cbSceneParam._m0[_1879].y, _1836 * cbSceneParam._m0[_1879].x)));
        float _1918 = fma(_1848, cbSceneParam._m0[_1887].w, fma(_1844, cbSceneParam._m0[_1887].z, fma(_1840, cbSceneParam._m0[_1887].y, _1836 * cbSceneParam._m0[_1887].x)));
        float _1926 = fma(_1848, cbSceneParam._m0[_1903].w, fma(_1844, cbSceneParam._m0[_1903].z, fma(_1840, cbSceneParam._m0[_1903].y, _1836 * cbSceneParam._m0[_1903].x)));
        float _1931 = cbSceneParam._m0[33u].z * _1926;
        float _1933 = cbSceneParam._m0[33u].w * _1926;
        float _1936 = fma(_1848, cbSceneParam._m0[_1895].w, fma(_1844, cbSceneParam._m0[_1895].z, fma(_1840, cbSceneParam._m0[_1895].y, _1836 * cbSceneParam._m0[_1895].x))) / _1926;
        float _1984 = (cbSceneParam._m0[33u].x - sqrt(((_1850 * _1850) + (_1849 * _1849)) + (_1851 * _1851))) * cbSceneParam._m0[33u].y;
        float _4394 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1991 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1931 + _1914) / _1926, (_1933 + _1918) / _1926), _1936), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1933 + _1914) / _1926, (_1918 - _1931) / _1926), _1936), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1914 - _1931) / _1926, (_1918 - _1933) / _1926), _1936), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1914 - _1933) / _1926, (_1931 + _1918) / _1926), _1936), 0.0)).x), vec4(0.25)));
        _1998 = 1.0 - (_1991 * cbSceneParam._m0[34u].x);
        _1999 = 1.0 - (_1991 * cbSceneParam._m0[34u].y);
        _2000 = 1.0 - (_1991 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1998 = 1.0;
        _1999 = 1.0;
        _2000 = 1.0;
    }
    float _2064;
    float _2066;
    float _2068;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2052 = fma(_1848, cbSceneParam._m0[63u].w, fma(_1844, cbSceneParam._m0[63u].z, fma(_1840, cbSceneParam._m0[63u].y, _1836 * cbSceneParam._m0[63u].x)));
        float _2053 = fma(_1848, cbSceneParam._m0[60u].w, fma(_1844, cbSceneParam._m0[60u].z, fma(_1840, cbSceneParam._m0[60u].y, _1836 * cbSceneParam._m0[60u].x))) / _2052;
        float _2054 = fma(_1848, cbSceneParam._m0[61u].w, fma(_1844, cbSceneParam._m0[61u].z, fma(_1840, cbSceneParam._m0[61u].y, _1836 * cbSceneParam._m0[61u].x))) / _2052;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2053 >= cbSceneParam._m0[64u].x) && (_2054 >= cbSceneParam._m0[64u].y)) && (_2053 <= cbSceneParam._m0[64u].z)) && (_2054 <= cbSceneParam._m0[64u].w))
        {
            float _2192 = fma(_1848, cbSceneParam._m0[62u].w, fma(_1844, cbSceneParam._m0[62u].z, fma(_1840, cbSceneParam._m0[62u].y, _1836 * cbSceneParam._m0[62u].x))) / _2052;
            float _2196 = isnan(cbSceneParam._m0[41u].w) ? _2192 : (isnan(_2192) ? cbSceneParam._m0[41u].w : max(_2192, cbSceneParam._m0[41u].w));
            float _2239 = (cbSceneParam._m0[33u].x - sqrt(((_1850 * _1850) + (_1849 * _1849)) + (_1851 * _1851))) * cbSceneParam._m0[33u].y;
            float _4410 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
            float _2246 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2053, cbSceneParam._m0[33u].w + _2054), _2196), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2053, _2054 - cbSceneParam._m0[33u].z), _2196), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2053 - cbSceneParam._m0[33u].z, _2054 - cbSceneParam._m0[33u].w), _2196), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2053 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2054), _2196), 0.0)).x), vec4(0.25)));
            float _2250 = 1.0 - (_2246 * cbSceneParam._m0[34u].x);
            float _2251 = 1.0 - (_2246 * cbSceneParam._m0[34u].y);
            float _2252 = 1.0 - (_2246 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2252) ? _2000 : (isnan(_2000) ? _2252 : min(_2000, _2252));
            frontier_phi_37_36_ladder_1 = isnan(_2251) ? _1999 : (isnan(_1999) ? _2251 : min(_1999, _2251));
            frontier_phi_37_36_ladder_2 = isnan(_2250) ? _1998 : (isnan(_1998) ? _2250 : min(_1998, _2250));
        }
        else
        {
            frontier_phi_37_36_ladder = _2000;
            frontier_phi_37_36_ladder_1 = _1999;
            frontier_phi_37_36_ladder_2 = _1998;
        }
        _2064 = frontier_phi_37_36_ladder_2;
        _2066 = frontier_phi_37_36_ladder_1;
        _2068 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2064 = _1998;
        _2066 = _1999;
        _2068 = _2000;
    }
    uvec4 _2073 = floatBitsToUint(cbInstanceData._m0[_660 + 5u]);
    uint _2075 = _2073.x * 14u;
    uint _2076 = _2075 + 13u;
    float _2083 = _685 + (-1.0);
    float _2088 = (cbLight._m0[_2076].x * _2083) + 1.0;
    float _2089 = (cbLight._m0[_2076].y * _2083) + 1.0;
    float _2090 = (cbLight._m0[_2076].z * _2083) + 1.0;
    float _2091 = (cbLight._m0[_2076].w * _2083) + 1.0;
    uint _2092 = _2075 + 5u;
    float _2098 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
    uint _2102 = _2075 + 4u;
    float _2111 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
    uint _2115 = _2075 | 1u;
    float _2126 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_519, _520, _521));
    float _2129 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_519, _520, _521));
    float _4446 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _4457 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2134 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * 0.3183098733425140380859375;
    float _2136 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * 0.3183098733425140380859375;
    float _2143 = ((cbLight._m0[_2092].x * _2098) * _2136) + (((cbLight._m0[_2102].x * _2064) * _2111) * _2134);
    float _2144 = ((_2098 * cbLight._m0[_2092].y) * _2136) + (((cbLight._m0[_2102].y * _2066) * _2111) * _2134);
    float _2145 = ((_2098 * cbLight._m0[_2092].z) * _2136) + (((cbLight._m0[_2102].z * _2068) * _2111) * _2134);
    uvec4 _2149 = floatBitsToUint(cbLight._m0[_2075 + 12u]);
    bool _2151 = _2149.x == 0u;
    float _2253;
    float _2255;
    float _2257;
    if (_2151)
    {
        _2253 = _2143;
        _2255 = _2144;
        _2257 = _2145;
    }
    else
    {
        uint _2261 = _2075 + 6u;
        float _2277 = (dot(vec3(cbLight._m0[_2075 + 2u].xyz), vec3(_519, _520, _521)) * 0.5) + 0.5;
        float _2278 = _2277 * _2277;
        float _4468 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2279 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2280 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2253 = (((cbLight._m0[_2261].x * 0.3183098733425140380859375) * _2279) * _2280) + _2143;
        _2255 = (((cbLight._m0[_2261].y * 0.3183098733425140380859375) * _2279) * _2280) + _2144;
        _2257 = (((cbLight._m0[_2261].z * 0.3183098733425140380859375) * _2279) * _2280) + _2145;
    }
    bool _2260 = _2149.y == 0u;
    float _2315;
    float _2317;
    float _2319;
    if (_2260)
    {
        _2315 = _2253;
        _2317 = _2255;
        _2319 = _2257;
    }
    else
    {
        uint _2477 = _2075 + 7u;
        float _2493 = (dot(vec3(cbLight._m0[_2075 + 3u].xyz), vec3(_519, _520, _521)) * 0.5) + 0.5;
        float _2494 = _2493 * _2493;
        float _4484 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2495 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2496 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2315 = (((cbLight._m0[_2477].x * 0.3183098733425140380859375) * _2495) * _2496) + _2253;
        _2317 = (((cbLight._m0[_2477].y * 0.3183098733425140380859375) * _2495) * _2496) + _2255;
        _2319 = (((cbLight._m0[_2477].z * 0.3183098733425140380859375) * _2495) * _2496) + _2257;
    }
    uint _2322 = _2075 + 8u;
    float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _522) * 0.949999988079071044921875);
    float _2336 = _2335 * _2335;
    float _2337 = cbLight._m0[_2075].x + _599;
    float _2338 = cbLight._m0[_2075].y + _600;
    float _2339 = cbLight._m0[_2075].z + _601;
    float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
    float _2344 = _2343 * _2337;
    float _2345 = _2343 * _2338;
    float _2346 = _2343 * _2339;
    float _2347 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2075].xyz));
    float _4500 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _4511 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _2351 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _2352 = dot(vec3(_519, _520, _521), vec3(_2344, _2345, _2346));
    float _4522 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2356 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2344, _2345, _2346));
    float _4533 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2360 = _2336 * _2336;
    float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
    float _2375 = (exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2376 = 1.0 - _2336;
    float _2387 = (0.5 / (((_2351 * ((_2350 * _2376) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2351 * _2376) + _2336) * _2350))) * _2350;
    float _4544 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2389 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
    uint _2403 = _2075 + 9u;
    float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _522) * 0.949999988079071044921875);
    float _2415 = _2414 * _2414;
    float _2416 = cbLight._m0[_2115].x + _599;
    float _2417 = cbLight._m0[_2115].y + _600;
    float _2418 = cbLight._m0[_2115].z + _601;
    float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
    float _2423 = _2422 * _2416;
    float _2424 = _2422 * _2417;
    float _2425 = _2422 * _2418;
    float _2426 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2115].xyz));
    float _4555 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2430 = dot(vec3(_519, _520, _521), vec3(_2423, _2424, _2425));
    float _4566 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2434 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2423, _2424, _2425));
    float _4577 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2438 = _2415 * _2415;
    float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
    float _2451 = (exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2452 = 1.0 - _2415;
    float _2462 = (0.5 / (((_2351 * ((_2429 * _2452) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2351 * _2452) + _2415) * _2429))) * _2429;
    float _4588 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2464 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
    float _2474 = (((_2451 * cbLight._m0[_2403].x) * _2464) * _2098) + ((((cbLight._m0[_2322].x * _2064) * _2375) * _2389) * _2111);
    float _2475 = (((_2451 * cbLight._m0[_2403].y) * _2464) * _2098) + ((((cbLight._m0[_2322].y * _2066) * _2375) * _2389) * _2111);
    float _2476 = (((_2451 * cbLight._m0[_2403].z) * _2464) * _2098) + ((((cbLight._m0[_2322].z * _2068) * _2375) * _2389) * _2111);
    float _2532;
    float _2534;
    float _2536;
    if (_2151)
    {
        _2532 = _2474;
        _2534 = _2475;
        _2536 = _2476;
    }
    else
    {
        uint _2538 = _2075 + 2u;
        uint _2542 = _2075 + 10u;
        float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2538].w)) * _522) * 0.949999988079071044921875);
        float _2557 = _2556 * _2556;
        float _2558 = cbLight._m0[_2538].x + _599;
        float _2559 = cbLight._m0[_2538].y + _600;
        float _2560 = cbLight._m0[_2538].z + _601;
        float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
        float _2565 = _2564 * _2558;
        float _2566 = _2564 * _2559;
        float _2567 = _2564 * _2560;
        float _2568 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2538].xyz));
        float _4599 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2572 = dot(vec3(_519, _520, _521), vec3(_2565, _2566, _2567));
        float _4610 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2576 = dot(vec3(cbLight._m0[_2538].xyz), vec3(_2565, _2566, _2567));
        float _4621 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2580 = _2557 * _2557;
        float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
        float _2593 = (exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2594 = 1.0 - _2557;
        float _2604 = (0.5 / (((_2351 * ((_2571 * _2594) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2351 * _2594) + _2557) * _2571))) * _2571;
        float _4632 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2606 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
        float _2607 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2532 = (((_2593 * cbLight._m0[_2542].x) * _2606) * _2607) + _2474;
        _2534 = (((_2593 * cbLight._m0[_2542].y) * _2606) * _2607) + _2475;
        _2536 = (((_2593 * cbLight._m0[_2542].z) * _2606) * _2607) + _2476;
    }
    float _2638;
    float _2640;
    float _2642;
    if (_2260)
    {
        _2638 = _2532;
        _2640 = _2534;
        _2642 = _2536;
    }
    else
    {
        uint _2649 = _2075 + 3u;
        uint _2653 = _2075 + 11u;
        float _2667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2649].w)) * _522) * 0.949999988079071044921875);
        float _2668 = _2667 * _2667;
        float _2669 = cbLight._m0[_2649].x + _599;
        float _2670 = cbLight._m0[_2649].y + _600;
        float _2671 = cbLight._m0[_2649].z + _601;
        float _2675 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
        float _2676 = _2675 * _2669;
        float _2677 = _2675 * _2670;
        float _2678 = _2675 * _2671;
        float _2679 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2649].xyz));
        float _4648 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2682 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2683 = dot(vec3(_519, _520, _521), vec3(_2676, _2677, _2678));
        float _4659 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2686 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2687 = dot(vec3(cbLight._m0[_2649].xyz), vec3(_2676, _2677, _2678));
        float _4670 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2691 = _2668 * _2668;
        float _2695 = ((_2686 * _2686) * (_2691 + (-1.0))) + 1.0;
        float _2704 = (exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2705 = 1.0 - _2668;
        float _2715 = (0.5 / (((_2351 * ((_2682 * _2705) + _2668)) + 9.9999999392252902907785028219223e-09) + (((_2351 * _2705) + _2668) * _2682))) * _2682;
        float _4681 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2717 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2691 / ((_2695 * _2695) * 3.141590118408203125));
        float _2718 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2638 = (((_2704 * cbLight._m0[_2653].x) * _2717) * _2718) + _2532;
        _2640 = (((_2704 * cbLight._m0[_2653].y) * _2717) * _2718) + _2534;
        _2642 = (((_2704 * cbLight._m0[_2653].z) * _2717) * _2718) + _2536;
    }
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    if (_2073.y == 0u)
    {
        uvec4 _2739 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2740 = _2739.x;
        uint _2751 = uint((float(_2739.y) * floor(float(uint(cbSceneParam._m0[85u].y * _621) / _2740))) + floor(float(uint(cbSceneParam._m0[85u].x * _620) / _2740)));
        float _2761 = (log2(_1851 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2762 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        uint _2765 = uint(isnan(14.0) ? _2762 : (isnan(_2762) ? 14.0 : min(_2762, 14.0)));
        uvec4 _2770 = texelFetch(g_lightClusterGridBuffer, int(((_2765 << 2u) + (_2751 << 6u)) >> 2u));
        uint _2771 = _2770.x;
        uint _2772 = _2739.z;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        if (((((1u << ((_2772 >> 4u) & 15u)) + 4294967295u) & _2771) == 0u) || ((_2772 & 240u) == 0u))
        {
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
        }
        else
        {
            float _2921;
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            uint _3110 = 0u;
            uint _3119;
            bool _3120;
            for (;;)
            {
                _3119 = texelFetch(g_lightClassification, int((((_2765 << 5u) + (_2751 << 9u)) + (_3110 << 2u)) >> 2u)).x;
                _3120 = _3119 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3120)
                {
                    frontier_phi_71_pred = _3109;
                    frontier_phi_71_pred_1 = _3108;
                    frontier_phi_71_pred_2 = _3107;
                    frontier_phi_71_pred_3 = _3106;
                    frontier_phi_71_pred_4 = _3105;
                    frontier_phi_71_pred_5 = _3104;
                }
                else
                {
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    uint _3255;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3119;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    for (;;)
                    {
                        uint _3259 = uint(findLSB(_3255)) + (_3110 << 5u);
                        uint _3256 = (_3255 + 4294967295u) & _3255;
                        uint _3261 = _3259 * 48u;
                        vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 3u)).x));
                        uint _3281 = (_3259 * 48u) + 4u;
                        vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3281)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 3u)).x));
                        uint _3300 = (_3259 * 48u) + 8u;
                        vec3 _3311 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x));
                        float _3315 = _3275.x - _1849;
                        float _3316 = _3275.y - _1850;
                        float _3317 = _3275.z - _1851;
                        float _3318 = dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317));
                        float _3321 = inversesqrt(_3318);
                        float _3322 = _3321 * _3315;
                        float _3323 = _3321 * _3316;
                        float _3324 = _3321 * _3317;
                        float _3325 = dot(vec3(_641, _644, _647), vec3(_3322, _3323, _3324));
                        float _3330 = 1.0 - (_3318 * _3275.w);
                        float _4707 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3331 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                        float _3332 = sqrt(_3318) * _3294.w;
                        float _3335 = 1.39999997615814208984375 / (_3332 + 1.39999997615814208984375);
                        float _3336 = _3335 * _3335;
                        float _3339 = ((1.0 - _3336) * _3325) + _3336;
                        float _3342 = _3332 * _3332;
                        float _3346 = ((isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0))) * _3331) / ((_3342 * 0.699999988079071044921875) + 1.0);
                        float _3350 = (-0.0) - _1849;
                        float _3351 = (-0.0) - _1850;
                        float _3352 = (-0.0) - _1851;
                        float _3356 = inversesqrt(dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352)));
                        float _3357 = _3356 * _3350;
                        float _3358 = _3356 * _3351;
                        float _3359 = _3356 * _3352;
                        float _3366 = exp2(log2(1.0 / ((_3342 * 3.5) + 5.0)) * 0.25);
                        float _3367 = 1.0 - _709;
                        float _3374 = sqrt(1.0 - ((1.0 - (_3367 * _3367)) * (1.0 - (_3366 * _3366))));
                        float _3375 = _3374 * _3374;
                        float _3376 = _3375 * _3375;
                        float _3377 = _3357 + _3322;
                        float _3378 = _3358 + _3323;
                        float _3379 = _3359 + _3324;
                        float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                        float _3387 = dot(vec3(_641, _644, _647), vec3(_3357, _3358, _3359));
                        float _4723 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3390 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                        float _3391 = dot(vec3(_641, _644, _647), vec3(_3383 * _3377, _3383 * _3378, _3383 * _3379));
                        float _4734 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                        float _3398 = ((_3394 * _3394) * (_3376 + (-1.0))) + 1.0;
                        float _3399 = _3335 * _3375;
                        float _3400 = _3399 * _3399;
                        float _3403 = ((1.0 - _3400) * _3325) + _3400;
                        float _4745 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3404 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3405 = 1.0 - _3375;
                        float _3415 = (0.5 / (((_3404 * ((_3390 * _3405) + _3375)) + 9.9999999392252902907785028219223e-09) + (((_3404 * _3405) + _3375) * _3390))) * _3404;
                        float _4756 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3426 = (((_3376 * 3.1415927410125732421875) * (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) / ((_3398 * _3398) * ((_3342 * 2.1991131305694580078125) + 3.141590118408203125))) * _3331;
                        _3179 = (_3346 * _3294.x) + _3252;
                        _3180 = (_3346 * _3294.y) + _3253;
                        _3181 = (_3346 * _3294.z) + _3254;
                        _3176 = (_3426 * _3311.x) + _3249;
                        _3177 = (_3426 * _3311.y) + _3250;
                        _3178 = (_3426 * _3311.z) + _3251;
                        if (_3256 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3256;
                        }
                    }
                    frontier_phi_71_pred = _3181;
                    frontier_phi_71_pred_1 = _3180;
                    frontier_phi_71_pred_2 = _3179;
                    frontier_phi_71_pred_3 = _3178;
                    frontier_phi_71_pred_4 = _3177;
                    frontier_phi_71_pred_5 = _3176;
                }
                _2931 = frontier_phi_71_pred;
                _2929 = frontier_phi_71_pred_1;
                _2927 = frontier_phi_71_pred_2;
                _2925 = frontier_phi_71_pred_3;
                _2923 = frontier_phi_71_pred_4;
                _2921 = frontier_phi_71_pred_5;
                uint _3111 = _3110 + 1u;
                if (_3111 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3104 = _2921;
                    _3105 = _2923;
                    _3106 = _2925;
                    _3107 = _2927;
                    _3108 = _2929;
                    _3109 = _2931;
                    _3110 = _3111;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
        }
        uvec4 _2934 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2935 = _2934.z;
        uint _2937 = (_2935 >> 8u) & 15u;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        if (((4294967295u << _2937) & _2771) == 0u)
        {
            _3072 = _2920;
            _3074 = _2922;
            _3076 = _2924;
            _3078 = _2926;
            _3080 = _2928;
            _3082 = _2930;
        }
        else
        {
            float _3097 = inversesqrt(dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851)));
            float _3098 = _3097 * _1849;
            float _3099 = _3097 * _1850;
            float _3100 = _3097 * _1851;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2937 < ((_2935 >> 12u) & 15u))
            {
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3083;
                float _3232 = _2920;
                float _3233 = _2922;
                float _3234 = _2924;
                float _3235 = _2926;
                float _3236 = _2928;
                float _3237 = _2930;
                uint _3238 = _2937;
                uint _3247;
                bool _3248;
                for (;;)
                {
                    _3247 = texelFetch(g_lightClassification, int((((_2765 << 5u) + (_2751 << 9u)) + (_3238 << 2u)) >> 2u)).x;
                    _3248 = _3247 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3248)
                    {
                        frontier_phi_82_pred = _3237;
                        frontier_phi_82_pred_1 = _3236;
                        frontier_phi_82_pred_2 = _3235;
                        frontier_phi_82_pred_3 = _3234;
                        frontier_phi_82_pred_4 = _3233;
                        frontier_phi_82_pred_5 = _3232;
                    }
                    else
                    {
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3453 = _3232;
                        float _3454 = _3233;
                        float _3455 = _3234;
                        float _3456 = _3235;
                        float _3457 = _3236;
                        float _3458 = _3237;
                        uint _3459 = _3247;
                        uint _3460;
                        vec4 _3485;
                        float _3486;
                        vec4 _3501;
                        vec3 _3513;
                        vec4 _3529;
                        vec4 _3545;
                        float _3592;
                        bool _3593;
                        for (;;)
                        {
                            uint _3470 = ((_3238 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3459));
                            _3460 = (_3459 + 4294967295u) & _3459;
                            uint _3472 = _3470 * 40u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            _3486 = _3485.w;
                            uint _3488 = (_3470 * 40u) + 4u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3503 = (_3470 * 40u) + 8u;
                            _3513 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x));
                            uint _3516 = (_3470 * 40u) + 16u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3532 = (_3470 * 40u) + 20u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3548 = (_3470 * 40u) + 24u;
                            vec4 _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3567 = (_3470 * 40u) + 28u;
                            vec4 _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            _3592 = fma(_1851, _3580.z, fma(_1850, _3580.y, _3580.x * _1849)) + _3580.w;
                            _3593 = !((fma(_1851, _3561.z, fma(_1850, _3561.y, _3561.x * _1849)) + _3561.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3593)
                            {
                                float _3620 = _3485.x - _1849;
                                float _3621 = _3485.y - _1850;
                                float _3622 = _3485.z - _1851;
                                float _3623 = dot(vec3(_3620, _3621, _3622), vec3(_3620, _3621, _3622));
                                float _3626 = inversesqrt(_3623);
                                float _3627 = _3626 * _3620;
                                float _3628 = _3626 * _3621;
                                float _3629 = _3626 * _3622;
                                float _3633 = 1.0 - (_3623 / (_3486 * _3486));
                                float _4767 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                                float _3638 = sqrt(_3623) * _3501.w;
                                float _3640 = 1.39999997615814208984375 / (_3638 + 1.39999997615814208984375);
                                float _3641 = _3640 * _3640;
                                float _3644 = ((1.0 - _3641) * dot(vec3(_3627, _3628, _3629), vec3(_641, _644, _647))) + _3641;
                                float _3647 = _3638 * _3638;
                                float _3651 = (fma(_1851, _3529.z, fma(_1850, _3529.y, _3529.x * _1849)) + _3529.w) / _3592;
                                float _3652 = (fma(_1851, _3545.z, fma(_1850, _3545.y, _3545.x * _1849)) + _3545.w) / _3592;
                                float _3656 = 1.0 - dot(vec2(_3651, _3652), vec2(_3651, _3652));
                                float _4783 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3657 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                                float _3658 = _3657 * (((isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0))) * _3634) / ((_3647 * 0.699999988079071044921875) + 1.0));
                                float _3670 = exp2(log2(1.0 / ((_3647 * 3.5) + 5.0)) * 0.25);
                                float _3671 = 1.0 - _709;
                                float _3678 = sqrt(1.0 - ((1.0 - (_3671 * _3671)) * (1.0 - (_3670 * _3670))));
                                float _3679 = _3678 * _3678;
                                float _3680 = _3679 * _3679;
                                float _3681 = _3627 - _3098;
                                float _3682 = _3628 - _3099;
                                float _3683 = _3629 - _3100;
                                float _3687 = inversesqrt(dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683)));
                                float _3691 = dot(vec3(_641, _644, _647), vec3((-0.0) - _3098, (-0.0) - _3099, (-0.0) - _3100));
                                float _4794 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3694 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                                float _3695 = dot(vec3(_641, _644, _647), vec3(_3687 * _3681, _3687 * _3682, _3687 * _3683));
                                float _4805 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3698 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3702 = ((_3698 * _3698) * (_3680 + (-1.0))) + 1.0;
                                float _3703 = _3640 * _3679;
                                float _3704 = _3703 * _3703;
                                float _3710 = ((1.0 - _3704) * dot(vec3(_641, _644, _647), vec3(_3627, _3628, _3629))) + _3704;
                                float _4816 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3712 = 1.0 - _3679;
                                float _3722 = (0.5 / (((_3711 * ((_3694 * _3712) + _3679)) + 9.9999999392252902907785028219223e-09) + (((_3711 * _3712) + _3679) * _3694))) * _3711;
                                float _4827 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3732 = (_3657 * _3634) * (((_3680 * 3.1415927410125732421875) * (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0)))) / ((_3702 * _3702) * ((_3647 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3658 * _3501.z;
                                frontier_phi_88_pred_1 = _3658 * _3501.y;
                                frontier_phi_88_pred_2 = _3658 * _3501.x;
                                frontier_phi_88_pred_3 = _3732 * _3513.z;
                                frontier_phi_88_pred_4 = _3732 * _3513.y;
                                frontier_phi_88_pred_5 = _3732 * _3513.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3741 = frontier_phi_88_pred;
                            _3740 = frontier_phi_88_pred_1;
                            _3739 = frontier_phi_88_pred_2;
                            _3738 = frontier_phi_88_pred_3;
                            _3737 = frontier_phi_88_pred_4;
                            _3736 = frontier_phi_88_pred_5;
                            _3443 = _3739 + _3456;
                            _3444 = _3740 + _3457;
                            _3445 = _3741 + _3458;
                            _3440 = _3736 + _3453;
                            _3441 = _3737 + _3454;
                            _3442 = _3738 + _3455;
                            if (_3460 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3460;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3445;
                        frontier_phi_82_pred_1 = _3444;
                        frontier_phi_82_pred_2 = _3443;
                        frontier_phi_82_pred_3 = _3442;
                        frontier_phi_82_pred_4 = _3441;
                        frontier_phi_82_pred_5 = _3440;
                    }
                    _3083 = frontier_phi_82_pred;
                    _3081 = frontier_phi_82_pred_1;
                    _3079 = frontier_phi_82_pred_2;
                    _3077 = frontier_phi_82_pred_3;
                    _3075 = frontier_phi_82_pred_4;
                    _3073 = frontier_phi_82_pred_5;
                    uint _3239 = _3238 + 1u;
                    if (_3239 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3232 = _3073;
                        _3233 = _3075;
                        _3234 = _3077;
                        _3235 = _3079;
                        _3236 = _3081;
                        _3237 = _3083;
                        _3238 = _3239;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3079;
                frontier_phi_63_64_ladder_1 = _3083;
                frontier_phi_63_64_ladder_2 = _3081;
                frontier_phi_63_64_ladder_3 = _3077;
                frontier_phi_63_64_ladder_4 = _3075;
                frontier_phi_63_64_ladder_5 = _3073;
            }
            else
            {
                frontier_phi_63_64_ladder = _2926;
                frontier_phi_63_64_ladder_1 = _2930;
                frontier_phi_63_64_ladder_2 = _2928;
                frontier_phi_63_64_ladder_3 = _2924;
                frontier_phi_63_64_ladder_4 = _2922;
                frontier_phi_63_64_ladder_5 = _2920;
            }
            _3072 = frontier_phi_63_64_ladder_5;
            _3074 = frontier_phi_63_64_ladder_4;
            _3076 = frontier_phi_63_64_ladder_3;
            _3078 = frontier_phi_63_64_ladder;
            _3080 = frontier_phi_63_64_ladder_2;
            _3082 = frontier_phi_63_64_ladder_1;
        }
        float _3087 = isnan(1.0) ? _685 : (isnan(_685) ? 1.0 : min(_685, 1.0));
        _2784 = (_3087 * _3078) + _2315;
        _2786 = (_3087 * _3080) + _2317;
        _2788 = (_3087 * _3082) + _2319;
        _2790 = ((_3072 * 0.039999999105930328369140625) * _3087) + _2638;
        _2792 = ((_3074 * 0.039999999105930328369140625) * _3087) + _2640;
        _2794 = ((_3076 * 0.039999999105930328369140625) * _3087) + _2642;
    }
    else
    {
        _2784 = _2315;
        _2786 = _2317;
        _2788 = _2319;
        _2790 = _2638;
        _2792 = _2640;
        _2794 = _2642;
    }
    float _2808 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2809 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2810 = cbSceneParam._m0[86u].x * (_1761 + ((_708 * cbMtdParam._m0[11u].y) * dot(vec3(_519, _520, _521), vec3(_209, _210, _211))));
    float _2811 = isnan(_2808) ? _2810 : (isnan(_2810) ? _2808 : min(_2810, _2808));
    float _2812 = isnan(_2809) ? _621 : (isnan(_621) ? _2809 : min(_621, _2809));
    vec4 _2814 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2811, _2812), 0.0);
    float _2816 = _2814.x;
    bool _2836 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2816)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2816))) > _541;
    vec4 _2840 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2836 ? _2811 : _620, _2836 ? _2812 : _621));
    float _4853 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4864 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4875 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _2864 = 0.959999978542327880859375 - (exp2(log2(1.0 - _700) * 5.0) * 0.959999978542327880859375);
    float _2866 = (_2840.x * _2864) * cbSceneParam._m0[72u].w;
    float _2868 = (_2840.y * _2864) * cbSceneParam._m0[72u].w;
    float _2870 = (_2840.z * _2864) * cbSceneParam._m0[72u].w;
    float _2878 = (_2866 + (((((_1738 * _1786.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1530) * _1802)) + _2790) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2784 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _685))) - _2866) * 0.5);
    float _2880 = (_2868 + (((((_1738 * _1786.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1530) * _1802)) + _2792) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2786 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _685))) - _2868) * 0.5);
    float _2882 = (_2870 + (((((_1738 * _1786.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1530) * _1802)) + _2794) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2788 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _685))) - _2870) * 0.5);
    uint _2883 = _660 + 6u;
    float _2891 = _620 / cbSceneParam._m0[86u].x;
    float _2892 = _621 / cbSceneParam._m0[86u].y;
    vec4 _2906 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2891, _2892, (log2((isnan(cbSceneParam._m0[77u].w) ? _541 : (isnan(_541) ? cbSceneParam._m0[77u].w : min(_541, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2908 = _2906.x;
    float _2909 = _2906.y;
    float _2910 = _2906.z;
    float _2911 = _2906.w;
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    if (_541 > cbSceneParam._m0[78u].w)
    {
        float _2945 = isnan(_541) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _541 : min(cbSceneParam._m0[80u].w, _541));
        float _2946 = _2945 / _541;
        float _2957 = _2946 * _592;
        float _2958 = _593 * _2946;
        float _2959 = (-0.0) - _2958;
        float _2960 = _2946 * _594;
        float _2962 = (cbSceneParam._m0[77u].w * _2959) / _2945;
        float _2963 = _2962 + cbSceneParam._m0[79u].w;
        float _2964 = cbSceneParam._m0[79u].w - _2958;
        float _2970 = sqrt(((_2957 * _2957) + (_2958 * _2958)) + (_2960 * _2960));
        float _2973 = (1.0 - (cbSceneParam._m0[77u].w / _2945)) * _2970;
        float _2978 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2980 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3189;
        if (abs((_2959 - _2962) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3189 = ((((_2963 > 0.0) ? exp2(_2978 * _2963) : (2.0 - exp2(_2980 * _2963))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2973;
        }
        else
        {
            float _3133 = 1.0 / cbSceneParam._m0[80u].x;
            float _3134 = isnan(_2964) ? _2963 : (isnan(_2963) ? _2964 : max(_2963, _2964));
            float _3135 = isnan(_2964) ? _2963 : (isnan(_2963) ? _2964 : min(_2963, _2964));
            float _3144 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : min(_3134, 0.0));
            float _3145 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : min(_3135, 0.0));
            _3189 = ((abs(_2970 / _2959) * cbSceneParam._m0[80u].y) * ((((_3144 - _3145) * 2.0) - ((exp2(_2978 * (isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0)))) - exp2(_2978 * (isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0))))) * _3133)) - ((exp2(_2980 * _3144) - exp2(_2980 * _3145)) * _3133))) + (_2973 * cbSceneParam._m0[80u].z);
        }
        vec4 _3191 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2891, _2892, 1.0), 0.0);
        float _3200 = exp2((_3189 * (-1.44269502162933349609375)) * (1.0 - _3191.w));
        float _3201 = log2(_3200);
        float _3217 = log2(_2911);
        _2982 = (exp2(_3217 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].x)) * _3191.x) / cbSceneParam._m0[78u].x)) + _2908;
        _2984 = (exp2(_3217 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].y)) * _3191.y) / cbSceneParam._m0[78u].y)) + _2909;
        _2986 = (exp2(_3217 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].z)) * _3191.z) / cbSceneParam._m0[78u].z)) + _2910;
        _2988 = _3200 * _2911;
    }
    else
    {
        _2982 = _2908;
        _2984 = _2909;
        _2986 = _2910;
        _2988 = _2911;
    }
    bool _3227;
    float _3043;
    vec4 _3046;
    float _3048;
    vec4 _3050;
    float _3058;
    float _3059;
    float _3060;
    float _3061;
    bool _3071;
    for (;;)
    {
        bool _3000 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3001 = log2(_2988);
        float _3008 = exp2(_3001 * cbSceneParam._m0[78u].x) * _2878;
        float _3009 = exp2(_3001 * cbSceneParam._m0[78u].y) * _2880;
        float _3010 = exp2(_3001 * cbSceneParam._m0[78u].z) * _2882;
        vec4 _3018 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_620, _621));
        float _3020 = _3018.x;
        float _3041 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3020)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3020))) - _541) * cbMtdParam._m0[12u].z;
        float _4926 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
        _3043 = (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * cbInstanceData._m0[_2883].w;
        float _3044 = _608 + (-0.5);
        _3046 = cbMtdParam._m0[1u];
        _3048 = _3046.y * _3044;
        _3050 = cbMatDynParam._m0[0u];
        float _3057 = (roundEven(_3050.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3058 = _3057 * (_3000 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2982)));
        _3059 = _3057 * (_3000 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2984)));
        _3060 = _3057 * (_3000 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2986)));
        _3061 = _3044 * 0.999000012874603271484375;
        _3071 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3071)
        {
            if ((cbInstanceData._m0[_660 + 7u].x + _3061) < 0.5)
            {
                _3227 = true;
                break;
            }
        }
        uint _3168 = _661 + uint(_3050.w);
        if ((cbInstanceData._m0[_3168].w < 1.0) && ((cbInstanceData._m0[_3168].w + _3061) < 0.5))
        {
            _3227 = true;
            break;
        }
        if ((_3048 + 1.0) < _3046.x)
        {
            _3227 = true;
            break;
        }
        _3227 = false;
        break;
    }
    float _3431;
    if (_3227)
    {
        discard_state = true;
        _3431 = 0.0;
    }
    else
    {
        _3431 = _3043;
    }
    SV_Target.x = _3058;
    SV_Target.y = _3059;
    SV_Target.z = _3060;
    SV_Target.w = _3431;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3043;
    discard_exit();
}


