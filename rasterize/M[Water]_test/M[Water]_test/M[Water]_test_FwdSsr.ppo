#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _78 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _79 = _78 * NORMAL.x;
    float _80 = _78 * NORMAL.y;
    float _81 = _78 * NORMAL.z;
    float _644 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _88 = isnan(1.0) ? _644 : (isnan(_644) ? 1.0 : min(_644, 1.0));
    float _102 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _103 = POSITION_1.x / POSITION_1.w;
    float _104 = POSITION_1.y / POSITION_1.w;
    float _108 = (_103 * 0.5) + 0.5;
    float _109 = 0.5 - (_104 * 0.5);
    float _115;
    float _117;
    float _119;
    float _121;
    if (_88 < cbPerScene._m0[22u].z)
    {
        _115 = 0.0;
        _117 = 0.0;
        _119 = 0.0;
        _121 = 0.0;
    }
    else
    {
        float _127 = 1.0 / _102;
        float frontier_phi_1_2_ladder;
        float frontier_phi_1_2_ladder_1;
        float frontier_phi_1_2_ladder_2;
        float frontier_phi_1_2_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _127))
        {
            float _153 = fma(_81, cbPerScene._m0[8u].z, fma(_80, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _79));
            float _156 = fma(_81, cbPerScene._m0[9u].z, fma(_80, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _79));
            float _159 = fma(_81, cbPerScene._m0[10u].z, fma(_80, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _79));
            float _166 = (_102 * _103) * cbPerScene._m0[28u].x;
            float _168 = (_102 * _104) * cbPerScene._m0[28u].y;
            float _172 = inversesqrt(dot(vec3(_166, _168, _102), vec3(_166, _168, _102)));
            float _173 = _166 * _172;
            float _174 = _168 * _172;
            float _175 = _172 * _102;
            float _179 = dot(vec3(_173, _174, _175), vec3(_153, _156, _159)) * 2.0;
            float _184 = _173 - (_179 * _153);
            float _185 = _174 - (_179 * _156);
            float _186 = _175 - (_179 * _159);
            float _190 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
            float _193 = _186 * _190;
            float frontier_phi_1_2_ladder_3_ladder;
            float frontier_phi_1_2_ladder_3_ladder_1;
            float frontier_phi_1_2_ladder_3_ladder_2;
            float frontier_phi_1_2_ladder_3_ladder_3;
            if (_193 < cbPerScene._m0[16u].x)
            {
                frontier_phi_1_2_ladder_3_ladder = 0.0;
                frontier_phi_1_2_ladder_3_ladder_1 = 0.0;
                frontier_phi_1_2_ladder_3_ladder_2 = 0.0;
                frontier_phi_1_2_ladder_3_ladder_3 = 0.0;
            }
            else
            {
                float _206 = abs(dot(vec3((-0.0) - _173, (-0.0) - _174, (-0.0) - _175), vec3(_153, _156, _159)));
                float _655 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
                float _217 = (((_88 * _88) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _655 : (isnan(_655) ? 1.0 : min(_655, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _226 = (cbPerScene._m0[29u].x * (1.0 - _88)) + cbPerScene._m0[29u].y;
                float _666 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
                float _235 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _666 : (isnan(_666) ? 1.0 : min(_666, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_1;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_2;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_3;
                if (_217 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_1_2_ladder_3_ladder_4_ladder = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_1 = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_2 = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_3 = 0.0;
                }
                else
                {
                    float _238 = _193 - cbPerScene._m0[16u].x;
                    float _677 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
                    float _239 = isnan(1.0) ? _677 : (isnan(_677) ? 1.0 : min(_677, 1.0));
                    float _240 = _239 * _239;
                    float _242 = (_217 - cbPerScene._m0[22u].x) * 10.0;
                    float _688 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
                    float _244 = isnan(1.0) ? _688 : (isnan(_688) ? 1.0 : min(_688, 1.0));
                    float _245 = isnan(_244) ? _240 : (isnan(_240) ? _244 : min(_240, _244));
                    float _249 = (cbPerScene._m0[21u].x - _102) * cbPerScene._m0[21u].z;
                    float _704 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
                    float _250 = isnan(1.0) ? _704 : (isnan(_704) ? 1.0 : min(_704, 1.0));
                    float _251 = isnan(_250) ? _245 : (isnan(_245) ? _250 : min(_245, _250));
                    float _252 = (_184 * _190) + _166;
                    float _253 = (_185 * _190) + _168;
                    float _254 = _193 + _102;
                    float _287 = fma(_254, cbPerScene._m0[7u].z, fma(_253, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _252)) + cbPerScene._m0[7u].w;
                    float _291 = ((fma(_254, cbPerScene._m0[4u].z, fma(_253, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _252)) + cbPerScene._m0[4u].w) / _287) - _108;
                    float _292 = ((fma(_254, cbPerScene._m0[5u].z, fma(_253, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _252)) + cbPerScene._m0[5u].w) / _287) - _109;
                    float _299 = cbPerScene._m0[18u].x * _291;
                    float _300 = cbPerScene._m0[18u].y * _292;
                    float _305 = sqrt((_299 * _299) + (_300 * _300)) + 9.9999997473787516355514526367188e-06;
                    float _310 = (_291 / _305) * _235;
                    float _311 = (_292 / _305) * _235;
                    float _312 = (((1.0 / _254) - _127) / _305) * _235;
                    float _341 = abs(float(_310 > 0.0) - _108) / (abs(_310) + 1.0000000116860974230803549289703e-07);
                    float _342 = abs(float(_311 > 0.0) - _109) / (abs(_311) + 1.0000000116860974230803549289703e-07);
                    float _344 = (abs(((_312 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _127) / (abs(_312) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _345 = isnan(_342) ? _341 : (isnan(_341) ? _342 : min(_341, _342));
                    float _346 = isnan(_344) ? _345 : (isnan(_345) ? _344 : min(_345, _344));
                    uint _349 = uint(int(isnan(cbPerScene._m0[23u].y) ? _346 : (isnan(_346) ? cbPerScene._m0[23u].y : min(_346, cbPerScene._m0[23u].y))));
                    float _122;
                    float _354;
                    float _356;
                    float _358;
                    if (int(_349) > int(0u))
                    {
                        float _351 = _312 + _127;
                        float _352 = _311 + _109;
                        float _353 = _310 + _108;
                        float _355;
                        float _357;
                        float _359;
                        float _360;
                        uint _371;
                        float _373;
                        float _375;
                        float _377;
                        float _379;
                        float _381;
                        float _383;
                        float _385;
                        uint _387;
                        float _389;
                        float _391;
                        float _393;
                        float _366 = 0.0;
                        float _367 = 0.0;
                        float _368 = 0.0;
                        float _369 = 0.0;
                        uint _370 = 0u;
                        float _372 = _127;
                        float _374 = _353;
                        float _376 = _352;
                        float _378 = _351;
                        float _380 = _108;
                        float _382 = _109;
                        float _384 = _127;
                        uint _386 = 1u;
                        float _388 = 0.0;
                        float _390 = 0.0;
                        float _392 = 0.0;
                        float _406;
                        float _413;
                        float _414;
                        float _415;
                        float _416;
                        float _417;
                        float _418;
                        uint _419;
                        float _420;
                        bool _427;
                        for (;;)
                        {
                            _406 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _374, cbSceneParam._m0[86u].y * _376), 0.0).x;
                            bool _412 = _370 == (_349 + 4294967295u);
                            _413 = _412 ? _388 : _374;
                            _414 = _412 ? _390 : _376;
                            _415 = _412 ? _392 : _378;
                            _416 = _412 ? _388 : _380;
                            _417 = _412 ? _390 : _382;
                            _418 = _412 ? _392 : _384;
                            _419 = _412 ? 1u : _386;
                            _420 = _412 ? (-1.0) : (_378 - _406);
                            _427 = (_419 != 0u) && ((_420 <= 0.0) && ((_412 ? (-1.0) : (_406 - (_372 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_14_pred;
                            float frontier_phi_14_pred_1;
                            float frontier_phi_14_pred_2;
                            uint frontier_phi_14_pred_3;
                            float frontier_phi_14_pred_4;
                            float frontier_phi_14_pred_5;
                            float frontier_phi_14_pred_6;
                            float frontier_phi_14_pred_7;
                            float frontier_phi_14_pred_8;
                            float frontier_phi_14_pred_9;
                            float frontier_phi_14_pred_10;
                            float frontier_phi_14_pred_11;
                            float frontier_phi_14_pred_12;
                            float frontier_phi_14_pred_13;
                            float frontier_phi_14_pred_14;
                            uint frontier_phi_14_pred_15;
                            if (_427)
                            {
                                uint _437 = uint(int(log2(_235) + 0.999000012874603271484375));
                                float _448;
                                float _450;
                                float _452;
                                float _454;
                                float _456;
                                float _458;
                                float _460;
                                if (int(_437) > int(0u))
                                {
                                    uint _559;
                                    float _561;
                                    float _562;
                                    float _563;
                                    float _564;
                                    float _565;
                                    float _566;
                                    float _567;
                                    _559 = 0u;
                                    _561 = _413;
                                    _562 = _414;
                                    _563 = _415;
                                    _564 = _416;
                                    _565 = _417;
                                    _566 = _418;
                                    _567 = _406;
                                    float _449;
                                    float _451;
                                    float _453;
                                    float _455;
                                    float _457;
                                    float _459;
                                    float _461;
                                    for (;;)
                                    {
                                        float _571 = (_564 + _561) * 0.5;
                                        float _572 = (_565 + _562) * 0.5;
                                        float _573 = (_566 + _563) * 0.5;
                                        vec4 _581 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _571, cbSceneParam._m0[86u].y * _572), 0.0);
                                        float _583 = _581.x;
                                        bool _585 = (_573 - _583) < 0.0;
                                        _449 = _585 ? _571 : _561;
                                        _451 = _585 ? _572 : _562;
                                        _453 = _585 ? _573 : _563;
                                        _455 = _585 ? _564 : _571;
                                        _457 = _585 ? _565 : _572;
                                        _459 = _585 ? _566 : _573;
                                        _461 = _585 ? _583 : _567;
                                        uint _560 = _559 + 1u;
                                        if (_560 == _437)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _559 = _560;
                                            _561 = _449;
                                            _562 = _451;
                                            _563 = _453;
                                            _564 = _455;
                                            _565 = _457;
                                            _566 = _459;
                                            _567 = _461;
                                        }
                                    }
                                    _448 = _449;
                                    _450 = _451;
                                    _452 = _453;
                                    _454 = _455;
                                    _456 = _457;
                                    _458 = _459;
                                    _460 = _461;
                                }
                                else
                                {
                                    _448 = _413;
                                    _450 = _414;
                                    _452 = _415;
                                    _454 = _416;
                                    _456 = _417;
                                    _458 = _418;
                                    _460 = _406;
                                }
                                float _470 = cbPerScene._m0[28u].x * ((_448 * 2.0) + (-1.0));
                                float _471 = cbPerScene._m0[28u].y * (1.0 - (_450 * 2.0));
                                float _504 = fma(_460, cbPerScene._m0[27u].w, fma(_471, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _470) + cbPerScene._m0[27u].z);
                                float _505 = fma(_460, cbPerScene._m0[24u].w, fma(_471, cbPerScene._m0[24u].y, _470 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _504;
                                float _506 = fma(_460, cbPerScene._m0[25u].w, fma(_471, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _470) + cbPerScene._m0[25u].z) / _504;
                                vec4 _515 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _505, cbSceneParam._m0[87u].w * _506), 0.0);
                                float _520 = isnan(_251) ? 1.0 : (isnan(1.0) ? _251 : min(1.0, _251));
                                float _521 = 0.5 - _505;
                                float _522 = 0.5 - _506;
                                float _523 = _521 * 2.0;
                                float _524 = _522 * 2.0;
                                float _525 = _523 * _523;
                                float _526 = _524 * _524;
                                float _740 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
                                float _751 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
                                float _535 = inversesqrt(dot(vec2(_310, _311), vec2(_310, _311)));
                                float _541 = inversesqrt(dot(vec2(_523, _524), vec2(_523, _524)));
                                float _547 = dot(vec2((_521 * (-2.0)) * _541, (_522 * (-2.0)) * _541), vec2(_535 * _310, _535 * _311));
                                float _762 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
                                float _554 = ((1.0 - (isnan(1.0) ? _751 : (isnan(_751) ? 1.0 : min(_751, 1.0)))) * (1.0 - (isnan(1.0) ? _740 : (isnan(_740) ? 1.0 : min(_740, 1.0))))) * (4.0 - ((isnan(1.0) ? _762 : (isnan(_762) ? 1.0 : min(_762, 1.0))) * 2.0));
                                float _773 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
                                float _555 = isnan(1.0) ? _773 : (isnan(_773) ? 1.0 : min(_773, 1.0));
                                float _556 = _555 * _555;
                                frontier_phi_14_pred = _392;
                                frontier_phi_14_pred_1 = _390;
                                frontier_phi_14_pred_2 = _388;
                                frontier_phi_14_pred_3 = _419;
                                frontier_phi_14_pred_4 = _458;
                                frontier_phi_14_pred_5 = _456;
                                frontier_phi_14_pred_6 = _454;
                                frontier_phi_14_pred_7 = _452;
                                frontier_phi_14_pred_8 = _450;
                                frontier_phi_14_pred_9 = _448;
                                frontier_phi_14_pred_10 = _372;
                                frontier_phi_14_pred_11 = isnan(_556) ? _520 : (isnan(_520) ? _556 : min(_520, _556));
                                frontier_phi_14_pred_12 = _515.z;
                                frontier_phi_14_pred_13 = _515.y;
                                frontier_phi_14_pred_14 = _515.x;
                                frontier_phi_14_pred_15 = _349;
                            }
                            else
                            {
                                bool _439 = _420 > 0.0;
                                frontier_phi_14_pred = _439 ? _415 : _392;
                                frontier_phi_14_pred_1 = _439 ? _414 : _390;
                                frontier_phi_14_pred_2 = _439 ? _413 : _388;
                                frontier_phi_14_pred_3 = uint(_439);
                                frontier_phi_14_pred_4 = _415;
                                frontier_phi_14_pred_5 = _414;
                                frontier_phi_14_pred_6 = _413;
                                frontier_phi_14_pred_7 = _415 + _312;
                                frontier_phi_14_pred_8 = _414 + _311;
                                frontier_phi_14_pred_9 = _413 + _310;
                                frontier_phi_14_pred_10 = _406;
                                frontier_phi_14_pred_11 = _369;
                                frontier_phi_14_pred_12 = _368;
                                frontier_phi_14_pred_13 = _367;
                                frontier_phi_14_pred_14 = _366;
                                frontier_phi_14_pred_15 = _370 + 1u;
                            }
                            _393 = frontier_phi_14_pred;
                            _391 = frontier_phi_14_pred_1;
                            _389 = frontier_phi_14_pred_2;
                            _387 = frontier_phi_14_pred_3;
                            _385 = frontier_phi_14_pred_4;
                            _383 = frontier_phi_14_pred_5;
                            _381 = frontier_phi_14_pred_6;
                            _379 = frontier_phi_14_pred_7;
                            _377 = frontier_phi_14_pred_8;
                            _375 = frontier_phi_14_pred_9;
                            _373 = frontier_phi_14_pred_10;
                            _360 = frontier_phi_14_pred_11;
                            _359 = frontier_phi_14_pred_12;
                            _357 = frontier_phi_14_pred_13;
                            _355 = frontier_phi_14_pred_14;
                            _371 = frontier_phi_14_pred_15;
                            if (int(_371) < int(_349))
                            {
                                _366 = _355;
                                _367 = _357;
                                _368 = _359;
                                _369 = _360;
                                _370 = _371;
                                _372 = _373;
                                _374 = _375;
                                _376 = _377;
                                _378 = _379;
                                _380 = _381;
                                _382 = _383;
                                _384 = _385;
                                _386 = _387;
                                _388 = _389;
                                _390 = _391;
                                _392 = _393;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _354 = _355;
                        _356 = _357;
                        _358 = _359;
                        _122 = _360;
                    }
                    else
                    {
                        _354 = 0.0;
                        _356 = 0.0;
                        _358 = 0.0;
                        _122 = 0.0;
                    }
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3;
                    if ((isnan(_354) || isnan(_356)) || isnan(_358))
                    {
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1 = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2 = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder = (_122 * _354) * cbPerScene._m0[28u].w;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1 = _122;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2 = (_122 * _358) * cbPerScene._m0[28u].w;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3 = (_122 * _356) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_1_2_ladder_3_ladder_4_ladder = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_1 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_2 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_3 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3;
                }
                frontier_phi_1_2_ladder_3_ladder = frontier_phi_1_2_ladder_3_ladder_4_ladder;
                frontier_phi_1_2_ladder_3_ladder_1 = frontier_phi_1_2_ladder_3_ladder_4_ladder_1;
                frontier_phi_1_2_ladder_3_ladder_2 = frontier_phi_1_2_ladder_3_ladder_4_ladder_2;
                frontier_phi_1_2_ladder_3_ladder_3 = frontier_phi_1_2_ladder_3_ladder_4_ladder_3;
            }
            frontier_phi_1_2_ladder = frontier_phi_1_2_ladder_3_ladder;
            frontier_phi_1_2_ladder_1 = frontier_phi_1_2_ladder_3_ladder_1;
            frontier_phi_1_2_ladder_2 = frontier_phi_1_2_ladder_3_ladder_2;
            frontier_phi_1_2_ladder_3 = frontier_phi_1_2_ladder_3_ladder_3;
        }
        else
        {
            frontier_phi_1_2_ladder = 0.0;
            frontier_phi_1_2_ladder_1 = 0.0;
            frontier_phi_1_2_ladder_2 = 0.0;
            frontier_phi_1_2_ladder_3 = 0.0;
        }
        _115 = frontier_phi_1_2_ladder;
        _117 = frontier_phi_1_2_ladder_3;
        _119 = frontier_phi_1_2_ladder_2;
        _121 = frontier_phi_1_2_ladder_1;
    }
    SV_Target.x = _115;
    SV_Target.y = _117;
    SV_Target.z = _119;
    SV_Target.w = _121;
}


