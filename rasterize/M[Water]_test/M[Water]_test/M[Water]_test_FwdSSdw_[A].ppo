#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_test_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_test_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_test_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_test_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_test_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1090;
float _3637;
float _3638;
float _3639;
float _3640;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x;
    vec4 _266 = texture(sampler2D(M_Water_test_snp_0_Texture2D_2, SS_WrapLinear), vec2((((_244 * cbMtdParam._m0[14u].z) + TEXCOORD) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[14u].w * _244) + TEXCOORD_1) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _272 = exp2(log2(_266.x) * cbMtdParam._m0[12u].y);
    float _286 = (cbMtdParam._m0[15u].z * _244) + TEXCOORD;
    float _287 = (cbMtdParam._m0[15u].w * _244) + TEXCOORD_1;
    vec4 _299 = texture(sampler2D(M_Water_test_snp_0_Texture2D_3, SS_WrapLinear), vec2((_286 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_287 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _305 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[13u].x * cbMtdParam._m0[11u].w);
    float _312 = ((_299.y * 0.5) + (-0.25)) * cbMtdParam._m0[12u].w;
    float _314 = (-0.0) - (cbMtdParam._m0[12u].w * ((_299.x * 0.5) + (-0.25)));
    float _316 = fract(_305);
    float _318 = fract(_305 + 0.5);
    float _330 = abs((_316 * 2.0) + (-1.0));
    vec4 _347 = texture(sampler2D(M_Water_test_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_316 * _314) + _286) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_312 * _316) + _287) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _349 = _347.x;
    float _350 = _347.y;
    float _351 = _347.z;
    vec4 _352 = texture(sampler2D(M_Water_test_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_318 * _314) + _286) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_312 * _318) + _287) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _375 = (((cbMtdParam._m0[10u].x * TEXCOORD_3.x) * _272) * (((_352.x - _349) * _330) + _349)) + cbMtdParam._m0[9u].x;
    float _376 = (((cbMtdParam._m0[10u].y * TEXCOORD_3.x) * _272) * (((_352.y - _350) * _330) + _350)) + cbMtdParam._m0[9u].y;
    float _377 = (((cbMtdParam._m0[10u].z * TEXCOORD_3.x) * _272) * (((_352.z - _351) * _330) + _351)) + cbMtdParam._m0[9u].z;
    vec4 _398 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[14u].x * _244) + TEXCOORD) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[14u].y * _244) + TEXCOORD_1) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _423 = texture(sampler2D(M_Water_test_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[13u].z * _244) + TEXCOORD) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[13u].w * _244) + TEXCOORD_1) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _429 = (_423.x * 2.0) + (-1.0);
    float _430 = (_423.y * 2.0) + (-1.0);
    float _431 = dot(vec2(_429, _430), vec2(_429, _430));
    float _3649 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _437 = sqrt(1.0 - (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))));
    float _446 = (cbMtdParam._m0[15u].x * _244) + TEXCOORD;
    float _447 = (cbMtdParam._m0[15u].y * _244) + TEXCOORD_1;
    vec4 _452 = texture(sampler2D(M_Water_test_snp_0_Texture2D_3, SS_WrapLinear), vec2((_446 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_447 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _460 = ((_452.y * 0.5) + (-0.25)) * cbMtdParam._m0[12u].w;
    float _462 = (-0.0) - (cbMtdParam._m0[12u].w * ((_452.x * 0.5) + (-0.25)));
    vec4 _479 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((_316 * _462) + _446) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_460 * _316) + _447) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _481 = _479.x;
    float _482 = _479.y;
    vec4 _483 = texture(sampler2D(M_Water_test_snp_0_Texture2D_0, SS_BumpMap), vec2((((_318 * _462) + _446) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_460 * _318) + _447) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _499 = (_429 + (((_398.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z)) + ((((((_483.x - _481) * _330) + _481) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y);
    float _500 = (_430 + (((_398.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z)) + ((((((_483.y - _482) * _330) + _482) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].y);
    float _506 = fma(_437, _213 * NORMAL.x, fma(_500, _220 * TANGENT.x, _499 * _207));
    float _509 = fma(_437, _213 * NORMAL.y, fma(_500, _220 * TANGENT.y, _499 * _208));
    float _512 = fma(_437, _213 * NORMAL.z, fma(_500, _220 * TANGENT.z, _499 * _209));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    float _517 = _516 * _506;
    float _518 = _516 * _509;
    float _519 = _516 * _512;
    float _3660 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _520 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _3671 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3682 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3693 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _539 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _590 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _580);
    float _591 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _580);
    float _592 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _580);
    float _596 = inversesqrt(dot(vec3(_590, _591, _592), vec3(_590, _591, _592)));
    float _597 = _590 * _596;
    float _598 = _591 * _596;
    float _599 = _592 * _596;
    vec4 _604 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _606 = _604.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _770 = sqrt(((_590 * _590) + (_591 * _591)) + (_592 * _592));
        float _776 = (cbMatDynParam._m0[5u].x * _770) + cbMatDynParam._m0[5u].y;
        float _3704 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _781 = (cbMatDynParam._m0[5u].z * _770) + cbMatDynParam._m0[5u].w;
        float _3715 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) - _777)) + _777) < ((_606 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _618 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _619 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _639 = fma(_519, cbSceneParam._m0[5u].z, fma(_518, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _517));
    float _642 = fma(_519, cbSceneParam._m0[6u].z, fma(_518, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _517));
    float _645 = fma(_519, cbSceneParam._m0[7u].z, fma(_518, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _517));
    uint _658 = uint(roundEven(NORMAL.w)) * 13u;
    uint _659 = _658 + 9u;
    uint _660 = _659 + uint(cbMatDynParam._m0[0u].w);
    float _666 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) * cbInstanceData._m0[_660].x;
    float _667 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) * cbInstanceData._m0[_660].y;
    float _668 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * cbInstanceData._m0[_660].z;
    float _3726 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _3737 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _3748 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    vec4 _680 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _618, cbSceneParam._m0[86u].y * _619));
    float _683 = _680.x * TEXCOORD_3.w;
    float _684 = dot(vec3(_517, _518, _519), vec3(_597, _598, _599));
    float _687 = _684 * 2.0;
    float _691 = (_687 * _517) - _597;
    float _692 = (_687 * _518) - _598;
    float _693 = (_687 * _519) - _599;
    float _697 = abs(dot(vec3(_597, _598, _599), vec3(_517, _518, _519)));
    float _3759 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _698 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _706 = 10.0 / (_539 + 10.0);
    float _707 = sqrt(_520);
    float _719 = exp2((_707 * 5.0) * log2(1.0 - (_698 * 0.999000012874603271484375))) / (4.0 - (_707 * 3.0));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1089;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _815 = fma(_759, cbModelParam._m0[26u].z, fma(_755, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _751));
        float _819 = fma(_759, cbModelParam._m0[27u].z, fma(_755, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _751));
        float _823 = fma(_759, cbModelParam._m0[28u].z, fma(_755, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _751));
        float _847 = _751 + _517;
        float _848 = _755 + _518;
        float _849 = _759 + _519;
        float _859 = fma(_849, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _847)) - _815;
        float _860 = fma(_849, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _847)) - _819;
        float _861 = fma(_849, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _847)) - _823;
        float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
        float _878 = ((_865 * _859) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_815 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_865 * _860) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_819 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_865 * _861) / cbModelParam._m0[34u].z) + ((((((_823 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        float _917 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_883.x + (-0.5));
        float _919 = _917 * (_883.y + (-0.5));
        float _920 = _917 * (_883.z + (-0.5));
        float _927 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_890.x + (-0.5));
        float _929 = _927 * (_890.y + (-0.5));
        float _930 = _927 * (_890.z + (-0.5));
        float _937 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_897.x + (-0.5));
        float _939 = _937 * (_897.y + (-0.5));
        float _940 = _937 * (_897.z + (-0.5));
        float _947 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_904.x + (-0.5));
        float _949 = _947 * (_904.y + (-0.5));
        float _950 = _947 * (_904.z + (-0.5));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = _918 * 0.5;
        float _955 = _928 * 0.5;
        float _956 = _938 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _971 = (dot(vec3(_517, _518, _519), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3785 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _981 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3796 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3807 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_983 + 1.0))) + _988) * _951;
        float _998 = _919 * 0.5;
        float _999 = _929 * 0.5;
        float _1000 = _939 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_517, _518, _519), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3840 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1025 + 1.0))) + _1030) * _952;
        float _1040 = _920 * 0.5;
        float _1041 = _930 * 0.5;
        float _1042 = _940 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_517, _518, _519), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3873 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1067 + 1.0))) + _1072) * _953;
        _1089 = _920;
        _1091 = _919;
        _1092 = _918;
        _1093 = _930;
        _1094 = _929;
        _1095 = _928;
        _1096 = _940;
        _1097 = _939;
        _1098 = _938;
        _1099 = _953;
        _1100 = _952;
        _1101 = _951;
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
    }
    else
    {
        _1089 = _1090;
        _1091 = _1090;
        _1092 = _1090;
        _1093 = _1090;
        _1094 = _1090;
        _1095 = _1090;
        _1096 = _1090;
        _1097 = _1090;
        _1098 = _1090;
        _1099 = _1090;
        _1100 = _1090;
        _1101 = _1090;
        _1102 = 0.0;
        _1103 = 0.0;
        _1104 = 0.0;
    }
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1133 = fma(_759, cbModelParam._m0[30u].z, fma(_755, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _751));
        float _1137 = fma(_759, cbModelParam._m0[31u].z, fma(_755, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _751));
        float _1141 = fma(_759, cbModelParam._m0[32u].z, fma(_755, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _751));
        float _1164 = _751 + _517;
        float _1165 = _755 + _518;
        float _1166 = _759 + _519;
        float _1176 = fma(_1166, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1164)) - _1133;
        float _1177 = fma(_1166, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1164)) - _1137;
        float _1178 = fma(_1166, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1164)) - _1141;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1133 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1137 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[35u].z) + ((((((_1141 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1232 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1199.x + (-0.5));
        float _1234 = _1232 * (_1199.y + (-0.5));
        float _1235 = _1232 * (_1199.z + (-0.5));
        float _1242 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1206.x + (-0.5));
        float _1244 = _1242 * (_1206.y + (-0.5));
        float _1245 = _1242 * (_1206.z + (-0.5));
        float _1252 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1213.x + (-0.5));
        float _1254 = _1252 * (_1213.y + (-0.5));
        float _1255 = _1252 * (_1213.z + (-0.5));
        float _1262 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1220.x + (-0.5));
        float _1264 = _1262 * (_1220.y + (-0.5));
        float _1265 = _1262 * (_1220.z + (-0.5));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = _1233 * 0.5;
        float _1270 = _1243 * 0.5;
        float _1271 = _1253 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_517, _518, _519), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3936 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1296 + 1.0))) + _1301) * _1266;
        float _1311 = _1234 * 0.5;
        float _1312 = _1244 * 0.5;
        float _1313 = _1254 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_517, _518, _519), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3969 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1338 + 1.0))) + _1343) * _1267;
        float _1353 = _1235 * 0.5;
        float _1354 = _1245 * 0.5;
        float _1355 = _1255 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_517, _518, _519), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4002 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1380 + 1.0))) + _1385) * _1268;
        _1402 = _1235;
        _1403 = _1234;
        _1404 = _1233;
        _1405 = _1245;
        _1406 = _1244;
        _1407 = _1243;
        _1408 = _1255;
        _1409 = _1254;
        _1410 = _1253;
        _1411 = _1268;
        _1412 = _1267;
        _1413 = _1266;
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1090;
        _1403 = _1090;
        _1404 = _1090;
        _1405 = _1090;
        _1406 = _1090;
        _1407 = _1090;
        _1408 = _1090;
        _1409 = _1090;
        _1410 = _1090;
        _1411 = _1090;
        _1412 = _1090;
        _1413 = _1090;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1102)) + _1102;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1103)) + _1103;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1104)) + _1104;
    float _1449 = fma(_1428, cbSceneParam._m0[89u].z, fma(_1427, cbSceneParam._m0[89u].y, _1426 * cbSceneParam._m0[89u].x));
    float _1452 = fma(_1428, cbSceneParam._m0[90u].z, fma(_1427, cbSceneParam._m0[90u].y, _1426 * cbSceneParam._m0[90u].x));
    float _1455 = fma(_1428, cbSceneParam._m0[91u].z, fma(_1427, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1426));
    float _1470 = _691 * 0.5;
    float _1471 = _692 * 0.5;
    float _1472 = _693 * 0.5;
    float _1473 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1476 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1479 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1513;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1486 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1089, _1093, _1096, _1099));
        float _1490 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1494 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1092, _1095, _1098, _1101));
        float _1501 = dot(vec4(cbModelParam._m0[39u]), vec4(_1470, _1471, _1472, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1524;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1515 = dot(vec4(cbModelParam._m0[40u]), vec4(_1470, _1471, _1472, 1.0));
        _1524 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1524 = 1.0;
    }
    float _1528 = (_1524 * cbModelParam._m0[1u].x) + (_1513 * (1.0 - cbModelParam._m0[1u].x));
    float _1538 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _520);
    float _1539 = isnan(_1538) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1538 : min(cbModelParam._m0[25u].z, _1538));
    float _1619;
    float _1621;
    float _1623;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1586 = fma(_759, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751)) + cbModelParam._m0[13u].w;
        float _1590 = fma(_759, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751)) + cbModelParam._m0[14u].w;
        float _1594 = fma(_759, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751)) + cbModelParam._m0[15u].w;
        float _1597 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1600 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1603 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1631;
        if (_1597 > 0.0)
        {
            _1631 = abs((1.0 - _1586) / _1597);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1586 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1631 = frontier_phi_17_15_ladder;
        }
        float _1907;
        if (_1600 > 0.0)
        {
            _1907 = abs((1.0 - _1590) / _1600);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1590 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1907 = frontier_phi_26_22_ladder;
        }
        float _2153;
        if (_1603 > 0.0)
        {
            _2153 = abs((1.0 - _1594) / _1603);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1594 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2153 = frontier_phi_38_33_ladder;
        }
        float _2155 = isnan(_1907) ? _1631 : (isnan(_1631) ? _1907 : min(_1631, _1907));
        float _2156 = isnan(_2153) ? _2155 : (isnan(_2155) ? _2153 : min(_2155, _2153));
        float _2160 = (_2156 * _1597) + _1586;
        float _2161 = (_2156 * _1600) + _1590;
        float _2162 = (_2156 * _1603) + _1594;
        float _2163 = _2156 * 9.9999997473787516355514526367188e-05;
        float _2165 = (-1.0) - _2163;
        float _2167 = _2163 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2162 > _2167) || ((_2162 < _2165) || ((_2161 > _2167) || ((_2161 < _2165) || ((_2160 < _2165) || (_2160 > _2167))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2286 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2162, cbModelParam._m0[9u].z, fma(_2161, cbModelParam._m0[9u].y, _2160 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2162, cbModelParam._m0[10u].z, fma(_2161, cbModelParam._m0[10u].y, _2160 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2162, cbModelParam._m0[11u].z, fma(_2161, cbModelParam._m0[11u].y, _2160 * cbModelParam._m0[11u].x))), _1539);
            frontier_phi_16_38_ladder = _2286.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2286.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2286.x * cbModelParam._m0[1u].y;
        }
        _1619 = frontier_phi_16_38_ladder_2;
        _1621 = frontier_phi_16_38_ladder_1;
        _1623 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1607 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1539);
        _1619 = _1607.x * cbModelParam._m0[1u].y;
        _1621 = _1607.y * cbModelParam._m0[1u].y;
        _1623 = _1607.z * cbModelParam._m0[1u].y;
    }
    float _1627 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _520);
    float _1628 = isnan(_1627) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1627 : min(cbModelParam._m0[25u].w, _1627));
    float _1720;
    float _1722;
    float _1724;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1684 = fma(_759, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751)) + cbModelParam._m0[21u].w;
        float _1688 = fma(_759, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751)) + cbModelParam._m0[22u].w;
        float _1692 = fma(_759, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751)) + cbModelParam._m0[23u].w;
        float _1695 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1698 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1701 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _1912;
        if (_1695 > 0.0)
        {
            _1912 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1912 = frontier_phi_28_24_ladder;
        }
        float _2180;
        if (_1698 > 0.0)
        {
            _2180 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2180 = frontier_phi_40_35_ladder;
        }
        float _2385;
        if (_1701 > 0.0)
        {
            _2385 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2385 = frontier_phi_49_46_ladder;
        }
        float _2387 = isnan(_2180) ? _1912 : (isnan(_1912) ? _2180 : min(_1912, _2180));
        float _2388 = isnan(_2385) ? _2387 : (isnan(_2387) ? _2385 : min(_2387, _2385));
        float _2392 = (_2388 * _1695) + _1684;
        float _2393 = (_2388 * _1698) + _1688;
        float _2394 = (_2388 * _1701) + _1692;
        float _2395 = _2388 * 9.9999997473787516355514526367188e-05;
        float _2396 = (-1.0) - _2395;
        float _2398 = _2395 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2394 > _2398) || ((_2394 < _2396) || ((_2393 > _2398) || ((_2393 < _2396) || ((_2392 < _2396) || (_2392 > _2398))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2394, cbModelParam._m0[17u].z, fma(_2393, cbModelParam._m0[17u].y, _2392 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2394, cbModelParam._m0[18u].z, fma(_2393, cbModelParam._m0[18u].y, _2392 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2394, cbModelParam._m0[19u].z, fma(_2393, cbModelParam._m0[19u].y, _2392 * cbModelParam._m0[19u].x))), _1628);
            frontier_phi_25_49_ladder = _2668.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2668.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2668.x * cbModelParam._m0[1u].z;
        }
        _1720 = frontier_phi_25_49_ladder_2;
        _1722 = frontier_phi_25_49_ladder_1;
        _1724 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1704 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1628);
        _1720 = _1704.x * cbModelParam._m0[1u].z;
        _1722 = _1704.y * cbModelParam._m0[1u].z;
        _1724 = _1704.z * cbModelParam._m0[1u].z;
    }
    float _1736 = ((((1.0 - _719) * ((_707 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_719 * _707)) * _683;
    float _1737 = _1736 * ((cbModelParam._m0[1u].w * (_1720 - _1619)) + _1619);
    float _1738 = _1736 * ((cbModelParam._m0[1u].w * (_1722 - _1621)) + _1621);
    float _1739 = _1736 * ((cbModelParam._m0[1u].w * (_1724 - _1623)) + _1623);
    float _1742 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, _1737 * cbSceneParam._m0[91u].x));
    float _1759 = _618 / cbSceneParam._m0[86u].x;
    float _1767 = (cbSceneParam._m0[88u].y * (1.0 - _520)) + cbSceneParam._m0[88u].z;
    float _4128 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1769 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 5.0;
    float _1774 = (_706 * cbMtdParam._m0[12u].x) * dot(vec3(_517, _518, _519), vec3(1.0, 0.0, 0.0));
    vec4 _1784 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1774 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1774 + _1759) * cbSceneParam._m0[86u].x, _619), _1769).w) + _1759) * cbSceneParam._m0[86u].x, _619), _1769);
    float _1800 = 1.0 - _1784.w;
    vec4 _1808 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_618, _619));
    float _1810 = _1808.w;
    float _1822 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1810);
    float _1823 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1810);
    float _1824 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1810);
    uvec4 _1828 = floatBitsToUint(cbInstanceData._m0[_658 + 5u]);
    uint _1830 = _1828.x * 14u;
    uint _1831 = _1830 + 13u;
    float _1838 = _683 + (-1.0);
    float _1843 = (cbLight._m0[_1831].x * _1838) + 1.0;
    float _1844 = (cbLight._m0[_1831].y * _1838) + 1.0;
    float _1845 = (cbLight._m0[_1831].z * _1838) + 1.0;
    float _1846 = (cbLight._m0[_1831].w * _1838) + 1.0;
    uint _1847 = _1830 + 5u;
    float _1853 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
    uint _1857 = _1830 + 4u;
    float _1866 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
    uint _1870 = _1830 | 1u;
    float _1881 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_517, _518, _519));
    float _1884 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_517, _518, _519));
    float _4149 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _4160 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1889 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.3183098733425140380859375;
    float _1891 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * 0.3183098733425140380859375;
    float _1898 = ((cbLight._m0[_1847].x * _1853) * _1891) + (((cbLight._m0[_1857].x * _1822) * _1866) * _1889);
    float _1899 = ((_1853 * cbLight._m0[_1847].y) * _1891) + (((cbLight._m0[_1857].y * _1823) * _1866) * _1889);
    float _1900 = ((_1853 * cbLight._m0[_1847].z) * _1891) + (((cbLight._m0[_1857].z * _1824) * _1866) * _1889);
    uvec4 _1904 = floatBitsToUint(cbLight._m0[_1830 + 12u]);
    bool _1906 = _1904.x == 0u;
    float _1917;
    float _1919;
    float _1921;
    if (_1906)
    {
        _1917 = _1898;
        _1919 = _1899;
        _1921 = _1900;
    }
    else
    {
        uint _1925 = _1830 + 6u;
        float _1941 = (dot(vec3(cbLight._m0[_1830 + 2u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _1942 = _1941 * _1941;
        float _4171 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1943 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1944 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _1917 = (((cbLight._m0[_1925].x * 0.3183098733425140380859375) * _1943) * _1944) + _1898;
        _1919 = (((cbLight._m0[_1925].y * 0.3183098733425140380859375) * _1943) * _1944) + _1899;
        _1921 = (((cbLight._m0[_1925].z * 0.3183098733425140380859375) * _1943) * _1944) + _1900;
    }
    bool _1924 = _1904.y == 0u;
    float _1962;
    float _1964;
    float _1966;
    if (_1924)
    {
        _1962 = _1917;
        _1964 = _1919;
        _1966 = _1921;
    }
    else
    {
        uint _2124 = _1830 + 7u;
        float _2140 = (dot(vec3(cbLight._m0[_1830 + 3u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _2141 = _2140 * _2140;
        float _4187 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2142 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2143 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _1962 = (((cbLight._m0[_2124].x * 0.3183098733425140380859375) * _2142) * _2143) + _1917;
        _1964 = (((cbLight._m0[_2124].y * 0.3183098733425140380859375) * _2142) * _2143) + _1919;
        _1966 = (((cbLight._m0[_2124].z * 0.3183098733425140380859375) * _2142) * _2143) + _1921;
    }
    uint _1969 = _1830 + 8u;
    float _1982 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1830].w)) * _520) * 0.949999988079071044921875);
    float _1983 = _1982 * _1982;
    float _1984 = cbLight._m0[_1830].x + _597;
    float _1985 = cbLight._m0[_1830].y + _598;
    float _1986 = cbLight._m0[_1830].z + _599;
    float _1990 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
    float _1991 = _1990 * _1984;
    float _1992 = _1990 * _1985;
    float _1993 = _1990 * _1986;
    float _1994 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1830].xyz));
    float _4203 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _4214 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _1998 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _1999 = dot(vec3(_517, _518, _519), vec3(_1991, _1992, _1993));
    float _4225 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _2003 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_1991, _1992, _1993));
    float _4236 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2007 = _1983 * _1983;
    float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
    float _2022 = (exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2023 = 1.0 - _1983;
    float _2034 = (0.5 / (((_1998 * ((_1997 * _2023) + _1983)) + 9.9999999392252902907785028219223e-09) + (((_1998 * _2023) + _1983) * _1997))) * _1997;
    float _4247 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2036 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
    uint _2050 = _1830 + 9u;
    float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1870].w)) * _520) * 0.949999988079071044921875);
    float _2062 = _2061 * _2061;
    float _2063 = cbLight._m0[_1870].x + _597;
    float _2064 = cbLight._m0[_1870].y + _598;
    float _2065 = cbLight._m0[_1870].z + _599;
    float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
    float _2070 = _2069 * _2063;
    float _2071 = _2069 * _2064;
    float _2072 = _2069 * _2065;
    float _2073 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1870].xyz));
    float _4258 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2077 = dot(vec3(_517, _518, _519), vec3(_2070, _2071, _2072));
    float _4269 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _2081 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_2070, _2071, _2072));
    float _4280 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2085 = _2062 * _2062;
    float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
    float _2098 = (exp2(log2(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2099 = 1.0 - _2062;
    float _2109 = (0.5 / (((_1998 * ((_2076 * _2099) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_1998 * _2099) + _2062) * _2076))) * _2076;
    float _4291 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2111 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
    float _2121 = (((_2098 * cbLight._m0[_2050].x) * _2111) * _1853) + ((((cbLight._m0[_1969].x * _1822) * _2022) * _2036) * _1866);
    float _2122 = (((_2098 * cbLight._m0[_2050].y) * _2111) * _1853) + ((((cbLight._m0[_1969].y * _1823) * _2022) * _2036) * _1866);
    float _2123 = (((_2098 * cbLight._m0[_2050].z) * _2111) * _1853) + ((((cbLight._m0[_1969].z * _1824) * _2022) * _2036) * _1866);
    float _2185;
    float _2187;
    float _2189;
    if (_1906)
    {
        _2185 = _2121;
        _2187 = _2122;
        _2189 = _2123;
    }
    else
    {
        uint _2191 = _1830 + 2u;
        uint _2195 = _1830 + 10u;
        float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _520) * 0.949999988079071044921875);
        float _2210 = _2209 * _2209;
        float _2211 = cbLight._m0[_2191].x + _597;
        float _2212 = cbLight._m0[_2191].y + _598;
        float _2213 = cbLight._m0[_2191].z + _599;
        float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
        float _2218 = _2217 * _2211;
        float _2219 = _2217 * _2212;
        float _2220 = _2217 * _2213;
        float _2221 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2191].xyz));
        float _4302 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2225 = dot(vec3(_517, _518, _519), vec3(_2218, _2219, _2220));
        float _4313 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2229 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2218, _2219, _2220));
        float _4324 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2233 = _2210 * _2210;
        float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
        float _2246 = (exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2247 = 1.0 - _2210;
        float _2257 = (0.5 / (((_1998 * ((_2224 * _2247) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_1998 * _2247) + _2210) * _2224))) * _2224;
        float _4335 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2259 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
        float _2260 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _2185 = (((_2246 * cbLight._m0[_2195].x) * _2259) * _2260) + _2121;
        _2187 = (((_2246 * cbLight._m0[_2195].y) * _2259) * _2260) + _2122;
        _2189 = (((_2246 * cbLight._m0[_2195].z) * _2259) * _2260) + _2123;
    }
    float _2295;
    float _2297;
    float _2299;
    if (_1924)
    {
        _2295 = _2185;
        _2297 = _2187;
        _2299 = _2189;
    }
    else
    {
        uint _2306 = _1830 + 3u;
        uint _2310 = _1830 + 11u;
        float _2324 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _520) * 0.949999988079071044921875);
        float _2325 = _2324 * _2324;
        float _2326 = cbLight._m0[_2306].x + _597;
        float _2327 = cbLight._m0[_2306].y + _598;
        float _2328 = cbLight._m0[_2306].z + _599;
        float _2332 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
        float _2333 = _2332 * _2326;
        float _2334 = _2332 * _2327;
        float _2335 = _2332 * _2328;
        float _2336 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2306].xyz));
        float _4351 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2340 = dot(vec3(_517, _518, _519), vec3(_2333, _2334, _2335));
        float _4362 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2343 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2344 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2333, _2334, _2335));
        float _4373 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2348 = _2325 * _2325;
        float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
        float _2361 = (exp2(log2(1.0 - (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2362 = 1.0 - _2325;
        float _2372 = (0.5 / (((_1998 * ((_2339 * _2362) + _2325)) + 9.9999999392252902907785028219223e-09) + (((_1998 * _2362) + _2325) * _2339))) * _2339;
        float _4384 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2374 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
        float _2375 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _2295 = (((_2361 * cbLight._m0[_2310].x) * _2374) * _2375) + _2185;
        _2297 = (((_2361 * cbLight._m0[_2310].y) * _2374) * _2375) + _2187;
        _2299 = (((_2361 * cbLight._m0[_2310].z) * _2374) * _2375) + _2189;
    }
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    if (_1828.y == 0u)
    {
        float _2450 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2451 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2450;
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2450;
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2450;
        uvec4 _2465 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2466 = _2465.x;
        uint _2477 = uint((float(_2465.y) * floor(float(uint(cbSceneParam._m0[85u].y * _619) / _2466))) + floor(float(uint(cbSceneParam._m0[85u].x * _618) / _2466)));
        float _2487 = (log2(_2453 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2488 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        uint _2491 = uint(isnan(14.0) ? _2488 : (isnan(_2488) ? 14.0 : min(_2488, 14.0)));
        uvec4 _2496 = texelFetch(g_lightClusterGridBuffer, int(((_2491 << 2u) + (_2477 << 6u)) >> 2u));
        uint _2497 = _2496.x;
        uint _2498 = _2465.z;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        if (((((1u << ((_2498 >> 4u) & 15u)) + 4294967295u) & _2497) == 0u) || ((_2498 & 240u) == 0u))
        {
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
        }
        else
        {
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            uint _2863 = 0u;
            uint _2872;
            bool _2873;
            for (;;)
            {
                _2872 = texelFetch(g_lightClassification, int((((_2491 << 5u) + (_2477 << 9u)) + (_2863 << 2u)) >> 2u)).x;
                _2873 = _2872 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2873)
                {
                    frontier_phi_66_pred = _2857;
                    frontier_phi_66_pred_1 = _2862;
                    frontier_phi_66_pred_2 = _2861;
                    frontier_phi_66_pred_3 = _2860;
                    frontier_phi_66_pred_4 = _2859;
                    frontier_phi_66_pred_5 = _2858;
                }
                else
                {
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    uint _3008;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2872;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    for (;;)
                    {
                        uint _3012 = uint(findLSB(_3008)) + (_2863 << 5u);
                        uint _3009 = (_3008 + 4294967295u) & _3008;
                        uint _3014 = _3012 * 48u;
                        vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 3u)).x));
                        uint _3034 = (_3012 * 48u) + 4u;
                        vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 3u)).x));
                        uint _3053 = (_3012 * 48u) + 8u;
                        vec3 _3064 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3053)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 2u)).x));
                        float _3068 = _3028.x - _2451;
                        float _3069 = _3028.y - _2452;
                        float _3070 = _3028.z - _2453;
                        float _3071 = dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070));
                        float _3074 = inversesqrt(_3071);
                        float _3075 = _3074 * _3068;
                        float _3076 = _3074 * _3069;
                        float _3077 = _3074 * _3070;
                        float _3078 = dot(vec3(_639, _642, _645), vec3(_3075, _3076, _3077));
                        float _3083 = 1.0 - (_3071 * _3028.w);
                        float _4410 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3084 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3085 = sqrt(_3071) * _3047.w;
                        float _3088 = 1.39999997615814208984375 / (_3085 + 1.39999997615814208984375);
                        float _3089 = _3088 * _3088;
                        float _3092 = ((1.0 - _3089) * _3078) + _3089;
                        float _3095 = _3085 * _3085;
                        float _3099 = ((isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0))) * _3084) / ((_3095 * 0.699999988079071044921875) + 1.0);
                        float _3103 = (-0.0) - _2451;
                        float _3104 = (-0.0) - _2452;
                        float _3105 = (-0.0) - _2453;
                        float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                        float _3110 = _3109 * _3103;
                        float _3111 = _3109 * _3104;
                        float _3112 = _3109 * _3105;
                        float _3120 = exp2(log2(1.0 / ((_3095 * 3.5) + 5.0)) * 0.25);
                        float _3121 = 1.0 - _707;
                        float _3128 = sqrt(1.0 - ((1.0 - (_3121 * _3121)) * (1.0 - (_3120 * _3120))));
                        float _3129 = _3128 * _3128;
                        float _3130 = _3129 * _3129;
                        float _3131 = _3110 + _3075;
                        float _3132 = _3111 + _3076;
                        float _3133 = _3112 + _3077;
                        float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                        float _3141 = dot(vec3(_639, _642, _645), vec3(_3110, _3111, _3112));
                        float _4426 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3144 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3145 = dot(vec3(_639, _642, _645), vec3(_3137 * _3131, _3137 * _3132, _3137 * _3133));
                        float _4437 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3148 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3152 = ((_3148 * _3148) * (_3130 + (-1.0))) + 1.0;
                        float _3153 = _3088 * _3129;
                        float _3154 = _3153 * _3153;
                        float _3157 = ((1.0 - _3154) * _3078) + _3154;
                        float _4448 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3158 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3159 = 1.0 - _3129;
                        float _3169 = (0.5 / (((_3158 * ((_3144 * _3159) + _3129)) + 9.9999999392252902907785028219223e-09) + (((_3158 * _3159) + _3129) * _3144))) * _3158;
                        float _4459 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3180 = (((_3130 * 3.1415927410125732421875) * (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) / ((_3152 * _3152) * ((_3095 * 2.1991131305694580078125) + 3.141590118408203125))) * _3084;
                        _2932 = (_3099 * _3047.x) + _3005;
                        _2933 = (_3099 * _3047.y) + _3006;
                        _2934 = (_3099 * _3047.z) + _3007;
                        _2929 = (_3180 * _3064.x) + _3002;
                        _2930 = (_3180 * _3064.y) + _3003;
                        _2931 = (_3180 * _3064.z) + _3004;
                        if (_3009 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _3009;
                        }
                    }
                    frontier_phi_66_pred = _2929;
                    frontier_phi_66_pred_1 = _2934;
                    frontier_phi_66_pred_2 = _2933;
                    frontier_phi_66_pred_3 = _2932;
                    frontier_phi_66_pred_4 = _2931;
                    frontier_phi_66_pred_5 = _2930;
                }
                _2674 = frontier_phi_66_pred;
                _2684 = frontier_phi_66_pred_1;
                _2682 = frontier_phi_66_pred_2;
                _2680 = frontier_phi_66_pred_3;
                _2678 = frontier_phi_66_pred_4;
                _2676 = frontier_phi_66_pred_5;
                uint _2864 = _2863 + 1u;
                if (_2864 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2857 = _2674;
                    _2858 = _2676;
                    _2859 = _2678;
                    _2860 = _2680;
                    _2861 = _2682;
                    _2862 = _2684;
                    _2863 = _2864;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
        }
        uvec4 _2687 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2688 = _2687.z;
        uint _2690 = (_2688 >> 8u) & 15u;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        if (((4294967295u << _2690) & _2497) == 0u)
        {
            _2825 = _2673;
            _2827 = _2675;
            _2829 = _2677;
            _2831 = _2679;
            _2833 = _2681;
            _2835 = _2683;
        }
        else
        {
            float _2850 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
            float _2851 = _2850 * _2451;
            float _2852 = _2850 * _2452;
            float _2853 = _2850 * _2453;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2690 < ((_2688 >> 12u) & 15u))
            {
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2985 = _2673;
                float _2986 = _2675;
                float _2987 = _2677;
                float _2988 = _2679;
                float _2989 = _2681;
                float _2990 = _2683;
                uint _2991 = _2690;
                uint _3000;
                bool _3001;
                for (;;)
                {
                    _3000 = texelFetch(g_lightClassification, int((((_2491 << 5u) + (_2477 << 9u)) + (_2991 << 2u)) >> 2u)).x;
                    _3001 = _3000 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3001)
                    {
                        frontier_phi_77_pred = _2990;
                        frontier_phi_77_pred_1 = _2989;
                        frontier_phi_77_pred_2 = _2988;
                        frontier_phi_77_pred_3 = _2987;
                        frontier_phi_77_pred_4 = _2986;
                        frontier_phi_77_pred_5 = _2985;
                    }
                    else
                    {
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3207 = _2985;
                        float _3208 = _2986;
                        float _3209 = _2987;
                        float _3210 = _2988;
                        float _3211 = _2989;
                        float _3212 = _2990;
                        uint _3213 = _3000;
                        uint _3214;
                        vec4 _3239;
                        float _3240;
                        vec4 _3255;
                        vec3 _3267;
                        vec4 _3283;
                        vec4 _3299;
                        float _3346;
                        bool _3347;
                        for (;;)
                        {
                            uint _3224 = ((_2991 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3213));
                            _3214 = (_3213 + 4294967295u) & _3213;
                            uint _3226 = _3224 * 40u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            _3240 = _3239.w;
                            uint _3242 = (_3224 * 40u) + 4u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3257 = (_3224 * 40u) + 8u;
                            _3267 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x));
                            uint _3270 = (_3224 * 40u) + 16u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3286 = (_3224 * 40u) + 20u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3302 = (_3224 * 40u) + 24u;
                            vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3321 = (_3224 * 40u) + 28u;
                            vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            _3346 = fma(_2453, _3334.z, fma(_2452, _3334.y, _3334.x * _2451)) + _3334.w;
                            _3347 = !((fma(_2453, _3315.z, fma(_2452, _3315.y, _3315.x * _2451)) + _3315.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3347)
                            {
                                float _3374 = _3239.x - _2451;
                                float _3375 = _3239.y - _2452;
                                float _3376 = _3239.z - _2453;
                                float _3377 = dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376));
                                float _3380 = inversesqrt(_3377);
                                float _3381 = _3380 * _3374;
                                float _3382 = _3380 * _3375;
                                float _3383 = _3380 * _3376;
                                float _3387 = 1.0 - (_3377 / (_3240 * _3240));
                                float _4470 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3392 = sqrt(_3377) * _3255.w;
                                float _3394 = 1.39999997615814208984375 / (_3392 + 1.39999997615814208984375);
                                float _3395 = _3394 * _3394;
                                float _3398 = ((1.0 - _3395) * dot(vec3(_3381, _3382, _3383), vec3(_639, _642, _645))) + _3395;
                                float _3401 = _3392 * _3392;
                                float _3405 = (fma(_2453, _3283.z, fma(_2452, _3283.y, _3283.x * _2451)) + _3283.w) / _3346;
                                float _3406 = (fma(_2453, _3299.z, fma(_2452, _3299.y, _3299.x * _2451)) + _3299.w) / _3346;
                                float _3410 = 1.0 - dot(vec2(_3405, _3406), vec2(_3405, _3406));
                                float _4486 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3411 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3412 = _3411 * (((isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))) * _3388) / ((_3401 * 0.699999988079071044921875) + 1.0));
                                float _3424 = exp2(log2(1.0 / ((_3401 * 3.5) + 5.0)) * 0.25);
                                float _3425 = 1.0 - _707;
                                float _3432 = sqrt(1.0 - ((1.0 - (_3425 * _3425)) * (1.0 - (_3424 * _3424))));
                                float _3433 = _3432 * _3432;
                                float _3434 = _3433 * _3433;
                                float _3435 = _3381 - _2851;
                                float _3436 = _3382 - _2852;
                                float _3437 = _3383 - _2853;
                                float _3441 = inversesqrt(dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437)));
                                float _3445 = dot(vec3(_639, _642, _645), vec3((-0.0) - _2851, (-0.0) - _2852, (-0.0) - _2853));
                                float _4497 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3448 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3449 = dot(vec3(_639, _642, _645), vec3(_3441 * _3435, _3441 * _3436, _3441 * _3437));
                                float _4508 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3452 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3456 = ((_3452 * _3452) * (_3434 + (-1.0))) + 1.0;
                                float _3457 = _3394 * _3433;
                                float _3458 = _3457 * _3457;
                                float _3464 = ((1.0 - _3458) * dot(vec3(_639, _642, _645), vec3(_3381, _3382, _3383))) + _3458;
                                float _4519 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3465 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3466 = 1.0 - _3433;
                                float _3476 = (0.5 / (((_3465 * ((_3448 * _3466) + _3433)) + 9.9999999392252902907785028219223e-09) + (((_3465 * _3466) + _3433) * _3448))) * _3465;
                                float _4530 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3486 = (_3411 * _3388) * (((_3434 * 3.1415927410125732421875) * (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) / ((_3456 * _3456) * ((_3401 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3412 * _3255.y;
                                frontier_phi_83_pred_1 = _3412 * _3255.x;
                                frontier_phi_83_pred_2 = _3486 * _3267.z;
                                frontier_phi_83_pred_3 = _3486 * _3267.y;
                                frontier_phi_83_pred_4 = _3486 * _3267.x;
                                frontier_phi_83_pred_5 = _3412 * _3255.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3494 = frontier_phi_83_pred;
                            _3493 = frontier_phi_83_pred_1;
                            _3492 = frontier_phi_83_pred_2;
                            _3491 = frontier_phi_83_pred_3;
                            _3490 = frontier_phi_83_pred_4;
                            _3495 = frontier_phi_83_pred_5;
                            _3197 = _3493 + _3210;
                            _3198 = _3494 + _3211;
                            _3199 = _3495 + _3212;
                            _3194 = _3490 + _3207;
                            _3195 = _3491 + _3208;
                            _3196 = _3492 + _3209;
                            if (_3214 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3214;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3199;
                        frontier_phi_77_pred_1 = _3198;
                        frontier_phi_77_pred_2 = _3197;
                        frontier_phi_77_pred_3 = _3196;
                        frontier_phi_77_pred_4 = _3195;
                        frontier_phi_77_pred_5 = _3194;
                    }
                    _2836 = frontier_phi_77_pred;
                    _2834 = frontier_phi_77_pred_1;
                    _2832 = frontier_phi_77_pred_2;
                    _2830 = frontier_phi_77_pred_3;
                    _2828 = frontier_phi_77_pred_4;
                    _2826 = frontier_phi_77_pred_5;
                    uint _2992 = _2991 + 1u;
                    if (_2992 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2985 = _2826;
                        _2986 = _2828;
                        _2987 = _2830;
                        _2988 = _2832;
                        _2989 = _2834;
                        _2990 = _2836;
                        _2991 = _2992;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2830;
                frontier_phi_58_59_ladder_1 = _2836;
                frontier_phi_58_59_ladder_2 = _2834;
                frontier_phi_58_59_ladder_3 = _2832;
                frontier_phi_58_59_ladder_4 = _2828;
                frontier_phi_58_59_ladder_5 = _2826;
            }
            else
            {
                frontier_phi_58_59_ladder = _2677;
                frontier_phi_58_59_ladder_1 = _2683;
                frontier_phi_58_59_ladder_2 = _2681;
                frontier_phi_58_59_ladder_3 = _2679;
                frontier_phi_58_59_ladder_4 = _2675;
                frontier_phi_58_59_ladder_5 = _2673;
            }
            _2825 = frontier_phi_58_59_ladder_5;
            _2827 = frontier_phi_58_59_ladder_4;
            _2829 = frontier_phi_58_59_ladder;
            _2831 = frontier_phi_58_59_ladder_3;
            _2833 = frontier_phi_58_59_ladder_2;
            _2835 = frontier_phi_58_59_ladder_1;
        }
        float _2840 = isnan(1.0) ? _683 : (isnan(_683) ? 1.0 : min(_683, 1.0));
        _2510 = (_2840 * _2831) + _1962;
        _2512 = (_2840 * _2833) + _1964;
        _2514 = (_2840 * _2835) + _1966;
        _2516 = ((_2825 * 0.039999999105930328369140625) * _2840) + _2295;
        _2518 = ((_2827 * 0.039999999105930328369140625) * _2840) + _2297;
        _2520 = ((_2829 * 0.039999999105930328369140625) * _2840) + _2299;
    }
    else
    {
        _2510 = _1962;
        _2512 = _1964;
        _2514 = _1966;
        _2516 = _2295;
        _2518 = _2297;
        _2520 = _2299;
    }
    float _2540 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2541 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2542 = cbSceneParam._m0[86u].x * ((_618 / cbSceneParam._m0[86u].x) + ((_706 * cbMtdParam._m0[11u].y) * dot(vec3(_517, _518, _519), vec3(_207, _208, _209))));
    float _2543 = isnan(_2540) ? _2542 : (isnan(_2542) ? _2540 : min(_2542, _2540));
    float _2544 = isnan(_2541) ? _619 : (isnan(_619) ? _2541 : min(_619, _2541));
    vec4 _2546 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2543, _2544), 0.0);
    float _2548 = _2546.x;
    bool _2568 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2548)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2548))) > _539;
    vec4 _2572 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2568 ? _2543 : _618, _2568 ? _2544 : _619));
    float _4556 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4567 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4578 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _2596 = 0.959999978542327880859375 - (exp2(log2(1.0 - _698) * 5.0) * 0.959999978542327880859375);
    float _2598 = (_2572.x * _2596) * cbSceneParam._m0[72u].w;
    float _2600 = (_2572.y * _2596) * cbSceneParam._m0[72u].w;
    float _2602 = (_2572.z * _2596) * cbSceneParam._m0[72u].w;
    float _2610 = (_2598 + (((((_1736 * _1784.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1528) * _1800)) + _2516) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2510 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _683))) - _2598) * 0.5);
    float _2612 = (_2600 + (((((_1736 * _1784.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1528) * _1800)) + _2518) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2512 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _683))) - _2600) * 0.5);
    float _2614 = (_2602 + (((((_1736 * _1784.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1528) * _1800)) + _2520) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2514 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _683))) - _2602) * 0.5);
    uint _2615 = _658 + 6u;
    float _2623 = _618 / cbSceneParam._m0[86u].x;
    float _2624 = _619 / cbSceneParam._m0[86u].y;
    vec4 _2638 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2623, _2624, (log2((isnan(cbSceneParam._m0[77u].w) ? _539 : (isnan(_539) ? cbSceneParam._m0[77u].w : min(_539, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2640 = _2638.x;
    float _2641 = _2638.y;
    float _2642 = _2638.z;
    float _2643 = _2638.w;
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    if (_539 > cbSceneParam._m0[78u].w)
    {
        float _2698 = isnan(_539) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _539 : min(cbSceneParam._m0[80u].w, _539));
        float _2699 = _2698 / _539;
        float _2710 = _2699 * _590;
        float _2711 = _591 * _2699;
        float _2712 = (-0.0) - _2711;
        float _2713 = _2699 * _592;
        float _2715 = (cbSceneParam._m0[77u].w * _2712) / _2698;
        float _2716 = _2715 + cbSceneParam._m0[79u].w;
        float _2717 = cbSceneParam._m0[79u].w - _2711;
        float _2723 = sqrt(((_2710 * _2710) + (_2711 * _2711)) + (_2713 * _2713));
        float _2726 = (1.0 - (cbSceneParam._m0[77u].w / _2698)) * _2723;
        float _2731 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2733 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2942;
        if (abs((_2712 - _2715) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2942 = ((((_2716 > 0.0) ? exp2(_2731 * _2716) : (2.0 - exp2(_2733 * _2716))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2726;
        }
        else
        {
            float _2886 = 1.0 / cbSceneParam._m0[80u].x;
            float _2887 = isnan(_2717) ? _2716 : (isnan(_2716) ? _2717 : max(_2716, _2717));
            float _2888 = isnan(_2717) ? _2716 : (isnan(_2716) ? _2717 : min(_2716, _2717));
            float _2897 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : min(_2887, 0.0));
            float _2898 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : min(_2888, 0.0));
            _2942 = ((abs(_2723 / _2712) * cbSceneParam._m0[80u].y) * ((((_2897 - _2898) * 2.0) - ((exp2(_2731 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0)))) - exp2(_2731 * (isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0))))) * _2886)) - ((exp2(_2733 * _2897) - exp2(_2733 * _2898)) * _2886))) + (_2726 * cbSceneParam._m0[80u].z);
        }
        vec4 _2944 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2623, _2624, 1.0), 0.0);
        float _2953 = exp2((_2942 * (-1.44269502162933349609375)) * (1.0 - _2944.w));
        float _2954 = log2(_2953);
        float _2970 = log2(_2643);
        _2735 = (exp2(_2970 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].x)) * _2944.x) / cbSceneParam._m0[78u].x)) + _2640;
        _2737 = (exp2(_2970 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].y)) * _2944.y) / cbSceneParam._m0[78u].y)) + _2641;
        _2739 = (exp2(_2970 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].z)) * _2944.z) / cbSceneParam._m0[78u].z)) + _2642;
        _2741 = _2953 * _2643;
    }
    else
    {
        _2735 = _2640;
        _2737 = _2641;
        _2739 = _2642;
        _2741 = _2643;
    }
    bool _2980;
    float _2796;
    vec4 _2799;
    float _2801;
    vec4 _2803;
    float _2811;
    float _2812;
    float _2813;
    float _2814;
    bool _2824;
    for (;;)
    {
        bool _2753 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2754 = log2(_2741);
        float _2761 = exp2(_2754 * cbSceneParam._m0[78u].x) * _2610;
        float _2762 = exp2(_2754 * cbSceneParam._m0[78u].y) * _2612;
        float _2763 = exp2(_2754 * cbSceneParam._m0[78u].z) * _2614;
        vec4 _2771 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_618, _619));
        float _2773 = _2771.x;
        float _2794 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2773)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2773))) - _539) * cbMtdParam._m0[12u].z;
        float _4629 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        _2796 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * cbInstanceData._m0[_2615].w;
        float _2797 = _606 + (-0.5);
        _2799 = cbMtdParam._m0[1u];
        _2801 = _2799.y * _2797;
        _2803 = cbMatDynParam._m0[0u];
        float _2810 = (roundEven(_2803.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2811 = _2810 * (_2753 ? _2761 : (_2761 + (cbSceneParam._m0[72u].w * _2735)));
        _2812 = _2810 * (_2753 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2737)));
        _2813 = _2810 * (_2753 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2739)));
        _2814 = _2797 * 0.999000012874603271484375;
        _2824 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2824)
        {
            if ((cbInstanceData._m0[_658 + 7u].x + _2814) < 0.5)
            {
                _2980 = true;
                break;
            }
        }
        uint _2921 = _659 + uint(_2803.w);
        if ((cbInstanceData._m0[_2921].w < 1.0) && ((cbInstanceData._m0[_2921].w + _2814) < 0.5))
        {
            _2980 = true;
            break;
        }
        if ((_2801 + 1.0) < _2799.x)
        {
            _2980 = true;
            break;
        }
        _2980 = false;
        break;
    }
    float _3185;
    if (_2980)
    {
        discard_state = true;
        _3185 = 0.0;
    }
    else
    {
        _3185 = _2796;
    }
    SV_Target.x = _2811;
    SV_Target.y = _2812;
    SV_Target.z = _2813;
    SV_Target.w = _3185;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2796;
    discard_exit();
}


