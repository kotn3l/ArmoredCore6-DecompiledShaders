#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _897;
float _3312;
float _3313;
float _3314;
float _3315;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _237 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _257 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _257.x;
    vec4 _271 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _275 = _271.z;
    float _280 = (_271.x * 2.0) + (-1.0);
    float _282 = (_271.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3324 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))));
    float _294 = cbMtdParam._m0[10u].x + _271.w;
    float _297 = fma(_289, _215, fma(_282, _207 * TANGENT.x, (_193 * _186) * _280));
    float _300 = fma(_289, _216, fma(_282, _207 * TANGENT.y, (_193 * _187) * _280));
    float _303 = fma(_289, _217, fma(_282, _207 * TANGENT.z, (_193 * _188) * _280));
    float _307 = inversesqrt(dot(vec3(_297, _300, _303), vec3(_297, _300, _303)));
    float _308 = _307 * _297;
    float _309 = _307 * _300;
    float _310 = _307 * _303;
    float _3335 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _311 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _3346 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _3357 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3368 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3379 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3390 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _316 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _332 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _373 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _383 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _373);
    float _384 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _373);
    float _385 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _373);
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _390 = _383 * _389;
    float _391 = _384 * _389;
    float _392 = _385 * _389;
    vec4 _397 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _399 = _397.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _576 = sqrt(((_383 * _383) + (_384 * _384)) + (_385 * _385));
        float _582 = (cbMatDynParam._m0[5u].x * _576) + cbMatDynParam._m0[5u].y;
        float _3401 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        float _583 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _587 = (cbMatDynParam._m0[5u].z * _576) + cbMatDynParam._m0[5u].w;
        float _3412 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) - _583)) + _583) < ((_399 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _411 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _412 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _432 = fma(_310, cbSceneParam._m0[5u].z, fma(_309, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _308));
    float _435 = fma(_310, cbSceneParam._m0[6u].z, fma(_309, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _308));
    float _438 = fma(_310, cbSceneParam._m0[7u].z, fma(_309, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _308));
    uint _451 = uint(roundEven(NORMAL.w)) * 13u;
    uint _453 = _451 + 9u;
    uint _454 = _453 + uint(cbMatDynParam._m0[0u].w);
    float _460 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) * cbInstanceData._m0[_454].x;
    float _461 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0)))) * cbInstanceData._m0[_454].y;
    float _462 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * cbInstanceData._m0[_454].z;
    float _3423 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _3434 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _3445 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _466 = 1.0 - _316;
    float _467 = _463 * _466;
    float _468 = _464 * _466;
    float _469 = _465 * _466;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _316;
    float _475 = (_464 + (-0.039999999105930328369140625)) * _316;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _316;
    float _477 = _474 + 0.039999999105930328369140625;
    float _479 = _475 + 0.039999999105930328369140625;
    float _480 = _476 + 0.039999999105930328369140625;
    vec4 _489 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _411, cbSceneParam._m0[86u].y * _412));
    float _493 = ((isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * TEXCOORD.z) * _489.x;
    float _494 = dot(vec3(_308, _309, _310), vec3(_390, _391, _392));
    float _497 = _494 * 2.0;
    float _501 = (_497 * _308) - _390;
    float _502 = (_497 * _309) - _391;
    float _503 = (_497 * _310) - _392;
    float _507 = abs(dot(vec3(_390, _391, _392), vec3(_308, _309, _310)));
    float _3456 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _509 = sqrt(_311);
    float _522 = exp2((_509 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_509 * 3.0));
    float _528 = (1.0 - _522) * ((_509 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _529 = _522 * _509;
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _896;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _621 = fma(_565, cbModelParam._m0[26u].z, fma(_561, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _557));
        float _625 = fma(_565, cbModelParam._m0[27u].z, fma(_561, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _557));
        float _629 = fma(_565, cbModelParam._m0[28u].z, fma(_561, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _557));
        float _654 = _557 + _308;
        float _655 = _561 + _309;
        float _656 = _565 + _310;
        float _666 = fma(_656, cbModelParam._m0[26u].z, fma(_655, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _654)) - _621;
        float _667 = fma(_656, cbModelParam._m0[27u].z, fma(_655, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _654)) - _625;
        float _668 = fma(_656, cbModelParam._m0[28u].z, fma(_655, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _654)) - _629;
        float _672 = inversesqrt(dot(vec3(_666, _667, _668), vec3(_666, _667, _668)));
        float _685 = ((_672 * _666) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_621 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _686 = ((_672 * _667) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_625 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _687 = ((_672 * _668) / cbModelParam._m0[34u].z) + ((((((_629 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        float _724 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_690.x + (-0.5));
        float _726 = _724 * (_690.y + (-0.5));
        float _727 = _724 * (_690.z + (-0.5));
        float _734 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_697.x + (-0.5));
        float _736 = _734 * (_697.y + (-0.5));
        float _737 = _734 * (_697.z + (-0.5));
        float _744 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_704.x + (-0.5));
        float _746 = _744 * (_704.y + (-0.5));
        float _747 = _744 * (_704.z + (-0.5));
        float _754 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_711.x + (-0.5));
        float _756 = _754 * (_711.y + (-0.5));
        float _757 = _754 * (_711.z + (-0.5));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = _725 * 0.5;
        float _762 = _735 * 0.5;
        float _763 = _745 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _778 = (dot(vec3(_308, _309, _310), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3482 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _788 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3493 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3504 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * (_790 + 1.0))) + _795) * _758;
        float _805 = _726 * 0.5;
        float _806 = _736 * 0.5;
        float _807 = _746 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _821 = (dot(vec3(_308, _309, _310), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _830 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3537 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_832 + 1.0))) + _837) * _759;
        float _847 = _727 * 0.5;
        float _848 = _737 * 0.5;
        float _849 = _747 * 0.5;
        float _850 = dot(vec3(_847, _848, _849), vec3(_847, _848, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _863 = (dot(vec3(_308, _309, _310), vec3(_855 * _847, _855 * _848, _855 * _849)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _872 = sqrt(((_848 * _848) + (_847 * _847)) + (_849 * _849)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3570 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_874 + 1.0))) + _879) * _760;
        _896 = _727;
        _898 = _726;
        _899 = _725;
        _900 = _737;
        _901 = _736;
        _902 = _735;
        _903 = _747;
        _904 = _746;
        _905 = _745;
        _906 = _760;
        _907 = _759;
        _908 = _758;
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
    }
    else
    {
        _896 = _897;
        _898 = _897;
        _899 = _897;
        _900 = _897;
        _901 = _897;
        _902 = _897;
        _903 = _897;
        _904 = _897;
        _905 = _897;
        _906 = _897;
        _907 = _897;
        _908 = _897;
        _909 = 0.0;
        _910 = 0.0;
        _911 = 0.0;
    }
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _940 = fma(_565, cbModelParam._m0[30u].z, fma(_561, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _557));
        float _944 = fma(_565, cbModelParam._m0[31u].z, fma(_561, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _557));
        float _948 = fma(_565, cbModelParam._m0[32u].z, fma(_561, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _557));
        float _971 = _557 + _308;
        float _972 = _561 + _309;
        float _973 = _565 + _310;
        float _983 = fma(_973, cbModelParam._m0[30u].z, fma(_972, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _971)) - _940;
        float _984 = fma(_973, cbModelParam._m0[31u].z, fma(_972, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _971)) - _944;
        float _985 = fma(_973, cbModelParam._m0[32u].z, fma(_972, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _971)) - _948;
        float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
        float _1002 = ((_989 * _983) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_940 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_989 * _984) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_944 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_989 * _985) / cbModelParam._m0[35u].z) + ((((((_948 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        float _1039 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1006.x + (-0.5));
        float _1041 = _1039 * (_1006.y + (-0.5));
        float _1042 = _1039 * (_1006.z + (-0.5));
        float _1049 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1013.x + (-0.5));
        float _1051 = _1049 * (_1013.y + (-0.5));
        float _1052 = _1049 * (_1013.z + (-0.5));
        float _1059 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1020.x + (-0.5));
        float _1061 = _1059 * (_1020.y + (-0.5));
        float _1062 = _1059 * (_1020.z + (-0.5));
        float _1069 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1027.x + (-0.5));
        float _1071 = _1069 * (_1027.y + (-0.5));
        float _1072 = _1069 * (_1027.z + (-0.5));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = _1040 * 0.5;
        float _1077 = _1050 * 0.5;
        float _1078 = _1060 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_308, _309, _310), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3633 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1103 + 1.0))) + _1108) * _1073;
        float _1118 = _1041 * 0.5;
        float _1119 = _1051 * 0.5;
        float _1120 = _1061 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_308, _309, _310), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3666 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1145 + 1.0))) + _1150) * _1074;
        float _1160 = _1042 * 0.5;
        float _1161 = _1052 * 0.5;
        float _1162 = _1062 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_308, _309, _310), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3699 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1187 + 1.0))) + _1192) * _1075;
        _1209 = _1042;
        _1210 = _1041;
        _1211 = _1040;
        _1212 = _1052;
        _1213 = _1051;
        _1214 = _1050;
        _1215 = _1062;
        _1216 = _1061;
        _1217 = _1060;
        _1218 = _1075;
        _1219 = _1074;
        _1220 = _1073;
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
    }
    else
    {
        _1209 = _897;
        _1210 = _897;
        _1211 = _897;
        _1212 = _897;
        _1213 = _897;
        _1214 = _897;
        _1215 = _897;
        _1216 = _897;
        _1217 = _897;
        _1218 = _897;
        _1219 = _897;
        _1220 = _897;
        _1221 = 0.0;
        _1222 = 0.0;
        _1223 = 0.0;
    }
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _909)) + _909;
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _910)) + _910;
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _911)) + _911;
    float _1256 = fma(_1235, cbSceneParam._m0[89u].z, fma(_1234, cbSceneParam._m0[89u].y, _1233 * cbSceneParam._m0[89u].x));
    float _1259 = fma(_1235, cbSceneParam._m0[90u].z, fma(_1234, cbSceneParam._m0[90u].y, _1233 * cbSceneParam._m0[90u].x));
    float _1262 = fma(_1235, cbSceneParam._m0[91u].z, fma(_1234, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1233));
    float _1277 = _501 * 0.5;
    float _1278 = _502 * 0.5;
    float _1279 = _503 * 0.5;
    float _1280 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1283 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1286 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1320;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1293 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_896, _900, _903, _906));
        float _1297 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_898, _901, _904, _907));
        float _1301 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_899, _902, _905, _908));
        float _1308 = dot(vec4(cbModelParam._m0[39u]), vec4(_1277, _1278, _1279, 1.0));
        _1320 = dot(vec3(isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1308) ? 0.0 : (isnan(0.0) ? _1308 : max(0.0, _1308))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1320 = 1.0;
    }
    float _1331;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1322 = dot(vec4(cbModelParam._m0[40u]), vec4(_1277, _1278, _1279, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1322) ? 0.0 : (isnan(0.0) ? _1322 : max(0.0, _1322))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1335 = (_1331 * cbModelParam._m0[1u].x) + (_1320 * (1.0 - cbModelParam._m0[1u].x));
    float _1345 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _311);
    float _1346 = isnan(_1345) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1345 : min(cbModelParam._m0[25u].z, _1345));
    float _1428;
    float _1430;
    float _1432;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1395 = fma(_565, cbModelParam._m0[13u].z, fma(_561, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _557)) + cbModelParam._m0[13u].w;
        float _1399 = fma(_565, cbModelParam._m0[14u].z, fma(_561, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _557)) + cbModelParam._m0[14u].w;
        float _1403 = fma(_565, cbModelParam._m0[15u].z, fma(_561, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _557)) + cbModelParam._m0[15u].w;
        float _1406 = fma(_503, cbModelParam._m0[13u].z, fma(_502, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _501));
        float _1409 = fma(_503, cbModelParam._m0[14u].z, fma(_502, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _501));
        float _1412 = fma(_503, cbModelParam._m0[15u].z, fma(_502, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _501));
        float _1440;
        if (_1406 > 0.0)
        {
            _1440 = abs((1.0 - _1395) / _1406);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1395 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1440 = frontier_phi_19_17_ladder;
        }
        float _1669;
        if (_1409 > 0.0)
        {
            _1669 = abs((1.0 - _1399) / _1409);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1399 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1669 = frontier_phi_28_24_ladder;
        }
        float _1926;
        if (_1412 > 0.0)
        {
            _1926 = abs((1.0 - _1403) / _1412);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1403 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1926 = frontier_phi_40_35_ladder;
        }
        float _1928 = isnan(_1669) ? _1440 : (isnan(_1440) ? _1669 : min(_1440, _1669));
        float _1929 = isnan(_1926) ? _1928 : (isnan(_1928) ? _1926 : min(_1928, _1926));
        float _1933 = (_1929 * _1406) + _1395;
        float _1934 = (_1929 * _1409) + _1399;
        float _1935 = (_1929 * _1412) + _1403;
        float _1936 = _1929 * 9.9999997473787516355514526367188e-05;
        float _1938 = (-1.0) - _1936;
        float _1940 = _1936 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1935 > _1940) || ((_1935 < _1938) || ((_1934 > _1940) || ((_1934 < _1938) || ((_1933 < _1938) || (_1933 > _1940))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2063 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1935, cbModelParam._m0[9u].z, fma(_1934, cbModelParam._m0[9u].y, _1933 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1935, cbModelParam._m0[10u].z, fma(_1934, cbModelParam._m0[10u].y, _1933 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1935, cbModelParam._m0[11u].z, fma(_1934, cbModelParam._m0[11u].y, _1933 * cbModelParam._m0[11u].x))), _1346);
            frontier_phi_18_40_ladder = _2063.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2063.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2063.x * cbModelParam._m0[1u].y;
        }
        _1428 = frontier_phi_18_40_ladder_2;
        _1430 = frontier_phi_18_40_ladder_1;
        _1432 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1416 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_501, _502, _503), _1346);
        _1428 = _1416.x * cbModelParam._m0[1u].y;
        _1430 = _1416.y * cbModelParam._m0[1u].y;
        _1432 = _1416.z * cbModelParam._m0[1u].y;
    }
    float _1436 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _311);
    float _1437 = isnan(_1436) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1436 : min(cbModelParam._m0[25u].w, _1436));
    float _1530;
    float _1532;
    float _1534;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1494 = fma(_565, cbModelParam._m0[21u].z, fma(_561, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _557)) + cbModelParam._m0[21u].w;
        float _1498 = fma(_565, cbModelParam._m0[22u].z, fma(_561, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _557)) + cbModelParam._m0[22u].w;
        float _1502 = fma(_565, cbModelParam._m0[23u].z, fma(_561, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _557)) + cbModelParam._m0[23u].w;
        float _1505 = fma(_503, cbModelParam._m0[21u].z, fma(_502, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _501));
        float _1508 = fma(_503, cbModelParam._m0[22u].z, fma(_502, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _501));
        float _1511 = fma(_503, cbModelParam._m0[23u].z, fma(_502, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _501));
        float _1674;
        if (_1505 > 0.0)
        {
            _1674 = abs((1.0 - _1494) / _1505);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1494 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1674 = frontier_phi_30_26_ladder;
        }
        float _1953;
        if (_1508 > 0.0)
        {
            _1953 = abs((1.0 - _1498) / _1508);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1498 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1953 = frontier_phi_42_37_ladder;
        }
        float _2166;
        if (_1511 > 0.0)
        {
            _2166 = abs((1.0 - _1502) / _1511);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1502 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2166 = frontier_phi_51_48_ladder;
        }
        float _2168 = isnan(_1953) ? _1674 : (isnan(_1674) ? _1953 : min(_1674, _1953));
        float _2169 = isnan(_2166) ? _2168 : (isnan(_2168) ? _2166 : min(_2168, _2166));
        float _2173 = (_2169 * _1505) + _1494;
        float _2174 = (_2169 * _1508) + _1498;
        float _2175 = (_2169 * _1511) + _1502;
        float _2176 = _2169 * 9.9999997473787516355514526367188e-05;
        float _2177 = (-1.0) - _2176;
        float _2179 = _2176 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2175 > _2179) || ((_2175 < _2177) || ((_2174 > _2179) || ((_2174 < _2177) || ((_2173 < _2177) || (_2173 > _2179))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2373 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2175, cbModelParam._m0[17u].z, fma(_2174, cbModelParam._m0[17u].y, _2173 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2175, cbModelParam._m0[18u].z, fma(_2174, cbModelParam._m0[18u].y, _2173 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2175, cbModelParam._m0[19u].z, fma(_2174, cbModelParam._m0[19u].y, _2173 * cbModelParam._m0[19u].x))), _1437);
            frontier_phi_27_51_ladder = _2373.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2373.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2373.x * cbModelParam._m0[1u].z;
        }
        _1530 = frontier_phi_27_51_ladder_2;
        _1532 = frontier_phi_27_51_ladder_1;
        _1534 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_501, _502, _503), _1437);
        _1530 = _1514.x * cbModelParam._m0[1u].z;
        _1532 = _1514.y * cbModelParam._m0[1u].z;
        _1534 = _1514.z * cbModelParam._m0[1u].z;
    }
    float _1547 = (((_528 * _477) + _529) * _493) * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1549 = (((_528 * _479) + _529) * _493) * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1551 = (((_528 * _480) + _529) * _493) * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1554 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1549, cbSceneParam._m0[89u].y, _1547 * cbSceneParam._m0[89u].x));
    float _1557 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1549, cbSceneParam._m0[90u].y, _1547 * cbSceneParam._m0[90u].x));
    float _1560 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1549, cbSceneParam._m0[91u].y, _1547 * cbSceneParam._m0[91u].x));
    vec4 _1568 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_411, _412));
    float _1570 = _1568.w;
    float _1582 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1570);
    float _1583 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1570);
    float _1584 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1570);
    uvec4 _1588 = floatBitsToUint(cbInstanceData._m0[_451 + 5u]);
    uint _1590 = _1588.x * 14u;
    uint _1591 = _1590 + 13u;
    float _1598 = _493 + (-1.0);
    float _1603 = (cbLight._m0[_1591].x * _1598) + 1.0;
    float _1604 = (cbLight._m0[_1591].y * _1598) + 1.0;
    float _1605 = (cbLight._m0[_1591].z * _1598) + 1.0;
    float _1606 = (cbLight._m0[_1591].w * _1598) + 1.0;
    uint _1607 = _1590 + 5u;
    float _1613 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
    uint _1617 = _1590 + 4u;
    float _1627 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
    uint _1631 = _1590 | 1u;
    float _1642 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_308, _309, _310));
    float _1645 = dot(vec3(cbLight._m0[_1631].xyz), vec3(_308, _309, _310));
    float _3835 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _3846 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1650 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.3183098733425140380859375;
    float _1652 = (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * 0.3183098733425140380859375;
    float _1659 = ((cbLight._m0[_1607].x * _1613) * _1652) + (((cbLight._m0[_1617].x * _1582) * _1627) * _1650);
    float _1660 = ((_1613 * cbLight._m0[_1607].y) * _1652) + (((cbLight._m0[_1617].y * _1583) * _1627) * _1650);
    float _1661 = ((_1613 * cbLight._m0[_1607].z) * _1652) + (((cbLight._m0[_1617].z * _1584) * _1627) * _1650);
    uvec4 _1666 = floatBitsToUint(cbLight._m0[_1590 + 12u]);
    bool _1668 = _1666.x == 0u;
    float _1679;
    float _1681;
    float _1683;
    if (_1668)
    {
        _1679 = _1659;
        _1681 = _1660;
        _1683 = _1661;
    }
    else
    {
        uint _1687 = _1590 + 6u;
        float _1703 = (dot(vec3(cbLight._m0[_1590 + 2u].xyz), vec3(_308, _309, _310)) * 0.5) + 0.5;
        float _1704 = _1703 * _1703;
        float _3857 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1706 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
        _1679 = (((cbLight._m0[_1687].x * 0.3183098733425140380859375) * _1705) * _1706) + _1659;
        _1681 = (((cbLight._m0[_1687].y * 0.3183098733425140380859375) * _1705) * _1706) + _1660;
        _1683 = (((cbLight._m0[_1687].z * 0.3183098733425140380859375) * _1705) * _1706) + _1661;
    }
    bool _1686 = _1666.y == 0u;
    float _1724;
    float _1726;
    float _1728;
    if (_1686)
    {
        _1724 = _1679;
        _1726 = _1681;
        _1728 = _1683;
    }
    else
    {
        uint _1897 = _1590 + 7u;
        float _1913 = (dot(vec3(cbLight._m0[_1590 + 3u].xyz), vec3(_308, _309, _310)) * 0.5) + 0.5;
        float _1914 = _1913 * _1913;
        float _3873 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1915 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1916 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _1724 = (((cbLight._m0[_1897].x * 0.3183098733425140380859375) * _1915) * _1916) + _1679;
        _1726 = (((cbLight._m0[_1897].y * 0.3183098733425140380859375) * _1915) * _1916) + _1681;
        _1728 = (((cbLight._m0[_1897].z * 0.3183098733425140380859375) * _1915) * _1916) + _1683;
    }
    uint _1731 = _1590 + 8u;
    float _1744 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1590].w)) * _311) * 0.949999988079071044921875);
    float _1745 = _1744 * _1744;
    float _1746 = cbLight._m0[_1590].x + _390;
    float _1747 = cbLight._m0[_1590].y + _391;
    float _1748 = cbLight._m0[_1590].z + _392;
    float _1752 = inversesqrt(dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748)));
    float _1753 = _1752 * _1746;
    float _1754 = _1752 * _1747;
    float _1755 = _1752 * _1748;
    float _1756 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1590].xyz));
    float _3889 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1759 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _1760 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _1761 = dot(vec3(_308, _309, _310), vec3(_1753, _1754, _1755));
    float _3911 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _1765 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_1753, _1754, _1755));
    float _3922 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1769 = _1745 * _1745;
    float _1773 = ((_1764 * _1764) * (_1769 + (-1.0))) + 1.0;
    float _1781 = exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0);
    float _1782 = 0.959999978542327880859375 - _474;
    float _1784 = 0.959999978542327880859375 - _475;
    float _1785 = 0.959999978542327880859375 - _476;
    float _1792 = 1.0 - _1745;
    float _1803 = (0.5 / (((_1760 * ((_1759 * _1792) + _1745)) + 9.9999999392252902907785028219223e-09) + (((_1760 * _1792) + _1745) * _1759))) * _1759;
    float _3933 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1805 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1769 / ((_1773 * _1773) * 3.141590118408203125));
    uint _1819 = _1590 + 9u;
    float _1830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1631].w)) * _311) * 0.949999988079071044921875);
    float _1831 = _1830 * _1830;
    float _1832 = cbLight._m0[_1631].x + _390;
    float _1833 = cbLight._m0[_1631].y + _391;
    float _1834 = cbLight._m0[_1631].z + _392;
    float _1838 = inversesqrt(dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834)));
    float _1839 = _1838 * _1832;
    float _1840 = _1838 * _1833;
    float _1841 = _1838 * _1834;
    float _1842 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1631].xyz));
    float _3944 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1845 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1846 = dot(vec3(_308, _309, _310), vec3(_1839, _1840, _1841));
    float _3955 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1849 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _1850 = dot(vec3(cbLight._m0[_1631].xyz), vec3(_1839, _1840, _1841));
    float _3966 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1854 = _1831 * _1831;
    float _1858 = ((_1849 * _1849) * (_1854 + (-1.0))) + 1.0;
    float _1865 = exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0);
    float _1872 = 1.0 - _1831;
    float _1882 = (0.5 / (((_1760 * ((_1845 * _1872) + _1831)) + 9.9999999392252902907785028219223e-09) + (((_1760 * _1872) + _1831) * _1845))) * _1845;
    float _3977 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1884 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1854 / ((_1858 * _1858) * 3.141590118408203125));
    float _1894 = (((((_1865 * _1782) + _477) * cbLight._m0[_1819].x) * _1884) * _1613) + ((((cbLight._m0[_1731].x * _1582) * ((_1781 * _1782) + _477)) * _1805) * _1627);
    float _1895 = (((((_1865 * _1784) + _479) * cbLight._m0[_1819].y) * _1884) * _1613) + ((((cbLight._m0[_1731].y * _1583) * ((_1781 * _1784) + _479)) * _1805) * _1627);
    float _1896 = (((((_1865 * _1785) + _480) * cbLight._m0[_1819].z) * _1884) * _1613) + ((((cbLight._m0[_1731].z * _1584) * ((_1781 * _1785) + _480)) * _1805) * _1627);
    float _1958;
    float _1960;
    float _1962;
    if (_1668)
    {
        _1958 = _1894;
        _1960 = _1895;
        _1962 = _1896;
    }
    else
    {
        uint _1964 = _1590 + 2u;
        uint _1968 = _1590 + 10u;
        float _1982 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1964].w)) * _311) * 0.949999988079071044921875);
        float _1983 = _1982 * _1982;
        float _1984 = cbLight._m0[_1964].x + _390;
        float _1985 = cbLight._m0[_1964].y + _391;
        float _1986 = cbLight._m0[_1964].z + _392;
        float _1990 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
        float _1991 = _1990 * _1984;
        float _1992 = _1990 * _1985;
        float _1993 = _1990 * _1986;
        float _1994 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1964].xyz));
        float _3988 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _1997 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1998 = dot(vec3(_308, _309, _310), vec3(_1991, _1992, _1993));
        float _3999 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2001 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _2002 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_1991, _1992, _1993));
        float _4010 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2006 = _1983 * _1983;
        float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
        float _2017 = exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0);
        float _2024 = 1.0 - _1983;
        float _2034 = (0.5 / (((_1760 * ((_1997 * _2024) + _1983)) + 9.9999999392252902907785028219223e-09) + (((_1760 * _2024) + _1983) * _1997))) * _1997;
        float _4021 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2036 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
        float _2037 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
        _1958 = (((((_2017 * _1782) + _477) * cbLight._m0[_1968].x) * _2036) * _2037) + _1894;
        _1960 = (((((_2017 * _1784) + _479) * cbLight._m0[_1968].y) * _2036) * _2037) + _1895;
        _1962 = (((((_2017 * _1785) + _480) * cbLight._m0[_1968].z) * _2036) * _2037) + _1896;
    }
    float _2072;
    float _2074;
    float _2076;
    if (_1686)
    {
        _2072 = _1958;
        _2074 = _1960;
        _2076 = _1962;
    }
    else
    {
        uint _2083 = _1590 + 3u;
        uint _2087 = _1590 + 11u;
        float _2101 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _311) * 0.949999988079071044921875);
        float _2102 = _2101 * _2101;
        float _2103 = cbLight._m0[_2083].x + _390;
        float _2104 = cbLight._m0[_2083].y + _391;
        float _2105 = cbLight._m0[_2083].z + _392;
        float _2109 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
        float _2110 = _2109 * _2103;
        float _2111 = _2109 * _2104;
        float _2112 = _2109 * _2105;
        float _2113 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_2083].xyz));
        float _4037 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2116 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2117 = dot(vec3(_308, _309, _310), vec3(_2110, _2111, _2112));
        float _4048 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2121 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2110, _2111, _2112));
        float _4059 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2125 = _2102 * _2102;
        float _2129 = ((_2120 * _2120) * (_2125 + (-1.0))) + 1.0;
        float _2136 = exp2(log2(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * 5.0);
        float _2143 = 1.0 - _2102;
        float _2153 = (0.5 / (((_1760 * ((_2116 * _2143) + _2102)) + 9.9999999392252902907785028219223e-09) + (((_1760 * _2143) + _2102) * _2116))) * _2116;
        float _4070 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2155 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2125 / ((_2129 * _2129) * 3.141590118408203125));
        float _2156 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _2072 = (((((_2136 * _1782) + _477) * cbLight._m0[_2087].x) * _2155) * _2156) + _1958;
        _2074 = (((((_2136 * _1784) + _479) * cbLight._m0[_2087].y) * _2155) * _2156) + _1960;
        _2076 = (((((_2136 * _1785) + _480) * cbLight._m0[_2087].z) * _2155) * _2156) + _1962;
    }
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    float _2298;
    float _2300;
    if (_1588.y == 0u)
    {
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2231;
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2231;
        float _2234 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2231;
        uvec4 _2246 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2247 = _2246.x;
        uint _2258 = uint((float(_2246.y) * floor(float(uint(cbSceneParam._m0[85u].y * _412) / _2247))) + floor(float(uint(cbSceneParam._m0[85u].x * _411) / _2247)));
        float _2268 = (log2(_2234 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2269 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        uint _2272 = uint(isnan(14.0) ? _2269 : (isnan(_2269) ? 14.0 : min(_2269, 14.0)));
        uvec4 _2277 = texelFetch(g_lightClusterGridBuffer, int(((_2272 << 2u) + (_2258 << 6u)) >> 2u));
        uint _2278 = _2277.x;
        uint _2279 = _2246.z;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        if (((((1u << ((_2279 >> 4u) & 15u)) + 4294967295u) & _2278) == 0u) || ((_2279 & 240u) == 0u))
        {
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
        }
        else
        {
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2389;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            uint _2536 = 0u;
            uint _2545;
            bool _2546;
            for (;;)
            {
                _2545 = texelFetch(g_lightClassification, int((((_2272 << 5u) + (_2258 << 9u)) + (_2536 << 2u)) >> 2u)).x;
                _2546 = _2545 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2546)
                {
                    frontier_phi_68_pred = _2532;
                    frontier_phi_68_pred_1 = _2535;
                    frontier_phi_68_pred_2 = _2534;
                    frontier_phi_68_pred_3 = _2533;
                    frontier_phi_68_pred_4 = _2531;
                    frontier_phi_68_pred_5 = _2530;
                }
                else
                {
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    uint _2681;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2533;
                    _2679 = _2534;
                    _2680 = _2535;
                    _2681 = _2545;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    for (;;)
                    {
                        uint _2685 = uint(findLSB(_2681)) + (_2536 << 5u);
                        uint _2682 = (_2681 + 4294967295u) & _2681;
                        uint _2687 = _2685 * 48u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 3u)).x));
                        uint _2707 = (_2685 * 48u) + 4u;
                        vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 3u)).x));
                        uint _2726 = (_2685 * 48u) + 8u;
                        vec3 _2737 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x));
                        float _2741 = _2701.x - _2232;
                        float _2742 = _2701.y - _2233;
                        float _2743 = _2701.z - _2234;
                        float _2744 = dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743));
                        float _2747 = inversesqrt(_2744);
                        float _2748 = _2747 * _2741;
                        float _2749 = _2747 * _2742;
                        float _2750 = _2747 * _2743;
                        float _2751 = dot(vec3(_432, _435, _438), vec3(_2748, _2749, _2750));
                        float _2756 = 1.0 - (_2744 * _2701.w);
                        float _4096 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2757 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2758 = sqrt(_2744) * _2720.w;
                        float _2761 = 1.39999997615814208984375 / (_2758 + 1.39999997615814208984375);
                        float _2762 = _2761 * _2761;
                        float _2765 = ((1.0 - _2762) * _2751) + _2762;
                        float _2768 = _2758 * _2758;
                        float _2772 = ((isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))) * _2757) / ((_2768 * 0.699999988079071044921875) + 1.0);
                        float _2776 = (-0.0) - _2232;
                        float _2777 = (-0.0) - _2233;
                        float _2778 = (-0.0) - _2234;
                        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
                        float _2783 = _2782 * _2776;
                        float _2784 = _2782 * _2777;
                        float _2785 = _2782 * _2778;
                        float _2793 = exp2(log2(1.0 / ((_2768 * 3.5) + 5.0)) * 0.25);
                        float _2794 = 1.0 - _509;
                        float _2801 = sqrt(1.0 - ((1.0 - (_2794 * _2794)) * (1.0 - (_2793 * _2793))));
                        float _2802 = _2801 * _2801;
                        float _2803 = _2802 * _2802;
                        float _2804 = _2783 + _2748;
                        float _2805 = _2784 + _2749;
                        float _2806 = _2785 + _2750;
                        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
                        float _2814 = dot(vec3(_432, _435, _438), vec3(_2783, _2784, _2785));
                        float _4112 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2817 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2818 = dot(vec3(_432, _435, _438), vec3(_2810 * _2804, _2810 * _2805, _2810 * _2806));
                        float _4123 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2821 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2825 = ((_2821 * _2821) * (_2803 + (-1.0))) + 1.0;
                        float _2826 = _2761 * _2802;
                        float _2827 = _2826 * _2826;
                        float _2830 = ((1.0 - _2827) * _2751) + _2827;
                        float _4134 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2831 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2832 = 1.0 - _2802;
                        float _2842 = (0.5 / (((_2831 * ((_2817 * _2832) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2831 * _2832) + _2802) * _2817))) * _2831;
                        float _4145 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2853 = (((_2803 * 3.1415927410125732421875) * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) / ((_2825 * _2825) * ((_2768 * 2.1991131305694580078125) + 3.141590118408203125))) * _2757;
                        _2605 = (_2772 * _2720.x) + _2678;
                        _2606 = (_2772 * _2720.y) + _2679;
                        _2607 = (_2772 * _2720.z) + _2680;
                        _2602 = (_2853 * _2737.x) + _2675;
                        _2603 = (_2853 * _2737.y) + _2676;
                        _2604 = (_2853 * _2737.z) + _2677;
                        if (_2682 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2605;
                            _2679 = _2606;
                            _2680 = _2607;
                            _2681 = _2682;
                        }
                    }
                    frontier_phi_68_pred = _2604;
                    frontier_phi_68_pred_1 = _2607;
                    frontier_phi_68_pred_2 = _2606;
                    frontier_phi_68_pred_3 = _2605;
                    frontier_phi_68_pred_4 = _2603;
                    frontier_phi_68_pred_5 = _2602;
                }
                _2383 = frontier_phi_68_pred;
                _2389 = frontier_phi_68_pred_1;
                _2387 = frontier_phi_68_pred_2;
                _2385 = frontier_phi_68_pred_3;
                _2381 = frontier_phi_68_pred_4;
                _2379 = frontier_phi_68_pred_5;
                uint _2537 = _2536 + 1u;
                if (_2537 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2530 = _2379;
                    _2531 = _2381;
                    _2532 = _2383;
                    _2533 = _2385;
                    _2534 = _2387;
                    _2535 = _2389;
                    _2536 = _2537;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
        }
        uvec4 _2392 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2393 = _2392.z;
        uint _2395 = (_2393 >> 8u) & 15u;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        if (((4294967295u << _2395) & _2278) == 0u)
        {
            _2498 = _2378;
            _2500 = _2380;
            _2502 = _2382;
            _2504 = _2384;
            _2506 = _2386;
            _2508 = _2388;
        }
        else
        {
            float _2523 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
            float _2524 = _2523 * _2232;
            float _2525 = _2523 * _2233;
            float _2526 = _2523 * _2234;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2395 < ((_2393 >> 12u) & 15u))
            {
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2658 = _2378;
                float _2659 = _2380;
                float _2660 = _2382;
                float _2661 = _2384;
                float _2662 = _2386;
                float _2663 = _2388;
                uint _2664 = _2395;
                uint _2673;
                bool _2674;
                for (;;)
                {
                    _2673 = texelFetch(g_lightClassification, int((((_2272 << 5u) + (_2258 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                    _2674 = _2673 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2674)
                    {
                        frontier_phi_79_pred = _2663;
                        frontier_phi_79_pred_1 = _2662;
                        frontier_phi_79_pred_2 = _2661;
                        frontier_phi_79_pred_3 = _2660;
                        frontier_phi_79_pred_4 = _2659;
                        frontier_phi_79_pred_5 = _2658;
                    }
                    else
                    {
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _2880 = _2658;
                        float _2881 = _2659;
                        float _2882 = _2660;
                        float _2883 = _2661;
                        float _2884 = _2662;
                        float _2885 = _2663;
                        uint _2886 = _2673;
                        uint _2887;
                        vec4 _2912;
                        float _2913;
                        vec4 _2928;
                        vec3 _2940;
                        vec4 _2956;
                        vec4 _2972;
                        float _3019;
                        bool _3020;
                        for (;;)
                        {
                            uint _2897 = ((_2664 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2886));
                            _2887 = (_2886 + 4294967295u) & _2886;
                            uint _2899 = _2897 * 40u;
                            _2912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 3u)).x));
                            _2913 = _2912.w;
                            uint _2915 = (_2897 * 40u) + 4u;
                            _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            uint _2930 = (_2897 * 40u) + 8u;
                            _2940 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x));
                            uint _2943 = (_2897 * 40u) + 16u;
                            _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2959 = (_2897 * 40u) + 20u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            uint _2975 = (_2897 * 40u) + 24u;
                            vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2994 = (_2897 * 40u) + 28u;
                            vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            _3019 = fma(_2234, _3007.z, fma(_2233, _3007.y, _3007.x * _2232)) + _3007.w;
                            _3020 = !((fma(_2234, _2988.z, fma(_2233, _2988.y, _2988.x * _2232)) + _2988.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3020)
                            {
                                float _3047 = _2912.x - _2232;
                                float _3048 = _2912.y - _2233;
                                float _3049 = _2912.z - _2234;
                                float _3050 = dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049));
                                float _3053 = inversesqrt(_3050);
                                float _3054 = _3053 * _3047;
                                float _3055 = _3053 * _3048;
                                float _3056 = _3053 * _3049;
                                float _3060 = 1.0 - (_3050 / (_2913 * _2913));
                                float _4156 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3061 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3065 = sqrt(_3050) * _2928.w;
                                float _3067 = 1.39999997615814208984375 / (_3065 + 1.39999997615814208984375);
                                float _3068 = _3067 * _3067;
                                float _3071 = ((1.0 - _3068) * dot(vec3(_3054, _3055, _3056), vec3(_432, _435, _438))) + _3068;
                                float _3074 = _3065 * _3065;
                                float _3078 = (fma(_2234, _2956.z, fma(_2233, _2956.y, _2956.x * _2232)) + _2956.w) / _3019;
                                float _3079 = (fma(_2234, _2972.z, fma(_2233, _2972.y, _2972.x * _2232)) + _2972.w) / _3019;
                                float _3083 = 1.0 - dot(vec2(_3078, _3079), vec2(_3078, _3079));
                                float _4172 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3084 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3085 = _3084 * (((isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))) * _3061) / ((_3074 * 0.699999988079071044921875) + 1.0));
                                float _3097 = exp2(log2(1.0 / ((_3074 * 3.5) + 5.0)) * 0.25);
                                float _3098 = 1.0 - _509;
                                float _3105 = sqrt(1.0 - ((1.0 - (_3098 * _3098)) * (1.0 - (_3097 * _3097))));
                                float _3106 = _3105 * _3105;
                                float _3107 = _3106 * _3106;
                                float _3108 = _3054 - _2524;
                                float _3109 = _3055 - _2525;
                                float _3110 = _3056 - _2526;
                                float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                                float _3118 = dot(vec3(_432, _435, _438), vec3((-0.0) - _2524, (-0.0) - _2525, (-0.0) - _2526));
                                float _4183 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3121 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3122 = dot(vec3(_432, _435, _438), vec3(_3114 * _3108, _3114 * _3109, _3114 * _3110));
                                float _4194 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3125 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3129 = ((_3125 * _3125) * (_3107 + (-1.0))) + 1.0;
                                float _3130 = _3067 * _3106;
                                float _3131 = _3130 * _3130;
                                float _3137 = ((1.0 - _3131) * dot(vec3(_432, _435, _438), vec3(_3054, _3055, _3056))) + _3131;
                                float _4205 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3139 = 1.0 - _3106;
                                float _3149 = (0.5 / (((_3138 * ((_3121 * _3139) + _3106)) + 9.9999999392252902907785028219223e-09) + (((_3138 * _3139) + _3106) * _3121))) * _3138;
                                float _4216 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3159 = (_3084 * _3061) * (((_3107 * 3.1415927410125732421875) * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) / ((_3129 * _3129) * ((_3074 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3085 * _2928.z;
                                frontier_phi_85_pred_1 = _3085 * _2928.y;
                                frontier_phi_85_pred_2 = _3085 * _2928.x;
                                frontier_phi_85_pred_3 = _3159 * _2940.z;
                                frontier_phi_85_pred_4 = _3159 * _2940.y;
                                frontier_phi_85_pred_5 = _3159 * _2940.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3168 = frontier_phi_85_pred;
                            _3167 = frontier_phi_85_pred_1;
                            _3166 = frontier_phi_85_pred_2;
                            _3165 = frontier_phi_85_pred_3;
                            _3164 = frontier_phi_85_pred_4;
                            _3163 = frontier_phi_85_pred_5;
                            _2870 = _3166 + _2883;
                            _2871 = _3167 + _2884;
                            _2872 = _3168 + _2885;
                            _2867 = _3163 + _2880;
                            _2868 = _3164 + _2881;
                            _2869 = _3165 + _2882;
                            if (_2887 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2887;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2872;
                        frontier_phi_79_pred_1 = _2871;
                        frontier_phi_79_pred_2 = _2870;
                        frontier_phi_79_pred_3 = _2869;
                        frontier_phi_79_pred_4 = _2868;
                        frontier_phi_79_pred_5 = _2867;
                    }
                    _2509 = frontier_phi_79_pred;
                    _2507 = frontier_phi_79_pred_1;
                    _2505 = frontier_phi_79_pred_2;
                    _2503 = frontier_phi_79_pred_3;
                    _2501 = frontier_phi_79_pred_4;
                    _2499 = frontier_phi_79_pred_5;
                    uint _2665 = _2664 + 1u;
                    if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2658 = _2499;
                        _2659 = _2501;
                        _2660 = _2503;
                        _2661 = _2505;
                        _2662 = _2507;
                        _2663 = _2509;
                        _2664 = _2665;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2505;
                frontier_phi_60_61_ladder_1 = _2509;
                frontier_phi_60_61_ladder_2 = _2507;
                frontier_phi_60_61_ladder_3 = _2503;
                frontier_phi_60_61_ladder_4 = _2501;
                frontier_phi_60_61_ladder_5 = _2499;
            }
            else
            {
                frontier_phi_60_61_ladder = _2384;
                frontier_phi_60_61_ladder_1 = _2388;
                frontier_phi_60_61_ladder_2 = _2386;
                frontier_phi_60_61_ladder_3 = _2382;
                frontier_phi_60_61_ladder_4 = _2380;
                frontier_phi_60_61_ladder_5 = _2378;
            }
            _2498 = frontier_phi_60_61_ladder_5;
            _2500 = frontier_phi_60_61_ladder_4;
            _2502 = frontier_phi_60_61_ladder_3;
            _2504 = frontier_phi_60_61_ladder;
            _2506 = frontier_phi_60_61_ladder_2;
            _2508 = frontier_phi_60_61_ladder_1;
        }
        float _2513 = isnan(1.0) ? _493 : (isnan(_493) ? 1.0 : min(_493, 1.0));
        _2290 = (_2513 * _2504) + _1724;
        _2292 = (_2513 * _2506) + _1726;
        _2294 = (_2513 * _2508) + _1728;
        _2296 = ((_2498 * _477) * _2513) + _2072;
        _2298 = ((_2500 * _479) * _2513) + _2074;
        _2300 = ((_2502 * _480) * _2513) + _2076;
    }
    else
    {
        _2290 = _1724;
        _2292 = _1726;
        _2294 = _1728;
        _2296 = _2072;
        _2298 = _2074;
        _2300 = _2076;
    }
    float _4232 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4243 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4254 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _2317 = ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2290 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _493))) + ((_2296 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1335)) * cbPerFrame._m0[3u].x);
    float _2318 = ((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2292 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _493))) + ((_2298 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1335)) * cbPerFrame._m0[3u].x);
    float _2319 = ((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2294 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _493))) + ((_2300 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1335)) * cbPerFrame._m0[3u].x);
    uint _2320 = _451 + 6u;
    float _2328 = _411 / cbSceneParam._m0[86u].x;
    float _2329 = _412 / cbSceneParam._m0[86u].y;
    vec4 _2343 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, (log2((isnan(cbSceneParam._m0[77u].w) ? _332 : (isnan(_332) ? cbSceneParam._m0[77u].w : min(_332, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2345 = _2343.x;
    float _2346 = _2343.y;
    float _2347 = _2343.z;
    float _2348 = _2343.w;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    if (_332 > cbSceneParam._m0[78u].w)
    {
        float _2403 = isnan(_332) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _332 : min(cbSceneParam._m0[80u].w, _332));
        float _2404 = _2403 / _332;
        float _2415 = _2404 * _383;
        float _2416 = _384 * _2404;
        float _2417 = (-0.0) - _2416;
        float _2418 = _2404 * _385;
        float _2420 = (cbSceneParam._m0[77u].w * _2417) / _2403;
        float _2421 = _2420 + cbSceneParam._m0[79u].w;
        float _2422 = cbSceneParam._m0[79u].w - _2416;
        float _2428 = sqrt(((_2415 * _2415) + (_2416 * _2416)) + (_2418 * _2418));
        float _2431 = (1.0 - (cbSceneParam._m0[77u].w / _2403)) * _2428;
        float _2436 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2438 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2615;
        if (abs((_2417 - _2420) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2615 = ((((_2421 > 0.0) ? exp2(_2436 * _2421) : (2.0 - exp2(_2438 * _2421))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2431;
        }
        else
        {
            float _2559 = 1.0 / cbSceneParam._m0[80u].x;
            float _2560 = isnan(_2422) ? _2421 : (isnan(_2421) ? _2422 : max(_2421, _2422));
            float _2561 = isnan(_2422) ? _2421 : (isnan(_2421) ? _2422 : min(_2421, _2422));
            float _2570 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : min(_2560, 0.0));
            float _2571 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : min(_2561, 0.0));
            _2615 = ((abs(_2428 / _2417) * cbSceneParam._m0[80u].y) * ((((_2570 - _2571) * 2.0) - ((exp2(_2436 * (isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0)))) - exp2(_2436 * (isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0))))) * _2559)) - ((exp2(_2438 * _2570) - exp2(_2438 * _2571)) * _2559))) + (_2431 * cbSceneParam._m0[80u].z);
        }
        vec4 _2617 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, 1.0), 0.0);
        float _2626 = exp2((_2615 * (-1.44269502162933349609375)) * (1.0 - _2617.w));
        float _2627 = log2(_2626);
        float _2643 = log2(_2348);
        _2440 = (exp2(_2643 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2627 * cbSceneParam._m0[78u].x)) * _2617.x) / cbSceneParam._m0[78u].x)) + _2345;
        _2442 = (exp2(_2643 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2627 * cbSceneParam._m0[78u].y)) * _2617.y) / cbSceneParam._m0[78u].y)) + _2346;
        _2444 = (exp2(_2643 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2627 * cbSceneParam._m0[78u].z)) * _2617.z) / cbSceneParam._m0[78u].z)) + _2347;
        _2446 = _2626 * _2348;
    }
    else
    {
        _2440 = _2345;
        _2442 = _2346;
        _2444 = _2347;
        _2446 = _2348;
    }
    bool _2653;
    vec4 _2456;
    vec4 _2478;
    float _2480;
    float _2484;
    float _2485;
    float _2486;
    float _2487;
    bool _2497;
    for (;;)
    {
        _2456 = cbMatDynParam._m0[0u];
        float _2458 = roundEven(_2456.y);
        bool _2459 = _2458 == 3.0;
        float _2460 = log2(_2446);
        float _2467 = exp2(_2460 * cbSceneParam._m0[78u].x) * _2317;
        float _2468 = exp2(_2460 * cbSceneParam._m0[78u].y) * _2318;
        float _2469 = exp2(_2460 * cbSceneParam._m0[78u].z) * _2319;
        float _2476 = _399 + (-0.5);
        _2478 = cbMtdParam._m0[1u];
        _2480 = _2478.y * _2476;
        float _2483 = (_2458 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2484 = _2483 * (_2459 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2440)));
        _2485 = _2483 * (_2459 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2442)));
        _2486 = _2483 * (_2459 ? _2469 : (_2469 + (cbSceneParam._m0[72u].w * _2444)));
        _2487 = _2476 * 0.999000012874603271484375;
        _2497 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2497)
        {
            if ((cbInstanceData._m0[_451 + 7u].x + _2487) < 0.5)
            {
                _2653 = true;
                break;
            }
        }
        uint _2594 = _453 + uint(_2456.w);
        if ((cbInstanceData._m0[_2594].w < 1.0) && ((cbInstanceData._m0[_2594].w + _2487) < 0.5))
        {
            _2653 = true;
            break;
        }
        if ((_2480 + 1.0) < _2478.x)
        {
            _2653 = true;
            break;
        }
        _2653 = false;
        break;
    }
    float _2858;
    if (_2653)
    {
        discard_state = true;
        _2858 = 0.0;
    }
    else
    {
        _2858 = cbInstanceData._m0[_2320].w;
    }
    SV_Target.x = _2484;
    SV_Target.y = _2485;
    SV_Target.z = _2486;
    SV_Target.w = _2858;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2320].w;
    discard_exit();
}


