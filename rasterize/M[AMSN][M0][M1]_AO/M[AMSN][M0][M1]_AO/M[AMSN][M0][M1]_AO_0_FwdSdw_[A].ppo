#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _899;
float _3573;
float _3574;
float _3575;
float _3576;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _239 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _259 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _261 = _259.x;
    vec4 _273 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _277 = _273.z;
    float _282 = (_273.x * 2.0) + (-1.0);
    float _284 = (_273.y * 2.0) + (-1.0);
    float _285 = dot(vec2(_282, _284), vec2(_282, _284));
    float _3585 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = sqrt(1.0 - (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))));
    float _296 = cbMtdParam._m0[10u].x + _273.w;
    float _299 = fma(_291, _217, fma(_284, _209 * TANGENT.x, (_195 * _188) * _282));
    float _302 = fma(_291, _218, fma(_284, _209 * TANGENT.y, (_195 * _189) * _282));
    float _305 = fma(_291, _219, fma(_284, _209 * TANGENT.z, (_195 * _190) * _282));
    float _309 = inversesqrt(dot(vec3(_299, _302, _305), vec3(_299, _302, _305)));
    float _310 = _309 * _299;
    float _311 = _309 * _302;
    float _312 = _309 * _305;
    float _3596 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _313 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3618 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3629 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3640 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3651 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _318 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _334 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _375 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _385 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _375);
    float _386 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _375);
    float _387 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _375);
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _392 = _385 * _391;
    float _393 = _386 * _391;
    float _394 = _387 * _391;
    vec4 _399 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _401 = _399.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _578 = sqrt(((_385 * _385) + (_386 * _386)) + (_387 * _387));
        float _584 = (cbMatDynParam._m0[5u].x * _578) + cbMatDynParam._m0[5u].y;
        float _3662 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        float _585 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _589 = (cbMatDynParam._m0[5u].z * _578) + cbMatDynParam._m0[5u].w;
        float _3673 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) - _585)) + _585) < ((_401 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _413 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _414 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _434 = fma(_312, cbSceneParam._m0[5u].z, fma(_311, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _310));
    float _437 = fma(_312, cbSceneParam._m0[6u].z, fma(_311, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _310));
    float _440 = fma(_312, cbSceneParam._m0[7u].z, fma(_311, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _310));
    uint _453 = uint(roundEven(NORMAL.w)) * 13u;
    uint _455 = _453 + 9u;
    uint _456 = _455 + uint(cbMatDynParam._m0[0u].w);
    float _462 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_456].x;
    float _463 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * cbInstanceData._m0[_456].y;
    float _464 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_456].z;
    float _3684 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _466 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _468 = 1.0 - _318;
    float _469 = _465 * _468;
    float _470 = _466 * _468;
    float _471 = _467 * _468;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _318;
    float _477 = (_466 + (-0.039999999105930328369140625)) * _318;
    float _478 = (_467 + (-0.039999999105930328369140625)) * _318;
    float _479 = _476 + 0.039999999105930328369140625;
    float _481 = _477 + 0.039999999105930328369140625;
    float _482 = _478 + 0.039999999105930328369140625;
    vec4 _491 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _413, cbSceneParam._m0[86u].y * _414));
    float _495 = ((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * TEXCOORD.z) * _491.x;
    float _496 = dot(vec3(_310, _311, _312), vec3(_392, _393, _394));
    float _499 = _496 * 2.0;
    float _503 = (_499 * _310) - _392;
    float _504 = (_499 * _311) - _393;
    float _505 = (_499 * _312) - _394;
    float _509 = abs(dot(vec3(_392, _393, _394), vec3(_310, _311, _312)));
    float _3717 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _511 = sqrt(_313);
    float _524 = exp2((_511 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_511 * 3.0));
    float _530 = (1.0 - _524) * ((_511 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _531 = _524 * _511;
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _567 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _898;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _623 = fma(_567, cbModelParam._m0[26u].z, fma(_563, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _559));
        float _627 = fma(_567, cbModelParam._m0[27u].z, fma(_563, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _559));
        float _631 = fma(_567, cbModelParam._m0[28u].z, fma(_563, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _559));
        float _656 = _559 + _310;
        float _657 = _563 + _311;
        float _658 = _567 + _312;
        float _668 = fma(_658, cbModelParam._m0[26u].z, fma(_657, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _656)) - _623;
        float _669 = fma(_658, cbModelParam._m0[27u].z, fma(_657, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _656)) - _627;
        float _670 = fma(_658, cbModelParam._m0[28u].z, fma(_657, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _656)) - _631;
        float _674 = inversesqrt(dot(vec3(_668, _669, _670), vec3(_668, _669, _670)));
        float _687 = ((_674 * _668) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_623 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _688 = ((_674 * _669) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_627 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _689 = ((_674 * _670) / cbModelParam._m0[34u].z) + ((((((_631 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        float _726 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_692.x + (-0.5));
        float _728 = _726 * (_692.y + (-0.5));
        float _729 = _726 * (_692.z + (-0.5));
        float _736 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_699.x + (-0.5));
        float _738 = _736 * (_699.y + (-0.5));
        float _739 = _736 * (_699.z + (-0.5));
        float _746 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_706.x + (-0.5));
        float _748 = _746 * (_706.y + (-0.5));
        float _749 = _746 * (_706.z + (-0.5));
        float _756 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_713.x + (-0.5));
        float _758 = _756 * (_713.y + (-0.5));
        float _759 = _756 * (_713.z + (-0.5));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = _727 * 0.5;
        float _764 = _737 * 0.5;
        float _765 = _747 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _780 = (dot(vec3(_310, _311, _312), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _790 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3765 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_792 + 1.0))) + _797) * _760;
        float _807 = _728 * 0.5;
        float _808 = _738 * 0.5;
        float _809 = _748 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_310, _311, _312), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3798 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_834 + 1.0))) + _839) * _761;
        float _849 = _729 * 0.5;
        float _850 = _739 * 0.5;
        float _851 = _749 * 0.5;
        float _852 = dot(vec3(_849, _850, _851), vec3(_849, _850, _851));
        float _857 = (_852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_852);
        float _865 = (dot(vec3(_310, _311, _312), vec3(_857 * _849, _857 * _850, _857 * _851)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _874 = sqrt(((_850 * _850) + (_849 * _849)) + (_851 * _851)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _876 = _875 * 2.0;
        float _880 = (1.0 - _875) / (_875 + 1.0);
        float _3831 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _890 = ((((1.0 - _881) * (_876 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_876 + 1.0))) + _881) * _762;
        _898 = _729;
        _900 = _728;
        _901 = _727;
        _902 = _739;
        _903 = _738;
        _904 = _737;
        _905 = _749;
        _906 = _748;
        _907 = _747;
        _908 = _762;
        _909 = _761;
        _910 = _760;
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0)));
    }
    else
    {
        _898 = _899;
        _900 = _899;
        _901 = _899;
        _902 = _899;
        _903 = _899;
        _904 = _899;
        _905 = _899;
        _906 = _899;
        _907 = _899;
        _908 = _899;
        _909 = _899;
        _910 = _899;
        _911 = 0.0;
        _912 = 0.0;
        _913 = 0.0;
    }
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _942 = fma(_567, cbModelParam._m0[30u].z, fma(_563, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _559));
        float _946 = fma(_567, cbModelParam._m0[31u].z, fma(_563, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _559));
        float _950 = fma(_567, cbModelParam._m0[32u].z, fma(_563, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _559));
        float _973 = _559 + _310;
        float _974 = _563 + _311;
        float _975 = _567 + _312;
        float _985 = fma(_975, cbModelParam._m0[30u].z, fma(_974, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _973)) - _942;
        float _986 = fma(_975, cbModelParam._m0[31u].z, fma(_974, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _973)) - _946;
        float _987 = fma(_975, cbModelParam._m0[32u].z, fma(_974, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _973)) - _950;
        float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
        float _1004 = ((_991 * _985) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_942 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_991 * _986) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_946 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_991 * _987) / cbModelParam._m0[35u].z) + ((((((_950 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        float _1041 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1008.x + (-0.5));
        float _1043 = _1041 * (_1008.y + (-0.5));
        float _1044 = _1041 * (_1008.z + (-0.5));
        float _1051 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1015.x + (-0.5));
        float _1053 = _1051 * (_1015.y + (-0.5));
        float _1054 = _1051 * (_1015.z + (-0.5));
        float _1061 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1022.x + (-0.5));
        float _1063 = _1061 * (_1022.y + (-0.5));
        float _1064 = _1061 * (_1022.z + (-0.5));
        float _1071 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1029.x + (-0.5));
        float _1073 = _1071 * (_1029.y + (-0.5));
        float _1074 = _1071 * (_1029.z + (-0.5));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = _1042 * 0.5;
        float _1079 = _1052 * 0.5;
        float _1080 = _1062 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_310, _311, _312), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3894 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1105 + 1.0))) + _1110) * _1075;
        float _1120 = _1043 * 0.5;
        float _1121 = _1053 * 0.5;
        float _1122 = _1063 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_310, _311, _312), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3927 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1147 + 1.0))) + _1152) * _1076;
        float _1162 = _1044 * 0.5;
        float _1163 = _1054 * 0.5;
        float _1164 = _1064 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_310, _311, _312), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3960 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1189 + 1.0))) + _1194) * _1077;
        _1211 = _1044;
        _1212 = _1043;
        _1213 = _1042;
        _1214 = _1054;
        _1215 = _1053;
        _1216 = _1052;
        _1217 = _1064;
        _1218 = _1063;
        _1219 = _1062;
        _1220 = _1077;
        _1221 = _1076;
        _1222 = _1075;
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
    }
    else
    {
        _1211 = _899;
        _1212 = _899;
        _1213 = _899;
        _1214 = _899;
        _1215 = _899;
        _1216 = _899;
        _1217 = _899;
        _1218 = _899;
        _1219 = _899;
        _1220 = _899;
        _1221 = _899;
        _1222 = _899;
        _1223 = 0.0;
        _1224 = 0.0;
        _1225 = 0.0;
    }
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _911)) + _911;
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _912)) + _912;
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _913)) + _913;
    float _1258 = fma(_1237, cbSceneParam._m0[89u].z, fma(_1236, cbSceneParam._m0[89u].y, _1235 * cbSceneParam._m0[89u].x));
    float _1261 = fma(_1237, cbSceneParam._m0[90u].z, fma(_1236, cbSceneParam._m0[90u].y, _1235 * cbSceneParam._m0[90u].x));
    float _1264 = fma(_1237, cbSceneParam._m0[91u].z, fma(_1236, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1235));
    float _1279 = _503 * 0.5;
    float _1280 = _504 * 0.5;
    float _1281 = _505 * 0.5;
    float _1282 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1285 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1288 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1322;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1295 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_898, _902, _905, _908));
        float _1299 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_900, _903, _906, _909));
        float _1303 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_901, _904, _907, _910));
        float _1310 = dot(vec4(cbModelParam._m0[39u]), vec4(_1279, _1280, _1281, 1.0));
        _1322 = dot(vec3(isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1310) ? 0.0 : (isnan(0.0) ? _1310 : max(0.0, _1310))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1322 = 1.0;
    }
    float _1333;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1324 = dot(vec4(cbModelParam._m0[40u]), vec4(_1279, _1280, _1281, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1324) ? 0.0 : (isnan(0.0) ? _1324 : max(0.0, _1324))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1337 = (_1333 * cbModelParam._m0[1u].x) + (_1322 * (1.0 - cbModelParam._m0[1u].x));
    float _1347 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _313);
    float _1348 = isnan(_1347) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1347 : min(cbModelParam._m0[25u].z, _1347));
    float _1430;
    float _1432;
    float _1434;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1397 = fma(_567, cbModelParam._m0[13u].z, fma(_563, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _559)) + cbModelParam._m0[13u].w;
        float _1401 = fma(_567, cbModelParam._m0[14u].z, fma(_563, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _559)) + cbModelParam._m0[14u].w;
        float _1405 = fma(_567, cbModelParam._m0[15u].z, fma(_563, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _559)) + cbModelParam._m0[15u].w;
        float _1408 = fma(_505, cbModelParam._m0[13u].z, fma(_504, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _503));
        float _1411 = fma(_505, cbModelParam._m0[14u].z, fma(_504, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _503));
        float _1414 = fma(_505, cbModelParam._m0[15u].z, fma(_504, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _503));
        float _1442;
        if (_1408 > 0.0)
        {
            _1442 = abs((1.0 - _1397) / _1408);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1397 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1442 = frontier_phi_19_17_ladder;
        }
        float _1618;
        if (_1411 > 0.0)
        {
            _1618 = abs((1.0 - _1401) / _1411);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1401 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1618 = frontier_phi_28_24_ladder;
        }
        float _1914;
        if (_1414 > 0.0)
        {
            _1914 = abs((1.0 - _1405) / _1414);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1405 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1914 = frontier_phi_40_35_ladder;
        }
        float _1916 = isnan(_1618) ? _1442 : (isnan(_1442) ? _1618 : min(_1442, _1618));
        float _1917 = isnan(_1914) ? _1916 : (isnan(_1916) ? _1914 : min(_1916, _1914));
        float _1921 = (_1917 * _1408) + _1397;
        float _1922 = (_1917 * _1411) + _1401;
        float _1923 = (_1917 * _1414) + _1405;
        float _1924 = _1917 * 9.9999997473787516355514526367188e-05;
        float _1926 = (-1.0) - _1924;
        float _1928 = _1924 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1923 > _1928) || ((_1923 < _1926) || ((_1922 > _1928) || ((_1922 < _1926) || ((_1921 < _1926) || (_1921 > _1928))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2068 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1923, cbModelParam._m0[9u].z, fma(_1922, cbModelParam._m0[9u].y, _1921 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1923, cbModelParam._m0[10u].z, fma(_1922, cbModelParam._m0[10u].y, _1921 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1923, cbModelParam._m0[11u].z, fma(_1922, cbModelParam._m0[11u].y, _1921 * cbModelParam._m0[11u].x))), _1348);
            frontier_phi_18_40_ladder = _2068.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2068.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2068.x * cbModelParam._m0[1u].y;
        }
        _1430 = frontier_phi_18_40_ladder_2;
        _1432 = frontier_phi_18_40_ladder_1;
        _1434 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_503, _504, _505), _1348);
        _1430 = _1418.x * cbModelParam._m0[1u].y;
        _1432 = _1418.y * cbModelParam._m0[1u].y;
        _1434 = _1418.z * cbModelParam._m0[1u].y;
    }
    float _1438 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _313);
    float _1439 = isnan(_1438) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1438 : min(cbModelParam._m0[25u].w, _1438));
    float _1532;
    float _1534;
    float _1536;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1496 = fma(_567, cbModelParam._m0[21u].z, fma(_563, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _559)) + cbModelParam._m0[21u].w;
        float _1500 = fma(_567, cbModelParam._m0[22u].z, fma(_563, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _559)) + cbModelParam._m0[22u].w;
        float _1504 = fma(_567, cbModelParam._m0[23u].z, fma(_563, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _559)) + cbModelParam._m0[23u].w;
        float _1507 = fma(_505, cbModelParam._m0[21u].z, fma(_504, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _503));
        float _1510 = fma(_505, cbModelParam._m0[22u].z, fma(_504, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _503));
        float _1513 = fma(_505, cbModelParam._m0[23u].z, fma(_504, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _503));
        float _1623;
        if (_1507 > 0.0)
        {
            _1623 = abs((1.0 - _1496) / _1507);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1496 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1623 = frontier_phi_30_26_ladder;
        }
        float _1941;
        if (_1510 > 0.0)
        {
            _1941 = abs((1.0 - _1500) / _1510);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1500 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1941 = frontier_phi_42_37_ladder;
        }
        float _2279;
        if (_1513 > 0.0)
        {
            _2279 = abs((1.0 - _1504) / _1513);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1504 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2279 = frontier_phi_52_49_ladder;
        }
        float _2281 = isnan(_1941) ? _1623 : (isnan(_1623) ? _1941 : min(_1623, _1941));
        float _2282 = isnan(_2279) ? _2281 : (isnan(_2281) ? _2279 : min(_2281, _2279));
        float _2286 = (_2282 * _1507) + _1496;
        float _2287 = (_2282 * _1510) + _1500;
        float _2288 = (_2282 * _1513) + _1504;
        float _2289 = _2282 * 9.9999997473787516355514526367188e-05;
        float _2290 = (-1.0) - _2289;
        float _2292 = _2289 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2288 > _2292) || ((_2288 < _2290) || ((_2287 > _2292) || ((_2287 < _2290) || ((_2286 < _2290) || (_2286 > _2292))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2410 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2288, cbModelParam._m0[17u].z, fma(_2287, cbModelParam._m0[17u].y, _2286 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2288, cbModelParam._m0[18u].z, fma(_2287, cbModelParam._m0[18u].y, _2286 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2288, cbModelParam._m0[19u].z, fma(_2287, cbModelParam._m0[19u].y, _2286 * cbModelParam._m0[19u].x))), _1439);
            frontier_phi_27_52_ladder = _2410.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2410.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2410.x * cbModelParam._m0[1u].z;
        }
        _1532 = frontier_phi_27_52_ladder_2;
        _1534 = frontier_phi_27_52_ladder_1;
        _1536 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1516 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_503, _504, _505), _1439);
        _1532 = _1516.x * cbModelParam._m0[1u].z;
        _1534 = _1516.y * cbModelParam._m0[1u].z;
        _1536 = _1516.z * cbModelParam._m0[1u].z;
    }
    float _1549 = (((_530 * _479) + _531) * _495) * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1551 = (((_530 * _481) + _531) * _495) * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1553 = (((_530 * _482) + _531) * _495) * ((cbModelParam._m0[1u].w * (_1536 - _1434)) + _1434);
    float _1556 = fma(_1553, cbSceneParam._m0[89u].z, fma(_1551, cbSceneParam._m0[89u].y, _1549 * cbSceneParam._m0[89u].x));
    float _1559 = fma(_1553, cbSceneParam._m0[90u].z, fma(_1551, cbSceneParam._m0[90u].y, _1549 * cbSceneParam._m0[90u].x));
    float _1562 = fma(_1553, cbSceneParam._m0[91u].z, fma(_1551, cbSceneParam._m0[91u].y, _1549 * cbSceneParam._m0[91u].x));
    float _1597 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1601 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1605 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1609 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1610 = _1597 / _1609;
    float _1611 = _1601 / _1609;
    float _1612 = _1605 / _1609;
    float _1759;
    float _1760;
    float _1761;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1639 = ((uint(_1612 > cbSceneParam._m0[59u].y) + uint(_1612 > cbSceneParam._m0[59u].x)) + uint(_1612 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1640 = _1639 + 43u;
        uint _1648 = _1639 + 44u;
        uint _1656 = _1639 + 45u;
        uint _1664 = _1639 + 46u;
        float _1675 = fma(_1609, cbSceneParam._m0[_1640].w, fma(_1605, cbSceneParam._m0[_1640].z, fma(_1601, cbSceneParam._m0[_1640].y, _1597 * cbSceneParam._m0[_1640].x)));
        float _1679 = fma(_1609, cbSceneParam._m0[_1648].w, fma(_1605, cbSceneParam._m0[_1648].z, fma(_1601, cbSceneParam._m0[_1648].y, _1597 * cbSceneParam._m0[_1648].x)));
        float _1687 = fma(_1609, cbSceneParam._m0[_1664].w, fma(_1605, cbSceneParam._m0[_1664].z, fma(_1601, cbSceneParam._m0[_1664].y, _1597 * cbSceneParam._m0[_1664].x)));
        float _1692 = cbSceneParam._m0[33u].z * _1687;
        float _1694 = cbSceneParam._m0[33u].w * _1687;
        float _1697 = fma(_1609, cbSceneParam._m0[_1656].w, fma(_1605, cbSceneParam._m0[_1656].z, fma(_1601, cbSceneParam._m0[_1656].y, _1597 * cbSceneParam._m0[_1656].x))) / _1687;
        float _1745 = (cbSceneParam._m0[33u].x - sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612))) * cbSceneParam._m0[33u].y;
        float _4086 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1752 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1692 + _1675) / _1687, (_1694 + _1679) / _1687), _1697), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1694 + _1675) / _1687, (_1679 - _1692) / _1687), _1697), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1675 - _1692) / _1687, (_1679 - _1694) / _1687), _1697), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1675 - _1694) / _1687, (_1692 + _1679) / _1687), _1697), 0.0)).x), vec4(0.25)));
        _1759 = 1.0 - (_1752 * cbSceneParam._m0[34u].x);
        _1760 = 1.0 - (_1752 * cbSceneParam._m0[34u].y);
        _1761 = 1.0 - (_1752 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1759 = 1.0;
        _1760 = 1.0;
        _1761 = 1.0;
    }
    float _1825;
    float _1827;
    float _1829;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1813 = fma(_1609, cbSceneParam._m0[63u].w, fma(_1605, cbSceneParam._m0[63u].z, fma(_1601, cbSceneParam._m0[63u].y, _1597 * cbSceneParam._m0[63u].x)));
        float _1814 = fma(_1609, cbSceneParam._m0[60u].w, fma(_1605, cbSceneParam._m0[60u].z, fma(_1601, cbSceneParam._m0[60u].y, _1597 * cbSceneParam._m0[60u].x))) / _1813;
        float _1815 = fma(_1609, cbSceneParam._m0[61u].w, fma(_1605, cbSceneParam._m0[61u].z, fma(_1601, cbSceneParam._m0[61u].y, _1597 * cbSceneParam._m0[61u].x))) / _1813;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1814 >= cbSceneParam._m0[64u].x) && (_1815 >= cbSceneParam._m0[64u].y)) && (_1814 <= cbSceneParam._m0[64u].z)) && (_1815 <= cbSceneParam._m0[64u].w))
        {
            float _1954 = fma(_1609, cbSceneParam._m0[62u].w, fma(_1605, cbSceneParam._m0[62u].z, fma(_1601, cbSceneParam._m0[62u].y, _1597 * cbSceneParam._m0[62u].x))) / _1813;
            float _1958 = isnan(cbSceneParam._m0[41u].w) ? _1954 : (isnan(_1954) ? cbSceneParam._m0[41u].w : max(_1954, cbSceneParam._m0[41u].w));
            float _2001 = (cbSceneParam._m0[33u].x - sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612))) * cbSceneParam._m0[33u].y;
            float _4102 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
            float _2008 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1814, cbSceneParam._m0[33u].w + _1815), _1958), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1814, _1815 - cbSceneParam._m0[33u].z), _1958), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1814 - cbSceneParam._m0[33u].z, _1815 - cbSceneParam._m0[33u].w), _1958), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1814 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1815), _1958), 0.0)).x), vec4(0.25)));
            float _2012 = 1.0 - (_2008 * cbSceneParam._m0[34u].x);
            float _2013 = 1.0 - (_2008 * cbSceneParam._m0[34u].y);
            float _2014 = 1.0 - (_2008 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2013) ? _1760 : (isnan(_1760) ? _2013 : min(_1760, _2013));
            frontier_phi_39_38_ladder_1 = isnan(_2012) ? _1759 : (isnan(_1759) ? _2012 : min(_1759, _2012));
            frontier_phi_39_38_ladder_2 = isnan(_2014) ? _1761 : (isnan(_1761) ? _2014 : min(_1761, _2014));
        }
        else
        {
            frontier_phi_39_38_ladder = _1760;
            frontier_phi_39_38_ladder_1 = _1759;
            frontier_phi_39_38_ladder_2 = _1761;
        }
        _1825 = frontier_phi_39_38_ladder_1;
        _1827 = frontier_phi_39_38_ladder;
        _1829 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1825 = _1759;
        _1827 = _1760;
        _1829 = _1761;
    }
    uvec4 _1834 = floatBitsToUint(cbInstanceData._m0[_453 + 5u]);
    uint _1836 = _1834.x * 14u;
    uint _1837 = _1836 + 13u;
    float _1844 = _495 + (-1.0);
    float _1849 = (cbLight._m0[_1837].x * _1844) + 1.0;
    float _1850 = (cbLight._m0[_1837].y * _1844) + 1.0;
    float _1851 = (cbLight._m0[_1837].z * _1844) + 1.0;
    float _1852 = (cbLight._m0[_1837].w * _1844) + 1.0;
    uint _1853 = _1836 + 5u;
    float _1859 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
    uint _1863 = _1836 + 4u;
    float _1873 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
    uint _1877 = _1836 | 1u;
    float _1888 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_310, _311, _312));
    float _1891 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_310, _311, _312));
    float _4138 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _4149 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1896 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * 0.3183098733425140380859375;
    float _1898 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.3183098733425140380859375;
    float _1905 = ((cbLight._m0[_1853].x * _1859) * _1898) + (((cbLight._m0[_1863].x * _1825) * _1873) * _1896);
    float _1906 = ((_1859 * cbLight._m0[_1853].y) * _1898) + (((cbLight._m0[_1863].y * _1827) * _1873) * _1896);
    float _1907 = ((_1859 * cbLight._m0[_1853].z) * _1898) + (((cbLight._m0[_1863].z * _1829) * _1873) * _1896);
    uvec4 _1911 = floatBitsToUint(cbLight._m0[_1836 + 12u]);
    bool _1913 = _1911.x == 0u;
    float _2015;
    float _2017;
    float _2019;
    if (_1913)
    {
        _2015 = _1905;
        _2017 = _1906;
        _2019 = _1907;
    }
    else
    {
        uint _2023 = _1836 + 6u;
        float _2039 = (dot(vec3(cbLight._m0[_1836 + 2u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _2040 = _2039 * _2039;
        float _4160 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2041 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2042 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2015 = (((cbLight._m0[_2023].x * 0.3183098733425140380859375) * _2041) * _2042) + _1905;
        _2017 = (((cbLight._m0[_2023].y * 0.3183098733425140380859375) * _2041) * _2042) + _1906;
        _2019 = (((cbLight._m0[_2023].z * 0.3183098733425140380859375) * _2041) * _2042) + _1907;
    }
    bool _2022 = _1911.y == 0u;
    float _2077;
    float _2079;
    float _2081;
    if (_2022)
    {
        _2077 = _2015;
        _2079 = _2017;
        _2081 = _2019;
    }
    else
    {
        uint _2250 = _1836 + 7u;
        float _2266 = (dot(vec3(cbLight._m0[_1836 + 3u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _2267 = _2266 * _2266;
        float _4176 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2268 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2269 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _2077 = (((cbLight._m0[_2250].x * 0.3183098733425140380859375) * _2268) * _2269) + _2015;
        _2079 = (((cbLight._m0[_2250].y * 0.3183098733425140380859375) * _2268) * _2269) + _2017;
        _2081 = (((cbLight._m0[_2250].z * 0.3183098733425140380859375) * _2268) * _2269) + _2019;
    }
    uint _2084 = _1836 + 8u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1836].w)) * _313) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_1836].x + _392;
    float _2100 = cbLight._m0[_1836].y + _393;
    float _2101 = cbLight._m0[_1836].z + _394;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1836].xyz));
    float _4192 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _4203 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _2113 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2114 = dot(vec3(_310, _311, _312), vec3(_2106, _2107, _2108));
    float _4214 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_2106, _2107, _2108));
    float _4225 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2098 * _2098;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2134 = exp2(log2(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * 5.0);
    float _2135 = 0.959999978542327880859375 - _476;
    float _2137 = 0.959999978542327880859375 - _477;
    float _2138 = 0.959999978542327880859375 - _478;
    float _2145 = 1.0 - _2098;
    float _2156 = (0.5 / (((_2113 * ((_2112 * _2145) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2145) + _2098) * _2112))) * _2112;
    float _4236 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2158 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    uint _2172 = _1836 + 9u;
    float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1877].w)) * _313) * 0.949999988079071044921875);
    float _2184 = _2183 * _2183;
    float _2185 = cbLight._m0[_1877].x + _392;
    float _2186 = cbLight._m0[_1877].y + _393;
    float _2187 = cbLight._m0[_1877].z + _394;
    float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
    float _2192 = _2191 * _2185;
    float _2193 = _2191 * _2186;
    float _2194 = _2191 * _2187;
    float _2195 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1877].xyz));
    float _4247 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2199 = dot(vec3(_310, _311, _312), vec3(_2192, _2193, _2194));
    float _4258 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2203 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_2192, _2193, _2194));
    float _4269 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2207 = _2184 * _2184;
    float _2211 = ((_2202 * _2202) * (_2207 + (-1.0))) + 1.0;
    float _2218 = exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0);
    float _2225 = 1.0 - _2184;
    float _2235 = (0.5 / (((_2113 * ((_2198 * _2225) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2225) + _2184) * _2198))) * _2198;
    float _4280 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2237 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2207 / ((_2211 * _2211) * 3.141590118408203125));
    float _2247 = (((((_2218 * _2135) + _479) * cbLight._m0[_2172].x) * _2237) * _1859) + ((((cbLight._m0[_2084].x * _1825) * ((_2134 * _2135) + _479)) * _2158) * _1873);
    float _2248 = (((((_2218 * _2137) + _481) * cbLight._m0[_2172].y) * _2237) * _1859) + ((((cbLight._m0[_2084].y * _1827) * ((_2134 * _2137) + _481)) * _2158) * _1873);
    float _2249 = (((((_2218 * _2138) + _482) * cbLight._m0[_2172].z) * _2237) * _1859) + ((((cbLight._m0[_2084].z * _1829) * ((_2134 * _2138) + _482)) * _2158) * _1873);
    float _2305;
    float _2307;
    float _2309;
    if (_1913)
    {
        _2305 = _2247;
        _2307 = _2248;
        _2309 = _2249;
    }
    else
    {
        uint _2311 = _1836 + 2u;
        uint _2315 = _1836 + 10u;
        float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _313) * 0.949999988079071044921875);
        float _2330 = _2329 * _2329;
        float _2331 = cbLight._m0[_2311].x + _392;
        float _2332 = cbLight._m0[_2311].y + _393;
        float _2333 = cbLight._m0[_2311].z + _394;
        float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
        float _2338 = _2337 * _2331;
        float _2339 = _2337 * _2332;
        float _2340 = _2337 * _2333;
        float _2341 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2311].xyz));
        float _4291 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2345 = dot(vec3(_310, _311, _312), vec3(_2338, _2339, _2340));
        float _4302 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2349 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2338, _2339, _2340));
        float _4313 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2353 = _2330 * _2330;
        float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
        float _2364 = exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0);
        float _2371 = 1.0 - _2330;
        float _2381 = (0.5 / (((_2113 * ((_2344 * _2371) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2371) + _2330) * _2344))) * _2344;
        float _4324 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2383 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
        float _2384 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2305 = (((((_2364 * _2135) + _479) * cbLight._m0[_2315].x) * _2383) * _2384) + _2247;
        _2307 = (((((_2364 * _2137) + _481) * cbLight._m0[_2315].y) * _2383) * _2384) + _2248;
        _2309 = (((((_2364 * _2138) + _482) * cbLight._m0[_2315].z) * _2383) * _2384) + _2249;
    }
    float _2415;
    float _2417;
    float _2419;
    if (_2022)
    {
        _2415 = _2305;
        _2417 = _2307;
        _2419 = _2309;
    }
    else
    {
        uint _2426 = _1836 + 3u;
        uint _2430 = _1836 + 11u;
        float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _313) * 0.949999988079071044921875);
        float _2445 = _2444 * _2444;
        float _2446 = cbLight._m0[_2426].x + _392;
        float _2447 = cbLight._m0[_2426].y + _393;
        float _2448 = cbLight._m0[_2426].z + _394;
        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
        float _2453 = _2452 * _2446;
        float _2454 = _2452 * _2447;
        float _2455 = _2452 * _2448;
        float _2456 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2426].xyz));
        float _4340 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2460 = dot(vec3(_310, _311, _312), vec3(_2453, _2454, _2455));
        float _4351 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2464 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2453, _2454, _2455));
        float _4362 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2468 = _2445 * _2445;
        float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
        float _2479 = exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0);
        float _2486 = 1.0 - _2445;
        float _2496 = (0.5 / (((_2113 * ((_2459 * _2486) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2486) + _2445) * _2459))) * _2459;
        float _4373 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2498 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
        float _2499 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _2415 = (((((_2479 * _2135) + _479) * cbLight._m0[_2430].x) * _2498) * _2499) + _2305;
        _2417 = (((((_2479 * _2137) + _481) * cbLight._m0[_2430].y) * _2498) * _2499) + _2307;
        _2419 = (((((_2479 * _2138) + _482) * cbLight._m0[_2430].z) * _2498) * _2499) + _2309;
    }
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    if (_1834.y == 0u)
    {
        uvec4 _2520 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2521 = _2520.x;
        uint _2532 = uint((float(_2520.y) * floor(float(uint(cbSceneParam._m0[85u].y * _414) / _2521))) + floor(float(uint(cbSceneParam._m0[85u].x * _413) / _2521)));
        float _2542 = (log2(_1612 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2543 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        uint _2546 = uint(isnan(14.0) ? _2543 : (isnan(_2543) ? 14.0 : min(_2543, 14.0)));
        uvec4 _2551 = texelFetch(g_lightClusterGridBuffer, int(((_2546 << 2u) + (_2532 << 6u)) >> 2u));
        uint _2552 = _2551.x;
        uint _2553 = _2520.z;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        if (((((1u << ((_2553 >> 4u) & 15u)) + 4294967295u) & _2552) == 0u) || ((_2553 & 240u) == 0u))
        {
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
        }
        else
        {
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            uint _2789 = 0u;
            uint _2798;
            bool _2799;
            for (;;)
            {
                _2798 = texelFetch(g_lightClassification, int((((_2546 << 5u) + (_2532 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                _2799 = _2798 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2799)
                {
                    frontier_phi_73_pred = _2788;
                    frontier_phi_73_pred_1 = _2787;
                    frontier_phi_73_pred_2 = _2786;
                    frontier_phi_73_pred_3 = _2785;
                    frontier_phi_73_pred_4 = _2784;
                    frontier_phi_73_pred_5 = _2783;
                }
                else
                {
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    uint _2934;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2787;
                    _2933 = _2788;
                    _2934 = _2798;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    for (;;)
                    {
                        uint _2938 = uint(findLSB(_2934)) + (_2789 << 5u);
                        uint _2935 = (_2934 + 4294967295u) & _2934;
                        uint _2940 = _2938 * 48u;
                        vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 3u)).x));
                        uint _2960 = (_2938 * 48u) + 4u;
                        vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 3u)).x));
                        uint _2979 = (_2938 * 48u) + 8u;
                        vec3 _2990 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x));
                        float _2994 = _2954.x - _1610;
                        float _2995 = _2954.y - _1611;
                        float _2996 = _2954.z - _1612;
                        float _2997 = dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996));
                        float _3000 = inversesqrt(_2997);
                        float _3001 = _3000 * _2994;
                        float _3002 = _3000 * _2995;
                        float _3003 = _3000 * _2996;
                        float _3004 = dot(vec3(_434, _437, _440), vec3(_3001, _3002, _3003));
                        float _3009 = 1.0 - (_2997 * _2954.w);
                        float _4399 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3011 = sqrt(_2997) * _2973.w;
                        float _3014 = 1.39999997615814208984375 / (_3011 + 1.39999997615814208984375);
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _3004) + _3015;
                        float _3021 = _3011 * _3011;
                        float _3025 = ((isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))) * _3010) / ((_3021 * 0.699999988079071044921875) + 1.0);
                        float _3029 = (-0.0) - _1610;
                        float _3030 = (-0.0) - _1611;
                        float _3031 = (-0.0) - _1612;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3045 = exp2(log2(1.0 / ((_3021 * 3.5) + 5.0)) * 0.25);
                        float _3046 = 1.0 - _511;
                        float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                        float _3054 = _3053 * _3053;
                        float _3055 = _3054 * _3054;
                        float _3056 = _3036 + _3001;
                        float _3057 = _3037 + _3002;
                        float _3058 = _3038 + _3003;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3066 = dot(vec3(_434, _437, _440), vec3(_3036, _3037, _3038));
                        float _4415 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3070 = dot(vec3(_434, _437, _440), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                        float _4426 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                        float _3078 = _3014 * _3054;
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3004) + _3079;
                        float _4437 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3084 = 1.0 - _3054;
                        float _3094 = (0.5 / (((_3083 * ((_3069 * _3084) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3083 * _3084) + _3054) * _3069))) * _3083;
                        float _4448 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3105 = (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) / ((_3077 * _3077) * ((_3021 * 2.1991131305694580078125) + 3.141590118408203125))) * _3010;
                        _2858 = (_3025 * _2973.x) + _2931;
                        _2859 = (_3025 * _2973.y) + _2932;
                        _2860 = (_3025 * _2973.z) + _2933;
                        _2855 = (_3105 * _2990.x) + _2928;
                        _2856 = (_3105 * _2990.y) + _2929;
                        _2857 = (_3105 * _2990.z) + _2930;
                        if (_2935 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2859;
                            _2933 = _2860;
                            _2934 = _2935;
                        }
                    }
                    frontier_phi_73_pred = _2860;
                    frontier_phi_73_pred_1 = _2859;
                    frontier_phi_73_pred_2 = _2858;
                    frontier_phi_73_pred_3 = _2857;
                    frontier_phi_73_pred_4 = _2856;
                    frontier_phi_73_pred_5 = _2855;
                }
                _2642 = frontier_phi_73_pred;
                _2640 = frontier_phi_73_pred_1;
                _2638 = frontier_phi_73_pred_2;
                _2636 = frontier_phi_73_pred_3;
                _2634 = frontier_phi_73_pred_4;
                _2632 = frontier_phi_73_pred_5;
                uint _2790 = _2789 + 1u;
                if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2783 = _2632;
                    _2784 = _2634;
                    _2785 = _2636;
                    _2786 = _2638;
                    _2787 = _2640;
                    _2788 = _2642;
                    _2789 = _2790;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
        }
        uvec4 _2645 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2646 = _2645.z;
        uint _2648 = (_2646 >> 8u) & 15u;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((4294967295u << _2648) & _2552) == 0u)
        {
            _2751 = _2631;
            _2753 = _2633;
            _2755 = _2635;
            _2757 = _2637;
            _2759 = _2639;
            _2761 = _2641;
        }
        else
        {
            float _2776 = inversesqrt(dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612)));
            float _2777 = _2776 * _1610;
            float _2778 = _2776 * _1611;
            float _2779 = _2776 * _1612;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2648 < ((_2646 >> 12u) & 15u))
            {
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2911 = _2631;
                float _2912 = _2633;
                float _2913 = _2635;
                float _2914 = _2637;
                float _2915 = _2639;
                float _2916 = _2641;
                uint _2917 = _2648;
                uint _2926;
                bool _2927;
                for (;;)
                {
                    _2926 = texelFetch(g_lightClassification, int((((_2546 << 5u) + (_2532 << 9u)) + (_2917 << 2u)) >> 2u)).x;
                    _2927 = _2926 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2927)
                    {
                        frontier_phi_84_pred = _2915;
                        frontier_phi_84_pred_1 = _2914;
                        frontier_phi_84_pred_2 = _2913;
                        frontier_phi_84_pred_3 = _2912;
                        frontier_phi_84_pred_4 = _2911;
                        frontier_phi_84_pred_5 = _2916;
                    }
                    else
                    {
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3132 = _2911;
                        float _3133 = _2912;
                        float _3134 = _2913;
                        float _3135 = _2914;
                        float _3136 = _2915;
                        float _3137 = _2916;
                        uint _3138 = _2926;
                        uint _3139;
                        vec4 _3164;
                        float _3165;
                        vec4 _3180;
                        vec3 _3192;
                        vec4 _3208;
                        vec4 _3224;
                        float _3271;
                        bool _3272;
                        for (;;)
                        {
                            uint _3149 = ((_2917 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3138));
                            _3139 = (_3138 + 4294967295u) & _3138;
                            uint _3151 = _3149 * 40u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            _3165 = _3164.w;
                            uint _3167 = (_3149 * 40u) + 4u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3182 = (_3149 * 40u) + 8u;
                            _3192 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x));
                            uint _3195 = (_3149 * 40u) + 16u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3211 = (_3149 * 40u) + 20u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3227 = (_3149 * 40u) + 24u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3246 = (_3149 * 40u) + 28u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            _3271 = fma(_1612, _3259.z, fma(_1611, _3259.y, _3259.x * _1610)) + _3259.w;
                            _3272 = !((fma(_1612, _3240.z, fma(_1611, _3240.y, _3240.x * _1610)) + _3240.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3272)
                            {
                                float _3299 = _3164.x - _1610;
                                float _3300 = _3164.y - _1611;
                                float _3301 = _3164.z - _1612;
                                float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                                float _3305 = inversesqrt(_3302);
                                float _3306 = _3305 * _3299;
                                float _3307 = _3305 * _3300;
                                float _3308 = _3305 * _3301;
                                float _3312 = 1.0 - (_3302 / (_3165 * _3165));
                                float _4459 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3317 = sqrt(_3302) * _3180.w;
                                float _3319 = 1.39999997615814208984375 / (_3317 + 1.39999997615814208984375);
                                float _3320 = _3319 * _3319;
                                float _3323 = ((1.0 - _3320) * dot(vec3(_3306, _3307, _3308), vec3(_434, _437, _440))) + _3320;
                                float _3326 = _3317 * _3317;
                                float _3330 = (fma(_1612, _3208.z, fma(_1611, _3208.y, _3208.x * _1610)) + _3208.w) / _3271;
                                float _3331 = (fma(_1612, _3224.z, fma(_1611, _3224.y, _3224.x * _1610)) + _3224.w) / _3271;
                                float _3335 = 1.0 - dot(vec2(_3330, _3331), vec2(_3330, _3331));
                                float _4475 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3337 = _3336 * (((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3313) / ((_3326 * 0.699999988079071044921875) + 1.0));
                                float _3349 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                                float _3350 = 1.0 - _511;
                                float _3357 = sqrt(1.0 - ((1.0 - (_3350 * _3350)) * (1.0 - (_3349 * _3349))));
                                float _3358 = _3357 * _3357;
                                float _3359 = _3358 * _3358;
                                float _3360 = _3306 - _2777;
                                float _3361 = _3307 - _2778;
                                float _3362 = _3308 - _2779;
                                float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                                float _3370 = dot(vec3(_434, _437, _440), vec3((-0.0) - _2777, (-0.0) - _2778, (-0.0) - _2779));
                                float _4486 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3374 = dot(vec3(_434, _437, _440), vec3(_3366 * _3360, _3366 * _3361, _3366 * _3362));
                                float _4497 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3377 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3381 = ((_3377 * _3377) * (_3359 + (-1.0))) + 1.0;
                                float _3382 = _3319 * _3358;
                                float _3383 = _3382 * _3382;
                                float _3389 = ((1.0 - _3383) * dot(vec3(_434, _437, _440), vec3(_3306, _3307, _3308))) + _3383;
                                float _4508 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3391 = 1.0 - _3358;
                                float _3401 = (0.5 / (((_3390 * ((_3373 * _3391) + _3358)) + 9.9999999392252902907785028219223e-09) + (((_3390 * _3391) + _3358) * _3373))) * _3390;
                                float _4519 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3411 = (_3336 * _3313) * (((_3359 * 3.1415927410125732421875) * (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) / ((_3381 * _3381) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3337 * _3180.y;
                                frontier_phi_90_pred_1 = _3337 * _3180.x;
                                frontier_phi_90_pred_2 = _3411 * _3192.z;
                                frontier_phi_90_pred_3 = _3411 * _3192.y;
                                frontier_phi_90_pred_4 = _3411 * _3192.x;
                                frontier_phi_90_pred_5 = _3337 * _3180.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3419 = frontier_phi_90_pred;
                            _3418 = frontier_phi_90_pred_1;
                            _3417 = frontier_phi_90_pred_2;
                            _3416 = frontier_phi_90_pred_3;
                            _3415 = frontier_phi_90_pred_4;
                            _3420 = frontier_phi_90_pred_5;
                            _3122 = _3418 + _3135;
                            _3123 = _3419 + _3136;
                            _3124 = _3420 + _3137;
                            _3119 = _3415 + _3132;
                            _3120 = _3416 + _3133;
                            _3121 = _3417 + _3134;
                            if (_3139 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3139;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3123;
                        frontier_phi_84_pred_1 = _3122;
                        frontier_phi_84_pred_2 = _3121;
                        frontier_phi_84_pred_3 = _3120;
                        frontier_phi_84_pred_4 = _3119;
                        frontier_phi_84_pred_5 = _3124;
                    }
                    _2760 = frontier_phi_84_pred;
                    _2758 = frontier_phi_84_pred_1;
                    _2756 = frontier_phi_84_pred_2;
                    _2754 = frontier_phi_84_pred_3;
                    _2752 = frontier_phi_84_pred_4;
                    _2762 = frontier_phi_84_pred_5;
                    uint _2918 = _2917 + 1u;
                    if (_2918 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2911 = _2752;
                        _2912 = _2754;
                        _2913 = _2756;
                        _2914 = _2758;
                        _2915 = _2760;
                        _2916 = _2762;
                        _2917 = _2918;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2762;
                frontier_phi_65_66_ladder_1 = _2758;
                frontier_phi_65_66_ladder_2 = _2760;
                frontier_phi_65_66_ladder_3 = _2754;
                frontier_phi_65_66_ladder_4 = _2752;
                frontier_phi_65_66_ladder_5 = _2756;
            }
            else
            {
                frontier_phi_65_66_ladder = _2641;
                frontier_phi_65_66_ladder_1 = _2637;
                frontier_phi_65_66_ladder_2 = _2639;
                frontier_phi_65_66_ladder_3 = _2633;
                frontier_phi_65_66_ladder_4 = _2631;
                frontier_phi_65_66_ladder_5 = _2635;
            }
            _2751 = frontier_phi_65_66_ladder_4;
            _2753 = frontier_phi_65_66_ladder_3;
            _2755 = frontier_phi_65_66_ladder_5;
            _2757 = frontier_phi_65_66_ladder_1;
            _2759 = frontier_phi_65_66_ladder_2;
            _2761 = frontier_phi_65_66_ladder;
        }
        float _2766 = isnan(1.0) ? _495 : (isnan(_495) ? 1.0 : min(_495, 1.0));
        _2564 = (_2766 * _2757) + _2077;
        _2566 = (_2766 * _2759) + _2079;
        _2568 = (_2766 * _2761) + _2081;
        _2570 = ((_2751 * _479) * _2766) + _2415;
        _2572 = ((_2753 * _481) * _2766) + _2417;
        _2574 = ((_2755 * _482) * _2766) + _2419;
    }
    else
    {
        _2564 = _2077;
        _2566 = _2079;
        _2568 = _2081;
        _2570 = _2415;
        _2572 = _2417;
        _2574 = _2419;
    }
    float _4535 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _4546 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _4557 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _2591 = ((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2564 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _495))) + ((_2570 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1337)) * cbPerFrame._m0[3u].x);
    float _2592 = ((isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2566 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _495))) + ((_2572 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1337)) * cbPerFrame._m0[3u].x);
    float _2593 = ((isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2568 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _495))) + ((_2574 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1337)) * cbPerFrame._m0[3u].x);
    uint _2594 = _453 + 6u;
    float _2602 = _413 / cbSceneParam._m0[86u].x;
    float _2603 = _414 / cbSceneParam._m0[86u].y;
    vec4 _2617 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, (log2((isnan(cbSceneParam._m0[77u].w) ? _334 : (isnan(_334) ? cbSceneParam._m0[77u].w : min(_334, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2619 = _2617.x;
    float _2620 = _2617.y;
    float _2621 = _2617.z;
    float _2622 = _2617.w;
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    if (_334 > cbSceneParam._m0[78u].w)
    {
        float _2656 = isnan(_334) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _334 : min(cbSceneParam._m0[80u].w, _334));
        float _2657 = _2656 / _334;
        float _2668 = _2657 * _385;
        float _2669 = _386 * _2657;
        float _2670 = (-0.0) - _2669;
        float _2671 = _2657 * _387;
        float _2673 = (cbSceneParam._m0[77u].w * _2670) / _2656;
        float _2674 = _2673 + cbSceneParam._m0[79u].w;
        float _2675 = cbSceneParam._m0[79u].w - _2669;
        float _2681 = sqrt(((_2668 * _2668) + (_2669 * _2669)) + (_2671 * _2671));
        float _2684 = (1.0 - (cbSceneParam._m0[77u].w / _2656)) * _2681;
        float _2689 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2691 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2868;
        if (abs((_2670 - _2673) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2868 = ((((_2674 > 0.0) ? exp2(_2689 * _2674) : (2.0 - exp2(_2691 * _2674))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2684;
        }
        else
        {
            float _2812 = 1.0 / cbSceneParam._m0[80u].x;
            float _2813 = isnan(_2675) ? _2674 : (isnan(_2674) ? _2675 : max(_2674, _2675));
            float _2814 = isnan(_2675) ? _2674 : (isnan(_2674) ? _2675 : min(_2674, _2675));
            float _2823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : min(_2813, 0.0));
            float _2824 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : min(_2814, 0.0));
            _2868 = ((abs(_2681 / _2670) * cbSceneParam._m0[80u].y) * ((((_2823 - _2824) * 2.0) - ((exp2(_2689 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0)))) - exp2(_2689 * (isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))))) * _2812)) - ((exp2(_2691 * _2823) - exp2(_2691 * _2824)) * _2812))) + (_2684 * cbSceneParam._m0[80u].z);
        }
        vec4 _2870 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, 1.0), 0.0);
        float _2879 = exp2((_2868 * (-1.44269502162933349609375)) * (1.0 - _2870.w));
        float _2880 = log2(_2879);
        float _2896 = log2(_2622);
        _2693 = (exp2(_2896 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].x)) * _2870.x) / cbSceneParam._m0[78u].x)) + _2619;
        _2695 = (exp2(_2896 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].y)) * _2870.y) / cbSceneParam._m0[78u].y)) + _2620;
        _2697 = (exp2(_2896 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].z)) * _2870.z) / cbSceneParam._m0[78u].z)) + _2621;
        _2699 = _2879 * _2622;
    }
    else
    {
        _2693 = _2619;
        _2695 = _2620;
        _2697 = _2621;
        _2699 = _2622;
    }
    bool _2906;
    vec4 _2709;
    vec4 _2731;
    float _2733;
    float _2737;
    float _2738;
    float _2739;
    float _2740;
    bool _2750;
    for (;;)
    {
        _2709 = cbMatDynParam._m0[0u];
        float _2711 = roundEven(_2709.y);
        bool _2712 = _2711 == 3.0;
        float _2713 = log2(_2699);
        float _2720 = exp2(_2713 * cbSceneParam._m0[78u].x) * _2591;
        float _2721 = exp2(_2713 * cbSceneParam._m0[78u].y) * _2592;
        float _2722 = exp2(_2713 * cbSceneParam._m0[78u].z) * _2593;
        float _2729 = _401 + (-0.5);
        _2731 = cbMtdParam._m0[1u];
        _2733 = _2731.y * _2729;
        float _2736 = (_2711 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2737 = _2736 * (_2712 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2693)));
        _2738 = _2736 * (_2712 ? _2721 : (_2721 + (cbSceneParam._m0[72u].w * _2695)));
        _2739 = _2736 * (_2712 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2697)));
        _2740 = _2729 * 0.999000012874603271484375;
        _2750 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2750)
        {
            if ((cbInstanceData._m0[_453 + 7u].x + _2740) < 0.5)
            {
                _2906 = true;
                break;
            }
        }
        uint _2847 = _455 + uint(_2709.w);
        if ((cbInstanceData._m0[_2847].w < 1.0) && ((cbInstanceData._m0[_2847].w + _2740) < 0.5))
        {
            _2906 = true;
            break;
        }
        if ((_2733 + 1.0) < _2731.x)
        {
            _2906 = true;
            break;
        }
        _2906 = false;
        break;
    }
    float _3110;
    if (_2906)
    {
        discard_state = true;
        _3110 = 0.0;
    }
    else
    {
        _3110 = cbInstanceData._m0[_2594].w;
    }
    SV_Target.x = _2737;
    SV_Target.y = _2738;
    SV_Target.z = _2739;
    SV_Target.w = _3110;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2594].w;
    discard_exit();
}


