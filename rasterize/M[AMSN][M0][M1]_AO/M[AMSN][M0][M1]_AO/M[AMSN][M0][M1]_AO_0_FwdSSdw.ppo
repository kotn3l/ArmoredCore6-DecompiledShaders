#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _852;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _255 = _253.x;
    vec4 _267 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _271 = _267.z;
    float _276 = (_267.x * 2.0) + (-1.0);
    float _278 = (_267.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3213 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0))));
    float _290 = cbMtdParam._m0[10u].x + _267.w;
    float _293 = fma(_285, _211, fma(_278, _203 * TANGENT.x, (_189 * _182) * _276));
    float _296 = fma(_285, _212, fma(_278, _203 * TANGENT.y, (_189 * _183) * _276));
    float _299 = fma(_285, _213, fma(_278, _203 * TANGENT.z, (_189 * _184) * _276));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _304 = _303 * _293;
    float _305 = _303 * _296;
    float _306 = _303 * _299;
    float _3224 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _307 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
    float _3235 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _3246 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3257 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3268 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3279 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _312 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _328 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _369 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _379 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _369);
    float _380 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _369);
    float _381 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _369);
    float _385 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _386 = _379 * _385;
    float _387 = _380 * _385;
    float _388 = _381 * _385;
    float _394 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _395 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _416 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _419 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _422 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    uint _435 = uint(roundEven(NORMAL.w)) * 13u;
    uint _438 = (_435 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _444 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0)))) * cbInstanceData._m0[_438].x;
    float _445 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0)))) * cbInstanceData._m0[_438].y;
    float _446 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0)))) * cbInstanceData._m0[_438].z;
    float _3290 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _3301 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _3312 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _450 = 1.0 - _312;
    float _451 = _447 * _450;
    float _452 = _448 * _450;
    float _453 = _449 * _450;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _312;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _312;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _312;
    float _461 = _458 + 0.039999999105930328369140625;
    float _463 = _459 + 0.039999999105930328369140625;
    float _464 = _460 + 0.039999999105930328369140625;
    vec4 _473 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _394, cbSceneParam._m0[86u].y * _395));
    float _477 = ((isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0))) * TEXCOORD.z) * _473.x;
    float _478 = dot(vec3(_304, _305, _306), vec3(_386, _387, _388));
    float _481 = _478 * 2.0;
    float _485 = (_481 * _304) - _386;
    float _486 = (_481 * _305) - _387;
    float _487 = (_481 * _306) - _388;
    float _491 = abs(dot(vec3(_386, _387, _388), vec3(_304, _305, _306)));
    float _3323 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _493 = sqrt(_307);
    float _506 = exp2((_493 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_493 * 3.0));
    float _512 = (1.0 - _506) * ((_493 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _513 = _506 * _493;
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _851;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _576 = fma(_549, cbModelParam._m0[26u].z, fma(_545, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _541));
        float _580 = fma(_549, cbModelParam._m0[27u].z, fma(_545, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _541));
        float _584 = fma(_549, cbModelParam._m0[28u].z, fma(_545, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _541));
        float _609 = _541 + _304;
        float _610 = _545 + _305;
        float _611 = _549 + _306;
        float _621 = fma(_611, cbModelParam._m0[26u].z, fma(_610, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _609)) - _576;
        float _622 = fma(_611, cbModelParam._m0[27u].z, fma(_610, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _609)) - _580;
        float _623 = fma(_611, cbModelParam._m0[28u].z, fma(_610, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _609)) - _584;
        float _627 = inversesqrt(dot(vec3(_621, _622, _623), vec3(_621, _622, _623)));
        float _640 = ((_627 * _621) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_576 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _641 = ((_627 * _622) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_580 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_627 * _623) / cbModelParam._m0[34u].z) + ((((((_584 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        float _679 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_645.x + (-0.5));
        float _681 = _679 * (_645.y + (-0.5));
        float _682 = _679 * (_645.z + (-0.5));
        float _689 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_652.x + (-0.5));
        float _691 = _689 * (_652.y + (-0.5));
        float _692 = _689 * (_652.z + (-0.5));
        float _699 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_659.x + (-0.5));
        float _701 = _699 * (_659.y + (-0.5));
        float _702 = _699 * (_659.z + (-0.5));
        float _709 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_666.x + (-0.5));
        float _711 = _709 * (_666.y + (-0.5));
        float _712 = _709 * (_666.z + (-0.5));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = _680 * 0.5;
        float _717 = _690 * 0.5;
        float _718 = _700 * 0.5;
        float _719 = dot(vec3(_716, _717, _718), vec3(_716, _717, _718));
        float _724 = (_719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_719);
        float _733 = (dot(vec3(_304, _305, _306), vec3(_724 * _716, _724 * _717, _724 * _718)) + 1.0) * 0.5;
        float _3349 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _743 = sqrt(((_717 * _717) + (_716 * _716)) + (_718 * _718)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3360 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _745 = _744 * 2.0;
        float _749 = (1.0 - _744) / (_744 + 1.0);
        float _3371 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _759 = ((((1.0 - _750) * (_745 + 2.0)) * exp2(log2(isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * (_745 + 1.0))) + _750) * _713;
        float _760 = _681 * 0.5;
        float _761 = _691 * 0.5;
        float _762 = _701 * 0.5;
        float _763 = dot(vec3(_760, _761, _762), vec3(_760, _761, _762));
        float _768 = (_763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_763);
        float _776 = (dot(vec3(_304, _305, _306), vec3(_768 * _760, _768 * _761, _768 * _762)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _785 = sqrt(((_761 * _761) + (_760 * _760)) + (_762 * _762)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _787 = _786 * 2.0;
        float _791 = (1.0 - _786) / (_786 + 1.0);
        float _3404 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _801 = ((((1.0 - _792) * (_787 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_787 + 1.0))) + _792) * _714;
        float _802 = _682 * 0.5;
        float _803 = _692 * 0.5;
        float _804 = _702 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _818 = (dot(vec3(_304, _305, _306), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3415 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _827 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3426 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3437 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (_829 + 1.0))) + _834) * _715;
        _851 = _682;
        _853 = _681;
        _854 = _680;
        _855 = _692;
        _856 = _691;
        _857 = _690;
        _858 = _702;
        _859 = _701;
        _860 = _700;
        _861 = _715;
        _862 = _714;
        _863 = _713;
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0)));
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0)));
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
    }
    else
    {
        _851 = _852;
        _853 = _852;
        _854 = _852;
        _855 = _852;
        _856 = _852;
        _857 = _852;
        _858 = _852;
        _859 = _852;
        _860 = _852;
        _861 = _852;
        _862 = _852;
        _863 = _852;
        _864 = 0.0;
        _865 = 0.0;
        _866 = 0.0;
    }
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _892 = fma(_549, cbModelParam._m0[30u].z, fma(_545, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _541));
        float _896 = fma(_549, cbModelParam._m0[31u].z, fma(_545, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _541));
        float _900 = fma(_549, cbModelParam._m0[32u].z, fma(_545, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _541));
        float _923 = _541 + _304;
        float _924 = _545 + _305;
        float _925 = _549 + _306;
        float _935 = fma(_925, cbModelParam._m0[30u].z, fma(_924, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923)) - _892;
        float _936 = fma(_925, cbModelParam._m0[31u].z, fma(_924, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923)) - _896;
        float _937 = fma(_925, cbModelParam._m0[32u].z, fma(_924, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923)) - _900;
        float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
        float _954 = ((_941 * _935) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_892 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_941 * _936) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_896 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_941 * _937) / cbModelParam._m0[35u].z) + ((((((_900 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        float _991 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_958.x + (-0.5));
        float _993 = _991 * (_958.y + (-0.5));
        float _994 = _991 * (_958.z + (-0.5));
        float _1001 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_965.x + (-0.5));
        float _1003 = _1001 * (_965.y + (-0.5));
        float _1004 = _1001 * (_965.z + (-0.5));
        float _1011 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_972.x + (-0.5));
        float _1013 = _1011 * (_972.y + (-0.5));
        float _1014 = _1011 * (_972.z + (-0.5));
        float _1021 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_979.x + (-0.5));
        float _1023 = _1021 * (_979.y + (-0.5));
        float _1024 = _1021 * (_979.z + (-0.5));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = _992 * 0.5;
        float _1029 = _1002 * 0.5;
        float _1030 = _1012 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_304, _305, _306), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3500 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_1055 + 1.0))) + _1060) * _1025;
        float _1070 = _993 * 0.5;
        float _1071 = _1003 * 0.5;
        float _1072 = _1013 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_304, _305, _306), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3533 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_1097 + 1.0))) + _1102) * _1026;
        float _1112 = _994 * 0.5;
        float _1113 = _1004 * 0.5;
        float _1114 = _1014 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_304, _305, _306), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3566 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_1139 + 1.0))) + _1144) * _1027;
        _1161 = _994;
        _1162 = _993;
        _1163 = _992;
        _1164 = _1004;
        _1165 = _1003;
        _1166 = _1002;
        _1167 = _1014;
        _1168 = _1013;
        _1169 = _1012;
        _1170 = _1027;
        _1171 = _1026;
        _1172 = _1025;
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
    }
    else
    {
        _1161 = _852;
        _1162 = _852;
        _1163 = _852;
        _1164 = _852;
        _1165 = _852;
        _1166 = _852;
        _1167 = _852;
        _1168 = _852;
        _1169 = _852;
        _1170 = _852;
        _1171 = _852;
        _1172 = _852;
        _1173 = 0.0;
        _1174 = 0.0;
        _1175 = 0.0;
    }
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _864)) + _864;
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _865)) + _865;
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _866)) + _866;
    float _1208 = fma(_1187, cbSceneParam._m0[89u].z, fma(_1186, cbSceneParam._m0[89u].y, _1185 * cbSceneParam._m0[89u].x));
    float _1211 = fma(_1187, cbSceneParam._m0[90u].z, fma(_1186, cbSceneParam._m0[90u].y, _1185 * cbSceneParam._m0[90u].x));
    float _1214 = fma(_1187, cbSceneParam._m0[91u].z, fma(_1186, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1185));
    float _1229 = _485 * 0.5;
    float _1230 = _486 * 0.5;
    float _1231 = _487 * 0.5;
    float _1232 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1235 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1238 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1272;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1245 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_851, _855, _858, _861));
        float _1249 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_853, _856, _859, _862));
        float _1253 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_854, _857, _860, _863));
        float _1260 = dot(vec4(cbModelParam._m0[39u]), vec4(_1229, _1230, _1231, 1.0));
        _1272 = dot(vec3(isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1260) ? 0.0 : (isnan(0.0) ? _1260 : max(0.0, _1260))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1272 = 1.0;
    }
    float _1283;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1274 = dot(vec4(cbModelParam._m0[40u]), vec4(_1229, _1230, _1231, 1.0));
        _1283 = dot(vec3(isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1274) ? 0.0 : (isnan(0.0) ? _1274 : max(0.0, _1274))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1283 = 1.0;
    }
    float _1287 = (_1283 * cbModelParam._m0[1u].x) + (_1272 * (1.0 - cbModelParam._m0[1u].x));
    float _1297 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _307);
    float _1298 = isnan(_1297) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1297 : min(cbModelParam._m0[25u].z, _1297));
    float _1380;
    float _1382;
    float _1384;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1347 = fma(_549, cbModelParam._m0[13u].z, fma(_545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _541)) + cbModelParam._m0[13u].w;
        float _1351 = fma(_549, cbModelParam._m0[14u].z, fma(_545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _541)) + cbModelParam._m0[14u].w;
        float _1355 = fma(_549, cbModelParam._m0[15u].z, fma(_545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _541)) + cbModelParam._m0[15u].w;
        float _1358 = fma(_487, cbModelParam._m0[13u].z, fma(_486, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _485));
        float _1361 = fma(_487, cbModelParam._m0[14u].z, fma(_486, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _485));
        float _1364 = fma(_487, cbModelParam._m0[15u].z, fma(_486, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _485));
        float _1392;
        if (_1358 > 0.0)
        {
            _1392 = abs((1.0 - _1347) / _1358);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1347 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1392 = frontier_phi_16_14_ladder;
        }
        float _1621;
        if (_1361 > 0.0)
        {
            _1621 = abs((1.0 - _1351) / _1361);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1351 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1621 = frontier_phi_25_21_ladder;
        }
        float _1878;
        if (_1364 > 0.0)
        {
            _1878 = abs((1.0 - _1355) / _1364);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1355 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1878 = frontier_phi_37_32_ladder;
        }
        float _1880 = isnan(_1621) ? _1392 : (isnan(_1392) ? _1621 : min(_1392, _1621));
        float _1881 = isnan(_1878) ? _1880 : (isnan(_1880) ? _1878 : min(_1880, _1878));
        float _1885 = (_1881 * _1358) + _1347;
        float _1886 = (_1881 * _1361) + _1351;
        float _1887 = (_1881 * _1364) + _1355;
        float _1888 = _1881 * 9.9999997473787516355514526367188e-05;
        float _1890 = (-1.0) - _1888;
        float _1892 = _1888 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1887 > _1892) || ((_1887 < _1890) || ((_1886 > _1892) || ((_1886 < _1890) || ((_1885 < _1890) || (_1885 > _1892))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2015 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1887, cbModelParam._m0[9u].z, fma(_1886, cbModelParam._m0[9u].y, _1885 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1887, cbModelParam._m0[10u].z, fma(_1886, cbModelParam._m0[10u].y, _1885 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1887, cbModelParam._m0[11u].z, fma(_1886, cbModelParam._m0[11u].y, _1885 * cbModelParam._m0[11u].x))), _1298);
            frontier_phi_15_37_ladder = _2015.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2015.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2015.x * cbModelParam._m0[1u].y;
        }
        _1380 = frontier_phi_15_37_ladder_2;
        _1382 = frontier_phi_15_37_ladder_1;
        _1384 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1368 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_485, _486, _487), _1298);
        _1380 = _1368.x * cbModelParam._m0[1u].y;
        _1382 = _1368.y * cbModelParam._m0[1u].y;
        _1384 = _1368.z * cbModelParam._m0[1u].y;
    }
    float _1388 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _307);
    float _1389 = isnan(_1388) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1388 : min(cbModelParam._m0[25u].w, _1388));
    float _1482;
    float _1484;
    float _1486;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1446 = fma(_549, cbModelParam._m0[21u].z, fma(_545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _541)) + cbModelParam._m0[21u].w;
        float _1450 = fma(_549, cbModelParam._m0[22u].z, fma(_545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _541)) + cbModelParam._m0[22u].w;
        float _1454 = fma(_549, cbModelParam._m0[23u].z, fma(_545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _541)) + cbModelParam._m0[23u].w;
        float _1457 = fma(_487, cbModelParam._m0[21u].z, fma(_486, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _485));
        float _1460 = fma(_487, cbModelParam._m0[22u].z, fma(_486, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _485));
        float _1463 = fma(_487, cbModelParam._m0[23u].z, fma(_486, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _485));
        float _1626;
        if (_1457 > 0.0)
        {
            _1626 = abs((1.0 - _1446) / _1457);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1446 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1626 = frontier_phi_27_23_ladder;
        }
        float _1905;
        if (_1460 > 0.0)
        {
            _1905 = abs((1.0 - _1450) / _1460);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1450 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1905 = frontier_phi_39_34_ladder;
        }
        float _2118;
        if (_1463 > 0.0)
        {
            _2118 = abs((1.0 - _1454) / _1463);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1454 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2118 = frontier_phi_48_45_ladder;
        }
        float _2120 = isnan(_1905) ? _1626 : (isnan(_1626) ? _1905 : min(_1626, _1905));
        float _2121 = isnan(_2118) ? _2120 : (isnan(_2120) ? _2118 : min(_2120, _2118));
        float _2125 = (_2121 * _1457) + _1446;
        float _2126 = (_2121 * _1460) + _1450;
        float _2127 = (_2121 * _1463) + _1454;
        float _2128 = _2121 * 9.9999997473787516355514526367188e-05;
        float _2129 = (-1.0) - _2128;
        float _2131 = _2128 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2127 > _2131) || ((_2127 < _2129) || ((_2126 > _2131) || ((_2126 < _2129) || ((_2125 < _2129) || (_2125 > _2131))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2325 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2127, cbModelParam._m0[17u].z, fma(_2126, cbModelParam._m0[17u].y, _2125 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2127, cbModelParam._m0[18u].z, fma(_2126, cbModelParam._m0[18u].y, _2125 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2127, cbModelParam._m0[19u].z, fma(_2126, cbModelParam._m0[19u].y, _2125 * cbModelParam._m0[19u].x))), _1389);
            frontier_phi_24_48_ladder = _2325.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2325.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2325.x * cbModelParam._m0[1u].z;
        }
        _1482 = frontier_phi_24_48_ladder_2;
        _1484 = frontier_phi_24_48_ladder_1;
        _1486 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1466 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_485, _486, _487), _1389);
        _1482 = _1466.x * cbModelParam._m0[1u].z;
        _1484 = _1466.y * cbModelParam._m0[1u].z;
        _1486 = _1466.z * cbModelParam._m0[1u].z;
    }
    float _1499 = (((_512 * _461) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1482 - _1380)) + _1380);
    float _1501 = (((_512 * _463) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1484 - _1382)) + _1382);
    float _1503 = (((_512 * _464) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1506 = fma(_1503, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1499 * cbSceneParam._m0[89u].x));
    float _1509 = fma(_1503, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1499 * cbSceneParam._m0[90u].x));
    float _1512 = fma(_1503, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, _1499 * cbSceneParam._m0[91u].x));
    vec4 _1520 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_394, _395));
    float _1522 = _1520.w;
    float _1534 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1522);
    float _1535 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1522);
    float _1536 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1522);
    uvec4 _1540 = floatBitsToUint(cbInstanceData._m0[_435 + 5u]);
    uint _1542 = _1540.x * 14u;
    uint _1543 = _1542 + 13u;
    float _1550 = _477 + (-1.0);
    float _1555 = (cbLight._m0[_1543].x * _1550) + 1.0;
    float _1556 = (cbLight._m0[_1543].y * _1550) + 1.0;
    float _1557 = (cbLight._m0[_1543].z * _1550) + 1.0;
    float _1558 = (cbLight._m0[_1543].w * _1550) + 1.0;
    uint _1559 = _1542 + 5u;
    float _1565 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
    uint _1569 = _1542 + 4u;
    float _1579 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
    uint _1583 = _1542 | 1u;
    float _1594 = dot(vec3(cbLight._m0[_1542].xyz), vec3(_304, _305, _306));
    float _1597 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_304, _305, _306));
    float _3702 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _3713 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
    float _1602 = (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.3183098733425140380859375;
    float _1604 = (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.3183098733425140380859375;
    float _1611 = ((cbLight._m0[_1559].x * _1565) * _1604) + (((cbLight._m0[_1569].x * _1534) * _1579) * _1602);
    float _1612 = ((_1565 * cbLight._m0[_1559].y) * _1604) + (((cbLight._m0[_1569].y * _1535) * _1579) * _1602);
    float _1613 = ((_1565 * cbLight._m0[_1559].z) * _1604) + (((cbLight._m0[_1569].z * _1536) * _1579) * _1602);
    uvec4 _1618 = floatBitsToUint(cbLight._m0[_1542 + 12u]);
    bool _1620 = _1618.x == 0u;
    float _1631;
    float _1633;
    float _1635;
    if (_1620)
    {
        _1631 = _1611;
        _1633 = _1612;
        _1635 = _1613;
    }
    else
    {
        uint _1639 = _1542 + 6u;
        float _1655 = (dot(vec3(cbLight._m0[_1542 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1656 = _1655 * _1655;
        float _3724 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1658 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _1631 = (((cbLight._m0[_1639].x * 0.3183098733425140380859375) * _1657) * _1658) + _1611;
        _1633 = (((cbLight._m0[_1639].y * 0.3183098733425140380859375) * _1657) * _1658) + _1612;
        _1635 = (((cbLight._m0[_1639].z * 0.3183098733425140380859375) * _1657) * _1658) + _1613;
    }
    bool _1638 = _1618.y == 0u;
    float _1676;
    float _1678;
    float _1680;
    if (_1638)
    {
        _1676 = _1631;
        _1678 = _1633;
        _1680 = _1635;
    }
    else
    {
        uint _1849 = _1542 + 7u;
        float _1865 = (dot(vec3(cbLight._m0[_1542 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1866 = _1865 * _1865;
        float _3740 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1868 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _1676 = (((cbLight._m0[_1849].x * 0.3183098733425140380859375) * _1867) * _1868) + _1631;
        _1678 = (((cbLight._m0[_1849].y * 0.3183098733425140380859375) * _1867) * _1868) + _1633;
        _1680 = (((cbLight._m0[_1849].z * 0.3183098733425140380859375) * _1867) * _1868) + _1635;
    }
    uint _1683 = _1542 + 8u;
    float _1696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1542].w)) * _307) * 0.949999988079071044921875);
    float _1697 = _1696 * _1696;
    float _1698 = cbLight._m0[_1542].x + _386;
    float _1699 = cbLight._m0[_1542].y + _387;
    float _1700 = cbLight._m0[_1542].z + _388;
    float _1704 = inversesqrt(dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700)));
    float _1705 = _1704 * _1698;
    float _1706 = _1704 * _1699;
    float _1707 = _1704 * _1700;
    float _1708 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1542].xyz));
    float _3756 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1711 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _1712 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _1713 = dot(vec3(_304, _305, _306), vec3(_1705, _1706, _1707));
    float _3778 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1716 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _1717 = dot(vec3(cbLight._m0[_1542].xyz), vec3(_1705, _1706, _1707));
    float _3789 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1721 = _1697 * _1697;
    float _1725 = ((_1716 * _1716) * (_1721 + (-1.0))) + 1.0;
    float _1733 = exp2(log2(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * 5.0);
    float _1734 = 0.959999978542327880859375 - _458;
    float _1736 = 0.959999978542327880859375 - _459;
    float _1737 = 0.959999978542327880859375 - _460;
    float _1744 = 1.0 - _1697;
    float _1755 = (0.5 / (((_1712 * ((_1711 * _1744) + _1697)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1744) + _1697) * _1711))) * _1711;
    float _3800 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1757 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1721 / ((_1725 * _1725) * 3.141590118408203125));
    uint _1771 = _1542 + 9u;
    float _1782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1583].w)) * _307) * 0.949999988079071044921875);
    float _1783 = _1782 * _1782;
    float _1784 = cbLight._m0[_1583].x + _386;
    float _1785 = cbLight._m0[_1583].y + _387;
    float _1786 = cbLight._m0[_1583].z + _388;
    float _1790 = inversesqrt(dot(vec3(_1784, _1785, _1786), vec3(_1784, _1785, _1786)));
    float _1791 = _1790 * _1784;
    float _1792 = _1790 * _1785;
    float _1793 = _1790 * _1786;
    float _1794 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1583].xyz));
    float _3811 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _1798 = dot(vec3(_304, _305, _306), vec3(_1791, _1792, _1793));
    float _3822 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1802 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_1791, _1792, _1793));
    float _3833 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1806 = _1783 * _1783;
    float _1810 = ((_1801 * _1801) * (_1806 + (-1.0))) + 1.0;
    float _1817 = exp2(log2(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * 5.0);
    float _1824 = 1.0 - _1783;
    float _1834 = (0.5 / (((_1712 * ((_1797 * _1824) + _1783)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1824) + _1783) * _1797))) * _1797;
    float _3844 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1836 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1806 / ((_1810 * _1810) * 3.141590118408203125));
    float _1846 = (((((_1817 * _1734) + _461) * cbLight._m0[_1771].x) * _1836) * _1565) + ((((cbLight._m0[_1683].x * _1534) * ((_1733 * _1734) + _461)) * _1757) * _1579);
    float _1847 = (((((_1817 * _1736) + _463) * cbLight._m0[_1771].y) * _1836) * _1565) + ((((cbLight._m0[_1683].y * _1535) * ((_1733 * _1736) + _463)) * _1757) * _1579);
    float _1848 = (((((_1817 * _1737) + _464) * cbLight._m0[_1771].z) * _1836) * _1565) + ((((cbLight._m0[_1683].z * _1536) * ((_1733 * _1737) + _464)) * _1757) * _1579);
    float _1910;
    float _1912;
    float _1914;
    if (_1620)
    {
        _1910 = _1846;
        _1912 = _1847;
        _1914 = _1848;
    }
    else
    {
        uint _1916 = _1542 + 2u;
        uint _1920 = _1542 + 10u;
        float _1934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1916].w)) * _307) * 0.949999988079071044921875);
        float _1935 = _1934 * _1934;
        float _1936 = cbLight._m0[_1916].x + _386;
        float _1937 = cbLight._m0[_1916].y + _387;
        float _1938 = cbLight._m0[_1916].z + _388;
        float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
        float _1943 = _1942 * _1936;
        float _1944 = _1942 * _1937;
        float _1945 = _1942 * _1938;
        float _1946 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1916].xyz));
        float _3855 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1949 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1950 = dot(vec3(_304, _305, _306), vec3(_1943, _1944, _1945));
        float _3866 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1953 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1954 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_1943, _1944, _1945));
        float _3877 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1958 = _1935 * _1935;
        float _1962 = ((_1953 * _1953) * (_1958 + (-1.0))) + 1.0;
        float _1969 = exp2(log2(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * 5.0);
        float _1976 = 1.0 - _1935;
        float _1986 = (0.5 / (((_1712 * ((_1949 * _1976) + _1935)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1976) + _1935) * _1949))) * _1949;
        float _3888 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1988 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1958 / ((_1962 * _1962) * 3.141590118408203125));
        float _1989 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _1910 = (((((_1969 * _1734) + _461) * cbLight._m0[_1920].x) * _1988) * _1989) + _1846;
        _1912 = (((((_1969 * _1736) + _463) * cbLight._m0[_1920].y) * _1988) * _1989) + _1847;
        _1914 = (((((_1969 * _1737) + _464) * cbLight._m0[_1920].z) * _1988) * _1989) + _1848;
    }
    float _2024;
    float _2026;
    float _2028;
    if (_1638)
    {
        _2024 = _1910;
        _2026 = _1912;
        _2028 = _1914;
    }
    else
    {
        uint _2035 = _1542 + 3u;
        uint _2039 = _1542 + 11u;
        float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _307) * 0.949999988079071044921875);
        float _2054 = _2053 * _2053;
        float _2055 = cbLight._m0[_2035].x + _386;
        float _2056 = cbLight._m0[_2035].y + _387;
        float _2057 = cbLight._m0[_2035].z + _388;
        float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
        float _2062 = _2061 * _2055;
        float _2063 = _2061 * _2056;
        float _2064 = _2061 * _2057;
        float _2065 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2035].xyz));
        float _3904 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2068 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _2069 = dot(vec3(_304, _305, _306), vec3(_2062, _2063, _2064));
        float _3915 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _2073 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2062, _2063, _2064));
        float _3926 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2077 = _2054 * _2054;
        float _2081 = ((_2072 * _2072) * (_2077 + (-1.0))) + 1.0;
        float _2088 = exp2(log2(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * 5.0);
        float _2095 = 1.0 - _2054;
        float _2105 = (0.5 / (((_1712 * ((_2068 * _2095) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _2095) + _2054) * _2068))) * _2068;
        float _3937 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2107 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_2077 / ((_2081 * _2081) * 3.141590118408203125));
        float _2108 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _2024 = (((((_2088 * _1734) + _461) * cbLight._m0[_2039].x) * _2107) * _2108) + _1910;
        _2026 = (((((_2088 * _1736) + _463) * cbLight._m0[_2039].y) * _2107) * _2108) + _1912;
        _2028 = (((((_2088 * _1737) + _464) * cbLight._m0[_2039].z) * _2107) * _2108) + _1914;
    }
    float _2242;
    float _2244;
    float _2246;
    float _2248;
    float _2250;
    float _2252;
    if (_1540.y == 0u)
    {
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2183;
        float _2185 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2183;
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2183;
        uvec4 _2198 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2199 = _2198.x;
        uint _2210 = uint((float(_2198.y) * floor(float(uint(cbSceneParam._m0[85u].y * _395) / _2199))) + floor(float(uint(cbSceneParam._m0[85u].x * _394) / _2199)));
        float _2220 = (log2(_2186 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2221 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        uint _2224 = uint(isnan(14.0) ? _2221 : (isnan(_2221) ? 14.0 : min(_2221, 14.0)));
        uvec4 _2229 = texelFetch(g_lightClusterGridBuffer, int(((_2224 << 2u) + (_2210 << 6u)) >> 2u));
        uint _2230 = _2229.x;
        uint _2231 = _2198.z;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        if (((((1u << ((_2231 >> 4u) & 15u)) + 4294967295u) & _2230) == 0u) || ((_2231 & 240u) == 0u))
        {
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
            _2340 = 0.0;
        }
        else
        {
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2339;
            float _2341;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            uint _2480 = 0u;
            uint _2489;
            bool _2490;
            for (;;)
            {
                _2489 = texelFetch(g_lightClassification, int((((_2224 << 5u) + (_2210 << 9u)) + (_2480 << 2u)) >> 2u)).x;
                _2490 = _2489 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2490)
                {
                    frontier_phi_63_pred = _2479;
                    frontier_phi_63_pred_1 = _2478;
                    frontier_phi_63_pred_2 = _2477;
                    frontier_phi_63_pred_3 = _2476;
                    frontier_phi_63_pred_4 = _2475;
                    frontier_phi_63_pred_5 = _2474;
                }
                else
                {
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    uint _2604;
                    _2598 = _2474;
                    _2599 = _2475;
                    _2600 = _2476;
                    _2601 = _2477;
                    _2602 = _2478;
                    _2603 = _2479;
                    _2604 = _2489;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    for (;;)
                    {
                        uint _2608 = uint(findLSB(_2604)) + (_2480 << 5u);
                        uint _2605 = (_2604 + 4294967295u) & _2604;
                        uint _2610 = _2608 * 48u;
                        vec4 _2624 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2610)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 3u)).x));
                        uint _2630 = (_2608 * 48u) + 4u;
                        vec4 _2643 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2630)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 3u)).x));
                        uint _2649 = (_2608 * 48u) + 8u;
                        vec3 _2660 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2649)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 2u)).x));
                        float _2664 = _2624.x - _2184;
                        float _2665 = _2624.y - _2185;
                        float _2666 = _2624.z - _2186;
                        float _2667 = dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666));
                        float _2670 = inversesqrt(_2667);
                        float _2671 = _2670 * _2664;
                        float _2672 = _2670 * _2665;
                        float _2673 = _2670 * _2666;
                        float _2674 = dot(vec3(_416, _419, _422), vec3(_2671, _2672, _2673));
                        float _2679 = 1.0 - (_2667 * _2624.w);
                        float _3963 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
                        float _2680 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                        float _2681 = sqrt(_2667) * _2643.w;
                        float _2684 = 1.39999997615814208984375 / (_2681 + 1.39999997615814208984375);
                        float _2685 = _2684 * _2684;
                        float _2688 = ((1.0 - _2685) * _2674) + _2685;
                        float _2691 = _2681 * _2681;
                        float _2695 = ((isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0))) * _2680) / ((_2691 * 0.699999988079071044921875) + 1.0);
                        float _2699 = (-0.0) - _2184;
                        float _2700 = (-0.0) - _2185;
                        float _2701 = (-0.0) - _2186;
                        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
                        float _2706 = _2705 * _2699;
                        float _2707 = _2705 * _2700;
                        float _2708 = _2705 * _2701;
                        float _2716 = exp2(log2(1.0 / ((_2691 * 3.5) + 5.0)) * 0.25);
                        float _2717 = 1.0 - _493;
                        float _2724 = sqrt(1.0 - ((1.0 - (_2717 * _2717)) * (1.0 - (_2716 * _2716))));
                        float _2725 = _2724 * _2724;
                        float _2726 = _2725 * _2725;
                        float _2727 = _2706 + _2671;
                        float _2728 = _2707 + _2672;
                        float _2729 = _2708 + _2673;
                        float _2733 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
                        float _2737 = dot(vec3(_416, _419, _422), vec3(_2706, _2707, _2708));
                        float _3979 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2740 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                        float _2741 = dot(vec3(_416, _419, _422), vec3(_2733 * _2727, _2733 * _2728, _2733 * _2729));
                        float _3990 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2744 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
                        float _2748 = ((_2744 * _2744) * (_2726 + (-1.0))) + 1.0;
                        float _2749 = _2684 * _2725;
                        float _2750 = _2749 * _2749;
                        float _2753 = ((1.0 - _2750) * _2674) + _2750;
                        float _4001 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2754 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                        float _2755 = 1.0 - _2725;
                        float _2765 = (0.5 / (((_2754 * ((_2740 * _2755) + _2725)) + 9.9999999392252902907785028219223e-09) + (((_2754 * _2755) + _2725) * _2740))) * _2754;
                        float _4012 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2776 = (((_2726 * 3.1415927410125732421875) * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) / ((_2748 * _2748) * ((_2691 * 2.1991131305694580078125) + 3.141590118408203125))) * _2680;
                        _2533 = (_2695 * _2643.x) + _2601;
                        _2534 = (_2695 * _2643.y) + _2602;
                        _2535 = (_2695 * _2643.z) + _2603;
                        _2530 = (_2776 * _2660.x) + _2598;
                        _2531 = (_2776 * _2660.y) + _2599;
                        _2532 = (_2776 * _2660.z) + _2600;
                        if (_2605 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2598 = _2530;
                            _2599 = _2531;
                            _2600 = _2532;
                            _2601 = _2533;
                            _2602 = _2534;
                            _2603 = _2535;
                            _2604 = _2605;
                        }
                    }
                    frontier_phi_63_pred = _2535;
                    frontier_phi_63_pred_1 = _2534;
                    frontier_phi_63_pred_2 = _2533;
                    frontier_phi_63_pred_3 = _2532;
                    frontier_phi_63_pred_4 = _2531;
                    frontier_phi_63_pred_5 = _2530;
                }
                _2341 = frontier_phi_63_pred;
                _2339 = frontier_phi_63_pred_1;
                _2337 = frontier_phi_63_pred_2;
                _2335 = frontier_phi_63_pred_3;
                _2333 = frontier_phi_63_pred_4;
                _2331 = frontier_phi_63_pred_5;
                uint _2481 = _2480 + 1u;
                if (_2481 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2474 = _2331;
                    _2475 = _2333;
                    _2476 = _2335;
                    _2477 = _2337;
                    _2478 = _2339;
                    _2479 = _2341;
                    _2480 = _2481;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
            _2340 = _2341;
        }
        uvec4 _2344 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2345 = _2344.z;
        uint _2347 = (_2345 >> 8u) & 15u;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        float _2452;
        if (((4294967295u << _2347) & _2230) == 0u)
        {
            _2442 = _2330;
            _2444 = _2332;
            _2446 = _2334;
            _2448 = _2336;
            _2450 = _2338;
            _2452 = _2340;
        }
        else
        {
            float _2467 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
            float _2468 = _2467 * _2184;
            float _2469 = _2467 * _2185;
            float _2470 = _2467 * _2186;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2347 < ((_2345 >> 12u) & 15u))
            {
                float _2443;
                float _2445;
                float _2447;
                float _2449;
                float _2451;
                float _2453;
                float _2581 = _2330;
                float _2582 = _2332;
                float _2583 = _2334;
                float _2584 = _2336;
                float _2585 = _2338;
                float _2586 = _2340;
                uint _2587 = _2347;
                uint _2596;
                bool _2597;
                for (;;)
                {
                    _2596 = texelFetch(g_lightClassification, int((((_2224 << 5u) + (_2210 << 9u)) + (_2587 << 2u)) >> 2u)).x;
                    _2597 = _2596 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2597)
                    {
                        frontier_phi_69_pred = _2586;
                        frontier_phi_69_pred_1 = _2585;
                        frontier_phi_69_pred_2 = _2584;
                        frontier_phi_69_pred_3 = _2583;
                        frontier_phi_69_pred_4 = _2582;
                        frontier_phi_69_pred_5 = _2581;
                    }
                    else
                    {
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _2794 = _2581;
                        float _2795 = _2582;
                        float _2796 = _2583;
                        float _2797 = _2584;
                        float _2798 = _2585;
                        float _2799 = _2586;
                        uint _2800 = _2596;
                        uint _2801;
                        vec4 _2826;
                        float _2827;
                        vec4 _2842;
                        vec3 _2854;
                        vec4 _2870;
                        vec4 _2886;
                        float _2933;
                        bool _2934;
                        for (;;)
                        {
                            uint _2811 = ((_2587 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2800));
                            _2801 = (_2800 + 4294967295u) & _2800;
                            uint _2813 = _2811 * 40u;
                            _2826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 3u)).x));
                            _2827 = _2826.w;
                            uint _2829 = (_2811 * 40u) + 4u;
                            _2842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 3u)).x));
                            uint _2844 = (_2811 * 40u) + 8u;
                            _2854 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x));
                            uint _2857 = (_2811 * 40u) + 16u;
                            _2870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 3u)).x));
                            uint _2873 = (_2811 * 40u) + 20u;
                            _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            uint _2889 = (_2811 * 40u) + 24u;
                            vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2908 = (_2811 * 40u) + 28u;
                            vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            _2933 = fma(_2186, _2921.z, fma(_2185, _2921.y, _2921.x * _2184)) + _2921.w;
                            _2934 = !((fma(_2186, _2902.z, fma(_2185, _2902.y, _2902.x * _2184)) + _2902.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2934)
                            {
                                float _2961 = _2826.x - _2184;
                                float _2962 = _2826.y - _2185;
                                float _2963 = _2826.z - _2186;
                                float _2964 = dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963));
                                float _2967 = inversesqrt(_2964);
                                float _2968 = _2967 * _2961;
                                float _2969 = _2967 * _2962;
                                float _2970 = _2967 * _2963;
                                float _2974 = 1.0 - (_2964 / (_2827 * _2827));
                                float _4023 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2975 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                                float _2979 = sqrt(_2964) * _2842.w;
                                float _2981 = 1.39999997615814208984375 / (_2979 + 1.39999997615814208984375);
                                float _2982 = _2981 * _2981;
                                float _2985 = ((1.0 - _2982) * dot(vec3(_2968, _2969, _2970), vec3(_416, _419, _422))) + _2982;
                                float _2988 = _2979 * _2979;
                                float _2992 = (fma(_2186, _2870.z, fma(_2185, _2870.y, _2870.x * _2184)) + _2870.w) / _2933;
                                float _2993 = (fma(_2186, _2886.z, fma(_2185, _2886.y, _2886.x * _2184)) + _2886.w) / _2933;
                                float _2997 = 1.0 - dot(vec2(_2992, _2993), vec2(_2992, _2993));
                                float _4039 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _2998 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                                float _2999 = _2998 * (((isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))) * _2975) / ((_2988 * 0.699999988079071044921875) + 1.0));
                                float _3011 = exp2(log2(1.0 / ((_2988 * 3.5) + 5.0)) * 0.25);
                                float _3012 = 1.0 - _493;
                                float _3019 = sqrt(1.0 - ((1.0 - (_3012 * _3012)) * (1.0 - (_3011 * _3011))));
                                float _3020 = _3019 * _3019;
                                float _3021 = _3020 * _3020;
                                float _3022 = _2968 - _2468;
                                float _3023 = _2969 - _2469;
                                float _3024 = _2970 - _2470;
                                float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                                float _3032 = dot(vec3(_416, _419, _422), vec3((-0.0) - _2468, (-0.0) - _2469, (-0.0) - _2470));
                                float _4050 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3035 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _3036 = dot(vec3(_416, _419, _422), vec3(_3028 * _3022, _3028 * _3023, _3028 * _3024));
                                float _4061 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3039 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _3043 = ((_3039 * _3039) * (_3021 + (-1.0))) + 1.0;
                                float _3044 = _2981 * _3020;
                                float _3045 = _3044 * _3044;
                                float _3051 = ((1.0 - _3045) * dot(vec3(_416, _419, _422), vec3(_2968, _2969, _2970))) + _3045;
                                float _4072 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3053 = 1.0 - _3020;
                                float _3063 = (0.5 / (((_3052 * ((_3035 * _3053) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_3052 * _3053) + _3020) * _3035))) * _3052;
                                float _4083 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3073 = (_2998 * _2975) * (((_3021 * 3.1415927410125732421875) * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) / ((_3043 * _3043) * ((_2988 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2999 * _2842.z;
                                frontier_phi_75_pred_1 = _2999 * _2842.y;
                                frontier_phi_75_pred_2 = _2999 * _2842.x;
                                frontier_phi_75_pred_3 = _3073 * _2854.z;
                                frontier_phi_75_pred_4 = _3073 * _2854.y;
                                frontier_phi_75_pred_5 = _3073 * _2854.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3082 = frontier_phi_75_pred;
                            _3081 = frontier_phi_75_pred_1;
                            _3080 = frontier_phi_75_pred_2;
                            _3079 = frontier_phi_75_pred_3;
                            _3078 = frontier_phi_75_pred_4;
                            _3077 = frontier_phi_75_pred_5;
                            _2784 = _3080 + _2797;
                            _2785 = _3081 + _2798;
                            _2786 = _3082 + _2799;
                            _2781 = _3077 + _2794;
                            _2782 = _3078 + _2795;
                            _2783 = _3079 + _2796;
                            if (_2801 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2801;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2786;
                        frontier_phi_69_pred_1 = _2785;
                        frontier_phi_69_pred_2 = _2784;
                        frontier_phi_69_pred_3 = _2783;
                        frontier_phi_69_pred_4 = _2782;
                        frontier_phi_69_pred_5 = _2781;
                    }
                    _2453 = frontier_phi_69_pred;
                    _2451 = frontier_phi_69_pred_1;
                    _2449 = frontier_phi_69_pred_2;
                    _2447 = frontier_phi_69_pred_3;
                    _2445 = frontier_phi_69_pred_4;
                    _2443 = frontier_phi_69_pred_5;
                    uint _2588 = _2587 + 1u;
                    if (_2588 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2581 = _2443;
                        _2582 = _2445;
                        _2583 = _2447;
                        _2584 = _2449;
                        _2585 = _2451;
                        _2586 = _2453;
                        _2587 = _2588;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2453;
                frontier_phi_57_58_ladder_1 = _2451;
                frontier_phi_57_58_ladder_2 = _2449;
                frontier_phi_57_58_ladder_3 = _2447;
                frontier_phi_57_58_ladder_4 = _2445;
                frontier_phi_57_58_ladder_5 = _2443;
            }
            else
            {
                frontier_phi_57_58_ladder = _2340;
                frontier_phi_57_58_ladder_1 = _2338;
                frontier_phi_57_58_ladder_2 = _2336;
                frontier_phi_57_58_ladder_3 = _2334;
                frontier_phi_57_58_ladder_4 = _2332;
                frontier_phi_57_58_ladder_5 = _2330;
            }
            _2442 = frontier_phi_57_58_ladder_5;
            _2444 = frontier_phi_57_58_ladder_4;
            _2446 = frontier_phi_57_58_ladder_3;
            _2448 = frontier_phi_57_58_ladder_2;
            _2450 = frontier_phi_57_58_ladder_1;
            _2452 = frontier_phi_57_58_ladder;
        }
        float _2457 = isnan(1.0) ? _477 : (isnan(_477) ? 1.0 : min(_477, 1.0));
        _2242 = (_2457 * _2448) + _1676;
        _2244 = (_2457 * _2450) + _1678;
        _2246 = (_2457 * _2452) + _1680;
        _2248 = ((_2442 * _461) * _2457) + _2024;
        _2250 = ((_2444 * _463) * _2457) + _2026;
        _2252 = ((_2446 * _464) * _2457) + _2028;
    }
    else
    {
        _2242 = _1676;
        _2244 = _1678;
        _2246 = _1680;
        _2248 = _2024;
        _2250 = _2026;
        _2252 = _2028;
    }
    float _4099 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4110 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4121 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    uint _2272 = _435 + 6u;
    float _2280 = _394 / cbSceneParam._m0[86u].x;
    float _2281 = _395 / cbSceneParam._m0[86u].y;
    vec4 _2295 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2280, _2281, (log2((isnan(cbSceneParam._m0[77u].w) ? _328 : (isnan(_328) ? cbSceneParam._m0[77u].w : min(_328, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2297 = _2295.x;
    float _2298 = _2295.y;
    float _2299 = _2295.z;
    float _2300 = _2295.w;
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    if (_328 > cbSceneParam._m0[78u].w)
    {
        float _2355 = isnan(_328) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _328 : min(cbSceneParam._m0[80u].w, _328));
        float _2356 = _2355 / _328;
        float _2367 = _2356 * _379;
        float _2368 = _380 * _2356;
        float _2369 = (-0.0) - _2368;
        float _2370 = _2356 * _381;
        float _2372 = (cbSceneParam._m0[77u].w * _2369) / _2355;
        float _2373 = _2372 + cbSceneParam._m0[79u].w;
        float _2374 = cbSceneParam._m0[79u].w - _2368;
        float _2380 = sqrt(((_2367 * _2367) + (_2368 * _2368)) + (_2370 * _2370));
        float _2383 = (1.0 - (cbSceneParam._m0[77u].w / _2355)) * _2380;
        float _2388 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2390 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2543;
        if (abs((_2369 - _2372) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2543 = ((((_2373 > 0.0) ? exp2(_2388 * _2373) : (2.0 - exp2(_2390 * _2373))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2383;
        }
        else
        {
            float _2503 = 1.0 / cbSceneParam._m0[80u].x;
            float _2504 = isnan(_2374) ? _2373 : (isnan(_2373) ? _2374 : max(_2373, _2374));
            float _2505 = isnan(_2374) ? _2373 : (isnan(_2373) ? _2374 : min(_2373, _2374));
            float _2514 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : min(_2504, 0.0));
            float _2515 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : min(_2505, 0.0));
            _2543 = ((abs(_2380 / _2369) * cbSceneParam._m0[80u].y) * ((((_2514 - _2515) * 2.0) - ((exp2(_2388 * (isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0)))) - exp2(_2388 * (isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0))))) * _2503)) - ((exp2(_2390 * _2514) - exp2(_2390 * _2515)) * _2503))) + (_2383 * cbSceneParam._m0[80u].z);
        }
        vec4 _2545 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2280, _2281, 1.0), 0.0);
        float _2554 = exp2((_2543 * (-1.44269502162933349609375)) * (1.0 - _2545.w));
        float _2555 = log2(_2554);
        float _2571 = log2(_2300);
        _2392 = (exp2(_2571 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2555 * cbSceneParam._m0[78u].x)) * _2545.x) / cbSceneParam._m0[78u].x)) + _2297;
        _2394 = (exp2(_2571 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2555 * cbSceneParam._m0[78u].y)) * _2545.y) / cbSceneParam._m0[78u].y)) + _2298;
        _2396 = (exp2(_2571 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2555 * cbSceneParam._m0[78u].z)) * _2545.z) / cbSceneParam._m0[78u].z)) + _2299;
        _2398 = _2554 * _2300;
    }
    else
    {
        _2392 = _2297;
        _2394 = _2298;
        _2396 = _2299;
        _2398 = _2300;
    }
    float _2410 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2411 = _2410 == 3.0;
    float _2412 = log2(_2398);
    float _2419 = exp2(_2412 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2242 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _477))) + ((_2248 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1287)) * cbPerFrame._m0[3u].x));
    float _2420 = exp2(_2412 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2244 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _477))) + ((_2250 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1287)) * cbPerFrame._m0[3u].x));
    float _2421 = exp2(_2412 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2246 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _477))) + ((_2252 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1287)) * cbPerFrame._m0[3u].x));
    float _2430 = (_2410 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2430 * (_2411 ? _2419 : (_2419 + (cbSceneParam._m0[72u].w * _2392)));
    SV_Target.y = _2430 * (_2411 ? _2420 : (_2420 + (cbSceneParam._m0[72u].w * _2394)));
    SV_Target.z = _2430 * (_2411 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2396)));
    SV_Target.w = cbInstanceData._m0[_2272].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2272].w;
}


