#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _850;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _231 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _251 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _251.x;
    vec4 _265 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _269 = _265.z;
    float _274 = (_265.x * 2.0) + (-1.0);
    float _276 = (_265.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3187 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0))));
    float _288 = cbMtdParam._m0[10u].x + _265.w;
    float _291 = fma(_283, _209, fma(_276, _201 * TANGENT.x, (_187 * _180) * _274));
    float _294 = fma(_283, _210, fma(_276, _201 * TANGENT.y, (_187 * _181) * _274));
    float _297 = fma(_283, _211, fma(_276, _201 * TANGENT.z, (_187 * _182) * _274));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _302 = _301 * _291;
    float _303 = _301 * _294;
    float _304 = _301 * _297;
    float _3198 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _305 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
    float _3209 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _3220 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3231 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3242 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3253 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _310 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
    float _326 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _367 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _377 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _367);
    float _378 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _367);
    float _379 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _367);
    float _383 = inversesqrt(dot(vec3(_377, _378, _379), vec3(_377, _378, _379)));
    float _384 = _377 * _383;
    float _385 = _378 * _383;
    float _386 = _379 * _383;
    float _392 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _393 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _414 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _417 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _420 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    uint _433 = uint(roundEven(NORMAL.w)) * 13u;
    uint _436 = (_433 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _442 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0)))) * cbInstanceData._m0[_436].x;
    float _443 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0)))) * cbInstanceData._m0[_436].y;
    float _444 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * cbInstanceData._m0[_436].z;
    float _3264 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
    float _3275 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    float _3286 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    float _448 = 1.0 - _310;
    float _449 = _445 * _448;
    float _450 = _446 * _448;
    float _451 = _447 * _448;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _310;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _310;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _310;
    float _459 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    float _462 = _458 + 0.039999999105930328369140625;
    vec4 _471 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _392, cbSceneParam._m0[86u].y * _393));
    float _475 = ((isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))) * TEXCOORD.z) * _471.x;
    float _476 = dot(vec3(_302, _303, _304), vec3(_384, _385, _386));
    float _479 = _476 * 2.0;
    float _483 = (_479 * _302) - _384;
    float _484 = (_479 * _303) - _385;
    float _485 = (_479 * _304) - _386;
    float _489 = abs(dot(vec3(_384, _385, _386), vec3(_302, _303, _304)));
    float _3297 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _491 = sqrt(_305);
    float _504 = exp2((_491 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_491 * 3.0));
    float _510 = (1.0 - _504) * ((_491 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _511 = _504 * _491;
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _849;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _574 = fma(_547, cbModelParam._m0[26u].z, fma(_543, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _539));
        float _578 = fma(_547, cbModelParam._m0[27u].z, fma(_543, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _539));
        float _582 = fma(_547, cbModelParam._m0[28u].z, fma(_543, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _539));
        float _607 = _539 + _302;
        float _608 = _543 + _303;
        float _609 = _547 + _304;
        float _619 = fma(_609, cbModelParam._m0[26u].z, fma(_608, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _607)) - _574;
        float _620 = fma(_609, cbModelParam._m0[27u].z, fma(_608, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _607)) - _578;
        float _621 = fma(_609, cbModelParam._m0[28u].z, fma(_608, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _607)) - _582;
        float _625 = inversesqrt(dot(vec3(_619, _620, _621), vec3(_619, _620, _621)));
        float _638 = ((_625 * _619) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_574 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _639 = ((_625 * _620) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_578 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _640 = ((_625 * _621) / cbModelParam._m0[34u].z) + ((((((_582 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        float _677 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_643.x + (-0.5));
        float _679 = _677 * (_643.y + (-0.5));
        float _680 = _677 * (_643.z + (-0.5));
        float _687 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_650.x + (-0.5));
        float _689 = _687 * (_650.y + (-0.5));
        float _690 = _687 * (_650.z + (-0.5));
        float _697 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_657.x + (-0.5));
        float _699 = _697 * (_657.y + (-0.5));
        float _700 = _697 * (_657.z + (-0.5));
        float _707 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_664.x + (-0.5));
        float _709 = _707 * (_664.y + (-0.5));
        float _710 = _707 * (_664.z + (-0.5));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = _678 * 0.5;
        float _715 = _688 * 0.5;
        float _716 = _698 * 0.5;
        float _717 = dot(vec3(_714, _715, _716), vec3(_714, _715, _716));
        float _722 = (_717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_717);
        float _731 = (dot(vec3(_302, _303, _304), vec3(_722 * _714, _722 * _715, _722 * _716)) + 1.0) * 0.5;
        float _3323 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _741 = sqrt(((_715 * _715) + (_714 * _714)) + (_716 * _716)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3334 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _743 = _742 * 2.0;
        float _747 = (1.0 - _742) / (_742 + 1.0);
        float _3345 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _757 = ((((1.0 - _748) * (_743 + 2.0)) * exp2(log2(isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * (_743 + 1.0))) + _748) * _711;
        float _758 = _679 * 0.5;
        float _759 = _689 * 0.5;
        float _760 = _699 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _774 = (dot(vec3(_302, _303, _304), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3356 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _783 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3367 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3378 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * (_785 + 1.0))) + _790) * _712;
        float _800 = _680 * 0.5;
        float _801 = _690 * 0.5;
        float _802 = _700 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _816 = (dot(vec3(_302, _303, _304), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3389 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _825 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3400 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3411 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * (_827 + 1.0))) + _832) * _713;
        _849 = _680;
        _851 = _679;
        _852 = _678;
        _853 = _690;
        _854 = _689;
        _855 = _688;
        _856 = _700;
        _857 = _699;
        _858 = _698;
        _859 = _713;
        _860 = _712;
        _861 = _711;
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0)));
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
    }
    else
    {
        _849 = _850;
        _851 = _850;
        _852 = _850;
        _853 = _850;
        _854 = _850;
        _855 = _850;
        _856 = _850;
        _857 = _850;
        _858 = _850;
        _859 = _850;
        _860 = _850;
        _861 = _850;
        _862 = 0.0;
        _863 = 0.0;
        _864 = 0.0;
    }
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _890 = fma(_547, cbModelParam._m0[30u].z, fma(_543, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _539));
        float _894 = fma(_547, cbModelParam._m0[31u].z, fma(_543, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _539));
        float _898 = fma(_547, cbModelParam._m0[32u].z, fma(_543, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _539));
        float _921 = _539 + _302;
        float _922 = _543 + _303;
        float _923 = _547 + _304;
        float _933 = fma(_923, cbModelParam._m0[30u].z, fma(_922, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _921)) - _890;
        float _934 = fma(_923, cbModelParam._m0[31u].z, fma(_922, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _921)) - _894;
        float _935 = fma(_923, cbModelParam._m0[32u].z, fma(_922, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _921)) - _898;
        float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
        float _952 = ((_939 * _933) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_890 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_939 * _934) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_894 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_939 * _935) / cbModelParam._m0[35u].z) + ((((((_898 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        float _989 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_956.x + (-0.5));
        float _991 = _989 * (_956.y + (-0.5));
        float _992 = _989 * (_956.z + (-0.5));
        float _999 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_963.x + (-0.5));
        float _1001 = _999 * (_963.y + (-0.5));
        float _1002 = _999 * (_963.z + (-0.5));
        float _1009 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_970.x + (-0.5));
        float _1011 = _1009 * (_970.y + (-0.5));
        float _1012 = _1009 * (_970.z + (-0.5));
        float _1019 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_977.x + (-0.5));
        float _1021 = _1019 * (_977.y + (-0.5));
        float _1022 = _1019 * (_977.z + (-0.5));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = _990 * 0.5;
        float _1027 = _1000 * 0.5;
        float _1028 = _1010 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_302, _303, _304), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3474 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_1053 + 1.0))) + _1058) * _1023;
        float _1068 = _991 * 0.5;
        float _1069 = _1001 * 0.5;
        float _1070 = _1011 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_302, _303, _304), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3507 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_1095 + 1.0))) + _1100) * _1024;
        float _1110 = _992 * 0.5;
        float _1111 = _1002 * 0.5;
        float _1112 = _1012 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_302, _303, _304), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3540 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_1137 + 1.0))) + _1142) * _1025;
        _1159 = _992;
        _1160 = _991;
        _1161 = _990;
        _1162 = _1002;
        _1163 = _1001;
        _1164 = _1000;
        _1165 = _1012;
        _1166 = _1011;
        _1167 = _1010;
        _1168 = _1025;
        _1169 = _1024;
        _1170 = _1023;
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
    }
    else
    {
        _1159 = _850;
        _1160 = _850;
        _1161 = _850;
        _1162 = _850;
        _1163 = _850;
        _1164 = _850;
        _1165 = _850;
        _1166 = _850;
        _1167 = _850;
        _1168 = _850;
        _1169 = _850;
        _1170 = _850;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _863)) + _863;
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _864)) + _864;
    float _1206 = fma(_1185, cbSceneParam._m0[89u].z, fma(_1184, cbSceneParam._m0[89u].y, _1183 * cbSceneParam._m0[89u].x));
    float _1209 = fma(_1185, cbSceneParam._m0[90u].z, fma(_1184, cbSceneParam._m0[90u].y, _1183 * cbSceneParam._m0[90u].x));
    float _1212 = fma(_1185, cbSceneParam._m0[91u].z, fma(_1184, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1183));
    float _1227 = _483 * 0.5;
    float _1228 = _484 * 0.5;
    float _1229 = _485 * 0.5;
    float _1230 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1233 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1236 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1270;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1243 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_849, _853, _856, _859));
        float _1247 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_851, _854, _857, _860));
        float _1251 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_852, _855, _858, _861));
        float _1258 = dot(vec4(cbModelParam._m0[39u]), vec4(_1227, _1228, _1229, 1.0));
        _1270 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1258) ? 0.0 : (isnan(0.0) ? _1258 : max(0.0, _1258))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1270 = 1.0;
    }
    float _1281;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1272 = dot(vec4(cbModelParam._m0[40u]), vec4(_1227, _1228, _1229, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1272) ? 0.0 : (isnan(0.0) ? _1272 : max(0.0, _1272))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1285 = (_1281 * cbModelParam._m0[1u].x) + (_1270 * (1.0 - cbModelParam._m0[1u].x));
    float _1295 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _305);
    float _1296 = isnan(_1295) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1295 : min(cbModelParam._m0[25u].z, _1295));
    float _1378;
    float _1380;
    float _1382;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1345 = fma(_547, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _539)) + cbModelParam._m0[13u].w;
        float _1349 = fma(_547, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _539)) + cbModelParam._m0[14u].w;
        float _1353 = fma(_547, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _539)) + cbModelParam._m0[15u].w;
        float _1356 = fma(_485, cbModelParam._m0[13u].z, fma(_484, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _483));
        float _1359 = fma(_485, cbModelParam._m0[14u].z, fma(_484, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _483));
        float _1362 = fma(_485, cbModelParam._m0[15u].z, fma(_484, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _483));
        float _1390;
        if (_1356 > 0.0)
        {
            _1390 = abs((1.0 - _1345) / _1356);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1345 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1390 = frontier_phi_16_14_ladder;
        }
        float _1598;
        if (_1359 > 0.0)
        {
            _1598 = abs((1.0 - _1349) / _1359);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1349 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1598 = frontier_phi_25_21_ladder;
        }
        float _1852;
        if (_1362 > 0.0)
        {
            _1852 = abs((1.0 - _1353) / _1362);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1353 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1852 = frontier_phi_37_32_ladder;
        }
        float _1854 = isnan(_1598) ? _1390 : (isnan(_1390) ? _1598 : min(_1390, _1598));
        float _1855 = isnan(_1852) ? _1854 : (isnan(_1854) ? _1852 : min(_1854, _1852));
        float _1859 = (_1855 * _1356) + _1345;
        float _1860 = (_1855 * _1359) + _1349;
        float _1861 = (_1855 * _1362) + _1353;
        float _1862 = _1855 * 9.9999997473787516355514526367188e-05;
        float _1864 = (-1.0) - _1862;
        float _1866 = _1862 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1861 > _1866) || ((_1861 < _1864) || ((_1860 > _1866) || ((_1860 < _1864) || ((_1859 < _1864) || (_1859 > _1866))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1989 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1861, cbModelParam._m0[9u].z, fma(_1860, cbModelParam._m0[9u].y, _1859 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1861, cbModelParam._m0[10u].z, fma(_1860, cbModelParam._m0[10u].y, _1859 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1861, cbModelParam._m0[11u].z, fma(_1860, cbModelParam._m0[11u].y, _1859 * cbModelParam._m0[11u].x))), _1296);
            frontier_phi_15_37_ladder = _1989.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1989.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1989.x * cbModelParam._m0[1u].y;
        }
        _1378 = frontier_phi_15_37_ladder_2;
        _1380 = frontier_phi_15_37_ladder_1;
        _1382 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1366 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_483, _484, _485), _1296);
        _1378 = _1366.x * cbModelParam._m0[1u].y;
        _1380 = _1366.y * cbModelParam._m0[1u].y;
        _1382 = _1366.z * cbModelParam._m0[1u].y;
    }
    float _1386 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _305);
    float _1387 = isnan(_1386) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1386 : min(cbModelParam._m0[25u].w, _1386));
    float _1480;
    float _1482;
    float _1484;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1444 = fma(_547, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _539)) + cbModelParam._m0[21u].w;
        float _1448 = fma(_547, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _539)) + cbModelParam._m0[22u].w;
        float _1452 = fma(_547, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _539)) + cbModelParam._m0[23u].w;
        float _1455 = fma(_485, cbModelParam._m0[21u].z, fma(_484, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _483));
        float _1458 = fma(_485, cbModelParam._m0[22u].z, fma(_484, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _483));
        float _1461 = fma(_485, cbModelParam._m0[23u].z, fma(_484, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _483));
        float _1603;
        if (_1455 > 0.0)
        {
            _1603 = abs((1.0 - _1444) / _1455);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1444 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1603 = frontier_phi_27_23_ladder;
        }
        float _1879;
        if (_1458 > 0.0)
        {
            _1879 = abs((1.0 - _1448) / _1458);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1448 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1879 = frontier_phi_39_34_ladder;
        }
        float _2092;
        if (_1461 > 0.0)
        {
            _2092 = abs((1.0 - _1452) / _1461);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1452 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2092 = frontier_phi_48_45_ladder;
        }
        float _2094 = isnan(_1879) ? _1603 : (isnan(_1603) ? _1879 : min(_1603, _1879));
        float _2095 = isnan(_2092) ? _2094 : (isnan(_2094) ? _2092 : min(_2094, _2092));
        float _2099 = (_2095 * _1455) + _1444;
        float _2100 = (_2095 * _1458) + _1448;
        float _2101 = (_2095 * _1461) + _1452;
        float _2102 = _2095 * 9.9999997473787516355514526367188e-05;
        float _2103 = (-1.0) - _2102;
        float _2105 = _2102 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2101 > _2105) || ((_2101 < _2103) || ((_2100 > _2105) || ((_2100 < _2103) || ((_2099 < _2103) || (_2099 > _2105))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2299 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2101, cbModelParam._m0[17u].z, fma(_2100, cbModelParam._m0[17u].y, _2099 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2101, cbModelParam._m0[18u].z, fma(_2100, cbModelParam._m0[18u].y, _2099 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2101, cbModelParam._m0[19u].z, fma(_2100, cbModelParam._m0[19u].y, _2099 * cbModelParam._m0[19u].x))), _1387);
            frontier_phi_24_48_ladder = _2299.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2299.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2299.x * cbModelParam._m0[1u].z;
        }
        _1480 = frontier_phi_24_48_ladder_2;
        _1482 = frontier_phi_24_48_ladder_1;
        _1484 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1464 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_483, _484, _485), _1387);
        _1480 = _1464.x * cbModelParam._m0[1u].z;
        _1482 = _1464.y * cbModelParam._m0[1u].z;
        _1484 = _1464.z * cbModelParam._m0[1u].z;
    }
    float _1497 = (((_510 * _459) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1499 = (((_510 * _461) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1482 - _1380)) + _1380);
    float _1501 = (((_510 * _462) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1484 - _1382)) + _1382);
    float _1504 = fma(_1501, cbSceneParam._m0[89u].z, fma(_1499, cbSceneParam._m0[89u].y, _1497 * cbSceneParam._m0[89u].x));
    float _1507 = fma(_1501, cbSceneParam._m0[90u].z, fma(_1499, cbSceneParam._m0[90u].y, _1497 * cbSceneParam._m0[90u].x));
    float _1510 = fma(_1501, cbSceneParam._m0[91u].z, fma(_1499, cbSceneParam._m0[91u].y, _1497 * cbSceneParam._m0[91u].x));
    uvec4 _1520 = floatBitsToUint(cbInstanceData._m0[_433 + 5u]);
    uint _1522 = _1520.x * 14u;
    uint _1523 = _1522 + 13u;
    float _1530 = _475 + (-1.0);
    float _1535 = (cbLight._m0[_1523].x * _1530) + 1.0;
    float _1536 = (cbLight._m0[_1523].y * _1530) + 1.0;
    float _1537 = (cbLight._m0[_1523].z * _1530) + 1.0;
    float _1538 = (cbLight._m0[_1523].w * _1530) + 1.0;
    uint _1539 = _1522 + 5u;
    float _1545 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
    uint _1549 = _1522 + 4u;
    float _1556 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
    uint _1560 = _1522 | 1u;
    float _1571 = dot(vec3(cbLight._m0[_1522].xyz), vec3(_302, _303, _304));
    float _1574 = dot(vec3(cbLight._m0[_1560].xyz), vec3(_302, _303, _304));
    float _3676 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
    float _3687 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
    float _1579 = (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * 0.3183098733425140380859375;
    float _1581 = (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 0.3183098733425140380859375;
    float _1588 = ((cbLight._m0[_1539].x * _1545) * _1581) + ((cbLight._m0[_1549].x * _1556) * _1579);
    float _1589 = ((_1545 * cbLight._m0[_1539].y) * _1581) + ((_1556 * cbLight._m0[_1549].y) * _1579);
    float _1590 = ((_1545 * cbLight._m0[_1539].z) * _1581) + ((_1556 * cbLight._m0[_1549].z) * _1579);
    uvec4 _1595 = floatBitsToUint(cbLight._m0[_1522 + 12u]);
    bool _1597 = _1595.x == 0u;
    float _1608;
    float _1610;
    float _1612;
    if (_1597)
    {
        _1608 = _1588;
        _1610 = _1589;
        _1612 = _1590;
    }
    else
    {
        uint _1616 = _1522 + 6u;
        float _1632 = (dot(vec3(cbLight._m0[_1522 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1633 = _1632 * _1632;
        float _3698 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1635 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
        _1608 = (((cbLight._m0[_1616].x * 0.3183098733425140380859375) * _1634) * _1635) + _1588;
        _1610 = (((cbLight._m0[_1616].y * 0.3183098733425140380859375) * _1634) * _1635) + _1589;
        _1612 = (((cbLight._m0[_1616].z * 0.3183098733425140380859375) * _1634) * _1635) + _1590;
    }
    bool _1615 = _1595.y == 0u;
    float _1653;
    float _1655;
    float _1657;
    if (_1615)
    {
        _1653 = _1608;
        _1655 = _1610;
        _1657 = _1612;
    }
    else
    {
        uint _1823 = _1522 + 7u;
        float _1839 = (dot(vec3(cbLight._m0[_1522 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1840 = _1839 * _1839;
        float _3714 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1842 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
        _1653 = (((cbLight._m0[_1823].x * 0.3183098733425140380859375) * _1841) * _1842) + _1608;
        _1655 = (((cbLight._m0[_1823].y * 0.3183098733425140380859375) * _1841) * _1842) + _1610;
        _1657 = (((cbLight._m0[_1823].z * 0.3183098733425140380859375) * _1841) * _1842) + _1612;
    }
    uint _1660 = _1522 + 8u;
    float _1673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1522].w)) * _305) * 0.949999988079071044921875);
    float _1674 = _1673 * _1673;
    float _1675 = cbLight._m0[_1522].x + _384;
    float _1676 = cbLight._m0[_1522].y + _385;
    float _1677 = cbLight._m0[_1522].z + _386;
    float _1681 = inversesqrt(dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677)));
    float _1682 = _1681 * _1675;
    float _1683 = _1681 * _1676;
    float _1684 = _1681 * _1677;
    float _1685 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1522].xyz));
    float _3730 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1688 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _3741 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _1689 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _1690 = dot(vec3(_302, _303, _304), vec3(_1682, _1683, _1684));
    float _3752 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1693 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _1694 = dot(vec3(cbLight._m0[_1522].xyz), vec3(_1682, _1683, _1684));
    float _3763 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1698 = _1674 * _1674;
    float _1702 = ((_1693 * _1693) * (_1698 + (-1.0))) + 1.0;
    float _1710 = exp2(log2(1.0 - (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * 5.0);
    float _1711 = 0.959999978542327880859375 - _456;
    float _1713 = 0.959999978542327880859375 - _457;
    float _1714 = 0.959999978542327880859375 - _458;
    float _1721 = 1.0 - _1674;
    float _1732 = (0.5 / (((_1689 * ((_1688 * _1721) + _1674)) + 9.9999999392252902907785028219223e-09) + (((_1689 * _1721) + _1674) * _1688))) * _1688;
    float _3774 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1734 = (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1698 / ((_1702 * _1702) * 3.141590118408203125));
    uint _1745 = _1522 + 9u;
    float _1756 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1560].w)) * _305) * 0.949999988079071044921875);
    float _1757 = _1756 * _1756;
    float _1758 = cbLight._m0[_1560].x + _384;
    float _1759 = cbLight._m0[_1560].y + _385;
    float _1760 = cbLight._m0[_1560].z + _386;
    float _1764 = inversesqrt(dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760)));
    float _1765 = _1764 * _1758;
    float _1766 = _1764 * _1759;
    float _1767 = _1764 * _1760;
    float _1768 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1560].xyz));
    float _3785 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1771 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _1772 = dot(vec3(_302, _303, _304), vec3(_1765, _1766, _1767));
    float _3796 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _1776 = dot(vec3(cbLight._m0[_1560].xyz), vec3(_1765, _1766, _1767));
    float _3807 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1780 = _1757 * _1757;
    float _1784 = ((_1775 * _1775) * (_1780 + (-1.0))) + 1.0;
    float _1791 = exp2(log2(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * 5.0);
    float _1798 = 1.0 - _1757;
    float _1808 = (0.5 / (((_1689 * ((_1771 * _1798) + _1757)) + 9.9999999392252902907785028219223e-09) + (((_1689 * _1798) + _1757) * _1771))) * _1771;
    float _3818 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1810 = (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1780 / ((_1784 * _1784) * 3.141590118408203125));
    float _1820 = (((((_1791 * _1711) + _459) * cbLight._m0[_1745].x) * _1810) * _1545) + (((((_1710 * _1711) + _459) * cbLight._m0[_1660].x) * _1734) * _1556);
    float _1821 = (((((_1791 * _1713) + _461) * cbLight._m0[_1745].y) * _1810) * _1545) + (((((_1710 * _1713) + _461) * cbLight._m0[_1660].y) * _1734) * _1556);
    float _1822 = (((((_1791 * _1714) + _462) * cbLight._m0[_1745].z) * _1810) * _1545) + (((((_1710 * _1714) + _462) * cbLight._m0[_1660].z) * _1734) * _1556);
    float _1884;
    float _1886;
    float _1888;
    if (_1597)
    {
        _1884 = _1820;
        _1886 = _1821;
        _1888 = _1822;
    }
    else
    {
        uint _1890 = _1522 + 2u;
        uint _1894 = _1522 + 10u;
        float _1908 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1890].w)) * _305) * 0.949999988079071044921875);
        float _1909 = _1908 * _1908;
        float _1910 = cbLight._m0[_1890].x + _384;
        float _1911 = cbLight._m0[_1890].y + _385;
        float _1912 = cbLight._m0[_1890].z + _386;
        float _1916 = inversesqrt(dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912)));
        float _1917 = _1916 * _1910;
        float _1918 = _1916 * _1911;
        float _1919 = _1916 * _1912;
        float _1920 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1890].xyz));
        float _3829 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1923 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1924 = dot(vec3(_302, _303, _304), vec3(_1917, _1918, _1919));
        float _3840 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1927 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1928 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_1917, _1918, _1919));
        float _3851 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1932 = _1909 * _1909;
        float _1936 = ((_1927 * _1927) * (_1932 + (-1.0))) + 1.0;
        float _1943 = exp2(log2(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * 5.0);
        float _1950 = 1.0 - _1909;
        float _1960 = (0.5 / (((_1689 * ((_1923 * _1950) + _1909)) + 9.9999999392252902907785028219223e-09) + (((_1689 * _1950) + _1909) * _1923))) * _1923;
        float _3862 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1962 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1932 / ((_1936 * _1936) * 3.141590118408203125));
        float _1963 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
        _1884 = (((((_1943 * _1711) + _459) * cbLight._m0[_1894].x) * _1962) * _1963) + _1820;
        _1886 = (((((_1943 * _1713) + _461) * cbLight._m0[_1894].y) * _1962) * _1963) + _1821;
        _1888 = (((((_1943 * _1714) + _462) * cbLight._m0[_1894].z) * _1962) * _1963) + _1822;
    }
    float _1998;
    float _2000;
    float _2002;
    if (_1615)
    {
        _1998 = _1884;
        _2000 = _1886;
        _2002 = _1888;
    }
    else
    {
        uint _2009 = _1522 + 3u;
        uint _2013 = _1522 + 11u;
        float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _305) * 0.949999988079071044921875);
        float _2028 = _2027 * _2027;
        float _2029 = cbLight._m0[_2009].x + _384;
        float _2030 = cbLight._m0[_2009].y + _385;
        float _2031 = cbLight._m0[_2009].z + _386;
        float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
        float _2036 = _2035 * _2029;
        float _2037 = _2035 * _2030;
        float _2038 = _2035 * _2031;
        float _2039 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2009].xyz));
        float _3878 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _2043 = dot(vec3(_302, _303, _304), vec3(_2036, _2037, _2038));
        float _3889 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _2047 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2036, _2037, _2038));
        float _3900 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2051 = _2028 * _2028;
        float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
        float _2062 = exp2(log2(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * 5.0);
        float _2069 = 1.0 - _2028;
        float _2079 = (0.5 / (((_1689 * ((_2042 * _2069) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_1689 * _2069) + _2028) * _2042))) * _2042;
        float _3911 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2081 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
        float _2082 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
        _1998 = (((((_2062 * _1711) + _459) * cbLight._m0[_2013].x) * _2081) * _2082) + _1884;
        _2000 = (((((_2062 * _1713) + _461) * cbLight._m0[_2013].y) * _2081) * _2082) + _1886;
        _2002 = (((((_2062 * _1714) + _462) * cbLight._m0[_2013].z) * _2081) * _2082) + _1888;
    }
    float _2216;
    float _2218;
    float _2220;
    float _2222;
    float _2224;
    float _2226;
    if (_1520.y == 0u)
    {
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2158 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2157;
        float _2159 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2157;
        float _2160 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2157;
        uvec4 _2172 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2173 = _2172.x;
        uint _2184 = uint((float(_2172.y) * floor(float(uint(cbSceneParam._m0[85u].y * _393) / _2173))) + floor(float(uint(cbSceneParam._m0[85u].x * _392) / _2173)));
        float _2194 = (log2(_2160 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2195 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        uint _2198 = uint(isnan(14.0) ? _2195 : (isnan(_2195) ? 14.0 : min(_2195, 14.0)));
        uvec4 _2203 = texelFetch(g_lightClusterGridBuffer, int(((_2198 << 2u) + (_2184 << 6u)) >> 2u));
        uint _2204 = _2203.x;
        uint _2205 = _2172.z;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        if (((((1u << ((_2205 >> 4u) & 15u)) + 4294967295u) & _2204) == 0u) || ((_2205 & 240u) == 0u))
        {
            _2304 = 0.0;
            _2306 = 0.0;
            _2308 = 0.0;
            _2310 = 0.0;
            _2312 = 0.0;
            _2314 = 0.0;
        }
        else
        {
            float _2305;
            float _2307;
            float _2309;
            float _2311;
            float _2313;
            float _2315;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            float _2452 = 0.0;
            float _2453 = 0.0;
            uint _2454 = 0u;
            uint _2463;
            bool _2464;
            for (;;)
            {
                _2463 = texelFetch(g_lightClassification, int((((_2198 << 5u) + (_2184 << 9u)) + (_2454 << 2u)) >> 2u)).x;
                _2464 = _2463 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2464)
                {
                    frontier_phi_63_pred = _2453;
                    frontier_phi_63_pred_1 = _2452;
                    frontier_phi_63_pred_2 = _2451;
                    frontier_phi_63_pred_3 = _2450;
                    frontier_phi_63_pred_4 = _2449;
                    frontier_phi_63_pred_5 = _2448;
                }
                else
                {
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    uint _2578;
                    _2572 = _2448;
                    _2573 = _2449;
                    _2574 = _2450;
                    _2575 = _2451;
                    _2576 = _2452;
                    _2577 = _2453;
                    _2578 = _2463;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    float _2508;
                    float _2509;
                    for (;;)
                    {
                        uint _2582 = uint(findLSB(_2578)) + (_2454 << 5u);
                        uint _2579 = (_2578 + 4294967295u) & _2578;
                        uint _2584 = _2582 * 48u;
                        vec4 _2598 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2584)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 3u)).x));
                        uint _2604 = (_2582 * 48u) + 4u;
                        vec4 _2617 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2604)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 3u)).x));
                        uint _2623 = (_2582 * 48u) + 8u;
                        vec3 _2634 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2623)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 2u)).x));
                        float _2638 = _2598.x - _2158;
                        float _2639 = _2598.y - _2159;
                        float _2640 = _2598.z - _2160;
                        float _2641 = dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640));
                        float _2644 = inversesqrt(_2641);
                        float _2645 = _2644 * _2638;
                        float _2646 = _2644 * _2639;
                        float _2647 = _2644 * _2640;
                        float _2648 = dot(vec3(_414, _417, _420), vec3(_2645, _2646, _2647));
                        float _2653 = 1.0 - (_2641 * _2598.w);
                        float _3937 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
                        float _2654 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
                        float _2655 = sqrt(_2641) * _2617.w;
                        float _2658 = 1.39999997615814208984375 / (_2655 + 1.39999997615814208984375);
                        float _2659 = _2658 * _2658;
                        float _2662 = ((1.0 - _2659) * _2648) + _2659;
                        float _2665 = _2655 * _2655;
                        float _2669 = ((isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0))) * _2654) / ((_2665 * 0.699999988079071044921875) + 1.0);
                        float _2673 = (-0.0) - _2158;
                        float _2674 = (-0.0) - _2159;
                        float _2675 = (-0.0) - _2160;
                        float _2679 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
                        float _2680 = _2679 * _2673;
                        float _2681 = _2679 * _2674;
                        float _2682 = _2679 * _2675;
                        float _2690 = exp2(log2(1.0 / ((_2665 * 3.5) + 5.0)) * 0.25);
                        float _2691 = 1.0 - _491;
                        float _2698 = sqrt(1.0 - ((1.0 - (_2691 * _2691)) * (1.0 - (_2690 * _2690))));
                        float _2699 = _2698 * _2698;
                        float _2700 = _2699 * _2699;
                        float _2701 = _2680 + _2645;
                        float _2702 = _2681 + _2646;
                        float _2703 = _2682 + _2647;
                        float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
                        float _2711 = dot(vec3(_414, _417, _420), vec3(_2680, _2681, _2682));
                        float _3953 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                        float _2714 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                        float _2715 = dot(vec3(_414, _417, _420), vec3(_2707 * _2701, _2707 * _2702, _2707 * _2703));
                        float _3964 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2718 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                        float _2722 = ((_2718 * _2718) * (_2700 + (-1.0))) + 1.0;
                        float _2723 = _2658 * _2699;
                        float _2724 = _2723 * _2723;
                        float _2727 = ((1.0 - _2724) * _2648) + _2724;
                        float _3975 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2728 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                        float _2729 = 1.0 - _2699;
                        float _2739 = (0.5 / (((_2728 * ((_2714 * _2729) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2728 * _2729) + _2699) * _2714))) * _2728;
                        float _3986 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2750 = (((_2700 * 3.1415927410125732421875) * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) / ((_2722 * _2722) * ((_2665 * 2.1991131305694580078125) + 3.141590118408203125))) * _2654;
                        _2507 = (_2669 * _2617.x) + _2575;
                        _2508 = (_2669 * _2617.y) + _2576;
                        _2509 = (_2669 * _2617.z) + _2577;
                        _2504 = (_2750 * _2634.x) + _2572;
                        _2505 = (_2750 * _2634.y) + _2573;
                        _2506 = (_2750 * _2634.z) + _2574;
                        if (_2579 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2572 = _2504;
                            _2573 = _2505;
                            _2574 = _2506;
                            _2575 = _2507;
                            _2576 = _2508;
                            _2577 = _2509;
                            _2578 = _2579;
                        }
                    }
                    frontier_phi_63_pred = _2509;
                    frontier_phi_63_pred_1 = _2508;
                    frontier_phi_63_pred_2 = _2507;
                    frontier_phi_63_pred_3 = _2506;
                    frontier_phi_63_pred_4 = _2505;
                    frontier_phi_63_pred_5 = _2504;
                }
                _2315 = frontier_phi_63_pred;
                _2313 = frontier_phi_63_pred_1;
                _2311 = frontier_phi_63_pred_2;
                _2309 = frontier_phi_63_pred_3;
                _2307 = frontier_phi_63_pred_4;
                _2305 = frontier_phi_63_pred_5;
                uint _2455 = _2454 + 1u;
                if (_2455 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2448 = _2305;
                    _2449 = _2307;
                    _2450 = _2309;
                    _2451 = _2311;
                    _2452 = _2313;
                    _2453 = _2315;
                    _2454 = _2455;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2304 = _2305;
            _2306 = _2307;
            _2308 = _2309;
            _2310 = _2311;
            _2312 = _2313;
            _2314 = _2315;
        }
        uvec4 _2318 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2319 = _2318.z;
        uint _2321 = (_2319 >> 8u) & 15u;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        if (((4294967295u << _2321) & _2204) == 0u)
        {
            _2416 = _2304;
            _2418 = _2306;
            _2420 = _2308;
            _2422 = _2310;
            _2424 = _2312;
            _2426 = _2314;
        }
        else
        {
            float _2441 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
            float _2442 = _2441 * _2158;
            float _2443 = _2441 * _2159;
            float _2444 = _2441 * _2160;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2321 < ((_2319 >> 12u) & 15u))
            {
                float _2417;
                float _2419;
                float _2421;
                float _2423;
                float _2425;
                float _2427;
                float _2555 = _2304;
                float _2556 = _2306;
                float _2557 = _2308;
                float _2558 = _2310;
                float _2559 = _2312;
                float _2560 = _2314;
                uint _2561 = _2321;
                uint _2570;
                bool _2571;
                for (;;)
                {
                    _2570 = texelFetch(g_lightClassification, int((((_2198 << 5u) + (_2184 << 9u)) + (_2561 << 2u)) >> 2u)).x;
                    _2571 = _2570 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2571)
                    {
                        frontier_phi_69_pred = _2560;
                        frontier_phi_69_pred_1 = _2559;
                        frontier_phi_69_pred_2 = _2558;
                        frontier_phi_69_pred_3 = _2557;
                        frontier_phi_69_pred_4 = _2556;
                        frontier_phi_69_pred_5 = _2555;
                    }
                    else
                    {
                        float _2755;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _2759;
                        float _2760;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _2768 = _2555;
                        float _2769 = _2556;
                        float _2770 = _2557;
                        float _2771 = _2558;
                        float _2772 = _2559;
                        float _2773 = _2560;
                        uint _2774 = _2570;
                        uint _2775;
                        vec4 _2800;
                        float _2801;
                        vec4 _2816;
                        vec3 _2828;
                        vec4 _2844;
                        vec4 _2860;
                        float _2907;
                        bool _2908;
                        for (;;)
                        {
                            uint _2785 = ((_2561 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2774));
                            _2775 = (_2774 + 4294967295u) & _2774;
                            uint _2787 = _2785 * 40u;
                            _2800 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 3u)).x));
                            _2801 = _2800.w;
                            uint _2803 = (_2785 * 40u) + 4u;
                            _2816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 3u)).x));
                            uint _2818 = (_2785 * 40u) + 8u;
                            _2828 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x));
                            uint _2831 = (_2785 * 40u) + 16u;
                            _2844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 3u)).x));
                            uint _2847 = (_2785 * 40u) + 20u;
                            _2860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 3u)).x));
                            uint _2863 = (_2785 * 40u) + 24u;
                            vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2882 = (_2785 * 40u) + 28u;
                            vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            _2907 = fma(_2160, _2895.z, fma(_2159, _2895.y, _2895.x * _2158)) + _2895.w;
                            _2908 = !((fma(_2160, _2876.z, fma(_2159, _2876.y, _2876.x * _2158)) + _2876.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2908)
                            {
                                float _2935 = _2800.x - _2158;
                                float _2936 = _2800.y - _2159;
                                float _2937 = _2800.z - _2160;
                                float _2938 = dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937));
                                float _2941 = inversesqrt(_2938);
                                float _2942 = _2941 * _2935;
                                float _2943 = _2941 * _2936;
                                float _2944 = _2941 * _2937;
                                float _2948 = 1.0 - (_2938 / (_2801 * _2801));
                                float _3997 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                                float _2949 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                                float _2953 = sqrt(_2938) * _2816.w;
                                float _2955 = 1.39999997615814208984375 / (_2953 + 1.39999997615814208984375);
                                float _2956 = _2955 * _2955;
                                float _2959 = ((1.0 - _2956) * dot(vec3(_2942, _2943, _2944), vec3(_414, _417, _420))) + _2956;
                                float _2962 = _2953 * _2953;
                                float _2966 = (fma(_2160, _2844.z, fma(_2159, _2844.y, _2844.x * _2158)) + _2844.w) / _2907;
                                float _2967 = (fma(_2160, _2860.z, fma(_2159, _2860.y, _2860.x * _2158)) + _2860.w) / _2907;
                                float _2971 = 1.0 - dot(vec2(_2966, _2967), vec2(_2966, _2967));
                                float _4013 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                                float _2972 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                                float _2973 = _2972 * (((isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))) * _2949) / ((_2962 * 0.699999988079071044921875) + 1.0));
                                float _2985 = exp2(log2(1.0 / ((_2962 * 3.5) + 5.0)) * 0.25);
                                float _2986 = 1.0 - _491;
                                float _2993 = sqrt(1.0 - ((1.0 - (_2986 * _2986)) * (1.0 - (_2985 * _2985))));
                                float _2994 = _2993 * _2993;
                                float _2995 = _2994 * _2994;
                                float _2996 = _2942 - _2442;
                                float _2997 = _2943 - _2443;
                                float _2998 = _2944 - _2444;
                                float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
                                float _3006 = dot(vec3(_414, _417, _420), vec3((-0.0) - _2442, (-0.0) - _2443, (-0.0) - _2444));
                                float _4024 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3009 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                                float _3010 = dot(vec3(_414, _417, _420), vec3(_3002 * _2996, _3002 * _2997, _3002 * _2998));
                                float _4035 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3013 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                                float _3017 = ((_3013 * _3013) * (_2995 + (-1.0))) + 1.0;
                                float _3018 = _2955 * _2994;
                                float _3019 = _3018 * _3018;
                                float _3025 = ((1.0 - _3019) * dot(vec3(_414, _417, _420), vec3(_2942, _2943, _2944))) + _3019;
                                float _4046 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3026 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _3027 = 1.0 - _2994;
                                float _3037 = (0.5 / (((_3026 * ((_3009 * _3027) + _2994)) + 9.9999999392252902907785028219223e-09) + (((_3026 * _3027) + _2994) * _3009))) * _3026;
                                float _4057 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3047 = (_2972 * _2949) * (((_2995 * 3.1415927410125732421875) * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) / ((_3017 * _3017) * ((_2962 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2973 * _2816.z;
                                frontier_phi_75_pred_1 = _2973 * _2816.y;
                                frontier_phi_75_pred_2 = _2973 * _2816.x;
                                frontier_phi_75_pred_3 = _3047 * _2828.z;
                                frontier_phi_75_pred_4 = _3047 * _2828.y;
                                frontier_phi_75_pred_5 = _3047 * _2828.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3056 = frontier_phi_75_pred;
                            _3055 = frontier_phi_75_pred_1;
                            _3054 = frontier_phi_75_pred_2;
                            _3053 = frontier_phi_75_pred_3;
                            _3052 = frontier_phi_75_pred_4;
                            _3051 = frontier_phi_75_pred_5;
                            _2758 = _3054 + _2771;
                            _2759 = _3055 + _2772;
                            _2760 = _3056 + _2773;
                            _2755 = _3051 + _2768;
                            _2756 = _3052 + _2769;
                            _2757 = _3053 + _2770;
                            if (_2775 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2768 = _2755;
                                _2769 = _2756;
                                _2770 = _2757;
                                _2771 = _2758;
                                _2772 = _2759;
                                _2773 = _2760;
                                _2774 = _2775;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2760;
                        frontier_phi_69_pred_1 = _2759;
                        frontier_phi_69_pred_2 = _2758;
                        frontier_phi_69_pred_3 = _2757;
                        frontier_phi_69_pred_4 = _2756;
                        frontier_phi_69_pred_5 = _2755;
                    }
                    _2427 = frontier_phi_69_pred;
                    _2425 = frontier_phi_69_pred_1;
                    _2423 = frontier_phi_69_pred_2;
                    _2421 = frontier_phi_69_pred_3;
                    _2419 = frontier_phi_69_pred_4;
                    _2417 = frontier_phi_69_pred_5;
                    uint _2562 = _2561 + 1u;
                    if (_2562 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2555 = _2417;
                        _2556 = _2419;
                        _2557 = _2421;
                        _2558 = _2423;
                        _2559 = _2425;
                        _2560 = _2427;
                        _2561 = _2562;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2427;
                frontier_phi_57_58_ladder_1 = _2425;
                frontier_phi_57_58_ladder_2 = _2423;
                frontier_phi_57_58_ladder_3 = _2421;
                frontier_phi_57_58_ladder_4 = _2419;
                frontier_phi_57_58_ladder_5 = _2417;
            }
            else
            {
                frontier_phi_57_58_ladder = _2314;
                frontier_phi_57_58_ladder_1 = _2312;
                frontier_phi_57_58_ladder_2 = _2310;
                frontier_phi_57_58_ladder_3 = _2308;
                frontier_phi_57_58_ladder_4 = _2306;
                frontier_phi_57_58_ladder_5 = _2304;
            }
            _2416 = frontier_phi_57_58_ladder_5;
            _2418 = frontier_phi_57_58_ladder_4;
            _2420 = frontier_phi_57_58_ladder_3;
            _2422 = frontier_phi_57_58_ladder_2;
            _2424 = frontier_phi_57_58_ladder_1;
            _2426 = frontier_phi_57_58_ladder;
        }
        float _2431 = isnan(1.0) ? _475 : (isnan(_475) ? 1.0 : min(_475, 1.0));
        _2216 = (_2431 * _2422) + _1653;
        _2218 = (_2431 * _2424) + _1655;
        _2220 = (_2431 * _2426) + _1657;
        _2222 = ((_2416 * _459) * _2431) + _1998;
        _2224 = ((_2418 * _461) * _2431) + _2000;
        _2226 = ((_2420 * _462) * _2431) + _2002;
    }
    else
    {
        _2216 = _1653;
        _2218 = _1655;
        _2220 = _1657;
        _2222 = _1998;
        _2224 = _2000;
        _2226 = _2002;
    }
    float _4073 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4084 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4095 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    uint _2246 = _433 + 6u;
    float _2254 = _392 / cbSceneParam._m0[86u].x;
    float _2255 = _393 / cbSceneParam._m0[86u].y;
    vec4 _2269 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2254, _2255, (log2((isnan(cbSceneParam._m0[77u].w) ? _326 : (isnan(_326) ? cbSceneParam._m0[77u].w : min(_326, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2271 = _2269.x;
    float _2272 = _2269.y;
    float _2273 = _2269.z;
    float _2274 = _2269.w;
    float _2366;
    float _2368;
    float _2370;
    float _2372;
    if (_326 > cbSceneParam._m0[78u].w)
    {
        float _2329 = isnan(_326) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _326 : min(cbSceneParam._m0[80u].w, _326));
        float _2330 = _2329 / _326;
        float _2341 = _2330 * _377;
        float _2342 = _378 * _2330;
        float _2343 = (-0.0) - _2342;
        float _2344 = _2330 * _379;
        float _2346 = (cbSceneParam._m0[77u].w * _2343) / _2329;
        float _2347 = _2346 + cbSceneParam._m0[79u].w;
        float _2348 = cbSceneParam._m0[79u].w - _2342;
        float _2354 = sqrt(((_2341 * _2341) + (_2342 * _2342)) + (_2344 * _2344));
        float _2357 = (1.0 - (cbSceneParam._m0[77u].w / _2329)) * _2354;
        float _2362 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2364 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2517;
        if (abs((_2343 - _2346) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2517 = ((((_2347 > 0.0) ? exp2(_2362 * _2347) : (2.0 - exp2(_2364 * _2347))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2357;
        }
        else
        {
            float _2477 = 1.0 / cbSceneParam._m0[80u].x;
            float _2478 = isnan(_2348) ? _2347 : (isnan(_2347) ? _2348 : max(_2347, _2348));
            float _2479 = isnan(_2348) ? _2347 : (isnan(_2347) ? _2348 : min(_2347, _2348));
            float _2488 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : min(_2478, 0.0));
            float _2489 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : min(_2479, 0.0));
            _2517 = ((abs(_2354 / _2343) * cbSceneParam._m0[80u].y) * ((((_2488 - _2489) * 2.0) - ((exp2(_2362 * (isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0)))) - exp2(_2362 * (isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0))))) * _2477)) - ((exp2(_2364 * _2488) - exp2(_2364 * _2489)) * _2477))) + (_2357 * cbSceneParam._m0[80u].z);
        }
        vec4 _2519 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2254, _2255, 1.0), 0.0);
        float _2528 = exp2((_2517 * (-1.44269502162933349609375)) * (1.0 - _2519.w));
        float _2529 = log2(_2528);
        float _2545 = log2(_2274);
        _2366 = (exp2(_2545 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2529 * cbSceneParam._m0[78u].x)) * _2519.x) / cbSceneParam._m0[78u].x)) + _2271;
        _2368 = (exp2(_2545 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2529 * cbSceneParam._m0[78u].y)) * _2519.y) / cbSceneParam._m0[78u].y)) + _2272;
        _2370 = (exp2(_2545 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2529 * cbSceneParam._m0[78u].z)) * _2519.z) / cbSceneParam._m0[78u].z)) + _2273;
        _2372 = _2528 * _2274;
    }
    else
    {
        _2366 = _2271;
        _2368 = _2272;
        _2370 = _2273;
        _2372 = _2274;
    }
    float _2384 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2385 = _2384 == 3.0;
    float _2386 = log2(_2372);
    float _2393 = exp2(_2386 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2216 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _475))) + ((_2222 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1285)) * cbPerFrame._m0[3u].x));
    float _2394 = exp2(_2386 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_2218 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _475))) + ((_2224 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1285)) * cbPerFrame._m0[3u].x));
    float _2395 = exp2(_2386 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2220 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _475))) + ((_2226 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1285)) * cbPerFrame._m0[3u].x));
    float _2404 = (_2384 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2404 * (_2385 ? _2393 : (_2393 + (cbSceneParam._m0[72u].w * _2366)));
    SV_Target.y = _2404 * (_2385 ? _2394 : (_2394 + (cbSceneParam._m0[72u].w * _2368)));
    SV_Target.z = _2404 * (_2385 ? _2395 : (_2395 + (cbSceneParam._m0[72u].w * _2370)));
    SV_Target.w = cbInstanceData._m0[_2246].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2246].w;
}


