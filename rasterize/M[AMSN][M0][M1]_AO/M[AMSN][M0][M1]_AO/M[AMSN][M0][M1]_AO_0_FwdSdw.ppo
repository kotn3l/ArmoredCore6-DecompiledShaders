#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _854;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _255.x;
    vec4 _269 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _273 = _269.z;
    float _278 = (_269.x * 2.0) + (-1.0);
    float _280 = (_269.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3474 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))));
    float _292 = cbMtdParam._m0[10u].x + _269.w;
    float _295 = fma(_287, _213, fma(_280, _205 * TANGENT.x, (_191 * _184) * _278));
    float _298 = fma(_287, _214, fma(_280, _205 * TANGENT.y, (_191 * _185) * _278));
    float _301 = fma(_287, _215, fma(_280, _205 * TANGENT.z, (_191 * _186) * _278));
    float _305 = inversesqrt(dot(vec3(_295, _298, _301), vec3(_295, _298, _301)));
    float _306 = _305 * _295;
    float _307 = _305 * _298;
    float _308 = _305 * _301;
    float _3485 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _309 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _3507 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3518 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3529 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3540 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _314 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _330 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _371 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _381 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _371);
    float _382 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _371);
    float _383 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _371);
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _388 = _381 * _387;
    float _389 = _382 * _387;
    float _390 = _383 * _387;
    float _396 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _397 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _418 = fma(_308, cbSceneParam._m0[5u].z, fma(_307, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _306));
    float _421 = fma(_308, cbSceneParam._m0[6u].z, fma(_307, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _306));
    float _424 = fma(_308, cbSceneParam._m0[7u].z, fma(_307, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _306));
    uint _437 = uint(roundEven(NORMAL.w)) * 13u;
    uint _440 = (_437 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _446 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * cbInstanceData._m0[_440].x;
    float _447 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) * cbInstanceData._m0[_440].y;
    float _448 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * cbInstanceData._m0[_440].z;
    float _3551 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _3573 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _452 = 1.0 - _314;
    float _453 = _449 * _452;
    float _454 = _450 * _452;
    float _455 = _451 * _452;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _314;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _314;
    float _462 = (_451 + (-0.039999999105930328369140625)) * _314;
    float _463 = _460 + 0.039999999105930328369140625;
    float _465 = _461 + 0.039999999105930328369140625;
    float _466 = _462 + 0.039999999105930328369140625;
    vec4 _475 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _396, cbSceneParam._m0[86u].y * _397));
    float _479 = ((isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * TEXCOORD.z) * _475.x;
    float _480 = dot(vec3(_306, _307, _308), vec3(_388, _389, _390));
    float _483 = _480 * 2.0;
    float _487 = (_483 * _306) - _388;
    float _488 = (_483 * _307) - _389;
    float _489 = (_483 * _308) - _390;
    float _493 = abs(dot(vec3(_388, _389, _390), vec3(_306, _307, _308)));
    float _3584 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _495 = sqrt(_309);
    float _508 = exp2((_495 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_495 * 3.0));
    float _514 = (1.0 - _508) * ((_495 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _515 = _508 * _495;
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _853;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _578 = fma(_551, cbModelParam._m0[26u].z, fma(_547, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _543));
        float _582 = fma(_551, cbModelParam._m0[27u].z, fma(_547, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _543));
        float _586 = fma(_551, cbModelParam._m0[28u].z, fma(_547, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _543));
        float _611 = _543 + _306;
        float _612 = _547 + _307;
        float _613 = _551 + _308;
        float _623 = fma(_613, cbModelParam._m0[26u].z, fma(_612, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611)) - _578;
        float _624 = fma(_613, cbModelParam._m0[27u].z, fma(_612, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611)) - _582;
        float _625 = fma(_613, cbModelParam._m0[28u].z, fma(_612, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611)) - _586;
        float _629 = inversesqrt(dot(vec3(_623, _624, _625), vec3(_623, _624, _625)));
        float _642 = ((_629 * _623) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_578 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_629 * _624) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_582 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_629 * _625) / cbModelParam._m0[34u].z) + ((((((_586 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        float _681 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_647.x + (-0.5));
        float _683 = _681 * (_647.y + (-0.5));
        float _684 = _681 * (_647.z + (-0.5));
        float _691 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_654.x + (-0.5));
        float _693 = _691 * (_654.y + (-0.5));
        float _694 = _691 * (_654.z + (-0.5));
        float _701 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_661.x + (-0.5));
        float _703 = _701 * (_661.y + (-0.5));
        float _704 = _701 * (_661.z + (-0.5));
        float _711 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_668.x + (-0.5));
        float _713 = _711 * (_668.y + (-0.5));
        float _714 = _711 * (_668.z + (-0.5));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = _682 * 0.5;
        float _719 = _692 * 0.5;
        float _720 = _702 * 0.5;
        float _721 = dot(vec3(_718, _719, _720), vec3(_718, _719, _720));
        float _726 = (_721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_721);
        float _735 = (dot(vec3(_306, _307, _308), vec3(_726 * _718, _726 * _719, _726 * _720)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _745 = sqrt(((_719 * _719) + (_718 * _718)) + (_720 * _720)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _747 = _746 * 2.0;
        float _751 = (1.0 - _746) / (_746 + 1.0);
        float _3632 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _761 = ((((1.0 - _752) * (_747 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_747 + 1.0))) + _752) * _715;
        float _762 = _683 * 0.5;
        float _763 = _693 * 0.5;
        float _764 = _703 * 0.5;
        float _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
        float _770 = (_765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_765);
        float _778 = (dot(vec3(_306, _307, _308), vec3(_770 * _762, _770 * _763, _770 * _764)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _787 = sqrt(((_763 * _763) + (_762 * _762)) + (_764 * _764)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3665 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_789 + 1.0))) + _794) * _716;
        float _804 = _684 * 0.5;
        float _805 = _694 * 0.5;
        float _806 = _704 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_306, _307, _308), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3698 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_831 + 1.0))) + _836) * _717;
        _853 = _684;
        _855 = _683;
        _856 = _682;
        _857 = _694;
        _858 = _693;
        _859 = _692;
        _860 = _704;
        _861 = _703;
        _862 = _702;
        _863 = _717;
        _864 = _716;
        _865 = _715;
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0)));
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
    }
    else
    {
        _853 = _854;
        _855 = _854;
        _856 = _854;
        _857 = _854;
        _858 = _854;
        _859 = _854;
        _860 = _854;
        _861 = _854;
        _862 = _854;
        _863 = _854;
        _864 = _854;
        _865 = _854;
        _866 = 0.0;
        _867 = 0.0;
        _868 = 0.0;
    }
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _894 = fma(_551, cbModelParam._m0[30u].z, fma(_547, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _543));
        float _898 = fma(_551, cbModelParam._m0[31u].z, fma(_547, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _543));
        float _902 = fma(_551, cbModelParam._m0[32u].z, fma(_547, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _543));
        float _925 = _543 + _306;
        float _926 = _547 + _307;
        float _927 = _551 + _308;
        float _937 = fma(_927, cbModelParam._m0[30u].z, fma(_926, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _925)) - _894;
        float _938 = fma(_927, cbModelParam._m0[31u].z, fma(_926, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _925)) - _898;
        float _939 = fma(_927, cbModelParam._m0[32u].z, fma(_926, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _925)) - _902;
        float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
        float _956 = ((_943 * _937) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_894 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_943 * _938) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_898 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_943 * _939) / cbModelParam._m0[35u].z) + ((((((_902 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        float _993 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_960.x + (-0.5));
        float _995 = _993 * (_960.y + (-0.5));
        float _996 = _993 * (_960.z + (-0.5));
        float _1003 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_967.x + (-0.5));
        float _1005 = _1003 * (_967.y + (-0.5));
        float _1006 = _1003 * (_967.z + (-0.5));
        float _1013 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_974.x + (-0.5));
        float _1015 = _1013 * (_974.y + (-0.5));
        float _1016 = _1013 * (_974.z + (-0.5));
        float _1023 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_981.x + (-0.5));
        float _1025 = _1023 * (_981.y + (-0.5));
        float _1026 = _1023 * (_981.z + (-0.5));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = _994 * 0.5;
        float _1031 = _1004 * 0.5;
        float _1032 = _1014 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_306, _307, _308), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3761 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1057 + 1.0))) + _1062) * _1027;
        float _1072 = _995 * 0.5;
        float _1073 = _1005 * 0.5;
        float _1074 = _1015 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_306, _307, _308), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3794 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1099 + 1.0))) + _1104) * _1028;
        float _1114 = _996 * 0.5;
        float _1115 = _1006 * 0.5;
        float _1116 = _1016 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_306, _307, _308), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3827 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1141 + 1.0))) + _1146) * _1029;
        _1163 = _996;
        _1164 = _995;
        _1165 = _994;
        _1166 = _1006;
        _1167 = _1005;
        _1168 = _1004;
        _1169 = _1016;
        _1170 = _1015;
        _1171 = _1014;
        _1172 = _1029;
        _1173 = _1028;
        _1174 = _1027;
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
    }
    else
    {
        _1163 = _854;
        _1164 = _854;
        _1165 = _854;
        _1166 = _854;
        _1167 = _854;
        _1168 = _854;
        _1169 = _854;
        _1170 = _854;
        _1171 = _854;
        _1172 = _854;
        _1173 = _854;
        _1174 = _854;
        _1175 = 0.0;
        _1176 = 0.0;
        _1177 = 0.0;
    }
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _866)) + _866;
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _867)) + _867;
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _868)) + _868;
    float _1210 = fma(_1189, cbSceneParam._m0[89u].z, fma(_1188, cbSceneParam._m0[89u].y, _1187 * cbSceneParam._m0[89u].x));
    float _1213 = fma(_1189, cbSceneParam._m0[90u].z, fma(_1188, cbSceneParam._m0[90u].y, _1187 * cbSceneParam._m0[90u].x));
    float _1216 = fma(_1189, cbSceneParam._m0[91u].z, fma(_1188, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1187));
    float _1231 = _487 * 0.5;
    float _1232 = _488 * 0.5;
    float _1233 = _489 * 0.5;
    float _1234 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1237 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1240 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1274;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1247 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_853, _857, _860, _863));
        float _1251 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_855, _858, _861, _864));
        float _1255 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_856, _859, _862, _865));
        float _1262 = dot(vec4(cbModelParam._m0[39u]), vec4(_1231, _1232, _1233, 1.0));
        _1274 = dot(vec3(isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1262) ? 0.0 : (isnan(0.0) ? _1262 : max(0.0, _1262))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1274 = 1.0;
    }
    float _1285;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1276 = dot(vec4(cbModelParam._m0[40u]), vec4(_1231, _1232, _1233, 1.0));
        _1285 = dot(vec3(isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1276) ? 0.0 : (isnan(0.0) ? _1276 : max(0.0, _1276))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1285 = 1.0;
    }
    float _1289 = (_1285 * cbModelParam._m0[1u].x) + (_1274 * (1.0 - cbModelParam._m0[1u].x));
    float _1299 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _309);
    float _1300 = isnan(_1299) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1299 : min(cbModelParam._m0[25u].z, _1299));
    float _1382;
    float _1384;
    float _1386;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1349 = fma(_551, cbModelParam._m0[13u].z, fma(_547, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _543)) + cbModelParam._m0[13u].w;
        float _1353 = fma(_551, cbModelParam._m0[14u].z, fma(_547, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _543)) + cbModelParam._m0[14u].w;
        float _1357 = fma(_551, cbModelParam._m0[15u].z, fma(_547, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _543)) + cbModelParam._m0[15u].w;
        float _1360 = fma(_489, cbModelParam._m0[13u].z, fma(_488, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _487));
        float _1363 = fma(_489, cbModelParam._m0[14u].z, fma(_488, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _487));
        float _1366 = fma(_489, cbModelParam._m0[15u].z, fma(_488, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _487));
        float _1394;
        if (_1360 > 0.0)
        {
            _1394 = abs((1.0 - _1349) / _1360);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1349 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1394 = frontier_phi_16_14_ladder;
        }
        float _1570;
        if (_1363 > 0.0)
        {
            _1570 = abs((1.0 - _1353) / _1363);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1353 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1570 = frontier_phi_25_21_ladder;
        }
        float _1866;
        if (_1366 > 0.0)
        {
            _1866 = abs((1.0 - _1357) / _1366);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1357 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1866 = frontier_phi_37_32_ladder;
        }
        float _1868 = isnan(_1570) ? _1394 : (isnan(_1394) ? _1570 : min(_1394, _1570));
        float _1869 = isnan(_1866) ? _1868 : (isnan(_1868) ? _1866 : min(_1868, _1866));
        float _1873 = (_1869 * _1360) + _1349;
        float _1874 = (_1869 * _1363) + _1353;
        float _1875 = (_1869 * _1366) + _1357;
        float _1876 = _1869 * 9.9999997473787516355514526367188e-05;
        float _1878 = (-1.0) - _1876;
        float _1880 = _1876 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1875 > _1880) || ((_1875 < _1878) || ((_1874 > _1880) || ((_1874 < _1878) || ((_1873 < _1878) || (_1873 > _1880))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1875, cbModelParam._m0[9u].z, fma(_1874, cbModelParam._m0[9u].y, _1873 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1875, cbModelParam._m0[10u].z, fma(_1874, cbModelParam._m0[10u].y, _1873 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1875, cbModelParam._m0[11u].z, fma(_1874, cbModelParam._m0[11u].y, _1873 * cbModelParam._m0[11u].x))), _1300);
            frontier_phi_15_37_ladder = _2020.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2020.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2020.z * cbModelParam._m0[1u].y;
        }
        _1382 = frontier_phi_15_37_ladder_1;
        _1384 = frontier_phi_15_37_ladder;
        _1386 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_487, _488, _489), _1300);
        _1382 = _1370.x * cbModelParam._m0[1u].y;
        _1384 = _1370.y * cbModelParam._m0[1u].y;
        _1386 = _1370.z * cbModelParam._m0[1u].y;
    }
    float _1390 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _309);
    float _1391 = isnan(_1390) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1390 : min(cbModelParam._m0[25u].w, _1390));
    float _1484;
    float _1486;
    float _1488;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1448 = fma(_551, cbModelParam._m0[21u].z, fma(_547, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _543)) + cbModelParam._m0[21u].w;
        float _1452 = fma(_551, cbModelParam._m0[22u].z, fma(_547, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _543)) + cbModelParam._m0[22u].w;
        float _1456 = fma(_551, cbModelParam._m0[23u].z, fma(_547, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _543)) + cbModelParam._m0[23u].w;
        float _1459 = fma(_489, cbModelParam._m0[21u].z, fma(_488, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _487));
        float _1462 = fma(_489, cbModelParam._m0[22u].z, fma(_488, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _487));
        float _1465 = fma(_489, cbModelParam._m0[23u].z, fma(_488, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _487));
        float _1575;
        if (_1459 > 0.0)
        {
            _1575 = abs((1.0 - _1448) / _1459);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1448 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1575 = frontier_phi_27_23_ladder;
        }
        float _1893;
        if (_1462 > 0.0)
        {
            _1893 = abs((1.0 - _1452) / _1462);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1452 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1893 = frontier_phi_39_34_ladder;
        }
        float _2231;
        if (_1465 > 0.0)
        {
            _2231 = abs((1.0 - _1456) / _1465);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1456 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2231 = frontier_phi_49_46_ladder;
        }
        float _2233 = isnan(_1893) ? _1575 : (isnan(_1575) ? _1893 : min(_1575, _1893));
        float _2234 = isnan(_2231) ? _2233 : (isnan(_2233) ? _2231 : min(_2233, _2231));
        float _2238 = (_2234 * _1459) + _1448;
        float _2239 = (_2234 * _1462) + _1452;
        float _2240 = (_2234 * _1465) + _1456;
        float _2241 = _2234 * 9.9999997473787516355514526367188e-05;
        float _2242 = (-1.0) - _2241;
        float _2244 = _2241 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2240 > _2244) || ((_2240 < _2242) || ((_2239 > _2244) || ((_2239 < _2242) || ((_2238 < _2242) || (_2238 > _2244))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2240, cbModelParam._m0[17u].z, fma(_2239, cbModelParam._m0[17u].y, _2238 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2240, cbModelParam._m0[18u].z, fma(_2239, cbModelParam._m0[18u].y, _2238 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2240, cbModelParam._m0[19u].z, fma(_2239, cbModelParam._m0[19u].y, _2238 * cbModelParam._m0[19u].x))), _1391);
            frontier_phi_24_49_ladder = _2362.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2362.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2362.x * cbModelParam._m0[1u].z;
        }
        _1484 = frontier_phi_24_49_ladder_2;
        _1486 = frontier_phi_24_49_ladder_1;
        _1488 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1468 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_487, _488, _489), _1391);
        _1484 = _1468.x * cbModelParam._m0[1u].z;
        _1486 = _1468.y * cbModelParam._m0[1u].z;
        _1488 = _1468.z * cbModelParam._m0[1u].z;
    }
    float _1501 = (((_514 * _463) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1484 - _1382)) + _1382);
    float _1503 = (((_514 * _465) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1505 = (((_514 * _466) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1508 = fma(_1505, cbSceneParam._m0[89u].z, fma(_1503, cbSceneParam._m0[89u].y, _1501 * cbSceneParam._m0[89u].x));
    float _1511 = fma(_1505, cbSceneParam._m0[90u].z, fma(_1503, cbSceneParam._m0[90u].y, _1501 * cbSceneParam._m0[90u].x));
    float _1514 = fma(_1505, cbSceneParam._m0[91u].z, fma(_1503, cbSceneParam._m0[91u].y, _1501 * cbSceneParam._m0[91u].x));
    float _1549 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1553 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1557 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1561 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1562 = _1549 / _1561;
    float _1563 = _1553 / _1561;
    float _1564 = _1557 / _1561;
    float _1711;
    float _1712;
    float _1713;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1591 = ((uint(_1564 > cbSceneParam._m0[59u].y) + uint(_1564 > cbSceneParam._m0[59u].x)) + uint(_1564 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1592 = _1591 + 43u;
        uint _1600 = _1591 + 44u;
        uint _1608 = _1591 + 45u;
        uint _1616 = _1591 + 46u;
        float _1627 = fma(_1561, cbSceneParam._m0[_1592].w, fma(_1557, cbSceneParam._m0[_1592].z, fma(_1553, cbSceneParam._m0[_1592].y, _1549 * cbSceneParam._m0[_1592].x)));
        float _1631 = fma(_1561, cbSceneParam._m0[_1600].w, fma(_1557, cbSceneParam._m0[_1600].z, fma(_1553, cbSceneParam._m0[_1600].y, _1549 * cbSceneParam._m0[_1600].x)));
        float _1639 = fma(_1561, cbSceneParam._m0[_1616].w, fma(_1557, cbSceneParam._m0[_1616].z, fma(_1553, cbSceneParam._m0[_1616].y, _1549 * cbSceneParam._m0[_1616].x)));
        float _1644 = cbSceneParam._m0[33u].z * _1639;
        float _1646 = cbSceneParam._m0[33u].w * _1639;
        float _1649 = fma(_1561, cbSceneParam._m0[_1608].w, fma(_1557, cbSceneParam._m0[_1608].z, fma(_1553, cbSceneParam._m0[_1608].y, _1549 * cbSceneParam._m0[_1608].x))) / _1639;
        float _1697 = (cbSceneParam._m0[33u].x - sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564))) * cbSceneParam._m0[33u].y;
        float _3953 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1704 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1644 + _1627) / _1639, (_1646 + _1631) / _1639), _1649), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1646 + _1627) / _1639, (_1631 - _1644) / _1639), _1649), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1627 - _1644) / _1639, (_1631 - _1646) / _1639), _1649), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1627 - _1646) / _1639, (_1644 + _1631) / _1639), _1649), 0.0)).x), vec4(0.25)));
        _1711 = 1.0 - (_1704 * cbSceneParam._m0[34u].x);
        _1712 = 1.0 - (_1704 * cbSceneParam._m0[34u].y);
        _1713 = 1.0 - (_1704 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1711 = 1.0;
        _1712 = 1.0;
        _1713 = 1.0;
    }
    float _1777;
    float _1779;
    float _1781;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1765 = fma(_1561, cbSceneParam._m0[63u].w, fma(_1557, cbSceneParam._m0[63u].z, fma(_1553, cbSceneParam._m0[63u].y, _1549 * cbSceneParam._m0[63u].x)));
        float _1766 = fma(_1561, cbSceneParam._m0[60u].w, fma(_1557, cbSceneParam._m0[60u].z, fma(_1553, cbSceneParam._m0[60u].y, _1549 * cbSceneParam._m0[60u].x))) / _1765;
        float _1767 = fma(_1561, cbSceneParam._m0[61u].w, fma(_1557, cbSceneParam._m0[61u].z, fma(_1553, cbSceneParam._m0[61u].y, _1549 * cbSceneParam._m0[61u].x))) / _1765;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1766 >= cbSceneParam._m0[64u].x) && (_1767 >= cbSceneParam._m0[64u].y)) && (_1766 <= cbSceneParam._m0[64u].z)) && (_1767 <= cbSceneParam._m0[64u].w))
        {
            float _1906 = fma(_1561, cbSceneParam._m0[62u].w, fma(_1557, cbSceneParam._m0[62u].z, fma(_1553, cbSceneParam._m0[62u].y, _1549 * cbSceneParam._m0[62u].x))) / _1765;
            float _1910 = isnan(cbSceneParam._m0[41u].w) ? _1906 : (isnan(_1906) ? cbSceneParam._m0[41u].w : max(_1906, cbSceneParam._m0[41u].w));
            float _1953 = (cbSceneParam._m0[33u].x - sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564))) * cbSceneParam._m0[33u].y;
            float _3969 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
            float _1960 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1766, cbSceneParam._m0[33u].w + _1767), _1910), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1766, _1767 - cbSceneParam._m0[33u].z), _1910), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1766 - cbSceneParam._m0[33u].z, _1767 - cbSceneParam._m0[33u].w), _1910), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1766 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1767), _1910), 0.0)).x), vec4(0.25)));
            float _1964 = 1.0 - (_1960 * cbSceneParam._m0[34u].x);
            float _1965 = 1.0 - (_1960 * cbSceneParam._m0[34u].y);
            float _1966 = 1.0 - (_1960 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1965) ? _1712 : (isnan(_1712) ? _1965 : min(_1712, _1965));
            frontier_phi_36_35_ladder_1 = isnan(_1966) ? _1713 : (isnan(_1713) ? _1966 : min(_1713, _1966));
            frontier_phi_36_35_ladder_2 = isnan(_1964) ? _1711 : (isnan(_1711) ? _1964 : min(_1711, _1964));
        }
        else
        {
            frontier_phi_36_35_ladder = _1712;
            frontier_phi_36_35_ladder_1 = _1713;
            frontier_phi_36_35_ladder_2 = _1711;
        }
        _1777 = frontier_phi_36_35_ladder_2;
        _1779 = frontier_phi_36_35_ladder;
        _1781 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1777 = _1711;
        _1779 = _1712;
        _1781 = _1713;
    }
    uvec4 _1786 = floatBitsToUint(cbInstanceData._m0[_437 + 5u]);
    uint _1788 = _1786.x * 14u;
    uint _1789 = _1788 + 13u;
    float _1796 = _479 + (-1.0);
    float _1801 = (cbLight._m0[_1789].x * _1796) + 1.0;
    float _1802 = (cbLight._m0[_1789].y * _1796) + 1.0;
    float _1803 = (cbLight._m0[_1789].z * _1796) + 1.0;
    float _1804 = (cbLight._m0[_1789].w * _1796) + 1.0;
    uint _1805 = _1788 + 5u;
    float _1811 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
    uint _1815 = _1788 + 4u;
    float _1825 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
    uint _1829 = _1788 | 1u;
    float _1840 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_306, _307, _308));
    float _1843 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_306, _307, _308));
    float _4005 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _4016 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1848 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * 0.3183098733425140380859375;
    float _1850 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * 0.3183098733425140380859375;
    float _1857 = ((cbLight._m0[_1805].x * _1811) * _1850) + (((cbLight._m0[_1815].x * _1777) * _1825) * _1848);
    float _1858 = ((_1811 * cbLight._m0[_1805].y) * _1850) + (((cbLight._m0[_1815].y * _1779) * _1825) * _1848);
    float _1859 = ((_1811 * cbLight._m0[_1805].z) * _1850) + (((cbLight._m0[_1815].z * _1781) * _1825) * _1848);
    uvec4 _1863 = floatBitsToUint(cbLight._m0[_1788 + 12u]);
    bool _1865 = _1863.x == 0u;
    float _1967;
    float _1969;
    float _1971;
    if (_1865)
    {
        _1967 = _1857;
        _1969 = _1858;
        _1971 = _1859;
    }
    else
    {
        uint _1975 = _1788 + 6u;
        float _1991 = (dot(vec3(cbLight._m0[_1788 + 2u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1992 = _1991 * _1991;
        float _4027 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1993 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1994 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
        _1967 = (((cbLight._m0[_1975].x * 0.3183098733425140380859375) * _1993) * _1994) + _1857;
        _1969 = (((cbLight._m0[_1975].y * 0.3183098733425140380859375) * _1993) * _1994) + _1858;
        _1971 = (((cbLight._m0[_1975].z * 0.3183098733425140380859375) * _1993) * _1994) + _1859;
    }
    bool _1974 = _1863.y == 0u;
    float _2029;
    float _2031;
    float _2033;
    if (_1974)
    {
        _2029 = _1967;
        _2031 = _1969;
        _2033 = _1971;
    }
    else
    {
        uint _2202 = _1788 + 7u;
        float _2218 = (dot(vec3(cbLight._m0[_1788 + 3u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _2219 = _2218 * _2218;
        float _4043 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2220 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2221 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
        _2029 = (((cbLight._m0[_2202].x * 0.3183098733425140380859375) * _2220) * _2221) + _1967;
        _2031 = (((cbLight._m0[_2202].y * 0.3183098733425140380859375) * _2220) * _2221) + _1969;
        _2033 = (((cbLight._m0[_2202].z * 0.3183098733425140380859375) * _2220) * _2221) + _1971;
    }
    uint _2036 = _1788 + 8u;
    float _2049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1788].w)) * _309) * 0.949999988079071044921875);
    float _2050 = _2049 * _2049;
    float _2051 = cbLight._m0[_1788].x + _388;
    float _2052 = cbLight._m0[_1788].y + _389;
    float _2053 = cbLight._m0[_1788].z + _390;
    float _2057 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
    float _2058 = _2057 * _2051;
    float _2059 = _2057 * _2052;
    float _2060 = _2057 * _2053;
    float _2061 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1788].xyz));
    float _4059 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _2065 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _2066 = dot(vec3(_306, _307, _308), vec3(_2058, _2059, _2060));
    float _4081 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _2070 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_2058, _2059, _2060));
    float _4092 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2074 = _2050 * _2050;
    float _2078 = ((_2069 * _2069) * (_2074 + (-1.0))) + 1.0;
    float _2086 = exp2(log2(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * 5.0);
    float _2087 = 0.959999978542327880859375 - _460;
    float _2089 = 0.959999978542327880859375 - _461;
    float _2090 = 0.959999978542327880859375 - _462;
    float _2097 = 1.0 - _2050;
    float _2108 = (0.5 / (((_2065 * ((_2064 * _2097) + _2050)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2097) + _2050) * _2064))) * _2064;
    float _4103 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2110 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2074 / ((_2078 * _2078) * 3.141590118408203125));
    uint _2124 = _1788 + 9u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _309) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1829].x + _388;
    float _2138 = cbLight._m0[_1829].y + _389;
    float _2139 = cbLight._m0[_1829].z + _390;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1829].xyz));
    float _4114 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _2151 = dot(vec3(_306, _307, _308), vec3(_2144, _2145, _2146));
    float _4125 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_2144, _2145, _2146));
    float _4136 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2136 * _2136;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2170 = exp2(log2(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * 5.0);
    float _2177 = 1.0 - _2136;
    float _2187 = (0.5 / (((_2065 * ((_2150 * _2177) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2177) + _2136) * _2150))) * _2150;
    float _4147 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2189 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    float _2199 = (((((_2170 * _2087) + _463) * cbLight._m0[_2124].x) * _2189) * _1811) + ((((cbLight._m0[_2036].x * _1777) * ((_2086 * _2087) + _463)) * _2110) * _1825);
    float _2200 = (((((_2170 * _2089) + _465) * cbLight._m0[_2124].y) * _2189) * _1811) + ((((cbLight._m0[_2036].y * _1779) * ((_2086 * _2089) + _465)) * _2110) * _1825);
    float _2201 = (((((_2170 * _2090) + _466) * cbLight._m0[_2124].z) * _2189) * _1811) + ((((cbLight._m0[_2036].z * _1781) * ((_2086 * _2090) + _466)) * _2110) * _1825);
    float _2257;
    float _2259;
    float _2261;
    if (_1865)
    {
        _2257 = _2199;
        _2259 = _2200;
        _2261 = _2201;
    }
    else
    {
        uint _2263 = _1788 + 2u;
        uint _2267 = _1788 + 10u;
        float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _309) * 0.949999988079071044921875);
        float _2282 = _2281 * _2281;
        float _2283 = cbLight._m0[_2263].x + _388;
        float _2284 = cbLight._m0[_2263].y + _389;
        float _2285 = cbLight._m0[_2263].z + _390;
        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
        float _2290 = _2289 * _2283;
        float _2291 = _2289 * _2284;
        float _2292 = _2289 * _2285;
        float _2293 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2263].xyz));
        float _4158 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2297 = dot(vec3(_306, _307, _308), vec3(_2290, _2291, _2292));
        float _4169 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2301 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2290, _2291, _2292));
        float _4180 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2305 = _2282 * _2282;
        float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
        float _2316 = exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0);
        float _2323 = 1.0 - _2282;
        float _2333 = (0.5 / (((_2065 * ((_2296 * _2323) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2323) + _2282) * _2296))) * _2296;
        float _4191 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2335 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
        float _2336 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
        _2257 = (((((_2316 * _2087) + _463) * cbLight._m0[_2267].x) * _2335) * _2336) + _2199;
        _2259 = (((((_2316 * _2089) + _465) * cbLight._m0[_2267].y) * _2335) * _2336) + _2200;
        _2261 = (((((_2316 * _2090) + _466) * cbLight._m0[_2267].z) * _2335) * _2336) + _2201;
    }
    float _2367;
    float _2369;
    float _2371;
    if (_1974)
    {
        _2367 = _2257;
        _2369 = _2259;
        _2371 = _2261;
    }
    else
    {
        uint _2378 = _1788 + 3u;
        uint _2382 = _1788 + 11u;
        float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _309) * 0.949999988079071044921875);
        float _2397 = _2396 * _2396;
        float _2398 = cbLight._m0[_2378].x + _388;
        float _2399 = cbLight._m0[_2378].y + _389;
        float _2400 = cbLight._m0[_2378].z + _390;
        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
        float _2405 = _2404 * _2398;
        float _2406 = _2404 * _2399;
        float _2407 = _2404 * _2400;
        float _2408 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2378].xyz));
        float _4207 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2412 = dot(vec3(_306, _307, _308), vec3(_2405, _2406, _2407));
        float _4218 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2416 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2405, _2406, _2407));
        float _4229 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2420 = _2397 * _2397;
        float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
        float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * 5.0);
        float _2438 = 1.0 - _2397;
        float _2448 = (0.5 / (((_2065 * ((_2411 * _2438) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2438) + _2397) * _2411))) * _2411;
        float _4240 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2450 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
        float _2451 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
        _2367 = (((((_2431 * _2087) + _463) * cbLight._m0[_2382].x) * _2450) * _2451) + _2257;
        _2369 = (((((_2431 * _2089) + _465) * cbLight._m0[_2382].y) * _2450) * _2451) + _2259;
        _2371 = (((((_2431 * _2090) + _466) * cbLight._m0[_2382].z) * _2450) * _2451) + _2261;
    }
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    float _2526;
    if (_1786.y == 0u)
    {
        uvec4 _2472 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2473 = _2472.x;
        uint _2484 = uint((float(_2472.y) * floor(float(uint(cbSceneParam._m0[85u].y * _397) / _2473))) + floor(float(uint(cbSceneParam._m0[85u].x * _396) / _2473)));
        float _2494 = (log2(_1564 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2495 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        uint _2498 = uint(isnan(14.0) ? _2495 : (isnan(_2495) ? 14.0 : min(_2495, 14.0)));
        uvec4 _2503 = texelFetch(g_lightClusterGridBuffer, int(((_2498 << 2u) + (_2484 << 6u)) >> 2u));
        uint _2504 = _2503.x;
        uint _2505 = _2472.z;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        if (((((1u << ((_2505 >> 4u) & 15u)) + 4294967295u) & _2504) == 0u) || ((_2505 & 240u) == 0u))
        {
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
        }
        else
        {
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            uint _2733 = 0u;
            uint _2742;
            bool _2743;
            for (;;)
            {
                _2742 = texelFetch(g_lightClassification, int((((_2498 << 5u) + (_2484 << 9u)) + (_2733 << 2u)) >> 2u)).x;
                _2743 = _2742 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2743)
                {
                    frontier_phi_68_pred = _2732;
                    frontier_phi_68_pred_1 = _2731;
                    frontier_phi_68_pred_2 = _2730;
                    frontier_phi_68_pred_3 = _2728;
                    frontier_phi_68_pred_4 = _2727;
                    frontier_phi_68_pred_5 = _2729;
                }
                else
                {
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    uint _2857;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2742;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    for (;;)
                    {
                        uint _2861 = uint(findLSB(_2857)) + (_2733 << 5u);
                        uint _2858 = (_2857 + 4294967295u) & _2857;
                        uint _2863 = _2861 * 48u;
                        vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 3u)).x));
                        uint _2883 = (_2861 * 48u) + 4u;
                        vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 3u)).x));
                        uint _2902 = (_2861 * 48u) + 8u;
                        vec3 _2913 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x));
                        float _2917 = _2877.x - _1562;
                        float _2918 = _2877.y - _1563;
                        float _2919 = _2877.z - _1564;
                        float _2920 = dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919));
                        float _2923 = inversesqrt(_2920);
                        float _2924 = _2923 * _2917;
                        float _2925 = _2923 * _2918;
                        float _2926 = _2923 * _2919;
                        float _2927 = dot(vec3(_418, _421, _424), vec3(_2924, _2925, _2926));
                        float _2932 = 1.0 - (_2920 * _2877.w);
                        float _4266 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2933 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                        float _2934 = sqrt(_2920) * _2896.w;
                        float _2937 = 1.39999997615814208984375 / (_2934 + 1.39999997615814208984375);
                        float _2938 = _2937 * _2937;
                        float _2941 = ((1.0 - _2938) * _2927) + _2938;
                        float _2944 = _2934 * _2934;
                        float _2948 = ((isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))) * _2933) / ((_2944 * 0.699999988079071044921875) + 1.0);
                        float _2952 = (-0.0) - _1562;
                        float _2953 = (-0.0) - _1563;
                        float _2954 = (-0.0) - _1564;
                        float _2958 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
                        float _2959 = _2958 * _2952;
                        float _2960 = _2958 * _2953;
                        float _2961 = _2958 * _2954;
                        float _2968 = exp2(log2(1.0 / ((_2944 * 3.5) + 5.0)) * 0.25);
                        float _2969 = 1.0 - _495;
                        float _2976 = sqrt(1.0 - ((1.0 - (_2969 * _2969)) * (1.0 - (_2968 * _2968))));
                        float _2977 = _2976 * _2976;
                        float _2978 = _2977 * _2977;
                        float _2979 = _2959 + _2924;
                        float _2980 = _2960 + _2925;
                        float _2981 = _2961 + _2926;
                        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                        float _2989 = dot(vec3(_418, _421, _424), vec3(_2959, _2960, _2961));
                        float _4282 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2992 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                        float _2993 = dot(vec3(_418, _421, _424), vec3(_2985 * _2979, _2985 * _2980, _2985 * _2981));
                        float _4293 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _3000 = ((_2996 * _2996) * (_2978 + (-1.0))) + 1.0;
                        float _3001 = _2937 * _2977;
                        float _3002 = _3001 * _3001;
                        float _3005 = ((1.0 - _3002) * _2927) + _3002;
                        float _4304 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3006 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _3007 = 1.0 - _2977;
                        float _3017 = (0.5 / (((_3006 * ((_2992 * _3007) + _2977)) + 9.9999999392252902907785028219223e-09) + (((_3006 * _3007) + _2977) * _2992))) * _3006;
                        float _4315 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3028 = (((_2978 * 3.1415927410125732421875) * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) / ((_3000 * _3000) * ((_2944 * 2.1991131305694580078125) + 3.141590118408203125))) * _2933;
                        _2786 = (_2948 * _2896.x) + _2854;
                        _2787 = (_2948 * _2896.y) + _2855;
                        _2788 = (_2948 * _2896.z) + _2856;
                        _2783 = (_3028 * _2913.x) + _2851;
                        _2784 = (_3028 * _2913.y) + _2852;
                        _2785 = (_3028 * _2913.z) + _2853;
                        if (_2858 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2858;
                        }
                    }
                    frontier_phi_68_pred = _2788;
                    frontier_phi_68_pred_1 = _2787;
                    frontier_phi_68_pred_2 = _2786;
                    frontier_phi_68_pred_3 = _2784;
                    frontier_phi_68_pred_4 = _2783;
                    frontier_phi_68_pred_5 = _2785;
                }
                _2594 = frontier_phi_68_pred;
                _2592 = frontier_phi_68_pred_1;
                _2590 = frontier_phi_68_pred_2;
                _2586 = frontier_phi_68_pred_3;
                _2584 = frontier_phi_68_pred_4;
                _2588 = frontier_phi_68_pred_5;
                uint _2734 = _2733 + 1u;
                if (_2734 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2727 = _2584;
                    _2728 = _2586;
                    _2729 = _2588;
                    _2730 = _2590;
                    _2731 = _2592;
                    _2732 = _2594;
                    _2733 = _2734;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
        }
        uvec4 _2597 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2598 = _2597.z;
        uint _2600 = (_2598 >> 8u) & 15u;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        if (((4294967295u << _2600) & _2504) == 0u)
        {
            _2695 = _2583;
            _2697 = _2585;
            _2699 = _2587;
            _2701 = _2589;
            _2703 = _2591;
            _2705 = _2593;
        }
        else
        {
            float _2720 = inversesqrt(dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564)));
            float _2721 = _2720 * _1562;
            float _2722 = _2720 * _1563;
            float _2723 = _2720 * _1564;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2600 < ((_2598 >> 12u) & 15u))
            {
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2834 = _2583;
                float _2835 = _2585;
                float _2836 = _2587;
                float _2837 = _2589;
                float _2838 = _2591;
                float _2839 = _2593;
                uint _2840 = _2600;
                uint _2849;
                bool _2850;
                for (;;)
                {
                    _2849 = texelFetch(g_lightClassification, int((((_2498 << 5u) + (_2484 << 9u)) + (_2840 << 2u)) >> 2u)).x;
                    _2850 = _2849 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2850)
                    {
                        frontier_phi_74_pred = _2836;
                        frontier_phi_74_pred_1 = _2835;
                        frontier_phi_74_pred_2 = _2834;
                        frontier_phi_74_pred_3 = _2839;
                        frontier_phi_74_pred_4 = _2838;
                        frontier_phi_74_pred_5 = _2837;
                    }
                    else
                    {
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3046 = _2834;
                        float _3047 = _2835;
                        float _3048 = _2836;
                        float _3049 = _2837;
                        float _3050 = _2838;
                        float _3051 = _2839;
                        uint _3052 = _2849;
                        uint _3053;
                        vec4 _3078;
                        float _3079;
                        vec4 _3094;
                        vec3 _3106;
                        vec4 _3122;
                        vec4 _3138;
                        float _3185;
                        bool _3186;
                        for (;;)
                        {
                            uint _3063 = ((_2840 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3052));
                            _3053 = (_3052 + 4294967295u) & _3052;
                            uint _3065 = _3063 * 40u;
                            _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            _3079 = _3078.w;
                            uint _3081 = (_3063 * 40u) + 4u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3096 = (_3063 * 40u) + 8u;
                            _3106 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x));
                            uint _3109 = (_3063 * 40u) + 16u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3125 = (_3063 * 40u) + 20u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3141 = (_3063 * 40u) + 24u;
                            vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3160 = (_3063 * 40u) + 28u;
                            vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            _3185 = fma(_1564, _3173.z, fma(_1563, _3173.y, _3173.x * _1562)) + _3173.w;
                            _3186 = !((fma(_1564, _3154.z, fma(_1563, _3154.y, _3154.x * _1562)) + _3154.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3186)
                            {
                                float _3213 = _3078.x - _1562;
                                float _3214 = _3078.y - _1563;
                                float _3215 = _3078.z - _1564;
                                float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                                float _3219 = inversesqrt(_3216);
                                float _3220 = _3219 * _3213;
                                float _3221 = _3219 * _3214;
                                float _3222 = _3219 * _3215;
                                float _3226 = 1.0 - (_3216 / (_3079 * _3079));
                                float _4326 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3231 = sqrt(_3216) * _3094.w;
                                float _3233 = 1.39999997615814208984375 / (_3231 + 1.39999997615814208984375);
                                float _3234 = _3233 * _3233;
                                float _3237 = ((1.0 - _3234) * dot(vec3(_3220, _3221, _3222), vec3(_418, _421, _424))) + _3234;
                                float _3240 = _3231 * _3231;
                                float _3244 = (fma(_1564, _3122.z, fma(_1563, _3122.y, _3122.x * _1562)) + _3122.w) / _3185;
                                float _3245 = (fma(_1564, _3138.z, fma(_1563, _3138.y, _3138.x * _1562)) + _3138.w) / _3185;
                                float _3249 = 1.0 - dot(vec2(_3244, _3245), vec2(_3244, _3245));
                                float _4342 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3251 = _3250 * (((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3227) / ((_3240 * 0.699999988079071044921875) + 1.0));
                                float _3263 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                                float _3264 = 1.0 - _495;
                                float _3271 = sqrt(1.0 - ((1.0 - (_3264 * _3264)) * (1.0 - (_3263 * _3263))));
                                float _3272 = _3271 * _3271;
                                float _3273 = _3272 * _3272;
                                float _3274 = _3220 - _2721;
                                float _3275 = _3221 - _2722;
                                float _3276 = _3222 - _2723;
                                float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                                float _3284 = dot(vec3(_418, _421, _424), vec3((-0.0) - _2721, (-0.0) - _2722, (-0.0) - _2723));
                                float _4353 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3288 = dot(vec3(_418, _421, _424), vec3(_3280 * _3274, _3280 * _3275, _3280 * _3276));
                                float _4364 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3291 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3295 = ((_3291 * _3291) * (_3273 + (-1.0))) + 1.0;
                                float _3296 = _3233 * _3272;
                                float _3297 = _3296 * _3296;
                                float _3303 = ((1.0 - _3297) * dot(vec3(_418, _421, _424), vec3(_3220, _3221, _3222))) + _3297;
                                float _4375 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3305 = 1.0 - _3272;
                                float _3315 = (0.5 / (((_3304 * ((_3287 * _3305) + _3272)) + 9.9999999392252902907785028219223e-09) + (((_3304 * _3305) + _3272) * _3287))) * _3304;
                                float _4386 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3325 = (_3250 * _3227) * (((_3273 * 3.1415927410125732421875) * (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) / ((_3295 * _3295) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3325 * _3106.z;
                                frontier_phi_80_pred_1 = _3325 * _3106.y;
                                frontier_phi_80_pred_2 = _3325 * _3106.x;
                                frontier_phi_80_pred_3 = _3251 * _3094.z;
                                frontier_phi_80_pred_4 = _3251 * _3094.y;
                                frontier_phi_80_pred_5 = _3251 * _3094.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3331 = frontier_phi_80_pred;
                            _3330 = frontier_phi_80_pred_1;
                            _3329 = frontier_phi_80_pred_2;
                            _3334 = frontier_phi_80_pred_3;
                            _3333 = frontier_phi_80_pred_4;
                            _3332 = frontier_phi_80_pred_5;
                            _3036 = _3332 + _3049;
                            _3037 = _3333 + _3050;
                            _3038 = _3334 + _3051;
                            _3033 = _3329 + _3046;
                            _3034 = _3330 + _3047;
                            _3035 = _3331 + _3048;
                            if (_3053 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3053;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3035;
                        frontier_phi_74_pred_1 = _3034;
                        frontier_phi_74_pred_2 = _3033;
                        frontier_phi_74_pred_3 = _3038;
                        frontier_phi_74_pred_4 = _3037;
                        frontier_phi_74_pred_5 = _3036;
                    }
                    _2700 = frontier_phi_74_pred;
                    _2698 = frontier_phi_74_pred_1;
                    _2696 = frontier_phi_74_pred_2;
                    _2706 = frontier_phi_74_pred_3;
                    _2704 = frontier_phi_74_pred_4;
                    _2702 = frontier_phi_74_pred_5;
                    uint _2841 = _2840 + 1u;
                    if (_2841 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2834 = _2696;
                        _2835 = _2698;
                        _2836 = _2700;
                        _2837 = _2702;
                        _2838 = _2704;
                        _2839 = _2706;
                        _2840 = _2841;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2704;
                frontier_phi_62_63_ladder_1 = _2702;
                frontier_phi_62_63_ladder_2 = _2700;
                frontier_phi_62_63_ladder_3 = _2706;
                frontier_phi_62_63_ladder_4 = _2698;
                frontier_phi_62_63_ladder_5 = _2696;
            }
            else
            {
                frontier_phi_62_63_ladder = _2591;
                frontier_phi_62_63_ladder_1 = _2589;
                frontier_phi_62_63_ladder_2 = _2587;
                frontier_phi_62_63_ladder_3 = _2593;
                frontier_phi_62_63_ladder_4 = _2585;
                frontier_phi_62_63_ladder_5 = _2583;
            }
            _2695 = frontier_phi_62_63_ladder_5;
            _2697 = frontier_phi_62_63_ladder_4;
            _2699 = frontier_phi_62_63_ladder_2;
            _2701 = frontier_phi_62_63_ladder_1;
            _2703 = frontier_phi_62_63_ladder;
            _2705 = frontier_phi_62_63_ladder_3;
        }
        float _2710 = isnan(1.0) ? _479 : (isnan(_479) ? 1.0 : min(_479, 1.0));
        _2516 = (_2710 * _2701) + _2029;
        _2518 = (_2710 * _2703) + _2031;
        _2520 = (_2710 * _2705) + _2033;
        _2522 = ((_2695 * _463) * _2710) + _2367;
        _2524 = ((_2697 * _465) * _2710) + _2369;
        _2526 = ((_2699 * _466) * _2710) + _2371;
    }
    else
    {
        _2516 = _2029;
        _2518 = _2031;
        _2520 = _2033;
        _2522 = _2367;
        _2524 = _2369;
        _2526 = _2371;
    }
    float _4402 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4413 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4424 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    uint _2546 = _437 + 6u;
    float _2554 = _396 / cbSceneParam._m0[86u].x;
    float _2555 = _397 / cbSceneParam._m0[86u].y;
    vec4 _2569 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2554, _2555, (log2((isnan(cbSceneParam._m0[77u].w) ? _330 : (isnan(_330) ? cbSceneParam._m0[77u].w : min(_330, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2571 = _2569.x;
    float _2572 = _2569.y;
    float _2573 = _2569.z;
    float _2574 = _2569.w;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    if (_330 > cbSceneParam._m0[78u].w)
    {
        float _2608 = isnan(_330) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _330 : min(cbSceneParam._m0[80u].w, _330));
        float _2609 = _2608 / _330;
        float _2620 = _2609 * _381;
        float _2621 = _382 * _2609;
        float _2622 = (-0.0) - _2621;
        float _2623 = _2609 * _383;
        float _2625 = (cbSceneParam._m0[77u].w * _2622) / _2608;
        float _2626 = _2625 + cbSceneParam._m0[79u].w;
        float _2627 = cbSceneParam._m0[79u].w - _2621;
        float _2633 = sqrt(((_2620 * _2620) + (_2621 * _2621)) + (_2623 * _2623));
        float _2636 = (1.0 - (cbSceneParam._m0[77u].w / _2608)) * _2633;
        float _2641 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2643 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2796;
        if (abs((_2622 - _2625) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2796 = ((((_2626 > 0.0) ? exp2(_2641 * _2626) : (2.0 - exp2(_2643 * _2626))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2636;
        }
        else
        {
            float _2756 = 1.0 / cbSceneParam._m0[80u].x;
            float _2757 = isnan(_2627) ? _2626 : (isnan(_2626) ? _2627 : max(_2626, _2627));
            float _2758 = isnan(_2627) ? _2626 : (isnan(_2626) ? _2627 : min(_2626, _2627));
            float _2767 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : min(_2757, 0.0));
            float _2768 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : min(_2758, 0.0));
            _2796 = ((abs(_2633 / _2622) * cbSceneParam._m0[80u].y) * ((((_2767 - _2768) * 2.0) - ((exp2(_2641 * (isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0)))) - exp2(_2641 * (isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0))))) * _2756)) - ((exp2(_2643 * _2767) - exp2(_2643 * _2768)) * _2756))) + (_2636 * cbSceneParam._m0[80u].z);
        }
        vec4 _2798 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2554, _2555, 1.0), 0.0);
        float _2807 = exp2((_2796 * (-1.44269502162933349609375)) * (1.0 - _2798.w));
        float _2808 = log2(_2807);
        float _2824 = log2(_2574);
        _2645 = (exp2(_2824 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].x)) * _2798.x) / cbSceneParam._m0[78u].x)) + _2571;
        _2647 = (exp2(_2824 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].y)) * _2798.y) / cbSceneParam._m0[78u].y)) + _2572;
        _2649 = (exp2(_2824 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].z)) * _2798.z) / cbSceneParam._m0[78u].z)) + _2573;
        _2651 = _2807 * _2574;
    }
    else
    {
        _2645 = _2571;
        _2647 = _2572;
        _2649 = _2573;
        _2651 = _2574;
    }
    float _2663 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2664 = _2663 == 3.0;
    float _2665 = log2(_2651);
    float _2672 = exp2(_2665 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2516 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _479))) + ((_2522 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1289)) * cbPerFrame._m0[3u].x));
    float _2673 = exp2(_2665 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2518 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _479))) + ((_2524 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1289)) * cbPerFrame._m0[3u].x));
    float _2674 = exp2(_2665 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2520 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _479))) + ((_2526 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1289)) * cbPerFrame._m0[3u].x));
    float _2683 = (_2663 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2683 * (_2664 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2645)));
    SV_Target.y = _2683 * (_2664 ? _2673 : (_2673 + (cbSceneParam._m0[72u].w * _2647)));
    SV_Target.z = _2683 * (_2664 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2649)));
    SV_Target.w = cbInstanceData._m0[_2546].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2546].w;
}


