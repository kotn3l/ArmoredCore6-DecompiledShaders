#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec3 TEXCOORD_2;
layout(location = 4) out vec2 TEXCOORD_4;
layout(location = 3, component = 3) out float TEXCOORD_8;

uint _477;

void main()
{
    uint _78 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_4.x = 0.0;
    TEXCOORD_4.y = 0.0;
    TEXCOORD_8 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _162 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _164 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _165 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _175 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _176 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _177 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _183 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _78;
    uvec4 _185 = texelFetch(g_InstanceIndexBuffer, int(_183));
    uint _186 = _185.x;
    uint _188 = _186 * 13u;
    uint _196 = (floatBitsToUint(cbInstanceData._m0[_188 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _203 = _196 + 1u;
    uint _210 = _196 + 2u;
    precise float _217 = POSITION.x * cbObjMatrix._m0[_196].x;
    precise float _218 = POSITION.y * cbObjMatrix._m0[_196].y;
    precise float _219 = _218 + _217;
    precise float _220 = POSITION.z * cbObjMatrix._m0[_196].z;
    precise float _221 = _220 + _219;
    precise float _222 = 1.0 * cbObjMatrix._m0[_196].w;
    precise float _224 = _222 + _221;
    precise float _225 = POSITION.x * cbObjMatrix._m0[_203].x;
    precise float _226 = POSITION.y * cbObjMatrix._m0[_203].y;
    precise float _227 = _226 + _225;
    precise float _228 = POSITION.z * cbObjMatrix._m0[_203].z;
    precise float _229 = _228 + _227;
    precise float _230 = 1.0 * cbObjMatrix._m0[_203].w;
    precise float _231 = _230 + _229;
    precise float _232 = POSITION.x * cbObjMatrix._m0[_210].x;
    precise float _233 = POSITION.y * cbObjMatrix._m0[_210].y;
    precise float _234 = _233 + _232;
    precise float _235 = POSITION.z * cbObjMatrix._m0[_210].z;
    precise float _236 = _235 + _234;
    precise float _237 = 1.0 * cbObjMatrix._m0[_210].w;
    precise float _238 = _237 + _236;
    uvec4 _244 = floatBitsToUint(cbInstanceData._m0[(_78 * 13u) + 7u]);
    uint _246 = _244.w;
    uint _248 = min(_244.y, 8u);
    float _252;
    float _254;
    if (_248 == 0u)
    {
        _252 = 0.0;
        _254 = 0.0;
    }
    else
    {
        uint _408 = _244.z;
        precise float _253;
        precise float _255;
        float _550;
        float _552;
        float _409 = 0.0;
        float _410 = 0.0;
        uint _411 = _408;
        uint _413 = 0u;
        float _449;
        float _468;
        vec4 _482;
        float _483;
        float _484;
        float _498;
        float _499;
        float _500;
        float _517;
        float _518;
        float _519;
        float _520;
        bool _521;
        bool _522;
        bool _523;
        precise float _524;
        precise float _525;
        precise float _526;
        float _527;
        float _528;
        float _529;
        precise float _530;
        bool _533;
        for (;;)
        {
            uint _415 = _411 & 255u;
            uint _417 = _415 * 24u;
            uvec3 _427 = uvec3(texelFetch(g_forceParam, int(_417)).x, texelFetch(g_forceParam, int(_417 + 1u)).x, texelFetch(g_forceParam, int(_417 + 2u)).x);
            uint _432 = (_415 * 24u) + 4u;
            vec4 _445 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_432)).x, texelFetch(g_forceParam, int(_432 + 1u)).x, texelFetch(g_forceParam, int(_432 + 2u)).x, texelFetch(g_forceParam, int(_432 + 3u)).x));
            _449 = _445.w;
            uint _451 = (_415 * 24u) + 8u;
            vec4 _464 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_451)).x, texelFetch(g_forceParam, int(_451 + 1u)).x, texelFetch(g_forceParam, int(_451 + 2u)).x, texelFetch(g_forceParam, int(_451 + 3u)).x));
            _468 = _464.w;
            uint _471 = (_415 * 24u) + 12u;
            _482 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_471)).x, texelFetch(g_forceParam, int(_471 + 1u)).x, _477, texelFetch(g_forceParam, int(_471 + 3u)).x));
            _483 = _482.x;
            _484 = _482.w;
            uint _487 = (_415 * 24u) + 16u;
            vec3 _497 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_487)).x, texelFetch(g_forceParam, int(_487 + 1u)).x, texelFetch(g_forceParam, int(_487 + 2u)).x));
            _498 = _497.x;
            _499 = _497.y;
            _500 = _497.z;
            uint _503 = (_415 * 24u) + 20u;
            vec4 _516 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_503)).x, texelFetch(g_forceParam, int(_503 + 1u)).x, texelFetch(g_forceParam, int(_503 + 2u)).x, texelFetch(g_forceParam, int(_503 + 3u)).x));
            _517 = _516.x;
            _518 = _516.y;
            _519 = _516.z;
            _520 = _516.w;
            _521 = _427.x == 1u;
            _522 = _427.y == 1u;
            _523 = _427.z == 1u;
            _524 = _224 - _445.x;
            _525 = _231 - _445.y;
            _526 = _238 - _445.z;
            _527 = _521 ? _464.x : _524;
            _528 = _521 ? _464.y : _525;
            _529 = _521 ? _464.z : _526;
            _530 = dot(vec3(_527, _528, _529), vec3(_527, _528, _529));
            _533 = _530 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            if (_533)
            {
                precise float _535 = _524 * _524;
                precise float _536 = _525 * _525;
                precise float _537 = _535 + _536;
                precise float _538 = _526 * _526;
                precise float _539 = _538 + _537;
                float _540 = sqrt(_539);
                float _541 = inversesqrt(_530);
                precise float _542 = _527 * _541;
                precise float _543 = _528 * _541;
                precise float _544 = _529 * _541;
                precise float _547 = _540 / (isnan(0.001000000047497451305389404296875) ? _482.y : (isnan(_482.y) ? 0.001000000047497451305389404296875 : max(_482.y, 0.001000000047497451305389404296875)));
                precise float _548 = 1.0 - _547;
                float _700 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
                float _549 = isnan(1.0) ? _700 : (isnan(_700) ? 1.0 : min(_700, 1.0));
                float _573;
                if (_523)
                {
                    float _560 = inversesqrt(dot(vec3(_524, _525, _526), vec3(_524, _525, _526)));
                    precise float _561 = _524 * _560;
                    precise float _562 = _525 * _560;
                    precise float _563 = _526 * _560;
                    precise float _567 = dot(vec3(_542, _543, _544), vec3(_561, _562, _563)) * 0.800000011920928955078125;
                    precise float _569 = _567 + 0.20000000298023223876953125;
                    float _711 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
                    precise float _572 = _549 * (isnan(1.0) ? _711 : (isnan(_711) ? 1.0 : min(_711, 1.0)));
                    _573 = _572;
                }
                else
                {
                    _573 = _549;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                if (_573 > 0.0)
                {
                    bool _576 = _521 && (!_523);
                    precise float _578 = _540 * (-4.0);
                    precise float _582 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _483 : (isnan(_483) ? 0.001000000047497451305389404296875 : max(_483, 0.001000000047497451305389404296875)));
                    precise float _584 = dot(vec2(_542, _544), vec2(_524, _526));
                    precise float _587 = _582 * _584;
                    precise float _588 = float(_576) * _587;
                    precise float _589 = cbPerFrame._m0[22u].x * _582;
                    precise float _590 = _589 - _588;
                    precise float _591 = (_576 ? 0.0 : _578) + _590;
                    precise float _593 = _468 * sin(_591);
                    precise float _594 = _543 * 0.0;
                    precise float _595 = _594 - _544;
                    precise float _596 = _542 - _594;
                    precise float _597 = _484 * _593;
                    float _598 = _521 ? _597 : 0.0;
                    float _641;
                    if (_522)
                    {
                        precise float _601 = _498 * 2.0;
                        precise float _603 = _518 + _519;
                        precise float _604 = _520 + _603;
                        precise float _606 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _498 : (isnan(_498) ? 0.001000000047497451305389404296875 : max(_498, 0.001000000047497451305389404296875)));
                        precise float _607 = _517 * _606;
                        precise float _608 = (-0.0) - _542;
                        precise float _613 = dot(vec2(_544, _608), vec2(_524, _526)) / _601;
                        precise float _614 = (-0.0) - _613;
                        float _617 = fract(abs(_613));
                        precise float _618 = (-0.0) - _617;
                        precise float _620 = _601 * ((_613 >= _614) ? _617 : _618);
                        precise float _621 = _620 * 6.283184051513671875;
                        precise float _622 = _621 / _601;
                        precise float _624 = (isnan(5.0) ? _498 : (isnan(_498) ? 5.0 : min(_498, 5.0))) * sin(_622);
                        precise float _625 = _584 + _624;
                        precise float _626 = _498 * 0.25;
                        precise float _628 = cbPerFrame._m0[22u].x * _517;
                        precise float _629 = _628 - _626;
                        precise float _630 = _629 - _625;
                        precise float _631 = _517 * _604;
                        precise float _633 = _630 / (isnan(0.001000000047497451305389404296875) ? _631 : (isnan(_631) ? 0.001000000047497451305389404296875 : max(_631, 0.001000000047497451305389404296875)));
                        float _634 = fract(_633);
                        precise float _636 = 1.0 - _634;
                        float _637 = (_633 < 0.0) ? _636 : _634;
                        precise float _638 = _603 / _604;
                        precise float _639 = _518 / _604;
                        float _656;
                        if (_637 < _639)
                        {
                            precise float _654 = _637 / _639;
                            _656 = _654;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_637 < _638)
                            {
                                precise float _666 = _637 - _639;
                                precise float _667 = _638 - _639;
                                precise float _668 = _666 / _667;
                                precise float _657 = 1.0 - _668;
                                frontier_phi_14_13_ladder = _657;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _656 = frontier_phi_14_13_ladder;
                        }
                        precise float _658 = _500 * _656;
                        precise float _659 = _606 * _584;
                        precise float _660 = cbPerFrame._m0[22u].x * _607;
                        precise float _661 = _660 - _659;
                        precise float _663 = _499 + sin(_661);
                        precise float _665 = _658 * abs(_663);
                        precise float _642 = _665 + 0.0;
                        _641 = _642;
                    }
                    else
                    {
                        _641 = 0.0;
                    }
                    precise float _643 = _449 + _593;
                    precise float _644 = _643 + _641;
                    precise float _645 = _542 * _644;
                    precise float _646 = _544 * _644;
                    precise float _647 = _595 * _598;
                    precise float _648 = _596 * _598;
                    precise float _649 = _647 + _645;
                    precise float _650 = _648 + _646;
                    precise float _651 = _573 * _649;
                    precise float _652 = _573 * _650;
                    precise float _551 = _651 * 0.0500000007450580596923828125;
                    precise float _553 = _652 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _551;
                    frontier_phi_5_pred_7_ladder_1 = _553;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
            }
            _550 = frontier_phi_5_pred;
            _552 = frontier_phi_5_pred_1;
            _253 = _409 + _550;
            _255 = _410 + _552;
            uint _414 = _413 + 1u;
            if (_414 == _248)
            {
                break;
            }
            else
            {
                _409 = _253;
                _410 = _255;
                _411 = (_413 != 3u) ? (_411 >> 8u) : _246;
                _413 = _414;
                continue;
            }
        }
        _252 = _253;
        _254 = _255;
    }
    precise float _256 = TEXCOORD_1.y * _252;
    precise float _257 = TEXCOORD_1.y * _254;
    precise float _261 = dot(vec2(_256, _257), vec2(_256, _257)) + 1.0;
    float _262 = sqrt(_261);
    precise float _263 = _256 / _262;
    precise float _264 = _257 / _262;
    precise float _268 = 1.0 - dot(vec2(_263, _264), vec2(_263, _264));
    float _742 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    precise float _271 = sqrt(isnan(1.0) ? _742 : (isnan(_742) ? 1.0 : min(_742, 1.0))) + (-1.0);
    precise float _273 = TEXCOORD_1.y * _263;
    precise float _274 = TEXCOORD_1.y * _271;
    precise float _275 = TEXCOORD_1.y * _264;
    precise float _276 = _224 + _273;
    precise float _277 = _231 + _274;
    precise float _278 = _238 + _275;
    float _284 = cbSceneParam._m0[3u].x - _276;
    float _285 = cbSceneParam._m0[3u].y - _277;
    float _286 = cbSceneParam._m0[3u].z - _278;
    precise float _312 = _276 - cbSceneParam._m0[3u].x;
    precise float _313 = _277 - cbSceneParam._m0[3u].y;
    precise float _314 = _278 - cbSceneParam._m0[3u].z;
    precise float _342 = _312 * cbSceneParam._m0[24u].x;
    precise float _343 = _313 * cbSceneParam._m0[24u].y;
    precise float _344 = _343 + _342;
    precise float _345 = _314 * cbSceneParam._m0[24u].z;
    precise float _346 = _345 + _344;
    precise float _347 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _348 = _347 + _346;
    precise float _349 = _312 * cbSceneParam._m0[25u].x;
    precise float _350 = _313 * cbSceneParam._m0[25u].y;
    precise float _351 = _350 + _349;
    precise float _352 = _314 * cbSceneParam._m0[25u].z;
    precise float _353 = _352 + _351;
    precise float _354 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _355 = _354 + _353;
    precise float _356 = _312 * cbSceneParam._m0[26u].x;
    precise float _357 = _313 * cbSceneParam._m0[26u].y;
    precise float _358 = _357 + _356;
    precise float _359 = _314 * cbSceneParam._m0[26u].z;
    precise float _360 = _359 + _358;
    precise float _361 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _362 = _361 + _360;
    precise float _363 = _312 * cbSceneParam._m0[27u].x;
    precise float _364 = _313 * cbSceneParam._m0[27u].y;
    precise float _365 = _364 + _363;
    precise float _366 = _314 * cbSceneParam._m0[27u].z;
    precise float _367 = _366 + _365;
    precise float _368 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _369 = _368 + _367;
    gl_Position.x = _348;
    gl_Position.y = _355;
    gl_Position.z = _362;
    gl_Position.w = _369;
    NORMAL_1.x = fma(_165, cbObjMatrix._m0[_196].z, fma(_164, cbObjMatrix._m0[_196].y, cbObjMatrix._m0[_196].x * _162));
    NORMAL_1.y = fma(_165, cbObjMatrix._m0[_203].z, fma(_164, cbObjMatrix._m0[_203].y, cbObjMatrix._m0[_203].x * _162));
    NORMAL_1.z = fma(_165, cbObjMatrix._m0[_210].z, fma(_164, cbObjMatrix._m0[_210].y, cbObjMatrix._m0[_210].x * _162));
    NORMAL_1.w = float(_186);
    TANGENT_1.x = fma(_177, cbObjMatrix._m0[_196].z, fma(_176, cbObjMatrix._m0[_196].y, cbObjMatrix._m0[_196].x * _175));
    TANGENT_1.y = fma(_177, cbObjMatrix._m0[_203].z, fma(_176, cbObjMatrix._m0[_203].y, cbObjMatrix._m0[_203].x * _175));
    TANGENT_1.z = fma(_177, cbObjMatrix._m0[_210].z, fma(_176, cbObjMatrix._m0[_210].y, cbObjMatrix._m0[_210].x * _175));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = COLOR_1.x;
    TEXCOORD_4.x = _362;
    TEXCOORD_4.y = _369;
    TEXCOORD_8 = sqrt(((_286 * _286) + (_284 * _284)) + (_285 * _285));
    gl_ClipDistance[0u] = dot(vec4(_348, _355, _362, _369), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_348, _355, _362, _369), vec4(cbInstanceData._m0[_188 + 3u]));
}


