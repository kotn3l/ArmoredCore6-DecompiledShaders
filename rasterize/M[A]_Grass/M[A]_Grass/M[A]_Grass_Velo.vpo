#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec3 TEXCOORD_2;
layout(location = 5) out vec4 TEXCOORD_5;
layout(location = 6) out vec4 TEXCOORD_6;
layout(location = 7) out vec3 TEXCOORD_7;

uint _585;

void main()
{
    uint _81 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_5.x = 0.0;
    TEXCOORD_5.y = 0.0;
    TEXCOORD_5.z = 0.0;
    TEXCOORD_5.w = 0.0;
    TEXCOORD_6.x = 0.0;
    TEXCOORD_6.y = 0.0;
    TEXCOORD_6.z = 0.0;
    TEXCOORD_6.w = 0.0;
    TEXCOORD_7.x = 0.0;
    TEXCOORD_7.y = 0.0;
    TEXCOORD_7.z = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _179 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _181 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _182 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _192 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _193 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _194 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _200 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _81;
    uvec4 _202 = texelFetch(g_InstanceIndexBuffer, int(_200));
    uint _203 = _202.x;
    uint _205 = _203 * 13u;
    uint _213 = (floatBitsToUint(cbInstanceData._m0[_205 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _220 = _213 + 1u;
    uint _227 = _213 + 2u;
    precise float _234 = POSITION.x * cbObjMatrix._m0[_213].x;
    precise float _235 = POSITION.y * cbObjMatrix._m0[_213].y;
    precise float _236 = _235 + _234;
    precise float _237 = POSITION.z * cbObjMatrix._m0[_213].z;
    precise float _238 = _237 + _236;
    precise float _239 = 1.0 * cbObjMatrix._m0[_213].w;
    precise float _241 = _239 + _238;
    precise float _242 = POSITION.x * cbObjMatrix._m0[_220].x;
    precise float _243 = POSITION.y * cbObjMatrix._m0[_220].y;
    precise float _244 = _243 + _242;
    precise float _245 = POSITION.z * cbObjMatrix._m0[_220].z;
    precise float _246 = _245 + _244;
    precise float _247 = 1.0 * cbObjMatrix._m0[_220].w;
    precise float _248 = _247 + _246;
    precise float _249 = POSITION.x * cbObjMatrix._m0[_227].x;
    precise float _250 = POSITION.y * cbObjMatrix._m0[_227].y;
    precise float _251 = _250 + _249;
    precise float _252 = POSITION.z * cbObjMatrix._m0[_227].z;
    precise float _253 = _252 + _251;
    precise float _254 = 1.0 * cbObjMatrix._m0[_227].w;
    precise float _255 = _254 + _253;
    uvec4 _261 = floatBitsToUint(cbInstanceData._m0[(_81 * 13u) + 7u]);
    uint _263 = _261.w;
    uint _265 = min(_261.y, 8u);
    float _269;
    float _271;
    if (_265 == 0u)
    {
        _269 = 0.0;
        _271 = 0.0;
    }
    else
    {
        uint _516 = _261.z;
        precise float _270;
        precise float _272;
        float _658;
        float _660;
        float _517 = 0.0;
        float _518 = 0.0;
        uint _519 = _516;
        uint _521 = 0u;
        float _557;
        float _576;
        vec4 _590;
        float _591;
        float _592;
        float _606;
        float _607;
        float _608;
        float _625;
        float _626;
        float _627;
        float _628;
        bool _629;
        bool _630;
        bool _631;
        precise float _632;
        precise float _633;
        precise float _634;
        float _635;
        float _636;
        float _637;
        precise float _638;
        bool _641;
        for (;;)
        {
            uint _523 = _519 & 255u;
            uint _525 = _523 * 24u;
            uvec3 _535 = uvec3(texelFetch(g_forceParam, int(_525)).x, texelFetch(g_forceParam, int(_525 + 1u)).x, texelFetch(g_forceParam, int(_525 + 2u)).x);
            uint _540 = (_523 * 24u) + 4u;
            vec4 _553 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_540)).x, texelFetch(g_forceParam, int(_540 + 1u)).x, texelFetch(g_forceParam, int(_540 + 2u)).x, texelFetch(g_forceParam, int(_540 + 3u)).x));
            _557 = _553.w;
            uint _559 = (_523 * 24u) + 8u;
            vec4 _572 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_559)).x, texelFetch(g_forceParam, int(_559 + 1u)).x, texelFetch(g_forceParam, int(_559 + 2u)).x, texelFetch(g_forceParam, int(_559 + 3u)).x));
            _576 = _572.w;
            uint _579 = (_523 * 24u) + 12u;
            _590 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_579)).x, texelFetch(g_forceParam, int(_579 + 1u)).x, _585, texelFetch(g_forceParam, int(_579 + 3u)).x));
            _591 = _590.x;
            _592 = _590.w;
            uint _595 = (_523 * 24u) + 16u;
            vec3 _605 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_595)).x, texelFetch(g_forceParam, int(_595 + 1u)).x, texelFetch(g_forceParam, int(_595 + 2u)).x));
            _606 = _605.x;
            _607 = _605.y;
            _608 = _605.z;
            uint _611 = (_523 * 24u) + 20u;
            vec4 _624 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_611)).x, texelFetch(g_forceParam, int(_611 + 1u)).x, texelFetch(g_forceParam, int(_611 + 2u)).x, texelFetch(g_forceParam, int(_611 + 3u)).x));
            _625 = _624.x;
            _626 = _624.y;
            _627 = _624.z;
            _628 = _624.w;
            _629 = _535.x == 1u;
            _630 = _535.y == 1u;
            _631 = _535.z == 1u;
            _632 = _241 - _553.x;
            _633 = _248 - _553.y;
            _634 = _255 - _553.z;
            _635 = _629 ? _572.x : _632;
            _636 = _629 ? _572.y : _633;
            _637 = _629 ? _572.z : _634;
            _638 = dot(vec3(_635, _636, _637), vec3(_635, _636, _637));
            _641 = _638 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            if (_641)
            {
                precise float _643 = _632 * _632;
                precise float _644 = _633 * _633;
                precise float _645 = _643 + _644;
                precise float _646 = _634 * _634;
                precise float _647 = _646 + _645;
                float _648 = sqrt(_647);
                float _649 = inversesqrt(_638);
                precise float _650 = _635 * _649;
                precise float _651 = _636 * _649;
                precise float _652 = _637 * _649;
                precise float _655 = _648 / (isnan(0.001000000047497451305389404296875) ? _590.y : (isnan(_590.y) ? 0.001000000047497451305389404296875 : max(_590.y, 0.001000000047497451305389404296875)));
                precise float _656 = 1.0 - _655;
                float _808 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
                float _657 = isnan(1.0) ? _808 : (isnan(_808) ? 1.0 : min(_808, 1.0));
                float _681;
                if (_631)
                {
                    float _668 = inversesqrt(dot(vec3(_632, _633, _634), vec3(_632, _633, _634)));
                    precise float _669 = _632 * _668;
                    precise float _670 = _633 * _668;
                    precise float _671 = _634 * _668;
                    precise float _675 = dot(vec3(_650, _651, _652), vec3(_669, _670, _671)) * 0.800000011920928955078125;
                    precise float _677 = _675 + 0.20000000298023223876953125;
                    float _819 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
                    precise float _680 = _657 * (isnan(1.0) ? _819 : (isnan(_819) ? 1.0 : min(_819, 1.0)));
                    _681 = _680;
                }
                else
                {
                    _681 = _657;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                if (_681 > 0.0)
                {
                    bool _684 = _629 && (!_631);
                    precise float _686 = _648 * (-4.0);
                    precise float _690 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _591 : (isnan(_591) ? 0.001000000047497451305389404296875 : max(_591, 0.001000000047497451305389404296875)));
                    precise float _692 = dot(vec2(_650, _652), vec2(_632, _634));
                    precise float _695 = _690 * _692;
                    precise float _696 = float(_684) * _695;
                    precise float _697 = cbPerFrame._m0[22u].x * _690;
                    precise float _698 = _697 - _696;
                    precise float _699 = (_684 ? 0.0 : _686) + _698;
                    precise float _701 = _576 * sin(_699);
                    precise float _702 = _651 * 0.0;
                    precise float _703 = _702 - _652;
                    precise float _704 = _650 - _702;
                    precise float _705 = _592 * _701;
                    float _706 = _629 ? _705 : 0.0;
                    float _749;
                    if (_630)
                    {
                        precise float _709 = _606 * 2.0;
                        precise float _711 = _626 + _627;
                        precise float _712 = _628 + _711;
                        precise float _714 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _606 : (isnan(_606) ? 0.001000000047497451305389404296875 : max(_606, 0.001000000047497451305389404296875)));
                        precise float _715 = _625 * _714;
                        precise float _716 = (-0.0) - _650;
                        precise float _721 = dot(vec2(_652, _716), vec2(_632, _634)) / _709;
                        precise float _722 = (-0.0) - _721;
                        float _725 = fract(abs(_721));
                        precise float _726 = (-0.0) - _725;
                        precise float _728 = _709 * ((_721 >= _722) ? _725 : _726);
                        precise float _729 = _728 * 6.283184051513671875;
                        precise float _730 = _729 / _709;
                        precise float _732 = (isnan(5.0) ? _606 : (isnan(_606) ? 5.0 : min(_606, 5.0))) * sin(_730);
                        precise float _733 = _692 + _732;
                        precise float _734 = _606 * 0.25;
                        precise float _736 = cbPerFrame._m0[22u].x * _625;
                        precise float _737 = _736 - _734;
                        precise float _738 = _737 - _733;
                        precise float _739 = _625 * _712;
                        precise float _741 = _738 / (isnan(0.001000000047497451305389404296875) ? _739 : (isnan(_739) ? 0.001000000047497451305389404296875 : max(_739, 0.001000000047497451305389404296875)));
                        float _742 = fract(_741);
                        precise float _744 = 1.0 - _742;
                        float _745 = (_741 < 0.0) ? _744 : _742;
                        precise float _746 = _711 / _712;
                        precise float _747 = _626 / _712;
                        float _764;
                        if (_745 < _747)
                        {
                            precise float _762 = _745 / _747;
                            _764 = _762;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_745 < _746)
                            {
                                precise float _774 = _745 - _747;
                                precise float _775 = _746 - _747;
                                precise float _776 = _774 / _775;
                                precise float _765 = 1.0 - _776;
                                frontier_phi_14_13_ladder = _765;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _764 = frontier_phi_14_13_ladder;
                        }
                        precise float _766 = _608 * _764;
                        precise float _767 = _714 * _692;
                        precise float _768 = cbPerFrame._m0[22u].x * _715;
                        precise float _769 = _768 - _767;
                        precise float _771 = _607 + sin(_769);
                        precise float _773 = _766 * abs(_771);
                        precise float _750 = _773 + 0.0;
                        _749 = _750;
                    }
                    else
                    {
                        _749 = 0.0;
                    }
                    precise float _751 = _557 + _701;
                    precise float _752 = _751 + _749;
                    precise float _753 = _650 * _752;
                    precise float _754 = _652 * _752;
                    precise float _755 = _703 * _706;
                    precise float _756 = _704 * _706;
                    precise float _757 = _755 + _753;
                    precise float _758 = _756 + _754;
                    precise float _759 = _681 * _757;
                    precise float _760 = _681 * _758;
                    precise float _659 = _759 * 0.0500000007450580596923828125;
                    precise float _661 = _760 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _659;
                    frontier_phi_5_pred_7_ladder_1 = _661;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
            }
            _658 = frontier_phi_5_pred;
            _660 = frontier_phi_5_pred_1;
            _270 = _517 + _658;
            _272 = _518 + _660;
            uint _522 = _521 + 1u;
            if (_522 == _265)
            {
                break;
            }
            else
            {
                _517 = _270;
                _518 = _272;
                _519 = (_521 != 3u) ? (_519 >> 8u) : _263;
                _521 = _522;
                continue;
            }
        }
        _269 = _270;
        _271 = _272;
    }
    precise float _273 = TEXCOORD_1.y * _269;
    precise float _274 = TEXCOORD_1.y * _271;
    precise float _279 = dot(vec2(_273, _274), vec2(_273, _274)) + 1.0;
    float _280 = sqrt(_279);
    precise float _281 = _273 / _280;
    precise float _282 = _274 / _280;
    precise float _286 = 1.0 - dot(vec2(_281, _282), vec2(_281, _282));
    float _850 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    precise float _289 = sqrt(isnan(1.0) ? _850 : (isnan(_850) ? 1.0 : min(_850, 1.0))) + (-1.0);
    precise float _291 = TEXCOORD_1.y * _281;
    precise float _292 = TEXCOORD_1.y * _289;
    precise float _293 = TEXCOORD_1.y * _282;
    precise float _294 = _241 + _291;
    precise float _295 = _248 + _292;
    precise float _296 = _255 + _293;
    float _332 = ((cbPrevObjMatrix._m0[_213].w + _291) + fma(POSITION.z, cbPrevObjMatrix._m0[_213].z, fma(POSITION.y, cbPrevObjMatrix._m0[_213].y, cbPrevObjMatrix._m0[_213].x * POSITION.x))) - cbSceneParam._m0[28u].x;
    float _335 = ((cbPrevObjMatrix._m0[_220].w + _292) + fma(POSITION.z, cbPrevObjMatrix._m0[_220].z, fma(POSITION.y, cbPrevObjMatrix._m0[_220].y, cbPrevObjMatrix._m0[_220].x * POSITION.x))) - cbSceneParam._m0[28u].y;
    float _338 = ((cbPrevObjMatrix._m0[_227].w + _293) + fma(POSITION.z, cbPrevObjMatrix._m0[_227].z, fma(POSITION.y, cbPrevObjMatrix._m0[_227].y, cbPrevObjMatrix._m0[_227].x * POSITION.x))) - cbSceneParam._m0[28u].z;
    float _385 = fma(_182, cbObjMatrix._m0[_213].z, fma(_181, cbObjMatrix._m0[_213].y, cbObjMatrix._m0[_213].x * _179));
    float _388 = fma(_182, cbObjMatrix._m0[_220].z, fma(_181, cbObjMatrix._m0[_220].y, cbObjMatrix._m0[_220].x * _179));
    float _391 = fma(_182, cbObjMatrix._m0[_227].z, fma(_181, cbObjMatrix._m0[_227].y, cbObjMatrix._m0[_227].x * _179));
    precise float _407 = _294 - cbSceneParam._m0[3u].x;
    precise float _408 = _295 - cbSceneParam._m0[3u].y;
    precise float _409 = _296 - cbSceneParam._m0[3u].z;
    precise float _437 = _407 * cbSceneParam._m0[24u].x;
    precise float _438 = _408 * cbSceneParam._m0[24u].y;
    precise float _439 = _438 + _437;
    precise float _440 = _409 * cbSceneParam._m0[24u].z;
    precise float _441 = _440 + _439;
    precise float _442 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _443 = _442 + _441;
    precise float _444 = _407 * cbSceneParam._m0[25u].x;
    precise float _445 = _408 * cbSceneParam._m0[25u].y;
    precise float _446 = _445 + _444;
    precise float _447 = _409 * cbSceneParam._m0[25u].z;
    precise float _448 = _447 + _446;
    precise float _449 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _450 = _449 + _448;
    precise float _451 = _407 * cbSceneParam._m0[26u].x;
    precise float _452 = _408 * cbSceneParam._m0[26u].y;
    precise float _453 = _452 + _451;
    precise float _454 = _409 * cbSceneParam._m0[26u].z;
    precise float _455 = _454 + _453;
    precise float _456 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _457 = _456 + _455;
    precise float _458 = _407 * cbSceneParam._m0[27u].x;
    precise float _459 = _408 * cbSceneParam._m0[27u].y;
    precise float _460 = _459 + _458;
    precise float _461 = _409 * cbSceneParam._m0[27u].z;
    precise float _462 = _461 + _460;
    precise float _463 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _464 = _463 + _462;
    gl_Position.x = _443;
    gl_Position.y = _450;
    gl_Position.z = _457;
    gl_Position.w = _464;
    POSITION_1.x = _443;
    POSITION_1.y = _450;
    POSITION_1.z = _457;
    POSITION_1.w = _464;
    NORMAL_1.x = _385;
    NORMAL_1.y = _388;
    NORMAL_1.z = _391;
    NORMAL_1.w = float(_203);
    TANGENT_1.x = fma(_194, cbObjMatrix._m0[_213].z, fma(_193, cbObjMatrix._m0[_213].y, cbObjMatrix._m0[_213].x * _192));
    TANGENT_1.y = fma(_194, cbObjMatrix._m0[_220].z, fma(_193, cbObjMatrix._m0[_220].y, cbObjMatrix._m0[_220].x * _192));
    TANGENT_1.z = fma(_194, cbObjMatrix._m0[_227].z, fma(_193, cbObjMatrix._m0[_227].y, cbObjMatrix._m0[_227].x * _192));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = COLOR_1.x;
    TEXCOORD_5.x = _443;
    TEXCOORD_5.y = _450;
    TEXCOORD_5.z = _457;
    TEXCOORD_5.w = _464;
    TEXCOORD_6.x = fma(_338, cbSceneParam._m0[29u].z, fma(_335, cbSceneParam._m0[29u].y, _332 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_6.y = fma(_338, cbSceneParam._m0[30u].z, fma(_335, cbSceneParam._m0[30u].y, cbSceneParam._m0[30u].x * _332)) + cbSceneParam._m0[30u].w;
    TEXCOORD_6.z = fma(_338, cbSceneParam._m0[31u].z, fma(_335, cbSceneParam._m0[31u].y, cbSceneParam._m0[31u].x * _332)) + cbSceneParam._m0[31u].w;
    TEXCOORD_6.w = fma(_338, cbSceneParam._m0[32u].z, fma(_335, cbSceneParam._m0[32u].y, cbSceneParam._m0[32u].x * _332)) + cbSceneParam._m0[32u].w;
    TEXCOORD_7.x = _385;
    TEXCOORD_7.y = _388;
    TEXCOORD_7.z = _391;
    gl_ClipDistance[0u] = dot(vec4(_443, _450, _457, _464), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_443, _450, _457, _464), vec4(cbInstanceData._m0[_205 + 3u]));
}


