#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec3 TEXCOORD_2;
layout(location = 3, component = 3) out float TEXCOORD_8;

uint _445;

void main()
{
    uint _71 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_8 = 0.0;
    float _152 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _154 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _155 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _165 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _166 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _167 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _173 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _71;
    uvec4 _175 = texelFetch(g_InstanceIndexBuffer, int(_173));
    uint _176 = _175.x;
    uint _186 = (floatBitsToUint(cbInstanceData._m0[(_176 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _193 = _186 + 1u;
    uint _200 = _186 + 2u;
    precise float _207 = POSITION.x * cbObjMatrix._m0[_186].x;
    precise float _208 = POSITION.y * cbObjMatrix._m0[_186].y;
    precise float _209 = _208 + _207;
    precise float _210 = POSITION.z * cbObjMatrix._m0[_186].z;
    precise float _211 = _210 + _209;
    precise float _212 = 1.0 * cbObjMatrix._m0[_186].w;
    precise float _214 = _212 + _211;
    precise float _215 = POSITION.x * cbObjMatrix._m0[_193].x;
    precise float _216 = POSITION.y * cbObjMatrix._m0[_193].y;
    precise float _217 = _216 + _215;
    precise float _218 = POSITION.z * cbObjMatrix._m0[_193].z;
    precise float _219 = _218 + _217;
    precise float _220 = 1.0 * cbObjMatrix._m0[_193].w;
    precise float _221 = _220 + _219;
    precise float _222 = POSITION.x * cbObjMatrix._m0[_200].x;
    precise float _223 = POSITION.y * cbObjMatrix._m0[_200].y;
    precise float _224 = _223 + _222;
    precise float _225 = POSITION.z * cbObjMatrix._m0[_200].z;
    precise float _226 = _225 + _224;
    precise float _227 = 1.0 * cbObjMatrix._m0[_200].w;
    precise float _228 = _227 + _226;
    uvec4 _234 = floatBitsToUint(cbInstanceData._m0[(_71 * 13u) + 7u]);
    uint _236 = _234.w;
    uint _238 = min(_234.y, 8u);
    float _242;
    float _244;
    if (_238 == 0u)
    {
        _242 = 0.0;
        _244 = 0.0;
    }
    else
    {
        uint _376 = _234.z;
        precise float _243;
        precise float _245;
        float _518;
        float _520;
        float _377 = 0.0;
        float _378 = 0.0;
        uint _379 = _376;
        uint _381 = 0u;
        float _417;
        float _436;
        vec4 _450;
        float _451;
        float _452;
        float _466;
        float _467;
        float _468;
        float _485;
        float _486;
        float _487;
        float _488;
        bool _489;
        bool _490;
        bool _491;
        precise float _492;
        precise float _493;
        precise float _494;
        float _495;
        float _496;
        float _497;
        precise float _498;
        bool _501;
        for (;;)
        {
            uint _383 = _379 & 255u;
            uint _385 = _383 * 24u;
            uvec3 _395 = uvec3(texelFetch(g_forceParam, int(_385)).x, texelFetch(g_forceParam, int(_385 + 1u)).x, texelFetch(g_forceParam, int(_385 + 2u)).x);
            uint _400 = (_383 * 24u) + 4u;
            vec4 _413 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_400)).x, texelFetch(g_forceParam, int(_400 + 1u)).x, texelFetch(g_forceParam, int(_400 + 2u)).x, texelFetch(g_forceParam, int(_400 + 3u)).x));
            _417 = _413.w;
            uint _419 = (_383 * 24u) + 8u;
            vec4 _432 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_419)).x, texelFetch(g_forceParam, int(_419 + 1u)).x, texelFetch(g_forceParam, int(_419 + 2u)).x, texelFetch(g_forceParam, int(_419 + 3u)).x));
            _436 = _432.w;
            uint _439 = (_383 * 24u) + 12u;
            _450 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_439)).x, texelFetch(g_forceParam, int(_439 + 1u)).x, _445, texelFetch(g_forceParam, int(_439 + 3u)).x));
            _451 = _450.x;
            _452 = _450.w;
            uint _455 = (_383 * 24u) + 16u;
            vec3 _465 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_455)).x, texelFetch(g_forceParam, int(_455 + 1u)).x, texelFetch(g_forceParam, int(_455 + 2u)).x));
            _466 = _465.x;
            _467 = _465.y;
            _468 = _465.z;
            uint _471 = (_383 * 24u) + 20u;
            vec4 _484 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_471)).x, texelFetch(g_forceParam, int(_471 + 1u)).x, texelFetch(g_forceParam, int(_471 + 2u)).x, texelFetch(g_forceParam, int(_471 + 3u)).x));
            _485 = _484.x;
            _486 = _484.y;
            _487 = _484.z;
            _488 = _484.w;
            _489 = _395.x == 1u;
            _490 = _395.y == 1u;
            _491 = _395.z == 1u;
            _492 = _214 - _413.x;
            _493 = _221 - _413.y;
            _494 = _228 - _413.z;
            _495 = _489 ? _432.x : _492;
            _496 = _489 ? _432.y : _493;
            _497 = _489 ? _432.z : _494;
            _498 = dot(vec3(_495, _496, _497), vec3(_495, _496, _497));
            _501 = _498 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            if (_501)
            {
                precise float _503 = _492 * _492;
                precise float _504 = _493 * _493;
                precise float _505 = _503 + _504;
                precise float _506 = _494 * _494;
                precise float _507 = _506 + _505;
                float _508 = sqrt(_507);
                float _509 = inversesqrt(_498);
                precise float _510 = _495 * _509;
                precise float _511 = _496 * _509;
                precise float _512 = _497 * _509;
                precise float _515 = _508 / (isnan(0.001000000047497451305389404296875) ? _450.y : (isnan(_450.y) ? 0.001000000047497451305389404296875 : max(_450.y, 0.001000000047497451305389404296875)));
                precise float _516 = 1.0 - _515;
                float _668 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
                float _517 = isnan(1.0) ? _668 : (isnan(_668) ? 1.0 : min(_668, 1.0));
                float _541;
                if (_491)
                {
                    float _528 = inversesqrt(dot(vec3(_492, _493, _494), vec3(_492, _493, _494)));
                    precise float _529 = _492 * _528;
                    precise float _530 = _493 * _528;
                    precise float _531 = _494 * _528;
                    precise float _535 = dot(vec3(_510, _511, _512), vec3(_529, _530, _531)) * 0.800000011920928955078125;
                    precise float _537 = _535 + 0.20000000298023223876953125;
                    float _679 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
                    precise float _540 = _517 * (isnan(1.0) ? _679 : (isnan(_679) ? 1.0 : min(_679, 1.0)));
                    _541 = _540;
                }
                else
                {
                    _541 = _517;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                if (_541 > 0.0)
                {
                    bool _544 = _489 && (!_491);
                    precise float _546 = _508 * (-4.0);
                    precise float _550 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _451 : (isnan(_451) ? 0.001000000047497451305389404296875 : max(_451, 0.001000000047497451305389404296875)));
                    precise float _552 = dot(vec2(_510, _512), vec2(_492, _494));
                    precise float _555 = _550 * _552;
                    precise float _556 = float(_544) * _555;
                    precise float _557 = cbPerFrame._m0[22u].x * _550;
                    precise float _558 = _557 - _556;
                    precise float _559 = (_544 ? 0.0 : _546) + _558;
                    precise float _561 = _436 * sin(_559);
                    precise float _562 = _511 * 0.0;
                    precise float _563 = _562 - _512;
                    precise float _564 = _510 - _562;
                    precise float _565 = _452 * _561;
                    float _566 = _489 ? _565 : 0.0;
                    float _609;
                    if (_490)
                    {
                        precise float _569 = _466 * 2.0;
                        precise float _571 = _486 + _487;
                        precise float _572 = _488 + _571;
                        precise float _574 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _466 : (isnan(_466) ? 0.001000000047497451305389404296875 : max(_466, 0.001000000047497451305389404296875)));
                        precise float _575 = _485 * _574;
                        precise float _576 = (-0.0) - _510;
                        precise float _581 = dot(vec2(_512, _576), vec2(_492, _494)) / _569;
                        precise float _582 = (-0.0) - _581;
                        float _585 = fract(abs(_581));
                        precise float _586 = (-0.0) - _585;
                        precise float _588 = _569 * ((_581 >= _582) ? _585 : _586);
                        precise float _589 = _588 * 6.283184051513671875;
                        precise float _590 = _589 / _569;
                        precise float _592 = (isnan(5.0) ? _466 : (isnan(_466) ? 5.0 : min(_466, 5.0))) * sin(_590);
                        precise float _593 = _552 + _592;
                        precise float _594 = _466 * 0.25;
                        precise float _596 = cbPerFrame._m0[22u].x * _485;
                        precise float _597 = _596 - _594;
                        precise float _598 = _597 - _593;
                        precise float _599 = _485 * _572;
                        precise float _601 = _598 / (isnan(0.001000000047497451305389404296875) ? _599 : (isnan(_599) ? 0.001000000047497451305389404296875 : max(_599, 0.001000000047497451305389404296875)));
                        float _602 = fract(_601);
                        precise float _604 = 1.0 - _602;
                        float _605 = (_601 < 0.0) ? _604 : _602;
                        precise float _606 = _571 / _572;
                        precise float _607 = _486 / _572;
                        float _624;
                        if (_605 < _607)
                        {
                            precise float _622 = _605 / _607;
                            _624 = _622;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_605 < _606)
                            {
                                precise float _634 = _605 - _607;
                                precise float _635 = _606 - _607;
                                precise float _636 = _634 / _635;
                                precise float _625 = 1.0 - _636;
                                frontier_phi_14_13_ladder = _625;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _624 = frontier_phi_14_13_ladder;
                        }
                        precise float _626 = _468 * _624;
                        precise float _627 = _574 * _552;
                        precise float _628 = cbPerFrame._m0[22u].x * _575;
                        precise float _629 = _628 - _627;
                        precise float _631 = _467 + sin(_629);
                        precise float _633 = _626 * abs(_631);
                        precise float _610 = _633 + 0.0;
                        _609 = _610;
                    }
                    else
                    {
                        _609 = 0.0;
                    }
                    precise float _611 = _417 + _561;
                    precise float _612 = _611 + _609;
                    precise float _613 = _510 * _612;
                    precise float _614 = _512 * _612;
                    precise float _615 = _563 * _566;
                    precise float _616 = _564 * _566;
                    precise float _617 = _615 + _613;
                    precise float _618 = _616 + _614;
                    precise float _619 = _541 * _617;
                    precise float _620 = _541 * _618;
                    precise float _519 = _619 * 0.0500000007450580596923828125;
                    precise float _521 = _620 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _519;
                    frontier_phi_5_pred_7_ladder_1 = _521;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
            }
            _518 = frontier_phi_5_pred;
            _520 = frontier_phi_5_pred_1;
            _243 = _377 + _518;
            _245 = _378 + _520;
            uint _382 = _381 + 1u;
            if (_382 == _238)
            {
                break;
            }
            else
            {
                _377 = _243;
                _378 = _245;
                _379 = (_381 != 3u) ? (_379 >> 8u) : _236;
                _381 = _382;
                continue;
            }
        }
        _242 = _243;
        _244 = _245;
    }
    precise float _246 = TEXCOORD_1.y * _242;
    precise float _247 = TEXCOORD_1.y * _244;
    precise float _252 = dot(vec2(_246, _247), vec2(_246, _247)) + 1.0;
    float _253 = sqrt(_252);
    precise float _254 = _246 / _253;
    precise float _255 = _247 / _253;
    precise float _259 = 1.0 - dot(vec2(_254, _255), vec2(_254, _255));
    float _710 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    precise float _262 = sqrt(isnan(1.0) ? _710 : (isnan(_710) ? 1.0 : min(_710, 1.0))) + (-1.0);
    precise float _264 = TEXCOORD_1.y * _254;
    precise float _265 = TEXCOORD_1.y * _262;
    precise float _266 = TEXCOORD_1.y * _255;
    precise float _267 = _214 + _264;
    precise float _268 = _221 + _265;
    precise float _269 = _228 + _266;
    float _275 = cbSceneParam._m0[3u].x - _267;
    float _276 = cbSceneParam._m0[3u].y - _268;
    float _277 = cbSceneParam._m0[3u].z - _269;
    precise float _303 = _267 - cbSceneParam._m0[3u].x;
    precise float _304 = _268 - cbSceneParam._m0[3u].y;
    precise float _305 = _269 - cbSceneParam._m0[3u].z;
    precise float _333 = _303 * cbSceneParam._m0[24u].x;
    precise float _334 = _304 * cbSceneParam._m0[24u].y;
    precise float _335 = _334 + _333;
    precise float _336 = _305 * cbSceneParam._m0[24u].z;
    precise float _337 = _336 + _335;
    precise float _338 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _339 = _338 + _337;
    precise float _340 = _303 * cbSceneParam._m0[25u].x;
    precise float _341 = _304 * cbSceneParam._m0[25u].y;
    precise float _342 = _341 + _340;
    precise float _343 = _305 * cbSceneParam._m0[25u].z;
    precise float _344 = _343 + _342;
    precise float _345 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _346 = _345 + _344;
    precise float _347 = _303 * cbSceneParam._m0[26u].x;
    precise float _348 = _304 * cbSceneParam._m0[26u].y;
    precise float _349 = _348 + _347;
    precise float _350 = _305 * cbSceneParam._m0[26u].z;
    precise float _351 = _350 + _349;
    precise float _352 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _353 = _352 + _351;
    precise float _354 = _303 * cbSceneParam._m0[27u].x;
    precise float _355 = _304 * cbSceneParam._m0[27u].y;
    precise float _356 = _355 + _354;
    precise float _357 = _305 * cbSceneParam._m0[27u].z;
    precise float _358 = _357 + _356;
    precise float _359 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _360 = _359 + _358;
    gl_Position.x = _339;
    gl_Position.y = _346;
    gl_Position.z = _353;
    gl_Position.w = _360;
    NORMAL_1.x = fma(_155, cbObjMatrix._m0[_186].z, fma(_154, cbObjMatrix._m0[_186].y, cbObjMatrix._m0[_186].x * _152));
    NORMAL_1.y = fma(_155, cbObjMatrix._m0[_193].z, fma(_154, cbObjMatrix._m0[_193].y, cbObjMatrix._m0[_193].x * _152));
    NORMAL_1.z = fma(_155, cbObjMatrix._m0[_200].z, fma(_154, cbObjMatrix._m0[_200].y, cbObjMatrix._m0[_200].x * _152));
    NORMAL_1.w = float(_176);
    TANGENT_1.x = fma(_167, cbObjMatrix._m0[_186].z, fma(_166, cbObjMatrix._m0[_186].y, cbObjMatrix._m0[_186].x * _165));
    TANGENT_1.y = fma(_167, cbObjMatrix._m0[_193].z, fma(_166, cbObjMatrix._m0[_193].y, cbObjMatrix._m0[_193].x * _165));
    TANGENT_1.z = fma(_167, cbObjMatrix._m0[_200].z, fma(_166, cbObjMatrix._m0[_200].y, cbObjMatrix._m0[_200].x * _165));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = COLOR_1.x;
    TEXCOORD_8 = sqrt(((_277 * _277) + (_275 * _275)) + (_276 * _276));
}


