#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_Grass_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _744;
float _2933;
float _2934;
float _2935;
float _2936;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _191 = texture(sampler2D(M_A_Grass_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _191.x;
    float _195 = _191.y;
    float _196 = _191.z;
    float _197 = _191.w;
    float _201 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _202 = _201 * _175;
    float _203 = _201 * _176;
    float _204 = _201 * _177;
    float _2945 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2956 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _2967 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _224 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _267 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _277 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _267);
    float _278 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _267);
    float _279 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _267);
    float _283 = inversesqrt(dot(vec3(_277, _278, _279), vec3(_277, _278, _279)));
    float _284 = _277 * _283;
    float _285 = _278 * _283;
    float _286 = _279 * _283;
    vec4 _291 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _293 = _291.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _423 = sqrt(((_277 * _277) + (_278 * _278)) + (_279 * _279));
        float _429 = (cbMatDynParam._m0[5u].x * _423) + cbMatDynParam._m0[5u].y;
        float _2978 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
        float _430 = isnan(1.0) ? _2978 : (isnan(_2978) ? 1.0 : min(_2978, 1.0));
        float _434 = (cbMatDynParam._m0[5u].z * _423) + cbMatDynParam._m0[5u].w;
        float _2989 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2989 : (isnan(_2989) ? 1.0 : min(_2989, 1.0))) - _430)) + _430) < ((_293 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _305 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _306 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _326 = fma(_204, cbSceneParam._m0[5u].z, fma(_203, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _202));
    float _329 = fma(_204, cbSceneParam._m0[6u].z, fma(_203, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _202));
    float _332 = fma(_204, cbSceneParam._m0[7u].z, fma(_203, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _202));
    uint _345 = uint(roundEven(NORMAL.w)) * 13u;
    uint _347 = _345 + 9u;
    uint _348 = _347 + uint(cbMatDynParam._m0[0u].w);
    float _354 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2945 : (isnan(_2945) ? 1.0 : min(_2945, 1.0)))) * cbInstanceData._m0[_348].x;
    float _355 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2956 : (isnan(_2956) ? 1.0 : min(_2956, 1.0)))) * cbInstanceData._m0[_348].y;
    float _356 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2967 : (isnan(_2967) ? 1.0 : min(_2967, 1.0)))) * cbInstanceData._m0[_348].z;
    float _3000 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _357 = isnan(1.0) ? _3000 : (isnan(_3000) ? 1.0 : min(_3000, 1.0));
    float _3011 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _358 = isnan(1.0) ? _3011 : (isnan(_3011) ? 1.0 : min(_3011, 1.0));
    float _3022 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _359 = isnan(1.0) ? _3022 : (isnan(_3022) ? 1.0 : min(_3022, 1.0));
    vec4 _368 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _305, cbSceneParam._m0[86u].y * _306));
    float _371 = _368.x * TEXCOORD.z;
    float _372 = dot(vec3(_202, _203, _204), vec3(_284, _285, _286));
    float _375 = _372 * 2.0;
    float _380 = (_375 * _202) - _284;
    float _381 = (_375 * _203) - _285;
    float _382 = (_375 * _204) - _286;
    float _404 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _408 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _412 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _743;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _468 = fma(_412, cbModelParam._m0[26u].z, fma(_408, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _404));
        float _472 = fma(_412, cbModelParam._m0[27u].z, fma(_408, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _404));
        float _476 = fma(_412, cbModelParam._m0[28u].z, fma(_408, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _404));
        float _501 = _404 + _202;
        float _502 = _408 + _203;
        float _503 = _412 + _204;
        float _513 = fma(_503, cbModelParam._m0[26u].z, fma(_502, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _501)) - _468;
        float _514 = fma(_503, cbModelParam._m0[27u].z, fma(_502, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _501)) - _472;
        float _515 = fma(_503, cbModelParam._m0[28u].z, fma(_502, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _501)) - _476;
        float _519 = inversesqrt(dot(vec3(_513, _514, _515), vec3(_513, _514, _515)));
        float _532 = ((_519 * _513) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_468 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _533 = ((_519 * _514) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_472 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _534 = ((_519 * _515) / cbModelParam._m0[34u].z) + ((((((_476 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _537 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_532, _533, _534), 0.0);
        vec4 _544 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_532, _533, _534), 0.0);
        vec4 _551 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_532, _533, _534), 0.0);
        vec4 _558 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_532, _533, _534), 0.0);
        float _571 = exp2((_537.w + (-0.5)) * 20.0) * 2.0;
        float _572 = _571 * (_537.x + (-0.5));
        float _573 = _571 * (_537.y + (-0.5));
        float _574 = _571 * (_537.z + (-0.5));
        float _581 = exp2((_544.w + (-0.5)) * 20.0) * 2.0;
        float _582 = _581 * (_544.x + (-0.5));
        float _583 = _581 * (_544.y + (-0.5));
        float _584 = _581 * (_544.z + (-0.5));
        float _591 = exp2((_551.w + (-0.5)) * 20.0) * 2.0;
        float _592 = _591 * (_551.x + (-0.5));
        float _593 = _591 * (_551.y + (-0.5));
        float _594 = _591 * (_551.z + (-0.5));
        float _601 = exp2((_558.w + (-0.5)) * 20.0) * 2.0;
        float _602 = _601 * (_558.x + (-0.5));
        float _603 = _601 * (_558.y + (-0.5));
        float _604 = _601 * (_558.z + (-0.5));
        float _605 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
        float _606 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _607 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        float _608 = _572 * 0.5;
        float _609 = _582 * 0.5;
        float _610 = _592 * 0.5;
        float _611 = dot(vec3(_608, _609, _610), vec3(_608, _609, _610));
        float _616 = (_611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_611);
        float _625 = (dot(vec3(_202, _203, _204), vec3(_616 * _608, _616 * _609, _616 * _610)) + 1.0) * 0.5;
        float _3048 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _635 = sqrt(((_609 * _609) + (_608 * _608)) + (_610 * _610)) / (_605 + 9.9999997473787516355514526367188e-06);
        float _3059 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _636 = isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0));
        float _637 = _636 * 2.0;
        float _641 = (1.0 - _636) / (_636 + 1.0);
        float _3070 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0));
        float _651 = ((((1.0 - _642) * (_637 + 2.0)) * exp2(log2(isnan(1.0) ? _3048 : (isnan(_3048) ? 1.0 : min(_3048, 1.0))) * (_637 + 1.0))) + _642) * _605;
        float _652 = _573 * 0.5;
        float _653 = _583 * 0.5;
        float _654 = _593 * 0.5;
        float _655 = dot(vec3(_652, _653, _654), vec3(_652, _653, _654));
        float _660 = (_655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_655);
        float _668 = (dot(vec3(_202, _203, _204), vec3(_660 * _652, _660 * _653, _660 * _654)) + 1.0) * 0.5;
        float _3081 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _677 = sqrt(((_653 * _653) + (_652 * _652)) + (_654 * _654)) / (_606 + 9.9999997473787516355514526367188e-06);
        float _3092 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0));
        float _679 = _678 * 2.0;
        float _683 = (1.0 - _678) / (_678 + 1.0);
        float _3103 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0));
        float _693 = ((((1.0 - _684) * (_679 + 2.0)) * exp2(log2(isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0))) * (_679 + 1.0))) + _684) * _606;
        float _694 = _574 * 0.5;
        float _695 = _584 * 0.5;
        float _696 = _594 * 0.5;
        float _697 = dot(vec3(_694, _695, _696), vec3(_694, _695, _696));
        float _702 = (_697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_697);
        float _710 = (dot(vec3(_202, _203, _204), vec3(_702 * _694, _702 * _695, _702 * _696)) + 1.0) * 0.5;
        float _3114 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _719 = sqrt(((_695 * _695) + (_694 * _694)) + (_696 * _696)) / (_607 + 9.9999997473787516355514526367188e-06);
        float _3125 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0));
        float _721 = _720 * 2.0;
        float _725 = (1.0 - _720) / (_720 + 1.0);
        float _3136 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0));
        float _735 = ((((1.0 - _726) * (_721 + 2.0)) * exp2(log2(isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0))) * (_721 + 1.0))) + _726) * _607;
        _743 = _574;
        _745 = _573;
        _746 = _572;
        _747 = _584;
        _748 = _583;
        _749 = _582;
        _750 = _594;
        _751 = _593;
        _752 = _592;
        _753 = _607;
        _754 = _606;
        _755 = _605;
        _756 = cbModelParam._m0[36u].z * (isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0)));
        _757 = cbModelParam._m0[36u].z * (isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0)));
        _758 = cbModelParam._m0[36u].z * (isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0)));
    }
    else
    {
        _743 = _744;
        _745 = _744;
        _746 = _744;
        _747 = _744;
        _748 = _744;
        _749 = _744;
        _750 = _744;
        _751 = _744;
        _752 = _744;
        _753 = _744;
        _754 = _744;
        _755 = _744;
        _756 = 0.0;
        _757 = 0.0;
        _758 = 0.0;
    }
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _787 = fma(_412, cbModelParam._m0[30u].z, fma(_408, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _404));
        float _791 = fma(_412, cbModelParam._m0[31u].z, fma(_408, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _404));
        float _795 = fma(_412, cbModelParam._m0[32u].z, fma(_408, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _404));
        float _818 = _404 + _202;
        float _819 = _408 + _203;
        float _820 = _412 + _204;
        float _830 = fma(_820, cbModelParam._m0[30u].z, fma(_819, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818)) - _787;
        float _831 = fma(_820, cbModelParam._m0[31u].z, fma(_819, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818)) - _791;
        float _832 = fma(_820, cbModelParam._m0[32u].z, fma(_819, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818)) - _795;
        float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
        float _849 = ((_836 * _830) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_787 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_836 * _831) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_791 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_836 * _832) / cbModelParam._m0[35u].z) + ((((((_795 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        float _886 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_853.x + (-0.5));
        float _888 = _886 * (_853.y + (-0.5));
        float _889 = _886 * (_853.z + (-0.5));
        float _896 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_860.x + (-0.5));
        float _898 = _896 * (_860.y + (-0.5));
        float _899 = _896 * (_860.z + (-0.5));
        float _906 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_867.x + (-0.5));
        float _908 = _906 * (_867.y + (-0.5));
        float _909 = _906 * (_867.z + (-0.5));
        float _916 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_874.x + (-0.5));
        float _918 = _916 * (_874.y + (-0.5));
        float _919 = _916 * (_874.z + (-0.5));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = _887 * 0.5;
        float _924 = _897 * 0.5;
        float _925 = _907 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _939 = (dot(vec3(_202, _203, _204), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3177 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _948 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3188 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3199 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0))) * (_950 + 1.0))) + _955) * _920;
        float _965 = _888 * 0.5;
        float _966 = _898 * 0.5;
        float _967 = _908 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _981 = (dot(vec3(_202, _203, _204), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3210 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _990 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3221 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3232 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0))) * (_992 + 1.0))) + _997) * _921;
        float _1007 = _889 * 0.5;
        float _1008 = _899 * 0.5;
        float _1009 = _909 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_202, _203, _204), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3243 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3254 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3265 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))) * (_1034 + 1.0))) + _1039) * _922;
        _1056 = _889;
        _1057 = _888;
        _1058 = _887;
        _1059 = _899;
        _1060 = _898;
        _1061 = _897;
        _1062 = _909;
        _1063 = _908;
        _1064 = _907;
        _1065 = _922;
        _1066 = _921;
        _1067 = _920;
        _1068 = cbModelParam._m0[36u].w * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
        _1069 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
        _1070 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
    }
    else
    {
        _1056 = _744;
        _1057 = _744;
        _1058 = _744;
        _1059 = _744;
        _1060 = _744;
        _1061 = _744;
        _1062 = _744;
        _1063 = _744;
        _1064 = _744;
        _1065 = _744;
        _1066 = _744;
        _1067 = _744;
        _1068 = 0.0;
        _1069 = 0.0;
        _1070 = 0.0;
    }
    float _1080 = (cbModelParam._m0[1u].x * (_1068 - _756)) + _756;
    float _1081 = (cbModelParam._m0[1u].x * (_1069 - _757)) + _757;
    float _1082 = (cbModelParam._m0[1u].x * (_1070 - _758)) + _758;
    float _1103 = fma(_1082, cbSceneParam._m0[89u].z, fma(_1081, cbSceneParam._m0[89u].y, _1080 * cbSceneParam._m0[89u].x));
    float _1106 = fma(_1082, cbSceneParam._m0[90u].z, fma(_1081, cbSceneParam._m0[90u].y, _1080 * cbSceneParam._m0[90u].x));
    float _1109 = fma(_1082, cbSceneParam._m0[91u].z, fma(_1081, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1080));
    float _1124 = _380 * 0.5;
    float _1125 = _381 * 0.5;
    float _1126 = _382 * 0.5;
    float _1127 = dot(vec4(_1124, _1125, _1126, 1.0), vec4(_1058, _1061, _1064, _1067));
    float _1130 = dot(vec4(_1124, _1125, _1126, 1.0), vec4(_1057, _1060, _1063, _1066));
    float _1133 = dot(vec4(_1124, _1125, _1126, 1.0), vec4(_1056, _1059, _1062, _1065));
    float _1167;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1140 = dot(vec4(_1124, _1125, _1126, 1.0), vec4(_743, _747, _750, _753));
        float _1144 = dot(vec4(_1124, _1125, _1126, 1.0), vec4(_745, _748, _751, _754));
        float _1148 = dot(vec4(_1124, _1125, _1126, 1.0), vec4(_746, _749, _752, _755));
        float _1155 = dot(vec4(cbModelParam._m0[39u]), vec4(_1124, _1125, _1126, 1.0));
        _1167 = dot(vec3(isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)), isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)), isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1155) ? 0.0 : (isnan(0.0) ? _1155 : max(0.0, _1155))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1167 = 1.0;
    }
    float _1178;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1169 = dot(vec4(cbModelParam._m0[40u]), vec4(_1124, _1125, _1126, 1.0));
        _1178 = dot(vec3(isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)), isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)), isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1169) ? 0.0 : (isnan(0.0) ? _1169 : max(0.0, _1169))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1178 = 1.0;
    }
    float _1182 = (_1178 * cbModelParam._m0[1u].x) + (_1167 * (1.0 - cbModelParam._m0[1u].x));
    float _1191 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1273;
    float _1275;
    float _1277;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1240 = fma(_412, cbModelParam._m0[13u].z, fma(_408, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _404)) + cbModelParam._m0[13u].w;
        float _1244 = fma(_412, cbModelParam._m0[14u].z, fma(_408, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _404)) + cbModelParam._m0[14u].w;
        float _1248 = fma(_412, cbModelParam._m0[15u].z, fma(_408, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _404)) + cbModelParam._m0[15u].w;
        float _1251 = fma(_382, cbModelParam._m0[13u].z, fma(_381, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _380));
        float _1254 = fma(_382, cbModelParam._m0[14u].z, fma(_381, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _380));
        float _1257 = fma(_382, cbModelParam._m0[15u].z, fma(_381, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _380));
        float _1283;
        if (_1251 > 0.0)
        {
            _1283 = abs((1.0 - _1240) / _1251);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1251 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1240 + 1.0) / _1251);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1283 = frontier_phi_19_17_ladder;
        }
        float _1512;
        if (_1254 > 0.0)
        {
            _1512 = abs((1.0 - _1244) / _1254);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1254 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1244 + 1.0) / _1254);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1512 = frontier_phi_28_24_ladder;
        }
        float _1704;
        if (_1257 > 0.0)
        {
            _1704 = abs((1.0 - _1248) / _1257);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1257 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1248 + 1.0) / _1257);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1704 = frontier_phi_40_35_ladder;
        }
        float _1706 = isnan(_1512) ? _1283 : (isnan(_1283) ? _1512 : min(_1283, _1512));
        float _1707 = isnan(_1704) ? _1706 : (isnan(_1706) ? _1704 : min(_1706, _1704));
        float _1711 = (_1707 * _1251) + _1240;
        float _1712 = (_1707 * _1254) + _1244;
        float _1713 = (_1707 * _1257) + _1248;
        float _1714 = _1707 * 9.9999997473787516355514526367188e-05;
        float _1716 = (-1.0) - _1714;
        float _1718 = _1714 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1713 > _1718) || ((_1713 < _1716) || ((_1712 > _1718) || ((_1712 < _1716) || ((_1711 < _1716) || (_1711 > _1718))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1810 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1713, cbModelParam._m0[9u].z, fma(_1712, cbModelParam._m0[9u].y, _1711 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1713, cbModelParam._m0[10u].z, fma(_1712, cbModelParam._m0[10u].y, _1711 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1713, cbModelParam._m0[11u].z, fma(_1712, cbModelParam._m0[11u].y, _1711 * cbModelParam._m0[11u].x))), _1191);
            frontier_phi_18_40_ladder = _1810.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1810.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1810.x * cbModelParam._m0[1u].y;
        }
        _1273 = frontier_phi_18_40_ladder_2;
        _1275 = frontier_phi_18_40_ladder_1;
        _1277 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1261 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_380, _381, _382), _1191);
        _1273 = _1261.x * cbModelParam._m0[1u].y;
        _1275 = _1261.y * cbModelParam._m0[1u].y;
        _1277 = _1261.z * cbModelParam._m0[1u].y;
    }
    float _1280 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1373;
    float _1375;
    float _1377;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1337 = fma(_412, cbModelParam._m0[21u].z, fma(_408, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _404)) + cbModelParam._m0[21u].w;
        float _1341 = fma(_412, cbModelParam._m0[22u].z, fma(_408, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _404)) + cbModelParam._m0[22u].w;
        float _1345 = fma(_412, cbModelParam._m0[23u].z, fma(_408, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _404)) + cbModelParam._m0[23u].w;
        float _1348 = fma(_382, cbModelParam._m0[21u].z, fma(_381, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _380));
        float _1351 = fma(_382, cbModelParam._m0[22u].z, fma(_381, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _380));
        float _1354 = fma(_382, cbModelParam._m0[23u].z, fma(_381, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _380));
        float _1517;
        if (_1348 > 0.0)
        {
            _1517 = abs((1.0 - _1337) / _1348);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1348 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1337 + 1.0) / _1348);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1517 = frontier_phi_30_26_ladder;
        }
        float _1731;
        if (_1351 > 0.0)
        {
            _1731 = abs((1.0 - _1341) / _1351);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1341 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1731 = frontier_phi_42_37_ladder;
        }
        float _1882;
        if (_1354 > 0.0)
        {
            _1882 = abs((1.0 - _1345) / _1354);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1345 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1882 = frontier_phi_51_48_ladder;
        }
        float _1884 = isnan(_1731) ? _1517 : (isnan(_1517) ? _1731 : min(_1517, _1731));
        float _1885 = isnan(_1882) ? _1884 : (isnan(_1884) ? _1882 : min(_1884, _1882));
        float _1889 = (_1885 * _1348) + _1337;
        float _1890 = (_1885 * _1351) + _1341;
        float _1891 = (_1885 * _1354) + _1345;
        float _1892 = _1885 * 9.9999997473787516355514526367188e-05;
        float _1893 = (-1.0) - _1892;
        float _1895 = _1892 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1891 > _1895) || ((_1891 < _1893) || ((_1890 > _1895) || ((_1890 < _1893) || ((_1889 < _1893) || (_1889 > _1895))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2089 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1891, cbModelParam._m0[17u].z, fma(_1890, cbModelParam._m0[17u].y, _1889 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1891, cbModelParam._m0[18u].z, fma(_1890, cbModelParam._m0[18u].y, _1889 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1891, cbModelParam._m0[19u].z, fma(_1890, cbModelParam._m0[19u].y, _1889 * cbModelParam._m0[19u].x))), _1280);
            frontier_phi_27_51_ladder = _2089.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2089.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2089.x * cbModelParam._m0[1u].z;
        }
        _1373 = frontier_phi_27_51_ladder_2;
        _1375 = frontier_phi_27_51_ladder_1;
        _1377 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1357 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_380, _381, _382), _1280);
        _1373 = _1357.x * cbModelParam._m0[1u].z;
        _1375 = _1357.y * cbModelParam._m0[1u].z;
        _1377 = _1357.z * cbModelParam._m0[1u].z;
    }
    float _1389 = _371 * 0.01200000010430812835693359375;
    float _1391 = _1389 * ((cbModelParam._m0[1u].w * (_1373 - _1273)) + _1273);
    float _1392 = _1389 * ((cbModelParam._m0[1u].w * (_1375 - _1275)) + _1275);
    float _1393 = _1389 * ((cbModelParam._m0[1u].w * (_1377 - _1277)) + _1277);
    float _1396 = fma(_1393, cbSceneParam._m0[89u].z, fma(_1392, cbSceneParam._m0[89u].y, _1391 * cbSceneParam._m0[89u].x));
    float _1399 = fma(_1393, cbSceneParam._m0[90u].z, fma(_1392, cbSceneParam._m0[90u].y, _1391 * cbSceneParam._m0[90u].x));
    float _1402 = fma(_1393, cbSceneParam._m0[91u].z, fma(_1392, cbSceneParam._m0[91u].y, _1391 * cbSceneParam._m0[91u].x));
    vec4 _1410 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_305, _306));
    float _1412 = _1410.w;
    float _1424 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1412);
    float _1425 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1412);
    float _1426 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1412);
    uvec4 _1430 = floatBitsToUint(cbInstanceData._m0[_345 + 5u]);
    uint _1432 = _1430.x * 14u;
    uint _1433 = _1432 + 13u;
    float _1440 = _371 + (-1.0);
    float _1446 = (cbLight._m0[_1433].x * _1440) + 1.0;
    float _1447 = (cbLight._m0[_1433].y * _1440) + 1.0;
    float _1448 = (cbLight._m0[_1433].z * _1440) + 1.0;
    float _1449 = (cbLight._m0[_1433].w * _1440) + 1.0;
    uint _1450 = _1432 + 5u;
    float _1456 = isnan(1.0) ? _1447 : (isnan(_1447) ? 1.0 : min(_1447, 1.0));
    uint _1460 = _1432 + 4u;
    float _1470 = isnan(1.0) ? _1446 : (isnan(_1446) ? 1.0 : min(_1446, 1.0));
    uint _1474 = _1432 | 1u;
    float _1485 = dot(vec3(cbLight._m0[_1432].xyz), vec3(_202, _203, _204));
    float _1488 = dot(vec3(cbLight._m0[_1474].xyz), vec3(_202, _203, _204));
    float _3401 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
    float _3412 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
    float _1493 = (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * 0.3183098733425140380859375;
    float _1495 = (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) * 0.3183098733425140380859375;
    float _1502 = ((cbLight._m0[_1450].x * _1456) * _1495) + (((cbLight._m0[_1460].x * _1424) * _1470) * _1493);
    float _1503 = ((_1456 * cbLight._m0[_1450].y) * _1495) + (((cbLight._m0[_1460].y * _1425) * _1470) * _1493);
    float _1504 = ((_1456 * cbLight._m0[_1450].z) * _1495) + (((cbLight._m0[_1460].z * _1426) * _1470) * _1493);
    uvec4 _1509 = floatBitsToUint(cbLight._m0[_1432 + 12u]);
    bool _1511 = _1509.x == 0u;
    float _1522;
    float _1524;
    float _1526;
    if (_1511)
    {
        _1522 = _1502;
        _1524 = _1503;
        _1526 = _1504;
    }
    else
    {
        uint _1530 = _1432 + 6u;
        float _1546 = (dot(vec3(cbLight._m0[_1432 + 2u].xyz), vec3(_202, _203, _204)) * 0.5) + 0.5;
        float _1547 = _1546 * _1546;
        float _3423 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _1549 = isnan(1.0) ? _1448 : (isnan(_1448) ? 1.0 : min(_1448, 1.0));
        _1522 = (((cbLight._m0[_1530].x * 0.3183098733425140380859375) * _1548) * _1549) + _1502;
        _1524 = (((cbLight._m0[_1530].y * 0.3183098733425140380859375) * _1548) * _1549) + _1503;
        _1526 = (((cbLight._m0[_1530].z * 0.3183098733425140380859375) * _1548) * _1549) + _1504;
    }
    bool _1529 = _1509.y == 0u;
    float _1567;
    float _1569;
    float _1571;
    if (_1529)
    {
        _1567 = _1522;
        _1569 = _1524;
        _1571 = _1526;
    }
    else
    {
        uint _1675 = _1432 + 7u;
        float _1691 = (dot(vec3(cbLight._m0[_1432 + 3u].xyz), vec3(_202, _203, _204)) * 0.5) + 0.5;
        float _1692 = _1691 * _1691;
        float _3439 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _1694 = isnan(1.0) ? _1449 : (isnan(_1449) ? 1.0 : min(_1449, 1.0));
        _1567 = (((cbLight._m0[_1675].x * 0.3183098733425140380859375) * _1693) * _1694) + _1522;
        _1569 = (((cbLight._m0[_1675].y * 0.3183098733425140380859375) * _1693) * _1694) + _1524;
        _1571 = (((cbLight._m0[_1675].z * 0.3183098733425140380859375) * _1693) * _1694) + _1526;
    }
    uint _1573 = _1432 + 8u;
    float _1579 = cbLight._m0[_1432].x + _284;
    float _1580 = cbLight._m0[_1432].y + _285;
    float _1581 = cbLight._m0[_1432].z + _286;
    float _1585 = inversesqrt(dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581)));
    float _1589 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1432].xyz));
    float _3455 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1592 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _3466 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _1593 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _1594 = dot(vec3(cbLight._m0[_1432].xyz), vec3(_1579 * _1585, _1580 * _1585, _1581 * _1585));
    float _3477 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _1605 = (exp2(log2(1.0 - (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1611 = (0.5 / ((_1592 + 9.9999999392252902907785028219223e-09) + _1593)) * _1592;
    float _3488 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1613 = (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * 0.31831014156341552734375;
    uint _1627 = _1432 + 9u;
    float _1633 = cbLight._m0[_1474].x + _284;
    float _1634 = cbLight._m0[_1474].y + _285;
    float _1635 = cbLight._m0[_1474].z + _286;
    float _1639 = inversesqrt(dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635)));
    float _1643 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1474].xyz));
    float _3499 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1646 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _1647 = dot(vec3(cbLight._m0[_1474].xyz), vec3(_1633 * _1639, _1634 * _1639, _1635 * _1639));
    float _3510 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _1656 = (exp2(log2(1.0 - (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1660 = (0.5 / ((_1646 + 9.9999999392252902907785028219223e-09) + _1593)) * _1646;
    float _3521 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1662 = (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * 0.31831014156341552734375;
    float _1672 = (((_1656 * cbLight._m0[_1627].x) * _1662) * _1456) + ((((cbLight._m0[_1573].x * _1424) * _1605) * _1613) * _1470);
    float _1673 = (((_1656 * cbLight._m0[_1627].y) * _1662) * _1456) + ((((cbLight._m0[_1573].y * _1425) * _1605) * _1613) * _1470);
    float _1674 = (((_1656 * cbLight._m0[_1627].z) * _1662) * _1456) + ((((cbLight._m0[_1573].z * _1426) * _1605) * _1613) * _1470);
    float _1736;
    float _1738;
    float _1740;
    if (_1511)
    {
        _1736 = _1672;
        _1738 = _1673;
        _1740 = _1674;
    }
    else
    {
        uint _1742 = _1432 + 10u;
        uint _1748 = _1432 + 2u;
        float _1754 = cbLight._m0[_1748].x + _284;
        float _1755 = cbLight._m0[_1748].y + _285;
        float _1756 = cbLight._m0[_1748].z + _286;
        float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
        float _1764 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1748].xyz));
        float _3532 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1767 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1768 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_1754 * _1760, _1755 * _1760, _1756 * _1760));
        float _3543 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = (exp2(log2(1.0 - (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1781 = (0.5 / ((_1767 + 9.9999999392252902907785028219223e-09) + _1593)) * _1767;
        float _3554 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1783 = (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * 0.31831014156341552734375;
        float _1784 = isnan(1.0) ? _1448 : (isnan(_1448) ? 1.0 : min(_1448, 1.0));
        _1736 = (((_1777 * cbLight._m0[_1742].x) * _1783) * _1784) + _1672;
        _1738 = (((_1777 * cbLight._m0[_1742].y) * _1783) * _1784) + _1673;
        _1740 = (((_1777 * cbLight._m0[_1742].z) * _1783) * _1784) + _1674;
    }
    float _1819;
    float _1821;
    float _1823;
    if (_1529)
    {
        _1819 = _1736;
        _1821 = _1738;
        _1823 = _1740;
    }
    else
    {
        uint _1830 = _1432 + 11u;
        uint _1836 = _1432 + 3u;
        float _1842 = cbLight._m0[_1836].x + _284;
        float _1843 = cbLight._m0[_1836].y + _285;
        float _1844 = cbLight._m0[_1836].z + _286;
        float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
        float _1852 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1836].xyz));
        float _3570 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1855 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1856 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_1842 * _1848, _1843 * _1848, _1844 * _1848));
        float _3581 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1865 = (exp2(log2(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1869 = (0.5 / ((_1855 + 9.9999999392252902907785028219223e-09) + _1593)) * _1855;
        float _3592 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1871 = (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * 0.31831014156341552734375;
        float _1872 = isnan(1.0) ? _1449 : (isnan(_1449) ? 1.0 : min(_1449, 1.0));
        _1819 = (((_1865 * cbLight._m0[_1830].x) * _1871) * _1872) + _1736;
        _1821 = (((_1865 * cbLight._m0[_1830].y) * _1871) * _1872) + _1738;
        _1823 = (((_1865 * cbLight._m0[_1830].z) * _1871) * _1872) + _1740;
    }
    float _2006;
    float _2008;
    float _2010;
    float _2012;
    float _2014;
    float _2016;
    if (_1430.y == 0u)
    {
        float _1947 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1948 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1947;
        float _1949 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1947;
        float _1950 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1947;
        uvec4 _1962 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1963 = _1962.x;
        uint _1974 = uint((float(_1962.y) * floor(float(uint(cbSceneParam._m0[85u].y * _306) / _1963))) + floor(float(uint(cbSceneParam._m0[85u].x * _305) / _1963)));
        float _1984 = (log2(_1950 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1985 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        uint _1988 = uint(isnan(14.0) ? _1985 : (isnan(_1985) ? 14.0 : min(_1985, 14.0)));
        uvec4 _1993 = texelFetch(g_lightClusterGridBuffer, int(((_1988 << 2u) + (_1974 << 6u)) >> 2u));
        uint _1994 = _1993.x;
        uint _1995 = _1962.z;
        float _2094;
        float _2096;
        float _2098;
        float _2100;
        float _2102;
        float _2104;
        if (((((1u << ((_1995 >> 4u) & 15u)) + 4294967295u) & _1994) == 0u) || ((_1995 & 240u) == 0u))
        {
            _2094 = 0.0;
            _2096 = 0.0;
            _2098 = 0.0;
            _2100 = 0.0;
            _2102 = 0.0;
            _2104 = 0.0;
        }
        else
        {
            float _2095;
            float _2097;
            float _2099;
            float _2101;
            float _2103;
            float _2105;
            float _2245 = 0.0;
            float _2246 = 0.0;
            float _2247 = 0.0;
            float _2248 = 0.0;
            float _2249 = 0.0;
            float _2250 = 0.0;
            uint _2251 = 0u;
            uint _2260;
            bool _2261;
            for (;;)
            {
                _2260 = texelFetch(g_lightClassification, int((((_1988 << 5u) + (_1974 << 9u)) + (_2251 << 2u)) >> 2u)).x;
                _2261 = _2260 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2261)
                {
                    frontier_phi_68_pred = _2247;
                    frontier_phi_68_pred_1 = _2250;
                    frontier_phi_68_pred_2 = _2249;
                    frontier_phi_68_pred_3 = _2248;
                    frontier_phi_68_pred_4 = _2246;
                    frontier_phi_68_pred_5 = _2245;
                }
                else
                {
                    float _2390;
                    float _2391;
                    float _2392;
                    float _2393;
                    float _2394;
                    float _2395;
                    uint _2396;
                    _2390 = _2245;
                    _2391 = _2246;
                    _2392 = _2247;
                    _2393 = _2248;
                    _2394 = _2249;
                    _2395 = _2250;
                    _2396 = _2260;
                    float _2317;
                    float _2318;
                    float _2319;
                    float _2320;
                    float _2321;
                    float _2322;
                    for (;;)
                    {
                        uint _2400 = uint(findLSB(_2396)) + (_2251 << 5u);
                        uint _2397 = (_2396 + 4294967295u) & _2396;
                        uint _2402 = _2400 * 48u;
                        vec4 _2416 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2402)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 3u)).x));
                        uint _2422 = (_2400 * 48u) + 4u;
                        vec4 _2435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2422)).x, texelFetch(g_PointLightRenderingBuffer, int(_2422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2422 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2422 + 3u)).x));
                        uint _2441 = (_2400 * 48u) + 8u;
                        vec3 _2452 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2441)).x, texelFetch(g_PointLightRenderingBuffer, int(_2441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2441 + 2u)).x));
                        float _2456 = _2416.x - _1948;
                        float _2457 = _2416.y - _1949;
                        float _2458 = _2416.z - _1950;
                        float _2459 = dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458));
                        float _2462 = inversesqrt(_2459);
                        float _2471 = 1.0 - (_2459 * _2416.w);
                        float _3618 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
                        float _2472 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
                        float _2473 = sqrt(_2459) * _2435.w;
                        float _2476 = 1.39999997615814208984375 / (_2473 + 1.39999997615814208984375);
                        float _2477 = _2476 * _2476;
                        float _2480 = ((1.0 - _2477) * dot(vec3(_326, _329, _332), vec3(_2462 * _2456, _2462 * _2457, _2462 * _2458))) + _2477;
                        float _2483 = _2473 * _2473;
                        float _2487 = ((isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0))) * _2472) / ((_2483 * 0.699999988079071044921875) + 1.0);
                        float _2491 = (-0.0) - _1948;
                        float _2492 = (-0.0) - _1949;
                        float _2493 = (-0.0) - _1950;
                        float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
                        float _2501 = dot(vec3(_326, _329, _332), vec3(_2497 * _2491, _2497 * _2492, _2497 * _2493));
                        float _3634 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
                        float _3645 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
                        float _2505 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
                        float _2509 = (0.5 / (((isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) + 9.9999999392252902907785028219223e-09) + _2505)) * _2505;
                        float _3656 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
                        float _2518 = (((isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * 3.1415927410125732421875) / ((_2483 * 2.1991131305694580078125) + 3.141590118408203125)) * _2472;
                        _2320 = (_2487 * _2435.x) + _2393;
                        _2321 = (_2487 * _2435.y) + _2394;
                        _2322 = (_2487 * _2435.z) + _2395;
                        _2317 = (_2518 * _2452.x) + _2390;
                        _2318 = (_2518 * _2452.y) + _2391;
                        _2319 = (_2518 * _2452.z) + _2392;
                        if (_2397 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2390 = _2317;
                            _2391 = _2318;
                            _2392 = _2319;
                            _2393 = _2320;
                            _2394 = _2321;
                            _2395 = _2322;
                            _2396 = _2397;
                        }
                    }
                    frontier_phi_68_pred = _2319;
                    frontier_phi_68_pred_1 = _2322;
                    frontier_phi_68_pred_2 = _2321;
                    frontier_phi_68_pred_3 = _2320;
                    frontier_phi_68_pred_4 = _2318;
                    frontier_phi_68_pred_5 = _2317;
                }
                _2099 = frontier_phi_68_pred;
                _2105 = frontier_phi_68_pred_1;
                _2103 = frontier_phi_68_pred_2;
                _2101 = frontier_phi_68_pred_3;
                _2097 = frontier_phi_68_pred_4;
                _2095 = frontier_phi_68_pred_5;
                uint _2252 = _2251 + 1u;
                if (_2252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2245 = _2095;
                    _2246 = _2097;
                    _2247 = _2099;
                    _2248 = _2101;
                    _2249 = _2103;
                    _2250 = _2105;
                    _2251 = _2252;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2094 = _2095;
            _2096 = _2097;
            _2098 = _2099;
            _2100 = _2101;
            _2102 = _2103;
            _2104 = _2105;
        }
        uvec4 _2108 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2109 = _2108.z;
        uint _2111 = (_2109 >> 8u) & 15u;
        float _2216;
        float _2218;
        float _2220;
        float _2222;
        float _2224;
        float _2226;
        if (((4294967295u << _2111) & _1994) == 0u)
        {
            _2216 = _2094;
            _2218 = _2096;
            _2220 = _2098;
            _2222 = _2100;
            _2224 = _2102;
            _2226 = _2104;
        }
        else
        {
            float _2241 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2111 < ((_2109 >> 12u) & 15u))
            {
                float _2217;
                float _2219;
                float _2221;
                float _2223;
                float _2225;
                float _2227;
                float _2373 = _2094;
                float _2374 = _2096;
                float _2375 = _2098;
                float _2376 = _2100;
                float _2377 = _2102;
                float _2378 = _2104;
                uint _2379 = _2111;
                uint _2388;
                bool _2389;
                for (;;)
                {
                    _2388 = texelFetch(g_lightClassification, int((((_1988 << 5u) + (_1974 << 9u)) + (_2379 << 2u)) >> 2u)).x;
                    _2389 = _2388 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2389)
                    {
                        frontier_phi_79_pred = _2378;
                        frontier_phi_79_pred_1 = _2377;
                        frontier_phi_79_pred_2 = _2376;
                        frontier_phi_79_pred_3 = _2375;
                        frontier_phi_79_pred_4 = _2374;
                        frontier_phi_79_pred_5 = _2373;
                    }
                    else
                    {
                        float _2532;
                        float _2533;
                        float _2534;
                        float _2535;
                        float _2536;
                        float _2537;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2545 = _2373;
                        float _2546 = _2374;
                        float _2547 = _2375;
                        float _2548 = _2376;
                        float _2549 = _2377;
                        float _2550 = _2378;
                        uint _2551 = _2388;
                        uint _2552;
                        vec4 _2577;
                        float _2578;
                        vec4 _2593;
                        vec3 _2605;
                        vec4 _2621;
                        vec4 _2637;
                        float _2684;
                        bool _2685;
                        for (;;)
                        {
                            uint _2562 = ((_2379 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2551));
                            _2552 = (_2551 + 4294967295u) & _2551;
                            uint _2564 = _2562 * 40u;
                            _2577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2564 + 3u)).x));
                            _2578 = _2577.w;
                            uint _2580 = (_2562 * 40u) + 4u;
                            _2593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 3u)).x));
                            uint _2595 = (_2562 * 40u) + 8u;
                            _2605 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 2u)).x));
                            uint _2608 = (_2562 * 40u) + 16u;
                            _2621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 3u)).x));
                            uint _2624 = (_2562 * 40u) + 20u;
                            _2637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 3u)).x));
                            uint _2640 = (_2562 * 40u) + 24u;
                            vec4 _2653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 3u)).x));
                            uint _2659 = (_2562 * 40u) + 28u;
                            vec4 _2672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 3u)).x));
                            _2684 = fma(_1950, _2672.z, fma(_1949, _2672.y, _2672.x * _1948)) + _2672.w;
                            _2685 = !((fma(_1950, _2653.z, fma(_1949, _2653.y, _2653.x * _1948)) + _2653.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2685)
                            {
                                float _2712 = _2577.x - _1948;
                                float _2713 = _2577.y - _1949;
                                float _2714 = _2577.z - _1950;
                                float _2715 = dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714));
                                float _2718 = inversesqrt(_2715);
                                float _2719 = _2718 * _2712;
                                float _2720 = _2718 * _2713;
                                float _2721 = _2718 * _2714;
                                float _2725 = 1.0 - (_2715 / (_2578 * _2578));
                                float _3667 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                                float _2726 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
                                float _2730 = sqrt(_2715) * _2593.w;
                                float _2732 = 1.39999997615814208984375 / (_2730 + 1.39999997615814208984375);
                                float _2733 = _2732 * _2732;
                                float _2734 = 1.0 - _2733;
                                float _2736 = (_2734 * dot(vec3(_2719, _2720, _2721), vec3(_326, _329, _332))) + _2733;
                                float _2739 = _2730 * _2730;
                                float _2743 = (fma(_1950, _2621.z, fma(_1949, _2621.y, _2621.x * _1948)) + _2621.w) / _2684;
                                float _2744 = (fma(_1950, _2637.z, fma(_1949, _2637.y, _2637.x * _1948)) + _2637.w) / _2684;
                                float _2748 = 1.0 - dot(vec2(_2743, _2744), vec2(_2743, _2744));
                                float _3683 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                                float _2749 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
                                float _2750 = _2749 * (((isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0))) * _2726) / ((_2739 * 0.699999988079071044921875) + 1.0));
                                float _2760 = dot(vec3(_326, _329, _332), vec3((-0.0) - (_1948 * _2241), (-0.0) - (_1949 * _2241), (-0.0) - (_1950 * _2241)));
                                float _3694 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                                float _2768 = (_2734 * dot(vec3(_326, _329, _332), vec3(_2719, _2720, _2721))) + _2733;
                                float _3705 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                                float _2769 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
                                float _2773 = (0.5 / (((isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) + 9.9999999392252902907785028219223e-09) + _2769)) * _2769;
                                float _3716 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                                float _2780 = (_2749 * _2726) * (((isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * 3.1415927410125732421875) / ((_2739 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2750 * _2593.z;
                                frontier_phi_85_pred_1 = _2750 * _2593.y;
                                frontier_phi_85_pred_2 = _2750 * _2593.x;
                                frontier_phi_85_pred_3 = _2780 * _2605.z;
                                frontier_phi_85_pred_4 = _2780 * _2605.y;
                                frontier_phi_85_pred_5 = _2780 * _2605.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2789 = frontier_phi_85_pred;
                            _2788 = frontier_phi_85_pred_1;
                            _2787 = frontier_phi_85_pred_2;
                            _2786 = frontier_phi_85_pred_3;
                            _2785 = frontier_phi_85_pred_4;
                            _2784 = frontier_phi_85_pred_5;
                            _2535 = _2787 + _2548;
                            _2536 = _2788 + _2549;
                            _2537 = _2789 + _2550;
                            _2532 = _2784 + _2545;
                            _2533 = _2785 + _2546;
                            _2534 = _2786 + _2547;
                            if (_2552 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2545 = _2532;
                                _2546 = _2533;
                                _2547 = _2534;
                                _2548 = _2535;
                                _2549 = _2536;
                                _2550 = _2537;
                                _2551 = _2552;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2537;
                        frontier_phi_79_pred_1 = _2536;
                        frontier_phi_79_pred_2 = _2535;
                        frontier_phi_79_pred_3 = _2534;
                        frontier_phi_79_pred_4 = _2533;
                        frontier_phi_79_pred_5 = _2532;
                    }
                    _2227 = frontier_phi_79_pred;
                    _2225 = frontier_phi_79_pred_1;
                    _2223 = frontier_phi_79_pred_2;
                    _2221 = frontier_phi_79_pred_3;
                    _2219 = frontier_phi_79_pred_4;
                    _2217 = frontier_phi_79_pred_5;
                    uint _2380 = _2379 + 1u;
                    if (_2380 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2373 = _2217;
                        _2374 = _2219;
                        _2375 = _2221;
                        _2376 = _2223;
                        _2377 = _2225;
                        _2378 = _2227;
                        _2379 = _2380;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2223;
                frontier_phi_60_61_ladder_1 = _2227;
                frontier_phi_60_61_ladder_2 = _2225;
                frontier_phi_60_61_ladder_3 = _2221;
                frontier_phi_60_61_ladder_4 = _2219;
                frontier_phi_60_61_ladder_5 = _2217;
            }
            else
            {
                frontier_phi_60_61_ladder = _2100;
                frontier_phi_60_61_ladder_1 = _2104;
                frontier_phi_60_61_ladder_2 = _2102;
                frontier_phi_60_61_ladder_3 = _2098;
                frontier_phi_60_61_ladder_4 = _2096;
                frontier_phi_60_61_ladder_5 = _2094;
            }
            _2216 = frontier_phi_60_61_ladder_5;
            _2218 = frontier_phi_60_61_ladder_4;
            _2220 = frontier_phi_60_61_ladder_3;
            _2222 = frontier_phi_60_61_ladder;
            _2224 = frontier_phi_60_61_ladder_2;
            _2226 = frontier_phi_60_61_ladder_1;
        }
        float _2231 = isnan(1.0) ? _371 : (isnan(_371) ? 1.0 : min(_371, 1.0));
        _2006 = (_2231 * _2222) + _1567;
        _2008 = (_2231 * _2224) + _1569;
        _2010 = (_2231 * _2226) + _1571;
        _2012 = ((_2216 * 0.039999999105930328369140625) * _2231) + _1819;
        _2014 = ((_2218 * 0.039999999105930328369140625) * _2231) + _1821;
        _2016 = ((_2220 * 0.039999999105930328369140625) * _2231) + _1823;
    }
    else
    {
        _2006 = _1567;
        _2008 = _1569;
        _2010 = _1571;
        _2012 = _1819;
        _2014 = _1821;
        _2016 = _1823;
    }
    float _3732 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _3743 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _3754 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _2033 = ((isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_2006 + ((isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0))) * _371))) + ((_2012 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _1182)) * cbPerFrame._m0[3u].x);
    float _2034 = ((isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_2008 + ((isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0))) * _371))) + ((_2014 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _1182)) * cbPerFrame._m0[3u].x);
    float _2035 = ((isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_2010 + ((isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0))) * _371))) + ((_2016 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _1182)) * cbPerFrame._m0[3u].x);
    uint _2036 = _345 + 6u;
    float _2044 = _305 / cbSceneParam._m0[86u].x;
    float _2045 = _306 / cbSceneParam._m0[86u].y;
    vec4 _2059 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2044, _2045, (log2((isnan(cbSceneParam._m0[77u].w) ? _224 : (isnan(_224) ? cbSceneParam._m0[77u].w : min(_224, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2061 = _2059.x;
    float _2062 = _2059.y;
    float _2063 = _2059.z;
    float _2064 = _2059.w;
    float _2156;
    float _2158;
    float _2160;
    float _2162;
    if (_224 > cbSceneParam._m0[78u].w)
    {
        float _2119 = isnan(_224) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _224 : min(cbSceneParam._m0[80u].w, _224));
        float _2120 = _2119 / _224;
        float _2131 = _2120 * _277;
        float _2132 = _278 * _2120;
        float _2133 = (-0.0) - _2132;
        float _2134 = _2120 * _279;
        float _2136 = (cbSceneParam._m0[77u].w * _2133) / _2119;
        float _2137 = _2136 + cbSceneParam._m0[79u].w;
        float _2138 = cbSceneParam._m0[79u].w - _2132;
        float _2144 = sqrt(((_2131 * _2131) + (_2132 * _2132)) + (_2134 * _2134));
        float _2147 = (1.0 - (cbSceneParam._m0[77u].w / _2119)) * _2144;
        float _2152 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2154 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2330;
        if (abs((_2133 - _2136) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2330 = ((((_2137 > 0.0) ? exp2(_2152 * _2137) : (2.0 - exp2(_2154 * _2137))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2147;
        }
        else
        {
            float _2274 = 1.0 / cbSceneParam._m0[80u].x;
            float _2275 = isnan(_2138) ? _2137 : (isnan(_2137) ? _2138 : max(_2137, _2138));
            float _2276 = isnan(_2138) ? _2137 : (isnan(_2137) ? _2138 : min(_2137, _2138));
            float _2285 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : min(_2275, 0.0));
            float _2286 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : min(_2276, 0.0));
            _2330 = ((abs(_2144 / _2133) * cbSceneParam._m0[80u].y) * ((((_2285 - _2286) * 2.0) - ((exp2(_2152 * (isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0)))) - exp2(_2152 * (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))))) * _2274)) - ((exp2(_2154 * _2285) - exp2(_2154 * _2286)) * _2274))) + (_2147 * cbSceneParam._m0[80u].z);
        }
        vec4 _2332 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2044, _2045, 1.0), 0.0);
        float _2341 = exp2((_2330 * (-1.44269502162933349609375)) * (1.0 - _2332.w));
        float _2342 = log2(_2341);
        float _2358 = log2(_2064);
        _2156 = (exp2(_2358 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2342 * cbSceneParam._m0[78u].x)) * _2332.x) / cbSceneParam._m0[78u].x)) + _2061;
        _2158 = (exp2(_2358 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2342 * cbSceneParam._m0[78u].y)) * _2332.y) / cbSceneParam._m0[78u].y)) + _2062;
        _2160 = (exp2(_2358 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2342 * cbSceneParam._m0[78u].z)) * _2332.z) / cbSceneParam._m0[78u].z)) + _2063;
        _2162 = _2341 * _2064;
    }
    else
    {
        _2156 = _2061;
        _2158 = _2062;
        _2160 = _2063;
        _2162 = _2064;
    }
    bool _2368;
    vec4 _2172;
    vec4 _2195;
    float _2197;
    float _2201;
    float _2202;
    float _2203;
    float _2204;
    bool _2215;
    for (;;)
    {
        _2172 = cbMatDynParam._m0[0u];
        float _2174 = roundEven(_2172.y);
        bool _2175 = _2174 == 3.0;
        float _2177 = log2(_2162);
        float _2184 = exp2(_2177 * cbSceneParam._m0[78u].x) * _2033;
        float _2185 = exp2(_2177 * cbSceneParam._m0[78u].y) * _2034;
        float _2186 = exp2(_2177 * cbSceneParam._m0[78u].z) * _2035;
        float _2193 = _293 + (-0.5);
        _2195 = cbMtdParam._m0[1u];
        _2197 = _2195.y * _2193;
        float _2200 = (_2174 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2201 = _2200 * (_2175 ? _2184 : (_2184 + (cbSceneParam._m0[72u].w * _2156)));
        _2202 = _2200 * (_2175 ? _2185 : (_2185 + (cbSceneParam._m0[72u].w * _2158)));
        _2203 = _2200 * (_2175 ? _2186 : (_2186 + (cbSceneParam._m0[72u].w * _2160)));
        _2204 = _2193 * 0.999000012874603271484375;
        _2215 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2215)
        {
            if ((cbInstanceData._m0[_345 + 7u].x + _2204) < 0.5)
            {
                _2368 = true;
                break;
            }
        }
        uint _2309 = _347 + uint(_2172.w);
        if ((cbInstanceData._m0[_2309].w < 1.0) && ((cbInstanceData._m0[_2309].w + _2204) < 0.5))
        {
            _2368 = true;
            break;
        }
        if ((_2197 + _197) < _2195.x)
        {
            _2368 = true;
            break;
        }
        _2368 = false;
        break;
    }
    float _2523;
    if (_2368)
    {
        discard_state = true;
        _2523 = 0.0;
    }
    else
    {
        _2523 = cbInstanceData._m0[_2036].w;
    }
    SV_Target.x = _2201;
    SV_Target.y = _2202;
    SV_Target.z = _2203;
    SV_Target.w = _2523;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2036].w;
    discard_exit();
}


