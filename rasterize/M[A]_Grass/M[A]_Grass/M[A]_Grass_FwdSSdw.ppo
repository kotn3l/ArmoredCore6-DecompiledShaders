#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_Grass_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _698;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    float _171;
    float _172;
    float _173;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _171 = (-0.0) - _164;
        _172 = (-0.0) - _165;
        _173 = (-0.0) - _166;
    }
    else
    {
        _171 = _164;
        _172 = _165;
        _173 = _166;
    }
    vec4 _187 = texture(sampler2D(M_A_Grass_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _190 = _187.x;
    float _191 = _187.y;
    float _192 = _187.z;
    float _196 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _197 = _196 * _171;
    float _198 = _196 * _172;
    float _199 = _196 * _173;
    float _2832 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _2843 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _2854 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _219 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _262 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _272 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _262);
    float _273 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _262);
    float _274 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _262);
    float _278 = inversesqrt(dot(vec3(_272, _273, _274), vec3(_272, _273, _274)));
    float _279 = _272 * _278;
    float _280 = _273 * _278;
    float _281 = _274 * _278;
    float _287 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _288 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _309 = fma(_199, cbSceneParam._m0[5u].z, fma(_198, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _197));
    float _312 = fma(_199, cbSceneParam._m0[6u].z, fma(_198, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _197));
    float _315 = fma(_199, cbSceneParam._m0[7u].z, fma(_198, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _197));
    uint _328 = uint(roundEven(NORMAL.w)) * 13u;
    uint _331 = (_328 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _337 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2832 : (isnan(_2832) ? 1.0 : min(_2832, 1.0)))) * cbInstanceData._m0[_331].x;
    float _338 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2843 : (isnan(_2843) ? 1.0 : min(_2843, 1.0)))) * cbInstanceData._m0[_331].y;
    float _339 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2854 : (isnan(_2854) ? 1.0 : min(_2854, 1.0)))) * cbInstanceData._m0[_331].z;
    float _2865 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _340 = isnan(1.0) ? _2865 : (isnan(_2865) ? 1.0 : min(_2865, 1.0));
    float _2876 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _341 = isnan(1.0) ? _2876 : (isnan(_2876) ? 1.0 : min(_2876, 1.0));
    float _2887 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _342 = isnan(1.0) ? _2887 : (isnan(_2887) ? 1.0 : min(_2887, 1.0));
    vec4 _351 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _287, cbSceneParam._m0[86u].y * _288));
    float _354 = _351.x * TEXCOORD.z;
    float _355 = dot(vec3(_197, _198, _199), vec3(_279, _280, _281));
    float _358 = _355 * 2.0;
    float _363 = (_358 * _197) - _279;
    float _364 = (_358 * _198) - _280;
    float _365 = (_358 * _199) - _281;
    float _387 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _391 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _395 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _697;
    float _699;
    float _700;
    float _701;
    float _702;
    float _703;
    float _704;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    float _710;
    float _711;
    float _712;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _422 = fma(_395, cbModelParam._m0[26u].z, fma(_391, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _387));
        float _426 = fma(_395, cbModelParam._m0[27u].z, fma(_391, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _387));
        float _430 = fma(_395, cbModelParam._m0[28u].z, fma(_391, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _387));
        float _455 = _387 + _197;
        float _456 = _391 + _198;
        float _457 = _395 + _199;
        float _467 = fma(_457, cbModelParam._m0[26u].z, fma(_456, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _455)) - _422;
        float _468 = fma(_457, cbModelParam._m0[27u].z, fma(_456, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _455)) - _426;
        float _469 = fma(_457, cbModelParam._m0[28u].z, fma(_456, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _455)) - _430;
        float _473 = inversesqrt(dot(vec3(_467, _468, _469), vec3(_467, _468, _469)));
        float _486 = ((_473 * _467) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_422 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _487 = ((_473 * _468) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_426 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _488 = ((_473 * _469) / cbModelParam._m0[34u].z) + ((((((_430 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _491 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_486, _487, _488), 0.0);
        vec4 _498 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_486, _487, _488), 0.0);
        vec4 _505 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_486, _487, _488), 0.0);
        vec4 _512 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_486, _487, _488), 0.0);
        float _525 = exp2((_491.w + (-0.5)) * 20.0) * 2.0;
        float _526 = _525 * (_491.x + (-0.5));
        float _527 = _525 * (_491.y + (-0.5));
        float _528 = _525 * (_491.z + (-0.5));
        float _535 = exp2((_498.w + (-0.5)) * 20.0) * 2.0;
        float _536 = _535 * (_498.x + (-0.5));
        float _537 = _535 * (_498.y + (-0.5));
        float _538 = _535 * (_498.z + (-0.5));
        float _545 = exp2((_505.w + (-0.5)) * 20.0) * 2.0;
        float _546 = _545 * (_505.x + (-0.5));
        float _547 = _545 * (_505.y + (-0.5));
        float _548 = _545 * (_505.z + (-0.5));
        float _555 = exp2((_512.w + (-0.5)) * 20.0) * 2.0;
        float _556 = _555 * (_512.x + (-0.5));
        float _557 = _555 * (_512.y + (-0.5));
        float _558 = _555 * (_512.z + (-0.5));
        float _559 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
        float _560 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
        float _561 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        float _562 = _526 * 0.5;
        float _563 = _536 * 0.5;
        float _564 = _546 * 0.5;
        float _565 = dot(vec3(_562, _563, _564), vec3(_562, _563, _564));
        float _570 = (_565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_565);
        float _579 = (dot(vec3(_197, _198, _199), vec3(_570 * _562, _570 * _563, _570 * _564)) + 1.0) * 0.5;
        float _2913 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        float _589 = sqrt(((_563 * _563) + (_562 * _562)) + (_564 * _564)) / (_559 + 9.9999997473787516355514526367188e-06);
        float _2924 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _590 = isnan(1.0) ? _2924 : (isnan(_2924) ? 1.0 : min(_2924, 1.0));
        float _591 = _590 * 2.0;
        float _595 = (1.0 - _590) / (_590 + 1.0);
        float _2935 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _596 = isnan(1.0) ? _2935 : (isnan(_2935) ? 1.0 : min(_2935, 1.0));
        float _605 = ((((1.0 - _596) * (_591 + 2.0)) * exp2(log2(isnan(1.0) ? _2913 : (isnan(_2913) ? 1.0 : min(_2913, 1.0))) * (_591 + 1.0))) + _596) * _559;
        float _606 = _527 * 0.5;
        float _607 = _537 * 0.5;
        float _608 = _547 * 0.5;
        float _609 = dot(vec3(_606, _607, _608), vec3(_606, _607, _608));
        float _614 = (_609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_609);
        float _622 = (dot(vec3(_197, _198, _199), vec3(_614 * _606, _614 * _607, _614 * _608)) + 1.0) * 0.5;
        float _2946 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        float _631 = sqrt(((_607 * _607) + (_606 * _606)) + (_608 * _608)) / (_560 + 9.9999997473787516355514526367188e-06);
        float _2957 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _632 = isnan(1.0) ? _2957 : (isnan(_2957) ? 1.0 : min(_2957, 1.0));
        float _633 = _632 * 2.0;
        float _637 = (1.0 - _632) / (_632 + 1.0);
        float _2968 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _638 = isnan(1.0) ? _2968 : (isnan(_2968) ? 1.0 : min(_2968, 1.0));
        float _647 = ((((1.0 - _638) * (_633 + 2.0)) * exp2(log2(isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0))) * (_633 + 1.0))) + _638) * _560;
        float _648 = _528 * 0.5;
        float _649 = _538 * 0.5;
        float _650 = _548 * 0.5;
        float _651 = dot(vec3(_648, _649, _650), vec3(_648, _649, _650));
        float _656 = (_651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_651);
        float _664 = (dot(vec3(_197, _198, _199), vec3(_656 * _648, _656 * _649, _656 * _650)) + 1.0) * 0.5;
        float _2979 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _673 = sqrt(((_649 * _649) + (_648 * _648)) + (_650 * _650)) / (_561 + 9.9999997473787516355514526367188e-06);
        float _2990 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _674 = isnan(1.0) ? _2990 : (isnan(_2990) ? 1.0 : min(_2990, 1.0));
        float _675 = _674 * 2.0;
        float _679 = (1.0 - _674) / (_674 + 1.0);
        float _3001 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _3001 : (isnan(_3001) ? 1.0 : min(_3001, 1.0));
        float _689 = ((((1.0 - _680) * (_675 + 2.0)) * exp2(log2(isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0))) * (_675 + 1.0))) + _680) * _561;
        _697 = _528;
        _699 = _527;
        _700 = _526;
        _701 = _538;
        _702 = _537;
        _703 = _536;
        _704 = _548;
        _705 = _547;
        _706 = _546;
        _707 = _561;
        _708 = _560;
        _709 = _559;
        _710 = cbModelParam._m0[36u].z * (isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0)));
        _711 = cbModelParam._m0[36u].z * (isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0)));
        _712 = cbModelParam._m0[36u].z * (isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0)));
    }
    else
    {
        _697 = _698;
        _699 = _698;
        _700 = _698;
        _701 = _698;
        _702 = _698;
        _703 = _698;
        _704 = _698;
        _705 = _698;
        _706 = _698;
        _707 = _698;
        _708 = _698;
        _709 = _698;
        _710 = 0.0;
        _711 = 0.0;
        _712 = 0.0;
    }
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _738 = fma(_395, cbModelParam._m0[30u].z, fma(_391, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _387));
        float _742 = fma(_395, cbModelParam._m0[31u].z, fma(_391, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _387));
        float _746 = fma(_395, cbModelParam._m0[32u].z, fma(_391, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _387));
        float _769 = _387 + _197;
        float _770 = _391 + _198;
        float _771 = _395 + _199;
        float _781 = fma(_771, cbModelParam._m0[30u].z, fma(_770, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _769)) - _738;
        float _782 = fma(_771, cbModelParam._m0[31u].z, fma(_770, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _769)) - _742;
        float _783 = fma(_771, cbModelParam._m0[32u].z, fma(_770, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _769)) - _746;
        float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
        float _800 = ((_787 * _781) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_738 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _801 = ((_787 * _782) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_742 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _802 = ((_787 * _783) / cbModelParam._m0[35u].z) + ((((((_746 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        float _837 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_804.x + (-0.5));
        float _839 = _837 * (_804.y + (-0.5));
        float _840 = _837 * (_804.z + (-0.5));
        float _847 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_811.x + (-0.5));
        float _849 = _847 * (_811.y + (-0.5));
        float _850 = _847 * (_811.z + (-0.5));
        float _857 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_818.x + (-0.5));
        float _859 = _857 * (_818.y + (-0.5));
        float _860 = _857 * (_818.z + (-0.5));
        float _867 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_825.x + (-0.5));
        float _869 = _867 * (_825.y + (-0.5));
        float _870 = _867 * (_825.z + (-0.5));
        float _871 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _873 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _874 = _838 * 0.5;
        float _875 = _848 * 0.5;
        float _876 = _858 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(_197, _198, _199), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3042 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_871 + 9.9999997473787516355514526367188e-06);
        float _3053 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3064 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0))) * (_901 + 1.0))) + _906) * _871;
        float _916 = _839 * 0.5;
        float _917 = _849 * 0.5;
        float _918 = _859 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _932 = (dot(vec3(_197, _198, _199), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3075 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _941 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_872 + 9.9999997473787516355514526367188e-06);
        float _3086 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3097 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0))) * (_943 + 1.0))) + _948) * _872;
        float _958 = _840 * 0.5;
        float _959 = _850 * 0.5;
        float _960 = _860 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_197, _198, _199), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3108 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_873 + 9.9999997473787516355514526367188e-06);
        float _3119 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3130 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0))) * (_985 + 1.0))) + _990) * _873;
        _1007 = _840;
        _1008 = _839;
        _1009 = _838;
        _1010 = _850;
        _1011 = _849;
        _1012 = _848;
        _1013 = _860;
        _1014 = _859;
        _1015 = _858;
        _1016 = _873;
        _1017 = _872;
        _1018 = _871;
        _1019 = cbModelParam._m0[36u].w * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
        _1020 = cbModelParam._m0[36u].w * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
        _1021 = cbModelParam._m0[36u].w * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
    }
    else
    {
        _1007 = _698;
        _1008 = _698;
        _1009 = _698;
        _1010 = _698;
        _1011 = _698;
        _1012 = _698;
        _1013 = _698;
        _1014 = _698;
        _1015 = _698;
        _1016 = _698;
        _1017 = _698;
        _1018 = _698;
        _1019 = 0.0;
        _1020 = 0.0;
        _1021 = 0.0;
    }
    float _1031 = (cbModelParam._m0[1u].x * (_1019 - _710)) + _710;
    float _1032 = (cbModelParam._m0[1u].x * (_1020 - _711)) + _711;
    float _1033 = (cbModelParam._m0[1u].x * (_1021 - _712)) + _712;
    float _1054 = fma(_1033, cbSceneParam._m0[89u].z, fma(_1032, cbSceneParam._m0[89u].y, _1031 * cbSceneParam._m0[89u].x));
    float _1057 = fma(_1033, cbSceneParam._m0[90u].z, fma(_1032, cbSceneParam._m0[90u].y, _1031 * cbSceneParam._m0[90u].x));
    float _1060 = fma(_1033, cbSceneParam._m0[91u].z, fma(_1032, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1031));
    float _1075 = _363 * 0.5;
    float _1076 = _364 * 0.5;
    float _1077 = _365 * 0.5;
    float _1078 = dot(vec4(_1075, _1076, _1077, 1.0), vec4(_1009, _1012, _1015, _1018));
    float _1081 = dot(vec4(_1075, _1076, _1077, 1.0), vec4(_1008, _1011, _1014, _1017));
    float _1084 = dot(vec4(_1075, _1076, _1077, 1.0), vec4(_1007, _1010, _1013, _1016));
    float _1118;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1091 = dot(vec4(_1075, _1076, _1077, 1.0), vec4(_697, _701, _704, _707));
        float _1095 = dot(vec4(_1075, _1076, _1077, 1.0), vec4(_699, _702, _705, _708));
        float _1099 = dot(vec4(_1075, _1076, _1077, 1.0), vec4(_700, _703, _706, _709));
        float _1106 = dot(vec4(cbModelParam._m0[39u]), vec4(_1075, _1076, _1077, 1.0));
        _1118 = dot(vec3(isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)), isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)), isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1106) ? 0.0 : (isnan(0.0) ? _1106 : max(0.0, _1106))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1118 = 1.0;
    }
    float _1129;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1120 = dot(vec4(cbModelParam._m0[40u]), vec4(_1075, _1076, _1077, 1.0));
        _1129 = dot(vec3(isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)), isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)), isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1120) ? 0.0 : (isnan(0.0) ? _1120 : max(0.0, _1120))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1129 = 1.0;
    }
    float _1133 = (_1129 * cbModelParam._m0[1u].x) + (_1118 * (1.0 - cbModelParam._m0[1u].x));
    float _1142 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1224;
    float _1226;
    float _1228;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1191 = fma(_395, cbModelParam._m0[13u].z, fma(_391, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _387)) + cbModelParam._m0[13u].w;
        float _1195 = fma(_395, cbModelParam._m0[14u].z, fma(_391, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _387)) + cbModelParam._m0[14u].w;
        float _1199 = fma(_395, cbModelParam._m0[15u].z, fma(_391, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _387)) + cbModelParam._m0[15u].w;
        float _1202 = fma(_365, cbModelParam._m0[13u].z, fma(_364, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _363));
        float _1205 = fma(_365, cbModelParam._m0[14u].z, fma(_364, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _363));
        float _1208 = fma(_365, cbModelParam._m0[15u].z, fma(_364, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _363));
        float _1234;
        if (_1202 > 0.0)
        {
            _1234 = abs((1.0 - _1191) / _1202);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1202 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1191 + 1.0) / _1202);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1234 = frontier_phi_16_14_ladder;
        }
        float _1463;
        if (_1205 > 0.0)
        {
            _1463 = abs((1.0 - _1195) / _1205);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1205 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1195 + 1.0) / _1205);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1463 = frontier_phi_25_21_ladder;
        }
        float _1655;
        if (_1208 > 0.0)
        {
            _1655 = abs((1.0 - _1199) / _1208);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1208 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1199 + 1.0) / _1208);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1655 = frontier_phi_37_32_ladder;
        }
        float _1657 = isnan(_1463) ? _1234 : (isnan(_1234) ? _1463 : min(_1234, _1463));
        float _1658 = isnan(_1655) ? _1657 : (isnan(_1657) ? _1655 : min(_1657, _1655));
        float _1662 = (_1658 * _1202) + _1191;
        float _1663 = (_1658 * _1205) + _1195;
        float _1664 = (_1658 * _1208) + _1199;
        float _1665 = _1658 * 9.9999997473787516355514526367188e-05;
        float _1667 = (-1.0) - _1665;
        float _1669 = _1665 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1664 > _1669) || ((_1664 < _1667) || ((_1663 > _1669) || ((_1663 < _1667) || ((_1662 < _1667) || (_1662 > _1669))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1761 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1664, cbModelParam._m0[9u].z, fma(_1663, cbModelParam._m0[9u].y, _1662 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1664, cbModelParam._m0[10u].z, fma(_1663, cbModelParam._m0[10u].y, _1662 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1664, cbModelParam._m0[11u].z, fma(_1663, cbModelParam._m0[11u].y, _1662 * cbModelParam._m0[11u].x))), _1142);
            frontier_phi_15_37_ladder = _1761.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1761.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1761.x * cbModelParam._m0[1u].y;
        }
        _1224 = frontier_phi_15_37_ladder_2;
        _1226 = frontier_phi_15_37_ladder_1;
        _1228 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1212 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_363, _364, _365), _1142);
        _1224 = _1212.x * cbModelParam._m0[1u].y;
        _1226 = _1212.y * cbModelParam._m0[1u].y;
        _1228 = _1212.z * cbModelParam._m0[1u].y;
    }
    float _1231 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1324;
    float _1326;
    float _1328;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1288 = fma(_395, cbModelParam._m0[21u].z, fma(_391, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _387)) + cbModelParam._m0[21u].w;
        float _1292 = fma(_395, cbModelParam._m0[22u].z, fma(_391, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _387)) + cbModelParam._m0[22u].w;
        float _1296 = fma(_395, cbModelParam._m0[23u].z, fma(_391, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _387)) + cbModelParam._m0[23u].w;
        float _1299 = fma(_365, cbModelParam._m0[21u].z, fma(_364, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _363));
        float _1302 = fma(_365, cbModelParam._m0[22u].z, fma(_364, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _363));
        float _1305 = fma(_365, cbModelParam._m0[23u].z, fma(_364, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _363));
        float _1468;
        if (_1299 > 0.0)
        {
            _1468 = abs((1.0 - _1288) / _1299);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1299 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1288 + 1.0) / _1299);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1468 = frontier_phi_27_23_ladder;
        }
        float _1682;
        if (_1302 > 0.0)
        {
            _1682 = abs((1.0 - _1292) / _1302);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1302 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1292 + 1.0) / _1302);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1682 = frontier_phi_39_34_ladder;
        }
        float _1833;
        if (_1305 > 0.0)
        {
            _1833 = abs((1.0 - _1296) / _1305);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1296 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1833 = frontier_phi_48_45_ladder;
        }
        float _1835 = isnan(_1682) ? _1468 : (isnan(_1468) ? _1682 : min(_1468, _1682));
        float _1836 = isnan(_1833) ? _1835 : (isnan(_1835) ? _1833 : min(_1835, _1833));
        float _1840 = (_1836 * _1299) + _1288;
        float _1841 = (_1836 * _1302) + _1292;
        float _1842 = (_1836 * _1305) + _1296;
        float _1843 = _1836 * 9.9999997473787516355514526367188e-05;
        float _1844 = (-1.0) - _1843;
        float _1846 = _1843 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1842 > _1846) || ((_1842 < _1844) || ((_1841 > _1846) || ((_1841 < _1844) || ((_1840 < _1844) || (_1840 > _1846))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2040 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1842, cbModelParam._m0[17u].z, fma(_1841, cbModelParam._m0[17u].y, _1840 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1842, cbModelParam._m0[18u].z, fma(_1841, cbModelParam._m0[18u].y, _1840 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1842, cbModelParam._m0[19u].z, fma(_1841, cbModelParam._m0[19u].y, _1840 * cbModelParam._m0[19u].x))), _1231);
            frontier_phi_24_48_ladder = _2040.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2040.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2040.x * cbModelParam._m0[1u].z;
        }
        _1324 = frontier_phi_24_48_ladder_2;
        _1326 = frontier_phi_24_48_ladder_1;
        _1328 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1308 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_363, _364, _365), _1231);
        _1324 = _1308.x * cbModelParam._m0[1u].z;
        _1326 = _1308.y * cbModelParam._m0[1u].z;
        _1328 = _1308.z * cbModelParam._m0[1u].z;
    }
    float _1340 = _354 * 0.01200000010430812835693359375;
    float _1342 = _1340 * ((cbModelParam._m0[1u].w * (_1324 - _1224)) + _1224);
    float _1343 = _1340 * ((cbModelParam._m0[1u].w * (_1326 - _1226)) + _1226);
    float _1344 = _1340 * ((cbModelParam._m0[1u].w * (_1328 - _1228)) + _1228);
    float _1347 = fma(_1344, cbSceneParam._m0[89u].z, fma(_1343, cbSceneParam._m0[89u].y, _1342 * cbSceneParam._m0[89u].x));
    float _1350 = fma(_1344, cbSceneParam._m0[90u].z, fma(_1343, cbSceneParam._m0[90u].y, _1342 * cbSceneParam._m0[90u].x));
    float _1353 = fma(_1344, cbSceneParam._m0[91u].z, fma(_1343, cbSceneParam._m0[91u].y, _1342 * cbSceneParam._m0[91u].x));
    vec4 _1361 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_287, _288));
    float _1363 = _1361.w;
    float _1375 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1363);
    float _1376 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1363);
    float _1377 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1363);
    uvec4 _1381 = floatBitsToUint(cbInstanceData._m0[_328 + 5u]);
    uint _1383 = _1381.x * 14u;
    uint _1384 = _1383 + 13u;
    float _1391 = _354 + (-1.0);
    float _1397 = (cbLight._m0[_1384].x * _1391) + 1.0;
    float _1398 = (cbLight._m0[_1384].y * _1391) + 1.0;
    float _1399 = (cbLight._m0[_1384].z * _1391) + 1.0;
    float _1400 = (cbLight._m0[_1384].w * _1391) + 1.0;
    uint _1401 = _1383 + 5u;
    float _1407 = isnan(1.0) ? _1398 : (isnan(_1398) ? 1.0 : min(_1398, 1.0));
    uint _1411 = _1383 + 4u;
    float _1421 = isnan(1.0) ? _1397 : (isnan(_1397) ? 1.0 : min(_1397, 1.0));
    uint _1425 = _1383 | 1u;
    float _1436 = dot(vec3(cbLight._m0[_1383].xyz), vec3(_197, _198, _199));
    float _1439 = dot(vec3(cbLight._m0[_1425].xyz), vec3(_197, _198, _199));
    float _3266 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
    float _3277 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
    float _1444 = (isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0))) * 0.3183098733425140380859375;
    float _1446 = (isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0))) * 0.3183098733425140380859375;
    float _1453 = ((cbLight._m0[_1401].x * _1407) * _1446) + (((cbLight._m0[_1411].x * _1375) * _1421) * _1444);
    float _1454 = ((_1407 * cbLight._m0[_1401].y) * _1446) + (((cbLight._m0[_1411].y * _1376) * _1421) * _1444);
    float _1455 = ((_1407 * cbLight._m0[_1401].z) * _1446) + (((cbLight._m0[_1411].z * _1377) * _1421) * _1444);
    uvec4 _1460 = floatBitsToUint(cbLight._m0[_1383 + 12u]);
    bool _1462 = _1460.x == 0u;
    float _1473;
    float _1475;
    float _1477;
    if (_1462)
    {
        _1473 = _1453;
        _1475 = _1454;
        _1477 = _1455;
    }
    else
    {
        uint _1481 = _1383 + 6u;
        float _1497 = (dot(vec3(cbLight._m0[_1383 + 2u].xyz), vec3(_197, _198, _199)) * 0.5) + 0.5;
        float _1498 = _1497 * _1497;
        float _3288 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _1500 = isnan(1.0) ? _1399 : (isnan(_1399) ? 1.0 : min(_1399, 1.0));
        _1473 = (((cbLight._m0[_1481].x * 0.3183098733425140380859375) * _1499) * _1500) + _1453;
        _1475 = (((cbLight._m0[_1481].y * 0.3183098733425140380859375) * _1499) * _1500) + _1454;
        _1477 = (((cbLight._m0[_1481].z * 0.3183098733425140380859375) * _1499) * _1500) + _1455;
    }
    bool _1480 = _1460.y == 0u;
    float _1518;
    float _1520;
    float _1522;
    if (_1480)
    {
        _1518 = _1473;
        _1520 = _1475;
        _1522 = _1477;
    }
    else
    {
        uint _1626 = _1383 + 7u;
        float _1642 = (dot(vec3(cbLight._m0[_1383 + 3u].xyz), vec3(_197, _198, _199)) * 0.5) + 0.5;
        float _1643 = _1642 * _1642;
        float _3304 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _1645 = isnan(1.0) ? _1400 : (isnan(_1400) ? 1.0 : min(_1400, 1.0));
        _1518 = (((cbLight._m0[_1626].x * 0.3183098733425140380859375) * _1644) * _1645) + _1473;
        _1520 = (((cbLight._m0[_1626].y * 0.3183098733425140380859375) * _1644) * _1645) + _1475;
        _1522 = (((cbLight._m0[_1626].z * 0.3183098733425140380859375) * _1644) * _1645) + _1477;
    }
    uint _1524 = _1383 + 8u;
    float _1530 = cbLight._m0[_1383].x + _279;
    float _1531 = cbLight._m0[_1383].y + _280;
    float _1532 = cbLight._m0[_1383].z + _281;
    float _1536 = inversesqrt(dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532)));
    float _1540 = dot(vec3(_197, _198, _199), vec3(cbLight._m0[_1383].xyz));
    float _3320 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
    float _1543 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    float _3331 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _1544 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _1545 = dot(vec3(cbLight._m0[_1383].xyz), vec3(_1530 * _1536, _1531 * _1536, _1532 * _1536));
    float _3342 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
    float _1556 = (exp2(log2(1.0 - (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1562 = (0.5 / ((_1543 + 9.9999999392252902907785028219223e-09) + _1544)) * _1543;
    float _3353 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
    float _1564 = (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))) * 0.31831014156341552734375;
    uint _1578 = _1383 + 9u;
    float _1584 = cbLight._m0[_1425].x + _279;
    float _1585 = cbLight._m0[_1425].y + _280;
    float _1586 = cbLight._m0[_1425].z + _281;
    float _1590 = inversesqrt(dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586)));
    float _1594 = dot(vec3(_197, _198, _199), vec3(cbLight._m0[_1425].xyz));
    float _3364 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _1597 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _1598 = dot(vec3(cbLight._m0[_1425].xyz), vec3(_1584 * _1590, _1585 * _1590, _1586 * _1590));
    float _3375 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _1607 = (exp2(log2(1.0 - (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1611 = (0.5 / ((_1597 + 9.9999999392252902907785028219223e-09) + _1544)) * _1597;
    float _3386 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1613 = (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) * 0.31831014156341552734375;
    float _1623 = (((_1607 * cbLight._m0[_1578].x) * _1613) * _1407) + ((((cbLight._m0[_1524].x * _1375) * _1556) * _1564) * _1421);
    float _1624 = (((_1607 * cbLight._m0[_1578].y) * _1613) * _1407) + ((((cbLight._m0[_1524].y * _1376) * _1556) * _1564) * _1421);
    float _1625 = (((_1607 * cbLight._m0[_1578].z) * _1613) * _1407) + ((((cbLight._m0[_1524].z * _1377) * _1556) * _1564) * _1421);
    float _1687;
    float _1689;
    float _1691;
    if (_1462)
    {
        _1687 = _1623;
        _1689 = _1624;
        _1691 = _1625;
    }
    else
    {
        uint _1693 = _1383 + 10u;
        uint _1699 = _1383 + 2u;
        float _1705 = cbLight._m0[_1699].x + _279;
        float _1706 = cbLight._m0[_1699].y + _280;
        float _1707 = cbLight._m0[_1699].z + _281;
        float _1711 = inversesqrt(dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707)));
        float _1715 = dot(vec3(_197, _198, _199), vec3(cbLight._m0[_1699].xyz));
        float _3397 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1718 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _1719 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_1705 * _1711, _1706 * _1711, _1707 * _1711));
        float _3408 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = (exp2(log2(1.0 - (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1732 = (0.5 / ((_1718 + 9.9999999392252902907785028219223e-09) + _1544)) * _1718;
        float _3419 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1734 = (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * 0.31831014156341552734375;
        float _1735 = isnan(1.0) ? _1399 : (isnan(_1399) ? 1.0 : min(_1399, 1.0));
        _1687 = (((_1728 * cbLight._m0[_1693].x) * _1734) * _1735) + _1623;
        _1689 = (((_1728 * cbLight._m0[_1693].y) * _1734) * _1735) + _1624;
        _1691 = (((_1728 * cbLight._m0[_1693].z) * _1734) * _1735) + _1625;
    }
    float _1770;
    float _1772;
    float _1774;
    if (_1480)
    {
        _1770 = _1687;
        _1772 = _1689;
        _1774 = _1691;
    }
    else
    {
        uint _1781 = _1383 + 11u;
        uint _1787 = _1383 + 3u;
        float _1793 = cbLight._m0[_1787].x + _279;
        float _1794 = cbLight._m0[_1787].y + _280;
        float _1795 = cbLight._m0[_1787].z + _281;
        float _1799 = inversesqrt(dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795)));
        float _1803 = dot(vec3(_197, _198, _199), vec3(cbLight._m0[_1787].xyz));
        float _3435 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1806 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _1807 = dot(vec3(cbLight._m0[_1787].xyz), vec3(_1793 * _1799, _1794 * _1799, _1795 * _1799));
        float _3446 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1816 = (exp2(log2(1.0 - (isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1820 = (0.5 / ((_1806 + 9.9999999392252902907785028219223e-09) + _1544)) * _1806;
        float _3457 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1822 = (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * 0.31831014156341552734375;
        float _1823 = isnan(1.0) ? _1400 : (isnan(_1400) ? 1.0 : min(_1400, 1.0));
        _1770 = (((_1816 * cbLight._m0[_1781].x) * _1822) * _1823) + _1687;
        _1772 = (((_1816 * cbLight._m0[_1781].y) * _1822) * _1823) + _1689;
        _1774 = (((_1816 * cbLight._m0[_1781].z) * _1822) * _1823) + _1691;
    }
    float _1957;
    float _1959;
    float _1961;
    float _1963;
    float _1965;
    float _1967;
    if (_1381.y == 0u)
    {
        float _1898 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1899 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1898;
        float _1900 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1898;
        float _1901 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1898;
        uvec4 _1913 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1914 = _1913.x;
        uint _1925 = uint((float(_1913.y) * floor(float(uint(cbSceneParam._m0[85u].y * _288) / _1914))) + floor(float(uint(cbSceneParam._m0[85u].x * _287) / _1914)));
        float _1935 = (log2(_1901 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1936 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        uint _1939 = uint(isnan(14.0) ? _1936 : (isnan(_1936) ? 14.0 : min(_1936, 14.0)));
        uvec4 _1944 = texelFetch(g_lightClusterGridBuffer, int(((_1939 << 2u) + (_1925 << 6u)) >> 2u));
        uint _1945 = _1944.x;
        uint _1946 = _1913.z;
        float _2045;
        float _2047;
        float _2049;
        float _2051;
        float _2053;
        float _2055;
        if (((((1u << ((_1946 >> 4u) & 15u)) + 4294967295u) & _1945) == 0u) || ((_1946 & 240u) == 0u))
        {
            _2045 = 0.0;
            _2047 = 0.0;
            _2049 = 0.0;
            _2051 = 0.0;
            _2053 = 0.0;
            _2055 = 0.0;
        }
        else
        {
            float _2046;
            float _2048;
            float _2050;
            float _2052;
            float _2054;
            float _2056;
            float _2187 = 0.0;
            float _2188 = 0.0;
            float _2189 = 0.0;
            float _2190 = 0.0;
            float _2191 = 0.0;
            float _2192 = 0.0;
            uint _2193 = 0u;
            uint _2202;
            bool _2203;
            for (;;)
            {
                _2202 = texelFetch(g_lightClassification, int((((_1939 << 5u) + (_1925 << 9u)) + (_2193 << 2u)) >> 2u)).x;
                _2203 = _2202 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2203)
                {
                    frontier_phi_63_pred = _2192;
                    frontier_phi_63_pred_1 = _2191;
                    frontier_phi_63_pred_2 = _2190;
                    frontier_phi_63_pred_3 = _2189;
                    frontier_phi_63_pred_4 = _2188;
                    frontier_phi_63_pred_5 = _2187;
                }
                else
                {
                    float _2311;
                    float _2312;
                    float _2313;
                    float _2314;
                    float _2315;
                    float _2316;
                    uint _2317;
                    _2311 = _2187;
                    _2312 = _2188;
                    _2313 = _2189;
                    _2314 = _2190;
                    _2315 = _2191;
                    _2316 = _2192;
                    _2317 = _2202;
                    float _2243;
                    float _2244;
                    float _2245;
                    float _2246;
                    float _2247;
                    float _2248;
                    for (;;)
                    {
                        uint _2321 = uint(findLSB(_2317)) + (_2193 << 5u);
                        uint _2318 = (_2317 + 4294967295u) & _2317;
                        uint _2323 = _2321 * 48u;
                        vec4 _2337 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2323)).x, texelFetch(g_PointLightRenderingBuffer, int(_2323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2323 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2323 + 3u)).x));
                        uint _2343 = (_2321 * 48u) + 4u;
                        vec4 _2356 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2343)).x, texelFetch(g_PointLightRenderingBuffer, int(_2343 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2343 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2343 + 3u)).x));
                        uint _2362 = (_2321 * 48u) + 8u;
                        vec3 _2373 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2362)).x, texelFetch(g_PointLightRenderingBuffer, int(_2362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2362 + 2u)).x));
                        float _2377 = _2337.x - _1899;
                        float _2378 = _2337.y - _1900;
                        float _2379 = _2337.z - _1901;
                        float _2380 = dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379));
                        float _2383 = inversesqrt(_2380);
                        float _2392 = 1.0 - (_2380 * _2337.w);
                        float _3483 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
                        float _2393 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
                        float _2394 = sqrt(_2380) * _2356.w;
                        float _2397 = 1.39999997615814208984375 / (_2394 + 1.39999997615814208984375);
                        float _2398 = _2397 * _2397;
                        float _2401 = ((1.0 - _2398) * dot(vec3(_309, _312, _315), vec3(_2383 * _2377, _2383 * _2378, _2383 * _2379))) + _2398;
                        float _2404 = _2394 * _2394;
                        float _2408 = ((isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0))) * _2393) / ((_2404 * 0.699999988079071044921875) + 1.0);
                        float _2412 = (-0.0) - _1899;
                        float _2413 = (-0.0) - _1900;
                        float _2414 = (-0.0) - _1901;
                        float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
                        float _2422 = dot(vec3(_309, _312, _315), vec3(_2418 * _2412, _2418 * _2413, _2418 * _2414));
                        float _3499 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
                        float _3510 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
                        float _2426 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
                        float _2430 = (0.5 / (((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) + 9.9999999392252902907785028219223e-09) + _2426)) * _2426;
                        float _3521 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
                        float _2439 = (((isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * 3.1415927410125732421875) / ((_2404 * 2.1991131305694580078125) + 3.141590118408203125)) * _2393;
                        _2246 = (_2408 * _2356.x) + _2314;
                        _2247 = (_2408 * _2356.y) + _2315;
                        _2248 = (_2408 * _2356.z) + _2316;
                        _2243 = (_2439 * _2373.x) + _2311;
                        _2244 = (_2439 * _2373.y) + _2312;
                        _2245 = (_2439 * _2373.z) + _2313;
                        if (_2318 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2311 = _2243;
                            _2312 = _2244;
                            _2313 = _2245;
                            _2314 = _2246;
                            _2315 = _2247;
                            _2316 = _2248;
                            _2317 = _2318;
                        }
                    }
                    frontier_phi_63_pred = _2248;
                    frontier_phi_63_pred_1 = _2247;
                    frontier_phi_63_pred_2 = _2246;
                    frontier_phi_63_pred_3 = _2245;
                    frontier_phi_63_pred_4 = _2244;
                    frontier_phi_63_pred_5 = _2243;
                }
                _2056 = frontier_phi_63_pred;
                _2054 = frontier_phi_63_pred_1;
                _2052 = frontier_phi_63_pred_2;
                _2050 = frontier_phi_63_pred_3;
                _2048 = frontier_phi_63_pred_4;
                _2046 = frontier_phi_63_pred_5;
                uint _2194 = _2193 + 1u;
                if (_2194 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2187 = _2046;
                    _2188 = _2048;
                    _2189 = _2050;
                    _2190 = _2052;
                    _2191 = _2054;
                    _2192 = _2056;
                    _2193 = _2194;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2045 = _2046;
            _2047 = _2048;
            _2049 = _2050;
            _2051 = _2052;
            _2053 = _2054;
            _2055 = _2056;
        }
        uvec4 _2059 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2060 = _2059.z;
        uint _2062 = (_2060 >> 8u) & 15u;
        float _2158;
        float _2160;
        float _2162;
        float _2164;
        float _2166;
        float _2168;
        if (((4294967295u << _2062) & _1945) == 0u)
        {
            _2158 = _2045;
            _2160 = _2047;
            _2162 = _2049;
            _2164 = _2051;
            _2166 = _2053;
            _2168 = _2055;
        }
        else
        {
            float _2183 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2062 < ((_2060 >> 12u) & 15u))
            {
                float _2159;
                float _2161;
                float _2163;
                float _2165;
                float _2167;
                float _2169;
                float _2294 = _2045;
                float _2295 = _2047;
                float _2296 = _2049;
                float _2297 = _2051;
                float _2298 = _2053;
                float _2299 = _2055;
                uint _2300 = _2062;
                uint _2309;
                bool _2310;
                for (;;)
                {
                    _2309 = texelFetch(g_lightClassification, int((((_1939 << 5u) + (_1925 << 9u)) + (_2300 << 2u)) >> 2u)).x;
                    _2310 = _2309 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2310)
                    {
                        frontier_phi_69_pred = _2299;
                        frontier_phi_69_pred_1 = _2298;
                        frontier_phi_69_pred_2 = _2297;
                        frontier_phi_69_pred_3 = _2296;
                        frontier_phi_69_pred_4 = _2295;
                        frontier_phi_69_pred_5 = _2294;
                    }
                    else
                    {
                        float _2444;
                        float _2445;
                        float _2446;
                        float _2447;
                        float _2448;
                        float _2449;
                        float _2696;
                        float _2697;
                        float _2698;
                        float _2699;
                        float _2700;
                        float _2701;
                        float _2457 = _2294;
                        float _2458 = _2295;
                        float _2459 = _2296;
                        float _2460 = _2297;
                        float _2461 = _2298;
                        float _2462 = _2299;
                        uint _2463 = _2309;
                        uint _2464;
                        vec4 _2489;
                        float _2490;
                        vec4 _2505;
                        vec3 _2517;
                        vec4 _2533;
                        vec4 _2549;
                        float _2596;
                        bool _2597;
                        for (;;)
                        {
                            uint _2474 = ((_2300 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2463));
                            _2464 = (_2463 + 4294967295u) & _2463;
                            uint _2476 = _2474 * 40u;
                            _2489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2476 + 3u)).x));
                            _2490 = _2489.w;
                            uint _2492 = (_2474 * 40u) + 4u;
                            _2505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2492 + 3u)).x));
                            uint _2507 = (_2474 * 40u) + 8u;
                            _2517 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2507 + 2u)).x));
                            uint _2520 = (_2474 * 40u) + 16u;
                            _2533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 3u)).x));
                            uint _2536 = (_2474 * 40u) + 20u;
                            _2549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 3u)).x));
                            uint _2552 = (_2474 * 40u) + 24u;
                            vec4 _2565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 3u)).x));
                            uint _2571 = (_2474 * 40u) + 28u;
                            vec4 _2584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 3u)).x));
                            _2596 = fma(_1901, _2584.z, fma(_1900, _2584.y, _2584.x * _1899)) + _2584.w;
                            _2597 = !((fma(_1901, _2565.z, fma(_1900, _2565.y, _2565.x * _1899)) + _2565.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2597)
                            {
                                float _2624 = _2489.x - _1899;
                                float _2625 = _2489.y - _1900;
                                float _2626 = _2489.z - _1901;
                                float _2627 = dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626));
                                float _2630 = inversesqrt(_2627);
                                float _2631 = _2630 * _2624;
                                float _2632 = _2630 * _2625;
                                float _2633 = _2630 * _2626;
                                float _2637 = 1.0 - (_2627 / (_2490 * _2490));
                                float _3532 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
                                float _2638 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
                                float _2642 = sqrt(_2627) * _2505.w;
                                float _2644 = 1.39999997615814208984375 / (_2642 + 1.39999997615814208984375);
                                float _2645 = _2644 * _2644;
                                float _2646 = 1.0 - _2645;
                                float _2648 = (_2646 * dot(vec3(_2631, _2632, _2633), vec3(_309, _312, _315))) + _2645;
                                float _2651 = _2642 * _2642;
                                float _2655 = (fma(_1901, _2533.z, fma(_1900, _2533.y, _2533.x * _1899)) + _2533.w) / _2596;
                                float _2656 = (fma(_1901, _2549.z, fma(_1900, _2549.y, _2549.x * _1899)) + _2549.w) / _2596;
                                float _2660 = 1.0 - dot(vec2(_2655, _2656), vec2(_2655, _2656));
                                float _3548 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
                                float _2661 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
                                float _2662 = _2661 * (((isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0))) * _2638) / ((_2651 * 0.699999988079071044921875) + 1.0));
                                float _2672 = dot(vec3(_309, _312, _315), vec3((-0.0) - (_1899 * _2183), (-0.0) - (_1900 * _2183), (-0.0) - (_1901 * _2183)));
                                float _3559 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
                                float _2680 = (_2646 * dot(vec3(_309, _312, _315), vec3(_2631, _2632, _2633))) + _2645;
                                float _3570 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                                float _2681 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
                                float _2685 = (0.5 / (((isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) + 9.9999999392252902907785028219223e-09) + _2681)) * _2681;
                                float _3581 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                                float _2692 = (_2661 * _2638) * (((isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * 3.1415927410125732421875) / ((_2651 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2662 * _2505.z;
                                frontier_phi_75_pred_1 = _2662 * _2505.y;
                                frontier_phi_75_pred_2 = _2662 * _2505.x;
                                frontier_phi_75_pred_3 = _2692 * _2517.z;
                                frontier_phi_75_pred_4 = _2692 * _2517.y;
                                frontier_phi_75_pred_5 = _2692 * _2517.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2701 = frontier_phi_75_pred;
                            _2700 = frontier_phi_75_pred_1;
                            _2699 = frontier_phi_75_pred_2;
                            _2698 = frontier_phi_75_pred_3;
                            _2697 = frontier_phi_75_pred_4;
                            _2696 = frontier_phi_75_pred_5;
                            _2447 = _2699 + _2460;
                            _2448 = _2700 + _2461;
                            _2449 = _2701 + _2462;
                            _2444 = _2696 + _2457;
                            _2445 = _2697 + _2458;
                            _2446 = _2698 + _2459;
                            if (_2464 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2457 = _2444;
                                _2458 = _2445;
                                _2459 = _2446;
                                _2460 = _2447;
                                _2461 = _2448;
                                _2462 = _2449;
                                _2463 = _2464;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2449;
                        frontier_phi_69_pred_1 = _2448;
                        frontier_phi_69_pred_2 = _2447;
                        frontier_phi_69_pred_3 = _2446;
                        frontier_phi_69_pred_4 = _2445;
                        frontier_phi_69_pred_5 = _2444;
                    }
                    _2169 = frontier_phi_69_pred;
                    _2167 = frontier_phi_69_pred_1;
                    _2165 = frontier_phi_69_pred_2;
                    _2163 = frontier_phi_69_pred_3;
                    _2161 = frontier_phi_69_pred_4;
                    _2159 = frontier_phi_69_pred_5;
                    uint _2301 = _2300 + 1u;
                    if (_2301 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2294 = _2159;
                        _2295 = _2161;
                        _2296 = _2163;
                        _2297 = _2165;
                        _2298 = _2167;
                        _2299 = _2169;
                        _2300 = _2301;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2169;
                frontier_phi_57_58_ladder_1 = _2167;
                frontier_phi_57_58_ladder_2 = _2165;
                frontier_phi_57_58_ladder_3 = _2163;
                frontier_phi_57_58_ladder_4 = _2161;
                frontier_phi_57_58_ladder_5 = _2159;
            }
            else
            {
                frontier_phi_57_58_ladder = _2055;
                frontier_phi_57_58_ladder_1 = _2053;
                frontier_phi_57_58_ladder_2 = _2051;
                frontier_phi_57_58_ladder_3 = _2049;
                frontier_phi_57_58_ladder_4 = _2047;
                frontier_phi_57_58_ladder_5 = _2045;
            }
            _2158 = frontier_phi_57_58_ladder_5;
            _2160 = frontier_phi_57_58_ladder_4;
            _2162 = frontier_phi_57_58_ladder_3;
            _2164 = frontier_phi_57_58_ladder_2;
            _2166 = frontier_phi_57_58_ladder_1;
            _2168 = frontier_phi_57_58_ladder;
        }
        float _2173 = isnan(1.0) ? _354 : (isnan(_354) ? 1.0 : min(_354, 1.0));
        _1957 = (_2173 * _2164) + _1518;
        _1959 = (_2173 * _2166) + _1520;
        _1961 = (_2173 * _2168) + _1522;
        _1963 = ((_2158 * 0.039999999105930328369140625) * _2173) + _1770;
        _1965 = ((_2160 * 0.039999999105930328369140625) * _2173) + _1772;
        _1967 = ((_2162 * 0.039999999105930328369140625) * _2173) + _1774;
    }
    else
    {
        _1957 = _1518;
        _1959 = _1520;
        _1961 = _1522;
        _1963 = _1770;
        _1965 = _1772;
        _1967 = _1774;
    }
    float _3597 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3608 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3619 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    uint _1987 = _328 + 6u;
    float _1995 = _287 / cbSceneParam._m0[86u].x;
    float _1996 = _288 / cbSceneParam._m0[86u].y;
    vec4 _2010 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1995, _1996, (log2((isnan(cbSceneParam._m0[77u].w) ? _219 : (isnan(_219) ? cbSceneParam._m0[77u].w : min(_219, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2012 = _2010.x;
    float _2013 = _2010.y;
    float _2014 = _2010.z;
    float _2015 = _2010.w;
    float _2107;
    float _2109;
    float _2111;
    float _2113;
    if (_219 > cbSceneParam._m0[78u].w)
    {
        float _2070 = isnan(_219) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _219 : min(cbSceneParam._m0[80u].w, _219));
        float _2071 = _2070 / _219;
        float _2082 = _2071 * _272;
        float _2083 = _273 * _2071;
        float _2084 = (-0.0) - _2083;
        float _2085 = _2071 * _274;
        float _2087 = (cbSceneParam._m0[77u].w * _2084) / _2070;
        float _2088 = _2087 + cbSceneParam._m0[79u].w;
        float _2089 = cbSceneParam._m0[79u].w - _2083;
        float _2095 = sqrt(((_2082 * _2082) + (_2083 * _2083)) + (_2085 * _2085));
        float _2098 = (1.0 - (cbSceneParam._m0[77u].w / _2070)) * _2095;
        float _2103 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2105 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2256;
        if (abs((_2084 - _2087) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2256 = ((((_2088 > 0.0) ? exp2(_2103 * _2088) : (2.0 - exp2(_2105 * _2088))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2098;
        }
        else
        {
            float _2216 = 1.0 / cbSceneParam._m0[80u].x;
            float _2217 = isnan(_2089) ? _2088 : (isnan(_2088) ? _2089 : max(_2088, _2089));
            float _2218 = isnan(_2089) ? _2088 : (isnan(_2088) ? _2089 : min(_2088, _2089));
            float _2227 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : min(_2217, 0.0));
            float _2228 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : min(_2218, 0.0));
            _2256 = ((abs(_2095 / _2084) * cbSceneParam._m0[80u].y) * ((((_2227 - _2228) * 2.0) - ((exp2(_2103 * (isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0)))) - exp2(_2103 * (isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0))))) * _2216)) - ((exp2(_2105 * _2227) - exp2(_2105 * _2228)) * _2216))) + (_2098 * cbSceneParam._m0[80u].z);
        }
        vec4 _2258 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1995, _1996, 1.0), 0.0);
        float _2267 = exp2((_2256 * (-1.44269502162933349609375)) * (1.0 - _2258.w));
        float _2268 = log2(_2267);
        float _2284 = log2(_2015);
        _2107 = (exp2(_2284 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2268 * cbSceneParam._m0[78u].x)) * _2258.x) / cbSceneParam._m0[78u].x)) + _2012;
        _2109 = (exp2(_2284 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2268 * cbSceneParam._m0[78u].y)) * _2258.y) / cbSceneParam._m0[78u].y)) + _2013;
        _2111 = (exp2(_2284 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2268 * cbSceneParam._m0[78u].z)) * _2258.z) / cbSceneParam._m0[78u].z)) + _2014;
        _2113 = _2267 * _2015;
    }
    else
    {
        _2107 = _2012;
        _2109 = _2013;
        _2111 = _2014;
        _2113 = _2015;
    }
    float _2125 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2126 = _2125 == 3.0;
    float _2128 = log2(_2113);
    float _2135 = exp2(_2128 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1957 + ((isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0))) * _354))) + ((_1963 + ((isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))) * _1133)) * cbPerFrame._m0[3u].x));
    float _2136 = exp2(_2128 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_1959 + ((isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0))) * _354))) + ((_1965 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _1133)) * cbPerFrame._m0[3u].x));
    float _2137 = exp2(_2128 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_1961 + ((isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0))) * _354))) + ((_1967 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _1133)) * cbPerFrame._m0[3u].x));
    float _2146 = (_2125 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2146 * (_2126 ? _2135 : (_2135 + (cbSceneParam._m0[72u].w * _2107)));
    SV_Target.y = _2146 * (_2126 ? _2136 : (_2136 + (cbSceneParam._m0[72u].w * _2109)));
    SV_Target.z = _2146 * (_2126 ? _2137 : (_2137 + (cbSceneParam._m0[72u].w * _2111)));
    SV_Target.w = cbInstanceData._m0[_1987].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1987].w;
}


