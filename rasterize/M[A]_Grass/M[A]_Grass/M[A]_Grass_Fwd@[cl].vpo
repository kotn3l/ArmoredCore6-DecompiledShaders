#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec3 TEXCOORD_2;

uint _444;

void main()
{
    uint _70 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    float _156 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _158 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _159 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _169 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _170 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _171 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _177 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _70;
    uvec4 _179 = texelFetch(g_InstanceIndexBuffer, int(_177));
    uint _180 = _179.x;
    uint _190 = (floatBitsToUint(cbInstanceData._m0[(_180 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _197 = _190 + 1u;
    uint _204 = _190 + 2u;
    precise float _211 = POSITION.x * cbObjMatrix._m0[_190].x;
    precise float _212 = POSITION.y * cbObjMatrix._m0[_190].y;
    precise float _213 = _212 + _211;
    precise float _214 = POSITION.z * cbObjMatrix._m0[_190].z;
    precise float _215 = _214 + _213;
    precise float _216 = 1.0 * cbObjMatrix._m0[_190].w;
    precise float _218 = _216 + _215;
    precise float _219 = POSITION.x * cbObjMatrix._m0[_197].x;
    precise float _220 = POSITION.y * cbObjMatrix._m0[_197].y;
    precise float _221 = _220 + _219;
    precise float _222 = POSITION.z * cbObjMatrix._m0[_197].z;
    precise float _223 = _222 + _221;
    precise float _224 = 1.0 * cbObjMatrix._m0[_197].w;
    precise float _225 = _224 + _223;
    precise float _226 = POSITION.x * cbObjMatrix._m0[_204].x;
    precise float _227 = POSITION.y * cbObjMatrix._m0[_204].y;
    precise float _228 = _227 + _226;
    precise float _229 = POSITION.z * cbObjMatrix._m0[_204].z;
    precise float _230 = _229 + _228;
    precise float _231 = 1.0 * cbObjMatrix._m0[_204].w;
    precise float _232 = _231 + _230;
    uvec4 _238 = floatBitsToUint(cbInstanceData._m0[(_70 * 13u) + 7u]);
    uint _240 = _238.w;
    uint _242 = min(_238.y, 8u);
    float _246;
    float _248;
    if (_242 == 0u)
    {
        _246 = 0.0;
        _248 = 0.0;
    }
    else
    {
        uint _375 = _238.z;
        precise float _247;
        precise float _249;
        float _517;
        float _519;
        float _376 = 0.0;
        float _377 = 0.0;
        uint _378 = _375;
        uint _380 = 0u;
        float _416;
        float _435;
        vec4 _449;
        float _450;
        float _451;
        float _465;
        float _466;
        float _467;
        float _484;
        float _485;
        float _486;
        float _487;
        bool _488;
        bool _489;
        bool _490;
        precise float _491;
        precise float _492;
        precise float _493;
        float _494;
        float _495;
        float _496;
        precise float _497;
        bool _500;
        for (;;)
        {
            uint _382 = _378 & 255u;
            uint _384 = _382 * 24u;
            uvec3 _394 = uvec3(texelFetch(g_forceParam, int(_384)).x, texelFetch(g_forceParam, int(_384 + 1u)).x, texelFetch(g_forceParam, int(_384 + 2u)).x);
            uint _399 = (_382 * 24u) + 4u;
            vec4 _412 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_399)).x, texelFetch(g_forceParam, int(_399 + 1u)).x, texelFetch(g_forceParam, int(_399 + 2u)).x, texelFetch(g_forceParam, int(_399 + 3u)).x));
            _416 = _412.w;
            uint _418 = (_382 * 24u) + 8u;
            vec4 _431 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_418)).x, texelFetch(g_forceParam, int(_418 + 1u)).x, texelFetch(g_forceParam, int(_418 + 2u)).x, texelFetch(g_forceParam, int(_418 + 3u)).x));
            _435 = _431.w;
            uint _438 = (_382 * 24u) + 12u;
            _449 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_438)).x, texelFetch(g_forceParam, int(_438 + 1u)).x, _444, texelFetch(g_forceParam, int(_438 + 3u)).x));
            _450 = _449.x;
            _451 = _449.w;
            uint _454 = (_382 * 24u) + 16u;
            vec3 _464 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_454)).x, texelFetch(g_forceParam, int(_454 + 1u)).x, texelFetch(g_forceParam, int(_454 + 2u)).x));
            _465 = _464.x;
            _466 = _464.y;
            _467 = _464.z;
            uint _470 = (_382 * 24u) + 20u;
            vec4 _483 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_470)).x, texelFetch(g_forceParam, int(_470 + 1u)).x, texelFetch(g_forceParam, int(_470 + 2u)).x, texelFetch(g_forceParam, int(_470 + 3u)).x));
            _484 = _483.x;
            _485 = _483.y;
            _486 = _483.z;
            _487 = _483.w;
            _488 = _394.x == 1u;
            _489 = _394.y == 1u;
            _490 = _394.z == 1u;
            _491 = _218 - _412.x;
            _492 = _225 - _412.y;
            _493 = _232 - _412.z;
            _494 = _488 ? _431.x : _491;
            _495 = _488 ? _431.y : _492;
            _496 = _488 ? _431.z : _493;
            _497 = dot(vec3(_494, _495, _496), vec3(_494, _495, _496));
            _500 = _497 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            if (_500)
            {
                precise float _502 = _491 * _491;
                precise float _503 = _492 * _492;
                precise float _504 = _502 + _503;
                precise float _505 = _493 * _493;
                precise float _506 = _505 + _504;
                float _507 = sqrt(_506);
                float _508 = inversesqrt(_497);
                precise float _509 = _494 * _508;
                precise float _510 = _495 * _508;
                precise float _511 = _496 * _508;
                precise float _514 = _507 / (isnan(0.001000000047497451305389404296875) ? _449.y : (isnan(_449.y) ? 0.001000000047497451305389404296875 : max(_449.y, 0.001000000047497451305389404296875)));
                precise float _515 = 1.0 - _514;
                float _667 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
                float _516 = isnan(1.0) ? _667 : (isnan(_667) ? 1.0 : min(_667, 1.0));
                float _540;
                if (_490)
                {
                    float _527 = inversesqrt(dot(vec3(_491, _492, _493), vec3(_491, _492, _493)));
                    precise float _528 = _491 * _527;
                    precise float _529 = _492 * _527;
                    precise float _530 = _493 * _527;
                    precise float _534 = dot(vec3(_509, _510, _511), vec3(_528, _529, _530)) * 0.800000011920928955078125;
                    precise float _536 = _534 + 0.20000000298023223876953125;
                    float _678 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
                    precise float _539 = _516 * (isnan(1.0) ? _678 : (isnan(_678) ? 1.0 : min(_678, 1.0)));
                    _540 = _539;
                }
                else
                {
                    _540 = _516;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                if (_540 > 0.0)
                {
                    bool _543 = _488 && (!_490);
                    precise float _545 = _507 * (-4.0);
                    precise float _549 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _450 : (isnan(_450) ? 0.001000000047497451305389404296875 : max(_450, 0.001000000047497451305389404296875)));
                    precise float _551 = dot(vec2(_509, _511), vec2(_491, _493));
                    precise float _554 = _549 * _551;
                    precise float _555 = float(_543) * _554;
                    precise float _556 = cbPerFrame._m0[22u].x * _549;
                    precise float _557 = _556 - _555;
                    precise float _558 = (_543 ? 0.0 : _545) + _557;
                    precise float _560 = _435 * sin(_558);
                    precise float _561 = _510 * 0.0;
                    precise float _562 = _561 - _511;
                    precise float _563 = _509 - _561;
                    precise float _564 = _451 * _560;
                    float _565 = _488 ? _564 : 0.0;
                    float _608;
                    if (_489)
                    {
                        precise float _568 = _465 * 2.0;
                        precise float _570 = _485 + _486;
                        precise float _571 = _487 + _570;
                        precise float _573 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _465 : (isnan(_465) ? 0.001000000047497451305389404296875 : max(_465, 0.001000000047497451305389404296875)));
                        precise float _574 = _484 * _573;
                        precise float _575 = (-0.0) - _509;
                        precise float _580 = dot(vec2(_511, _575), vec2(_491, _493)) / _568;
                        precise float _581 = (-0.0) - _580;
                        float _584 = fract(abs(_580));
                        precise float _585 = (-0.0) - _584;
                        precise float _587 = _568 * ((_580 >= _581) ? _584 : _585);
                        precise float _588 = _587 * 6.283184051513671875;
                        precise float _589 = _588 / _568;
                        precise float _591 = (isnan(5.0) ? _465 : (isnan(_465) ? 5.0 : min(_465, 5.0))) * sin(_589);
                        precise float _592 = _551 + _591;
                        precise float _593 = _465 * 0.25;
                        precise float _595 = cbPerFrame._m0[22u].x * _484;
                        precise float _596 = _595 - _593;
                        precise float _597 = _596 - _592;
                        precise float _598 = _484 * _571;
                        precise float _600 = _597 / (isnan(0.001000000047497451305389404296875) ? _598 : (isnan(_598) ? 0.001000000047497451305389404296875 : max(_598, 0.001000000047497451305389404296875)));
                        float _601 = fract(_600);
                        precise float _603 = 1.0 - _601;
                        float _604 = (_600 < 0.0) ? _603 : _601;
                        precise float _605 = _570 / _571;
                        precise float _606 = _485 / _571;
                        float _623;
                        if (_604 < _606)
                        {
                            precise float _621 = _604 / _606;
                            _623 = _621;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_604 < _605)
                            {
                                precise float _633 = _604 - _606;
                                precise float _634 = _605 - _606;
                                precise float _635 = _633 / _634;
                                precise float _624 = 1.0 - _635;
                                frontier_phi_14_13_ladder = _624;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _623 = frontier_phi_14_13_ladder;
                        }
                        precise float _625 = _467 * _623;
                        precise float _626 = _573 * _551;
                        precise float _627 = cbPerFrame._m0[22u].x * _574;
                        precise float _628 = _627 - _626;
                        precise float _630 = _466 + sin(_628);
                        precise float _632 = _625 * abs(_630);
                        precise float _609 = _632 + 0.0;
                        _608 = _609;
                    }
                    else
                    {
                        _608 = 0.0;
                    }
                    precise float _610 = _416 + _560;
                    precise float _611 = _610 + _608;
                    precise float _612 = _509 * _611;
                    precise float _613 = _511 * _611;
                    precise float _614 = _562 * _565;
                    precise float _615 = _563 * _565;
                    precise float _616 = _614 + _612;
                    precise float _617 = _615 + _613;
                    precise float _618 = _540 * _616;
                    precise float _619 = _540 * _617;
                    precise float _518 = _618 * 0.0500000007450580596923828125;
                    precise float _520 = _619 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _518;
                    frontier_phi_5_pred_7_ladder_1 = _520;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
            }
            _517 = frontier_phi_5_pred;
            _519 = frontier_phi_5_pred_1;
            _247 = _376 + _517;
            _249 = _377 + _519;
            uint _381 = _380 + 1u;
            if (_381 == _242)
            {
                break;
            }
            else
            {
                _376 = _247;
                _377 = _249;
                _378 = (_380 != 3u) ? (_378 >> 8u) : _240;
                _380 = _381;
                continue;
            }
        }
        _246 = _247;
        _248 = _249;
    }
    precise float _250 = TEXCOORD_1.y * _246;
    precise float _251 = TEXCOORD_1.y * _248;
    precise float _256 = dot(vec2(_250, _251), vec2(_250, _251)) + 1.0;
    float _257 = sqrt(_256);
    precise float _258 = _250 / _257;
    precise float _259 = _251 / _257;
    precise float _263 = 1.0 - dot(vec2(_258, _259), vec2(_258, _259));
    float _709 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    precise float _266 = sqrt(isnan(1.0) ? _709 : (isnan(_709) ? 1.0 : min(_709, 1.0))) + (-1.0);
    precise float _268 = TEXCOORD_1.y * _258;
    precise float _269 = TEXCOORD_1.y * _266;
    precise float _270 = TEXCOORD_1.y * _259;
    precise float _271 = _218 + _268;
    precise float _272 = _225 + _269;
    precise float _273 = _232 + _270;
    precise float _298 = _271 - cbSceneParam._m0[3u].x;
    precise float _299 = _272 - cbSceneParam._m0[3u].y;
    precise float _300 = _273 - cbSceneParam._m0[3u].z;
    precise float _328 = _298 * cbSceneParam._m0[24u].x;
    precise float _329 = _299 * cbSceneParam._m0[24u].y;
    precise float _330 = _329 + _328;
    precise float _331 = _300 * cbSceneParam._m0[24u].z;
    precise float _332 = _331 + _330;
    precise float _333 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _334 = _333 + _332;
    precise float _335 = _298 * cbSceneParam._m0[25u].x;
    precise float _336 = _299 * cbSceneParam._m0[25u].y;
    precise float _337 = _336 + _335;
    precise float _338 = _300 * cbSceneParam._m0[25u].z;
    precise float _339 = _338 + _337;
    precise float _340 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _341 = _340 + _339;
    precise float _342 = _298 * cbSceneParam._m0[26u].x;
    precise float _343 = _299 * cbSceneParam._m0[26u].y;
    precise float _344 = _343 + _342;
    precise float _345 = _300 * cbSceneParam._m0[26u].z;
    precise float _346 = _345 + _344;
    precise float _347 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _348 = _347 + _346;
    precise float _349 = _298 * cbSceneParam._m0[27u].x;
    precise float _350 = _299 * cbSceneParam._m0[27u].y;
    precise float _351 = _350 + _349;
    precise float _352 = _300 * cbSceneParam._m0[27u].z;
    precise float _353 = _352 + _351;
    precise float _354 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _355 = _354 + _353;
    gl_Position.x = _334;
    gl_Position.y = _341;
    gl_Position.z = _348;
    gl_Position.w = _355;
    POSITION_1.x = _334;
    POSITION_1.y = _341;
    POSITION_1.z = _348;
    POSITION_1.w = _355;
    NORMAL_1.x = fma(_159, cbObjMatrix._m0[_190].z, fma(_158, cbObjMatrix._m0[_190].y, cbObjMatrix._m0[_190].x * _156));
    NORMAL_1.y = fma(_159, cbObjMatrix._m0[_197].z, fma(_158, cbObjMatrix._m0[_197].y, cbObjMatrix._m0[_197].x * _156));
    NORMAL_1.z = fma(_159, cbObjMatrix._m0[_204].z, fma(_158, cbObjMatrix._m0[_204].y, cbObjMatrix._m0[_204].x * _156));
    NORMAL_1.w = float(_180);
    TANGENT_1.x = fma(_171, cbObjMatrix._m0[_190].z, fma(_170, cbObjMatrix._m0[_190].y, cbObjMatrix._m0[_190].x * _169));
    TANGENT_1.y = fma(_171, cbObjMatrix._m0[_197].z, fma(_170, cbObjMatrix._m0[_197].y, cbObjMatrix._m0[_197].x * _169));
    TANGENT_1.z = fma(_171, cbObjMatrix._m0[_204].z, fma(_170, cbObjMatrix._m0[_204].y, cbObjMatrix._m0[_204].x * _169));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = COLOR_1.x;
}


