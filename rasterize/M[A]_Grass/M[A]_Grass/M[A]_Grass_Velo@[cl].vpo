#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec3 TEXCOORD_2;
layout(location = 5) out vec4 TEXCOORD_5;
layout(location = 6) out vec4 TEXCOORD_6;
layout(location = 7) out vec3 TEXCOORD_7;

uint _559;

void main()
{
    uint _77 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_5.x = 0.0;
    TEXCOORD_5.y = 0.0;
    TEXCOORD_5.z = 0.0;
    TEXCOORD_5.w = 0.0;
    TEXCOORD_6.x = 0.0;
    TEXCOORD_6.y = 0.0;
    TEXCOORD_6.z = 0.0;
    TEXCOORD_6.w = 0.0;
    TEXCOORD_7.x = 0.0;
    TEXCOORD_7.y = 0.0;
    TEXCOORD_7.z = 0.0;
    float _174 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _176 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _177 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _187 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _188 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _189 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _195 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _77;
    uvec4 _197 = texelFetch(g_InstanceIndexBuffer, int(_195));
    uint _198 = _197.x;
    uint _208 = (floatBitsToUint(cbInstanceData._m0[(_198 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _215 = _208 + 1u;
    uint _222 = _208 + 2u;
    precise float _229 = POSITION.x * cbObjMatrix._m0[_208].x;
    precise float _230 = POSITION.y * cbObjMatrix._m0[_208].y;
    precise float _231 = _230 + _229;
    precise float _232 = POSITION.z * cbObjMatrix._m0[_208].z;
    precise float _233 = _232 + _231;
    precise float _234 = 1.0 * cbObjMatrix._m0[_208].w;
    precise float _236 = _234 + _233;
    precise float _237 = POSITION.x * cbObjMatrix._m0[_215].x;
    precise float _238 = POSITION.y * cbObjMatrix._m0[_215].y;
    precise float _239 = _238 + _237;
    precise float _240 = POSITION.z * cbObjMatrix._m0[_215].z;
    precise float _241 = _240 + _239;
    precise float _242 = 1.0 * cbObjMatrix._m0[_215].w;
    precise float _243 = _242 + _241;
    precise float _244 = POSITION.x * cbObjMatrix._m0[_222].x;
    precise float _245 = POSITION.y * cbObjMatrix._m0[_222].y;
    precise float _246 = _245 + _244;
    precise float _247 = POSITION.z * cbObjMatrix._m0[_222].z;
    precise float _248 = _247 + _246;
    precise float _249 = 1.0 * cbObjMatrix._m0[_222].w;
    precise float _250 = _249 + _248;
    uvec4 _256 = floatBitsToUint(cbInstanceData._m0[(_77 * 13u) + 7u]);
    uint _258 = _256.w;
    uint _260 = min(_256.y, 8u);
    float _264;
    float _266;
    if (_260 == 0u)
    {
        _264 = 0.0;
        _266 = 0.0;
    }
    else
    {
        uint _490 = _256.z;
        precise float _265;
        precise float _267;
        float _632;
        float _634;
        float _491 = 0.0;
        float _492 = 0.0;
        uint _493 = _490;
        uint _495 = 0u;
        float _531;
        float _550;
        vec4 _564;
        float _565;
        float _566;
        float _580;
        float _581;
        float _582;
        float _599;
        float _600;
        float _601;
        float _602;
        bool _603;
        bool _604;
        bool _605;
        precise float _606;
        precise float _607;
        precise float _608;
        float _609;
        float _610;
        float _611;
        precise float _612;
        bool _615;
        for (;;)
        {
            uint _497 = _493 & 255u;
            uint _499 = _497 * 24u;
            uvec3 _509 = uvec3(texelFetch(g_forceParam, int(_499)).x, texelFetch(g_forceParam, int(_499 + 1u)).x, texelFetch(g_forceParam, int(_499 + 2u)).x);
            uint _514 = (_497 * 24u) + 4u;
            vec4 _527 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_514)).x, texelFetch(g_forceParam, int(_514 + 1u)).x, texelFetch(g_forceParam, int(_514 + 2u)).x, texelFetch(g_forceParam, int(_514 + 3u)).x));
            _531 = _527.w;
            uint _533 = (_497 * 24u) + 8u;
            vec4 _546 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_533)).x, texelFetch(g_forceParam, int(_533 + 1u)).x, texelFetch(g_forceParam, int(_533 + 2u)).x, texelFetch(g_forceParam, int(_533 + 3u)).x));
            _550 = _546.w;
            uint _553 = (_497 * 24u) + 12u;
            _564 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_553)).x, texelFetch(g_forceParam, int(_553 + 1u)).x, _559, texelFetch(g_forceParam, int(_553 + 3u)).x));
            _565 = _564.x;
            _566 = _564.w;
            uint _569 = (_497 * 24u) + 16u;
            vec3 _579 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_569)).x, texelFetch(g_forceParam, int(_569 + 1u)).x, texelFetch(g_forceParam, int(_569 + 2u)).x));
            _580 = _579.x;
            _581 = _579.y;
            _582 = _579.z;
            uint _585 = (_497 * 24u) + 20u;
            vec4 _598 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_585)).x, texelFetch(g_forceParam, int(_585 + 1u)).x, texelFetch(g_forceParam, int(_585 + 2u)).x, texelFetch(g_forceParam, int(_585 + 3u)).x));
            _599 = _598.x;
            _600 = _598.y;
            _601 = _598.z;
            _602 = _598.w;
            _603 = _509.x == 1u;
            _604 = _509.y == 1u;
            _605 = _509.z == 1u;
            _606 = _236 - _527.x;
            _607 = _243 - _527.y;
            _608 = _250 - _527.z;
            _609 = _603 ? _546.x : _606;
            _610 = _603 ? _546.y : _607;
            _611 = _603 ? _546.z : _608;
            _612 = dot(vec3(_609, _610, _611), vec3(_609, _610, _611));
            _615 = _612 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            if (_615)
            {
                precise float _617 = _606 * _606;
                precise float _618 = _607 * _607;
                precise float _619 = _617 + _618;
                precise float _620 = _608 * _608;
                precise float _621 = _620 + _619;
                float _622 = sqrt(_621);
                float _623 = inversesqrt(_612);
                precise float _624 = _609 * _623;
                precise float _625 = _610 * _623;
                precise float _626 = _611 * _623;
                precise float _629 = _622 / (isnan(0.001000000047497451305389404296875) ? _564.y : (isnan(_564.y) ? 0.001000000047497451305389404296875 : max(_564.y, 0.001000000047497451305389404296875)));
                precise float _630 = 1.0 - _629;
                float _782 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
                float _631 = isnan(1.0) ? _782 : (isnan(_782) ? 1.0 : min(_782, 1.0));
                float _655;
                if (_605)
                {
                    float _642 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
                    precise float _643 = _606 * _642;
                    precise float _644 = _607 * _642;
                    precise float _645 = _608 * _642;
                    precise float _649 = dot(vec3(_624, _625, _626), vec3(_643, _644, _645)) * 0.800000011920928955078125;
                    precise float _651 = _649 + 0.20000000298023223876953125;
                    float _793 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
                    precise float _654 = _631 * (isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0)));
                    _655 = _654;
                }
                else
                {
                    _655 = _631;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                if (_655 > 0.0)
                {
                    bool _658 = _603 && (!_605);
                    precise float _660 = _622 * (-4.0);
                    precise float _664 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _565 : (isnan(_565) ? 0.001000000047497451305389404296875 : max(_565, 0.001000000047497451305389404296875)));
                    precise float _666 = dot(vec2(_624, _626), vec2(_606, _608));
                    precise float _669 = _664 * _666;
                    precise float _670 = float(_658) * _669;
                    precise float _671 = cbPerFrame._m0[22u].x * _664;
                    precise float _672 = _671 - _670;
                    precise float _673 = (_658 ? 0.0 : _660) + _672;
                    precise float _675 = _550 * sin(_673);
                    precise float _676 = _625 * 0.0;
                    precise float _677 = _676 - _626;
                    precise float _678 = _624 - _676;
                    precise float _679 = _566 * _675;
                    float _680 = _603 ? _679 : 0.0;
                    float _723;
                    if (_604)
                    {
                        precise float _683 = _580 * 2.0;
                        precise float _685 = _600 + _601;
                        precise float _686 = _602 + _685;
                        precise float _688 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _580 : (isnan(_580) ? 0.001000000047497451305389404296875 : max(_580, 0.001000000047497451305389404296875)));
                        precise float _689 = _599 * _688;
                        precise float _690 = (-0.0) - _624;
                        precise float _695 = dot(vec2(_626, _690), vec2(_606, _608)) / _683;
                        precise float _696 = (-0.0) - _695;
                        float _699 = fract(abs(_695));
                        precise float _700 = (-0.0) - _699;
                        precise float _702 = _683 * ((_695 >= _696) ? _699 : _700);
                        precise float _703 = _702 * 6.283184051513671875;
                        precise float _704 = _703 / _683;
                        precise float _706 = (isnan(5.0) ? _580 : (isnan(_580) ? 5.0 : min(_580, 5.0))) * sin(_704);
                        precise float _707 = _666 + _706;
                        precise float _708 = _580 * 0.25;
                        precise float _710 = cbPerFrame._m0[22u].x * _599;
                        precise float _711 = _710 - _708;
                        precise float _712 = _711 - _707;
                        precise float _713 = _599 * _686;
                        precise float _715 = _712 / (isnan(0.001000000047497451305389404296875) ? _713 : (isnan(_713) ? 0.001000000047497451305389404296875 : max(_713, 0.001000000047497451305389404296875)));
                        float _716 = fract(_715);
                        precise float _718 = 1.0 - _716;
                        float _719 = (_715 < 0.0) ? _718 : _716;
                        precise float _720 = _685 / _686;
                        precise float _721 = _600 / _686;
                        float _738;
                        if (_719 < _721)
                        {
                            precise float _736 = _719 / _721;
                            _738 = _736;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_719 < _720)
                            {
                                precise float _748 = _719 - _721;
                                precise float _749 = _720 - _721;
                                precise float _750 = _748 / _749;
                                precise float _739 = 1.0 - _750;
                                frontier_phi_14_13_ladder = _739;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _738 = frontier_phi_14_13_ladder;
                        }
                        precise float _740 = _582 * _738;
                        precise float _741 = _688 * _666;
                        precise float _742 = cbPerFrame._m0[22u].x * _689;
                        precise float _743 = _742 - _741;
                        precise float _745 = _581 + sin(_743);
                        precise float _747 = _740 * abs(_745);
                        precise float _724 = _747 + 0.0;
                        _723 = _724;
                    }
                    else
                    {
                        _723 = 0.0;
                    }
                    precise float _725 = _531 + _675;
                    precise float _726 = _725 + _723;
                    precise float _727 = _624 * _726;
                    precise float _728 = _626 * _726;
                    precise float _729 = _677 * _680;
                    precise float _730 = _678 * _680;
                    precise float _731 = _729 + _727;
                    precise float _732 = _730 + _728;
                    precise float _733 = _655 * _731;
                    precise float _734 = _655 * _732;
                    precise float _633 = _733 * 0.0500000007450580596923828125;
                    precise float _635 = _734 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _633;
                    frontier_phi_5_pred_7_ladder_1 = _635;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
            }
            _632 = frontier_phi_5_pred;
            _634 = frontier_phi_5_pred_1;
            _265 = _491 + _632;
            _267 = _492 + _634;
            uint _496 = _495 + 1u;
            if (_496 == _260)
            {
                break;
            }
            else
            {
                _491 = _265;
                _492 = _267;
                _493 = (_495 != 3u) ? (_493 >> 8u) : _258;
                _495 = _496;
                continue;
            }
        }
        _264 = _265;
        _266 = _267;
    }
    precise float _268 = TEXCOORD_1.y * _264;
    precise float _269 = TEXCOORD_1.y * _266;
    precise float _274 = dot(vec2(_268, _269), vec2(_268, _269)) + 1.0;
    float _275 = sqrt(_274);
    precise float _276 = _268 / _275;
    precise float _277 = _269 / _275;
    precise float _281 = 1.0 - dot(vec2(_276, _277), vec2(_276, _277));
    float _824 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    precise float _284 = sqrt(isnan(1.0) ? _824 : (isnan(_824) ? 1.0 : min(_824, 1.0))) + (-1.0);
    precise float _286 = TEXCOORD_1.y * _276;
    precise float _287 = TEXCOORD_1.y * _284;
    precise float _288 = TEXCOORD_1.y * _277;
    precise float _289 = _236 + _286;
    precise float _290 = _243 + _287;
    precise float _291 = _250 + _288;
    float _327 = ((cbPrevObjMatrix._m0[_208].w + _286) + fma(POSITION.z, cbPrevObjMatrix._m0[_208].z, fma(POSITION.y, cbPrevObjMatrix._m0[_208].y, cbPrevObjMatrix._m0[_208].x * POSITION.x))) - cbSceneParam._m0[28u].x;
    float _330 = ((cbPrevObjMatrix._m0[_215].w + _287) + fma(POSITION.z, cbPrevObjMatrix._m0[_215].z, fma(POSITION.y, cbPrevObjMatrix._m0[_215].y, cbPrevObjMatrix._m0[_215].x * POSITION.x))) - cbSceneParam._m0[28u].y;
    float _333 = ((cbPrevObjMatrix._m0[_222].w + _288) + fma(POSITION.z, cbPrevObjMatrix._m0[_222].z, fma(POSITION.y, cbPrevObjMatrix._m0[_222].y, cbPrevObjMatrix._m0[_222].x * POSITION.x))) - cbSceneParam._m0[28u].z;
    float _380 = fma(_177, cbObjMatrix._m0[_208].z, fma(_176, cbObjMatrix._m0[_208].y, cbObjMatrix._m0[_208].x * _174));
    float _383 = fma(_177, cbObjMatrix._m0[_215].z, fma(_176, cbObjMatrix._m0[_215].y, cbObjMatrix._m0[_215].x * _174));
    float _386 = fma(_177, cbObjMatrix._m0[_222].z, fma(_176, cbObjMatrix._m0[_222].y, cbObjMatrix._m0[_222].x * _174));
    precise float _402 = _289 - cbSceneParam._m0[3u].x;
    precise float _403 = _290 - cbSceneParam._m0[3u].y;
    precise float _404 = _291 - cbSceneParam._m0[3u].z;
    precise float _432 = _402 * cbSceneParam._m0[24u].x;
    precise float _433 = _403 * cbSceneParam._m0[24u].y;
    precise float _434 = _433 + _432;
    precise float _435 = _404 * cbSceneParam._m0[24u].z;
    precise float _436 = _435 + _434;
    precise float _437 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _438 = _437 + _436;
    precise float _439 = _402 * cbSceneParam._m0[25u].x;
    precise float _440 = _403 * cbSceneParam._m0[25u].y;
    precise float _441 = _440 + _439;
    precise float _442 = _404 * cbSceneParam._m0[25u].z;
    precise float _443 = _442 + _441;
    precise float _444 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _445 = _444 + _443;
    precise float _446 = _402 * cbSceneParam._m0[26u].x;
    precise float _447 = _403 * cbSceneParam._m0[26u].y;
    precise float _448 = _447 + _446;
    precise float _449 = _404 * cbSceneParam._m0[26u].z;
    precise float _450 = _449 + _448;
    precise float _451 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _452 = _451 + _450;
    precise float _453 = _402 * cbSceneParam._m0[27u].x;
    precise float _454 = _403 * cbSceneParam._m0[27u].y;
    precise float _455 = _454 + _453;
    precise float _456 = _404 * cbSceneParam._m0[27u].z;
    precise float _457 = _456 + _455;
    precise float _458 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _459 = _458 + _457;
    gl_Position.x = _438;
    gl_Position.y = _445;
    gl_Position.z = _452;
    gl_Position.w = _459;
    POSITION_1.x = _438;
    POSITION_1.y = _445;
    POSITION_1.z = _452;
    POSITION_1.w = _459;
    NORMAL_1.x = _380;
    NORMAL_1.y = _383;
    NORMAL_1.z = _386;
    NORMAL_1.w = float(_198);
    TANGENT_1.x = fma(_189, cbObjMatrix._m0[_208].z, fma(_188, cbObjMatrix._m0[_208].y, cbObjMatrix._m0[_208].x * _187));
    TANGENT_1.y = fma(_189, cbObjMatrix._m0[_215].z, fma(_188, cbObjMatrix._m0[_215].y, cbObjMatrix._m0[_215].x * _187));
    TANGENT_1.z = fma(_189, cbObjMatrix._m0[_222].z, fma(_188, cbObjMatrix._m0[_222].y, cbObjMatrix._m0[_222].x * _187));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = COLOR_1.x;
    TEXCOORD_5.x = _438;
    TEXCOORD_5.y = _445;
    TEXCOORD_5.z = _452;
    TEXCOORD_5.w = _459;
    TEXCOORD_6.x = fma(_333, cbSceneParam._m0[29u].z, fma(_330, cbSceneParam._m0[29u].y, _327 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_6.y = fma(_333, cbSceneParam._m0[30u].z, fma(_330, cbSceneParam._m0[30u].y, cbSceneParam._m0[30u].x * _327)) + cbSceneParam._m0[30u].w;
    TEXCOORD_6.z = fma(_333, cbSceneParam._m0[31u].z, fma(_330, cbSceneParam._m0[31u].y, cbSceneParam._m0[31u].x * _327)) + cbSceneParam._m0[31u].w;
    TEXCOORD_6.w = fma(_333, cbSceneParam._m0[32u].z, fma(_330, cbSceneParam._m0[32u].y, cbSceneParam._m0[32u].x * _327)) + cbSceneParam._m0[32u].w;
    TEXCOORD_7.x = _380;
    TEXCOORD_7.y = _383;
    TEXCOORD_7.z = _386;
}


