#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;

uint _357;

void main()
{
    uint _64 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    uint _96 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _64;
    uint _101 = texelFetch(g_InstanceIndexBuffer, int(_96)).x * 13u;
    uint _110 = (floatBitsToUint(cbInstanceData._m0[_101 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _117 = _110 + 1u;
    uint _124 = _110 + 2u;
    precise float _131 = POSITION.x * cbObjMatrix._m0[_110].x;
    precise float _132 = POSITION.y * cbObjMatrix._m0[_110].y;
    precise float _133 = _132 + _131;
    precise float _134 = POSITION.z * cbObjMatrix._m0[_110].z;
    precise float _135 = _134 + _133;
    precise float _136 = 1.0 * cbObjMatrix._m0[_110].w;
    precise float _138 = _136 + _135;
    precise float _139 = POSITION.x * cbObjMatrix._m0[_117].x;
    precise float _140 = POSITION.y * cbObjMatrix._m0[_117].y;
    precise float _141 = _140 + _139;
    precise float _142 = POSITION.z * cbObjMatrix._m0[_117].z;
    precise float _143 = _142 + _141;
    precise float _144 = 1.0 * cbObjMatrix._m0[_117].w;
    precise float _145 = _144 + _143;
    precise float _146 = POSITION.x * cbObjMatrix._m0[_124].x;
    precise float _147 = POSITION.y * cbObjMatrix._m0[_124].y;
    precise float _148 = _147 + _146;
    precise float _149 = POSITION.z * cbObjMatrix._m0[_124].z;
    precise float _150 = _149 + _148;
    precise float _151 = 1.0 * cbObjMatrix._m0[_124].w;
    precise float _152 = _151 + _150;
    uvec4 _158 = floatBitsToUint(cbInstanceData._m0[(_64 * 13u) + 7u]);
    uint _160 = _158.w;
    uint _162 = min(_158.y, 8u);
    float _166;
    float _168;
    if (_162 == 0u)
    {
        _166 = 0.0;
        _168 = 0.0;
    }
    else
    {
        uint _288 = _158.z;
        precise float _167;
        precise float _169;
        float _430;
        float _432;
        float _289 = 0.0;
        float _290 = 0.0;
        uint _291 = _288;
        uint _293 = 0u;
        float _329;
        float _348;
        vec4 _362;
        float _363;
        float _364;
        float _378;
        float _379;
        float _380;
        float _397;
        float _398;
        float _399;
        float _400;
        bool _401;
        bool _402;
        bool _403;
        precise float _404;
        precise float _405;
        precise float _406;
        float _407;
        float _408;
        float _409;
        precise float _410;
        bool _413;
        for (;;)
        {
            uint _295 = _291 & 255u;
            uint _297 = _295 * 24u;
            uvec3 _307 = uvec3(texelFetch(g_forceParam, int(_297)).x, texelFetch(g_forceParam, int(_297 + 1u)).x, texelFetch(g_forceParam, int(_297 + 2u)).x);
            uint _312 = (_295 * 24u) + 4u;
            vec4 _325 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_312)).x, texelFetch(g_forceParam, int(_312 + 1u)).x, texelFetch(g_forceParam, int(_312 + 2u)).x, texelFetch(g_forceParam, int(_312 + 3u)).x));
            _329 = _325.w;
            uint _331 = (_295 * 24u) + 8u;
            vec4 _344 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_331)).x, texelFetch(g_forceParam, int(_331 + 1u)).x, texelFetch(g_forceParam, int(_331 + 2u)).x, texelFetch(g_forceParam, int(_331 + 3u)).x));
            _348 = _344.w;
            uint _351 = (_295 * 24u) + 12u;
            _362 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_351)).x, texelFetch(g_forceParam, int(_351 + 1u)).x, _357, texelFetch(g_forceParam, int(_351 + 3u)).x));
            _363 = _362.x;
            _364 = _362.w;
            uint _367 = (_295 * 24u) + 16u;
            vec3 _377 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_367)).x, texelFetch(g_forceParam, int(_367 + 1u)).x, texelFetch(g_forceParam, int(_367 + 2u)).x));
            _378 = _377.x;
            _379 = _377.y;
            _380 = _377.z;
            uint _383 = (_295 * 24u) + 20u;
            vec4 _396 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_383)).x, texelFetch(g_forceParam, int(_383 + 1u)).x, texelFetch(g_forceParam, int(_383 + 2u)).x, texelFetch(g_forceParam, int(_383 + 3u)).x));
            _397 = _396.x;
            _398 = _396.y;
            _399 = _396.z;
            _400 = _396.w;
            _401 = _307.x == 1u;
            _402 = _307.y == 1u;
            _403 = _307.z == 1u;
            _404 = _138 - _325.x;
            _405 = _145 - _325.y;
            _406 = _152 - _325.z;
            _407 = _401 ? _344.x : _404;
            _408 = _401 ? _344.y : _405;
            _409 = _401 ? _344.z : _406;
            _410 = dot(vec3(_407, _408, _409), vec3(_407, _408, _409));
            _413 = _410 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            if (_413)
            {
                precise float _415 = _404 * _404;
                precise float _416 = _405 * _405;
                precise float _417 = _415 + _416;
                precise float _418 = _406 * _406;
                precise float _419 = _418 + _417;
                float _420 = sqrt(_419);
                float _421 = inversesqrt(_410);
                precise float _422 = _407 * _421;
                precise float _423 = _408 * _421;
                precise float _424 = _409 * _421;
                precise float _427 = _420 / (isnan(0.001000000047497451305389404296875) ? _362.y : (isnan(_362.y) ? 0.001000000047497451305389404296875 : max(_362.y, 0.001000000047497451305389404296875)));
                precise float _428 = 1.0 - _427;
                float _580 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
                float _429 = isnan(1.0) ? _580 : (isnan(_580) ? 1.0 : min(_580, 1.0));
                float _453;
                if (_403)
                {
                    float _440 = inversesqrt(dot(vec3(_404, _405, _406), vec3(_404, _405, _406)));
                    precise float _441 = _404 * _440;
                    precise float _442 = _405 * _440;
                    precise float _443 = _406 * _440;
                    precise float _447 = dot(vec3(_422, _423, _424), vec3(_441, _442, _443)) * 0.800000011920928955078125;
                    precise float _449 = _447 + 0.20000000298023223876953125;
                    float _591 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
                    precise float _452 = _429 * (isnan(1.0) ? _591 : (isnan(_591) ? 1.0 : min(_591, 1.0)));
                    _453 = _452;
                }
                else
                {
                    _453 = _429;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                if (_453 > 0.0)
                {
                    bool _456 = _401 && (!_403);
                    precise float _458 = _420 * (-4.0);
                    precise float _462 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _363 : (isnan(_363) ? 0.001000000047497451305389404296875 : max(_363, 0.001000000047497451305389404296875)));
                    precise float _464 = dot(vec2(_422, _424), vec2(_404, _406));
                    precise float _467 = _462 * _464;
                    precise float _468 = float(_456) * _467;
                    precise float _469 = cbPerFrame._m0[22u].x * _462;
                    precise float _470 = _469 - _468;
                    precise float _471 = (_456 ? 0.0 : _458) + _470;
                    precise float _473 = _348 * sin(_471);
                    precise float _474 = _423 * 0.0;
                    precise float _475 = _474 - _424;
                    precise float _476 = _422 - _474;
                    precise float _477 = _364 * _473;
                    float _478 = _401 ? _477 : 0.0;
                    float _521;
                    if (_402)
                    {
                        precise float _481 = _378 * 2.0;
                        precise float _483 = _398 + _399;
                        precise float _484 = _400 + _483;
                        precise float _486 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _378 : (isnan(_378) ? 0.001000000047497451305389404296875 : max(_378, 0.001000000047497451305389404296875)));
                        precise float _487 = _397 * _486;
                        precise float _488 = (-0.0) - _422;
                        precise float _493 = dot(vec2(_424, _488), vec2(_404, _406)) / _481;
                        precise float _494 = (-0.0) - _493;
                        float _497 = fract(abs(_493));
                        precise float _498 = (-0.0) - _497;
                        precise float _500 = _481 * ((_493 >= _494) ? _497 : _498);
                        precise float _501 = _500 * 6.283184051513671875;
                        precise float _502 = _501 / _481;
                        precise float _504 = (isnan(5.0) ? _378 : (isnan(_378) ? 5.0 : min(_378, 5.0))) * sin(_502);
                        precise float _505 = _464 + _504;
                        precise float _506 = _378 * 0.25;
                        precise float _508 = cbPerFrame._m0[22u].x * _397;
                        precise float _509 = _508 - _506;
                        precise float _510 = _509 - _505;
                        precise float _511 = _397 * _484;
                        precise float _513 = _510 / (isnan(0.001000000047497451305389404296875) ? _511 : (isnan(_511) ? 0.001000000047497451305389404296875 : max(_511, 0.001000000047497451305389404296875)));
                        float _514 = fract(_513);
                        precise float _516 = 1.0 - _514;
                        float _517 = (_513 < 0.0) ? _516 : _514;
                        precise float _518 = _483 / _484;
                        precise float _519 = _398 / _484;
                        float _536;
                        if (_517 < _519)
                        {
                            precise float _534 = _517 / _519;
                            _536 = _534;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_517 < _518)
                            {
                                precise float _546 = _517 - _519;
                                precise float _547 = _518 - _519;
                                precise float _548 = _546 / _547;
                                precise float _537 = 1.0 - _548;
                                frontier_phi_14_13_ladder = _537;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _536 = frontier_phi_14_13_ladder;
                        }
                        precise float _538 = _380 * _536;
                        precise float _539 = _486 * _464;
                        precise float _540 = cbPerFrame._m0[22u].x * _487;
                        precise float _541 = _540 - _539;
                        precise float _543 = _379 + sin(_541);
                        precise float _545 = _538 * abs(_543);
                        precise float _522 = _545 + 0.0;
                        _521 = _522;
                    }
                    else
                    {
                        _521 = 0.0;
                    }
                    precise float _523 = _329 + _473;
                    precise float _524 = _523 + _521;
                    precise float _525 = _422 * _524;
                    precise float _526 = _424 * _524;
                    precise float _527 = _475 * _478;
                    precise float _528 = _476 * _478;
                    precise float _529 = _527 + _525;
                    precise float _530 = _528 + _526;
                    precise float _531 = _453 * _529;
                    precise float _532 = _453 * _530;
                    precise float _431 = _531 * 0.0500000007450580596923828125;
                    precise float _433 = _532 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _431;
                    frontier_phi_5_pred_7_ladder_1 = _433;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
            }
            _430 = frontier_phi_5_pred;
            _432 = frontier_phi_5_pred_1;
            _167 = _289 + _430;
            _169 = _290 + _432;
            uint _294 = _293 + 1u;
            if (_294 == _162)
            {
                break;
            }
            else
            {
                _289 = _167;
                _290 = _169;
                _291 = (_293 != 3u) ? (_291 >> 8u) : _160;
                _293 = _294;
                continue;
            }
        }
        _166 = _167;
        _168 = _169;
    }
    precise float _170 = TEXCOORD_1.y * _166;
    precise float _171 = TEXCOORD_1.y * _168;
    precise float _176 = dot(vec2(_170, _171), vec2(_170, _171)) + 1.0;
    float _177 = sqrt(_176);
    precise float _178 = _170 / _177;
    precise float _179 = _171 / _177;
    precise float _183 = 1.0 - dot(vec2(_178, _179), vec2(_178, _179));
    float _622 = isnan(0.0) ? _183 : (isnan(_183) ? 0.0 : max(_183, 0.0));
    precise float _186 = sqrt(isnan(1.0) ? _622 : (isnan(_622) ? 1.0 : min(_622, 1.0))) + (-1.0);
    precise float _188 = TEXCOORD_1.y * _178;
    precise float _189 = TEXCOORD_1.y * _186;
    precise float _190 = TEXCOORD_1.y * _179;
    precise float _191 = _138 + _188;
    precise float _192 = _145 + _189;
    precise float _193 = _152 + _190;
    precise float _199 = _191 - cbSceneParam._m0[3u].x;
    precise float _200 = _192 - cbSceneParam._m0[3u].y;
    precise float _201 = _193 - cbSceneParam._m0[3u].z;
    precise float _229 = _199 * cbSceneParam._m0[24u].x;
    precise float _230 = _200 * cbSceneParam._m0[24u].y;
    precise float _231 = _230 + _229;
    precise float _232 = _201 * cbSceneParam._m0[24u].z;
    precise float _233 = _232 + _231;
    precise float _234 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _235 = _234 + _233;
    precise float _236 = _199 * cbSceneParam._m0[25u].x;
    precise float _237 = _200 * cbSceneParam._m0[25u].y;
    precise float _238 = _237 + _236;
    precise float _239 = _201 * cbSceneParam._m0[25u].z;
    precise float _240 = _239 + _238;
    precise float _241 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _242 = _241 + _240;
    precise float _243 = _199 * cbSceneParam._m0[26u].x;
    precise float _244 = _200 * cbSceneParam._m0[26u].y;
    precise float _245 = _244 + _243;
    precise float _246 = _201 * cbSceneParam._m0[26u].z;
    precise float _247 = _246 + _245;
    precise float _248 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _249 = _248 + _247;
    precise float _250 = _199 * cbSceneParam._m0[27u].x;
    precise float _251 = _200 * cbSceneParam._m0[27u].y;
    precise float _252 = _251 + _250;
    precise float _253 = _201 * cbSceneParam._m0[27u].z;
    precise float _254 = _253 + _252;
    precise float _255 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _256 = _255 + _254;
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    gl_Position.x = _235;
    gl_Position.y = _242;
    gl_Position.z = _249;
    gl_Position.w = _256;
    gl_ClipDistance[0u] = dot(vec4(_235, _242, _249, _256), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_235, _242, _249, _256), vec4(cbInstanceData._m0[_101 + 3u]));
}


