#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _881;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _234 = (cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _235 = (cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _248 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_234 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_235 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _255 = _248.x * cbMtdParam._m0[9u].x;
    float _256 = _248.y * cbMtdParam._m0[9u].y;
    float _257 = _248.z * cbMtdParam._m0[9u].z;
    float _259 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _248.w;
    vec4 _272 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _234) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _235) + cbTextureTilingScale._m0[1u].w));
    float _276 = _272.z;
    float _280 = (_272.x * 2.0) + (-1.0);
    float _282 = (_272.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3286 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0))));
    vec4 _317 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[12u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _324 = fma(_289, _217, fma(_282, _209 * TANGENT.x, (_195 * _187) * _280));
    float _327 = fma(_289, _218, fma(_282, _209 * TANGENT.y, (_195 * _188) * _280));
    float _330 = fma(_289, _219, fma(_282, _209 * TANGENT.z, (_195 * _189) * _280));
    float _334 = inversesqrt(dot(vec3(_324, _327, _330), vec3(_324, _327, _330)));
    float _335 = _334 * _324;
    float _336 = _334 * _327;
    float _337 = _334 * _330;
    float _3297 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _338 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    float _3308 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _339 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _3319 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3330 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3341 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3352 = isnan(0.0) ? cbMtdParam._m0[11u].y : (isnan(cbMtdParam._m0[11u].y) ? 0.0 : max(cbMtdParam._m0[11u].y, 0.0));
    float _343 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _359 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _400 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _410 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _400);
    float _411 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _400);
    float _412 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _400);
    float _416 = inversesqrt(dot(vec3(_410, _411, _412), vec3(_410, _411, _412)));
    float _417 = _410 * _416;
    float _418 = _411 * _416;
    float _419 = _412 * _416;
    float _425 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _426 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _447 = fma(_337, cbSceneParam._m0[5u].z, fma(_336, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _335));
    float _450 = fma(_337, cbSceneParam._m0[6u].z, fma(_336, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _335));
    float _453 = fma(_337, cbSceneParam._m0[7u].z, fma(_336, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _335));
    uint _466 = uint(roundEven(NORMAL.w)) * 13u;
    uint _467 = _466 + 9u;
    uint _468 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _474 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)))) * cbInstanceData._m0[_468].x;
    float _475 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0)))) * cbInstanceData._m0[_468].y;
    float _476 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0)))) * cbInstanceData._m0[_468].z;
    float _3363 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    float _3374 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _3385 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _480 = 1.0 - _343;
    float _481 = _477 * _480;
    float _482 = _478 * _480;
    float _483 = _479 * _480;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _343;
    float _489 = (_478 + (-0.039999999105930328369140625)) * _343;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _343;
    float _491 = _488 + 0.039999999105930328369140625;
    float _493 = _489 + 0.039999999105930328369140625;
    float _494 = _490 + 0.039999999105930328369140625;
    vec4 _503 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _425, cbSceneParam._m0[86u].y * _426));
    float _506 = _503.x * TEXCOORD_1.w;
    float _507 = dot(vec3(_335, _336, _337), vec3(_417, _418, _419));
    float _510 = _507 * 2.0;
    float _514 = (_510 * _335) - _417;
    float _515 = (_510 * _336) - _418;
    float _516 = (_510 * _337) - _419;
    float _520 = abs(dot(vec3(_417, _418, _419), vec3(_335, _336, _337)));
    float _3396 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _522 = sqrt(_339);
    float _535 = exp2((_522 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_522 * 3.0));
    float _541 = (1.0 - _535) * ((_522 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _542 = _535 * _522;
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _880;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _605 = fma(_578, cbModelParam._m0[26u].z, fma(_574, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570));
        float _609 = fma(_578, cbModelParam._m0[27u].z, fma(_574, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570));
        float _613 = fma(_578, cbModelParam._m0[28u].z, fma(_574, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570));
        float _638 = _570 + _335;
        float _639 = _574 + _336;
        float _640 = _578 + _337;
        float _650 = fma(_640, cbModelParam._m0[26u].z, fma(_639, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _638)) - _605;
        float _651 = fma(_640, cbModelParam._m0[27u].z, fma(_639, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _638)) - _609;
        float _652 = fma(_640, cbModelParam._m0[28u].z, fma(_639, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _638)) - _613;
        float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
        float _669 = ((_656 * _650) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_605 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _670 = ((_656 * _651) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_609 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _671 = ((_656 * _652) / cbModelParam._m0[34u].z) + ((((((_613 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        float _708 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_674.x + (-0.5));
        float _710 = _708 * (_674.y + (-0.5));
        float _711 = _708 * (_674.z + (-0.5));
        float _718 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_681.x + (-0.5));
        float _720 = _718 * (_681.y + (-0.5));
        float _721 = _718 * (_681.z + (-0.5));
        float _728 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_688.x + (-0.5));
        float _730 = _728 * (_688.y + (-0.5));
        float _731 = _728 * (_688.z + (-0.5));
        float _738 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_695.x + (-0.5));
        float _740 = _738 * (_695.y + (-0.5));
        float _741 = _738 * (_695.z + (-0.5));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = _709 * 0.5;
        float _746 = _719 * 0.5;
        float _747 = _729 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _762 = (dot(vec3(_335, _336, _337), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _3422 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _772 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3433 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3444 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * (_774 + 1.0))) + _779) * _742;
        float _789 = _710 * 0.5;
        float _790 = _720 * 0.5;
        float _791 = _730 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _805 = (dot(vec3(_335, _336, _337), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _814 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _3477 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_816 + 1.0))) + _821) * _743;
        float _831 = _711 * 0.5;
        float _832 = _721 * 0.5;
        float _833 = _731 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _847 = (dot(vec3(_335, _336, _337), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _856 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3510 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_858 + 1.0))) + _863) * _744;
        _880 = _711;
        _882 = _710;
        _883 = _709;
        _884 = _721;
        _885 = _720;
        _886 = _719;
        _887 = _731;
        _888 = _730;
        _889 = _729;
        _890 = _744;
        _891 = _743;
        _892 = _742;
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
    }
    else
    {
        _880 = _881;
        _882 = _881;
        _883 = _881;
        _884 = _881;
        _885 = _881;
        _886 = _881;
        _887 = _881;
        _888 = _881;
        _889 = _881;
        _890 = _881;
        _891 = _881;
        _892 = _881;
        _893 = 0.0;
        _894 = 0.0;
        _895 = 0.0;
    }
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _921 = fma(_578, cbModelParam._m0[30u].z, fma(_574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _570));
        float _925 = fma(_578, cbModelParam._m0[31u].z, fma(_574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _570));
        float _929 = fma(_578, cbModelParam._m0[32u].z, fma(_574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _570));
        float _952 = _570 + _335;
        float _953 = _574 + _336;
        float _954 = _578 + _337;
        float _964 = fma(_954, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _952)) - _921;
        float _965 = fma(_954, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _952)) - _925;
        float _966 = fma(_954, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _952)) - _929;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_921 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_925 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[35u].z) + ((((((_929 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1020 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_987.x + (-0.5));
        float _1022 = _1020 * (_987.y + (-0.5));
        float _1023 = _1020 * (_987.z + (-0.5));
        float _1030 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_994.x + (-0.5));
        float _1032 = _1030 * (_994.y + (-0.5));
        float _1033 = _1030 * (_994.z + (-0.5));
        float _1040 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1001.x + (-0.5));
        float _1042 = _1040 * (_1001.y + (-0.5));
        float _1043 = _1040 * (_1001.z + (-0.5));
        float _1050 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1008.x + (-0.5));
        float _1052 = _1050 * (_1008.y + (-0.5));
        float _1053 = _1050 * (_1008.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_335, _336, _337), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3573 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_1084 + 1.0))) + _1089) * _1054;
        float _1099 = _1022 * 0.5;
        float _1100 = _1032 * 0.5;
        float _1101 = _1042 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_335, _336, _337), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3606 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1126 + 1.0))) + _1131) * _1055;
        float _1141 = _1023 * 0.5;
        float _1142 = _1033 * 0.5;
        float _1143 = _1043 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_335, _336, _337), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3639 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_1168 + 1.0))) + _1173) * _1056;
        _1190 = _1023;
        _1191 = _1022;
        _1192 = _1021;
        _1193 = _1033;
        _1194 = _1032;
        _1195 = _1031;
        _1196 = _1043;
        _1197 = _1042;
        _1198 = _1041;
        _1199 = _1056;
        _1200 = _1055;
        _1201 = _1054;
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _881;
        _1191 = _881;
        _1192 = _881;
        _1193 = _881;
        _1194 = _881;
        _1195 = _881;
        _1196 = _881;
        _1197 = _881;
        _1198 = _881;
        _1199 = _881;
        _1200 = _881;
        _1201 = _881;
        _1202 = 0.0;
        _1203 = 0.0;
        _1204 = 0.0;
    }
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _893)) + _893;
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _894)) + _894;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _895)) + _895;
    float _1237 = fma(_1216, cbSceneParam._m0[89u].z, fma(_1215, cbSceneParam._m0[89u].y, _1214 * cbSceneParam._m0[89u].x));
    float _1240 = fma(_1216, cbSceneParam._m0[90u].z, fma(_1215, cbSceneParam._m0[90u].y, _1214 * cbSceneParam._m0[90u].x));
    float _1243 = fma(_1216, cbSceneParam._m0[91u].z, fma(_1215, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1214));
    float _1258 = _514 * 0.5;
    float _1259 = _515 * 0.5;
    float _1260 = _516 * 0.5;
    float _1261 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1264 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1267 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1301;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1274 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_880, _884, _887, _890));
        float _1278 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_882, _885, _888, _891));
        float _1282 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_883, _886, _889, _892));
        float _1289 = dot(vec4(cbModelParam._m0[39u]), vec4(_1258, _1259, _1260, 1.0));
        _1301 = dot(vec3(isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1301 = 1.0;
    }
    float _1312;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1303 = dot(vec4(cbModelParam._m0[40u]), vec4(_1258, _1259, _1260, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1303) ? 0.0 : (isnan(0.0) ? _1303 : max(0.0, _1303))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1316 = (_1312 * cbModelParam._m0[1u].x) + (_1301 * (1.0 - cbModelParam._m0[1u].x));
    float _1326 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _339);
    float _1327 = isnan(_1326) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1326 : min(cbModelParam._m0[25u].z, _1326));
    float _1409;
    float _1411;
    float _1413;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1376 = fma(_578, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570)) + cbModelParam._m0[13u].w;
        float _1380 = fma(_578, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570)) + cbModelParam._m0[14u].w;
        float _1384 = fma(_578, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570)) + cbModelParam._m0[15u].w;
        float _1387 = fma(_516, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514));
        float _1390 = fma(_516, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514));
        float _1393 = fma(_516, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514));
        float _1421;
        if (_1387 > 0.0)
        {
            _1421 = abs((1.0 - _1376) / _1387);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1376 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1421 = frontier_phi_16_14_ladder;
        }
        float _1648;
        if (_1390 > 0.0)
        {
            _1648 = abs((1.0 - _1380) / _1390);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1380 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1648 = frontier_phi_25_21_ladder;
        }
        float _1905;
        if (_1393 > 0.0)
        {
            _1905 = abs((1.0 - _1384) / _1393);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1384 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1905 = frontier_phi_37_32_ladder;
        }
        float _1907 = isnan(_1648) ? _1421 : (isnan(_1421) ? _1648 : min(_1421, _1648));
        float _1908 = isnan(_1905) ? _1907 : (isnan(_1907) ? _1905 : min(_1907, _1905));
        float _1912 = (_1908 * _1387) + _1376;
        float _1913 = (_1908 * _1390) + _1380;
        float _1914 = (_1908 * _1393) + _1384;
        float _1915 = _1908 * 9.9999997473787516355514526367188e-05;
        float _1917 = (-1.0) - _1915;
        float _1919 = _1915 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1914 > _1919) || ((_1914 < _1917) || ((_1913 > _1919) || ((_1913 < _1917) || ((_1912 < _1917) || (_1912 > _1919))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2042 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1914, cbModelParam._m0[9u].z, fma(_1913, cbModelParam._m0[9u].y, _1912 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1914, cbModelParam._m0[10u].z, fma(_1913, cbModelParam._m0[10u].y, _1912 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1914, cbModelParam._m0[11u].z, fma(_1913, cbModelParam._m0[11u].y, _1912 * cbModelParam._m0[11u].x))), _1327);
            frontier_phi_15_37_ladder = _2042.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2042.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2042.x * cbModelParam._m0[1u].y;
        }
        _1409 = frontier_phi_15_37_ladder_2;
        _1411 = frontier_phi_15_37_ladder_1;
        _1413 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_514, _515, _516), _1327);
        _1409 = _1397.x * cbModelParam._m0[1u].y;
        _1411 = _1397.y * cbModelParam._m0[1u].y;
        _1413 = _1397.z * cbModelParam._m0[1u].y;
    }
    float _1417 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _339);
    float _1418 = isnan(_1417) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1417 : min(cbModelParam._m0[25u].w, _1417));
    float _1510;
    float _1512;
    float _1514;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1474 = fma(_578, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570)) + cbModelParam._m0[21u].w;
        float _1478 = fma(_578, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570)) + cbModelParam._m0[22u].w;
        float _1482 = fma(_578, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570)) + cbModelParam._m0[23u].w;
        float _1485 = fma(_516, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514));
        float _1488 = fma(_516, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514));
        float _1491 = fma(_516, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514));
        float _1653;
        if (_1485 > 0.0)
        {
            _1653 = abs((1.0 - _1474) / _1485);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1474 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1653 = frontier_phi_27_23_ladder;
        }
        float _1932;
        if (_1488 > 0.0)
        {
            _1932 = abs((1.0 - _1478) / _1488);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1478 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1932 = frontier_phi_39_34_ladder;
        }
        float _2145;
        if (_1491 > 0.0)
        {
            _2145 = abs((1.0 - _1482) / _1491);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1482 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2145 = frontier_phi_48_45_ladder;
        }
        float _2147 = isnan(_1932) ? _1653 : (isnan(_1653) ? _1932 : min(_1653, _1932));
        float _2148 = isnan(_2145) ? _2147 : (isnan(_2147) ? _2145 : min(_2147, _2145));
        float _2152 = (_2148 * _1485) + _1474;
        float _2153 = (_2148 * _1488) + _1478;
        float _2154 = (_2148 * _1491) + _1482;
        float _2155 = _2148 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2155;
        float _2158 = _2155 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2154 > _2158) || ((_2154 < _2156) || ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 < _2156) || (_2152 > _2158))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2154, cbModelParam._m0[17u].z, fma(_2153, cbModelParam._m0[17u].y, _2152 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2154, cbModelParam._m0[18u].z, fma(_2153, cbModelParam._m0[18u].y, _2152 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2154, cbModelParam._m0[19u].z, fma(_2153, cbModelParam._m0[19u].y, _2152 * cbModelParam._m0[19u].x))), _1418);
            frontier_phi_24_48_ladder = _2389.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2389.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2389.x * cbModelParam._m0[1u].z;
        }
        _1510 = frontier_phi_24_48_ladder_2;
        _1512 = frontier_phi_24_48_ladder_1;
        _1514 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1494 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_514, _515, _516), _1418);
        _1510 = _1494.x * cbModelParam._m0[1u].z;
        _1512 = _1494.y * cbModelParam._m0[1u].z;
        _1514 = _1494.z * cbModelParam._m0[1u].z;
    }
    float _1527 = (((_541 * _491) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1510 - _1409)) + _1409);
    float _1529 = (((_541 * _493) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1512 - _1411)) + _1411);
    float _1531 = (((_541 * _494) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1514 - _1413)) + _1413);
    float _1534 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1529, cbSceneParam._m0[89u].y, _1527 * cbSceneParam._m0[89u].x));
    float _1537 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1529, cbSceneParam._m0[90u].y, _1527 * cbSceneParam._m0[90u].x));
    float _1540 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1529, cbSceneParam._m0[91u].y, _1527 * cbSceneParam._m0[91u].x));
    vec4 _1548 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_425, _426));
    float _1550 = _1548.w;
    float _1562 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1550);
    float _1563 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1550);
    float _1564 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1550);
    uvec4 _1568 = floatBitsToUint(cbInstanceData._m0[_466 + 5u]);
    uint _1570 = _1568.x * 14u;
    uint _1571 = _1570 + 13u;
    float _1578 = _506 + (-1.0);
    float _1583 = (cbLight._m0[_1571].x * _1578) + 1.0;
    float _1584 = (cbLight._m0[_1571].y * _1578) + 1.0;
    float _1585 = (cbLight._m0[_1571].z * _1578) + 1.0;
    float _1586 = (cbLight._m0[_1571].w * _1578) + 1.0;
    uint _1587 = _1570 + 5u;
    float _1593 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
    uint _1597 = _1570 + 4u;
    float _1607 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
    uint _1611 = _1570 | 1u;
    float _1622 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_335, _336, _337));
    float _1625 = dot(vec3(cbLight._m0[_1611].xyz), vec3(_335, _336, _337));
    float _3775 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _3786 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
    float _1630 = (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 0.3183098733425140380859375;
    float _1632 = (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * 0.3183098733425140380859375;
    float _1639 = ((cbLight._m0[_1587].x * _1593) * _1632) + (((cbLight._m0[_1597].x * _1562) * _1607) * _1630);
    float _1640 = ((_1593 * cbLight._m0[_1587].y) * _1632) + (((cbLight._m0[_1597].y * _1563) * _1607) * _1630);
    float _1641 = ((_1593 * cbLight._m0[_1587].z) * _1632) + (((cbLight._m0[_1597].z * _1564) * _1607) * _1630);
    uvec4 _1645 = floatBitsToUint(cbLight._m0[_1570 + 12u]);
    bool _1647 = _1645.x == 0u;
    float _1658;
    float _1660;
    float _1662;
    if (_1647)
    {
        _1658 = _1639;
        _1660 = _1640;
        _1662 = _1641;
    }
    else
    {
        uint _1666 = _1570 + 6u;
        float _1682 = (dot(vec3(cbLight._m0[_1570 + 2u].xyz), vec3(_335, _336, _337)) * 0.5) + 0.5;
        float _1683 = _1682 * _1682;
        float _3797 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1685 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
        _1658 = (((cbLight._m0[_1666].x * 0.3183098733425140380859375) * _1684) * _1685) + _1639;
        _1660 = (((cbLight._m0[_1666].y * 0.3183098733425140380859375) * _1684) * _1685) + _1640;
        _1662 = (((cbLight._m0[_1666].z * 0.3183098733425140380859375) * _1684) * _1685) + _1641;
    }
    bool _1665 = _1645.y == 0u;
    float _1703;
    float _1705;
    float _1707;
    if (_1665)
    {
        _1703 = _1658;
        _1705 = _1660;
        _1707 = _1662;
    }
    else
    {
        uint _1876 = _1570 + 7u;
        float _1892 = (dot(vec3(cbLight._m0[_1570 + 3u].xyz), vec3(_335, _336, _337)) * 0.5) + 0.5;
        float _1893 = _1892 * _1892;
        float _3813 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1895 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1703 = (((cbLight._m0[_1876].x * 0.3183098733425140380859375) * _1894) * _1895) + _1658;
        _1705 = (((cbLight._m0[_1876].y * 0.3183098733425140380859375) * _1894) * _1895) + _1660;
        _1707 = (((cbLight._m0[_1876].z * 0.3183098733425140380859375) * _1894) * _1895) + _1662;
    }
    uint _1710 = _1570 + 8u;
    float _1723 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1570].w)) * _339) * 0.949999988079071044921875);
    float _1724 = _1723 * _1723;
    float _1725 = cbLight._m0[_1570].x + _417;
    float _1726 = cbLight._m0[_1570].y + _418;
    float _1727 = cbLight._m0[_1570].z + _419;
    float _1731 = inversesqrt(dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727)));
    float _1732 = _1731 * _1725;
    float _1733 = _1731 * _1726;
    float _1734 = _1731 * _1727;
    float _1735 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1570].xyz));
    float _3829 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1738 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _1739 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _1740 = dot(vec3(_335, _336, _337), vec3(_1732, _1733, _1734));
    float _3851 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1743 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _1744 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_1732, _1733, _1734));
    float _3862 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1748 = _1724 * _1724;
    float _1752 = ((_1743 * _1743) * (_1748 + (-1.0))) + 1.0;
    float _1760 = exp2(log2(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * 5.0);
    float _1761 = 0.959999978542327880859375 - _488;
    float _1763 = 0.959999978542327880859375 - _489;
    float _1764 = 0.959999978542327880859375 - _490;
    float _1771 = 1.0 - _1724;
    float _1782 = (0.5 / (((_1739 * ((_1738 * _1771) + _1724)) + 9.9999999392252902907785028219223e-09) + (((_1739 * _1771) + _1724) * _1738))) * _1738;
    float _3873 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1784 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1748 / ((_1752 * _1752) * 3.141590118408203125));
    uint _1798 = _1570 + 9u;
    float _1809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1611].w)) * _339) * 0.949999988079071044921875);
    float _1810 = _1809 * _1809;
    float _1811 = cbLight._m0[_1611].x + _417;
    float _1812 = cbLight._m0[_1611].y + _418;
    float _1813 = cbLight._m0[_1611].z + _419;
    float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
    float _1818 = _1817 * _1811;
    float _1819 = _1817 * _1812;
    float _1820 = _1817 * _1813;
    float _1821 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1611].xyz));
    float _3884 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1825 = dot(vec3(_335, _336, _337), vec3(_1818, _1819, _1820));
    float _3895 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1829 = dot(vec3(cbLight._m0[_1611].xyz), vec3(_1818, _1819, _1820));
    float _3906 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1833 = _1810 * _1810;
    float _1837 = ((_1828 * _1828) * (_1833 + (-1.0))) + 1.0;
    float _1844 = exp2(log2(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * 5.0);
    float _1851 = 1.0 - _1810;
    float _1861 = (0.5 / (((_1739 * ((_1824 * _1851) + _1810)) + 9.9999999392252902907785028219223e-09) + (((_1739 * _1851) + _1810) * _1824))) * _1824;
    float _3917 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1863 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1833 / ((_1837 * _1837) * 3.141590118408203125));
    float _1873 = (((((_1844 * _1761) + _491) * cbLight._m0[_1798].x) * _1863) * _1593) + ((((cbLight._m0[_1710].x * _1562) * ((_1760 * _1761) + _491)) * _1784) * _1607);
    float _1874 = (((((_1844 * _1763) + _493) * cbLight._m0[_1798].y) * _1863) * _1593) + ((((cbLight._m0[_1710].y * _1563) * ((_1760 * _1763) + _493)) * _1784) * _1607);
    float _1875 = (((((_1844 * _1764) + _494) * cbLight._m0[_1798].z) * _1863) * _1593) + ((((cbLight._m0[_1710].z * _1564) * ((_1760 * _1764) + _494)) * _1784) * _1607);
    float _1937;
    float _1939;
    float _1941;
    if (_1647)
    {
        _1937 = _1873;
        _1939 = _1874;
        _1941 = _1875;
    }
    else
    {
        uint _1943 = _1570 + 2u;
        uint _1947 = _1570 + 10u;
        float _1961 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _339) * 0.949999988079071044921875);
        float _1962 = _1961 * _1961;
        float _1963 = cbLight._m0[_1943].x + _417;
        float _1964 = cbLight._m0[_1943].y + _418;
        float _1965 = cbLight._m0[_1943].z + _419;
        float _1969 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
        float _1970 = _1969 * _1963;
        float _1971 = _1969 * _1964;
        float _1972 = _1969 * _1965;
        float _1973 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1943].xyz));
        float _3928 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1976 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1977 = dot(vec3(_335, _336, _337), vec3(_1970, _1971, _1972));
        float _3939 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1980 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1981 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_1970, _1971, _1972));
        float _3950 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1985 = _1962 * _1962;
        float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
        float _1996 = exp2(log2(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * 5.0);
        float _2003 = 1.0 - _1962;
        float _2013 = (0.5 / (((_1739 * ((_1976 * _2003) + _1962)) + 9.9999999392252902907785028219223e-09) + (((_1739 * _2003) + _1962) * _1976))) * _1976;
        float _3961 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2015 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
        float _2016 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
        _1937 = (((((_1996 * _1761) + _491) * cbLight._m0[_1947].x) * _2015) * _2016) + _1873;
        _1939 = (((((_1996 * _1763) + _493) * cbLight._m0[_1947].y) * _2015) * _2016) + _1874;
        _1941 = (((((_1996 * _1764) + _494) * cbLight._m0[_1947].z) * _2015) * _2016) + _1875;
    }
    float _2051;
    float _2053;
    float _2055;
    if (_1665)
    {
        _2051 = _1937;
        _2053 = _1939;
        _2055 = _1941;
    }
    else
    {
        uint _2062 = _1570 + 3u;
        uint _2066 = _1570 + 11u;
        float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _339) * 0.949999988079071044921875);
        float _2081 = _2080 * _2080;
        float _2082 = cbLight._m0[_2062].x + _417;
        float _2083 = cbLight._m0[_2062].y + _418;
        float _2084 = cbLight._m0[_2062].z + _419;
        float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
        float _2089 = _2088 * _2082;
        float _2090 = _2088 * _2083;
        float _2091 = _2088 * _2084;
        float _2092 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_2062].xyz));
        float _3977 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2096 = dot(vec3(_335, _336, _337), vec3(_2089, _2090, _2091));
        float _3988 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _2100 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2089, _2090, _2091));
        float _3999 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2104 = _2081 * _2081;
        float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
        float _2115 = exp2(log2(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * 5.0);
        float _2122 = 1.0 - _2081;
        float _2132 = (0.5 / (((_1739 * ((_2095 * _2122) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_1739 * _2122) + _2081) * _2095))) * _2095;
        float _4010 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2134 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
        float _2135 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _2051 = (((((_2115 * _1761) + _491) * cbLight._m0[_2066].x) * _2134) * _2135) + _1937;
        _2053 = (((((_2115 * _1763) + _493) * cbLight._m0[_2066].y) * _2134) * _2135) + _1939;
        _2055 = (((((_2115 * _1764) + _494) * cbLight._m0[_2066].z) * _2134) * _2135) + _1941;
    }
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    if (_1568.y == 0u)
    {
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2210;
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2210;
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2210;
        uvec4 _2225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2226 = _2225.x;
        uint _2237 = uint((float(_2225.y) * floor(float(uint(cbSceneParam._m0[85u].y * _426) / _2226))) + floor(float(uint(cbSceneParam._m0[85u].x * _425) / _2226)));
        float _2247 = (log2(_2213 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2248 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        uint _2251 = uint(isnan(14.0) ? _2248 : (isnan(_2248) ? 14.0 : min(_2248, 14.0)));
        uvec4 _2256 = texelFetch(g_lightClusterGridBuffer, int(((_2251 << 2u) + (_2237 << 6u)) >> 2u));
        uint _2257 = _2256.x;
        uint _2258 = _2225.z;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        if (((((1u << ((_2258 >> 4u) & 15u)) + 4294967295u) & _2257) == 0u) || ((_2258 & 240u) == 0u))
        {
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
        }
        else
        {
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2405;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            uint _2553 = 0u;
            uint _2562;
            bool _2563;
            for (;;)
            {
                _2562 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2553 << 2u)) >> 2u)).x;
                _2563 = _2562 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2563)
                {
                    frontier_phi_63_pred = _2552;
                    frontier_phi_63_pred_1 = _2551;
                    frontier_phi_63_pred_2 = _2550;
                    frontier_phi_63_pred_3 = _2549;
                    frontier_phi_63_pred_4 = _2548;
                    frontier_phi_63_pred_5 = _2547;
                }
                else
                {
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    uint _2677;
                    _2671 = _2547;
                    _2672 = _2548;
                    _2673 = _2549;
                    _2674 = _2550;
                    _2675 = _2551;
                    _2676 = _2552;
                    _2677 = _2562;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    for (;;)
                    {
                        uint _2681 = uint(findLSB(_2677)) + (_2553 << 5u);
                        uint _2678 = (_2677 + 4294967295u) & _2677;
                        uint _2683 = _2681 * 48u;
                        vec4 _2697 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2683)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 3u)).x));
                        uint _2703 = (_2681 * 48u) + 4u;
                        vec4 _2716 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2703)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 3u)).x));
                        uint _2722 = (_2681 * 48u) + 8u;
                        vec3 _2733 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2722)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 2u)).x));
                        float _2737 = _2697.x - _2211;
                        float _2738 = _2697.y - _2212;
                        float _2739 = _2697.z - _2213;
                        float _2740 = dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739));
                        float _2743 = inversesqrt(_2740);
                        float _2744 = _2743 * _2737;
                        float _2745 = _2743 * _2738;
                        float _2746 = _2743 * _2739;
                        float _2747 = dot(vec3(_447, _450, _453), vec3(_2744, _2745, _2746));
                        float _2752 = 1.0 - (_2740 * _2697.w);
                        float _4036 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2753 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                        float _2754 = sqrt(_2740) * _2716.w;
                        float _2757 = 1.39999997615814208984375 / (_2754 + 1.39999997615814208984375);
                        float _2758 = _2757 * _2757;
                        float _2761 = ((1.0 - _2758) * _2747) + _2758;
                        float _2764 = _2754 * _2754;
                        float _2768 = ((isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0))) * _2753) / ((_2764 * 0.699999988079071044921875) + 1.0);
                        float _2772 = (-0.0) - _2211;
                        float _2773 = (-0.0) - _2212;
                        float _2774 = (-0.0) - _2213;
                        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
                        float _2779 = _2778 * _2772;
                        float _2780 = _2778 * _2773;
                        float _2781 = _2778 * _2774;
                        float _2789 = exp2(log2(1.0 / ((_2764 * 3.5) + 5.0)) * 0.25);
                        float _2790 = 1.0 - _522;
                        float _2797 = sqrt(1.0 - ((1.0 - (_2790 * _2790)) * (1.0 - (_2789 * _2789))));
                        float _2798 = _2797 * _2797;
                        float _2799 = _2798 * _2798;
                        float _2800 = _2779 + _2744;
                        float _2801 = _2780 + _2745;
                        float _2802 = _2781 + _2746;
                        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
                        float _2810 = dot(vec3(_447, _450, _453), vec3(_2779, _2780, _2781));
                        float _4052 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2813 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
                        float _2814 = dot(vec3(_447, _450, _453), vec3(_2806 * _2800, _2806 * _2801, _2806 * _2802));
                        float _4063 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2817 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                        float _2821 = ((_2817 * _2817) * (_2799 + (-1.0))) + 1.0;
                        float _2822 = _2757 * _2798;
                        float _2823 = _2822 * _2822;
                        float _2826 = ((1.0 - _2823) * _2747) + _2823;
                        float _4074 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2827 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2828 = 1.0 - _2798;
                        float _2838 = (0.5 / (((_2827 * ((_2813 * _2828) + _2798)) + 9.9999999392252902907785028219223e-09) + (((_2827 * _2828) + _2798) * _2813))) * _2827;
                        float _4085 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2849 = (((_2799 * 3.1415927410125732421875) * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) / ((_2821 * _2821) * ((_2764 * 2.1991131305694580078125) + 3.141590118408203125))) * _2753;
                        _2606 = (_2768 * _2716.x) + _2674;
                        _2607 = (_2768 * _2716.y) + _2675;
                        _2608 = (_2768 * _2716.z) + _2676;
                        _2603 = (_2849 * _2733.x) + _2671;
                        _2604 = (_2849 * _2733.y) + _2672;
                        _2605 = (_2849 * _2733.z) + _2673;
                        if (_2678 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2671 = _2603;
                            _2672 = _2604;
                            _2673 = _2605;
                            _2674 = _2606;
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2678;
                        }
                    }
                    frontier_phi_63_pred = _2608;
                    frontier_phi_63_pred_1 = _2607;
                    frontier_phi_63_pred_2 = _2606;
                    frontier_phi_63_pred_3 = _2605;
                    frontier_phi_63_pred_4 = _2604;
                    frontier_phi_63_pred_5 = _2603;
                }
                _2405 = frontier_phi_63_pred;
                _2403 = frontier_phi_63_pred_1;
                _2401 = frontier_phi_63_pred_2;
                _2399 = frontier_phi_63_pred_3;
                _2397 = frontier_phi_63_pred_4;
                _2395 = frontier_phi_63_pred_5;
                uint _2554 = _2553 + 1u;
                if (_2554 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2547 = _2395;
                    _2548 = _2397;
                    _2549 = _2399;
                    _2550 = _2401;
                    _2551 = _2403;
                    _2552 = _2405;
                    _2553 = _2554;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
        }
        uvec4 _2408 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2409 = _2408.z;
        uint _2411 = (_2409 >> 8u) & 15u;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        if (((4294967295u << _2411) & _2257) == 0u)
        {
            _2515 = _2394;
            _2517 = _2396;
            _2519 = _2398;
            _2521 = _2400;
            _2523 = _2402;
            _2525 = _2404;
        }
        else
        {
            float _2540 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
            float _2541 = _2540 * _2211;
            float _2542 = _2540 * _2212;
            float _2543 = _2540 * _2213;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2411 < ((_2409 >> 12u) & 15u))
            {
                float _2516;
                float _2518;
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2654 = _2394;
                float _2655 = _2396;
                float _2656 = _2398;
                float _2657 = _2400;
                float _2658 = _2402;
                float _2659 = _2404;
                uint _2660 = _2411;
                uint _2669;
                bool _2670;
                for (;;)
                {
                    _2669 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2660 << 2u)) >> 2u)).x;
                    _2670 = _2669 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2670)
                    {
                        frontier_phi_69_pred = _2659;
                        frontier_phi_69_pred_1 = _2658;
                        frontier_phi_69_pred_2 = _2657;
                        frontier_phi_69_pred_3 = _2656;
                        frontier_phi_69_pred_4 = _2655;
                        frontier_phi_69_pred_5 = _2654;
                    }
                    else
                    {
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _2867 = _2654;
                        float _2868 = _2655;
                        float _2869 = _2656;
                        float _2870 = _2657;
                        float _2871 = _2658;
                        float _2872 = _2659;
                        uint _2873 = _2669;
                        uint _2874;
                        vec4 _2899;
                        float _2900;
                        vec4 _2915;
                        vec3 _2927;
                        vec4 _2943;
                        vec4 _2959;
                        float _3006;
                        bool _3007;
                        for (;;)
                        {
                            uint _2884 = ((_2660 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2873));
                            _2874 = (_2873 + 4294967295u) & _2873;
                            uint _2886 = _2884 * 40u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            _2900 = _2899.w;
                            uint _2902 = (_2884 * 40u) + 4u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2917 = (_2884 * 40u) + 8u;
                            _2927 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x));
                            uint _2930 = (_2884 * 40u) + 16u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2946 = (_2884 * 40u) + 20u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2962 = (_2884 * 40u) + 24u;
                            vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2981 = (_2884 * 40u) + 28u;
                            vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            _3006 = fma(_2213, _2994.z, fma(_2212, _2994.y, _2994.x * _2211)) + _2994.w;
                            _3007 = !((fma(_2213, _2975.z, fma(_2212, _2975.y, _2975.x * _2211)) + _2975.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3007)
                            {
                                float _3034 = _2899.x - _2211;
                                float _3035 = _2899.y - _2212;
                                float _3036 = _2899.z - _2213;
                                float _3037 = dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036));
                                float _3040 = inversesqrt(_3037);
                                float _3041 = _3040 * _3034;
                                float _3042 = _3040 * _3035;
                                float _3043 = _3040 * _3036;
                                float _3047 = 1.0 - (_3037 / (_2900 * _2900));
                                float _4096 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3048 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3052 = sqrt(_3037) * _2915.w;
                                float _3054 = 1.39999997615814208984375 / (_3052 + 1.39999997615814208984375);
                                float _3055 = _3054 * _3054;
                                float _3058 = ((1.0 - _3055) * dot(vec3(_3041, _3042, _3043), vec3(_447, _450, _453))) + _3055;
                                float _3061 = _3052 * _3052;
                                float _3065 = (fma(_2213, _2943.z, fma(_2212, _2943.y, _2943.x * _2211)) + _2943.w) / _3006;
                                float _3066 = (fma(_2213, _2959.z, fma(_2212, _2959.y, _2959.x * _2211)) + _2959.w) / _3006;
                                float _3070 = 1.0 - dot(vec2(_3065, _3066), vec2(_3065, _3066));
                                float _4112 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3071 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                                float _3072 = _3071 * (((isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))) * _3048) / ((_3061 * 0.699999988079071044921875) + 1.0));
                                float _3084 = exp2(log2(1.0 / ((_3061 * 3.5) + 5.0)) * 0.25);
                                float _3085 = 1.0 - _522;
                                float _3092 = sqrt(1.0 - ((1.0 - (_3085 * _3085)) * (1.0 - (_3084 * _3084))));
                                float _3093 = _3092 * _3092;
                                float _3094 = _3093 * _3093;
                                float _3095 = _3041 - _2541;
                                float _3096 = _3042 - _2542;
                                float _3097 = _3043 - _2543;
                                float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                                float _3105 = dot(vec3(_447, _450, _453), vec3((-0.0) - _2541, (-0.0) - _2542, (-0.0) - _2543));
                                float _4123 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3108 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                                float _3109 = dot(vec3(_447, _450, _453), vec3(_3101 * _3095, _3101 * _3096, _3101 * _3097));
                                float _4134 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3112 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3116 = ((_3112 * _3112) * (_3094 + (-1.0))) + 1.0;
                                float _3117 = _3054 * _3093;
                                float _3118 = _3117 * _3117;
                                float _3124 = ((1.0 - _3118) * dot(vec3(_447, _450, _453), vec3(_3041, _3042, _3043))) + _3118;
                                float _4145 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3125 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3126 = 1.0 - _3093;
                                float _3136 = (0.5 / (((_3125 * ((_3108 * _3126) + _3093)) + 9.9999999392252902907785028219223e-09) + (((_3125 * _3126) + _3093) * _3108))) * _3125;
                                float _4156 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3146 = (_3071 * _3048) * (((_3094 * 3.1415927410125732421875) * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) / ((_3116 * _3116) * ((_3061 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3072 * _2915.z;
                                frontier_phi_75_pred_1 = _3072 * _2915.y;
                                frontier_phi_75_pred_2 = _3072 * _2915.x;
                                frontier_phi_75_pred_3 = _3146 * _2927.z;
                                frontier_phi_75_pred_4 = _3146 * _2927.y;
                                frontier_phi_75_pred_5 = _3146 * _2927.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3155 = frontier_phi_75_pred;
                            _3154 = frontier_phi_75_pred_1;
                            _3153 = frontier_phi_75_pred_2;
                            _3152 = frontier_phi_75_pred_3;
                            _3151 = frontier_phi_75_pred_4;
                            _3150 = frontier_phi_75_pred_5;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            _2856 = _3152 + _2869;
                            if (_2874 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2874;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2859;
                        frontier_phi_69_pred_1 = _2858;
                        frontier_phi_69_pred_2 = _2857;
                        frontier_phi_69_pred_3 = _2856;
                        frontier_phi_69_pred_4 = _2855;
                        frontier_phi_69_pred_5 = _2854;
                    }
                    _2526 = frontier_phi_69_pred;
                    _2524 = frontier_phi_69_pred_1;
                    _2522 = frontier_phi_69_pred_2;
                    _2520 = frontier_phi_69_pred_3;
                    _2518 = frontier_phi_69_pred_4;
                    _2516 = frontier_phi_69_pred_5;
                    uint _2661 = _2660 + 1u;
                    if (_2661 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2654 = _2516;
                        _2655 = _2518;
                        _2656 = _2520;
                        _2657 = _2522;
                        _2658 = _2524;
                        _2659 = _2526;
                        _2660 = _2661;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2526;
                frontier_phi_57_58_ladder_1 = _2524;
                frontier_phi_57_58_ladder_2 = _2522;
                frontier_phi_57_58_ladder_3 = _2520;
                frontier_phi_57_58_ladder_4 = _2518;
                frontier_phi_57_58_ladder_5 = _2516;
            }
            else
            {
                frontier_phi_57_58_ladder = _2404;
                frontier_phi_57_58_ladder_1 = _2402;
                frontier_phi_57_58_ladder_2 = _2400;
                frontier_phi_57_58_ladder_3 = _2398;
                frontier_phi_57_58_ladder_4 = _2396;
                frontier_phi_57_58_ladder_5 = _2394;
            }
            _2515 = frontier_phi_57_58_ladder_5;
            _2517 = frontier_phi_57_58_ladder_4;
            _2519 = frontier_phi_57_58_ladder_3;
            _2521 = frontier_phi_57_58_ladder_2;
            _2523 = frontier_phi_57_58_ladder_1;
            _2525 = frontier_phi_57_58_ladder;
        }
        float _2530 = isnan(1.0) ? _506 : (isnan(_506) ? 1.0 : min(_506, 1.0));
        _2269 = (_2530 * _2521) + _1703;
        _2271 = (_2530 * _2523) + _1705;
        _2273 = (_2530 * _2525) + _1707;
        _2275 = ((_2515 * _491) * _2530) + _2051;
        _2277 = ((_2517 * _493) * _2530) + _2053;
        _2279 = ((_2519 * _494) * _2530) + _2055;
    }
    else
    {
        _2269 = _1703;
        _2271 = _1705;
        _2273 = _1707;
        _2275 = _2051;
        _2277 = _2053;
        _2279 = _2055;
    }
    uint _2285 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _2293 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _317.x) * cbInstanceData._m0[_2285].x;
    float _2296 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _317.y) * cbInstanceData._m0[_2285].y;
    float _2299 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _317.z) * cbInstanceData._m0[_2285].z;
    float _4172 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4183 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4194 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4205 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _2317 = (((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2269 + ((isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))) * _506))) + ((_2275 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _1316)) * cbPerFrame._m0[3u].x)) + _2293;
    float _2319 = (_2296 + ((_2277 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _1316)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2271 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _506)));
    float _2321 = (_2299 + ((_2279 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1316)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2273 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _506)));
    float _4231 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2334 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2339 = cbInstanceData._m0[_466 + 6u].w * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)));
    float _2344 = _425 / cbSceneParam._m0[86u].x;
    float _2345 = _426 / cbSceneParam._m0[86u].y;
    vec4 _2359 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2344, _2345, (log2((isnan(cbSceneParam._m0[77u].w) ? _359 : (isnan(_359) ? cbSceneParam._m0[77u].w : min(_359, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2361 = _2359.x;
    float _2362 = _2359.y;
    float _2363 = _2359.z;
    float _2364 = _2359.w;
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    if (_359 > cbSceneParam._m0[78u].w)
    {
        float _2419 = isnan(_359) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _359 : min(cbSceneParam._m0[80u].w, _359));
        float _2420 = _2419 / _359;
        float _2431 = _2420 * _410;
        float _2432 = _411 * _2420;
        float _2433 = (-0.0) - _2432;
        float _2434 = _2420 * _412;
        float _2436 = (cbSceneParam._m0[77u].w * _2433) / _2419;
        float _2437 = _2436 + cbSceneParam._m0[79u].w;
        float _2438 = cbSceneParam._m0[79u].w - _2432;
        float _2444 = sqrt(((_2431 * _2431) + (_2432 * _2432)) + (_2434 * _2434));
        float _2447 = (1.0 - (cbSceneParam._m0[77u].w / _2419)) * _2444;
        float _2452 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2454 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2616;
        if (abs((_2433 - _2436) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2616 = ((((_2437 > 0.0) ? exp2(_2452 * _2437) : (2.0 - exp2(_2454 * _2437))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2447;
        }
        else
        {
            float _2576 = 1.0 / cbSceneParam._m0[80u].x;
            float _2577 = isnan(_2438) ? _2437 : (isnan(_2437) ? _2438 : max(_2437, _2438));
            float _2578 = isnan(_2438) ? _2437 : (isnan(_2437) ? _2438 : min(_2437, _2438));
            float _2587 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : min(_2577, 0.0));
            float _2588 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : min(_2578, 0.0));
            _2616 = ((abs(_2444 / _2433) * cbSceneParam._m0[80u].y) * ((((_2587 - _2588) * 2.0) - ((exp2(_2452 * (isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0)))) - exp2(_2452 * (isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0))))) * _2576)) - ((exp2(_2454 * _2587) - exp2(_2454 * _2588)) * _2576))) + (_2447 * cbSceneParam._m0[80u].z);
        }
        vec4 _2618 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2344, _2345, 1.0), 0.0);
        float _2627 = exp2((_2616 * (-1.44269502162933349609375)) * (1.0 - _2618.w));
        float _2628 = log2(_2627);
        float _2644 = log2(_2364);
        _2456 = (exp2(_2644 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2628 * cbSceneParam._m0[78u].x)) * _2618.x) / cbSceneParam._m0[78u].x)) + _2361;
        _2458 = (exp2(_2644 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2628 * cbSceneParam._m0[78u].y)) * _2618.y) / cbSceneParam._m0[78u].y)) + _2362;
        _2460 = (exp2(_2644 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2628 * cbSceneParam._m0[78u].z)) * _2618.z) / cbSceneParam._m0[78u].z)) + _2363;
        _2462 = _2627 * _2364;
    }
    else
    {
        _2456 = _2361;
        _2458 = _2362;
        _2460 = _2363;
        _2462 = _2364;
    }
    float _2474 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2475 = _2474 == 3.0;
    float _2476 = log2(_2462);
    float _2480 = exp2(_2476 * cbSceneParam._m0[78u].x);
    float _2481 = exp2(_2476 * cbSceneParam._m0[78u].y);
    float _2482 = exp2(_2476 * cbSceneParam._m0[78u].z);
    float _2483 = _2480 * (isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0)));
    float _2484 = _2481 * (isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0)));
    float _2485 = _2482 * (isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0)));
    float _2494 = (_2474 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2494 * (_2475 ? _2483 : (_2483 + (cbSceneParam._m0[72u].w * _2456)));
    SV_Target.y = _2494 * (_2475 ? _2484 : (_2484 + (cbSceneParam._m0[72u].w * _2458)));
    SV_Target.z = _2494 * (_2475 ? _2485 : (_2485 + (cbSceneParam._m0[72u].w * _2460)));
    SV_Target.w = _2339;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2293) * _2334) * _2480) * _2494;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2296) * _2334) * _2481) * _2494;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2299) * _2334) * _2482) * _2494;
    SV_Target_1.w = _2339;
}


