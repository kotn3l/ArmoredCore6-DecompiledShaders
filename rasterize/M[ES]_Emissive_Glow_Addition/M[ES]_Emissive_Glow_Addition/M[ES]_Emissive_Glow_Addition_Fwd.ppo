#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _879;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _232 = (cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _233 = (cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _246 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_232 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_233 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _253 = _246.x * cbMtdParam._m0[9u].x;
    float _254 = _246.y * cbMtdParam._m0[9u].y;
    float _255 = _246.z * cbMtdParam._m0[9u].z;
    float _257 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _246.w;
    vec4 _270 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _232) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _233) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3260 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0))));
    vec4 _315 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[12u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _322 = fma(_287, _215, fma(_280, _207 * TANGENT.x, (_193 * _185) * _278));
    float _325 = fma(_287, _216, fma(_280, _207 * TANGENT.y, (_193 * _186) * _278));
    float _328 = fma(_287, _217, fma(_280, _207 * TANGENT.z, (_193 * _187) * _278));
    float _332 = inversesqrt(dot(vec3(_322, _325, _328), vec3(_322, _325, _328)));
    float _333 = _332 * _322;
    float _334 = _332 * _325;
    float _335 = _332 * _328;
    float _3271 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _336 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
    float _3282 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _337 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    float _3293 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3304 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3315 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3326 = isnan(0.0) ? cbMtdParam._m0[11u].y : (isnan(cbMtdParam._m0[11u].y) ? 0.0 : max(cbMtdParam._m0[11u].y, 0.0));
    float _341 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _357 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _398 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _408 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _398);
    float _409 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _398);
    float _410 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _398);
    float _414 = inversesqrt(dot(vec3(_408, _409, _410), vec3(_408, _409, _410)));
    float _415 = _408 * _414;
    float _416 = _409 * _414;
    float _417 = _410 * _414;
    float _423 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _424 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _445 = fma(_335, cbSceneParam._m0[5u].z, fma(_334, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _333));
    float _448 = fma(_335, cbSceneParam._m0[6u].z, fma(_334, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _333));
    float _451 = fma(_335, cbSceneParam._m0[7u].z, fma(_334, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _333));
    uint _464 = uint(roundEven(NORMAL.w)) * 13u;
    uint _465 = _464 + 9u;
    uint _466 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _472 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) * cbInstanceData._m0[_466].x;
    float _473 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0)))) * cbInstanceData._m0[_466].y;
    float _474 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0)))) * cbInstanceData._m0[_466].z;
    float _3337 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    float _3348 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _3359 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
    float _478 = 1.0 - _341;
    float _479 = _475 * _478;
    float _480 = _476 * _478;
    float _481 = _477 * _478;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _341;
    float _487 = (_476 + (-0.039999999105930328369140625)) * _341;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _341;
    float _489 = _486 + 0.039999999105930328369140625;
    float _491 = _487 + 0.039999999105930328369140625;
    float _492 = _488 + 0.039999999105930328369140625;
    vec4 _501 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _423, cbSceneParam._m0[86u].y * _424));
    float _504 = _501.x * TEXCOORD_1.w;
    float _505 = dot(vec3(_333, _334, _335), vec3(_415, _416, _417));
    float _508 = _505 * 2.0;
    float _512 = (_508 * _333) - _415;
    float _513 = (_508 * _334) - _416;
    float _514 = (_508 * _335) - _417;
    float _518 = abs(dot(vec3(_415, _416, _417), vec3(_333, _334, _335)));
    float _3370 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _520 = sqrt(_337);
    float _533 = exp2((_520 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_520 * 3.0));
    float _539 = (1.0 - _533) * ((_520 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _540 = _533 * _520;
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _878;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _603 = fma(_576, cbModelParam._m0[26u].z, fma(_572, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _568));
        float _607 = fma(_576, cbModelParam._m0[27u].z, fma(_572, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _568));
        float _611 = fma(_576, cbModelParam._m0[28u].z, fma(_572, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _568));
        float _636 = _568 + _333;
        float _637 = _572 + _334;
        float _638 = _576 + _335;
        float _648 = fma(_638, cbModelParam._m0[26u].z, fma(_637, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _636)) - _603;
        float _649 = fma(_638, cbModelParam._m0[27u].z, fma(_637, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _636)) - _607;
        float _650 = fma(_638, cbModelParam._m0[28u].z, fma(_637, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _636)) - _611;
        float _654 = inversesqrt(dot(vec3(_648, _649, _650), vec3(_648, _649, _650)));
        float _667 = ((_654 * _648) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_603 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _668 = ((_654 * _649) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_607 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _669 = ((_654 * _650) / cbModelParam._m0[34u].z) + ((((((_611 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        float _706 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_672.x + (-0.5));
        float _708 = _706 * (_672.y + (-0.5));
        float _709 = _706 * (_672.z + (-0.5));
        float _716 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_679.x + (-0.5));
        float _718 = _716 * (_679.y + (-0.5));
        float _719 = _716 * (_679.z + (-0.5));
        float _726 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_686.x + (-0.5));
        float _728 = _726 * (_686.y + (-0.5));
        float _729 = _726 * (_686.z + (-0.5));
        float _736 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_693.x + (-0.5));
        float _738 = _736 * (_693.y + (-0.5));
        float _739 = _736 * (_693.z + (-0.5));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = _707 * 0.5;
        float _744 = _717 * 0.5;
        float _745 = _727 * 0.5;
        float _746 = dot(vec3(_743, _744, _745), vec3(_743, _744, _745));
        float _751 = (_746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_746);
        float _760 = (dot(vec3(_333, _334, _335), vec3(_751 * _743, _751 * _744, _751 * _745)) + 1.0) * 0.5;
        float _3396 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _770 = sqrt(((_744 * _744) + (_743 * _743)) + (_745 * _745)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3407 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _772 = _771 * 2.0;
        float _776 = (1.0 - _771) / (_771 + 1.0);
        float _3418 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _786 = ((((1.0 - _777) * (_772 + 2.0)) * exp2(log2(isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * (_772 + 1.0))) + _777) * _740;
        float _787 = _708 * 0.5;
        float _788 = _718 * 0.5;
        float _789 = _728 * 0.5;
        float _790 = dot(vec3(_787, _788, _789), vec3(_787, _788, _789));
        float _795 = (_790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_790);
        float _803 = (dot(vec3(_333, _334, _335), vec3(_795 * _787, _795 * _788, _795 * _789)) + 1.0) * 0.5;
        float _3429 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _812 = sqrt(((_788 * _788) + (_787 * _787)) + (_789 * _789)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _3440 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3451 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) * (_814 + 1.0))) + _819) * _741;
        float _829 = _709 * 0.5;
        float _830 = _719 * 0.5;
        float _831 = _729 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _845 = (dot(vec3(_333, _334, _335), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3462 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _854 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3473 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3484 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * (_856 + 1.0))) + _861) * _742;
        _878 = _709;
        _880 = _708;
        _881 = _707;
        _882 = _719;
        _883 = _718;
        _884 = _717;
        _885 = _729;
        _886 = _728;
        _887 = _727;
        _888 = _742;
        _889 = _741;
        _890 = _740;
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0)));
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
    }
    else
    {
        _878 = _879;
        _880 = _879;
        _881 = _879;
        _882 = _879;
        _883 = _879;
        _884 = _879;
        _885 = _879;
        _886 = _879;
        _887 = _879;
        _888 = _879;
        _889 = _879;
        _890 = _879;
        _891 = 0.0;
        _892 = 0.0;
        _893 = 0.0;
    }
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _919 = fma(_576, cbModelParam._m0[30u].z, fma(_572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _568));
        float _923 = fma(_576, cbModelParam._m0[31u].z, fma(_572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _568));
        float _927 = fma(_576, cbModelParam._m0[32u].z, fma(_572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _568));
        float _950 = _568 + _333;
        float _951 = _572 + _334;
        float _952 = _576 + _335;
        float _962 = fma(_952, cbModelParam._m0[30u].z, fma(_951, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _950)) - _919;
        float _963 = fma(_952, cbModelParam._m0[31u].z, fma(_951, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _950)) - _923;
        float _964 = fma(_952, cbModelParam._m0[32u].z, fma(_951, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _950)) - _927;
        float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
        float _981 = ((_968 * _962) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_919 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_968 * _963) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_923 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_968 * _964) / cbModelParam._m0[35u].z) + ((((((_927 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        float _1018 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_985.x + (-0.5));
        float _1020 = _1018 * (_985.y + (-0.5));
        float _1021 = _1018 * (_985.z + (-0.5));
        float _1028 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_992.x + (-0.5));
        float _1030 = _1028 * (_992.y + (-0.5));
        float _1031 = _1028 * (_992.z + (-0.5));
        float _1038 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_999.x + (-0.5));
        float _1040 = _1038 * (_999.y + (-0.5));
        float _1041 = _1038 * (_999.z + (-0.5));
        float _1048 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1006.x + (-0.5));
        float _1050 = _1048 * (_1006.y + (-0.5));
        float _1051 = _1048 * (_1006.z + (-0.5));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = _1019 * 0.5;
        float _1056 = _1029 * 0.5;
        float _1057 = _1039 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1071 = (dot(vec3(_333, _334, _335), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1080 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3547 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_1082 + 1.0))) + _1087) * _1052;
        float _1097 = _1020 * 0.5;
        float _1098 = _1030 * 0.5;
        float _1099 = _1040 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_333, _334, _335), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3580 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_1124 + 1.0))) + _1129) * _1053;
        float _1139 = _1021 * 0.5;
        float _1140 = _1031 * 0.5;
        float _1141 = _1041 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_333, _334, _335), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3613 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_1166 + 1.0))) + _1171) * _1054;
        _1188 = _1021;
        _1189 = _1020;
        _1190 = _1019;
        _1191 = _1031;
        _1192 = _1030;
        _1193 = _1029;
        _1194 = _1041;
        _1195 = _1040;
        _1196 = _1039;
        _1197 = _1054;
        _1198 = _1053;
        _1199 = _1052;
        _1200 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
    }
    else
    {
        _1188 = _879;
        _1189 = _879;
        _1190 = _879;
        _1191 = _879;
        _1192 = _879;
        _1193 = _879;
        _1194 = _879;
        _1195 = _879;
        _1196 = _879;
        _1197 = _879;
        _1198 = _879;
        _1199 = _879;
        _1200 = 0.0;
        _1201 = 0.0;
        _1202 = 0.0;
    }
    float _1212 = (cbModelParam._m0[1u].x * (_1200 - _891)) + _891;
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _892)) + _892;
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _893)) + _893;
    float _1235 = fma(_1214, cbSceneParam._m0[89u].z, fma(_1213, cbSceneParam._m0[89u].y, _1212 * cbSceneParam._m0[89u].x));
    float _1238 = fma(_1214, cbSceneParam._m0[90u].z, fma(_1213, cbSceneParam._m0[90u].y, _1212 * cbSceneParam._m0[90u].x));
    float _1241 = fma(_1214, cbSceneParam._m0[91u].z, fma(_1213, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1212));
    float _1256 = _512 * 0.5;
    float _1257 = _513 * 0.5;
    float _1258 = _514 * 0.5;
    float _1259 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1262 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1189, _1192, _1195, _1198));
    float _1265 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1188, _1191, _1194, _1197));
    float _1299;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1272 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_878, _882, _885, _888));
        float _1276 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_880, _883, _886, _889));
        float _1280 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_881, _884, _887, _890));
        float _1287 = dot(vec4(cbModelParam._m0[39u]), vec4(_1256, _1257, _1258, 1.0));
        _1299 = dot(vec3(isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1287) ? 0.0 : (isnan(0.0) ? _1287 : max(0.0, _1287))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1299 = 1.0;
    }
    float _1310;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1301 = dot(vec4(cbModelParam._m0[40u]), vec4(_1256, _1257, _1258, 1.0));
        _1310 = dot(vec3(isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1301) ? 0.0 : (isnan(0.0) ? _1301 : max(0.0, _1301))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1310 = 1.0;
    }
    float _1314 = (_1310 * cbModelParam._m0[1u].x) + (_1299 * (1.0 - cbModelParam._m0[1u].x));
    float _1324 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _337);
    float _1325 = isnan(_1324) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1324 : min(cbModelParam._m0[25u].z, _1324));
    float _1407;
    float _1409;
    float _1411;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1374 = fma(_576, cbModelParam._m0[13u].z, fma(_572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _568)) + cbModelParam._m0[13u].w;
        float _1378 = fma(_576, cbModelParam._m0[14u].z, fma(_572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _568)) + cbModelParam._m0[14u].w;
        float _1382 = fma(_576, cbModelParam._m0[15u].z, fma(_572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _568)) + cbModelParam._m0[15u].w;
        float _1385 = fma(_514, cbModelParam._m0[13u].z, fma(_513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _512));
        float _1388 = fma(_514, cbModelParam._m0[14u].z, fma(_513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _512));
        float _1391 = fma(_514, cbModelParam._m0[15u].z, fma(_513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _512));
        float _1419;
        if (_1385 > 0.0)
        {
            _1419 = abs((1.0 - _1374) / _1385);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1374 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1419 = frontier_phi_16_14_ladder;
        }
        float _1625;
        if (_1388 > 0.0)
        {
            _1625 = abs((1.0 - _1378) / _1388);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1378 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1625 = frontier_phi_25_21_ladder;
        }
        float _1879;
        if (_1391 > 0.0)
        {
            _1879 = abs((1.0 - _1382) / _1391);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1382 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1879 = frontier_phi_37_32_ladder;
        }
        float _1881 = isnan(_1625) ? _1419 : (isnan(_1419) ? _1625 : min(_1419, _1625));
        float _1882 = isnan(_1879) ? _1881 : (isnan(_1881) ? _1879 : min(_1881, _1879));
        float _1886 = (_1882 * _1385) + _1374;
        float _1887 = (_1882 * _1388) + _1378;
        float _1888 = (_1882 * _1391) + _1382;
        float _1889 = _1882 * 9.9999997473787516355514526367188e-05;
        float _1891 = (-1.0) - _1889;
        float _1893 = _1889 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1888 > _1893) || ((_1888 < _1891) || ((_1887 > _1893) || ((_1887 < _1891) || ((_1886 < _1891) || (_1886 > _1893))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2016 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1888, cbModelParam._m0[9u].z, fma(_1887, cbModelParam._m0[9u].y, _1886 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1888, cbModelParam._m0[10u].z, fma(_1887, cbModelParam._m0[10u].y, _1886 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1888, cbModelParam._m0[11u].z, fma(_1887, cbModelParam._m0[11u].y, _1886 * cbModelParam._m0[11u].x))), _1325);
            frontier_phi_15_37_ladder = _2016.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2016.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2016.x * cbModelParam._m0[1u].y;
        }
        _1407 = frontier_phi_15_37_ladder_2;
        _1409 = frontier_phi_15_37_ladder_1;
        _1411 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1395 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_512, _513, _514), _1325);
        _1407 = _1395.x * cbModelParam._m0[1u].y;
        _1409 = _1395.y * cbModelParam._m0[1u].y;
        _1411 = _1395.z * cbModelParam._m0[1u].y;
    }
    float _1415 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _337);
    float _1416 = isnan(_1415) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1415 : min(cbModelParam._m0[25u].w, _1415));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1472 = fma(_576, cbModelParam._m0[21u].z, fma(_572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _568)) + cbModelParam._m0[21u].w;
        float _1476 = fma(_576, cbModelParam._m0[22u].z, fma(_572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _568)) + cbModelParam._m0[22u].w;
        float _1480 = fma(_576, cbModelParam._m0[23u].z, fma(_572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _568)) + cbModelParam._m0[23u].w;
        float _1483 = fma(_514, cbModelParam._m0[21u].z, fma(_513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _512));
        float _1486 = fma(_514, cbModelParam._m0[22u].z, fma(_513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _512));
        float _1489 = fma(_514, cbModelParam._m0[23u].z, fma(_513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _512));
        float _1630;
        if (_1483 > 0.0)
        {
            _1630 = abs((1.0 - _1472) / _1483);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1472 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1630 = frontier_phi_27_23_ladder;
        }
        float _1906;
        if (_1486 > 0.0)
        {
            _1906 = abs((1.0 - _1476) / _1486);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1476 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1906 = frontier_phi_39_34_ladder;
        }
        float _2119;
        if (_1489 > 0.0)
        {
            _2119 = abs((1.0 - _1480) / _1489);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1480 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2119 = frontier_phi_48_45_ladder;
        }
        float _2121 = isnan(_1906) ? _1630 : (isnan(_1630) ? _1906 : min(_1630, _1906));
        float _2122 = isnan(_2119) ? _2121 : (isnan(_2121) ? _2119 : min(_2121, _2119));
        float _2126 = (_2122 * _1483) + _1472;
        float _2127 = (_2122 * _1486) + _1476;
        float _2128 = (_2122 * _1489) + _1480;
        float _2129 = _2122 * 9.9999997473787516355514526367188e-05;
        float _2130 = (-1.0) - _2129;
        float _2132 = _2129 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2128 > _2132) || ((_2128 < _2130) || ((_2127 > _2132) || ((_2127 < _2130) || ((_2126 < _2130) || (_2126 > _2132))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2363 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2128, cbModelParam._m0[17u].z, fma(_2127, cbModelParam._m0[17u].y, _2126 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2128, cbModelParam._m0[18u].z, fma(_2127, cbModelParam._m0[18u].y, _2126 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2128, cbModelParam._m0[19u].z, fma(_2127, cbModelParam._m0[19u].y, _2126 * cbModelParam._m0[19u].x))), _1416);
            frontier_phi_24_48_ladder = _2363.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2363.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2363.x * cbModelParam._m0[1u].z;
        }
        _1508 = frontier_phi_24_48_ladder_2;
        _1510 = frontier_phi_24_48_ladder_1;
        _1512 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1492 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_512, _513, _514), _1416);
        _1508 = _1492.x * cbModelParam._m0[1u].z;
        _1510 = _1492.y * cbModelParam._m0[1u].z;
        _1512 = _1492.z * cbModelParam._m0[1u].z;
    }
    float _1525 = (((_539 * _489) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1508 - _1407)) + _1407);
    float _1527 = (((_539 * _491) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1510 - _1409)) + _1409);
    float _1529 = (((_539 * _492) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1512 - _1411)) + _1411);
    float _1532 = fma(_1529, cbSceneParam._m0[89u].z, fma(_1527, cbSceneParam._m0[89u].y, _1525 * cbSceneParam._m0[89u].x));
    float _1535 = fma(_1529, cbSceneParam._m0[90u].z, fma(_1527, cbSceneParam._m0[90u].y, _1525 * cbSceneParam._m0[90u].x));
    float _1538 = fma(_1529, cbSceneParam._m0[91u].z, fma(_1527, cbSceneParam._m0[91u].y, _1525 * cbSceneParam._m0[91u].x));
    uvec4 _1548 = floatBitsToUint(cbInstanceData._m0[_464 + 5u]);
    uint _1550 = _1548.x * 14u;
    uint _1551 = _1550 + 13u;
    float _1558 = _504 + (-1.0);
    float _1563 = (cbLight._m0[_1551].x * _1558) + 1.0;
    float _1564 = (cbLight._m0[_1551].y * _1558) + 1.0;
    float _1565 = (cbLight._m0[_1551].z * _1558) + 1.0;
    float _1566 = (cbLight._m0[_1551].w * _1558) + 1.0;
    uint _1567 = _1550 + 5u;
    float _1573 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
    uint _1577 = _1550 + 4u;
    float _1584 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
    uint _1588 = _1550 | 1u;
    float _1599 = dot(vec3(cbLight._m0[_1550].xyz), vec3(_333, _334, _335));
    float _1602 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_333, _334, _335));
    float _3749 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _3760 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1607 = (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * 0.3183098733425140380859375;
    float _1609 = (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * 0.3183098733425140380859375;
    float _1616 = ((cbLight._m0[_1567].x * _1573) * _1609) + ((cbLight._m0[_1577].x * _1584) * _1607);
    float _1617 = ((_1573 * cbLight._m0[_1567].y) * _1609) + ((_1584 * cbLight._m0[_1577].y) * _1607);
    float _1618 = ((_1573 * cbLight._m0[_1567].z) * _1609) + ((_1584 * cbLight._m0[_1577].z) * _1607);
    uvec4 _1622 = floatBitsToUint(cbLight._m0[_1550 + 12u]);
    bool _1624 = _1622.x == 0u;
    float _1635;
    float _1637;
    float _1639;
    if (_1624)
    {
        _1635 = _1616;
        _1637 = _1617;
        _1639 = _1618;
    }
    else
    {
        uint _1643 = _1550 + 6u;
        float _1659 = (dot(vec3(cbLight._m0[_1550 + 2u].xyz), vec3(_333, _334, _335)) * 0.5) + 0.5;
        float _1660 = _1659 * _1659;
        float _3771 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1662 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
        _1635 = (((cbLight._m0[_1643].x * 0.3183098733425140380859375) * _1661) * _1662) + _1616;
        _1637 = (((cbLight._m0[_1643].y * 0.3183098733425140380859375) * _1661) * _1662) + _1617;
        _1639 = (((cbLight._m0[_1643].z * 0.3183098733425140380859375) * _1661) * _1662) + _1618;
    }
    bool _1642 = _1622.y == 0u;
    float _1680;
    float _1682;
    float _1684;
    if (_1642)
    {
        _1680 = _1635;
        _1682 = _1637;
        _1684 = _1639;
    }
    else
    {
        uint _1850 = _1550 + 7u;
        float _1866 = (dot(vec3(cbLight._m0[_1550 + 3u].xyz), vec3(_333, _334, _335)) * 0.5) + 0.5;
        float _1867 = _1866 * _1866;
        float _3787 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1869 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1680 = (((cbLight._m0[_1850].x * 0.3183098733425140380859375) * _1868) * _1869) + _1635;
        _1682 = (((cbLight._m0[_1850].y * 0.3183098733425140380859375) * _1868) * _1869) + _1637;
        _1684 = (((cbLight._m0[_1850].z * 0.3183098733425140380859375) * _1868) * _1869) + _1639;
    }
    uint _1687 = _1550 + 8u;
    float _1700 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1550].w)) * _337) * 0.949999988079071044921875);
    float _1701 = _1700 * _1700;
    float _1702 = cbLight._m0[_1550].x + _415;
    float _1703 = cbLight._m0[_1550].y + _416;
    float _1704 = cbLight._m0[_1550].z + _417;
    float _1708 = inversesqrt(dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704)));
    float _1709 = _1708 * _1702;
    float _1710 = _1708 * _1703;
    float _1711 = _1708 * _1704;
    float _1712 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_1550].xyz));
    float _3803 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1715 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _1716 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _1717 = dot(vec3(_333, _334, _335), vec3(_1709, _1710, _1711));
    float _3825 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1720 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _1721 = dot(vec3(cbLight._m0[_1550].xyz), vec3(_1709, _1710, _1711));
    float _3836 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1725 = _1701 * _1701;
    float _1729 = ((_1720 * _1720) * (_1725 + (-1.0))) + 1.0;
    float _1737 = exp2(log2(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * 5.0);
    float _1738 = 0.959999978542327880859375 - _486;
    float _1740 = 0.959999978542327880859375 - _487;
    float _1741 = 0.959999978542327880859375 - _488;
    float _1748 = 1.0 - _1701;
    float _1759 = (0.5 / (((_1716 * ((_1715 * _1748) + _1701)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _1748) + _1701) * _1715))) * _1715;
    float _3847 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1761 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1725 / ((_1729 * _1729) * 3.141590118408203125));
    uint _1772 = _1550 + 9u;
    float _1783 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1588].w)) * _337) * 0.949999988079071044921875);
    float _1784 = _1783 * _1783;
    float _1785 = cbLight._m0[_1588].x + _415;
    float _1786 = cbLight._m0[_1588].y + _416;
    float _1787 = cbLight._m0[_1588].z + _417;
    float _1791 = inversesqrt(dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787)));
    float _1792 = _1791 * _1785;
    float _1793 = _1791 * _1786;
    float _1794 = _1791 * _1787;
    float _1795 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_1588].xyz));
    float _3858 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _1799 = dot(vec3(_333, _334, _335), vec3(_1792, _1793, _1794));
    float _3869 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1802 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _1803 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_1792, _1793, _1794));
    float _3880 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1807 = _1784 * _1784;
    float _1811 = ((_1802 * _1802) * (_1807 + (-1.0))) + 1.0;
    float _1818 = exp2(log2(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * 5.0);
    float _1825 = 1.0 - _1784;
    float _1835 = (0.5 / (((_1716 * ((_1798 * _1825) + _1784)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _1825) + _1784) * _1798))) * _1798;
    float _3891 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1837 = (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1807 / ((_1811 * _1811) * 3.141590118408203125));
    float _1847 = (((((_1818 * _1738) + _489) * cbLight._m0[_1772].x) * _1837) * _1573) + (((((_1737 * _1738) + _489) * cbLight._m0[_1687].x) * _1761) * _1584);
    float _1848 = (((((_1818 * _1740) + _491) * cbLight._m0[_1772].y) * _1837) * _1573) + (((((_1737 * _1740) + _491) * cbLight._m0[_1687].y) * _1761) * _1584);
    float _1849 = (((((_1818 * _1741) + _492) * cbLight._m0[_1772].z) * _1837) * _1573) + (((((_1737 * _1741) + _492) * cbLight._m0[_1687].z) * _1761) * _1584);
    float _1911;
    float _1913;
    float _1915;
    if (_1624)
    {
        _1911 = _1847;
        _1913 = _1848;
        _1915 = _1849;
    }
    else
    {
        uint _1917 = _1550 + 2u;
        uint _1921 = _1550 + 10u;
        float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1917].w)) * _337) * 0.949999988079071044921875);
        float _1936 = _1935 * _1935;
        float _1937 = cbLight._m0[_1917].x + _415;
        float _1938 = cbLight._m0[_1917].y + _416;
        float _1939 = cbLight._m0[_1917].z + _417;
        float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
        float _1944 = _1943 * _1937;
        float _1945 = _1943 * _1938;
        float _1946 = _1943 * _1939;
        float _1947 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_1917].xyz));
        float _3902 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1950 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1951 = dot(vec3(_333, _334, _335), vec3(_1944, _1945, _1946));
        float _3913 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1954 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1955 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_1944, _1945, _1946));
        float _3924 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1959 = _1936 * _1936;
        float _1963 = ((_1954 * _1954) * (_1959 + (-1.0))) + 1.0;
        float _1970 = exp2(log2(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * 5.0);
        float _1977 = 1.0 - _1936;
        float _1987 = (0.5 / (((_1716 * ((_1950 * _1977) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _1977) + _1936) * _1950))) * _1950;
        float _3935 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1989 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1959 / ((_1963 * _1963) * 3.141590118408203125));
        float _1990 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
        _1911 = (((((_1970 * _1738) + _489) * cbLight._m0[_1921].x) * _1989) * _1990) + _1847;
        _1913 = (((((_1970 * _1740) + _491) * cbLight._m0[_1921].y) * _1989) * _1990) + _1848;
        _1915 = (((((_1970 * _1741) + _492) * cbLight._m0[_1921].z) * _1989) * _1990) + _1849;
    }
    float _2025;
    float _2027;
    float _2029;
    if (_1642)
    {
        _2025 = _1911;
        _2027 = _1913;
        _2029 = _1915;
    }
    else
    {
        uint _2036 = _1550 + 3u;
        uint _2040 = _1550 + 11u;
        float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _337) * 0.949999988079071044921875);
        float _2055 = _2054 * _2054;
        float _2056 = cbLight._m0[_2036].x + _415;
        float _2057 = cbLight._m0[_2036].y + _416;
        float _2058 = cbLight._m0[_2036].z + _417;
        float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
        float _2063 = _2062 * _2056;
        float _2064 = _2062 * _2057;
        float _2065 = _2062 * _2058;
        float _2066 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_2036].xyz));
        float _3951 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2070 = dot(vec3(_333, _334, _335), vec3(_2063, _2064, _2065));
        float _3962 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _2074 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2063, _2064, _2065));
        float _3973 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2078 = _2055 * _2055;
        float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
        float _2089 = exp2(log2(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * 5.0);
        float _2096 = 1.0 - _2055;
        float _2106 = (0.5 / (((_1716 * ((_2069 * _2096) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _2096) + _2055) * _2069))) * _2069;
        float _3984 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2108 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
        float _2109 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _2025 = (((((_2089 * _1738) + _489) * cbLight._m0[_2040].x) * _2108) * _2109) + _1911;
        _2027 = (((((_2089 * _1740) + _491) * cbLight._m0[_2040].y) * _2108) * _2109) + _1913;
        _2029 = (((((_2089 * _1741) + _492) * cbLight._m0[_2040].z) * _2108) * _2109) + _1915;
    }
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    if (_1548.y == 0u)
    {
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2185 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2184;
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2184;
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2184;
        uvec4 _2199 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2200 = _2199.x;
        uint _2211 = uint((float(_2199.y) * floor(float(uint(cbSceneParam._m0[85u].y * _424) / _2200))) + floor(float(uint(cbSceneParam._m0[85u].x * _423) / _2200)));
        float _2221 = (log2(_2187 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2222 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        uint _2225 = uint(isnan(14.0) ? _2222 : (isnan(_2222) ? 14.0 : min(_2222, 14.0)));
        uvec4 _2230 = texelFetch(g_lightClusterGridBuffer, int(((_2225 << 2u) + (_2211 << 6u)) >> 2u));
        uint _2231 = _2230.x;
        uint _2232 = _2199.z;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        if (((((1u << ((_2232 >> 4u) & 15u)) + 4294967295u) & _2231) == 0u) || ((_2232 & 240u) == 0u))
        {
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
        }
        else
        {
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            uint _2527 = 0u;
            uint _2536;
            bool _2537;
            for (;;)
            {
                _2536 = texelFetch(g_lightClassification, int((((_2225 << 5u) + (_2211 << 9u)) + (_2527 << 2u)) >> 2u)).x;
                _2537 = _2536 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2537)
                {
                    frontier_phi_63_pred = _2526;
                    frontier_phi_63_pred_1 = _2525;
                    frontier_phi_63_pred_2 = _2524;
                    frontier_phi_63_pred_3 = _2523;
                    frontier_phi_63_pred_4 = _2522;
                    frontier_phi_63_pred_5 = _2521;
                }
                else
                {
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    uint _2651;
                    _2645 = _2521;
                    _2646 = _2522;
                    _2647 = _2523;
                    _2648 = _2524;
                    _2649 = _2525;
                    _2650 = _2526;
                    _2651 = _2536;
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    for (;;)
                    {
                        uint _2655 = uint(findLSB(_2651)) + (_2527 << 5u);
                        uint _2652 = (_2651 + 4294967295u) & _2651;
                        uint _2657 = _2655 * 48u;
                        vec4 _2671 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2657)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 3u)).x));
                        uint _2677 = (_2655 * 48u) + 4u;
                        vec4 _2690 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2677)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 3u)).x));
                        uint _2696 = (_2655 * 48u) + 8u;
                        vec3 _2707 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2696)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 2u)).x));
                        float _2711 = _2671.x - _2185;
                        float _2712 = _2671.y - _2186;
                        float _2713 = _2671.z - _2187;
                        float _2714 = dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713));
                        float _2717 = inversesqrt(_2714);
                        float _2718 = _2717 * _2711;
                        float _2719 = _2717 * _2712;
                        float _2720 = _2717 * _2713;
                        float _2721 = dot(vec3(_445, _448, _451), vec3(_2718, _2719, _2720));
                        float _2726 = 1.0 - (_2714 * _2671.w);
                        float _4010 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2727 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2728 = sqrt(_2714) * _2690.w;
                        float _2731 = 1.39999997615814208984375 / (_2728 + 1.39999997615814208984375);
                        float _2732 = _2731 * _2731;
                        float _2735 = ((1.0 - _2732) * _2721) + _2732;
                        float _2738 = _2728 * _2728;
                        float _2742 = ((isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0))) * _2727) / ((_2738 * 0.699999988079071044921875) + 1.0);
                        float _2746 = (-0.0) - _2185;
                        float _2747 = (-0.0) - _2186;
                        float _2748 = (-0.0) - _2187;
                        float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
                        float _2753 = _2752 * _2746;
                        float _2754 = _2752 * _2747;
                        float _2755 = _2752 * _2748;
                        float _2763 = exp2(log2(1.0 / ((_2738 * 3.5) + 5.0)) * 0.25);
                        float _2764 = 1.0 - _520;
                        float _2771 = sqrt(1.0 - ((1.0 - (_2764 * _2764)) * (1.0 - (_2763 * _2763))));
                        float _2772 = _2771 * _2771;
                        float _2773 = _2772 * _2772;
                        float _2774 = _2753 + _2718;
                        float _2775 = _2754 + _2719;
                        float _2776 = _2755 + _2720;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2784 = dot(vec3(_445, _448, _451), vec3(_2753, _2754, _2755));
                        float _4026 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2787 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                        float _2788 = dot(vec3(_445, _448, _451), vec3(_2780 * _2774, _2780 * _2775, _2780 * _2776));
                        float _4037 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2791 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                        float _2795 = ((_2791 * _2791) * (_2773 + (-1.0))) + 1.0;
                        float _2796 = _2731 * _2772;
                        float _2797 = _2796 * _2796;
                        float _2800 = ((1.0 - _2797) * _2721) + _2797;
                        float _4048 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2801 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                        float _2802 = 1.0 - _2772;
                        float _2812 = (0.5 / (((_2801 * ((_2787 * _2802) + _2772)) + 9.9999999392252902907785028219223e-09) + (((_2801 * _2802) + _2772) * _2787))) * _2801;
                        float _4059 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2823 = (((_2773 * 3.1415927410125732421875) * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) / ((_2795 * _2795) * ((_2738 * 2.1991131305694580078125) + 3.141590118408203125))) * _2727;
                        _2580 = (_2742 * _2690.x) + _2648;
                        _2581 = (_2742 * _2690.y) + _2649;
                        _2582 = (_2742 * _2690.z) + _2650;
                        _2577 = (_2823 * _2707.x) + _2645;
                        _2578 = (_2823 * _2707.y) + _2646;
                        _2579 = (_2823 * _2707.z) + _2647;
                        if (_2652 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2645 = _2577;
                            _2646 = _2578;
                            _2647 = _2579;
                            _2648 = _2580;
                            _2649 = _2581;
                            _2650 = _2582;
                            _2651 = _2652;
                        }
                    }
                    frontier_phi_63_pred = _2582;
                    frontier_phi_63_pred_1 = _2581;
                    frontier_phi_63_pred_2 = _2580;
                    frontier_phi_63_pred_3 = _2579;
                    frontier_phi_63_pred_4 = _2578;
                    frontier_phi_63_pred_5 = _2577;
                }
                _2379 = frontier_phi_63_pred;
                _2377 = frontier_phi_63_pred_1;
                _2375 = frontier_phi_63_pred_2;
                _2373 = frontier_phi_63_pred_3;
                _2371 = frontier_phi_63_pred_4;
                _2369 = frontier_phi_63_pred_5;
                uint _2528 = _2527 + 1u;
                if (_2528 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2521 = _2369;
                    _2522 = _2371;
                    _2523 = _2373;
                    _2524 = _2375;
                    _2525 = _2377;
                    _2526 = _2379;
                    _2527 = _2528;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
        }
        uvec4 _2382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2383 = _2382.z;
        uint _2385 = (_2383 >> 8u) & 15u;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        if (((4294967295u << _2385) & _2231) == 0u)
        {
            _2489 = _2368;
            _2491 = _2370;
            _2493 = _2372;
            _2495 = _2374;
            _2497 = _2376;
            _2499 = _2378;
        }
        else
        {
            float _2514 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
            float _2515 = _2514 * _2185;
            float _2516 = _2514 * _2186;
            float _2517 = _2514 * _2187;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2385 < ((_2383 >> 12u) & 15u))
            {
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2628 = _2368;
                float _2629 = _2370;
                float _2630 = _2372;
                float _2631 = _2374;
                float _2632 = _2376;
                float _2633 = _2378;
                uint _2634 = _2385;
                uint _2643;
                bool _2644;
                for (;;)
                {
                    _2643 = texelFetch(g_lightClassification, int((((_2225 << 5u) + (_2211 << 9u)) + (_2634 << 2u)) >> 2u)).x;
                    _2644 = _2643 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2644)
                    {
                        frontier_phi_69_pred = _2633;
                        frontier_phi_69_pred_1 = _2632;
                        frontier_phi_69_pred_2 = _2631;
                        frontier_phi_69_pred_3 = _2630;
                        frontier_phi_69_pred_4 = _2629;
                        frontier_phi_69_pred_5 = _2628;
                    }
                    else
                    {
                        float _2828;
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2833;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _2841 = _2628;
                        float _2842 = _2629;
                        float _2843 = _2630;
                        float _2844 = _2631;
                        float _2845 = _2632;
                        float _2846 = _2633;
                        uint _2847 = _2643;
                        uint _2848;
                        vec4 _2873;
                        float _2874;
                        vec4 _2889;
                        vec3 _2901;
                        vec4 _2917;
                        vec4 _2933;
                        float _2980;
                        bool _2981;
                        for (;;)
                        {
                            uint _2858 = ((_2634 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2847));
                            _2848 = (_2847 + 4294967295u) & _2847;
                            uint _2860 = _2858 * 40u;
                            _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            _2874 = _2873.w;
                            uint _2876 = (_2858 * 40u) + 4u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            uint _2891 = (_2858 * 40u) + 8u;
                            _2901 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x));
                            uint _2904 = (_2858 * 40u) + 16u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2920 = (_2858 * 40u) + 20u;
                            _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            uint _2936 = (_2858 * 40u) + 24u;
                            vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2955 = (_2858 * 40u) + 28u;
                            vec4 _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            _2980 = fma(_2187, _2968.z, fma(_2186, _2968.y, _2968.x * _2185)) + _2968.w;
                            _2981 = !((fma(_2187, _2949.z, fma(_2186, _2949.y, _2949.x * _2185)) + _2949.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2981)
                            {
                                float _3008 = _2873.x - _2185;
                                float _3009 = _2873.y - _2186;
                                float _3010 = _2873.z - _2187;
                                float _3011 = dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010));
                                float _3014 = inversesqrt(_3011);
                                float _3015 = _3014 * _3008;
                                float _3016 = _3014 * _3009;
                                float _3017 = _3014 * _3010;
                                float _3021 = 1.0 - (_3011 / (_2874 * _2874));
                                float _4070 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3022 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3026 = sqrt(_3011) * _2889.w;
                                float _3028 = 1.39999997615814208984375 / (_3026 + 1.39999997615814208984375);
                                float _3029 = _3028 * _3028;
                                float _3032 = ((1.0 - _3029) * dot(vec3(_3015, _3016, _3017), vec3(_445, _448, _451))) + _3029;
                                float _3035 = _3026 * _3026;
                                float _3039 = (fma(_2187, _2917.z, fma(_2186, _2917.y, _2917.x * _2185)) + _2917.w) / _2980;
                                float _3040 = (fma(_2187, _2933.z, fma(_2186, _2933.y, _2933.x * _2185)) + _2933.w) / _2980;
                                float _3044 = 1.0 - dot(vec2(_3039, _3040), vec2(_3039, _3040));
                                float _4086 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3045 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                                float _3046 = _3045 * (((isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0))) * _3022) / ((_3035 * 0.699999988079071044921875) + 1.0));
                                float _3058 = exp2(log2(1.0 / ((_3035 * 3.5) + 5.0)) * 0.25);
                                float _3059 = 1.0 - _520;
                                float _3066 = sqrt(1.0 - ((1.0 - (_3059 * _3059)) * (1.0 - (_3058 * _3058))));
                                float _3067 = _3066 * _3066;
                                float _3068 = _3067 * _3067;
                                float _3069 = _3015 - _2515;
                                float _3070 = _3016 - _2516;
                                float _3071 = _3017 - _2517;
                                float _3075 = inversesqrt(dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071)));
                                float _3079 = dot(vec3(_445, _448, _451), vec3((-0.0) - _2515, (-0.0) - _2516, (-0.0) - _2517));
                                float _4097 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3082 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                                float _3083 = dot(vec3(_445, _448, _451), vec3(_3075 * _3069, _3075 * _3070, _3075 * _3071));
                                float _4108 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3086 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3090 = ((_3086 * _3086) * (_3068 + (-1.0))) + 1.0;
                                float _3091 = _3028 * _3067;
                                float _3092 = _3091 * _3091;
                                float _3098 = ((1.0 - _3092) * dot(vec3(_445, _448, _451), vec3(_3015, _3016, _3017))) + _3092;
                                float _4119 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3100 = 1.0 - _3067;
                                float _3110 = (0.5 / (((_3099 * ((_3082 * _3100) + _3067)) + 9.9999999392252902907785028219223e-09) + (((_3099 * _3100) + _3067) * _3082))) * _3099;
                                float _4130 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3120 = (_3045 * _3022) * (((_3068 * 3.1415927410125732421875) * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) / ((_3090 * _3090) * ((_3035 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3046 * _2889.z;
                                frontier_phi_75_pred_1 = _3046 * _2889.y;
                                frontier_phi_75_pred_2 = _3046 * _2889.x;
                                frontier_phi_75_pred_3 = _3120 * _2901.z;
                                frontier_phi_75_pred_4 = _3120 * _2901.y;
                                frontier_phi_75_pred_5 = _3120 * _2901.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3129 = frontier_phi_75_pred;
                            _3128 = frontier_phi_75_pred_1;
                            _3127 = frontier_phi_75_pred_2;
                            _3126 = frontier_phi_75_pred_3;
                            _3125 = frontier_phi_75_pred_4;
                            _3124 = frontier_phi_75_pred_5;
                            _2831 = _3127 + _2844;
                            _2832 = _3128 + _2845;
                            _2833 = _3129 + _2846;
                            _2828 = _3124 + _2841;
                            _2829 = _3125 + _2842;
                            _2830 = _3126 + _2843;
                            if (_2848 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2848;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2833;
                        frontier_phi_69_pred_1 = _2832;
                        frontier_phi_69_pred_2 = _2831;
                        frontier_phi_69_pred_3 = _2830;
                        frontier_phi_69_pred_4 = _2829;
                        frontier_phi_69_pred_5 = _2828;
                    }
                    _2500 = frontier_phi_69_pred;
                    _2498 = frontier_phi_69_pred_1;
                    _2496 = frontier_phi_69_pred_2;
                    _2494 = frontier_phi_69_pred_3;
                    _2492 = frontier_phi_69_pred_4;
                    _2490 = frontier_phi_69_pred_5;
                    uint _2635 = _2634 + 1u;
                    if (_2635 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2628 = _2490;
                        _2629 = _2492;
                        _2630 = _2494;
                        _2631 = _2496;
                        _2632 = _2498;
                        _2633 = _2500;
                        _2634 = _2635;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2500;
                frontier_phi_57_58_ladder_1 = _2498;
                frontier_phi_57_58_ladder_2 = _2496;
                frontier_phi_57_58_ladder_3 = _2494;
                frontier_phi_57_58_ladder_4 = _2492;
                frontier_phi_57_58_ladder_5 = _2490;
            }
            else
            {
                frontier_phi_57_58_ladder = _2378;
                frontier_phi_57_58_ladder_1 = _2376;
                frontier_phi_57_58_ladder_2 = _2374;
                frontier_phi_57_58_ladder_3 = _2372;
                frontier_phi_57_58_ladder_4 = _2370;
                frontier_phi_57_58_ladder_5 = _2368;
            }
            _2489 = frontier_phi_57_58_ladder_5;
            _2491 = frontier_phi_57_58_ladder_4;
            _2493 = frontier_phi_57_58_ladder_3;
            _2495 = frontier_phi_57_58_ladder_2;
            _2497 = frontier_phi_57_58_ladder_1;
            _2499 = frontier_phi_57_58_ladder;
        }
        float _2504 = isnan(1.0) ? _504 : (isnan(_504) ? 1.0 : min(_504, 1.0));
        _2243 = (_2504 * _2495) + _1680;
        _2245 = (_2504 * _2497) + _1682;
        _2247 = (_2504 * _2499) + _1684;
        _2249 = ((_2489 * _489) * _2504) + _2025;
        _2251 = ((_2491 * _491) * _2504) + _2027;
        _2253 = ((_2493 * _492) * _2504) + _2029;
    }
    else
    {
        _2243 = _1680;
        _2245 = _1682;
        _2247 = _1684;
        _2249 = _2025;
        _2251 = _2027;
        _2253 = _2029;
    }
    uint _2259 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _2267 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _315.x) * cbInstanceData._m0[_2259].x;
    float _2270 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _315.y) * cbInstanceData._m0[_2259].y;
    float _2273 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _315.z) * cbInstanceData._m0[_2259].z;
    float _4146 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4157 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _4168 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4179 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _2291 = (((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2243 + ((isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))) * _504))) + ((_2249 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1314)) * cbPerFrame._m0[3u].x)) + _2267;
    float _2293 = (_2270 + ((_2251 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1314)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2245 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _504)));
    float _2295 = (_2273 + ((_2253 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1314)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2247 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _504)));
    float _4205 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2308 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _2313 = cbInstanceData._m0[_464 + 6u].w * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)));
    float _2318 = _423 / cbSceneParam._m0[86u].x;
    float _2319 = _424 / cbSceneParam._m0[86u].y;
    vec4 _2333 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2318, _2319, (log2((isnan(cbSceneParam._m0[77u].w) ? _357 : (isnan(_357) ? cbSceneParam._m0[77u].w : min(_357, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2335 = _2333.x;
    float _2336 = _2333.y;
    float _2337 = _2333.z;
    float _2338 = _2333.w;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    if (_357 > cbSceneParam._m0[78u].w)
    {
        float _2393 = isnan(_357) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _357 : min(cbSceneParam._m0[80u].w, _357));
        float _2394 = _2393 / _357;
        float _2405 = _2394 * _408;
        float _2406 = _409 * _2394;
        float _2407 = (-0.0) - _2406;
        float _2408 = _2394 * _410;
        float _2410 = (cbSceneParam._m0[77u].w * _2407) / _2393;
        float _2411 = _2410 + cbSceneParam._m0[79u].w;
        float _2412 = cbSceneParam._m0[79u].w - _2406;
        float _2418 = sqrt(((_2405 * _2405) + (_2406 * _2406)) + (_2408 * _2408));
        float _2421 = (1.0 - (cbSceneParam._m0[77u].w / _2393)) * _2418;
        float _2426 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2428 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2590;
        if (abs((_2407 - _2410) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2590 = ((((_2411 > 0.0) ? exp2(_2426 * _2411) : (2.0 - exp2(_2428 * _2411))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2421;
        }
        else
        {
            float _2550 = 1.0 / cbSceneParam._m0[80u].x;
            float _2551 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : max(_2411, _2412));
            float _2552 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : min(_2411, _2412));
            float _2561 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : min(_2551, 0.0));
            float _2562 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : min(_2552, 0.0));
            _2590 = ((abs(_2418 / _2407) * cbSceneParam._m0[80u].y) * ((((_2561 - _2562) * 2.0) - ((exp2(_2426 * (isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0)))) - exp2(_2426 * (isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0))))) * _2550)) - ((exp2(_2428 * _2561) - exp2(_2428 * _2562)) * _2550))) + (_2421 * cbSceneParam._m0[80u].z);
        }
        vec4 _2592 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2318, _2319, 1.0), 0.0);
        float _2601 = exp2((_2590 * (-1.44269502162933349609375)) * (1.0 - _2592.w));
        float _2602 = log2(_2601);
        float _2618 = log2(_2338);
        _2430 = (exp2(_2618 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2602 * cbSceneParam._m0[78u].x)) * _2592.x) / cbSceneParam._m0[78u].x)) + _2335;
        _2432 = (exp2(_2618 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2602 * cbSceneParam._m0[78u].y)) * _2592.y) / cbSceneParam._m0[78u].y)) + _2336;
        _2434 = (exp2(_2618 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2602 * cbSceneParam._m0[78u].z)) * _2592.z) / cbSceneParam._m0[78u].z)) + _2337;
        _2436 = _2601 * _2338;
    }
    else
    {
        _2430 = _2335;
        _2432 = _2336;
        _2434 = _2337;
        _2436 = _2338;
    }
    float _2448 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2449 = _2448 == 3.0;
    float _2450 = log2(_2436);
    float _2454 = exp2(_2450 * cbSceneParam._m0[78u].x);
    float _2455 = exp2(_2450 * cbSceneParam._m0[78u].y);
    float _2456 = exp2(_2450 * cbSceneParam._m0[78u].z);
    float _2457 = _2454 * (isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0)));
    float _2458 = _2455 * (isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0)));
    float _2459 = _2456 * (isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0)));
    float _2468 = (_2448 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2468 * (_2449 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.y = _2468 * (_2449 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.z = _2468 * (_2449 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2434)));
    SV_Target.w = _2313;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2267) * _2308) * _2454) * _2468;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2270) * _2308) * _2455) * _2468;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2273) * _2308) * _2456) * _2468;
    SV_Target_1.w = _2313;
}


