#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _924;
float _3359;
float _3360;
float _3361;
float _3362;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    float _236 = (cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _237 = (cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _250 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_236 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_237 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _257 = _250.x * cbMtdParam._m0[9u].x;
    float _258 = _250.y * cbMtdParam._m0[9u].y;
    float _259 = _250.z * cbMtdParam._m0[9u].z;
    float _260 = _250.w * cbMtdParam._m0[9u].w;
    float _261 = _260 * TEXCOORD_1.z;
    vec4 _274 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _236) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _237) + cbTextureTilingScale._m0[1u].w));
    float _278 = _274.z;
    float _282 = (_274.x * 2.0) + (-1.0);
    float _284 = (_274.y * 2.0) + (-1.0);
    float _285 = dot(vec2(_282, _284), vec2(_282, _284));
    float _3371 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = sqrt(1.0 - (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))));
    vec4 _319 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[12u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _326 = fma(_291, _219, fma(_284, _211 * TANGENT.x, (_197 * _189) * _282));
    float _329 = fma(_291, _220, fma(_284, _211 * TANGENT.y, (_197 * _190) * _282));
    float _332 = fma(_291, _221, fma(_284, _211 * TANGENT.z, (_197 * _191) * _282));
    float _336 = inversesqrt(dot(vec3(_326, _329, _332), vec3(_326, _329, _332)));
    float _337 = _336 * _326;
    float _338 = _336 * _329;
    float _339 = _336 * _332;
    float _3382 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _340 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _341 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3415 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3426 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3437 = isnan(0.0) ? cbMtdParam._m0[11u].y : (isnan(cbMtdParam._m0[11u].y) ? 0.0 : max(cbMtdParam._m0[11u].y, 0.0));
    float _345 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _361 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _402 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _412 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _402);
    float _413 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _402);
    float _414 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _402);
    float _418 = inversesqrt(dot(vec3(_412, _413, _414), vec3(_412, _413, _414)));
    float _419 = _412 * _418;
    float _420 = _413 * _418;
    float _421 = _414 * _418;
    vec4 _426 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _428 = _426.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _603 = sqrt(((_412 * _412) + (_413 * _413)) + (_414 * _414));
        float _609 = (cbMatDynParam._m0[5u].x * _603) + cbMatDynParam._m0[5u].y;
        float _3448 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _610 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _614 = (cbMatDynParam._m0[5u].z * _603) + cbMatDynParam._m0[5u].w;
        float _3459 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) - _610)) + _610) < ((_428 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _440 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _441 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _461 = fma(_339, cbSceneParam._m0[5u].z, fma(_338, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _337));
    float _464 = fma(_339, cbSceneParam._m0[6u].z, fma(_338, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _337));
    float _467 = fma(_339, cbSceneParam._m0[7u].z, fma(_338, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _337));
    uint _480 = uint(roundEven(NORMAL.w)) * 13u;
    uint _481 = _480 + 9u;
    uint _482 = _481 + uint(cbMatDynParam._m0[0u].w);
    float _488 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) * cbInstanceData._m0[_482].x;
    float _489 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0)))) * cbInstanceData._m0[_482].y;
    float _490 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * cbInstanceData._m0[_482].z;
    float _3470 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _3481 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _3492 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _494 = 1.0 - _345;
    float _495 = _491 * _494;
    float _496 = _492 * _494;
    float _497 = _493 * _494;
    float _502 = (_491 + (-0.039999999105930328369140625)) * _345;
    float _503 = (_492 + (-0.039999999105930328369140625)) * _345;
    float _504 = (_493 + (-0.039999999105930328369140625)) * _345;
    float _505 = _502 + 0.039999999105930328369140625;
    float _507 = _503 + 0.039999999105930328369140625;
    float _508 = _504 + 0.039999999105930328369140625;
    vec4 _517 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _440, cbSceneParam._m0[86u].y * _441));
    float _520 = _517.x * TEXCOORD_1.w;
    float _521 = dot(vec3(_337, _338, _339), vec3(_419, _420, _421));
    float _524 = _521 * 2.0;
    float _528 = (_524 * _337) - _419;
    float _529 = (_524 * _338) - _420;
    float _530 = (_524 * _339) - _421;
    float _534 = abs(dot(vec3(_419, _420, _421), vec3(_337, _338, _339)));
    float _3503 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _536 = sqrt(_341);
    float _549 = exp2((_536 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_536 * 3.0));
    float _555 = (1.0 - _549) * ((_536 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _556 = _549 * _536;
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _923;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _648 = fma(_592, cbModelParam._m0[26u].z, fma(_588, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _584));
        float _652 = fma(_592, cbModelParam._m0[27u].z, fma(_588, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _584));
        float _656 = fma(_592, cbModelParam._m0[28u].z, fma(_588, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _584));
        float _681 = _584 + _337;
        float _682 = _588 + _338;
        float _683 = _592 + _339;
        float _693 = fma(_683, cbModelParam._m0[26u].z, fma(_682, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _681)) - _648;
        float _694 = fma(_683, cbModelParam._m0[27u].z, fma(_682, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _681)) - _652;
        float _695 = fma(_683, cbModelParam._m0[28u].z, fma(_682, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _681)) - _656;
        float _699 = inversesqrt(dot(vec3(_693, _694, _695), vec3(_693, _694, _695)));
        float _712 = ((_699 * _693) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_648 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _713 = ((_699 * _694) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_652 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _714 = ((_699 * _695) / cbModelParam._m0[34u].z) + ((((((_656 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        float _751 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_717.x + (-0.5));
        float _753 = _751 * (_717.y + (-0.5));
        float _754 = _751 * (_717.z + (-0.5));
        float _761 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_724.x + (-0.5));
        float _763 = _761 * (_724.y + (-0.5));
        float _764 = _761 * (_724.z + (-0.5));
        float _771 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_731.x + (-0.5));
        float _773 = _771 * (_731.y + (-0.5));
        float _774 = _771 * (_731.z + (-0.5));
        float _781 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_738.x + (-0.5));
        float _783 = _781 * (_738.y + (-0.5));
        float _784 = _781 * (_738.z + (-0.5));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = _752 * 0.5;
        float _789 = _762 * 0.5;
        float _790 = _772 * 0.5;
        float _791 = dot(vec3(_788, _789, _790), vec3(_788, _789, _790));
        float _796 = (_791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_791);
        float _805 = (dot(vec3(_337, _338, _339), vec3(_796 * _788, _796 * _789, _796 * _790)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _815 = sqrt(((_789 * _789) + (_788 * _788)) + (_790 * _790)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3551 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_817 + 1.0))) + _822) * _785;
        float _832 = _753 * 0.5;
        float _833 = _763 * 0.5;
        float _834 = _773 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _848 = (dot(vec3(_337, _338, _339), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _857 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_786 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3584 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_859 + 1.0))) + _864) * _786;
        float _874 = _754 * 0.5;
        float _875 = _764 * 0.5;
        float _876 = _774 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(_337, _338, _339), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3617 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_901 + 1.0))) + _906) * _787;
        _923 = _754;
        _925 = _753;
        _926 = _752;
        _927 = _764;
        _928 = _763;
        _929 = _762;
        _930 = _774;
        _931 = _773;
        _932 = _772;
        _933 = _787;
        _934 = _786;
        _935 = _785;
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
        _937 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
    }
    else
    {
        _923 = _924;
        _925 = _924;
        _926 = _924;
        _927 = _924;
        _928 = _924;
        _929 = _924;
        _930 = _924;
        _931 = _924;
        _932 = _924;
        _933 = _924;
        _934 = _924;
        _935 = _924;
        _936 = 0.0;
        _937 = 0.0;
        _938 = 0.0;
    }
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _967 = fma(_592, cbModelParam._m0[30u].z, fma(_588, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _584));
        float _971 = fma(_592, cbModelParam._m0[31u].z, fma(_588, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _584));
        float _975 = fma(_592, cbModelParam._m0[32u].z, fma(_588, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _584));
        float _998 = _584 + _337;
        float _999 = _588 + _338;
        float _1000 = _592 + _339;
        float _1010 = fma(_1000, cbModelParam._m0[30u].z, fma(_999, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _998)) - _967;
        float _1011 = fma(_1000, cbModelParam._m0[31u].z, fma(_999, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _998)) - _971;
        float _1012 = fma(_1000, cbModelParam._m0[32u].z, fma(_999, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _998)) - _975;
        float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
        float _1029 = ((_1016 * _1010) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_967 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1016 * _1011) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_971 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1016 * _1012) / cbModelParam._m0[35u].z) + ((((((_975 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        float _1066 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1033.x + (-0.5));
        float _1068 = _1066 * (_1033.y + (-0.5));
        float _1069 = _1066 * (_1033.z + (-0.5));
        float _1076 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1040.x + (-0.5));
        float _1078 = _1076 * (_1040.y + (-0.5));
        float _1079 = _1076 * (_1040.z + (-0.5));
        float _1086 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1047.x + (-0.5));
        float _1088 = _1086 * (_1047.y + (-0.5));
        float _1089 = _1086 * (_1047.z + (-0.5));
        float _1096 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1054.x + (-0.5));
        float _1098 = _1096 * (_1054.y + (-0.5));
        float _1099 = _1096 * (_1054.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_337, _338, _339), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3680 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1130 + 1.0))) + _1135) * _1100;
        float _1145 = _1068 * 0.5;
        float _1146 = _1078 * 0.5;
        float _1147 = _1088 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_337, _338, _339), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3713 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1172 + 1.0))) + _1177) * _1101;
        float _1187 = _1069 * 0.5;
        float _1188 = _1079 * 0.5;
        float _1189 = _1089 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_337, _338, _339), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3746 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1214 + 1.0))) + _1219) * _1102;
        _1236 = _1069;
        _1237 = _1068;
        _1238 = _1067;
        _1239 = _1079;
        _1240 = _1078;
        _1241 = _1077;
        _1242 = _1089;
        _1243 = _1088;
        _1244 = _1087;
        _1245 = _1102;
        _1246 = _1101;
        _1247 = _1100;
        _1248 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1249 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
    }
    else
    {
        _1236 = _924;
        _1237 = _924;
        _1238 = _924;
        _1239 = _924;
        _1240 = _924;
        _1241 = _924;
        _1242 = _924;
        _1243 = _924;
        _1244 = _924;
        _1245 = _924;
        _1246 = _924;
        _1247 = _924;
        _1248 = 0.0;
        _1249 = 0.0;
        _1250 = 0.0;
    }
    float _1260 = (cbModelParam._m0[1u].x * (_1248 - _936)) + _936;
    float _1261 = (cbModelParam._m0[1u].x * (_1249 - _937)) + _937;
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _938)) + _938;
    float _1283 = fma(_1262, cbSceneParam._m0[89u].z, fma(_1261, cbSceneParam._m0[89u].y, _1260 * cbSceneParam._m0[89u].x));
    float _1286 = fma(_1262, cbSceneParam._m0[90u].z, fma(_1261, cbSceneParam._m0[90u].y, _1260 * cbSceneParam._m0[90u].x));
    float _1289 = fma(_1262, cbSceneParam._m0[91u].z, fma(_1261, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1260));
    float _1304 = _528 * 0.5;
    float _1305 = _529 * 0.5;
    float _1306 = _530 * 0.5;
    float _1307 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1310 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1237, _1240, _1243, _1246));
    float _1313 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1236, _1239, _1242, _1245));
    float _1347;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1320 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_923, _927, _930, _933));
        float _1324 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_925, _928, _931, _934));
        float _1328 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_926, _929, _932, _935));
        float _1335 = dot(vec4(cbModelParam._m0[39u]), vec4(_1304, _1305, _1306, 1.0));
        _1347 = dot(vec3(isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1347 = 1.0;
    }
    float _1358;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1349 = dot(vec4(cbModelParam._m0[40u]), vec4(_1304, _1305, _1306, 1.0));
        _1358 = dot(vec3(isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1349) ? 0.0 : (isnan(0.0) ? _1349 : max(0.0, _1349))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1358 = 1.0;
    }
    float _1362 = (_1358 * cbModelParam._m0[1u].x) + (_1347 * (1.0 - cbModelParam._m0[1u].x));
    float _1372 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _341);
    float _1373 = isnan(_1372) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1372 : min(cbModelParam._m0[25u].z, _1372));
    float _1455;
    float _1457;
    float _1459;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1422 = fma(_592, cbModelParam._m0[13u].z, fma(_588, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _584)) + cbModelParam._m0[13u].w;
        float _1426 = fma(_592, cbModelParam._m0[14u].z, fma(_588, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _584)) + cbModelParam._m0[14u].w;
        float _1430 = fma(_592, cbModelParam._m0[15u].z, fma(_588, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _584)) + cbModelParam._m0[15u].w;
        float _1433 = fma(_530, cbModelParam._m0[13u].z, fma(_529, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _528));
        float _1436 = fma(_530, cbModelParam._m0[14u].z, fma(_529, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _528));
        float _1439 = fma(_530, cbModelParam._m0[15u].z, fma(_529, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _528));
        float _1467;
        if (_1433 > 0.0)
        {
            _1467 = abs((1.0 - _1422) / _1433);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1422 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1467 = frontier_phi_19_17_ladder;
        }
        float _1673;
        if (_1436 > 0.0)
        {
            _1673 = abs((1.0 - _1426) / _1436);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1426 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1673 = frontier_phi_28_24_ladder;
        }
        float _1927;
        if (_1439 > 0.0)
        {
            _1927 = abs((1.0 - _1430) / _1439);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1430 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1927 = frontier_phi_40_35_ladder;
        }
        float _1929 = isnan(_1673) ? _1467 : (isnan(_1467) ? _1673 : min(_1467, _1673));
        float _1930 = isnan(_1927) ? _1929 : (isnan(_1929) ? _1927 : min(_1929, _1927));
        float _1934 = (_1930 * _1433) + _1422;
        float _1935 = (_1930 * _1436) + _1426;
        float _1936 = (_1930 * _1439) + _1430;
        float _1937 = _1930 * 9.9999997473787516355514526367188e-05;
        float _1939 = (-1.0) - _1937;
        float _1941 = _1937 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1936 > _1941) || ((_1936 < _1939) || ((_1935 > _1941) || ((_1935 < _1939) || ((_1934 < _1939) || (_1934 > _1941))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2064 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1936, cbModelParam._m0[9u].z, fma(_1935, cbModelParam._m0[9u].y, _1934 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1936, cbModelParam._m0[10u].z, fma(_1935, cbModelParam._m0[10u].y, _1934 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1936, cbModelParam._m0[11u].z, fma(_1935, cbModelParam._m0[11u].y, _1934 * cbModelParam._m0[11u].x))), _1373);
            frontier_phi_18_40_ladder = _2064.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2064.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2064.x * cbModelParam._m0[1u].y;
        }
        _1455 = frontier_phi_18_40_ladder_2;
        _1457 = frontier_phi_18_40_ladder_1;
        _1459 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1443 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_528, _529, _530), _1373);
        _1455 = _1443.x * cbModelParam._m0[1u].y;
        _1457 = _1443.y * cbModelParam._m0[1u].y;
        _1459 = _1443.z * cbModelParam._m0[1u].y;
    }
    float _1463 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _341);
    float _1464 = isnan(_1463) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1463 : min(cbModelParam._m0[25u].w, _1463));
    float _1556;
    float _1558;
    float _1560;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1520 = fma(_592, cbModelParam._m0[21u].z, fma(_588, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _584)) + cbModelParam._m0[21u].w;
        float _1524 = fma(_592, cbModelParam._m0[22u].z, fma(_588, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _584)) + cbModelParam._m0[22u].w;
        float _1528 = fma(_592, cbModelParam._m0[23u].z, fma(_588, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _584)) + cbModelParam._m0[23u].w;
        float _1531 = fma(_530, cbModelParam._m0[21u].z, fma(_529, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _528));
        float _1534 = fma(_530, cbModelParam._m0[22u].z, fma(_529, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _528));
        float _1537 = fma(_530, cbModelParam._m0[23u].z, fma(_529, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _528));
        float _1678;
        if (_1531 > 0.0)
        {
            _1678 = abs((1.0 - _1520) / _1531);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1520 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1678 = frontier_phi_30_26_ladder;
        }
        float _1954;
        if (_1534 > 0.0)
        {
            _1954 = abs((1.0 - _1524) / _1534);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1524 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1954 = frontier_phi_42_37_ladder;
        }
        float _2167;
        if (_1537 > 0.0)
        {
            _2167 = abs((1.0 - _1528) / _1537);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1528 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2167 = frontier_phi_51_48_ladder;
        }
        float _2169 = isnan(_1954) ? _1678 : (isnan(_1678) ? _1954 : min(_1678, _1954));
        float _2170 = isnan(_2167) ? _2169 : (isnan(_2169) ? _2167 : min(_2169, _2167));
        float _2174 = (_2170 * _1531) + _1520;
        float _2175 = (_2170 * _1534) + _1524;
        float _2176 = (_2170 * _1537) + _1528;
        float _2177 = _2170 * 9.9999997473787516355514526367188e-05;
        float _2178 = (-1.0) - _2177;
        float _2180 = _2177 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2176 > _2180) || ((_2176 < _2178) || ((_2175 > _2180) || ((_2175 < _2178) || ((_2174 < _2178) || (_2174 > _2180))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2411 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2176, cbModelParam._m0[17u].z, fma(_2175, cbModelParam._m0[17u].y, _2174 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2176, cbModelParam._m0[18u].z, fma(_2175, cbModelParam._m0[18u].y, _2174 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2176, cbModelParam._m0[19u].z, fma(_2175, cbModelParam._m0[19u].y, _2174 * cbModelParam._m0[19u].x))), _1464);
            frontier_phi_27_51_ladder = _2411.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2411.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2411.x * cbModelParam._m0[1u].z;
        }
        _1556 = frontier_phi_27_51_ladder_2;
        _1558 = frontier_phi_27_51_ladder_1;
        _1560 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1540 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_528, _529, _530), _1464);
        _1556 = _1540.x * cbModelParam._m0[1u].z;
        _1558 = _1540.y * cbModelParam._m0[1u].z;
        _1560 = _1540.z * cbModelParam._m0[1u].z;
    }
    float _1573 = (((_555 * _505) + _556) * _520) * ((cbModelParam._m0[1u].w * (_1556 - _1455)) + _1455);
    float _1575 = (((_555 * _507) + _556) * _520) * ((cbModelParam._m0[1u].w * (_1558 - _1457)) + _1457);
    float _1577 = (((_555 * _508) + _556) * _520) * ((cbModelParam._m0[1u].w * (_1560 - _1459)) + _1459);
    float _1580 = fma(_1577, cbSceneParam._m0[89u].z, fma(_1575, cbSceneParam._m0[89u].y, _1573 * cbSceneParam._m0[89u].x));
    float _1583 = fma(_1577, cbSceneParam._m0[90u].z, fma(_1575, cbSceneParam._m0[90u].y, _1573 * cbSceneParam._m0[90u].x));
    float _1586 = fma(_1577, cbSceneParam._m0[91u].z, fma(_1575, cbSceneParam._m0[91u].y, _1573 * cbSceneParam._m0[91u].x));
    uvec4 _1596 = floatBitsToUint(cbInstanceData._m0[_480 + 5u]);
    uint _1598 = _1596.x * 14u;
    uint _1599 = _1598 + 13u;
    float _1606 = _520 + (-1.0);
    float _1611 = (cbLight._m0[_1599].x * _1606) + 1.0;
    float _1612 = (cbLight._m0[_1599].y * _1606) + 1.0;
    float _1613 = (cbLight._m0[_1599].z * _1606) + 1.0;
    float _1614 = (cbLight._m0[_1599].w * _1606) + 1.0;
    uint _1615 = _1598 + 5u;
    float _1621 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
    uint _1625 = _1598 + 4u;
    float _1632 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
    uint _1636 = _1598 | 1u;
    float _1647 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_337, _338, _339));
    float _1650 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_337, _338, _339));
    float _3882 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _3893 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _1655 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * 0.3183098733425140380859375;
    float _1657 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * 0.3183098733425140380859375;
    float _1664 = ((cbLight._m0[_1615].x * _1621) * _1657) + ((cbLight._m0[_1625].x * _1632) * _1655);
    float _1665 = ((_1621 * cbLight._m0[_1615].y) * _1657) + ((_1632 * cbLight._m0[_1625].y) * _1655);
    float _1666 = ((_1621 * cbLight._m0[_1615].z) * _1657) + ((_1632 * cbLight._m0[_1625].z) * _1655);
    uvec4 _1670 = floatBitsToUint(cbLight._m0[_1598 + 12u]);
    bool _1672 = _1670.x == 0u;
    float _1683;
    float _1685;
    float _1687;
    if (_1672)
    {
        _1683 = _1664;
        _1685 = _1665;
        _1687 = _1666;
    }
    else
    {
        uint _1691 = _1598 + 6u;
        float _1707 = (dot(vec3(cbLight._m0[_1598 + 2u].xyz), vec3(_337, _338, _339)) * 0.5) + 0.5;
        float _1708 = _1707 * _1707;
        float _3904 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1710 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
        _1683 = (((cbLight._m0[_1691].x * 0.3183098733425140380859375) * _1709) * _1710) + _1664;
        _1685 = (((cbLight._m0[_1691].y * 0.3183098733425140380859375) * _1709) * _1710) + _1665;
        _1687 = (((cbLight._m0[_1691].z * 0.3183098733425140380859375) * _1709) * _1710) + _1666;
    }
    bool _1690 = _1670.y == 0u;
    float _1728;
    float _1730;
    float _1732;
    if (_1690)
    {
        _1728 = _1683;
        _1730 = _1685;
        _1732 = _1687;
    }
    else
    {
        uint _1898 = _1598 + 7u;
        float _1914 = (dot(vec3(cbLight._m0[_1598 + 3u].xyz), vec3(_337, _338, _339)) * 0.5) + 0.5;
        float _1915 = _1914 * _1914;
        float _3920 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1916 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1917 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1728 = (((cbLight._m0[_1898].x * 0.3183098733425140380859375) * _1916) * _1917) + _1683;
        _1730 = (((cbLight._m0[_1898].y * 0.3183098733425140380859375) * _1916) * _1917) + _1685;
        _1732 = (((cbLight._m0[_1898].z * 0.3183098733425140380859375) * _1916) * _1917) + _1687;
    }
    uint _1735 = _1598 + 8u;
    float _1748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1598].w)) * _341) * 0.949999988079071044921875);
    float _1749 = _1748 * _1748;
    float _1750 = cbLight._m0[_1598].x + _419;
    float _1751 = cbLight._m0[_1598].y + _420;
    float _1752 = cbLight._m0[_1598].z + _421;
    float _1756 = inversesqrt(dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752)));
    float _1757 = _1756 * _1750;
    float _1758 = _1756 * _1751;
    float _1759 = _1756 * _1752;
    float _1760 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1598].xyz));
    float _3936 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1763 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _1764 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1765 = dot(vec3(_337, _338, _339), vec3(_1757, _1758, _1759));
    float _3958 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1769 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_1757, _1758, _1759));
    float _3969 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1773 = _1749 * _1749;
    float _1777 = ((_1768 * _1768) * (_1773 + (-1.0))) + 1.0;
    float _1785 = exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0);
    float _1786 = 0.959999978542327880859375 - _502;
    float _1788 = 0.959999978542327880859375 - _503;
    float _1789 = 0.959999978542327880859375 - _504;
    float _1796 = 1.0 - _1749;
    float _1807 = (0.5 / (((_1764 * ((_1763 * _1796) + _1749)) + 9.9999999392252902907785028219223e-09) + (((_1764 * _1796) + _1749) * _1763))) * _1763;
    float _3980 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1809 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1773 / ((_1777 * _1777) * 3.141590118408203125));
    uint _1820 = _1598 + 9u;
    float _1831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1636].w)) * _341) * 0.949999988079071044921875);
    float _1832 = _1831 * _1831;
    float _1833 = cbLight._m0[_1636].x + _419;
    float _1834 = cbLight._m0[_1636].y + _420;
    float _1835 = cbLight._m0[_1636].z + _421;
    float _1839 = inversesqrt(dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835)));
    float _1840 = _1839 * _1833;
    float _1841 = _1839 * _1834;
    float _1842 = _1839 * _1835;
    float _1843 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1636].xyz));
    float _3991 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1846 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1847 = dot(vec3(_337, _338, _339), vec3(_1840, _1841, _1842));
    float _4002 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _1851 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_1840, _1841, _1842));
    float _4013 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1855 = _1832 * _1832;
    float _1859 = ((_1850 * _1850) * (_1855 + (-1.0))) + 1.0;
    float _1866 = exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0);
    float _1873 = 1.0 - _1832;
    float _1883 = (0.5 / (((_1764 * ((_1846 * _1873) + _1832)) + 9.9999999392252902907785028219223e-09) + (((_1764 * _1873) + _1832) * _1846))) * _1846;
    float _4024 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1885 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1855 / ((_1859 * _1859) * 3.141590118408203125));
    float _1895 = (((((_1866 * _1786) + _505) * cbLight._m0[_1820].x) * _1885) * _1621) + (((((_1785 * _1786) + _505) * cbLight._m0[_1735].x) * _1809) * _1632);
    float _1896 = (((((_1866 * _1788) + _507) * cbLight._m0[_1820].y) * _1885) * _1621) + (((((_1785 * _1788) + _507) * cbLight._m0[_1735].y) * _1809) * _1632);
    float _1897 = (((((_1866 * _1789) + _508) * cbLight._m0[_1820].z) * _1885) * _1621) + (((((_1785 * _1789) + _508) * cbLight._m0[_1735].z) * _1809) * _1632);
    float _1959;
    float _1961;
    float _1963;
    if (_1672)
    {
        _1959 = _1895;
        _1961 = _1896;
        _1963 = _1897;
    }
    else
    {
        uint _1965 = _1598 + 2u;
        uint _1969 = _1598 + 10u;
        float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _341) * 0.949999988079071044921875);
        float _1984 = _1983 * _1983;
        float _1985 = cbLight._m0[_1965].x + _419;
        float _1986 = cbLight._m0[_1965].y + _420;
        float _1987 = cbLight._m0[_1965].z + _421;
        float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
        float _1992 = _1991 * _1985;
        float _1993 = _1991 * _1986;
        float _1994 = _1991 * _1987;
        float _1995 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1965].xyz));
        float _4035 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1998 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1999 = dot(vec3(_337, _338, _339), vec3(_1992, _1993, _1994));
        float _4046 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _2003 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_1992, _1993, _1994));
        float _4057 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2007 = _1984 * _1984;
        float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
        float _2018 = exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0);
        float _2025 = 1.0 - _1984;
        float _2035 = (0.5 / (((_1764 * ((_1998 * _2025) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1764 * _2025) + _1984) * _1998))) * _1998;
        float _4068 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2037 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
        float _2038 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
        _1959 = (((((_2018 * _1786) + _505) * cbLight._m0[_1969].x) * _2037) * _2038) + _1895;
        _1961 = (((((_2018 * _1788) + _507) * cbLight._m0[_1969].y) * _2037) * _2038) + _1896;
        _1963 = (((((_2018 * _1789) + _508) * cbLight._m0[_1969].z) * _2037) * _2038) + _1897;
    }
    float _2073;
    float _2075;
    float _2077;
    if (_1690)
    {
        _2073 = _1959;
        _2075 = _1961;
        _2077 = _1963;
    }
    else
    {
        uint _2084 = _1598 + 3u;
        uint _2088 = _1598 + 11u;
        float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _341) * 0.949999988079071044921875);
        float _2103 = _2102 * _2102;
        float _2104 = cbLight._m0[_2084].x + _419;
        float _2105 = cbLight._m0[_2084].y + _420;
        float _2106 = cbLight._m0[_2084].z + _421;
        float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
        float _2111 = _2110 * _2104;
        float _2112 = _2110 * _2105;
        float _2113 = _2110 * _2106;
        float _2114 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_2084].xyz));
        float _4084 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2118 = dot(vec3(_337, _338, _339), vec3(_2111, _2112, _2113));
        float _4095 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2122 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2111, _2112, _2113));
        float _4106 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2126 = _2103 * _2103;
        float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
        float _2137 = exp2(log2(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * 5.0);
        float _2144 = 1.0 - _2103;
        float _2154 = (0.5 / (((_1764 * ((_2117 * _2144) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_1764 * _2144) + _2103) * _2117))) * _2117;
        float _4117 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2156 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
        float _2157 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _2073 = (((((_2137 * _1786) + _505) * cbLight._m0[_2088].x) * _2156) * _2157) + _1959;
        _2075 = (((((_2137 * _1788) + _507) * cbLight._m0[_2088].y) * _2156) * _2157) + _1961;
        _2077 = (((((_2137 * _1789) + _508) * cbLight._m0[_2088].z) * _2156) * _2157) + _1963;
    }
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    if (_1596.y == 0u)
    {
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2232;
        float _2234 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2232;
        float _2235 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2232;
        uvec4 _2247 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2248 = _2247.x;
        uint _2259 = uint((float(_2247.y) * floor(float(uint(cbSceneParam._m0[85u].y * _441) / _2248))) + floor(float(uint(cbSceneParam._m0[85u].x * _440) / _2248)));
        float _2269 = (log2(_2235 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2270 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        uint _2273 = uint(isnan(14.0) ? _2270 : (isnan(_2270) ? 14.0 : min(_2270, 14.0)));
        uvec4 _2278 = texelFetch(g_lightClusterGridBuffer, int(((_2273 << 2u) + (_2259 << 6u)) >> 2u));
        uint _2279 = _2278.x;
        uint _2280 = _2247.z;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        if (((((1u << ((_2280 >> 4u) & 15u)) + 4294967295u) & _2279) == 0u) || ((_2280 & 240u) == 0u))
        {
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
        }
        else
        {
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2425;
            float _2427;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            uint _2583 = 0u;
            uint _2592;
            bool _2593;
            for (;;)
            {
                _2592 = texelFetch(g_lightClassification, int((((_2273 << 5u) + (_2259 << 9u)) + (_2583 << 2u)) >> 2u)).x;
                _2593 = _2592 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2593)
                {
                    frontier_phi_68_pred = _2579;
                    frontier_phi_68_pred_1 = _2582;
                    frontier_phi_68_pred_2 = _2581;
                    frontier_phi_68_pred_3 = _2580;
                    frontier_phi_68_pred_4 = _2578;
                    frontier_phi_68_pred_5 = _2577;
                }
                else
                {
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    uint _2728;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2580;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2592;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    for (;;)
                    {
                        uint _2732 = uint(findLSB(_2728)) + (_2583 << 5u);
                        uint _2729 = (_2728 + 4294967295u) & _2728;
                        uint _2734 = _2732 * 48u;
                        vec4 _2748 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 3u)).x));
                        uint _2754 = (_2732 * 48u) + 4u;
                        vec4 _2767 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2754)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 3u)).x));
                        uint _2773 = (_2732 * 48u) + 8u;
                        vec3 _2784 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2773)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 2u)).x));
                        float _2788 = _2748.x - _2233;
                        float _2789 = _2748.y - _2234;
                        float _2790 = _2748.z - _2235;
                        float _2791 = dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790));
                        float _2794 = inversesqrt(_2791);
                        float _2795 = _2794 * _2788;
                        float _2796 = _2794 * _2789;
                        float _2797 = _2794 * _2790;
                        float _2798 = dot(vec3(_461, _464, _467), vec3(_2795, _2796, _2797));
                        float _2803 = 1.0 - (_2791 * _2748.w);
                        float _4143 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2804 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                        float _2805 = sqrt(_2791) * _2767.w;
                        float _2808 = 1.39999997615814208984375 / (_2805 + 1.39999997615814208984375);
                        float _2809 = _2808 * _2808;
                        float _2812 = ((1.0 - _2809) * _2798) + _2809;
                        float _2815 = _2805 * _2805;
                        float _2819 = ((isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))) * _2804) / ((_2815 * 0.699999988079071044921875) + 1.0);
                        float _2823 = (-0.0) - _2233;
                        float _2824 = (-0.0) - _2234;
                        float _2825 = (-0.0) - _2235;
                        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
                        float _2830 = _2829 * _2823;
                        float _2831 = _2829 * _2824;
                        float _2832 = _2829 * _2825;
                        float _2840 = exp2(log2(1.0 / ((_2815 * 3.5) + 5.0)) * 0.25);
                        float _2841 = 1.0 - _536;
                        float _2848 = sqrt(1.0 - ((1.0 - (_2841 * _2841)) * (1.0 - (_2840 * _2840))));
                        float _2849 = _2848 * _2848;
                        float _2850 = _2849 * _2849;
                        float _2851 = _2830 + _2795;
                        float _2852 = _2831 + _2796;
                        float _2853 = _2832 + _2797;
                        float _2857 = inversesqrt(dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853)));
                        float _2861 = dot(vec3(_461, _464, _467), vec3(_2830, _2831, _2832));
                        float _4159 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2864 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                        float _2865 = dot(vec3(_461, _464, _467), vec3(_2857 * _2851, _2857 * _2852, _2857 * _2853));
                        float _4170 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2868 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2872 = ((_2868 * _2868) * (_2850 + (-1.0))) + 1.0;
                        float _2873 = _2808 * _2849;
                        float _2874 = _2873 * _2873;
                        float _2877 = ((1.0 - _2874) * _2798) + _2874;
                        float _4181 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2878 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2879 = 1.0 - _2849;
                        float _2889 = (0.5 / (((_2878 * ((_2864 * _2879) + _2849)) + 9.9999999392252902907785028219223e-09) + (((_2878 * _2879) + _2849) * _2864))) * _2878;
                        float _4192 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2900 = (((_2850 * 3.1415927410125732421875) * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) / ((_2872 * _2872) * ((_2815 * 2.1991131305694580078125) + 3.141590118408203125))) * _2804;
                        _2652 = (_2819 * _2767.x) + _2725;
                        _2653 = (_2819 * _2767.y) + _2726;
                        _2654 = (_2819 * _2767.z) + _2727;
                        _2649 = (_2900 * _2784.x) + _2722;
                        _2650 = (_2900 * _2784.y) + _2723;
                        _2651 = (_2900 * _2784.z) + _2724;
                        if (_2729 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2722 = _2649;
                            _2723 = _2650;
                            _2724 = _2651;
                            _2725 = _2652;
                            _2726 = _2653;
                            _2727 = _2654;
                            _2728 = _2729;
                        }
                    }
                    frontier_phi_68_pred = _2651;
                    frontier_phi_68_pred_1 = _2654;
                    frontier_phi_68_pred_2 = _2653;
                    frontier_phi_68_pred_3 = _2652;
                    frontier_phi_68_pred_4 = _2650;
                    frontier_phi_68_pred_5 = _2649;
                }
                _2421 = frontier_phi_68_pred;
                _2427 = frontier_phi_68_pred_1;
                _2425 = frontier_phi_68_pred_2;
                _2423 = frontier_phi_68_pred_3;
                _2419 = frontier_phi_68_pred_4;
                _2417 = frontier_phi_68_pred_5;
                uint _2584 = _2583 + 1u;
                if (_2584 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2577 = _2417;
                    _2578 = _2419;
                    _2579 = _2421;
                    _2580 = _2423;
                    _2581 = _2425;
                    _2582 = _2427;
                    _2583 = _2584;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
        }
        uvec4 _2430 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2431 = _2430.z;
        uint _2433 = (_2431 >> 8u) & 15u;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        if (((4294967295u << _2433) & _2279) == 0u)
        {
            _2545 = _2416;
            _2547 = _2418;
            _2549 = _2420;
            _2551 = _2422;
            _2553 = _2424;
            _2555 = _2426;
        }
        else
        {
            float _2570 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
            float _2571 = _2570 * _2233;
            float _2572 = _2570 * _2234;
            float _2573 = _2570 * _2235;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2433 < ((_2431 >> 12u) & 15u))
            {
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2705 = _2416;
                float _2706 = _2418;
                float _2707 = _2420;
                float _2708 = _2422;
                float _2709 = _2424;
                float _2710 = _2426;
                uint _2711 = _2433;
                uint _2720;
                bool _2721;
                for (;;)
                {
                    _2720 = texelFetch(g_lightClassification, int((((_2273 << 5u) + (_2259 << 9u)) + (_2711 << 2u)) >> 2u)).x;
                    _2721 = _2720 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2721)
                    {
                        frontier_phi_79_pred = _2710;
                        frontier_phi_79_pred_1 = _2709;
                        frontier_phi_79_pred_2 = _2708;
                        frontier_phi_79_pred_3 = _2707;
                        frontier_phi_79_pred_4 = _2706;
                        frontier_phi_79_pred_5 = _2705;
                    }
                    else
                    {
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _2927 = _2705;
                        float _2928 = _2706;
                        float _2929 = _2707;
                        float _2930 = _2708;
                        float _2931 = _2709;
                        float _2932 = _2710;
                        uint _2933 = _2720;
                        uint _2934;
                        vec4 _2959;
                        float _2960;
                        vec4 _2975;
                        vec3 _2987;
                        vec4 _3003;
                        vec4 _3019;
                        float _3066;
                        bool _3067;
                        for (;;)
                        {
                            uint _2944 = ((_2711 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2933));
                            _2934 = (_2933 + 4294967295u) & _2933;
                            uint _2946 = _2944 * 40u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            _2960 = _2959.w;
                            uint _2962 = (_2944 * 40u) + 4u;
                            _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2977 = (_2944 * 40u) + 8u;
                            _2987 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x));
                            uint _2990 = (_2944 * 40u) + 16u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3006 = (_2944 * 40u) + 20u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3022 = (_2944 * 40u) + 24u;
                            vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            uint _3041 = (_2944 * 40u) + 28u;
                            vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            _3066 = fma(_2235, _3054.z, fma(_2234, _3054.y, _3054.x * _2233)) + _3054.w;
                            _3067 = !((fma(_2235, _3035.z, fma(_2234, _3035.y, _3035.x * _2233)) + _3035.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3067)
                            {
                                float _3094 = _2959.x - _2233;
                                float _3095 = _2959.y - _2234;
                                float _3096 = _2959.z - _2235;
                                float _3097 = dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096));
                                float _3100 = inversesqrt(_3097);
                                float _3101 = _3100 * _3094;
                                float _3102 = _3100 * _3095;
                                float _3103 = _3100 * _3096;
                                float _3107 = 1.0 - (_3097 / (_2960 * _2960));
                                float _4203 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3108 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3112 = sqrt(_3097) * _2975.w;
                                float _3114 = 1.39999997615814208984375 / (_3112 + 1.39999997615814208984375);
                                float _3115 = _3114 * _3114;
                                float _3118 = ((1.0 - _3115) * dot(vec3(_3101, _3102, _3103), vec3(_461, _464, _467))) + _3115;
                                float _3121 = _3112 * _3112;
                                float _3125 = (fma(_2235, _3003.z, fma(_2234, _3003.y, _3003.x * _2233)) + _3003.w) / _3066;
                                float _3126 = (fma(_2235, _3019.z, fma(_2234, _3019.y, _3019.x * _2233)) + _3019.w) / _3066;
                                float _3130 = 1.0 - dot(vec2(_3125, _3126), vec2(_3125, _3126));
                                float _4219 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3132 = _3131 * (((isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0))) * _3108) / ((_3121 * 0.699999988079071044921875) + 1.0));
                                float _3144 = exp2(log2(1.0 / ((_3121 * 3.5) + 5.0)) * 0.25);
                                float _3145 = 1.0 - _536;
                                float _3152 = sqrt(1.0 - ((1.0 - (_3145 * _3145)) * (1.0 - (_3144 * _3144))));
                                float _3153 = _3152 * _3152;
                                float _3154 = _3153 * _3153;
                                float _3155 = _3101 - _2571;
                                float _3156 = _3102 - _2572;
                                float _3157 = _3103 - _2573;
                                float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                                float _3165 = dot(vec3(_461, _464, _467), vec3((-0.0) - _2571, (-0.0) - _2572, (-0.0) - _2573));
                                float _4230 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3168 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3169 = dot(vec3(_461, _464, _467), vec3(_3161 * _3155, _3161 * _3156, _3161 * _3157));
                                float _4241 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3172 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3176 = ((_3172 * _3172) * (_3154 + (-1.0))) + 1.0;
                                float _3177 = _3114 * _3153;
                                float _3178 = _3177 * _3177;
                                float _3184 = ((1.0 - _3178) * dot(vec3(_461, _464, _467), vec3(_3101, _3102, _3103))) + _3178;
                                float _4252 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3185 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3186 = 1.0 - _3153;
                                float _3196 = (0.5 / (((_3185 * ((_3168 * _3186) + _3153)) + 9.9999999392252902907785028219223e-09) + (((_3185 * _3186) + _3153) * _3168))) * _3185;
                                float _4263 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3206 = (_3131 * _3108) * (((_3154 * 3.1415927410125732421875) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) / ((_3176 * _3176) * ((_3121 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3132 * _2975.z;
                                frontier_phi_85_pred_1 = _3132 * _2975.y;
                                frontier_phi_85_pred_2 = _3132 * _2975.x;
                                frontier_phi_85_pred_3 = _3206 * _2987.z;
                                frontier_phi_85_pred_4 = _3206 * _2987.y;
                                frontier_phi_85_pred_5 = _3206 * _2987.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3215 = frontier_phi_85_pred;
                            _3214 = frontier_phi_85_pred_1;
                            _3213 = frontier_phi_85_pred_2;
                            _3212 = frontier_phi_85_pred_3;
                            _3211 = frontier_phi_85_pred_4;
                            _3210 = frontier_phi_85_pred_5;
                            _2917 = _3213 + _2930;
                            _2918 = _3214 + _2931;
                            _2919 = _3215 + _2932;
                            _2914 = _3210 + _2927;
                            _2915 = _3211 + _2928;
                            _2916 = _3212 + _2929;
                            if (_2934 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2934;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2919;
                        frontier_phi_79_pred_1 = _2918;
                        frontier_phi_79_pred_2 = _2917;
                        frontier_phi_79_pred_3 = _2916;
                        frontier_phi_79_pred_4 = _2915;
                        frontier_phi_79_pred_5 = _2914;
                    }
                    _2556 = frontier_phi_79_pred;
                    _2554 = frontier_phi_79_pred_1;
                    _2552 = frontier_phi_79_pred_2;
                    _2550 = frontier_phi_79_pred_3;
                    _2548 = frontier_phi_79_pred_4;
                    _2546 = frontier_phi_79_pred_5;
                    uint _2712 = _2711 + 1u;
                    if (_2712 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2705 = _2546;
                        _2706 = _2548;
                        _2707 = _2550;
                        _2708 = _2552;
                        _2709 = _2554;
                        _2710 = _2556;
                        _2711 = _2712;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2552;
                frontier_phi_60_61_ladder_1 = _2556;
                frontier_phi_60_61_ladder_2 = _2554;
                frontier_phi_60_61_ladder_3 = _2550;
                frontier_phi_60_61_ladder_4 = _2548;
                frontier_phi_60_61_ladder_5 = _2546;
            }
            else
            {
                frontier_phi_60_61_ladder = _2422;
                frontier_phi_60_61_ladder_1 = _2426;
                frontier_phi_60_61_ladder_2 = _2424;
                frontier_phi_60_61_ladder_3 = _2420;
                frontier_phi_60_61_ladder_4 = _2418;
                frontier_phi_60_61_ladder_5 = _2416;
            }
            _2545 = frontier_phi_60_61_ladder_5;
            _2547 = frontier_phi_60_61_ladder_4;
            _2549 = frontier_phi_60_61_ladder_3;
            _2551 = frontier_phi_60_61_ladder;
            _2553 = frontier_phi_60_61_ladder_2;
            _2555 = frontier_phi_60_61_ladder_1;
        }
        float _2560 = isnan(1.0) ? _520 : (isnan(_520) ? 1.0 : min(_520, 1.0));
        _2291 = (_2560 * _2551) + _1728;
        _2293 = (_2560 * _2553) + _1730;
        _2295 = (_2560 * _2555) + _1732;
        _2297 = ((_2545 * _505) * _2560) + _2073;
        _2299 = ((_2547 * _507) * _2560) + _2075;
        _2301 = ((_2549 * _508) * _2560) + _2077;
    }
    else
    {
        _2291 = _1728;
        _2293 = _1730;
        _2295 = _1732;
        _2297 = _2073;
        _2299 = _2075;
        _2301 = _2077;
    }
    uint _2307 = _481 + uint(cbMatDynParam._m0[0u].w);
    float _2315 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _319.x) * cbInstanceData._m0[_2307].x;
    float _2318 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _319.y) * cbInstanceData._m0[_2307].y;
    float _2321 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _319.z) * cbInstanceData._m0[_2307].z;
    float _4279 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _4290 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _4301 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _4312 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _2339 = (((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2291 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _520))) + ((_2297 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1362)) * cbPerFrame._m0[3u].x)) + _2315;
    float _2341 = (_2318 + ((_2299 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1362)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2293 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _520)));
    float _2343 = (_2321 + ((_2301 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _1362)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2295 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _520)));
    float _2344 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2345 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2346 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2352 = cbMtdParam._m0[2u].x * _2315;
    float _2353 = cbMtdParam._m0[2u].y * _2318;
    float _2354 = cbMtdParam._m0[2u].z * _2321;
    float _4338 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2356 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2361 = cbInstanceData._m0[_480 + 6u].w * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)));
    float _2366 = _440 / cbSceneParam._m0[86u].x;
    float _2367 = _441 / cbSceneParam._m0[86u].y;
    vec4 _2381 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2366, _2367, (log2((isnan(cbSceneParam._m0[77u].w) ? _361 : (isnan(_361) ? cbSceneParam._m0[77u].w : min(_361, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2383 = _2381.x;
    float _2384 = _2381.y;
    float _2385 = _2381.z;
    float _2386 = _2381.w;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    if (_361 > cbSceneParam._m0[78u].w)
    {
        float _2441 = isnan(_361) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _361 : min(cbSceneParam._m0[80u].w, _361));
        float _2442 = _2441 / _361;
        float _2453 = _2442 * _412;
        float _2454 = _413 * _2442;
        float _2455 = (-0.0) - _2454;
        float _2456 = _2442 * _414;
        float _2458 = (cbSceneParam._m0[77u].w * _2455) / _2441;
        float _2459 = _2458 + cbSceneParam._m0[79u].w;
        float _2460 = cbSceneParam._m0[79u].w - _2454;
        float _2466 = sqrt(((_2453 * _2453) + (_2454 * _2454)) + (_2456 * _2456));
        float _2469 = (1.0 - (cbSceneParam._m0[77u].w / _2441)) * _2466;
        float _2474 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2476 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2662;
        if (abs((_2455 - _2458) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2662 = ((((_2459 > 0.0) ? exp2(_2474 * _2459) : (2.0 - exp2(_2476 * _2459))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2469;
        }
        else
        {
            float _2606 = 1.0 / cbSceneParam._m0[80u].x;
            float _2607 = isnan(_2460) ? _2459 : (isnan(_2459) ? _2460 : max(_2459, _2460));
            float _2608 = isnan(_2460) ? _2459 : (isnan(_2459) ? _2460 : min(_2459, _2460));
            float _2617 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : min(_2607, 0.0));
            float _2618 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : min(_2608, 0.0));
            _2662 = ((abs(_2466 / _2455) * cbSceneParam._m0[80u].y) * ((((_2617 - _2618) * 2.0) - ((exp2(_2474 * (isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0)))) - exp2(_2474 * (isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0))))) * _2606)) - ((exp2(_2476 * _2617) - exp2(_2476 * _2618)) * _2606))) + (_2469 * cbSceneParam._m0[80u].z);
        }
        vec4 _2664 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2366, _2367, 1.0), 0.0);
        float _2673 = exp2((_2662 * (-1.44269502162933349609375)) * (1.0 - _2664.w));
        float _2674 = log2(_2673);
        float _2690 = log2(_2386);
        _2478 = (exp2(_2690 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].x)) * _2664.x) / cbSceneParam._m0[78u].x)) + _2383;
        _2480 = (exp2(_2690 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].y)) * _2664.y) / cbSceneParam._m0[78u].y)) + _2384;
        _2482 = (exp2(_2690 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].z)) * _2664.z) / cbSceneParam._m0[78u].z)) + _2385;
        _2484 = _2673 * _2386;
    }
    else
    {
        _2478 = _2383;
        _2480 = _2384;
        _2482 = _2385;
        _2484 = _2386;
    }
    bool _2700;
    vec4 _2494;
    vec4 _2516;
    float _2518;
    float _2522;
    float _2523;
    float _2524;
    float _2527;
    float _2530;
    float _2533;
    float _2534;
    bool _2544;
    for (;;)
    {
        _2494 = cbMatDynParam._m0[0u];
        float _2496 = roundEven(_2494.y);
        bool _2497 = _2496 == 3.0;
        float _2498 = log2(_2484);
        float _2502 = exp2(_2498 * cbSceneParam._m0[78u].x);
        float _2503 = exp2(_2498 * cbSceneParam._m0[78u].y);
        float _2504 = exp2(_2498 * cbSceneParam._m0[78u].z);
        float _2505 = _2502 * _2344;
        float _2506 = _2503 * _2345;
        float _2507 = _2504 * _2346;
        float _2514 = _428 + (-0.5);
        _2516 = cbMtdParam._m0[1u];
        _2518 = _2516.y * _2514;
        float _2521 = (_2496 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2522 = _2521 * (_2497 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2478)));
        _2523 = _2521 * (_2497 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2480)));
        _2524 = _2521 * (_2497 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2482)));
        _2527 = ((_2352 * _2356) * _2502) * _2521;
        _2530 = ((_2353 * _2356) * _2503) * _2521;
        _2533 = ((_2354 * _2356) * _2504) * _2521;
        _2534 = _2514 * 0.999000012874603271484375;
        _2544 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2544)
        {
            if ((cbInstanceData._m0[_480 + 7u].x + _2534) < 0.5)
            {
                _2700 = true;
                break;
            }
        }
        uint _2641 = _481 + uint(_2494.w);
        if ((cbInstanceData._m0[_2641].w < 1.0) && ((cbInstanceData._m0[_2641].w + _2534) < 0.5))
        {
            _2700 = true;
            break;
        }
        if ((_2518 + _260) < _2516.x)
        {
            _2700 = true;
            break;
        }
        _2700 = false;
        break;
    }
    float _2905;
    if (_2700)
    {
        discard_state = true;
        _2905 = 0.0;
    }
    else
    {
        _2905 = _2361;
    }
    SV_Target.x = _2522;
    SV_Target.y = _2523;
    SV_Target.z = _2524;
    SV_Target.w = _2905;
    SV_Target_1.x = _2527;
    SV_Target_1.y = _2530;
    SV_Target_1.z = _2533;
    SV_Target_1.w = _2361;
    discard_exit();
}


