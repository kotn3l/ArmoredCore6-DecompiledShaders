#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _926;
float _3385;
float _3386;
float _3387;
float _3388;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    float _238 = (cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _239 = (cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _252 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_238 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_239 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _259 = _252.x * cbMtdParam._m0[9u].x;
    float _260 = _252.y * cbMtdParam._m0[9u].y;
    float _261 = _252.z * cbMtdParam._m0[9u].z;
    float _262 = _252.w * cbMtdParam._m0[9u].w;
    float _263 = _262 * TEXCOORD_1.z;
    vec4 _276 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _238) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _239) + cbTextureTilingScale._m0[1u].w));
    float _280 = _276.z;
    float _284 = (_276.x * 2.0) + (-1.0);
    float _286 = (_276.y * 2.0) + (-1.0);
    float _287 = dot(vec2(_284, _286), vec2(_284, _286));
    float _3397 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _293 = sqrt(1.0 - (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))));
    vec4 _321 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[12u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _328 = fma(_293, _221, fma(_286, _213 * TANGENT.x, (_199 * _191) * _284));
    float _331 = fma(_293, _222, fma(_286, _213 * TANGENT.y, (_199 * _192) * _284));
    float _334 = fma(_293, _223, fma(_286, _213 * TANGENT.z, (_199 * _193) * _284));
    float _338 = inversesqrt(dot(vec3(_328, _331, _334), vec3(_328, _331, _334)));
    float _339 = _338 * _328;
    float _340 = _338 * _331;
    float _341 = _338 * _334;
    float _3408 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _342 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _343 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3441 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3452 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3463 = isnan(0.0) ? cbMtdParam._m0[11u].y : (isnan(cbMtdParam._m0[11u].y) ? 0.0 : max(cbMtdParam._m0[11u].y, 0.0));
    float _347 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _363 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _404 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _414 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _404);
    float _415 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _404);
    float _416 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _404);
    float _420 = inversesqrt(dot(vec3(_414, _415, _416), vec3(_414, _415, _416)));
    float _421 = _414 * _420;
    float _422 = _415 * _420;
    float _423 = _416 * _420;
    vec4 _428 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _430 = _428.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _605 = sqrt(((_414 * _414) + (_415 * _415)) + (_416 * _416));
        float _611 = (cbMatDynParam._m0[5u].x * _605) + cbMatDynParam._m0[5u].y;
        float _3474 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _612 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _616 = (cbMatDynParam._m0[5u].z * _605) + cbMatDynParam._m0[5u].w;
        float _3485 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) - _612)) + _612) < ((_430 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _442 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _443 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _463 = fma(_341, cbSceneParam._m0[5u].z, fma(_340, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _339));
    float _466 = fma(_341, cbSceneParam._m0[6u].z, fma(_340, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _339));
    float _469 = fma(_341, cbSceneParam._m0[7u].z, fma(_340, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _339));
    uint _482 = uint(roundEven(NORMAL.w)) * 13u;
    uint _483 = _482 + 9u;
    uint _484 = _483 + uint(cbMatDynParam._m0[0u].w);
    float _490 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) * cbInstanceData._m0[_484].x;
    float _491 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_484].y;
    float _492 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_484].z;
    float _3496 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _3518 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _495 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _496 = 1.0 - _347;
    float _497 = _493 * _496;
    float _498 = _494 * _496;
    float _499 = _495 * _496;
    float _504 = (_493 + (-0.039999999105930328369140625)) * _347;
    float _505 = (_494 + (-0.039999999105930328369140625)) * _347;
    float _506 = (_495 + (-0.039999999105930328369140625)) * _347;
    float _507 = _504 + 0.039999999105930328369140625;
    float _509 = _505 + 0.039999999105930328369140625;
    float _510 = _506 + 0.039999999105930328369140625;
    vec4 _519 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _442, cbSceneParam._m0[86u].y * _443));
    float _522 = _519.x * TEXCOORD_1.w;
    float _523 = dot(vec3(_339, _340, _341), vec3(_421, _422, _423));
    float _526 = _523 * 2.0;
    float _530 = (_526 * _339) - _421;
    float _531 = (_526 * _340) - _422;
    float _532 = (_526 * _341) - _423;
    float _536 = abs(dot(vec3(_421, _422, _423), vec3(_339, _340, _341)));
    float _3529 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _538 = sqrt(_343);
    float _551 = exp2((_538 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_538 * 3.0));
    float _557 = (1.0 - _551) * ((_538 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _558 = _551 * _538;
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _925;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _650 = fma(_594, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _586));
        float _654 = fma(_594, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _586));
        float _658 = fma(_594, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _586));
        float _683 = _586 + _339;
        float _684 = _590 + _340;
        float _685 = _594 + _341;
        float _695 = fma(_685, cbModelParam._m0[26u].z, fma(_684, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683)) - _650;
        float _696 = fma(_685, cbModelParam._m0[27u].z, fma(_684, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683)) - _654;
        float _697 = fma(_685, cbModelParam._m0[28u].z, fma(_684, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683)) - _658;
        float _701 = inversesqrt(dot(vec3(_695, _696, _697), vec3(_695, _696, _697)));
        float _714 = ((_701 * _695) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_650 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _715 = ((_701 * _696) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_654 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _716 = ((_701 * _697) / cbModelParam._m0[34u].z) + ((((((_658 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        float _753 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_719.x + (-0.5));
        float _755 = _753 * (_719.y + (-0.5));
        float _756 = _753 * (_719.z + (-0.5));
        float _763 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_726.x + (-0.5));
        float _765 = _763 * (_726.y + (-0.5));
        float _766 = _763 * (_726.z + (-0.5));
        float _773 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_733.x + (-0.5));
        float _775 = _773 * (_733.y + (-0.5));
        float _776 = _773 * (_733.z + (-0.5));
        float _783 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_740.x + (-0.5));
        float _785 = _783 * (_740.y + (-0.5));
        float _786 = _783 * (_740.z + (-0.5));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = _754 * 0.5;
        float _791 = _764 * 0.5;
        float _792 = _774 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _807 = (dot(vec3(_339, _340, _341), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _817 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3577 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_819 + 1.0))) + _824) * _787;
        float _834 = _755 * 0.5;
        float _835 = _765 * 0.5;
        float _836 = _775 * 0.5;
        float _837 = dot(vec3(_834, _835, _836), vec3(_834, _835, _836));
        float _842 = (_837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_837);
        float _850 = (dot(vec3(_339, _340, _341), vec3(_842 * _834, _842 * _835, _842 * _836)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _859 = sqrt(((_835 * _835) + (_834 * _834)) + (_836 * _836)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3610 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_861 + 1.0))) + _866) * _788;
        float _876 = _756 * 0.5;
        float _877 = _766 * 0.5;
        float _878 = _776 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _892 = (dot(vec3(_339, _340, _341), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _901 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3643 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_903 + 1.0))) + _908) * _789;
        _925 = _756;
        _927 = _755;
        _928 = _754;
        _929 = _766;
        _930 = _765;
        _931 = _764;
        _932 = _776;
        _933 = _775;
        _934 = _774;
        _935 = _789;
        _936 = _788;
        _937 = _787;
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
    }
    else
    {
        _925 = _926;
        _927 = _926;
        _928 = _926;
        _929 = _926;
        _930 = _926;
        _931 = _926;
        _932 = _926;
        _933 = _926;
        _934 = _926;
        _935 = _926;
        _936 = _926;
        _937 = _926;
        _938 = 0.0;
        _939 = 0.0;
        _940 = 0.0;
    }
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _969 = fma(_594, cbModelParam._m0[30u].z, fma(_590, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _586));
        float _973 = fma(_594, cbModelParam._m0[31u].z, fma(_590, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _586));
        float _977 = fma(_594, cbModelParam._m0[32u].z, fma(_590, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _586));
        float _1000 = _586 + _339;
        float _1001 = _590 + _340;
        float _1002 = _594 + _341;
        float _1012 = fma(_1002, cbModelParam._m0[30u].z, fma(_1001, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1000)) - _969;
        float _1013 = fma(_1002, cbModelParam._m0[31u].z, fma(_1001, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1000)) - _973;
        float _1014 = fma(_1002, cbModelParam._m0[32u].z, fma(_1001, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1000)) - _977;
        float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
        float _1031 = ((_1018 * _1012) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_969 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1018 * _1013) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_973 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1018 * _1014) / cbModelParam._m0[35u].z) + ((((((_977 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        float _1068 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1035.x + (-0.5));
        float _1070 = _1068 * (_1035.y + (-0.5));
        float _1071 = _1068 * (_1035.z + (-0.5));
        float _1078 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1042.x + (-0.5));
        float _1080 = _1078 * (_1042.y + (-0.5));
        float _1081 = _1078 * (_1042.z + (-0.5));
        float _1088 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1049.x + (-0.5));
        float _1090 = _1088 * (_1049.y + (-0.5));
        float _1091 = _1088 * (_1049.z + (-0.5));
        float _1098 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1056.x + (-0.5));
        float _1100 = _1098 * (_1056.y + (-0.5));
        float _1101 = _1098 * (_1056.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_339, _340, _341), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3706 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1132 + 1.0))) + _1137) * _1102;
        float _1147 = _1070 * 0.5;
        float _1148 = _1080 * 0.5;
        float _1149 = _1090 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_339, _340, _341), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3739 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1174 + 1.0))) + _1179) * _1103;
        float _1189 = _1071 * 0.5;
        float _1190 = _1081 * 0.5;
        float _1191 = _1091 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_339, _340, _341), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3772 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1216 + 1.0))) + _1221) * _1104;
        _1238 = _1071;
        _1239 = _1070;
        _1240 = _1069;
        _1241 = _1081;
        _1242 = _1080;
        _1243 = _1079;
        _1244 = _1091;
        _1245 = _1090;
        _1246 = _1089;
        _1247 = _1104;
        _1248 = _1103;
        _1249 = _1102;
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1251 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _926;
        _1239 = _926;
        _1240 = _926;
        _1241 = _926;
        _1242 = _926;
        _1243 = _926;
        _1244 = _926;
        _1245 = _926;
        _1246 = _926;
        _1247 = _926;
        _1248 = _926;
        _1249 = _926;
        _1250 = 0.0;
        _1251 = 0.0;
        _1252 = 0.0;
    }
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _938)) + _938;
    float _1263 = (cbModelParam._m0[1u].x * (_1251 - _939)) + _939;
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _940)) + _940;
    float _1285 = fma(_1264, cbSceneParam._m0[89u].z, fma(_1263, cbSceneParam._m0[89u].y, _1262 * cbSceneParam._m0[89u].x));
    float _1288 = fma(_1264, cbSceneParam._m0[90u].z, fma(_1263, cbSceneParam._m0[90u].y, _1262 * cbSceneParam._m0[90u].x));
    float _1291 = fma(_1264, cbSceneParam._m0[91u].z, fma(_1263, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1262));
    float _1306 = _530 * 0.5;
    float _1307 = _531 * 0.5;
    float _1308 = _532 * 0.5;
    float _1309 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1312 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1239, _1242, _1245, _1248));
    float _1315 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1349;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1322 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_925, _929, _932, _935));
        float _1326 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_927, _930, _933, _936));
        float _1330 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_928, _931, _934, _937));
        float _1337 = dot(vec4(cbModelParam._m0[39u]), vec4(_1306, _1307, _1308, 1.0));
        _1349 = dot(vec3(isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1349 = 1.0;
    }
    float _1360;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1351 = dot(vec4(cbModelParam._m0[40u]), vec4(_1306, _1307, _1308, 1.0));
        _1360 = dot(vec3(isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1351) ? 0.0 : (isnan(0.0) ? _1351 : max(0.0, _1351))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1360 = 1.0;
    }
    float _1364 = (_1360 * cbModelParam._m0[1u].x) + (_1349 * (1.0 - cbModelParam._m0[1u].x));
    float _1374 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _343);
    float _1375 = isnan(_1374) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1374 : min(cbModelParam._m0[25u].z, _1374));
    float _1457;
    float _1459;
    float _1461;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1424 = fma(_594, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _586)) + cbModelParam._m0[13u].w;
        float _1428 = fma(_594, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _586)) + cbModelParam._m0[14u].w;
        float _1432 = fma(_594, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _586)) + cbModelParam._m0[15u].w;
        float _1435 = fma(_532, cbModelParam._m0[13u].z, fma(_531, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _530));
        float _1438 = fma(_532, cbModelParam._m0[14u].z, fma(_531, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _530));
        float _1441 = fma(_532, cbModelParam._m0[15u].z, fma(_531, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _530));
        float _1469;
        if (_1435 > 0.0)
        {
            _1469 = abs((1.0 - _1424) / _1435);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1424 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1469 = frontier_phi_19_17_ladder;
        }
        float _1696;
        if (_1438 > 0.0)
        {
            _1696 = abs((1.0 - _1428) / _1438);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1428 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1696 = frontier_phi_28_24_ladder;
        }
        float _1953;
        if (_1441 > 0.0)
        {
            _1953 = abs((1.0 - _1432) / _1441);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1432 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1953 = frontier_phi_40_35_ladder;
        }
        float _1955 = isnan(_1696) ? _1469 : (isnan(_1469) ? _1696 : min(_1469, _1696));
        float _1956 = isnan(_1953) ? _1955 : (isnan(_1955) ? _1953 : min(_1955, _1953));
        float _1960 = (_1956 * _1435) + _1424;
        float _1961 = (_1956 * _1438) + _1428;
        float _1962 = (_1956 * _1441) + _1432;
        float _1963 = _1956 * 9.9999997473787516355514526367188e-05;
        float _1965 = (-1.0) - _1963;
        float _1967 = _1963 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1962 > _1967) || ((_1962 < _1965) || ((_1961 > _1967) || ((_1961 < _1965) || ((_1960 < _1965) || (_1960 > _1967))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2090 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1962, cbModelParam._m0[9u].z, fma(_1961, cbModelParam._m0[9u].y, _1960 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1962, cbModelParam._m0[10u].z, fma(_1961, cbModelParam._m0[10u].y, _1960 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1962, cbModelParam._m0[11u].z, fma(_1961, cbModelParam._m0[11u].y, _1960 * cbModelParam._m0[11u].x))), _1375);
            frontier_phi_18_40_ladder = _2090.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2090.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2090.x * cbModelParam._m0[1u].y;
        }
        _1457 = frontier_phi_18_40_ladder_2;
        _1459 = frontier_phi_18_40_ladder_1;
        _1461 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_530, _531, _532), _1375);
        _1457 = _1445.x * cbModelParam._m0[1u].y;
        _1459 = _1445.y * cbModelParam._m0[1u].y;
        _1461 = _1445.z * cbModelParam._m0[1u].y;
    }
    float _1465 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _343);
    float _1466 = isnan(_1465) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1465 : min(cbModelParam._m0[25u].w, _1465));
    float _1558;
    float _1560;
    float _1562;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1522 = fma(_594, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _586)) + cbModelParam._m0[21u].w;
        float _1526 = fma(_594, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _586)) + cbModelParam._m0[22u].w;
        float _1530 = fma(_594, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _586)) + cbModelParam._m0[23u].w;
        float _1533 = fma(_532, cbModelParam._m0[21u].z, fma(_531, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _530));
        float _1536 = fma(_532, cbModelParam._m0[22u].z, fma(_531, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _530));
        float _1539 = fma(_532, cbModelParam._m0[23u].z, fma(_531, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _530));
        float _1701;
        if (_1533 > 0.0)
        {
            _1701 = abs((1.0 - _1522) / _1533);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1522 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1701 = frontier_phi_30_26_ladder;
        }
        float _1980;
        if (_1536 > 0.0)
        {
            _1980 = abs((1.0 - _1526) / _1536);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1526 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1980 = frontier_phi_42_37_ladder;
        }
        float _2193;
        if (_1539 > 0.0)
        {
            _2193 = abs((1.0 - _1530) / _1539);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1530 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2193 = frontier_phi_51_48_ladder;
        }
        float _2195 = isnan(_1980) ? _1701 : (isnan(_1701) ? _1980 : min(_1701, _1980));
        float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
        float _2200 = (_2196 * _1533) + _1522;
        float _2201 = (_2196 * _1536) + _1526;
        float _2202 = (_2196 * _1539) + _1530;
        float _2203 = _2196 * 9.9999997473787516355514526367188e-05;
        float _2204 = (-1.0) - _2203;
        float _2206 = _2203 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2202 > _2206) || ((_2202 < _2204) || ((_2201 > _2206) || ((_2201 < _2204) || ((_2200 < _2204) || (_2200 > _2206))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2437 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2202, cbModelParam._m0[17u].z, fma(_2201, cbModelParam._m0[17u].y, _2200 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2202, cbModelParam._m0[18u].z, fma(_2201, cbModelParam._m0[18u].y, _2200 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2202, cbModelParam._m0[19u].z, fma(_2201, cbModelParam._m0[19u].y, _2200 * cbModelParam._m0[19u].x))), _1466);
            frontier_phi_27_51_ladder = _2437.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2437.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2437.x * cbModelParam._m0[1u].z;
        }
        _1558 = frontier_phi_27_51_ladder_2;
        _1560 = frontier_phi_27_51_ladder_1;
        _1562 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1542 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_530, _531, _532), _1466);
        _1558 = _1542.x * cbModelParam._m0[1u].z;
        _1560 = _1542.y * cbModelParam._m0[1u].z;
        _1562 = _1542.z * cbModelParam._m0[1u].z;
    }
    float _1575 = (((_557 * _507) + _558) * _522) * ((cbModelParam._m0[1u].w * (_1558 - _1457)) + _1457);
    float _1577 = (((_557 * _509) + _558) * _522) * ((cbModelParam._m0[1u].w * (_1560 - _1459)) + _1459);
    float _1579 = (((_557 * _510) + _558) * _522) * ((cbModelParam._m0[1u].w * (_1562 - _1461)) + _1461);
    float _1582 = fma(_1579, cbSceneParam._m0[89u].z, fma(_1577, cbSceneParam._m0[89u].y, _1575 * cbSceneParam._m0[89u].x));
    float _1585 = fma(_1579, cbSceneParam._m0[90u].z, fma(_1577, cbSceneParam._m0[90u].y, _1575 * cbSceneParam._m0[90u].x));
    float _1588 = fma(_1579, cbSceneParam._m0[91u].z, fma(_1577, cbSceneParam._m0[91u].y, _1575 * cbSceneParam._m0[91u].x));
    vec4 _1596 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_442, _443));
    float _1598 = _1596.w;
    float _1610 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1598);
    float _1611 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1598);
    float _1612 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1598);
    uvec4 _1616 = floatBitsToUint(cbInstanceData._m0[_482 + 5u]);
    uint _1618 = _1616.x * 14u;
    uint _1619 = _1618 + 13u;
    float _1626 = _522 + (-1.0);
    float _1631 = (cbLight._m0[_1619].x * _1626) + 1.0;
    float _1632 = (cbLight._m0[_1619].y * _1626) + 1.0;
    float _1633 = (cbLight._m0[_1619].z * _1626) + 1.0;
    float _1634 = (cbLight._m0[_1619].w * _1626) + 1.0;
    uint _1635 = _1618 + 5u;
    float _1641 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
    uint _1645 = _1618 + 4u;
    float _1655 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
    uint _1659 = _1618 | 1u;
    float _1670 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_339, _340, _341));
    float _1673 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_339, _340, _341));
    float _3908 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _3919 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _1678 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1680 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.3183098733425140380859375;
    float _1687 = ((cbLight._m0[_1635].x * _1641) * _1680) + (((cbLight._m0[_1645].x * _1610) * _1655) * _1678);
    float _1688 = ((_1641 * cbLight._m0[_1635].y) * _1680) + (((cbLight._m0[_1645].y * _1611) * _1655) * _1678);
    float _1689 = ((_1641 * cbLight._m0[_1635].z) * _1680) + (((cbLight._m0[_1645].z * _1612) * _1655) * _1678);
    uvec4 _1693 = floatBitsToUint(cbLight._m0[_1618 + 12u]);
    bool _1695 = _1693.x == 0u;
    float _1706;
    float _1708;
    float _1710;
    if (_1695)
    {
        _1706 = _1687;
        _1708 = _1688;
        _1710 = _1689;
    }
    else
    {
        uint _1714 = _1618 + 6u;
        float _1730 = (dot(vec3(cbLight._m0[_1618 + 2u].xyz), vec3(_339, _340, _341)) * 0.5) + 0.5;
        float _1731 = _1730 * _1730;
        float _3930 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1733 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
        _1706 = (((cbLight._m0[_1714].x * 0.3183098733425140380859375) * _1732) * _1733) + _1687;
        _1708 = (((cbLight._m0[_1714].y * 0.3183098733425140380859375) * _1732) * _1733) + _1688;
        _1710 = (((cbLight._m0[_1714].z * 0.3183098733425140380859375) * _1732) * _1733) + _1689;
    }
    bool _1713 = _1693.y == 0u;
    float _1751;
    float _1753;
    float _1755;
    if (_1713)
    {
        _1751 = _1706;
        _1753 = _1708;
        _1755 = _1710;
    }
    else
    {
        uint _1924 = _1618 + 7u;
        float _1940 = (dot(vec3(cbLight._m0[_1618 + 3u].xyz), vec3(_339, _340, _341)) * 0.5) + 0.5;
        float _1941 = _1940 * _1940;
        float _3946 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1943 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _1751 = (((cbLight._m0[_1924].x * 0.3183098733425140380859375) * _1942) * _1943) + _1706;
        _1753 = (((cbLight._m0[_1924].y * 0.3183098733425140380859375) * _1942) * _1943) + _1708;
        _1755 = (((cbLight._m0[_1924].z * 0.3183098733425140380859375) * _1942) * _1943) + _1710;
    }
    uint _1758 = _1618 + 8u;
    float _1771 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1618].w)) * _343) * 0.949999988079071044921875);
    float _1772 = _1771 * _1771;
    float _1773 = cbLight._m0[_1618].x + _421;
    float _1774 = cbLight._m0[_1618].y + _422;
    float _1775 = cbLight._m0[_1618].z + _423;
    float _1779 = inversesqrt(dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775)));
    float _1780 = _1779 * _1773;
    float _1781 = _1779 * _1774;
    float _1782 = _1779 * _1775;
    float _1783 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1618].xyz));
    float _3962 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1786 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _1787 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1788 = dot(vec3(_339, _340, _341), vec3(_1780, _1781, _1782));
    float _3984 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1791 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1792 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_1780, _1781, _1782));
    float _3995 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1796 = _1772 * _1772;
    float _1800 = ((_1791 * _1791) * (_1796 + (-1.0))) + 1.0;
    float _1808 = exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0);
    float _1809 = 0.959999978542327880859375 - _504;
    float _1811 = 0.959999978542327880859375 - _505;
    float _1812 = 0.959999978542327880859375 - _506;
    float _1819 = 1.0 - _1772;
    float _1830 = (0.5 / (((_1787 * ((_1786 * _1819) + _1772)) + 9.9999999392252902907785028219223e-09) + (((_1787 * _1819) + _1772) * _1786))) * _1786;
    float _4006 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1832 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1796 / ((_1800 * _1800) * 3.141590118408203125));
    uint _1846 = _1618 + 9u;
    float _1857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1659].w)) * _343) * 0.949999988079071044921875);
    float _1858 = _1857 * _1857;
    float _1859 = cbLight._m0[_1659].x + _421;
    float _1860 = cbLight._m0[_1659].y + _422;
    float _1861 = cbLight._m0[_1659].z + _423;
    float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
    float _1866 = _1865 * _1859;
    float _1867 = _1865 * _1860;
    float _1868 = _1865 * _1861;
    float _1869 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1659].xyz));
    float _4017 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1873 = dot(vec3(_339, _340, _341), vec3(_1866, _1867, _1868));
    float _4028 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1877 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_1866, _1867, _1868));
    float _4039 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1881 = _1858 * _1858;
    float _1885 = ((_1876 * _1876) * (_1881 + (-1.0))) + 1.0;
    float _1892 = exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0);
    float _1899 = 1.0 - _1858;
    float _1909 = (0.5 / (((_1787 * ((_1872 * _1899) + _1858)) + 9.9999999392252902907785028219223e-09) + (((_1787 * _1899) + _1858) * _1872))) * _1872;
    float _4050 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1911 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1881 / ((_1885 * _1885) * 3.141590118408203125));
    float _1921 = (((((_1892 * _1809) + _507) * cbLight._m0[_1846].x) * _1911) * _1641) + ((((cbLight._m0[_1758].x * _1610) * ((_1808 * _1809) + _507)) * _1832) * _1655);
    float _1922 = (((((_1892 * _1811) + _509) * cbLight._m0[_1846].y) * _1911) * _1641) + ((((cbLight._m0[_1758].y * _1611) * ((_1808 * _1811) + _509)) * _1832) * _1655);
    float _1923 = (((((_1892 * _1812) + _510) * cbLight._m0[_1846].z) * _1911) * _1641) + ((((cbLight._m0[_1758].z * _1612) * ((_1808 * _1812) + _510)) * _1832) * _1655);
    float _1985;
    float _1987;
    float _1989;
    if (_1695)
    {
        _1985 = _1921;
        _1987 = _1922;
        _1989 = _1923;
    }
    else
    {
        uint _1991 = _1618 + 2u;
        uint _1995 = _1618 + 10u;
        float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _343) * 0.949999988079071044921875);
        float _2010 = _2009 * _2009;
        float _2011 = cbLight._m0[_1991].x + _421;
        float _2012 = cbLight._m0[_1991].y + _422;
        float _2013 = cbLight._m0[_1991].z + _423;
        float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
        float _2018 = _2017 * _2011;
        float _2019 = _2017 * _2012;
        float _2020 = _2017 * _2013;
        float _2021 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1991].xyz));
        float _4061 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2024 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2025 = dot(vec3(_339, _340, _341), vec3(_2018, _2019, _2020));
        float _4072 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2029 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2018, _2019, _2020));
        float _4083 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2033 = _2010 * _2010;
        float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
        float _2044 = exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0);
        float _2051 = 1.0 - _2010;
        float _2061 = (0.5 / (((_1787 * ((_2024 * _2051) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_1787 * _2051) + _2010) * _2024))) * _2024;
        float _4094 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2063 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
        float _2064 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
        _1985 = (((((_2044 * _1809) + _507) * cbLight._m0[_1995].x) * _2063) * _2064) + _1921;
        _1987 = (((((_2044 * _1811) + _509) * cbLight._m0[_1995].y) * _2063) * _2064) + _1922;
        _1989 = (((((_2044 * _1812) + _510) * cbLight._m0[_1995].z) * _2063) * _2064) + _1923;
    }
    float _2099;
    float _2101;
    float _2103;
    if (_1713)
    {
        _2099 = _1985;
        _2101 = _1987;
        _2103 = _1989;
    }
    else
    {
        uint _2110 = _1618 + 3u;
        uint _2114 = _1618 + 11u;
        float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _343) * 0.949999988079071044921875);
        float _2129 = _2128 * _2128;
        float _2130 = cbLight._m0[_2110].x + _421;
        float _2131 = cbLight._m0[_2110].y + _422;
        float _2132 = cbLight._m0[_2110].z + _423;
        float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
        float _2137 = _2136 * _2130;
        float _2138 = _2136 * _2131;
        float _2139 = _2136 * _2132;
        float _2140 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_2110].xyz));
        float _4110 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2143 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2144 = dot(vec3(_339, _340, _341), vec3(_2137, _2138, _2139));
        float _4121 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2148 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2137, _2138, _2139));
        float _4132 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2152 = _2129 * _2129;
        float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
        float _2163 = exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0);
        float _2170 = 1.0 - _2129;
        float _2180 = (0.5 / (((_1787 * ((_2143 * _2170) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_1787 * _2170) + _2129) * _2143))) * _2143;
        float _4143 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2182 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
        float _2183 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _2099 = (((((_2163 * _1809) + _507) * cbLight._m0[_2114].x) * _2182) * _2183) + _1985;
        _2101 = (((((_2163 * _1811) + _509) * cbLight._m0[_2114].y) * _2182) * _2183) + _1987;
        _2103 = (((((_2163 * _1812) + _510) * cbLight._m0[_2114].z) * _2182) * _2183) + _1989;
    }
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    if (_1616.y == 0u)
    {
        float _2258 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2258;
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2258;
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2258;
        uvec4 _2273 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2274 = _2273.x;
        uint _2285 = uint((float(_2273.y) * floor(float(uint(cbSceneParam._m0[85u].y * _443) / _2274))) + floor(float(uint(cbSceneParam._m0[85u].x * _442) / _2274)));
        float _2295 = (log2(_2261 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2296 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        uint _2299 = uint(isnan(14.0) ? _2296 : (isnan(_2296) ? 14.0 : min(_2296, 14.0)));
        uvec4 _2304 = texelFetch(g_lightClusterGridBuffer, int(((_2299 << 2u) + (_2285 << 6u)) >> 2u));
        uint _2305 = _2304.x;
        uint _2306 = _2273.z;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        float _2452;
        if (((((1u << ((_2306 >> 4u) & 15u)) + 4294967295u) & _2305) == 0u) || ((_2306 & 240u) == 0u))
        {
            _2442 = 0.0;
            _2444 = 0.0;
            _2446 = 0.0;
            _2448 = 0.0;
            _2450 = 0.0;
            _2452 = 0.0;
        }
        else
        {
            float _2443;
            float _2445;
            float _2447;
            float _2449;
            float _2451;
            float _2453;
            float _2603 = 0.0;
            float _2604 = 0.0;
            float _2605 = 0.0;
            float _2606 = 0.0;
            float _2607 = 0.0;
            float _2608 = 0.0;
            uint _2609 = 0u;
            uint _2618;
            bool _2619;
            for (;;)
            {
                _2618 = texelFetch(g_lightClassification, int((((_2299 << 5u) + (_2285 << 9u)) + (_2609 << 2u)) >> 2u)).x;
                _2619 = _2618 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2619)
                {
                    frontier_phi_68_pred = _2605;
                    frontier_phi_68_pred_1 = _2608;
                    frontier_phi_68_pred_2 = _2607;
                    frontier_phi_68_pred_3 = _2606;
                    frontier_phi_68_pred_4 = _2604;
                    frontier_phi_68_pred_5 = _2603;
                }
                else
                {
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    uint _2754;
                    _2748 = _2603;
                    _2749 = _2604;
                    _2750 = _2605;
                    _2751 = _2606;
                    _2752 = _2607;
                    _2753 = _2608;
                    _2754 = _2618;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    for (;;)
                    {
                        uint _2758 = uint(findLSB(_2754)) + (_2609 << 5u);
                        uint _2755 = (_2754 + 4294967295u) & _2754;
                        uint _2760 = _2758 * 48u;
                        vec4 _2774 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 3u)).x));
                        uint _2780 = (_2758 * 48u) + 4u;
                        vec4 _2793 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2780)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 3u)).x));
                        uint _2799 = (_2758 * 48u) + 8u;
                        vec3 _2810 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2799)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 2u)).x));
                        float _2814 = _2774.x - _2259;
                        float _2815 = _2774.y - _2260;
                        float _2816 = _2774.z - _2261;
                        float _2817 = dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816));
                        float _2820 = inversesqrt(_2817);
                        float _2821 = _2820 * _2814;
                        float _2822 = _2820 * _2815;
                        float _2823 = _2820 * _2816;
                        float _2824 = dot(vec3(_463, _466, _469), vec3(_2821, _2822, _2823));
                        float _2829 = 1.0 - (_2817 * _2774.w);
                        float _4169 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2830 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2831 = sqrt(_2817) * _2793.w;
                        float _2834 = 1.39999997615814208984375 / (_2831 + 1.39999997615814208984375);
                        float _2835 = _2834 * _2834;
                        float _2838 = ((1.0 - _2835) * _2824) + _2835;
                        float _2841 = _2831 * _2831;
                        float _2845 = ((isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0))) * _2830) / ((_2841 * 0.699999988079071044921875) + 1.0);
                        float _2849 = (-0.0) - _2259;
                        float _2850 = (-0.0) - _2260;
                        float _2851 = (-0.0) - _2261;
                        float _2855 = inversesqrt(dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851)));
                        float _2856 = _2855 * _2849;
                        float _2857 = _2855 * _2850;
                        float _2858 = _2855 * _2851;
                        float _2866 = exp2(log2(1.0 / ((_2841 * 3.5) + 5.0)) * 0.25);
                        float _2867 = 1.0 - _538;
                        float _2874 = sqrt(1.0 - ((1.0 - (_2867 * _2867)) * (1.0 - (_2866 * _2866))));
                        float _2875 = _2874 * _2874;
                        float _2876 = _2875 * _2875;
                        float _2877 = _2856 + _2821;
                        float _2878 = _2857 + _2822;
                        float _2879 = _2858 + _2823;
                        float _2883 = inversesqrt(dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879)));
                        float _2887 = dot(vec3(_463, _466, _469), vec3(_2856, _2857, _2858));
                        float _4185 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2890 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2891 = dot(vec3(_463, _466, _469), vec3(_2883 * _2877, _2883 * _2878, _2883 * _2879));
                        float _4196 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2894 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2898 = ((_2894 * _2894) * (_2876 + (-1.0))) + 1.0;
                        float _2899 = _2834 * _2875;
                        float _2900 = _2899 * _2899;
                        float _2903 = ((1.0 - _2900) * _2824) + _2900;
                        float _4207 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2904 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2905 = 1.0 - _2875;
                        float _2915 = (0.5 / (((_2904 * ((_2890 * _2905) + _2875)) + 9.9999999392252902907785028219223e-09) + (((_2904 * _2905) + _2875) * _2890))) * _2904;
                        float _4218 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2926 = (((_2876 * 3.1415927410125732421875) * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) / ((_2898 * _2898) * ((_2841 * 2.1991131305694580078125) + 3.141590118408203125))) * _2830;
                        _2678 = (_2845 * _2793.x) + _2751;
                        _2679 = (_2845 * _2793.y) + _2752;
                        _2680 = (_2845 * _2793.z) + _2753;
                        _2675 = (_2926 * _2810.x) + _2748;
                        _2676 = (_2926 * _2810.y) + _2749;
                        _2677 = (_2926 * _2810.z) + _2750;
                        if (_2755 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2748 = _2675;
                            _2749 = _2676;
                            _2750 = _2677;
                            _2751 = _2678;
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2755;
                        }
                    }
                    frontier_phi_68_pred = _2677;
                    frontier_phi_68_pred_1 = _2680;
                    frontier_phi_68_pred_2 = _2679;
                    frontier_phi_68_pred_3 = _2678;
                    frontier_phi_68_pred_4 = _2676;
                    frontier_phi_68_pred_5 = _2675;
                }
                _2447 = frontier_phi_68_pred;
                _2453 = frontier_phi_68_pred_1;
                _2451 = frontier_phi_68_pred_2;
                _2449 = frontier_phi_68_pred_3;
                _2445 = frontier_phi_68_pred_4;
                _2443 = frontier_phi_68_pred_5;
                uint _2610 = _2609 + 1u;
                if (_2610 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2603 = _2443;
                    _2604 = _2445;
                    _2605 = _2447;
                    _2606 = _2449;
                    _2607 = _2451;
                    _2608 = _2453;
                    _2609 = _2610;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2442 = _2443;
            _2444 = _2445;
            _2446 = _2447;
            _2448 = _2449;
            _2450 = _2451;
            _2452 = _2453;
        }
        uvec4 _2456 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2457 = _2456.z;
        uint _2459 = (_2457 >> 8u) & 15u;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        if (((4294967295u << _2459) & _2305) == 0u)
        {
            _2571 = _2442;
            _2573 = _2444;
            _2575 = _2446;
            _2577 = _2448;
            _2579 = _2450;
            _2581 = _2452;
        }
        else
        {
            float _2596 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
            float _2597 = _2596 * _2259;
            float _2598 = _2596 * _2260;
            float _2599 = _2596 * _2261;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2459 < ((_2457 >> 12u) & 15u))
            {
                float _2572;
                float _2574;
                float _2576;
                float _2578;
                float _2580;
                float _2582;
                float _2731 = _2442;
                float _2732 = _2444;
                float _2733 = _2446;
                float _2734 = _2448;
                float _2735 = _2450;
                float _2736 = _2452;
                uint _2737 = _2459;
                uint _2746;
                bool _2747;
                for (;;)
                {
                    _2746 = texelFetch(g_lightClassification, int((((_2299 << 5u) + (_2285 << 9u)) + (_2737 << 2u)) >> 2u)).x;
                    _2747 = _2746 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2747)
                    {
                        frontier_phi_79_pred = _2736;
                        frontier_phi_79_pred_1 = _2735;
                        frontier_phi_79_pred_2 = _2734;
                        frontier_phi_79_pred_3 = _2733;
                        frontier_phi_79_pred_4 = _2732;
                        frontier_phi_79_pred_5 = _2731;
                    }
                    else
                    {
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _2953 = _2731;
                        float _2954 = _2732;
                        float _2955 = _2733;
                        float _2956 = _2734;
                        float _2957 = _2735;
                        float _2958 = _2736;
                        uint _2959 = _2746;
                        uint _2960;
                        vec4 _2985;
                        float _2986;
                        vec4 _3001;
                        vec3 _3013;
                        vec4 _3029;
                        vec4 _3045;
                        float _3092;
                        bool _3093;
                        for (;;)
                        {
                            uint _2970 = ((_2737 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2959));
                            _2960 = (_2959 + 4294967295u) & _2959;
                            uint _2972 = _2970 * 40u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            _2986 = _2985.w;
                            uint _2988 = (_2970 * 40u) + 4u;
                            _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3003 = (_2970 * 40u) + 8u;
                            _3013 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x));
                            uint _3016 = (_2970 * 40u) + 16u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            uint _3032 = (_2970 * 40u) + 20u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3048 = (_2970 * 40u) + 24u;
                            vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3067 = (_2970 * 40u) + 28u;
                            vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            _3092 = fma(_2261, _3080.z, fma(_2260, _3080.y, _3080.x * _2259)) + _3080.w;
                            _3093 = !((fma(_2261, _3061.z, fma(_2260, _3061.y, _3061.x * _2259)) + _3061.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3093)
                            {
                                float _3120 = _2985.x - _2259;
                                float _3121 = _2985.y - _2260;
                                float _3122 = _2985.z - _2261;
                                float _3123 = dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122));
                                float _3126 = inversesqrt(_3123);
                                float _3127 = _3126 * _3120;
                                float _3128 = _3126 * _3121;
                                float _3129 = _3126 * _3122;
                                float _3133 = 1.0 - (_3123 / (_2986 * _2986));
                                float _4229 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3134 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3138 = sqrt(_3123) * _3001.w;
                                float _3140 = 1.39999997615814208984375 / (_3138 + 1.39999997615814208984375);
                                float _3141 = _3140 * _3140;
                                float _3144 = ((1.0 - _3141) * dot(vec3(_3127, _3128, _3129), vec3(_463, _466, _469))) + _3141;
                                float _3147 = _3138 * _3138;
                                float _3151 = (fma(_2261, _3029.z, fma(_2260, _3029.y, _3029.x * _2259)) + _3029.w) / _3092;
                                float _3152 = (fma(_2261, _3045.z, fma(_2260, _3045.y, _3045.x * _2259)) + _3045.w) / _3092;
                                float _3156 = 1.0 - dot(vec2(_3151, _3152), vec2(_3151, _3152));
                                float _4245 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3157 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3158 = _3157 * (((isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))) * _3134) / ((_3147 * 0.699999988079071044921875) + 1.0));
                                float _3170 = exp2(log2(1.0 / ((_3147 * 3.5) + 5.0)) * 0.25);
                                float _3171 = 1.0 - _538;
                                float _3178 = sqrt(1.0 - ((1.0 - (_3171 * _3171)) * (1.0 - (_3170 * _3170))));
                                float _3179 = _3178 * _3178;
                                float _3180 = _3179 * _3179;
                                float _3181 = _3127 - _2597;
                                float _3182 = _3128 - _2598;
                                float _3183 = _3129 - _2599;
                                float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                                float _3191 = dot(vec3(_463, _466, _469), vec3((-0.0) - _2597, (-0.0) - _2598, (-0.0) - _2599));
                                float _4256 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3194 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3195 = dot(vec3(_463, _466, _469), vec3(_3187 * _3181, _3187 * _3182, _3187 * _3183));
                                float _4267 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3198 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3202 = ((_3198 * _3198) * (_3180 + (-1.0))) + 1.0;
                                float _3203 = _3140 * _3179;
                                float _3204 = _3203 * _3203;
                                float _3210 = ((1.0 - _3204) * dot(vec3(_463, _466, _469), vec3(_3127, _3128, _3129))) + _3204;
                                float _4278 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3211 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3212 = 1.0 - _3179;
                                float _3222 = (0.5 / (((_3211 * ((_3194 * _3212) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_3211 * _3212) + _3179) * _3194))) * _3211;
                                float _4289 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3232 = (_3157 * _3134) * (((_3180 * 3.1415927410125732421875) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) / ((_3202 * _3202) * ((_3147 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3158 * _3001.z;
                                frontier_phi_85_pred_1 = _3158 * _3001.y;
                                frontier_phi_85_pred_2 = _3158 * _3001.x;
                                frontier_phi_85_pred_3 = _3232 * _3013.z;
                                frontier_phi_85_pred_4 = _3232 * _3013.y;
                                frontier_phi_85_pred_5 = _3232 * _3013.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3241 = frontier_phi_85_pred;
                            _3240 = frontier_phi_85_pred_1;
                            _3239 = frontier_phi_85_pred_2;
                            _3238 = frontier_phi_85_pred_3;
                            _3237 = frontier_phi_85_pred_4;
                            _3236 = frontier_phi_85_pred_5;
                            _2943 = _3239 + _2956;
                            _2944 = _3240 + _2957;
                            _2945 = _3241 + _2958;
                            _2940 = _3236 + _2953;
                            _2941 = _3237 + _2954;
                            _2942 = _3238 + _2955;
                            if (_2960 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2960;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2945;
                        frontier_phi_79_pred_1 = _2944;
                        frontier_phi_79_pred_2 = _2943;
                        frontier_phi_79_pred_3 = _2942;
                        frontier_phi_79_pred_4 = _2941;
                        frontier_phi_79_pred_5 = _2940;
                    }
                    _2582 = frontier_phi_79_pred;
                    _2580 = frontier_phi_79_pred_1;
                    _2578 = frontier_phi_79_pred_2;
                    _2576 = frontier_phi_79_pred_3;
                    _2574 = frontier_phi_79_pred_4;
                    _2572 = frontier_phi_79_pred_5;
                    uint _2738 = _2737 + 1u;
                    if (_2738 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2731 = _2572;
                        _2732 = _2574;
                        _2733 = _2576;
                        _2734 = _2578;
                        _2735 = _2580;
                        _2736 = _2582;
                        _2737 = _2738;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2578;
                frontier_phi_60_61_ladder_1 = _2582;
                frontier_phi_60_61_ladder_2 = _2580;
                frontier_phi_60_61_ladder_3 = _2576;
                frontier_phi_60_61_ladder_4 = _2574;
                frontier_phi_60_61_ladder_5 = _2572;
            }
            else
            {
                frontier_phi_60_61_ladder = _2448;
                frontier_phi_60_61_ladder_1 = _2452;
                frontier_phi_60_61_ladder_2 = _2450;
                frontier_phi_60_61_ladder_3 = _2446;
                frontier_phi_60_61_ladder_4 = _2444;
                frontier_phi_60_61_ladder_5 = _2442;
            }
            _2571 = frontier_phi_60_61_ladder_5;
            _2573 = frontier_phi_60_61_ladder_4;
            _2575 = frontier_phi_60_61_ladder_3;
            _2577 = frontier_phi_60_61_ladder;
            _2579 = frontier_phi_60_61_ladder_2;
            _2581 = frontier_phi_60_61_ladder_1;
        }
        float _2586 = isnan(1.0) ? _522 : (isnan(_522) ? 1.0 : min(_522, 1.0));
        _2317 = (_2586 * _2577) + _1751;
        _2319 = (_2586 * _2579) + _1753;
        _2321 = (_2586 * _2581) + _1755;
        _2323 = ((_2571 * _507) * _2586) + _2099;
        _2325 = ((_2573 * _509) * _2586) + _2101;
        _2327 = ((_2575 * _510) * _2586) + _2103;
    }
    else
    {
        _2317 = _1751;
        _2319 = _1753;
        _2321 = _1755;
        _2323 = _2099;
        _2325 = _2101;
        _2327 = _2103;
    }
    uint _2333 = _483 + uint(cbMatDynParam._m0[0u].w);
    float _2341 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _321.x) * cbInstanceData._m0[_2333].x;
    float _2344 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _321.y) * cbInstanceData._m0[_2333].y;
    float _2347 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _321.z) * cbInstanceData._m0[_2333].z;
    float _4305 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _4316 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4327 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _4338 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _2365 = (((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2317 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _522))) + ((_2323 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _1364)) * cbPerFrame._m0[3u].x)) + _2341;
    float _2367 = (_2344 + ((_2325 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1364)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2319 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _522)));
    float _2369 = (_2347 + ((_2327 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1364)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2321 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _522)));
    float _2370 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2371 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2372 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2378 = cbMtdParam._m0[2u].x * _2341;
    float _2379 = cbMtdParam._m0[2u].y * _2344;
    float _2380 = cbMtdParam._m0[2u].z * _2347;
    float _4364 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2382 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2387 = cbInstanceData._m0[_482 + 6u].w * (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)));
    float _2392 = _442 / cbSceneParam._m0[86u].x;
    float _2393 = _443 / cbSceneParam._m0[86u].y;
    vec4 _2407 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2392, _2393, (log2((isnan(cbSceneParam._m0[77u].w) ? _363 : (isnan(_363) ? cbSceneParam._m0[77u].w : min(_363, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2409 = _2407.x;
    float _2410 = _2407.y;
    float _2411 = _2407.z;
    float _2412 = _2407.w;
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    if (_363 > cbSceneParam._m0[78u].w)
    {
        float _2467 = isnan(_363) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _363 : min(cbSceneParam._m0[80u].w, _363));
        float _2468 = _2467 / _363;
        float _2479 = _2468 * _414;
        float _2480 = _415 * _2468;
        float _2481 = (-0.0) - _2480;
        float _2482 = _2468 * _416;
        float _2484 = (cbSceneParam._m0[77u].w * _2481) / _2467;
        float _2485 = _2484 + cbSceneParam._m0[79u].w;
        float _2486 = cbSceneParam._m0[79u].w - _2480;
        float _2492 = sqrt(((_2479 * _2479) + (_2480 * _2480)) + (_2482 * _2482));
        float _2495 = (1.0 - (cbSceneParam._m0[77u].w / _2467)) * _2492;
        float _2500 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2502 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2688;
        if (abs((_2481 - _2484) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2688 = ((((_2485 > 0.0) ? exp2(_2500 * _2485) : (2.0 - exp2(_2502 * _2485))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2495;
        }
        else
        {
            float _2632 = 1.0 / cbSceneParam._m0[80u].x;
            float _2633 = isnan(_2486) ? _2485 : (isnan(_2485) ? _2486 : max(_2485, _2486));
            float _2634 = isnan(_2486) ? _2485 : (isnan(_2485) ? _2486 : min(_2485, _2486));
            float _2643 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : min(_2633, 0.0));
            float _2644 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : min(_2634, 0.0));
            _2688 = ((abs(_2492 / _2481) * cbSceneParam._m0[80u].y) * ((((_2643 - _2644) * 2.0) - ((exp2(_2500 * (isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0)))) - exp2(_2500 * (isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0))))) * _2632)) - ((exp2(_2502 * _2643) - exp2(_2502 * _2644)) * _2632))) + (_2495 * cbSceneParam._m0[80u].z);
        }
        vec4 _2690 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2392, _2393, 1.0), 0.0);
        float _2699 = exp2((_2688 * (-1.44269502162933349609375)) * (1.0 - _2690.w));
        float _2700 = log2(_2699);
        float _2716 = log2(_2412);
        _2504 = (exp2(_2716 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2700 * cbSceneParam._m0[78u].x)) * _2690.x) / cbSceneParam._m0[78u].x)) + _2409;
        _2506 = (exp2(_2716 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2700 * cbSceneParam._m0[78u].y)) * _2690.y) / cbSceneParam._m0[78u].y)) + _2410;
        _2508 = (exp2(_2716 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2700 * cbSceneParam._m0[78u].z)) * _2690.z) / cbSceneParam._m0[78u].z)) + _2411;
        _2510 = _2699 * _2412;
    }
    else
    {
        _2504 = _2409;
        _2506 = _2410;
        _2508 = _2411;
        _2510 = _2412;
    }
    bool _2726;
    vec4 _2520;
    vec4 _2542;
    float _2544;
    float _2548;
    float _2549;
    float _2550;
    float _2553;
    float _2556;
    float _2559;
    float _2560;
    bool _2570;
    for (;;)
    {
        _2520 = cbMatDynParam._m0[0u];
        float _2522 = roundEven(_2520.y);
        bool _2523 = _2522 == 3.0;
        float _2524 = log2(_2510);
        float _2528 = exp2(_2524 * cbSceneParam._m0[78u].x);
        float _2529 = exp2(_2524 * cbSceneParam._m0[78u].y);
        float _2530 = exp2(_2524 * cbSceneParam._m0[78u].z);
        float _2531 = _2528 * _2370;
        float _2532 = _2529 * _2371;
        float _2533 = _2530 * _2372;
        float _2540 = _430 + (-0.5);
        _2542 = cbMtdParam._m0[1u];
        _2544 = _2542.y * _2540;
        float _2547 = (_2522 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2548 = _2547 * (_2523 ? _2531 : (_2531 + (cbSceneParam._m0[72u].w * _2504)));
        _2549 = _2547 * (_2523 ? _2532 : (_2532 + (cbSceneParam._m0[72u].w * _2506)));
        _2550 = _2547 * (_2523 ? _2533 : (_2533 + (cbSceneParam._m0[72u].w * _2508)));
        _2553 = ((_2378 * _2382) * _2528) * _2547;
        _2556 = ((_2379 * _2382) * _2529) * _2547;
        _2559 = ((_2380 * _2382) * _2530) * _2547;
        _2560 = _2540 * 0.999000012874603271484375;
        _2570 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2570)
        {
            if ((cbInstanceData._m0[_482 + 7u].x + _2560) < 0.5)
            {
                _2726 = true;
                break;
            }
        }
        uint _2667 = _483 + uint(_2520.w);
        if ((cbInstanceData._m0[_2667].w < 1.0) && ((cbInstanceData._m0[_2667].w + _2560) < 0.5))
        {
            _2726 = true;
            break;
        }
        if ((_2544 + _262) < _2542.x)
        {
            _2726 = true;
            break;
        }
        _2726 = false;
        break;
    }
    float _2931;
    if (_2726)
    {
        discard_state = true;
        _2931 = 0.0;
    }
    else
    {
        _2931 = _2387;
    }
    SV_Target.x = _2548;
    SV_Target.y = _2549;
    SV_Target.z = _2550;
    SV_Target.w = _2931;
    SV_Target_1.x = _2553;
    SV_Target_1.y = _2556;
    SV_Target_1.z = _2559;
    SV_Target_1.w = _2387;
    discard_exit();
}


