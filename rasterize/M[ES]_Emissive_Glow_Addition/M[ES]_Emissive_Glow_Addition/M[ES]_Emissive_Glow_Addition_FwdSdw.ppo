#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _883;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    float _236 = (cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _237 = (cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _250 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_236 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_237 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _257 = _250.x * cbMtdParam._m0[9u].x;
    float _258 = _250.y * cbMtdParam._m0[9u].y;
    float _259 = _250.z * cbMtdParam._m0[9u].z;
    float _261 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _250.w;
    vec4 _274 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _236) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _237) + cbTextureTilingScale._m0[1u].w));
    float _278 = _274.z;
    float _282 = (_274.x * 2.0) + (-1.0);
    float _284 = (_274.y * 2.0) + (-1.0);
    float _285 = dot(vec2(_282, _284), vec2(_282, _284));
    float _3547 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = sqrt(1.0 - (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))));
    vec4 _319 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[12u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _326 = fma(_291, _219, fma(_284, _211 * TANGENT.x, (_197 * _189) * _282));
    float _329 = fma(_291, _220, fma(_284, _211 * TANGENT.y, (_197 * _190) * _282));
    float _332 = fma(_291, _221, fma(_284, _211 * TANGENT.z, (_197 * _191) * _282));
    float _336 = inversesqrt(dot(vec3(_326, _329, _332), vec3(_326, _329, _332)));
    float _337 = _336 * _326;
    float _338 = _336 * _329;
    float _339 = _336 * _332;
    float _3558 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _340 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _3569 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _341 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3591 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3602 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3613 = isnan(0.0) ? cbMtdParam._m0[11u].y : (isnan(cbMtdParam._m0[11u].y) ? 0.0 : max(cbMtdParam._m0[11u].y, 0.0));
    float _345 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _361 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _402 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _412 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _402);
    float _413 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _402);
    float _414 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _402);
    float _418 = inversesqrt(dot(vec3(_412, _413, _414), vec3(_412, _413, _414)));
    float _419 = _412 * _418;
    float _420 = _413 * _418;
    float _421 = _414 * _418;
    float _427 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _428 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _449 = fma(_339, cbSceneParam._m0[5u].z, fma(_338, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _337));
    float _452 = fma(_339, cbSceneParam._m0[6u].z, fma(_338, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _337));
    float _455 = fma(_339, cbSceneParam._m0[7u].z, fma(_338, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _337));
    uint _468 = uint(roundEven(NORMAL.w)) * 13u;
    uint _469 = _468 + 9u;
    uint _470 = _469 + uint(cbMatDynParam._m0[0u].w);
    float _476 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_470].x;
    float _477 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * cbInstanceData._m0[_470].y;
    float _478 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) * cbInstanceData._m0[_470].z;
    float _3624 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _482 = 1.0 - _345;
    float _483 = _479 * _482;
    float _484 = _480 * _482;
    float _485 = _481 * _482;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _345;
    float _491 = (_480 + (-0.039999999105930328369140625)) * _345;
    float _492 = (_481 + (-0.039999999105930328369140625)) * _345;
    float _493 = _490 + 0.039999999105930328369140625;
    float _495 = _491 + 0.039999999105930328369140625;
    float _496 = _492 + 0.039999999105930328369140625;
    vec4 _505 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _427, cbSceneParam._m0[86u].y * _428));
    float _508 = _505.x * TEXCOORD_1.w;
    float _509 = dot(vec3(_337, _338, _339), vec3(_419, _420, _421));
    float _512 = _509 * 2.0;
    float _516 = (_512 * _337) - _419;
    float _517 = (_512 * _338) - _420;
    float _518 = (_512 * _339) - _421;
    float _522 = abs(dot(vec3(_419, _420, _421), vec3(_337, _338, _339)));
    float _3657 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _524 = sqrt(_341);
    float _537 = exp2((_524 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_524 * 3.0));
    float _543 = (1.0 - _537) * ((_524 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _544 = _537 * _524;
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _882;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _607 = fma(_580, cbModelParam._m0[26u].z, fma(_576, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _572));
        float _611 = fma(_580, cbModelParam._m0[27u].z, fma(_576, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _572));
        float _615 = fma(_580, cbModelParam._m0[28u].z, fma(_576, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _572));
        float _640 = _572 + _337;
        float _641 = _576 + _338;
        float _642 = _580 + _339;
        float _652 = fma(_642, cbModelParam._m0[26u].z, fma(_641, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _640)) - _607;
        float _653 = fma(_642, cbModelParam._m0[27u].z, fma(_641, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _640)) - _611;
        float _654 = fma(_642, cbModelParam._m0[28u].z, fma(_641, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _640)) - _615;
        float _658 = inversesqrt(dot(vec3(_652, _653, _654), vec3(_652, _653, _654)));
        float _671 = ((_658 * _652) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_607 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _672 = ((_658 * _653) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_611 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _673 = ((_658 * _654) / cbModelParam._m0[34u].z) + ((((((_615 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        float _710 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_676.x + (-0.5));
        float _712 = _710 * (_676.y + (-0.5));
        float _713 = _710 * (_676.z + (-0.5));
        float _720 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_683.x + (-0.5));
        float _722 = _720 * (_683.y + (-0.5));
        float _723 = _720 * (_683.z + (-0.5));
        float _730 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_690.x + (-0.5));
        float _732 = _730 * (_690.y + (-0.5));
        float _733 = _730 * (_690.z + (-0.5));
        float _740 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_697.x + (-0.5));
        float _742 = _740 * (_697.y + (-0.5));
        float _743 = _740 * (_697.z + (-0.5));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _747 = _711 * 0.5;
        float _748 = _721 * 0.5;
        float _749 = _731 * 0.5;
        float _750 = dot(vec3(_747, _748, _749), vec3(_747, _748, _749));
        float _755 = (_750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_750);
        float _764 = (dot(vec3(_337, _338, _339), vec3(_755 * _747, _755 * _748, _755 * _749)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _774 = sqrt(((_748 * _748) + (_747 * _747)) + (_749 * _749)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _776 = _775 * 2.0;
        float _780 = (1.0 - _775) / (_775 + 1.0);
        float _3705 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _790 = ((((1.0 - _781) * (_776 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_776 + 1.0))) + _781) * _744;
        float _791 = _712 * 0.5;
        float _792 = _722 * 0.5;
        float _793 = _732 * 0.5;
        float _794 = dot(vec3(_791, _792, _793), vec3(_791, _792, _793));
        float _799 = (_794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_794);
        float _807 = (dot(vec3(_337, _338, _339), vec3(_799 * _791, _799 * _792, _799 * _793)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _816 = sqrt(((_792 * _792) + (_791 * _791)) + (_793 * _793)) / (_745 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _818 = _817 * 2.0;
        float _822 = (1.0 - _817) / (_817 + 1.0);
        float _3738 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _832 = ((((1.0 - _823) * (_818 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_818 + 1.0))) + _823) * _745;
        float _833 = _713 * 0.5;
        float _834 = _723 * 0.5;
        float _835 = _733 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _849 = (dot(vec3(_337, _338, _339), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _858 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_746 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3771 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_860 + 1.0))) + _865) * _746;
        _882 = _713;
        _884 = _712;
        _885 = _711;
        _886 = _723;
        _887 = _722;
        _888 = _721;
        _889 = _733;
        _890 = _732;
        _891 = _731;
        _892 = _746;
        _893 = _745;
        _894 = _744;
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)));
        _896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0)));
        _897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
    }
    else
    {
        _882 = _883;
        _884 = _883;
        _885 = _883;
        _886 = _883;
        _887 = _883;
        _888 = _883;
        _889 = _883;
        _890 = _883;
        _891 = _883;
        _892 = _883;
        _893 = _883;
        _894 = _883;
        _895 = 0.0;
        _896 = 0.0;
        _897 = 0.0;
    }
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _923 = fma(_580, cbModelParam._m0[30u].z, fma(_576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _572));
        float _927 = fma(_580, cbModelParam._m0[31u].z, fma(_576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _572));
        float _931 = fma(_580, cbModelParam._m0[32u].z, fma(_576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _572));
        float _954 = _572 + _337;
        float _955 = _576 + _338;
        float _956 = _580 + _339;
        float _966 = fma(_956, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954)) - _923;
        float _967 = fma(_956, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954)) - _927;
        float _968 = fma(_956, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954)) - _931;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_923 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_927 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[35u].z) + ((((((_931 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1022 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_989.x + (-0.5));
        float _1024 = _1022 * (_989.y + (-0.5));
        float _1025 = _1022 * (_989.z + (-0.5));
        float _1032 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_996.x + (-0.5));
        float _1034 = _1032 * (_996.y + (-0.5));
        float _1035 = _1032 * (_996.z + (-0.5));
        float _1042 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1003.x + (-0.5));
        float _1044 = _1042 * (_1003.y + (-0.5));
        float _1045 = _1042 * (_1003.z + (-0.5));
        float _1052 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1010.x + (-0.5));
        float _1054 = _1052 * (_1010.y + (-0.5));
        float _1055 = _1052 * (_1010.z + (-0.5));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1023 * 0.5;
        float _1060 = _1033 * 0.5;
        float _1061 = _1043 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_337, _338, _339), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3834 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1086 + 1.0))) + _1091) * _1056;
        float _1101 = _1024 * 0.5;
        float _1102 = _1034 * 0.5;
        float _1103 = _1044 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_337, _338, _339), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3867 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1128 + 1.0))) + _1133) * _1057;
        float _1143 = _1025 * 0.5;
        float _1144 = _1035 * 0.5;
        float _1145 = _1045 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_337, _338, _339), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3900 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1170 + 1.0))) + _1175) * _1058;
        _1192 = _1025;
        _1193 = _1024;
        _1194 = _1023;
        _1195 = _1035;
        _1196 = _1034;
        _1197 = _1033;
        _1198 = _1045;
        _1199 = _1044;
        _1200 = _1043;
        _1201 = _1058;
        _1202 = _1057;
        _1203 = _1056;
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
    }
    else
    {
        _1192 = _883;
        _1193 = _883;
        _1194 = _883;
        _1195 = _883;
        _1196 = _883;
        _1197 = _883;
        _1198 = _883;
        _1199 = _883;
        _1200 = _883;
        _1201 = _883;
        _1202 = _883;
        _1203 = _883;
        _1204 = 0.0;
        _1205 = 0.0;
        _1206 = 0.0;
    }
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _895)) + _895;
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _896)) + _896;
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _897)) + _897;
    float _1239 = fma(_1218, cbSceneParam._m0[89u].z, fma(_1217, cbSceneParam._m0[89u].y, _1216 * cbSceneParam._m0[89u].x));
    float _1242 = fma(_1218, cbSceneParam._m0[90u].z, fma(_1217, cbSceneParam._m0[90u].y, _1216 * cbSceneParam._m0[90u].x));
    float _1245 = fma(_1218, cbSceneParam._m0[91u].z, fma(_1217, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1216));
    float _1260 = _516 * 0.5;
    float _1261 = _517 * 0.5;
    float _1262 = _518 * 0.5;
    float _1263 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1266 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1269 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1303;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1276 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_882, _886, _889, _892));
        float _1280 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_884, _887, _890, _893));
        float _1284 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_885, _888, _891, _894));
        float _1291 = dot(vec4(cbModelParam._m0[39u]), vec4(_1260, _1261, _1262, 1.0));
        _1303 = dot(vec3(isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1291) ? 0.0 : (isnan(0.0) ? _1291 : max(0.0, _1291))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1303 = 1.0;
    }
    float _1314;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1305 = dot(vec4(cbModelParam._m0[40u]), vec4(_1260, _1261, _1262, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1305) ? 0.0 : (isnan(0.0) ? _1305 : max(0.0, _1305))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1318 = (_1314 * cbModelParam._m0[1u].x) + (_1303 * (1.0 - cbModelParam._m0[1u].x));
    float _1328 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _341);
    float _1329 = isnan(_1328) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1328 : min(cbModelParam._m0[25u].z, _1328));
    float _1411;
    float _1413;
    float _1415;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1378 = fma(_580, cbModelParam._m0[13u].z, fma(_576, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _572)) + cbModelParam._m0[13u].w;
        float _1382 = fma(_580, cbModelParam._m0[14u].z, fma(_576, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _572)) + cbModelParam._m0[14u].w;
        float _1386 = fma(_580, cbModelParam._m0[15u].z, fma(_576, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _572)) + cbModelParam._m0[15u].w;
        float _1389 = fma(_518, cbModelParam._m0[13u].z, fma(_517, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _516));
        float _1392 = fma(_518, cbModelParam._m0[14u].z, fma(_517, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _516));
        float _1395 = fma(_518, cbModelParam._m0[15u].z, fma(_517, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _516));
        float _1423;
        if (_1389 > 0.0)
        {
            _1423 = abs((1.0 - _1378) / _1389);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1378 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1423 = frontier_phi_16_14_ladder;
        }
        float _1597;
        if (_1392 > 0.0)
        {
            _1597 = abs((1.0 - _1382) / _1392);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1382 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1597 = frontier_phi_25_21_ladder;
        }
        float _1893;
        if (_1395 > 0.0)
        {
            _1893 = abs((1.0 - _1386) / _1395);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1386 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1893 = frontier_phi_37_32_ladder;
        }
        float _1895 = isnan(_1597) ? _1423 : (isnan(_1423) ? _1597 : min(_1423, _1597));
        float _1896 = isnan(_1893) ? _1895 : (isnan(_1895) ? _1893 : min(_1895, _1893));
        float _1900 = (_1896 * _1389) + _1378;
        float _1901 = (_1896 * _1392) + _1382;
        float _1902 = (_1896 * _1395) + _1386;
        float _1903 = _1896 * 9.9999997473787516355514526367188e-05;
        float _1905 = (-1.0) - _1903;
        float _1907 = _1903 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1902 > _1907) || ((_1902 < _1905) || ((_1901 > _1907) || ((_1901 < _1905) || ((_1900 < _1905) || (_1900 > _1907))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2047 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1902, cbModelParam._m0[9u].z, fma(_1901, cbModelParam._m0[9u].y, _1900 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1902, cbModelParam._m0[10u].z, fma(_1901, cbModelParam._m0[10u].y, _1900 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1902, cbModelParam._m0[11u].z, fma(_1901, cbModelParam._m0[11u].y, _1900 * cbModelParam._m0[11u].x))), _1329);
            frontier_phi_15_37_ladder = _2047.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2047.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2047.z * cbModelParam._m0[1u].y;
        }
        _1411 = frontier_phi_15_37_ladder_1;
        _1413 = frontier_phi_15_37_ladder;
        _1415 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1399 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_516, _517, _518), _1329);
        _1411 = _1399.x * cbModelParam._m0[1u].y;
        _1413 = _1399.y * cbModelParam._m0[1u].y;
        _1415 = _1399.z * cbModelParam._m0[1u].y;
    }
    float _1419 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _341);
    float _1420 = isnan(_1419) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1419 : min(cbModelParam._m0[25u].w, _1419));
    float _1512;
    float _1514;
    float _1516;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1476 = fma(_580, cbModelParam._m0[21u].z, fma(_576, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _572)) + cbModelParam._m0[21u].w;
        float _1480 = fma(_580, cbModelParam._m0[22u].z, fma(_576, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _572)) + cbModelParam._m0[22u].w;
        float _1484 = fma(_580, cbModelParam._m0[23u].z, fma(_576, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _572)) + cbModelParam._m0[23u].w;
        float _1487 = fma(_518, cbModelParam._m0[21u].z, fma(_517, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _516));
        float _1490 = fma(_518, cbModelParam._m0[22u].z, fma(_517, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _516));
        float _1493 = fma(_518, cbModelParam._m0[23u].z, fma(_517, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _516));
        float _1602;
        if (_1487 > 0.0)
        {
            _1602 = abs((1.0 - _1476) / _1487);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1476 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1602 = frontier_phi_27_23_ladder;
        }
        float _1920;
        if (_1490 > 0.0)
        {
            _1920 = abs((1.0 - _1480) / _1490);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1480 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1920 = frontier_phi_39_34_ladder;
        }
        float _2258;
        if (_1493 > 0.0)
        {
            _2258 = abs((1.0 - _1484) / _1493);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1484 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2258 = frontier_phi_49_46_ladder;
        }
        float _2260 = isnan(_1920) ? _1602 : (isnan(_1602) ? _1920 : min(_1602, _1920));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1487) + _1476;
        float _2266 = (_2261 * _1490) + _1480;
        float _2267 = (_2261 * _1493) + _1484;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2269 = (-1.0) - _2268;
        float _2271 = _2268 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2267 > _2271) || ((_2267 < _2269) || ((_2266 > _2271) || ((_2266 < _2269) || ((_2265 < _2269) || (_2265 > _2271))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2267, cbModelParam._m0[17u].z, fma(_2266, cbModelParam._m0[17u].y, _2265 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2267, cbModelParam._m0[18u].z, fma(_2266, cbModelParam._m0[18u].y, _2265 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2267, cbModelParam._m0[19u].z, fma(_2266, cbModelParam._m0[19u].y, _2265 * cbModelParam._m0[19u].x))), _1420);
            frontier_phi_24_49_ladder = _2389.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2389.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2389.x * cbModelParam._m0[1u].z;
        }
        _1512 = frontier_phi_24_49_ladder_2;
        _1514 = frontier_phi_24_49_ladder_1;
        _1516 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_516, _517, _518), _1420);
        _1512 = _1496.x * cbModelParam._m0[1u].z;
        _1514 = _1496.y * cbModelParam._m0[1u].z;
        _1516 = _1496.z * cbModelParam._m0[1u].z;
    }
    float _1529 = (((_543 * _493) + _544) * _508) * ((cbModelParam._m0[1u].w * (_1512 - _1411)) + _1411);
    float _1531 = (((_543 * _495) + _544) * _508) * ((cbModelParam._m0[1u].w * (_1514 - _1413)) + _1413);
    float _1533 = (((_543 * _496) + _544) * _508) * ((cbModelParam._m0[1u].w * (_1516 - _1415)) + _1415);
    float _1536 = fma(_1533, cbSceneParam._m0[89u].z, fma(_1531, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1539 = fma(_1533, cbSceneParam._m0[90u].z, fma(_1531, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1542 = fma(_1533, cbSceneParam._m0[91u].z, fma(_1531, cbSceneParam._m0[91u].y, _1529 * cbSceneParam._m0[91u].x));
    float _1576 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1580 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1584 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1588 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1589 = _1576 / _1588;
    float _1590 = _1580 / _1588;
    float _1591 = _1584 / _1588;
    float _1738;
    float _1739;
    float _1740;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1618 = ((uint(_1591 > cbSceneParam._m0[59u].y) + uint(_1591 > cbSceneParam._m0[59u].x)) + uint(_1591 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1619 = _1618 + 43u;
        uint _1627 = _1618 + 44u;
        uint _1635 = _1618 + 45u;
        uint _1643 = _1618 + 46u;
        float _1654 = fma(_1588, cbSceneParam._m0[_1619].w, fma(_1584, cbSceneParam._m0[_1619].z, fma(_1580, cbSceneParam._m0[_1619].y, _1576 * cbSceneParam._m0[_1619].x)));
        float _1658 = fma(_1588, cbSceneParam._m0[_1627].w, fma(_1584, cbSceneParam._m0[_1627].z, fma(_1580, cbSceneParam._m0[_1627].y, _1576 * cbSceneParam._m0[_1627].x)));
        float _1666 = fma(_1588, cbSceneParam._m0[_1643].w, fma(_1584, cbSceneParam._m0[_1643].z, fma(_1580, cbSceneParam._m0[_1643].y, _1576 * cbSceneParam._m0[_1643].x)));
        float _1671 = cbSceneParam._m0[33u].z * _1666;
        float _1673 = cbSceneParam._m0[33u].w * _1666;
        float _1676 = fma(_1588, cbSceneParam._m0[_1635].w, fma(_1584, cbSceneParam._m0[_1635].z, fma(_1580, cbSceneParam._m0[_1635].y, _1576 * cbSceneParam._m0[_1635].x))) / _1666;
        float _1724 = (cbSceneParam._m0[33u].x - sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591))) * cbSceneParam._m0[33u].y;
        float _4026 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1731 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1671 + _1654) / _1666, (_1673 + _1658) / _1666), _1676), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1673 + _1654) / _1666, (_1658 - _1671) / _1666), _1676), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1654 - _1671) / _1666, (_1658 - _1673) / _1666), _1676), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1654 - _1673) / _1666, (_1671 + _1658) / _1666), _1676), 0.0)).x), vec4(0.25)));
        _1738 = 1.0 - (_1731 * cbSceneParam._m0[34u].x);
        _1739 = 1.0 - (_1731 * cbSceneParam._m0[34u].y);
        _1740 = 1.0 - (_1731 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1738 = 1.0;
        _1739 = 1.0;
        _1740 = 1.0;
    }
    float _1804;
    float _1806;
    float _1808;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1792 = fma(_1588, cbSceneParam._m0[63u].w, fma(_1584, cbSceneParam._m0[63u].z, fma(_1580, cbSceneParam._m0[63u].y, _1576 * cbSceneParam._m0[63u].x)));
        float _1793 = fma(_1588, cbSceneParam._m0[60u].w, fma(_1584, cbSceneParam._m0[60u].z, fma(_1580, cbSceneParam._m0[60u].y, _1576 * cbSceneParam._m0[60u].x))) / _1792;
        float _1794 = fma(_1588, cbSceneParam._m0[61u].w, fma(_1584, cbSceneParam._m0[61u].z, fma(_1580, cbSceneParam._m0[61u].y, _1576 * cbSceneParam._m0[61u].x))) / _1792;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1793 >= cbSceneParam._m0[64u].x) && (_1794 >= cbSceneParam._m0[64u].y)) && (_1793 <= cbSceneParam._m0[64u].z)) && (_1794 <= cbSceneParam._m0[64u].w))
        {
            float _1933 = fma(_1588, cbSceneParam._m0[62u].w, fma(_1584, cbSceneParam._m0[62u].z, fma(_1580, cbSceneParam._m0[62u].y, _1576 * cbSceneParam._m0[62u].x))) / _1792;
            float _1937 = isnan(cbSceneParam._m0[41u].w) ? _1933 : (isnan(_1933) ? cbSceneParam._m0[41u].w : max(_1933, cbSceneParam._m0[41u].w));
            float _1980 = (cbSceneParam._m0[33u].x - sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591))) * cbSceneParam._m0[33u].y;
            float _4042 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
            float _1987 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1793, cbSceneParam._m0[33u].w + _1794), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1793, _1794 - cbSceneParam._m0[33u].z), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1793 - cbSceneParam._m0[33u].z, _1794 - cbSceneParam._m0[33u].w), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1793 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1794), _1937), 0.0)).x), vec4(0.25)));
            float _1991 = 1.0 - (_1987 * cbSceneParam._m0[34u].x);
            float _1992 = 1.0 - (_1987 * cbSceneParam._m0[34u].y);
            float _1993 = 1.0 - (_1987 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1992) ? _1739 : (isnan(_1739) ? _1992 : min(_1739, _1992));
            frontier_phi_36_35_ladder_1 = isnan(_1993) ? _1740 : (isnan(_1740) ? _1993 : min(_1740, _1993));
            frontier_phi_36_35_ladder_2 = isnan(_1991) ? _1738 : (isnan(_1738) ? _1991 : min(_1738, _1991));
        }
        else
        {
            frontier_phi_36_35_ladder = _1739;
            frontier_phi_36_35_ladder_1 = _1740;
            frontier_phi_36_35_ladder_2 = _1738;
        }
        _1804 = frontier_phi_36_35_ladder_2;
        _1806 = frontier_phi_36_35_ladder;
        _1808 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1804 = _1738;
        _1806 = _1739;
        _1808 = _1740;
    }
    uvec4 _1813 = floatBitsToUint(cbInstanceData._m0[_468 + 5u]);
    uint _1815 = _1813.x * 14u;
    uint _1816 = _1815 + 13u;
    float _1823 = _508 + (-1.0);
    float _1828 = (cbLight._m0[_1816].x * _1823) + 1.0;
    float _1829 = (cbLight._m0[_1816].y * _1823) + 1.0;
    float _1830 = (cbLight._m0[_1816].z * _1823) + 1.0;
    float _1831 = (cbLight._m0[_1816].w * _1823) + 1.0;
    uint _1832 = _1815 + 5u;
    float _1838 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1842 = _1815 + 4u;
    float _1852 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
    uint _1856 = _1815 | 1u;
    float _1867 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_337, _338, _339));
    float _1870 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_337, _338, _339));
    float _4078 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _4089 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1875 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.3183098733425140380859375;
    float _1877 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * 0.3183098733425140380859375;
    float _1884 = ((cbLight._m0[_1832].x * _1838) * _1877) + (((cbLight._m0[_1842].x * _1804) * _1852) * _1875);
    float _1885 = ((_1838 * cbLight._m0[_1832].y) * _1877) + (((cbLight._m0[_1842].y * _1806) * _1852) * _1875);
    float _1886 = ((_1838 * cbLight._m0[_1832].z) * _1877) + (((cbLight._m0[_1842].z * _1808) * _1852) * _1875);
    uvec4 _1890 = floatBitsToUint(cbLight._m0[_1815 + 12u]);
    bool _1892 = _1890.x == 0u;
    float _1994;
    float _1996;
    float _1998;
    if (_1892)
    {
        _1994 = _1884;
        _1996 = _1885;
        _1998 = _1886;
    }
    else
    {
        uint _2002 = _1815 + 6u;
        float _2018 = (dot(vec3(cbLight._m0[_1815 + 2u].xyz), vec3(_337, _338, _339)) * 0.5) + 0.5;
        float _2019 = _2018 * _2018;
        float _4100 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2021 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _1994 = (((cbLight._m0[_2002].x * 0.3183098733425140380859375) * _2020) * _2021) + _1884;
        _1996 = (((cbLight._m0[_2002].y * 0.3183098733425140380859375) * _2020) * _2021) + _1885;
        _1998 = (((cbLight._m0[_2002].z * 0.3183098733425140380859375) * _2020) * _2021) + _1886;
    }
    bool _2001 = _1890.y == 0u;
    float _2056;
    float _2058;
    float _2060;
    if (_2001)
    {
        _2056 = _1994;
        _2058 = _1996;
        _2060 = _1998;
    }
    else
    {
        uint _2229 = _1815 + 7u;
        float _2245 = (dot(vec3(cbLight._m0[_1815 + 3u].xyz), vec3(_337, _338, _339)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4116 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _2248 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _2056 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _1994;
        _2058 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _1996;
        _2060 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _1998;
    }
    uint _2063 = _1815 + 8u;
    float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1815].w)) * _341) * 0.949999988079071044921875);
    float _2077 = _2076 * _2076;
    float _2078 = cbLight._m0[_1815].x + _419;
    float _2079 = cbLight._m0[_1815].y + _420;
    float _2080 = cbLight._m0[_1815].z + _421;
    float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
    float _2085 = _2084 * _2078;
    float _2086 = _2084 * _2079;
    float _2087 = _2084 * _2080;
    float _2088 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1815].xyz));
    float _4132 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _2092 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2093 = dot(vec3(_337, _338, _339), vec3(_2085, _2086, _2087));
    float _4154 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _2097 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_2085, _2086, _2087));
    float _4165 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2101 = _2077 * _2077;
    float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
    float _2113 = exp2(log2(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * 5.0);
    float _2114 = 0.959999978542327880859375 - _490;
    float _2116 = 0.959999978542327880859375 - _491;
    float _2117 = 0.959999978542327880859375 - _492;
    float _2124 = 1.0 - _2077;
    float _2135 = (0.5 / (((_2092 * ((_2091 * _2124) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2124) + _2077) * _2091))) * _2091;
    float _4176 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2137 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
    uint _2151 = _1815 + 9u;
    float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1856].w)) * _341) * 0.949999988079071044921875);
    float _2163 = _2162 * _2162;
    float _2164 = cbLight._m0[_1856].x + _419;
    float _2165 = cbLight._m0[_1856].y + _420;
    float _2166 = cbLight._m0[_1856].z + _421;
    float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
    float _2171 = _2170 * _2164;
    float _2172 = _2170 * _2165;
    float _2173 = _2170 * _2166;
    float _2174 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1856].xyz));
    float _4187 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2178 = dot(vec3(_337, _338, _339), vec3(_2171, _2172, _2173));
    float _4198 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2182 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_2171, _2172, _2173));
    float _4209 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2186 = _2163 * _2163;
    float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
    float _2197 = exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0);
    float _2204 = 1.0 - _2163;
    float _2214 = (0.5 / (((_2092 * ((_2177 * _2204) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2204) + _2163) * _2177))) * _2177;
    float _4220 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
    float _2226 = (((((_2197 * _2114) + _493) * cbLight._m0[_2151].x) * _2216) * _1838) + ((((cbLight._m0[_2063].x * _1804) * ((_2113 * _2114) + _493)) * _2137) * _1852);
    float _2227 = (((((_2197 * _2116) + _495) * cbLight._m0[_2151].y) * _2216) * _1838) + ((((cbLight._m0[_2063].y * _1806) * ((_2113 * _2116) + _495)) * _2137) * _1852);
    float _2228 = (((((_2197 * _2117) + _496) * cbLight._m0[_2151].z) * _2216) * _1838) + ((((cbLight._m0[_2063].z * _1808) * ((_2113 * _2117) + _496)) * _2137) * _1852);
    float _2284;
    float _2286;
    float _2288;
    if (_1892)
    {
        _2284 = _2226;
        _2286 = _2227;
        _2288 = _2228;
    }
    else
    {
        uint _2290 = _1815 + 2u;
        uint _2294 = _1815 + 10u;
        float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _341) * 0.949999988079071044921875);
        float _2309 = _2308 * _2308;
        float _2310 = cbLight._m0[_2290].x + _419;
        float _2311 = cbLight._m0[_2290].y + _420;
        float _2312 = cbLight._m0[_2290].z + _421;
        float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
        float _2317 = _2316 * _2310;
        float _2318 = _2316 * _2311;
        float _2319 = _2316 * _2312;
        float _2320 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_2290].xyz));
        float _4231 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2323 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2324 = dot(vec3(_337, _338, _339), vec3(_2317, _2318, _2319));
        float _4242 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2328 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2317, _2318, _2319));
        float _4253 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2332 = _2309 * _2309;
        float _2336 = ((_2327 * _2327) * (_2332 + (-1.0))) + 1.0;
        float _2343 = exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0);
        float _2350 = 1.0 - _2309;
        float _2360 = (0.5 / (((_2092 * ((_2323 * _2350) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2350) + _2309) * _2323))) * _2323;
        float _4264 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2362 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2332 / ((_2336 * _2336) * 3.141590118408203125));
        float _2363 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _2284 = (((((_2343 * _2114) + _493) * cbLight._m0[_2294].x) * _2362) * _2363) + _2226;
        _2286 = (((((_2343 * _2116) + _495) * cbLight._m0[_2294].y) * _2362) * _2363) + _2227;
        _2288 = (((((_2343 * _2117) + _496) * cbLight._m0[_2294].z) * _2362) * _2363) + _2228;
    }
    float _2394;
    float _2396;
    float _2398;
    if (_2001)
    {
        _2394 = _2284;
        _2396 = _2286;
        _2398 = _2288;
    }
    else
    {
        uint _2405 = _1815 + 3u;
        uint _2409 = _1815 + 11u;
        float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _341) * 0.949999988079071044921875);
        float _2424 = _2423 * _2423;
        float _2425 = cbLight._m0[_2405].x + _419;
        float _2426 = cbLight._m0[_2405].y + _420;
        float _2427 = cbLight._m0[_2405].z + _421;
        float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
        float _2432 = _2431 * _2425;
        float _2433 = _2431 * _2426;
        float _2434 = _2431 * _2427;
        float _2435 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_2405].xyz));
        float _4280 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2439 = dot(vec3(_337, _338, _339), vec3(_2432, _2433, _2434));
        float _4291 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2443 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2432, _2433, _2434));
        float _4302 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2447 = _2424 * _2424;
        float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
        float _2458 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
        float _2465 = 1.0 - _2424;
        float _2475 = (0.5 / (((_2092 * ((_2438 * _2465) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2092 * _2465) + _2424) * _2438))) * _2438;
        float _4313 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2477 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
        float _2478 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _2394 = (((((_2458 * _2114) + _493) * cbLight._m0[_2409].x) * _2477) * _2478) + _2284;
        _2396 = (((((_2458 * _2116) + _495) * cbLight._m0[_2409].y) * _2477) * _2478) + _2286;
        _2398 = (((((_2458 * _2117) + _496) * cbLight._m0[_2409].z) * _2477) * _2478) + _2288;
    }
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    if (_1813.y == 0u)
    {
        uvec4 _2499 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2500 = _2499.x;
        uint _2511 = uint((float(_2499.y) * floor(float(uint(cbSceneParam._m0[85u].y * _428) / _2500))) + floor(float(uint(cbSceneParam._m0[85u].x * _427) / _2500)));
        float _2521 = (log2(_1591 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2522 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        uint _2525 = uint(isnan(14.0) ? _2522 : (isnan(_2522) ? 14.0 : min(_2522, 14.0)));
        uvec4 _2530 = texelFetch(g_lightClusterGridBuffer, int(((_2525 << 2u) + (_2511 << 6u)) >> 2u));
        uint _2531 = _2530.x;
        uint _2532 = _2499.z;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        if (((((1u << ((_2532 >> 4u) & 15u)) + 4294967295u) & _2531) == 0u) || ((_2532 & 240u) == 0u))
        {
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
        }
        else
        {
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            uint _2806 = 0u;
            uint _2815;
            bool _2816;
            for (;;)
            {
                _2815 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2806 << 2u)) >> 2u)).x;
                _2816 = _2815 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2816)
                {
                    frontier_phi_68_pred = _2805;
                    frontier_phi_68_pred_1 = _2804;
                    frontier_phi_68_pred_2 = _2803;
                    frontier_phi_68_pred_3 = _2801;
                    frontier_phi_68_pred_4 = _2800;
                    frontier_phi_68_pred_5 = _2802;
                }
                else
                {
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    uint _2930;
                    _2924 = _2800;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2815;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    for (;;)
                    {
                        uint _2934 = uint(findLSB(_2930)) + (_2806 << 5u);
                        uint _2931 = (_2930 + 4294967295u) & _2930;
                        uint _2936 = _2934 * 48u;
                        vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 3u)).x));
                        uint _2956 = (_2934 * 48u) + 4u;
                        vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 3u)).x));
                        uint _2975 = (_2934 * 48u) + 8u;
                        vec3 _2986 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x));
                        float _2990 = _2950.x - _1589;
                        float _2991 = _2950.y - _1590;
                        float _2992 = _2950.z - _1591;
                        float _2993 = dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992));
                        float _2996 = inversesqrt(_2993);
                        float _2997 = _2996 * _2990;
                        float _2998 = _2996 * _2991;
                        float _2999 = _2996 * _2992;
                        float _3000 = dot(vec3(_449, _452, _455), vec3(_2997, _2998, _2999));
                        float _3005 = 1.0 - (_2993 * _2950.w);
                        float _4339 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3006 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3007 = sqrt(_2993) * _2969.w;
                        float _3010 = 1.39999997615814208984375 / (_3007 + 1.39999997615814208984375);
                        float _3011 = _3010 * _3010;
                        float _3014 = ((1.0 - _3011) * _3000) + _3011;
                        float _3017 = _3007 * _3007;
                        float _3021 = ((isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0))) * _3006) / ((_3017 * 0.699999988079071044921875) + 1.0);
                        float _3025 = (-0.0) - _1589;
                        float _3026 = (-0.0) - _1590;
                        float _3027 = (-0.0) - _1591;
                        float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
                        float _3032 = _3031 * _3025;
                        float _3033 = _3031 * _3026;
                        float _3034 = _3031 * _3027;
                        float _3041 = exp2(log2(1.0 / ((_3017 * 3.5) + 5.0)) * 0.25);
                        float _3042 = 1.0 - _524;
                        float _3049 = sqrt(1.0 - ((1.0 - (_3042 * _3042)) * (1.0 - (_3041 * _3041))));
                        float _3050 = _3049 * _3049;
                        float _3051 = _3050 * _3050;
                        float _3052 = _3032 + _2997;
                        float _3053 = _3033 + _2998;
                        float _3054 = _3034 + _2999;
                        float _3058 = inversesqrt(dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054)));
                        float _3062 = dot(vec3(_449, _452, _455), vec3(_3032, _3033, _3034));
                        float _4355 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3065 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3066 = dot(vec3(_449, _452, _455), vec3(_3058 * _3052, _3058 * _3053, _3058 * _3054));
                        float _4366 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3073 = ((_3069 * _3069) * (_3051 + (-1.0))) + 1.0;
                        float _3074 = _3010 * _3050;
                        float _3075 = _3074 * _3074;
                        float _3078 = ((1.0 - _3075) * _3000) + _3075;
                        float _4377 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3079 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3080 = 1.0 - _3050;
                        float _3090 = (0.5 / (((_3079 * ((_3065 * _3080) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_3079 * _3080) + _3050) * _3065))) * _3079;
                        float _4388 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3101 = (((_3051 * 3.1415927410125732421875) * (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) / ((_3073 * _3073) * ((_3017 * 2.1991131305694580078125) + 3.141590118408203125))) * _3006;
                        _2859 = (_3021 * _2969.x) + _2927;
                        _2860 = (_3021 * _2969.y) + _2928;
                        _2861 = (_3021 * _2969.z) + _2929;
                        _2856 = (_3101 * _2986.x) + _2924;
                        _2857 = (_3101 * _2986.y) + _2925;
                        _2858 = (_3101 * _2986.z) + _2926;
                        if (_2931 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2924 = _2856;
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2931;
                        }
                    }
                    frontier_phi_68_pred = _2861;
                    frontier_phi_68_pred_1 = _2860;
                    frontier_phi_68_pred_2 = _2859;
                    frontier_phi_68_pred_3 = _2857;
                    frontier_phi_68_pred_4 = _2856;
                    frontier_phi_68_pred_5 = _2858;
                }
                _2658 = frontier_phi_68_pred;
                _2656 = frontier_phi_68_pred_1;
                _2654 = frontier_phi_68_pred_2;
                _2650 = frontier_phi_68_pred_3;
                _2648 = frontier_phi_68_pred_4;
                _2652 = frontier_phi_68_pred_5;
                uint _2807 = _2806 + 1u;
                if (_2807 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2800 = _2648;
                    _2801 = _2650;
                    _2802 = _2652;
                    _2803 = _2654;
                    _2804 = _2656;
                    _2805 = _2658;
                    _2806 = _2807;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
        }
        uvec4 _2661 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2662 = _2661.z;
        uint _2664 = (_2662 >> 8u) & 15u;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        if (((4294967295u << _2664) & _2531) == 0u)
        {
            _2768 = _2647;
            _2770 = _2649;
            _2772 = _2651;
            _2774 = _2653;
            _2776 = _2655;
            _2778 = _2657;
        }
        else
        {
            float _2793 = inversesqrt(dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591)));
            float _2794 = _2793 * _1589;
            float _2795 = _2793 * _1590;
            float _2796 = _2793 * _1591;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2664 < ((_2662 >> 12u) & 15u))
            {
                float _2769;
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2907 = _2647;
                float _2908 = _2649;
                float _2909 = _2651;
                float _2910 = _2653;
                float _2911 = _2655;
                float _2912 = _2657;
                uint _2913 = _2664;
                uint _2922;
                bool _2923;
                for (;;)
                {
                    _2922 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2913 << 2u)) >> 2u)).x;
                    _2923 = _2922 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2923)
                    {
                        frontier_phi_74_pred = _2909;
                        frontier_phi_74_pred_1 = _2908;
                        frontier_phi_74_pred_2 = _2907;
                        frontier_phi_74_pred_3 = _2912;
                        frontier_phi_74_pred_4 = _2911;
                        frontier_phi_74_pred_5 = _2910;
                    }
                    else
                    {
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3119 = _2907;
                        float _3120 = _2908;
                        float _3121 = _2909;
                        float _3122 = _2910;
                        float _3123 = _2911;
                        float _3124 = _2912;
                        uint _3125 = _2922;
                        uint _3126;
                        vec4 _3151;
                        float _3152;
                        vec4 _3167;
                        vec3 _3179;
                        vec4 _3195;
                        vec4 _3211;
                        float _3258;
                        bool _3259;
                        for (;;)
                        {
                            uint _3136 = ((_2913 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3125));
                            _3126 = (_3125 + 4294967295u) & _3125;
                            uint _3138 = _3136 * 40u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            _3152 = _3151.w;
                            uint _3154 = (_3136 * 40u) + 4u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3169 = (_3136 * 40u) + 8u;
                            _3179 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x));
                            uint _3182 = (_3136 * 40u) + 16u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3198 = (_3136 * 40u) + 20u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3214 = (_3136 * 40u) + 24u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3233 = (_3136 * 40u) + 28u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3258 = fma(_1591, _3246.z, fma(_1590, _3246.y, _3246.x * _1589)) + _3246.w;
                            _3259 = !((fma(_1591, _3227.z, fma(_1590, _3227.y, _3227.x * _1589)) + _3227.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3259)
                            {
                                float _3286 = _3151.x - _1589;
                                float _3287 = _3151.y - _1590;
                                float _3288 = _3151.z - _1591;
                                float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                                float _3292 = inversesqrt(_3289);
                                float _3293 = _3292 * _3286;
                                float _3294 = _3292 * _3287;
                                float _3295 = _3292 * _3288;
                                float _3299 = 1.0 - (_3289 / (_3152 * _3152));
                                float _4399 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3304 = sqrt(_3289) * _3167.w;
                                float _3306 = 1.39999997615814208984375 / (_3304 + 1.39999997615814208984375);
                                float _3307 = _3306 * _3306;
                                float _3310 = ((1.0 - _3307) * dot(vec3(_3293, _3294, _3295), vec3(_449, _452, _455))) + _3307;
                                float _3313 = _3304 * _3304;
                                float _3317 = (fma(_1591, _3195.z, fma(_1590, _3195.y, _3195.x * _1589)) + _3195.w) / _3258;
                                float _3318 = (fma(_1591, _3211.z, fma(_1590, _3211.y, _3211.x * _1589)) + _3211.w) / _3258;
                                float _3322 = 1.0 - dot(vec2(_3317, _3318), vec2(_3317, _3318));
                                float _4415 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3324 = _3323 * (((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3300) / ((_3313 * 0.699999988079071044921875) + 1.0));
                                float _3336 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                                float _3337 = 1.0 - _524;
                                float _3344 = sqrt(1.0 - ((1.0 - (_3337 * _3337)) * (1.0 - (_3336 * _3336))));
                                float _3345 = _3344 * _3344;
                                float _3346 = _3345 * _3345;
                                float _3347 = _3293 - _2794;
                                float _3348 = _3294 - _2795;
                                float _3349 = _3295 - _2796;
                                float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                                float _3357 = dot(vec3(_449, _452, _455), vec3((-0.0) - _2794, (-0.0) - _2795, (-0.0) - _2796));
                                float _4426 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3360 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3361 = dot(vec3(_449, _452, _455), vec3(_3353 * _3347, _3353 * _3348, _3353 * _3349));
                                float _4437 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3368 = ((_3364 * _3364) * (_3346 + (-1.0))) + 1.0;
                                float _3369 = _3306 * _3345;
                                float _3370 = _3369 * _3369;
                                float _3376 = ((1.0 - _3370) * dot(vec3(_449, _452, _455), vec3(_3293, _3294, _3295))) + _3370;
                                float _4448 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3378 = 1.0 - _3345;
                                float _3388 = (0.5 / (((_3377 * ((_3360 * _3378) + _3345)) + 9.9999999392252902907785028219223e-09) + (((_3377 * _3378) + _3345) * _3360))) * _3377;
                                float _4459 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3398 = (_3323 * _3300) * (((_3346 * 3.1415927410125732421875) * (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) / ((_3368 * _3368) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3398 * _3179.z;
                                frontier_phi_80_pred_1 = _3398 * _3179.y;
                                frontier_phi_80_pred_2 = _3398 * _3179.x;
                                frontier_phi_80_pred_3 = _3324 * _3167.z;
                                frontier_phi_80_pred_4 = _3324 * _3167.y;
                                frontier_phi_80_pred_5 = _3324 * _3167.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3404 = frontier_phi_80_pred;
                            _3403 = frontier_phi_80_pred_1;
                            _3402 = frontier_phi_80_pred_2;
                            _3407 = frontier_phi_80_pred_3;
                            _3406 = frontier_phi_80_pred_4;
                            _3405 = frontier_phi_80_pred_5;
                            _3109 = _3405 + _3122;
                            _3110 = _3406 + _3123;
                            _3111 = _3407 + _3124;
                            _3106 = _3402 + _3119;
                            _3107 = _3403 + _3120;
                            _3108 = _3404 + _3121;
                            if (_3126 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3126;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3108;
                        frontier_phi_74_pred_1 = _3107;
                        frontier_phi_74_pred_2 = _3106;
                        frontier_phi_74_pred_3 = _3111;
                        frontier_phi_74_pred_4 = _3110;
                        frontier_phi_74_pred_5 = _3109;
                    }
                    _2773 = frontier_phi_74_pred;
                    _2771 = frontier_phi_74_pred_1;
                    _2769 = frontier_phi_74_pred_2;
                    _2779 = frontier_phi_74_pred_3;
                    _2777 = frontier_phi_74_pred_4;
                    _2775 = frontier_phi_74_pred_5;
                    uint _2914 = _2913 + 1u;
                    if (_2914 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2907 = _2769;
                        _2908 = _2771;
                        _2909 = _2773;
                        _2910 = _2775;
                        _2911 = _2777;
                        _2912 = _2779;
                        _2913 = _2914;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2777;
                frontier_phi_62_63_ladder_1 = _2775;
                frontier_phi_62_63_ladder_2 = _2773;
                frontier_phi_62_63_ladder_3 = _2779;
                frontier_phi_62_63_ladder_4 = _2771;
                frontier_phi_62_63_ladder_5 = _2769;
            }
            else
            {
                frontier_phi_62_63_ladder = _2655;
                frontier_phi_62_63_ladder_1 = _2653;
                frontier_phi_62_63_ladder_2 = _2651;
                frontier_phi_62_63_ladder_3 = _2657;
                frontier_phi_62_63_ladder_4 = _2649;
                frontier_phi_62_63_ladder_5 = _2647;
            }
            _2768 = frontier_phi_62_63_ladder_5;
            _2770 = frontier_phi_62_63_ladder_4;
            _2772 = frontier_phi_62_63_ladder_2;
            _2774 = frontier_phi_62_63_ladder_1;
            _2776 = frontier_phi_62_63_ladder;
            _2778 = frontier_phi_62_63_ladder_3;
        }
        float _2783 = isnan(1.0) ? _508 : (isnan(_508) ? 1.0 : min(_508, 1.0));
        _2543 = (_2783 * _2774) + _2056;
        _2545 = (_2783 * _2776) + _2058;
        _2547 = (_2783 * _2778) + _2060;
        _2549 = ((_2768 * _493) * _2783) + _2394;
        _2551 = ((_2770 * _495) * _2783) + _2396;
        _2553 = ((_2772 * _496) * _2783) + _2398;
    }
    else
    {
        _2543 = _2056;
        _2545 = _2058;
        _2547 = _2060;
        _2549 = _2394;
        _2551 = _2396;
        _2553 = _2398;
    }
    uint _2559 = _469 + uint(cbMatDynParam._m0[0u].w);
    float _2567 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _319.x) * cbInstanceData._m0[_2559].x;
    float _2570 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _319.y) * cbInstanceData._m0[_2559].y;
    float _2573 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _319.z) * cbInstanceData._m0[_2559].z;
    float _4475 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4486 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _4497 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _4508 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _2591 = (((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2543 + ((isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))) * _508))) + ((_2549 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1318)) * cbPerFrame._m0[3u].x)) + _2567;
    float _2593 = (_2570 + ((_2551 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1318)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2545 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _508)));
    float _2595 = (_2573 + ((_2553 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _1318)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2547 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _508)));
    float _4534 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2608 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2613 = cbInstanceData._m0[_468 + 6u].w * (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)));
    float _2618 = _427 / cbSceneParam._m0[86u].x;
    float _2619 = _428 / cbSceneParam._m0[86u].y;
    vec4 _2633 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2618, _2619, (log2((isnan(cbSceneParam._m0[77u].w) ? _361 : (isnan(_361) ? cbSceneParam._m0[77u].w : min(_361, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2635 = _2633.x;
    float _2636 = _2633.y;
    float _2637 = _2633.z;
    float _2638 = _2633.w;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    if (_361 > cbSceneParam._m0[78u].w)
    {
        float _2672 = isnan(_361) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _361 : min(cbSceneParam._m0[80u].w, _361));
        float _2673 = _2672 / _361;
        float _2684 = _2673 * _412;
        float _2685 = _413 * _2673;
        float _2686 = (-0.0) - _2685;
        float _2687 = _2673 * _414;
        float _2689 = (cbSceneParam._m0[77u].w * _2686) / _2672;
        float _2690 = _2689 + cbSceneParam._m0[79u].w;
        float _2691 = cbSceneParam._m0[79u].w - _2685;
        float _2697 = sqrt(((_2684 * _2684) + (_2685 * _2685)) + (_2687 * _2687));
        float _2700 = (1.0 - (cbSceneParam._m0[77u].w / _2672)) * _2697;
        float _2705 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2707 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2869;
        if (abs((_2686 - _2689) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2869 = ((((_2690 > 0.0) ? exp2(_2705 * _2690) : (2.0 - exp2(_2707 * _2690))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2700;
        }
        else
        {
            float _2829 = 1.0 / cbSceneParam._m0[80u].x;
            float _2830 = isnan(_2691) ? _2690 : (isnan(_2690) ? _2691 : max(_2690, _2691));
            float _2831 = isnan(_2691) ? _2690 : (isnan(_2690) ? _2691 : min(_2690, _2691));
            float _2840 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : min(_2830, 0.0));
            float _2841 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : min(_2831, 0.0));
            _2869 = ((abs(_2697 / _2686) * cbSceneParam._m0[80u].y) * ((((_2840 - _2841) * 2.0) - ((exp2(_2705 * (isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0)))) - exp2(_2705 * (isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0))))) * _2829)) - ((exp2(_2707 * _2840) - exp2(_2707 * _2841)) * _2829))) + (_2700 * cbSceneParam._m0[80u].z);
        }
        vec4 _2871 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2618, _2619, 1.0), 0.0);
        float _2880 = exp2((_2869 * (-1.44269502162933349609375)) * (1.0 - _2871.w));
        float _2881 = log2(_2880);
        float _2897 = log2(_2638);
        _2709 = (exp2(_2897 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2881 * cbSceneParam._m0[78u].x)) * _2871.x) / cbSceneParam._m0[78u].x)) + _2635;
        _2711 = (exp2(_2897 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2881 * cbSceneParam._m0[78u].y)) * _2871.y) / cbSceneParam._m0[78u].y)) + _2636;
        _2713 = (exp2(_2897 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2881 * cbSceneParam._m0[78u].z)) * _2871.z) / cbSceneParam._m0[78u].z)) + _2637;
        _2715 = _2880 * _2638;
    }
    else
    {
        _2709 = _2635;
        _2711 = _2636;
        _2713 = _2637;
        _2715 = _2638;
    }
    float _2727 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2728 = _2727 == 3.0;
    float _2729 = log2(_2715);
    float _2733 = exp2(_2729 * cbSceneParam._m0[78u].x);
    float _2734 = exp2(_2729 * cbSceneParam._m0[78u].y);
    float _2735 = exp2(_2729 * cbSceneParam._m0[78u].z);
    float _2736 = _2733 * (isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0)));
    float _2737 = _2734 * (isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0)));
    float _2738 = _2735 * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0)));
    float _2747 = (_2727 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2747 * (_2728 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.y = _2747 * (_2728 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2711)));
    SV_Target.z = _2747 * (_2728 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2713)));
    SV_Target.w = _2613;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2567) * _2608) * _2733) * _2747;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2570) * _2608) * _2734) * _2747;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2573) * _2608) * _2735) * _2747;
    SV_Target_1.w = _2613;
}


