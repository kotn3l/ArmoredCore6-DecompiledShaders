#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _928;
float _3646;
float _3647;
float _3648;
float _3649;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223;
    float _224;
    float _225;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
    }
    else
    {
        _223 = _209;
        _224 = _210;
        _225 = _211;
    }
    float _240 = (cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _241 = (cbMtdParam._m0[11u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _254 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_240 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_241 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _261 = _254.x * cbMtdParam._m0[9u].x;
    float _262 = _254.y * cbMtdParam._m0[9u].y;
    float _263 = _254.z * cbMtdParam._m0[9u].z;
    float _264 = _254.w * cbMtdParam._m0[9u].w;
    float _265 = _264 * TEXCOORD_1.z;
    vec4 _278 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _240) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _241) + cbTextureTilingScale._m0[1u].w));
    float _282 = _278.z;
    float _286 = (_278.x * 2.0) + (-1.0);
    float _288 = (_278.y * 2.0) + (-1.0);
    float _289 = dot(vec2(_286, _288), vec2(_286, _288));
    float _3658 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _295 = sqrt(1.0 - (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))));
    vec4 _323 = texture(sampler2D(M_ES_Emissive_Glow_Addition_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[12u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _330 = fma(_295, _223, fma(_288, _215 * TANGENT.x, (_201 * _193) * _286));
    float _333 = fma(_295, _224, fma(_288, _215 * TANGENT.y, (_201 * _194) * _286));
    float _336 = fma(_295, _225, fma(_288, _215 * TANGENT.z, (_201 * _195) * _286));
    float _340 = inversesqrt(dot(vec3(_330, _333, _336), vec3(_330, _333, _336)));
    float _341 = _340 * _330;
    float _342 = _340 * _333;
    float _343 = _340 * _336;
    float _3669 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _344 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _345 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3702 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3713 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3724 = isnan(0.0) ? cbMtdParam._m0[11u].y : (isnan(cbMtdParam._m0[11u].y) ? 0.0 : max(cbMtdParam._m0[11u].y, 0.0));
    float _349 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _365 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _406 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _416 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _406);
    float _417 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _406);
    float _418 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _406);
    float _422 = inversesqrt(dot(vec3(_416, _417, _418), vec3(_416, _417, _418)));
    float _423 = _416 * _422;
    float _424 = _417 * _422;
    float _425 = _418 * _422;
    vec4 _430 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _432 = _430.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _607 = sqrt(((_416 * _416) + (_417 * _417)) + (_418 * _418));
        float _613 = (cbMatDynParam._m0[5u].x * _607) + cbMatDynParam._m0[5u].y;
        float _3735 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _614 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _618 = (cbMatDynParam._m0[5u].z * _607) + cbMatDynParam._m0[5u].w;
        float _3746 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) - _614)) + _614) < ((_432 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _444 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _445 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _465 = fma(_343, cbSceneParam._m0[5u].z, fma(_342, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _341));
    float _468 = fma(_343, cbSceneParam._m0[6u].z, fma(_342, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _341));
    float _471 = fma(_343, cbSceneParam._m0[7u].z, fma(_342, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _341));
    uint _484 = uint(roundEven(NORMAL.w)) * 13u;
    uint _485 = _484 + 9u;
    uint _486 = _485 + uint(cbMatDynParam._m0[0u].w);
    float _492 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_486].x;
    float _493 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_486].y;
    float _494 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) * cbInstanceData._m0[_486].z;
    float _3757 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _495 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _496 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _497 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _498 = 1.0 - _349;
    float _499 = _495 * _498;
    float _500 = _496 * _498;
    float _501 = _497 * _498;
    float _506 = (_495 + (-0.039999999105930328369140625)) * _349;
    float _507 = (_496 + (-0.039999999105930328369140625)) * _349;
    float _508 = (_497 + (-0.039999999105930328369140625)) * _349;
    float _509 = _506 + 0.039999999105930328369140625;
    float _511 = _507 + 0.039999999105930328369140625;
    float _512 = _508 + 0.039999999105930328369140625;
    vec4 _521 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _444, cbSceneParam._m0[86u].y * _445));
    float _524 = _521.x * TEXCOORD_1.w;
    float _525 = dot(vec3(_341, _342, _343), vec3(_423, _424, _425));
    float _528 = _525 * 2.0;
    float _532 = (_528 * _341) - _423;
    float _533 = (_528 * _342) - _424;
    float _534 = (_528 * _343) - _425;
    float _538 = abs(dot(vec3(_423, _424, _425), vec3(_341, _342, _343)));
    float _3790 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _540 = sqrt(_345);
    float _553 = exp2((_540 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_540 * 3.0));
    float _559 = (1.0 - _553) * ((_540 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _560 = _553 * _540;
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _927;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _652 = fma(_596, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _588));
        float _656 = fma(_596, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _588));
        float _660 = fma(_596, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _588));
        float _685 = _588 + _341;
        float _686 = _592 + _342;
        float _687 = _596 + _343;
        float _697 = fma(_687, cbModelParam._m0[26u].z, fma(_686, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _685)) - _652;
        float _698 = fma(_687, cbModelParam._m0[27u].z, fma(_686, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _685)) - _656;
        float _699 = fma(_687, cbModelParam._m0[28u].z, fma(_686, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _685)) - _660;
        float _703 = inversesqrt(dot(vec3(_697, _698, _699), vec3(_697, _698, _699)));
        float _716 = ((_703 * _697) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_652 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _717 = ((_703 * _698) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_656 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _718 = ((_703 * _699) / cbModelParam._m0[34u].z) + ((((((_660 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        float _755 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_721.x + (-0.5));
        float _757 = _755 * (_721.y + (-0.5));
        float _758 = _755 * (_721.z + (-0.5));
        float _765 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_728.x + (-0.5));
        float _767 = _765 * (_728.y + (-0.5));
        float _768 = _765 * (_728.z + (-0.5));
        float _775 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_735.x + (-0.5));
        float _777 = _775 * (_735.y + (-0.5));
        float _778 = _775 * (_735.z + (-0.5));
        float _785 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_742.x + (-0.5));
        float _787 = _785 * (_742.y + (-0.5));
        float _788 = _785 * (_742.z + (-0.5));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = _756 * 0.5;
        float _793 = _766 * 0.5;
        float _794 = _776 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _809 = (dot(vec3(_341, _342, _343), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _819 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3838 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_821 + 1.0))) + _826) * _789;
        float _836 = _757 * 0.5;
        float _837 = _767 * 0.5;
        float _838 = _777 * 0.5;
        float _839 = dot(vec3(_836, _837, _838), vec3(_836, _837, _838));
        float _844 = (_839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_839);
        float _852 = (dot(vec3(_341, _342, _343), vec3(_844 * _836, _844 * _837, _844 * _838)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _861 = sqrt(((_837 * _837) + (_836 * _836)) + (_838 * _838)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _863 = _862 * 2.0;
        float _867 = (1.0 - _862) / (_862 + 1.0);
        float _3871 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _877 = ((((1.0 - _868) * (_863 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_863 + 1.0))) + _868) * _790;
        float _878 = _758 * 0.5;
        float _879 = _768 * 0.5;
        float _880 = _778 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _894 = (dot(vec3(_341, _342, _343), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _903 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _905 = _904 * 2.0;
        float _909 = (1.0 - _904) / (_904 + 1.0);
        float _3904 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _919 = ((((1.0 - _910) * (_905 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_905 + 1.0))) + _910) * _791;
        _927 = _758;
        _929 = _757;
        _930 = _756;
        _931 = _768;
        _932 = _767;
        _933 = _766;
        _934 = _778;
        _935 = _777;
        _936 = _776;
        _937 = _791;
        _938 = _790;
        _939 = _789;
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0)));
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)));
    }
    else
    {
        _927 = _928;
        _929 = _928;
        _930 = _928;
        _931 = _928;
        _932 = _928;
        _933 = _928;
        _934 = _928;
        _935 = _928;
        _936 = _928;
        _937 = _928;
        _938 = _928;
        _939 = _928;
        _940 = 0.0;
        _941 = 0.0;
        _942 = 0.0;
    }
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _971 = fma(_596, cbModelParam._m0[30u].z, fma(_592, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _588));
        float _975 = fma(_596, cbModelParam._m0[31u].z, fma(_592, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _588));
        float _979 = fma(_596, cbModelParam._m0[32u].z, fma(_592, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _588));
        float _1002 = _588 + _341;
        float _1003 = _592 + _342;
        float _1004 = _596 + _343;
        float _1014 = fma(_1004, cbModelParam._m0[30u].z, fma(_1003, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1002)) - _971;
        float _1015 = fma(_1004, cbModelParam._m0[31u].z, fma(_1003, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1002)) - _975;
        float _1016 = fma(_1004, cbModelParam._m0[32u].z, fma(_1003, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1002)) - _979;
        float _1020 = inversesqrt(dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016)));
        float _1033 = ((_1020 * _1014) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_971 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1020 * _1015) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_975 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1020 * _1016) / cbModelParam._m0[35u].z) + ((((((_979 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        float _1070 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1037.x + (-0.5));
        float _1072 = _1070 * (_1037.y + (-0.5));
        float _1073 = _1070 * (_1037.z + (-0.5));
        float _1080 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1044.x + (-0.5));
        float _1082 = _1080 * (_1044.y + (-0.5));
        float _1083 = _1080 * (_1044.z + (-0.5));
        float _1090 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1051.x + (-0.5));
        float _1092 = _1090 * (_1051.y + (-0.5));
        float _1093 = _1090 * (_1051.z + (-0.5));
        float _1100 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1058.x + (-0.5));
        float _1102 = _1100 * (_1058.y + (-0.5));
        float _1103 = _1100 * (_1058.z + (-0.5));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = _1071 * 0.5;
        float _1108 = _1081 * 0.5;
        float _1109 = _1091 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_341, _342, _343), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3967 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1134 + 1.0))) + _1139) * _1104;
        float _1149 = _1072 * 0.5;
        float _1150 = _1082 * 0.5;
        float _1151 = _1092 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_341, _342, _343), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _4000 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1176 + 1.0))) + _1181) * _1105;
        float _1191 = _1073 * 0.5;
        float _1192 = _1083 * 0.5;
        float _1193 = _1093 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_341, _342, _343), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _4033 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1218 + 1.0))) + _1223) * _1106;
        _1240 = _1073;
        _1241 = _1072;
        _1242 = _1071;
        _1243 = _1083;
        _1244 = _1082;
        _1245 = _1081;
        _1246 = _1093;
        _1247 = _1092;
        _1248 = _1091;
        _1249 = _1106;
        _1250 = _1105;
        _1251 = _1104;
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _928;
        _1241 = _928;
        _1242 = _928;
        _1243 = _928;
        _1244 = _928;
        _1245 = _928;
        _1246 = _928;
        _1247 = _928;
        _1248 = _928;
        _1249 = _928;
        _1250 = _928;
        _1251 = _928;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _940)) + _940;
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _941)) + _941;
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _942)) + _942;
    float _1287 = fma(_1266, cbSceneParam._m0[89u].z, fma(_1265, cbSceneParam._m0[89u].y, _1264 * cbSceneParam._m0[89u].x));
    float _1290 = fma(_1266, cbSceneParam._m0[90u].z, fma(_1265, cbSceneParam._m0[90u].y, _1264 * cbSceneParam._m0[90u].x));
    float _1293 = fma(_1266, cbSceneParam._m0[91u].z, fma(_1265, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1264));
    float _1308 = _532 * 0.5;
    float _1309 = _533 * 0.5;
    float _1310 = _534 * 0.5;
    float _1311 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1314 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1317 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1351;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1324 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_927, _931, _934, _937));
        float _1328 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_929, _932, _935, _938));
        float _1332 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_930, _933, _936, _939));
        float _1339 = dot(vec4(cbModelParam._m0[39u]), vec4(_1308, _1309, _1310, 1.0));
        _1351 = dot(vec3(isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1339) ? 0.0 : (isnan(0.0) ? _1339 : max(0.0, _1339))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1351 = 1.0;
    }
    float _1362;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1353 = dot(vec4(cbModelParam._m0[40u]), vec4(_1308, _1309, _1310, 1.0));
        _1362 = dot(vec3(isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1353) ? 0.0 : (isnan(0.0) ? _1353 : max(0.0, _1353))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1362 = 1.0;
    }
    float _1366 = (_1362 * cbModelParam._m0[1u].x) + (_1351 * (1.0 - cbModelParam._m0[1u].x));
    float _1376 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _345);
    float _1377 = isnan(_1376) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1376 : min(cbModelParam._m0[25u].z, _1376));
    float _1459;
    float _1461;
    float _1463;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1426 = fma(_596, cbModelParam._m0[13u].z, fma(_592, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _588)) + cbModelParam._m0[13u].w;
        float _1430 = fma(_596, cbModelParam._m0[14u].z, fma(_592, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _588)) + cbModelParam._m0[14u].w;
        float _1434 = fma(_596, cbModelParam._m0[15u].z, fma(_592, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _588)) + cbModelParam._m0[15u].w;
        float _1437 = fma(_534, cbModelParam._m0[13u].z, fma(_533, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _532));
        float _1440 = fma(_534, cbModelParam._m0[14u].z, fma(_533, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _532));
        float _1443 = fma(_534, cbModelParam._m0[15u].z, fma(_533, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _532));
        float _1471;
        if (_1437 > 0.0)
        {
            _1471 = abs((1.0 - _1426) / _1437);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1426 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1471 = frontier_phi_19_17_ladder;
        }
        float _1645;
        if (_1440 > 0.0)
        {
            _1645 = abs((1.0 - _1430) / _1440);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1430 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1645 = frontier_phi_28_24_ladder;
        }
        float _1941;
        if (_1443 > 0.0)
        {
            _1941 = abs((1.0 - _1434) / _1443);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1434 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1941 = frontier_phi_40_35_ladder;
        }
        float _1943 = isnan(_1645) ? _1471 : (isnan(_1471) ? _1645 : min(_1471, _1645));
        float _1944 = isnan(_1941) ? _1943 : (isnan(_1943) ? _1941 : min(_1943, _1941));
        float _1948 = (_1944 * _1437) + _1426;
        float _1949 = (_1944 * _1440) + _1430;
        float _1950 = (_1944 * _1443) + _1434;
        float _1951 = _1944 * 9.9999997473787516355514526367188e-05;
        float _1953 = (-1.0) - _1951;
        float _1955 = _1951 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1950 > _1955) || ((_1950 < _1953) || ((_1949 > _1955) || ((_1949 < _1953) || ((_1948 < _1953) || (_1948 > _1955))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2095 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1950, cbModelParam._m0[9u].z, fma(_1949, cbModelParam._m0[9u].y, _1948 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1950, cbModelParam._m0[10u].z, fma(_1949, cbModelParam._m0[10u].y, _1948 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1950, cbModelParam._m0[11u].z, fma(_1949, cbModelParam._m0[11u].y, _1948 * cbModelParam._m0[11u].x))), _1377);
            frontier_phi_18_40_ladder = _2095.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2095.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2095.x * cbModelParam._m0[1u].y;
        }
        _1459 = frontier_phi_18_40_ladder_2;
        _1461 = frontier_phi_18_40_ladder_1;
        _1463 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_532, _533, _534), _1377);
        _1459 = _1447.x * cbModelParam._m0[1u].y;
        _1461 = _1447.y * cbModelParam._m0[1u].y;
        _1463 = _1447.z * cbModelParam._m0[1u].y;
    }
    float _1467 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _345);
    float _1468 = isnan(_1467) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1467 : min(cbModelParam._m0[25u].w, _1467));
    float _1560;
    float _1562;
    float _1564;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1524 = fma(_596, cbModelParam._m0[21u].z, fma(_592, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _588)) + cbModelParam._m0[21u].w;
        float _1528 = fma(_596, cbModelParam._m0[22u].z, fma(_592, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _588)) + cbModelParam._m0[22u].w;
        float _1532 = fma(_596, cbModelParam._m0[23u].z, fma(_592, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _588)) + cbModelParam._m0[23u].w;
        float _1535 = fma(_534, cbModelParam._m0[21u].z, fma(_533, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _532));
        float _1538 = fma(_534, cbModelParam._m0[22u].z, fma(_533, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _532));
        float _1541 = fma(_534, cbModelParam._m0[23u].z, fma(_533, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _532));
        float _1650;
        if (_1535 > 0.0)
        {
            _1650 = abs((1.0 - _1524) / _1535);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1524 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1650 = frontier_phi_30_26_ladder;
        }
        float _1968;
        if (_1538 > 0.0)
        {
            _1968 = abs((1.0 - _1528) / _1538);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1528 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1968 = frontier_phi_42_37_ladder;
        }
        float _2306;
        if (_1541 > 0.0)
        {
            _2306 = abs((1.0 - _1532) / _1541);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1532 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2306 = frontier_phi_52_49_ladder;
        }
        float _2308 = isnan(_1968) ? _1650 : (isnan(_1650) ? _1968 : min(_1650, _1968));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1535) + _1524;
        float _2314 = (_2309 * _1538) + _1528;
        float _2315 = (_2309 * _1541) + _1532;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2316;
        float _2319 = _2316 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2315 > _2319) || ((_2315 < _2317) || ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 < _2317) || (_2313 > _2319))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2437 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2315, cbModelParam._m0[17u].z, fma(_2314, cbModelParam._m0[17u].y, _2313 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2315, cbModelParam._m0[18u].z, fma(_2314, cbModelParam._m0[18u].y, _2313 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2315, cbModelParam._m0[19u].z, fma(_2314, cbModelParam._m0[19u].y, _2313 * cbModelParam._m0[19u].x))), _1468);
            frontier_phi_27_52_ladder = _2437.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2437.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2437.x * cbModelParam._m0[1u].z;
        }
        _1560 = frontier_phi_27_52_ladder_2;
        _1562 = frontier_phi_27_52_ladder_1;
        _1564 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1544 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_532, _533, _534), _1468);
        _1560 = _1544.x * cbModelParam._m0[1u].z;
        _1562 = _1544.y * cbModelParam._m0[1u].z;
        _1564 = _1544.z * cbModelParam._m0[1u].z;
    }
    float _1577 = (((_559 * _509) + _560) * _524) * ((cbModelParam._m0[1u].w * (_1560 - _1459)) + _1459);
    float _1579 = (((_559 * _511) + _560) * _524) * ((cbModelParam._m0[1u].w * (_1562 - _1461)) + _1461);
    float _1581 = (((_559 * _512) + _560) * _524) * ((cbModelParam._m0[1u].w * (_1564 - _1463)) + _1463);
    float _1584 = fma(_1581, cbSceneParam._m0[89u].z, fma(_1579, cbSceneParam._m0[89u].y, _1577 * cbSceneParam._m0[89u].x));
    float _1587 = fma(_1581, cbSceneParam._m0[90u].z, fma(_1579, cbSceneParam._m0[90u].y, _1577 * cbSceneParam._m0[90u].x));
    float _1590 = fma(_1581, cbSceneParam._m0[91u].z, fma(_1579, cbSceneParam._m0[91u].y, _1577 * cbSceneParam._m0[91u].x));
    float _1624 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1628 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1632 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1636 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1637 = _1624 / _1636;
    float _1638 = _1628 / _1636;
    float _1639 = _1632 / _1636;
    float _1786;
    float _1787;
    float _1788;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1666 = ((uint(_1639 > cbSceneParam._m0[59u].y) + uint(_1639 > cbSceneParam._m0[59u].x)) + uint(_1639 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1667 = _1666 + 43u;
        uint _1675 = _1666 + 44u;
        uint _1683 = _1666 + 45u;
        uint _1691 = _1666 + 46u;
        float _1702 = fma(_1636, cbSceneParam._m0[_1667].w, fma(_1632, cbSceneParam._m0[_1667].z, fma(_1628, cbSceneParam._m0[_1667].y, _1624 * cbSceneParam._m0[_1667].x)));
        float _1706 = fma(_1636, cbSceneParam._m0[_1675].w, fma(_1632, cbSceneParam._m0[_1675].z, fma(_1628, cbSceneParam._m0[_1675].y, _1624 * cbSceneParam._m0[_1675].x)));
        float _1714 = fma(_1636, cbSceneParam._m0[_1691].w, fma(_1632, cbSceneParam._m0[_1691].z, fma(_1628, cbSceneParam._m0[_1691].y, _1624 * cbSceneParam._m0[_1691].x)));
        float _1719 = cbSceneParam._m0[33u].z * _1714;
        float _1721 = cbSceneParam._m0[33u].w * _1714;
        float _1724 = fma(_1636, cbSceneParam._m0[_1683].w, fma(_1632, cbSceneParam._m0[_1683].z, fma(_1628, cbSceneParam._m0[_1683].y, _1624 * cbSceneParam._m0[_1683].x))) / _1714;
        float _1772 = (cbSceneParam._m0[33u].x - sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639))) * cbSceneParam._m0[33u].y;
        float _4159 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1779 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1719 + _1702) / _1714, (_1721 + _1706) / _1714), _1724), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1721 + _1702) / _1714, (_1706 - _1719) / _1714), _1724), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1702 - _1719) / _1714, (_1706 - _1721) / _1714), _1724), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1702 - _1721) / _1714, (_1719 + _1706) / _1714), _1724), 0.0)).x), vec4(0.25)));
        _1786 = 1.0 - (_1779 * cbSceneParam._m0[34u].x);
        _1787 = 1.0 - (_1779 * cbSceneParam._m0[34u].y);
        _1788 = 1.0 - (_1779 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1786 = 1.0;
        _1787 = 1.0;
        _1788 = 1.0;
    }
    float _1852;
    float _1854;
    float _1856;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1840 = fma(_1636, cbSceneParam._m0[63u].w, fma(_1632, cbSceneParam._m0[63u].z, fma(_1628, cbSceneParam._m0[63u].y, _1624 * cbSceneParam._m0[63u].x)));
        float _1841 = fma(_1636, cbSceneParam._m0[60u].w, fma(_1632, cbSceneParam._m0[60u].z, fma(_1628, cbSceneParam._m0[60u].y, _1624 * cbSceneParam._m0[60u].x))) / _1840;
        float _1842 = fma(_1636, cbSceneParam._m0[61u].w, fma(_1632, cbSceneParam._m0[61u].z, fma(_1628, cbSceneParam._m0[61u].y, _1624 * cbSceneParam._m0[61u].x))) / _1840;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1841 >= cbSceneParam._m0[64u].x) && (_1842 >= cbSceneParam._m0[64u].y)) && (_1841 <= cbSceneParam._m0[64u].z)) && (_1842 <= cbSceneParam._m0[64u].w))
        {
            float _1981 = fma(_1636, cbSceneParam._m0[62u].w, fma(_1632, cbSceneParam._m0[62u].z, fma(_1628, cbSceneParam._m0[62u].y, _1624 * cbSceneParam._m0[62u].x))) / _1840;
            float _1985 = isnan(cbSceneParam._m0[41u].w) ? _1981 : (isnan(_1981) ? cbSceneParam._m0[41u].w : max(_1981, cbSceneParam._m0[41u].w));
            float _2028 = (cbSceneParam._m0[33u].x - sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639))) * cbSceneParam._m0[33u].y;
            float _4175 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
            float _2035 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1841, cbSceneParam._m0[33u].w + _1842), _1985), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1841, _1842 - cbSceneParam._m0[33u].z), _1985), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1841 - cbSceneParam._m0[33u].z, _1842 - cbSceneParam._m0[33u].w), _1985), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1841 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1842), _1985), 0.0)).x), vec4(0.25)));
            float _2039 = 1.0 - (_2035 * cbSceneParam._m0[34u].x);
            float _2040 = 1.0 - (_2035 * cbSceneParam._m0[34u].y);
            float _2041 = 1.0 - (_2035 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2040) ? _1787 : (isnan(_1787) ? _2040 : min(_1787, _2040));
            frontier_phi_39_38_ladder_1 = isnan(_2039) ? _1786 : (isnan(_1786) ? _2039 : min(_1786, _2039));
            frontier_phi_39_38_ladder_2 = isnan(_2041) ? _1788 : (isnan(_1788) ? _2041 : min(_1788, _2041));
        }
        else
        {
            frontier_phi_39_38_ladder = _1787;
            frontier_phi_39_38_ladder_1 = _1786;
            frontier_phi_39_38_ladder_2 = _1788;
        }
        _1852 = frontier_phi_39_38_ladder_1;
        _1854 = frontier_phi_39_38_ladder;
        _1856 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1852 = _1786;
        _1854 = _1787;
        _1856 = _1788;
    }
    uvec4 _1861 = floatBitsToUint(cbInstanceData._m0[_484 + 5u]);
    uint _1863 = _1861.x * 14u;
    uint _1864 = _1863 + 13u;
    float _1871 = _524 + (-1.0);
    float _1876 = (cbLight._m0[_1864].x * _1871) + 1.0;
    float _1877 = (cbLight._m0[_1864].y * _1871) + 1.0;
    float _1878 = (cbLight._m0[_1864].z * _1871) + 1.0;
    float _1879 = (cbLight._m0[_1864].w * _1871) + 1.0;
    uint _1880 = _1863 + 5u;
    float _1886 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
    uint _1890 = _1863 + 4u;
    float _1900 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
    uint _1904 = _1863 | 1u;
    float _1915 = dot(vec3(cbLight._m0[_1863].xyz), vec3(_341, _342, _343));
    float _1918 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_341, _342, _343));
    float _4211 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _4222 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1923 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.3183098733425140380859375;
    float _1925 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * 0.3183098733425140380859375;
    float _1932 = ((cbLight._m0[_1880].x * _1886) * _1925) + (((cbLight._m0[_1890].x * _1852) * _1900) * _1923);
    float _1933 = ((_1886 * cbLight._m0[_1880].y) * _1925) + (((cbLight._m0[_1890].y * _1854) * _1900) * _1923);
    float _1934 = ((_1886 * cbLight._m0[_1880].z) * _1925) + (((cbLight._m0[_1890].z * _1856) * _1900) * _1923);
    uvec4 _1938 = floatBitsToUint(cbLight._m0[_1863 + 12u]);
    bool _1940 = _1938.x == 0u;
    float _2042;
    float _2044;
    float _2046;
    if (_1940)
    {
        _2042 = _1932;
        _2044 = _1933;
        _2046 = _1934;
    }
    else
    {
        uint _2050 = _1863 + 6u;
        float _2066 = (dot(vec3(cbLight._m0[_1863 + 2u].xyz), vec3(_341, _342, _343)) * 0.5) + 0.5;
        float _2067 = _2066 * _2066;
        float _4233 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2068 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2069 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
        _2042 = (((cbLight._m0[_2050].x * 0.3183098733425140380859375) * _2068) * _2069) + _1932;
        _2044 = (((cbLight._m0[_2050].y * 0.3183098733425140380859375) * _2068) * _2069) + _1933;
        _2046 = (((cbLight._m0[_2050].z * 0.3183098733425140380859375) * _2068) * _2069) + _1934;
    }
    bool _2049 = _1938.y == 0u;
    float _2104;
    float _2106;
    float _2108;
    if (_2049)
    {
        _2104 = _2042;
        _2106 = _2044;
        _2108 = _2046;
    }
    else
    {
        uint _2277 = _1863 + 7u;
        float _2293 = (dot(vec3(cbLight._m0[_1863 + 3u].xyz), vec3(_341, _342, _343)) * 0.5) + 0.5;
        float _2294 = _2293 * _2293;
        float _4249 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2295 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2296 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _2104 = (((cbLight._m0[_2277].x * 0.3183098733425140380859375) * _2295) * _2296) + _2042;
        _2106 = (((cbLight._m0[_2277].y * 0.3183098733425140380859375) * _2295) * _2296) + _2044;
        _2108 = (((cbLight._m0[_2277].z * 0.3183098733425140380859375) * _2295) * _2296) + _2046;
    }
    uint _2111 = _1863 + 8u;
    float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1863].w)) * _345) * 0.949999988079071044921875);
    float _2125 = _2124 * _2124;
    float _2126 = cbLight._m0[_1863].x + _423;
    float _2127 = cbLight._m0[_1863].y + _424;
    float _2128 = cbLight._m0[_1863].z + _425;
    float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
    float _2133 = _2132 * _2126;
    float _2134 = _2132 * _2127;
    float _2135 = _2132 * _2128;
    float _2136 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1863].xyz));
    float _4265 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _4276 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _2140 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2141 = dot(vec3(_341, _342, _343), vec3(_2133, _2134, _2135));
    float _4287 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2145 = dot(vec3(cbLight._m0[_1863].xyz), vec3(_2133, _2134, _2135));
    float _4298 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2149 = _2125 * _2125;
    float _2153 = ((_2144 * _2144) * (_2149 + (-1.0))) + 1.0;
    float _2161 = exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0);
    float _2162 = 0.959999978542327880859375 - _506;
    float _2164 = 0.959999978542327880859375 - _507;
    float _2165 = 0.959999978542327880859375 - _508;
    float _2172 = 1.0 - _2125;
    float _2183 = (0.5 / (((_2140 * ((_2139 * _2172) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2172) + _2125) * _2139))) * _2139;
    float _4309 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2149 / ((_2153 * _2153) * 3.141590118408203125));
    uint _2199 = _1863 + 9u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1904].w)) * _345) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_1904].x + _423;
    float _2213 = cbLight._m0[_1904].y + _424;
    float _2214 = cbLight._m0[_1904].z + _425;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1904].xyz));
    float _4320 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2226 = dot(vec3(_341, _342, _343), vec3(_2219, _2220, _2221));
    float _4331 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2230 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_2219, _2220, _2221));
    float _4342 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = _2211 * _2211;
    float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
    float _2245 = exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0);
    float _2252 = 1.0 - _2211;
    float _2262 = (0.5 / (((_2140 * ((_2225 * _2252) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2252) + _2211) * _2225))) * _2225;
    float _4353 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2264 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
    float _2274 = (((((_2245 * _2162) + _509) * cbLight._m0[_2199].x) * _2264) * _1886) + ((((cbLight._m0[_2111].x * _1852) * ((_2161 * _2162) + _509)) * _2185) * _1900);
    float _2275 = (((((_2245 * _2164) + _511) * cbLight._m0[_2199].y) * _2264) * _1886) + ((((cbLight._m0[_2111].y * _1854) * ((_2161 * _2164) + _511)) * _2185) * _1900);
    float _2276 = (((((_2245 * _2165) + _512) * cbLight._m0[_2199].z) * _2264) * _1886) + ((((cbLight._m0[_2111].z * _1856) * ((_2161 * _2165) + _512)) * _2185) * _1900);
    float _2332;
    float _2334;
    float _2336;
    if (_1940)
    {
        _2332 = _2274;
        _2334 = _2275;
        _2336 = _2276;
    }
    else
    {
        uint _2338 = _1863 + 2u;
        uint _2342 = _1863 + 10u;
        float _2356 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2338].w)) * _345) * 0.949999988079071044921875);
        float _2357 = _2356 * _2356;
        float _2358 = cbLight._m0[_2338].x + _423;
        float _2359 = cbLight._m0[_2338].y + _424;
        float _2360 = cbLight._m0[_2338].z + _425;
        float _2364 = inversesqrt(dot(vec3(_2358, _2359, _2360), vec3(_2358, _2359, _2360)));
        float _2365 = _2364 * _2358;
        float _2366 = _2364 * _2359;
        float _2367 = _2364 * _2360;
        float _2368 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_2338].xyz));
        float _4364 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2371 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2372 = dot(vec3(_341, _342, _343), vec3(_2365, _2366, _2367));
        float _4375 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2375 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2376 = dot(vec3(cbLight._m0[_2338].xyz), vec3(_2365, _2366, _2367));
        float _4386 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2380 = _2357 * _2357;
        float _2384 = ((_2375 * _2375) * (_2380 + (-1.0))) + 1.0;
        float _2391 = exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0);
        float _2398 = 1.0 - _2357;
        float _2408 = (0.5 / (((_2140 * ((_2371 * _2398) + _2357)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2398) + _2357) * _2371))) * _2371;
        float _4397 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2410 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2380 / ((_2384 * _2384) * 3.141590118408203125));
        float _2411 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
        _2332 = (((((_2391 * _2162) + _509) * cbLight._m0[_2342].x) * _2410) * _2411) + _2274;
        _2334 = (((((_2391 * _2164) + _511) * cbLight._m0[_2342].y) * _2410) * _2411) + _2275;
        _2336 = (((((_2391 * _2165) + _512) * cbLight._m0[_2342].z) * _2410) * _2411) + _2276;
    }
    float _2442;
    float _2444;
    float _2446;
    if (_2049)
    {
        _2442 = _2332;
        _2444 = _2334;
        _2446 = _2336;
    }
    else
    {
        uint _2453 = _1863 + 3u;
        uint _2457 = _1863 + 11u;
        float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2453].w)) * _345) * 0.949999988079071044921875);
        float _2472 = _2471 * _2471;
        float _2473 = cbLight._m0[_2453].x + _423;
        float _2474 = cbLight._m0[_2453].y + _424;
        float _2475 = cbLight._m0[_2453].z + _425;
        float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
        float _2480 = _2479 * _2473;
        float _2481 = _2479 * _2474;
        float _2482 = _2479 * _2475;
        float _2483 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_2453].xyz));
        float _4413 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2487 = dot(vec3(_341, _342, _343), vec3(_2480, _2481, _2482));
        float _4424 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2491 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_2480, _2481, _2482));
        float _4435 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2495 = _2472 * _2472;
        float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
        float _2506 = exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0);
        float _2513 = 1.0 - _2472;
        float _2523 = (0.5 / (((_2140 * ((_2486 * _2513) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2513) + _2472) * _2486))) * _2486;
        float _4446 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2525 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
        float _2526 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _2442 = (((((_2506 * _2162) + _509) * cbLight._m0[_2457].x) * _2525) * _2526) + _2332;
        _2444 = (((((_2506 * _2164) + _511) * cbLight._m0[_2457].y) * _2525) * _2526) + _2334;
        _2446 = (((((_2506 * _2165) + _512) * cbLight._m0[_2457].z) * _2525) * _2526) + _2336;
    }
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    if (_1861.y == 0u)
    {
        uvec4 _2547 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2548 = _2547.x;
        uint _2559 = uint((float(_2547.y) * floor(float(uint(cbSceneParam._m0[85u].y * _445) / _2548))) + floor(float(uint(cbSceneParam._m0[85u].x * _444) / _2548)));
        float _2569 = (log2(_1639 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2570 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        uint _2573 = uint(isnan(14.0) ? _2570 : (isnan(_2570) ? 14.0 : min(_2570, 14.0)));
        uvec4 _2578 = texelFetch(g_lightClusterGridBuffer, int(((_2573 << 2u) + (_2559 << 6u)) >> 2u));
        uint _2579 = _2578.x;
        uint _2580 = _2547.z;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        if (((((1u << ((_2580 >> 4u) & 15u)) + 4294967295u) & _2579) == 0u) || ((_2580 & 240u) == 0u))
        {
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
            _2701 = 0.0;
            _2703 = 0.0;
            _2705 = 0.0;
        }
        else
        {
            float _2696;
            float _2698;
            float _2700;
            float _2702;
            float _2704;
            float _2706;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            uint _2862 = 0u;
            uint _2871;
            bool _2872;
            for (;;)
            {
                _2871 = texelFetch(g_lightClassification, int((((_2573 << 5u) + (_2559 << 9u)) + (_2862 << 2u)) >> 2u)).x;
                _2872 = _2871 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2872)
                {
                    frontier_phi_73_pred = _2861;
                    frontier_phi_73_pred_1 = _2860;
                    frontier_phi_73_pred_2 = _2859;
                    frontier_phi_73_pred_3 = _2858;
                    frontier_phi_73_pred_4 = _2857;
                    frontier_phi_73_pred_5 = _2856;
                }
                else
                {
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    uint _3007;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2871;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    for (;;)
                    {
                        uint _3011 = uint(findLSB(_3007)) + (_2862 << 5u);
                        uint _3008 = (_3007 + 4294967295u) & _3007;
                        uint _3013 = _3011 * 48u;
                        vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3033 = (_3011 * 48u) + 4u;
                        vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 3u)).x));
                        uint _3052 = (_3011 * 48u) + 8u;
                        vec3 _3063 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x));
                        float _3067 = _3027.x - _1637;
                        float _3068 = _3027.y - _1638;
                        float _3069 = _3027.z - _1639;
                        float _3070 = dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069));
                        float _3073 = inversesqrt(_3070);
                        float _3074 = _3073 * _3067;
                        float _3075 = _3073 * _3068;
                        float _3076 = _3073 * _3069;
                        float _3077 = dot(vec3(_465, _468, _471), vec3(_3074, _3075, _3076));
                        float _3082 = 1.0 - (_3070 * _3027.w);
                        float _4472 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3084 = sqrt(_3070) * _3046.w;
                        float _3087 = 1.39999997615814208984375 / (_3084 + 1.39999997615814208984375);
                        float _3088 = _3087 * _3087;
                        float _3091 = ((1.0 - _3088) * _3077) + _3088;
                        float _3094 = _3084 * _3084;
                        float _3098 = ((isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))) * _3083) / ((_3094 * 0.699999988079071044921875) + 1.0);
                        float _3102 = (-0.0) - _1637;
                        float _3103 = (-0.0) - _1638;
                        float _3104 = (-0.0) - _1639;
                        float _3108 = inversesqrt(dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104)));
                        float _3109 = _3108 * _3102;
                        float _3110 = _3108 * _3103;
                        float _3111 = _3108 * _3104;
                        float _3118 = exp2(log2(1.0 / ((_3094 * 3.5) + 5.0)) * 0.25);
                        float _3119 = 1.0 - _540;
                        float _3126 = sqrt(1.0 - ((1.0 - (_3119 * _3119)) * (1.0 - (_3118 * _3118))));
                        float _3127 = _3126 * _3126;
                        float _3128 = _3127 * _3127;
                        float _3129 = _3109 + _3074;
                        float _3130 = _3110 + _3075;
                        float _3131 = _3111 + _3076;
                        float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
                        float _3139 = dot(vec3(_465, _468, _471), vec3(_3109, _3110, _3111));
                        float _4488 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3143 = dot(vec3(_465, _468, _471), vec3(_3135 * _3129, _3135 * _3130, _3135 * _3131));
                        float _4499 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3150 = ((_3146 * _3146) * (_3128 + (-1.0))) + 1.0;
                        float _3151 = _3087 * _3127;
                        float _3152 = _3151 * _3151;
                        float _3155 = ((1.0 - _3152) * _3077) + _3152;
                        float _4510 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3156 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3157 = 1.0 - _3127;
                        float _3167 = (0.5 / (((_3156 * ((_3142 * _3157) + _3127)) + 9.9999999392252902907785028219223e-09) + (((_3156 * _3157) + _3127) * _3142))) * _3156;
                        float _4521 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3178 = (((_3128 * 3.1415927410125732421875) * (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) / ((_3150 * _3150) * ((_3094 * 2.1991131305694580078125) + 3.141590118408203125))) * _3083;
                        _2931 = (_3098 * _3046.x) + _3004;
                        _2932 = (_3098 * _3046.y) + _3005;
                        _2933 = (_3098 * _3046.z) + _3006;
                        _2928 = (_3178 * _3063.x) + _3001;
                        _2929 = (_3178 * _3063.y) + _3002;
                        _2930 = (_3178 * _3063.z) + _3003;
                        if (_3008 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _3008;
                        }
                    }
                    frontier_phi_73_pred = _2933;
                    frontier_phi_73_pred_1 = _2932;
                    frontier_phi_73_pred_2 = _2931;
                    frontier_phi_73_pred_3 = _2930;
                    frontier_phi_73_pred_4 = _2929;
                    frontier_phi_73_pred_5 = _2928;
                }
                _2706 = frontier_phi_73_pred;
                _2704 = frontier_phi_73_pred_1;
                _2702 = frontier_phi_73_pred_2;
                _2700 = frontier_phi_73_pred_3;
                _2698 = frontier_phi_73_pred_4;
                _2696 = frontier_phi_73_pred_5;
                uint _2863 = _2862 + 1u;
                if (_2863 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2856 = _2696;
                    _2857 = _2698;
                    _2858 = _2700;
                    _2859 = _2702;
                    _2860 = _2704;
                    _2861 = _2706;
                    _2862 = _2863;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
            _2701 = _2702;
            _2703 = _2704;
            _2705 = _2706;
        }
        uvec4 _2709 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2710 = _2709.z;
        uint _2712 = (_2710 >> 8u) & 15u;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        if (((4294967295u << _2712) & _2579) == 0u)
        {
            _2824 = _2695;
            _2826 = _2697;
            _2828 = _2699;
            _2830 = _2701;
            _2832 = _2703;
            _2834 = _2705;
        }
        else
        {
            float _2849 = inversesqrt(dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639)));
            float _2850 = _2849 * _1637;
            float _2851 = _2849 * _1638;
            float _2852 = _2849 * _1639;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2712 < ((_2710 >> 12u) & 15u))
            {
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2984 = _2695;
                float _2985 = _2697;
                float _2986 = _2699;
                float _2987 = _2701;
                float _2988 = _2703;
                float _2989 = _2705;
                uint _2990 = _2712;
                uint _2999;
                bool _3000;
                for (;;)
                {
                    _2999 = texelFetch(g_lightClassification, int((((_2573 << 5u) + (_2559 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                    _3000 = _2999 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3000)
                    {
                        frontier_phi_84_pred = _2988;
                        frontier_phi_84_pred_1 = _2987;
                        frontier_phi_84_pred_2 = _2986;
                        frontier_phi_84_pred_3 = _2985;
                        frontier_phi_84_pred_4 = _2984;
                        frontier_phi_84_pred_5 = _2989;
                    }
                    else
                    {
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3205 = _2984;
                        float _3206 = _2985;
                        float _3207 = _2986;
                        float _3208 = _2987;
                        float _3209 = _2988;
                        float _3210 = _2989;
                        uint _3211 = _2999;
                        uint _3212;
                        vec4 _3237;
                        float _3238;
                        vec4 _3253;
                        vec3 _3265;
                        vec4 _3281;
                        vec4 _3297;
                        float _3344;
                        bool _3345;
                        for (;;)
                        {
                            uint _3222 = ((_2990 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3211));
                            _3212 = (_3211 + 4294967295u) & _3211;
                            uint _3224 = _3222 * 40u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            _3238 = _3237.w;
                            uint _3240 = (_3222 * 40u) + 4u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3222 * 40u) + 8u;
                            _3265 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x));
                            uint _3268 = (_3222 * 40u) + 16u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3284 = (_3222 * 40u) + 20u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3300 = (_3222 * 40u) + 24u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3319 = (_3222 * 40u) + 28u;
                            vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3344 = fma(_1639, _3332.z, fma(_1638, _3332.y, _3332.x * _1637)) + _3332.w;
                            _3345 = !((fma(_1639, _3313.z, fma(_1638, _3313.y, _3313.x * _1637)) + _3313.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3345)
                            {
                                float _3372 = _3237.x - _1637;
                                float _3373 = _3237.y - _1638;
                                float _3374 = _3237.z - _1639;
                                float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                                float _3378 = inversesqrt(_3375);
                                float _3379 = _3378 * _3372;
                                float _3380 = _3378 * _3373;
                                float _3381 = _3378 * _3374;
                                float _3385 = 1.0 - (_3375 / (_3238 * _3238));
                                float _4532 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3390 = sqrt(_3375) * _3253.w;
                                float _3392 = 1.39999997615814208984375 / (_3390 + 1.39999997615814208984375);
                                float _3393 = _3392 * _3392;
                                float _3396 = ((1.0 - _3393) * dot(vec3(_3379, _3380, _3381), vec3(_465, _468, _471))) + _3393;
                                float _3399 = _3390 * _3390;
                                float _3403 = (fma(_1639, _3281.z, fma(_1638, _3281.y, _3281.x * _1637)) + _3281.w) / _3344;
                                float _3404 = (fma(_1639, _3297.z, fma(_1638, _3297.y, _3297.x * _1637)) + _3297.w) / _3344;
                                float _3408 = 1.0 - dot(vec2(_3403, _3404), vec2(_3403, _3404));
                                float _4548 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3410 = _3409 * (((isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))) * _3386) / ((_3399 * 0.699999988079071044921875) + 1.0));
                                float _3422 = exp2(log2(1.0 / ((_3399 * 3.5) + 5.0)) * 0.25);
                                float _3423 = 1.0 - _540;
                                float _3430 = sqrt(1.0 - ((1.0 - (_3423 * _3423)) * (1.0 - (_3422 * _3422))));
                                float _3431 = _3430 * _3430;
                                float _3432 = _3431 * _3431;
                                float _3433 = _3379 - _2850;
                                float _3434 = _3380 - _2851;
                                float _3435 = _3381 - _2852;
                                float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                                float _3443 = dot(vec3(_465, _468, _471), vec3((-0.0) - _2850, (-0.0) - _2851, (-0.0) - _2852));
                                float _4559 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3446 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3447 = dot(vec3(_465, _468, _471), vec3(_3439 * _3433, _3439 * _3434, _3439 * _3435));
                                float _4570 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3454 = ((_3450 * _3450) * (_3432 + (-1.0))) + 1.0;
                                float _3455 = _3392 * _3431;
                                float _3456 = _3455 * _3455;
                                float _3462 = ((1.0 - _3456) * dot(vec3(_465, _468, _471), vec3(_3379, _3380, _3381))) + _3456;
                                float _4581 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3464 = 1.0 - _3431;
                                float _3474 = (0.5 / (((_3463 * ((_3446 * _3464) + _3431)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3431) * _3446))) * _3463;
                                float _4592 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3484 = (_3409 * _3386) * (((_3432 * 3.1415927410125732421875) * (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) / ((_3454 * _3454) * ((_3399 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3410 * _3253.y;
                                frontier_phi_90_pred_1 = _3410 * _3253.x;
                                frontier_phi_90_pred_2 = _3484 * _3265.z;
                                frontier_phi_90_pred_3 = _3484 * _3265.y;
                                frontier_phi_90_pred_4 = _3484 * _3265.x;
                                frontier_phi_90_pred_5 = _3410 * _3253.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3492 = frontier_phi_90_pred;
                            _3491 = frontier_phi_90_pred_1;
                            _3490 = frontier_phi_90_pred_2;
                            _3489 = frontier_phi_90_pred_3;
                            _3488 = frontier_phi_90_pred_4;
                            _3493 = frontier_phi_90_pred_5;
                            _3195 = _3491 + _3208;
                            _3196 = _3492 + _3209;
                            _3197 = _3493 + _3210;
                            _3192 = _3488 + _3205;
                            _3193 = _3489 + _3206;
                            _3194 = _3490 + _3207;
                            if (_3212 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3212;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3196;
                        frontier_phi_84_pred_1 = _3195;
                        frontier_phi_84_pred_2 = _3194;
                        frontier_phi_84_pred_3 = _3193;
                        frontier_phi_84_pred_4 = _3192;
                        frontier_phi_84_pred_5 = _3197;
                    }
                    _2833 = frontier_phi_84_pred;
                    _2831 = frontier_phi_84_pred_1;
                    _2829 = frontier_phi_84_pred_2;
                    _2827 = frontier_phi_84_pred_3;
                    _2825 = frontier_phi_84_pred_4;
                    _2835 = frontier_phi_84_pred_5;
                    uint _2991 = _2990 + 1u;
                    if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2984 = _2825;
                        _2985 = _2827;
                        _2986 = _2829;
                        _2987 = _2831;
                        _2988 = _2833;
                        _2989 = _2835;
                        _2990 = _2991;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2835;
                frontier_phi_65_66_ladder_1 = _2831;
                frontier_phi_65_66_ladder_2 = _2833;
                frontier_phi_65_66_ladder_3 = _2827;
                frontier_phi_65_66_ladder_4 = _2825;
                frontier_phi_65_66_ladder_5 = _2829;
            }
            else
            {
                frontier_phi_65_66_ladder = _2705;
                frontier_phi_65_66_ladder_1 = _2701;
                frontier_phi_65_66_ladder_2 = _2703;
                frontier_phi_65_66_ladder_3 = _2697;
                frontier_phi_65_66_ladder_4 = _2695;
                frontier_phi_65_66_ladder_5 = _2699;
            }
            _2824 = frontier_phi_65_66_ladder_4;
            _2826 = frontier_phi_65_66_ladder_3;
            _2828 = frontier_phi_65_66_ladder_5;
            _2830 = frontier_phi_65_66_ladder_1;
            _2832 = frontier_phi_65_66_ladder_2;
            _2834 = frontier_phi_65_66_ladder;
        }
        float _2839 = isnan(1.0) ? _524 : (isnan(_524) ? 1.0 : min(_524, 1.0));
        _2591 = (_2839 * _2830) + _2104;
        _2593 = (_2839 * _2832) + _2106;
        _2595 = (_2839 * _2834) + _2108;
        _2597 = ((_2824 * _509) * _2839) + _2442;
        _2599 = ((_2826 * _511) * _2839) + _2444;
        _2601 = ((_2828 * _512) * _2839) + _2446;
    }
    else
    {
        _2591 = _2104;
        _2593 = _2106;
        _2595 = _2108;
        _2597 = _2442;
        _2599 = _2444;
        _2601 = _2446;
    }
    uint _2607 = _485 + uint(cbMatDynParam._m0[0u].w);
    float _2615 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _323.x) * cbInstanceData._m0[_2607].x;
    float _2618 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _323.y) * cbInstanceData._m0[_2607].y;
    float _2621 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _323.z) * cbInstanceData._m0[_2607].z;
    float _4608 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _4619 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _4630 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _4641 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _2639 = (((isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2591 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _524))) + ((_2597 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _1366)) * cbPerFrame._m0[3u].x)) + _2615;
    float _2641 = (_2618 + ((_2599 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1366)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2593 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _524)));
    float _2643 = (_2621 + ((_2601 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _1366)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2595 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _524)));
    float _2644 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2645 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2646 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2652 = cbMtdParam._m0[2u].x * _2615;
    float _2653 = cbMtdParam._m0[2u].y * _2618;
    float _2654 = cbMtdParam._m0[2u].z * _2621;
    float _4667 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2656 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _2661 = cbInstanceData._m0[_484 + 6u].w * (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)));
    float _2666 = _444 / cbSceneParam._m0[86u].x;
    float _2667 = _445 / cbSceneParam._m0[86u].y;
    vec4 _2681 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2666, _2667, (log2((isnan(cbSceneParam._m0[77u].w) ? _365 : (isnan(_365) ? cbSceneParam._m0[77u].w : min(_365, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2683 = _2681.x;
    float _2684 = _2681.y;
    float _2685 = _2681.z;
    float _2686 = _2681.w;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    if (_365 > cbSceneParam._m0[78u].w)
    {
        float _2720 = isnan(_365) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _365 : min(cbSceneParam._m0[80u].w, _365));
        float _2721 = _2720 / _365;
        float _2732 = _2721 * _416;
        float _2733 = _417 * _2721;
        float _2734 = (-0.0) - _2733;
        float _2735 = _2721 * _418;
        float _2737 = (cbSceneParam._m0[77u].w * _2734) / _2720;
        float _2738 = _2737 + cbSceneParam._m0[79u].w;
        float _2739 = cbSceneParam._m0[79u].w - _2733;
        float _2745 = sqrt(((_2732 * _2732) + (_2733 * _2733)) + (_2735 * _2735));
        float _2748 = (1.0 - (cbSceneParam._m0[77u].w / _2720)) * _2745;
        float _2753 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2755 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2941;
        if (abs((_2734 - _2737) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2941 = ((((_2738 > 0.0) ? exp2(_2753 * _2738) : (2.0 - exp2(_2755 * _2738))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2748;
        }
        else
        {
            float _2885 = 1.0 / cbSceneParam._m0[80u].x;
            float _2886 = isnan(_2739) ? _2738 : (isnan(_2738) ? _2739 : max(_2738, _2739));
            float _2887 = isnan(_2739) ? _2738 : (isnan(_2738) ? _2739 : min(_2738, _2739));
            float _2896 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : min(_2886, 0.0));
            float _2897 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : min(_2887, 0.0));
            _2941 = ((abs(_2745 / _2734) * cbSceneParam._m0[80u].y) * ((((_2896 - _2897) * 2.0) - ((exp2(_2753 * (isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0)))) - exp2(_2753 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0))))) * _2885)) - ((exp2(_2755 * _2896) - exp2(_2755 * _2897)) * _2885))) + (_2748 * cbSceneParam._m0[80u].z);
        }
        vec4 _2943 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2666, _2667, 1.0), 0.0);
        float _2952 = exp2((_2941 * (-1.44269502162933349609375)) * (1.0 - _2943.w));
        float _2953 = log2(_2952);
        float _2969 = log2(_2686);
        _2757 = (exp2(_2969 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].x)) * _2943.x) / cbSceneParam._m0[78u].x)) + _2683;
        _2759 = (exp2(_2969 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].y)) * _2943.y) / cbSceneParam._m0[78u].y)) + _2684;
        _2761 = (exp2(_2969 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].z)) * _2943.z) / cbSceneParam._m0[78u].z)) + _2685;
        _2763 = _2952 * _2686;
    }
    else
    {
        _2757 = _2683;
        _2759 = _2684;
        _2761 = _2685;
        _2763 = _2686;
    }
    bool _2979;
    vec4 _2773;
    vec4 _2795;
    float _2797;
    float _2801;
    float _2802;
    float _2803;
    float _2806;
    float _2809;
    float _2812;
    float _2813;
    bool _2823;
    for (;;)
    {
        _2773 = cbMatDynParam._m0[0u];
        float _2775 = roundEven(_2773.y);
        bool _2776 = _2775 == 3.0;
        float _2777 = log2(_2763);
        float _2781 = exp2(_2777 * cbSceneParam._m0[78u].x);
        float _2782 = exp2(_2777 * cbSceneParam._m0[78u].y);
        float _2783 = exp2(_2777 * cbSceneParam._m0[78u].z);
        float _2784 = _2781 * _2644;
        float _2785 = _2782 * _2645;
        float _2786 = _2783 * _2646;
        float _2793 = _432 + (-0.5);
        _2795 = cbMtdParam._m0[1u];
        _2797 = _2795.y * _2793;
        float _2800 = (_2775 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2801 = _2800 * (_2776 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2757)));
        _2802 = _2800 * (_2776 ? _2785 : (_2785 + (cbSceneParam._m0[72u].w * _2759)));
        _2803 = _2800 * (_2776 ? _2786 : (_2786 + (cbSceneParam._m0[72u].w * _2761)));
        _2806 = ((_2652 * _2656) * _2781) * _2800;
        _2809 = ((_2653 * _2656) * _2782) * _2800;
        _2812 = ((_2654 * _2656) * _2783) * _2800;
        _2813 = _2793 * 0.999000012874603271484375;
        _2823 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2823)
        {
            if ((cbInstanceData._m0[_484 + 7u].x + _2813) < 0.5)
            {
                _2979 = true;
                break;
            }
        }
        uint _2920 = _485 + uint(_2773.w);
        if ((cbInstanceData._m0[_2920].w < 1.0) && ((cbInstanceData._m0[_2920].w + _2813) < 0.5))
        {
            _2979 = true;
            break;
        }
        if ((_2797 + _264) < _2795.x)
        {
            _2979 = true;
            break;
        }
        _2979 = false;
        break;
    }
    float _3183;
    if (_2979)
    {
        discard_state = true;
        _3183 = 0.0;
    }
    else
    {
        _3183 = _2661;
    }
    SV_Target.x = _2801;
    SV_Target.y = _2802;
    SV_Target.z = _2803;
    SV_Target.w = _3183;
    SV_Target_1.x = _2806;
    SV_Target_1.y = _2809;
    SV_Target_1.z = _2812;
    SV_Target_1.w = _2661;
    discard_exit();
}


