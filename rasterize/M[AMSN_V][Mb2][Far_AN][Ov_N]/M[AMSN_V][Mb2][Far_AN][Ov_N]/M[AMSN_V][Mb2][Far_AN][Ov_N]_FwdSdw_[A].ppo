#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_7;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1065;
float _3717;
float _3718;
float _3719;
float _3720;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _245 = (POSITION_1.w - cbMtdParam._m0[9u].y) * (1.0 / cbMtdParam._m0[10u].x);
    float _3729 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _246 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    vec4 _259 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _262 = _259.x;
    float _263 = _259.y;
    float _264 = _259.z;
    vec4 _276 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _287 = ((_276.x - _262) * _246) + _262;
    float _288 = ((_276.y - _263) * _246) + _263;
    float _289 = ((_276.z - _264) * _246) + _264;
    vec4 _301 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _318 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _320 = _318.x;
    float _321 = _318.y;
    float _322 = _318.z;
    float _354 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3740 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _355 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _365 = (_355 * ((_320 - _287) + ((_301.x - _320) * _246))) + _287;
    float _366 = (_355 * ((_321 - _288) + ((_301.y - _321) * _246))) + _288;
    float _367 = (_355 * ((_322 - _289) + ((_301.z - _322) * _246))) + _289;
    vec4 _380 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _382 = _380.x;
    float _383 = _380.y;
    float _384 = _380.z;
    vec4 _397 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _408 = ((_397.x - _382) * _246) + _382;
    float _409 = ((_397.y - _383) * _246) + _383;
    float _410 = ((_397.z - _384) * _246) + _384;
    vec4 _422 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _437 = ((((_422.x - _408) * _355) + _408) * 2.0) + (-1.0);
    float _438 = ((((_422.y - _409) * _355) + _409) * 2.0) + (-1.0);
    float _439 = dot(vec2(_437, _438), vec2(_437, _438));
    float _3751 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _444 = sqrt(1.0 - (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))));
    float _446 = (_410 + cbMtdParam._m0[9u].w) + ((_422.z - _410) * _355);
    float _461 = (((cbMtdParam._m0[10u].w * _444) - _444) * _246) + _444;
    vec4 _475 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _485 = ((((_437 * cbMtdParam._m0[10u].y) - _437) * _246) + _437) + (((_475.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _486 = ((((_438 * cbMtdParam._m0[10u].z) - _438) * _246) + _438) + (((_475.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _489 = fma(_461, _230, fma(_486, _222 * TANGENT.x, (_208 * _200) * _485));
    float _492 = fma(_461, _231, fma(_486, _222 * TANGENT.y, (_208 * _201) * _485));
    float _495 = fma(_461, _232, fma(_486, _222 * TANGENT.z, (_208 * _202) * _485));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    float _500 = _499 * _489;
    float _501 = _499 * _492;
    float _502 = _499 * _495;
    float _3762 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _503 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _3773 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _3784 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _3795 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _522 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _573 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _563);
    float _574 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _563);
    float _575 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _563);
    float _579 = inversesqrt(dot(vec3(_573, _574, _575), vec3(_573, _574, _575)));
    float _580 = _573 * _579;
    float _581 = _574 * _579;
    float _582 = _575 * _579;
    vec4 _587 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _589 = _587.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _744 = sqrt(((_573 * _573) + (_574 * _574)) + (_575 * _575));
        float _750 = (cbMatDynParam._m0[5u].x * _744) + cbMatDynParam._m0[5u].y;
        float _3806 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _755 = (cbMatDynParam._m0[5u].z * _744) + cbMatDynParam._m0[5u].w;
        float _3817 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) - _751)) + _751) < ((_589 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _600 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _601 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _619 = fma(_502, cbSceneParam._m0[5u].z, fma(_501, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _500));
    float _622 = fma(_502, cbSceneParam._m0[6u].z, fma(_501, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _500));
    float _625 = fma(_502, cbSceneParam._m0[7u].z, fma(_501, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _500));
    uint _638 = uint(roundEven(NORMAL.w)) * 13u;
    uint _640 = _638 + 9u;
    uint _641 = _640 + uint(cbMatDynParam._m0[0u].w);
    float _647 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_641].x;
    float _648 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_641].y;
    float _649 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) * cbInstanceData._m0[_641].z;
    float _3828 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    vec4 _661 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _600, cbSceneParam._m0[86u].y * _601));
    float _664 = _661.x * TEXCOORD_3.w;
    float _665 = dot(vec3(_500, _501, _502), vec3(_580, _581, _582));
    float _668 = _665 * 2.0;
    float _672 = (_668 * _500) - _580;
    float _673 = (_668 * _501) - _581;
    float _674 = (_668 * _502) - _582;
    float _678 = abs(dot(vec3(_580, _581, _582), vec3(_500, _501, _502)));
    float _3861 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _680 = sqrt(_503);
    float _693 = exp2((_680 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_680 * 3.0));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1064;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _789 = fma(_733, cbModelParam._m0[26u].z, fma(_729, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _725));
        float _793 = fma(_733, cbModelParam._m0[27u].z, fma(_729, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _725));
        float _797 = fma(_733, cbModelParam._m0[28u].z, fma(_729, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _725));
        float _822 = _725 + _500;
        float _823 = _729 + _501;
        float _824 = _733 + _502;
        float _834 = fma(_824, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822)) - _789;
        float _835 = fma(_824, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822)) - _793;
        float _836 = fma(_824, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822)) - _797;
        float _840 = inversesqrt(dot(vec3(_834, _835, _836), vec3(_834, _835, _836)));
        float _853 = ((_840 * _834) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_789 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_840 * _835) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_793 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_840 * _836) / cbModelParam._m0[34u].z) + ((((((_797 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        float _892 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_858.x + (-0.5));
        float _894 = _892 * (_858.y + (-0.5));
        float _895 = _892 * (_858.z + (-0.5));
        float _902 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_865.x + (-0.5));
        float _904 = _902 * (_865.y + (-0.5));
        float _905 = _902 * (_865.z + (-0.5));
        float _912 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_872.x + (-0.5));
        float _914 = _912 * (_872.y + (-0.5));
        float _915 = _912 * (_872.z + (-0.5));
        float _922 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_879.x + (-0.5));
        float _924 = _922 * (_879.y + (-0.5));
        float _925 = _922 * (_879.z + (-0.5));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = _893 * 0.5;
        float _930 = _903 * 0.5;
        float _931 = _913 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _946 = (dot(vec3(_500, _501, _502), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _956 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3909 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_958 + 1.0))) + _963) * _926;
        float _973 = _894 * 0.5;
        float _974 = _904 * 0.5;
        float _975 = _914 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_500, _501, _502), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3942 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1000 + 1.0))) + _1005) * _927;
        float _1015 = _895 * 0.5;
        float _1016 = _905 * 0.5;
        float _1017 = _915 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_500, _501, _502), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3975 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1042 + 1.0))) + _1047) * _928;
        _1064 = _895;
        _1066 = _894;
        _1067 = _893;
        _1068 = _905;
        _1069 = _904;
        _1070 = _903;
        _1071 = _915;
        _1072 = _914;
        _1073 = _913;
        _1074 = _928;
        _1075 = _927;
        _1076 = _926;
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
    }
    else
    {
        _1064 = _1065;
        _1066 = _1065;
        _1067 = _1065;
        _1068 = _1065;
        _1069 = _1065;
        _1070 = _1065;
        _1071 = _1065;
        _1072 = _1065;
        _1073 = _1065;
        _1074 = _1065;
        _1075 = _1065;
        _1076 = _1065;
        _1077 = 0.0;
        _1078 = 0.0;
        _1079 = 0.0;
    }
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1108 = fma(_733, cbModelParam._m0[30u].z, fma(_729, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _725));
        float _1112 = fma(_733, cbModelParam._m0[31u].z, fma(_729, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _725));
        float _1116 = fma(_733, cbModelParam._m0[32u].z, fma(_729, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _725));
        float _1139 = _725 + _500;
        float _1140 = _729 + _501;
        float _1141 = _733 + _502;
        float _1151 = fma(_1141, cbModelParam._m0[30u].z, fma(_1140, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139)) - _1108;
        float _1152 = fma(_1141, cbModelParam._m0[31u].z, fma(_1140, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139)) - _1112;
        float _1153 = fma(_1141, cbModelParam._m0[32u].z, fma(_1140, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139)) - _1116;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1108 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1112 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[35u].z) + ((((((_1116 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1207 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1174.x + (-0.5));
        float _1209 = _1207 * (_1174.y + (-0.5));
        float _1210 = _1207 * (_1174.z + (-0.5));
        float _1217 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1181.x + (-0.5));
        float _1219 = _1217 * (_1181.y + (-0.5));
        float _1220 = _1217 * (_1181.z + (-0.5));
        float _1227 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1188.x + (-0.5));
        float _1229 = _1227 * (_1188.y + (-0.5));
        float _1230 = _1227 * (_1188.z + (-0.5));
        float _1237 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1195.x + (-0.5));
        float _1239 = _1237 * (_1195.y + (-0.5));
        float _1240 = _1237 * (_1195.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_500, _501, _502), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4038 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1271 + 1.0))) + _1276) * _1241;
        float _1286 = _1209 * 0.5;
        float _1287 = _1219 * 0.5;
        float _1288 = _1229 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_500, _501, _502), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4071 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1313 + 1.0))) + _1318) * _1242;
        float _1328 = _1210 * 0.5;
        float _1329 = _1220 * 0.5;
        float _1330 = _1230 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_500, _501, _502), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4104 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1355 + 1.0))) + _1360) * _1243;
        _1377 = _1210;
        _1378 = _1209;
        _1379 = _1208;
        _1380 = _1220;
        _1381 = _1219;
        _1382 = _1218;
        _1383 = _1230;
        _1384 = _1229;
        _1385 = _1228;
        _1386 = _1243;
        _1387 = _1242;
        _1388 = _1241;
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1065;
        _1378 = _1065;
        _1379 = _1065;
        _1380 = _1065;
        _1381 = _1065;
        _1382 = _1065;
        _1383 = _1065;
        _1384 = _1065;
        _1385 = _1065;
        _1386 = _1065;
        _1387 = _1065;
        _1388 = _1065;
        _1389 = 0.0;
        _1390 = 0.0;
        _1391 = 0.0;
    }
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1077)) + _1077;
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1078)) + _1078;
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1079)) + _1079;
    float _1424 = fma(_1403, cbSceneParam._m0[89u].z, fma(_1402, cbSceneParam._m0[89u].y, _1401 * cbSceneParam._m0[89u].x));
    float _1427 = fma(_1403, cbSceneParam._m0[90u].z, fma(_1402, cbSceneParam._m0[90u].y, _1401 * cbSceneParam._m0[90u].x));
    float _1430 = fma(_1403, cbSceneParam._m0[91u].z, fma(_1402, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1401));
    float _1445 = _672 * 0.5;
    float _1446 = _673 * 0.5;
    float _1447 = _674 * 0.5;
    float _1448 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1451 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1454 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1488;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1461 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1064, _1068, _1071, _1074));
        float _1465 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1469 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1067, _1070, _1073, _1076));
        float _1476 = dot(vec4(cbModelParam._m0[39u]), vec4(_1445, _1446, _1447, 1.0));
        _1488 = dot(vec3(isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1488 = 1.0;
    }
    float _1499;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1490 = dot(vec4(cbModelParam._m0[40u]), vec4(_1445, _1446, _1447, 1.0));
        _1499 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1490) ? 0.0 : (isnan(0.0) ? _1490 : max(0.0, _1490))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1499 = 1.0;
    }
    float _1503 = (_1499 * cbModelParam._m0[1u].x) + (_1488 * (1.0 - cbModelParam._m0[1u].x));
    float _1513 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _503);
    float _1514 = isnan(_1513) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1513 : min(cbModelParam._m0[25u].z, _1513));
    float _1596;
    float _1598;
    float _1600;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1563 = fma(_733, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _725)) + cbModelParam._m0[13u].w;
        float _1567 = fma(_733, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _725)) + cbModelParam._m0[14u].w;
        float _1571 = fma(_733, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _725)) + cbModelParam._m0[15u].w;
        float _1574 = fma(_674, cbModelParam._m0[13u].z, fma(_673, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _672));
        float _1577 = fma(_674, cbModelParam._m0[14u].z, fma(_673, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _672));
        float _1580 = fma(_674, cbModelParam._m0[15u].z, fma(_673, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _672));
        float _1608;
        if (_1574 > 0.0)
        {
            _1608 = abs((1.0 - _1563) / _1574);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1563 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1608 = frontier_phi_19_17_ladder;
        }
        float _1782;
        if (_1577 > 0.0)
        {
            _1782 = abs((1.0 - _1567) / _1577);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1567 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1782 = frontier_phi_28_24_ladder;
        }
        float _2077;
        if (_1580 > 0.0)
        {
            _2077 = abs((1.0 - _1571) / _1580);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1571 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2077 = frontier_phi_40_35_ladder;
        }
        float _2079 = isnan(_1782) ? _1608 : (isnan(_1608) ? _1782 : min(_1608, _1782));
        float _2080 = isnan(_2077) ? _2079 : (isnan(_2079) ? _2077 : min(_2079, _2077));
        float _2084 = (_2080 * _1574) + _1563;
        float _2085 = (_2080 * _1577) + _1567;
        float _2086 = (_2080 * _1580) + _1571;
        float _2087 = _2080 * 9.9999997473787516355514526367188e-05;
        float _2089 = (-1.0) - _2087;
        float _2091 = _2087 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2086 > _2091) || ((_2086 < _2089) || ((_2085 > _2091) || ((_2085 < _2089) || ((_2084 < _2089) || (_2084 > _2091))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2231 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2086, cbModelParam._m0[9u].z, fma(_2085, cbModelParam._m0[9u].y, _2084 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2086, cbModelParam._m0[10u].z, fma(_2085, cbModelParam._m0[10u].y, _2084 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2086, cbModelParam._m0[11u].z, fma(_2085, cbModelParam._m0[11u].y, _2084 * cbModelParam._m0[11u].x))), _1514);
            frontier_phi_18_40_ladder = _2231.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2231.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2231.x * cbModelParam._m0[1u].y;
        }
        _1596 = frontier_phi_18_40_ladder_2;
        _1598 = frontier_phi_18_40_ladder_1;
        _1600 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1584 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_672, _673, _674), _1514);
        _1596 = _1584.x * cbModelParam._m0[1u].y;
        _1598 = _1584.y * cbModelParam._m0[1u].y;
        _1600 = _1584.z * cbModelParam._m0[1u].y;
    }
    float _1604 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _503);
    float _1605 = isnan(_1604) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1604 : min(cbModelParam._m0[25u].w, _1604));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1662 = fma(_733, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _725)) + cbModelParam._m0[21u].w;
        float _1666 = fma(_733, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _725)) + cbModelParam._m0[22u].w;
        float _1670 = fma(_733, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _725)) + cbModelParam._m0[23u].w;
        float _1673 = fma(_674, cbModelParam._m0[21u].z, fma(_673, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _672));
        float _1676 = fma(_674, cbModelParam._m0[22u].z, fma(_673, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _672));
        float _1679 = fma(_674, cbModelParam._m0[23u].z, fma(_673, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _672));
        float _1787;
        if (_1673 > 0.0)
        {
            _1787 = abs((1.0 - _1662) / _1673);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1662 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1787 = frontier_phi_30_26_ladder;
        }
        float _2104;
        if (_1676 > 0.0)
        {
            _2104 = abs((1.0 - _1666) / _1676);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1666 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2104 = frontier_phi_42_37_ladder;
        }
        float _2431;
        if (_1679 > 0.0)
        {
            _2431 = abs((1.0 - _1670) / _1679);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1670 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2431 = frontier_phi_52_49_ladder;
        }
        float _2433 = isnan(_2104) ? _1787 : (isnan(_1787) ? _2104 : min(_1787, _2104));
        float _2434 = isnan(_2431) ? _2433 : (isnan(_2433) ? _2431 : min(_2433, _2431));
        float _2438 = (_2434 * _1673) + _1662;
        float _2439 = (_2434 * _1676) + _1666;
        float _2440 = (_2434 * _1679) + _1670;
        float _2441 = _2434 * 9.9999997473787516355514526367188e-05;
        float _2442 = (-1.0) - _2441;
        float _2444 = _2441 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2440 > _2444) || ((_2440 < _2442) || ((_2439 > _2444) || ((_2439 < _2442) || ((_2438 < _2442) || (_2438 > _2444))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2440, cbModelParam._m0[17u].z, fma(_2439, cbModelParam._m0[17u].y, _2438 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2440, cbModelParam._m0[18u].z, fma(_2439, cbModelParam._m0[18u].y, _2438 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2440, cbModelParam._m0[19u].z, fma(_2439, cbModelParam._m0[19u].y, _2438 * cbModelParam._m0[19u].x))), _1605);
            frontier_phi_27_52_ladder = _2558.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2558.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2558.x * cbModelParam._m0[1u].z;
        }
        _1698 = frontier_phi_27_52_ladder_2;
        _1700 = frontier_phi_27_52_ladder_1;
        _1702 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1682 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_672, _673, _674), _1605);
        _1698 = _1682.x * cbModelParam._m0[1u].z;
        _1700 = _1682.y * cbModelParam._m0[1u].z;
        _1702 = _1682.z * cbModelParam._m0[1u].z;
    }
    float _1714 = ((((1.0 - _693) * ((_680 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_693 * _680)) * _664;
    float _1715 = _1714 * ((cbModelParam._m0[1u].w * (_1698 - _1596)) + _1596);
    float _1716 = _1714 * ((cbModelParam._m0[1u].w * (_1700 - _1598)) + _1598);
    float _1717 = _1714 * ((cbModelParam._m0[1u].w * (_1702 - _1600)) + _1600);
    float _1720 = fma(_1717, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1715 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1717, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1715 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1717, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, _1715 * cbSceneParam._m0[91u].x));
    float _1761 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1765 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1769 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1773 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1774 = _1761 / _1773;
    float _1775 = _1765 / _1773;
    float _1776 = _1769 / _1773;
    float _1923;
    float _1924;
    float _1925;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1803 = ((uint(_1776 > cbSceneParam._m0[59u].y) + uint(_1776 > cbSceneParam._m0[59u].x)) + uint(_1776 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1804 = _1803 + 43u;
        uint _1812 = _1803 + 44u;
        uint _1820 = _1803 + 45u;
        uint _1828 = _1803 + 46u;
        float _1839 = fma(_1773, cbSceneParam._m0[_1804].w, fma(_1769, cbSceneParam._m0[_1804].z, fma(_1765, cbSceneParam._m0[_1804].y, _1761 * cbSceneParam._m0[_1804].x)));
        float _1843 = fma(_1773, cbSceneParam._m0[_1812].w, fma(_1769, cbSceneParam._m0[_1812].z, fma(_1765, cbSceneParam._m0[_1812].y, _1761 * cbSceneParam._m0[_1812].x)));
        float _1851 = fma(_1773, cbSceneParam._m0[_1828].w, fma(_1769, cbSceneParam._m0[_1828].z, fma(_1765, cbSceneParam._m0[_1828].y, _1761 * cbSceneParam._m0[_1828].x)));
        float _1856 = cbSceneParam._m0[33u].z * _1851;
        float _1858 = cbSceneParam._m0[33u].w * _1851;
        float _1861 = fma(_1773, cbSceneParam._m0[_1820].w, fma(_1769, cbSceneParam._m0[_1820].z, fma(_1765, cbSceneParam._m0[_1820].y, _1761 * cbSceneParam._m0[_1820].x))) / _1851;
        float _1909 = (cbSceneParam._m0[33u].x - sqrt(((_1775 * _1775) + (_1774 * _1774)) + (_1776 * _1776))) * cbSceneParam._m0[33u].y;
        float _4230 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1916 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1856 + _1839) / _1851, (_1858 + _1843) / _1851), _1861), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1858 + _1839) / _1851, (_1843 - _1856) / _1851), _1861), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1839 - _1856) / _1851, (_1843 - _1858) / _1851), _1861), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1839 - _1858) / _1851, (_1856 + _1843) / _1851), _1861), 0.0)).x), vec4(0.25)));
        _1923 = 1.0 - (_1916 * cbSceneParam._m0[34u].x);
        _1924 = 1.0 - (_1916 * cbSceneParam._m0[34u].y);
        _1925 = 1.0 - (_1916 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1923 = 1.0;
        _1924 = 1.0;
        _1925 = 1.0;
    }
    float _1989;
    float _1991;
    float _1993;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1977 = fma(_1773, cbSceneParam._m0[63u].w, fma(_1769, cbSceneParam._m0[63u].z, fma(_1765, cbSceneParam._m0[63u].y, _1761 * cbSceneParam._m0[63u].x)));
        float _1978 = fma(_1773, cbSceneParam._m0[60u].w, fma(_1769, cbSceneParam._m0[60u].z, fma(_1765, cbSceneParam._m0[60u].y, _1761 * cbSceneParam._m0[60u].x))) / _1977;
        float _1979 = fma(_1773, cbSceneParam._m0[61u].w, fma(_1769, cbSceneParam._m0[61u].z, fma(_1765, cbSceneParam._m0[61u].y, _1761 * cbSceneParam._m0[61u].x))) / _1977;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1978 >= cbSceneParam._m0[64u].x) && (_1979 >= cbSceneParam._m0[64u].y)) && (_1978 <= cbSceneParam._m0[64u].z)) && (_1979 <= cbSceneParam._m0[64u].w))
        {
            float _2117 = fma(_1773, cbSceneParam._m0[62u].w, fma(_1769, cbSceneParam._m0[62u].z, fma(_1765, cbSceneParam._m0[62u].y, _1761 * cbSceneParam._m0[62u].x))) / _1977;
            float _2121 = isnan(cbSceneParam._m0[41u].w) ? _2117 : (isnan(_2117) ? cbSceneParam._m0[41u].w : max(_2117, cbSceneParam._m0[41u].w));
            float _2164 = (cbSceneParam._m0[33u].x - sqrt(((_1775 * _1775) + (_1774 * _1774)) + (_1776 * _1776))) * cbSceneParam._m0[33u].y;
            float _4246 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
            float _2171 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1978, cbSceneParam._m0[33u].w + _1979), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1978, _1979 - cbSceneParam._m0[33u].z), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1978 - cbSceneParam._m0[33u].z, _1979 - cbSceneParam._m0[33u].w), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1978 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1979), _2121), 0.0)).x), vec4(0.25)));
            float _2175 = 1.0 - (_2171 * cbSceneParam._m0[34u].x);
            float _2176 = 1.0 - (_2171 * cbSceneParam._m0[34u].y);
            float _2177 = 1.0 - (_2171 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2176) ? _1924 : (isnan(_1924) ? _2176 : min(_1924, _2176));
            frontier_phi_39_38_ladder_1 = isnan(_2175) ? _1923 : (isnan(_1923) ? _2175 : min(_1923, _2175));
            frontier_phi_39_38_ladder_2 = isnan(_2177) ? _1925 : (isnan(_1925) ? _2177 : min(_1925, _2177));
        }
        else
        {
            frontier_phi_39_38_ladder = _1924;
            frontier_phi_39_38_ladder_1 = _1923;
            frontier_phi_39_38_ladder_2 = _1925;
        }
        _1989 = frontier_phi_39_38_ladder_1;
        _1991 = frontier_phi_39_38_ladder;
        _1993 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1989 = _1923;
        _1991 = _1924;
        _1993 = _1925;
    }
    uvec4 _1998 = floatBitsToUint(cbInstanceData._m0[_638 + 5u]);
    uint _2000 = _1998.x * 14u;
    uint _2001 = _2000 + 13u;
    float _2008 = _664 + (-1.0);
    float _2013 = (cbLight._m0[_2001].x * _2008) + 1.0;
    float _2014 = (cbLight._m0[_2001].y * _2008) + 1.0;
    float _2015 = (cbLight._m0[_2001].z * _2008) + 1.0;
    float _2016 = (cbLight._m0[_2001].w * _2008) + 1.0;
    uint _2017 = _2000 + 5u;
    float _2023 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
    uint _2027 = _2000 + 4u;
    float _2036 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
    uint _2040 = _2000 | 1u;
    float _2051 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_500, _501, _502));
    float _2054 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_500, _501, _502));
    float _4282 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _4293 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2059 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.3183098733425140380859375;
    float _2061 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * 0.3183098733425140380859375;
    float _2068 = ((cbLight._m0[_2017].x * _2023) * _2061) + (((cbLight._m0[_2027].x * _1989) * _2036) * _2059);
    float _2069 = ((_2023 * cbLight._m0[_2017].y) * _2061) + (((cbLight._m0[_2027].y * _1991) * _2036) * _2059);
    float _2070 = ((_2023 * cbLight._m0[_2017].z) * _2061) + (((cbLight._m0[_2027].z * _1993) * _2036) * _2059);
    uvec4 _2074 = floatBitsToUint(cbLight._m0[_2000 + 12u]);
    bool _2076 = _2074.x == 0u;
    float _2178;
    float _2180;
    float _2182;
    if (_2076)
    {
        _2178 = _2068;
        _2180 = _2069;
        _2182 = _2070;
    }
    else
    {
        uint _2186 = _2000 + 6u;
        float _2202 = (dot(vec3(cbLight._m0[_2000 + 2u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _2203 = _2202 * _2202;
        float _4304 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2204 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2205 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2178 = (((cbLight._m0[_2186].x * 0.3183098733425140380859375) * _2204) * _2205) + _2068;
        _2180 = (((cbLight._m0[_2186].y * 0.3183098733425140380859375) * _2204) * _2205) + _2069;
        _2182 = (((cbLight._m0[_2186].z * 0.3183098733425140380859375) * _2204) * _2205) + _2070;
    }
    bool _2185 = _2074.y == 0u;
    float _2240;
    float _2242;
    float _2244;
    if (_2185)
    {
        _2240 = _2178;
        _2242 = _2180;
        _2244 = _2182;
    }
    else
    {
        uint _2402 = _2000 + 7u;
        float _2418 = (dot(vec3(cbLight._m0[_2000 + 3u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _2419 = _2418 * _2418;
        float _4320 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2420 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2421 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2240 = (((cbLight._m0[_2402].x * 0.3183098733425140380859375) * _2420) * _2421) + _2178;
        _2242 = (((cbLight._m0[_2402].y * 0.3183098733425140380859375) * _2420) * _2421) + _2180;
        _2244 = (((cbLight._m0[_2402].z * 0.3183098733425140380859375) * _2420) * _2421) + _2182;
    }
    uint _2247 = _2000 + 8u;
    float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _503) * 0.949999988079071044921875);
    float _2261 = _2260 * _2260;
    float _2262 = cbLight._m0[_2000].x + _580;
    float _2263 = cbLight._m0[_2000].y + _581;
    float _2264 = cbLight._m0[_2000].z + _582;
    float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
    float _2269 = _2268 * _2262;
    float _2270 = _2268 * _2263;
    float _2271 = _2268 * _2264;
    float _2272 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2000].xyz));
    float _4336 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _4347 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _2276 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2277 = dot(vec3(_500, _501, _502), vec3(_2269, _2270, _2271));
    float _4358 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2281 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2269, _2270, _2271));
    float _4369 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2285 = _2261 * _2261;
    float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
    float _2300 = (exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2301 = 1.0 - _2261;
    float _2312 = (0.5 / (((_2276 * ((_2275 * _2301) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2301) + _2261) * _2275))) * _2275;
    float _4380 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2314 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
    uint _2328 = _2000 + 9u;
    float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _503) * 0.949999988079071044921875);
    float _2340 = _2339 * _2339;
    float _2341 = cbLight._m0[_2040].x + _580;
    float _2342 = cbLight._m0[_2040].y + _581;
    float _2343 = cbLight._m0[_2040].z + _582;
    float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
    float _2348 = _2347 * _2341;
    float _2349 = _2347 * _2342;
    float _2350 = _2347 * _2343;
    float _2351 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2040].xyz));
    float _4391 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2355 = dot(vec3(_500, _501, _502), vec3(_2348, _2349, _2350));
    float _4402 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2359 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2348, _2349, _2350));
    float _4413 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2363 = _2340 * _2340;
    float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
    float _2376 = (exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2377 = 1.0 - _2340;
    float _2387 = (0.5 / (((_2276 * ((_2354 * _2377) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2377) + _2340) * _2354))) * _2354;
    float _4424 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2389 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
    float _2399 = (((_2376 * cbLight._m0[_2328].x) * _2389) * _2023) + ((((cbLight._m0[_2247].x * _1989) * _2300) * _2314) * _2036);
    float _2400 = (((_2376 * cbLight._m0[_2328].y) * _2389) * _2023) + ((((cbLight._m0[_2247].y * _1991) * _2300) * _2314) * _2036);
    float _2401 = (((_2376 * cbLight._m0[_2328].z) * _2389) * _2023) + ((((cbLight._m0[_2247].z * _1993) * _2300) * _2314) * _2036);
    float _2457;
    float _2459;
    float _2461;
    if (_2076)
    {
        _2457 = _2399;
        _2459 = _2400;
        _2461 = _2401;
    }
    else
    {
        uint _2463 = _2000 + 2u;
        uint _2467 = _2000 + 10u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _503) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _580;
        float _2484 = cbLight._m0[_2463].y + _581;
        float _2485 = cbLight._m0[_2463].z + _582;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2463].xyz));
        float _4435 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2497 = dot(vec3(_500, _501, _502), vec3(_2490, _2491, _2492));
        float _4446 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4457 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2518 = (exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2519 = 1.0 - _2482;
        float _2529 = (0.5 / (((_2276 * ((_2496 * _2519) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2519) + _2482) * _2496))) * _2496;
        float _4468 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2457 = (((_2518 * cbLight._m0[_2467].x) * _2531) * _2532) + _2399;
        _2459 = (((_2518 * cbLight._m0[_2467].y) * _2531) * _2532) + _2400;
        _2461 = (((_2518 * cbLight._m0[_2467].z) * _2531) * _2532) + _2401;
    }
    float _2563;
    float _2565;
    float _2567;
    if (_2185)
    {
        _2563 = _2457;
        _2565 = _2459;
        _2567 = _2461;
    }
    else
    {
        uint _2574 = _2000 + 3u;
        uint _2578 = _2000 + 11u;
        float _2592 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2574].w)) * _503) * 0.949999988079071044921875);
        float _2593 = _2592 * _2592;
        float _2594 = cbLight._m0[_2574].x + _580;
        float _2595 = cbLight._m0[_2574].y + _581;
        float _2596 = cbLight._m0[_2574].z + _582;
        float _2600 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
        float _2601 = _2600 * _2594;
        float _2602 = _2600 * _2595;
        float _2603 = _2600 * _2596;
        float _2604 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2574].xyz));
        float _4484 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2608 = dot(vec3(_500, _501, _502), vec3(_2601, _2602, _2603));
        float _4495 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2612 = dot(vec3(cbLight._m0[_2574].xyz), vec3(_2601, _2602, _2603));
        float _4506 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2616 = _2593 * _2593;
        float _2620 = ((_2611 * _2611) * (_2616 + (-1.0))) + 1.0;
        float _2629 = (exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2630 = 1.0 - _2593;
        float _2640 = (0.5 / (((_2276 * ((_2607 * _2630) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2630) + _2593) * _2607))) * _2607;
        float _4517 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2642 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2616 / ((_2620 * _2620) * 3.141590118408203125));
        float _2643 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2563 = (((_2629 * cbLight._m0[_2578].x) * _2642) * _2643) + _2457;
        _2565 = (((_2629 * cbLight._m0[_2578].y) * _2642) * _2643) + _2459;
        _2567 = (((_2629 * cbLight._m0[_2578].z) * _2642) * _2643) + _2461;
    }
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    float _2718;
    if (_1998.y == 0u)
    {
        uvec4 _2664 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2665 = _2664.x;
        uint _2676 = uint((float(_2664.y) * floor(float(uint(cbSceneParam._m0[85u].y * _601) / _2665))) + floor(float(uint(cbSceneParam._m0[85u].x * _600) / _2665)));
        float _2686 = (log2(_1776 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2687 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        uint _2690 = uint(isnan(14.0) ? _2687 : (isnan(_2687) ? 14.0 : min(_2687, 14.0)));
        uvec4 _2695 = texelFetch(g_lightClusterGridBuffer, int(((_2690 << 2u) + (_2676 << 6u)) >> 2u));
        uint _2696 = _2695.x;
        uint _2697 = _2664.z;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        if (((((1u << ((_2697 >> 4u) & 15u)) + 4294967295u) & _2696) == 0u) || ((_2697 & 240u) == 0u))
        {
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
        }
        else
        {
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            uint _2933 = 0u;
            uint _2942;
            bool _2943;
            for (;;)
            {
                _2942 = texelFetch(g_lightClassification, int((((_2690 << 5u) + (_2676 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                _2943 = _2942 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2943)
                {
                    frontier_phi_73_pred = _2932;
                    frontier_phi_73_pred_1 = _2931;
                    frontier_phi_73_pred_2 = _2930;
                    frontier_phi_73_pred_3 = _2929;
                    frontier_phi_73_pred_4 = _2928;
                    frontier_phi_73_pred_5 = _2927;
                }
                else
                {
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    uint _3078;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2942;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    for (;;)
                    {
                        uint _3082 = uint(findLSB(_3078)) + (_2933 << 5u);
                        uint _3079 = (_3078 + 4294967295u) & _3078;
                        uint _3084 = _3082 * 48u;
                        vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 3u)).x));
                        uint _3104 = (_3082 * 48u) + 4u;
                        vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 3u)).x));
                        uint _3123 = (_3082 * 48u) + 8u;
                        vec3 _3134 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x));
                        float _3138 = _3098.x - _1774;
                        float _3139 = _3098.y - _1775;
                        float _3140 = _3098.z - _1776;
                        float _3141 = dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140));
                        float _3144 = inversesqrt(_3141);
                        float _3145 = _3144 * _3138;
                        float _3146 = _3144 * _3139;
                        float _3147 = _3144 * _3140;
                        float _3148 = dot(vec3(_619, _622, _625), vec3(_3145, _3146, _3147));
                        float _3153 = 1.0 - (_3141 * _3098.w);
                        float _4543 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3154 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3155 = sqrt(_3141) * _3117.w;
                        float _3158 = 1.39999997615814208984375 / (_3155 + 1.39999997615814208984375);
                        float _3159 = _3158 * _3158;
                        float _3162 = ((1.0 - _3159) * _3148) + _3159;
                        float _3165 = _3155 * _3155;
                        float _3169 = ((isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))) * _3154) / ((_3165 * 0.699999988079071044921875) + 1.0);
                        float _3173 = (-0.0) - _1774;
                        float _3174 = (-0.0) - _1775;
                        float _3175 = (-0.0) - _1776;
                        float _3179 = inversesqrt(dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175)));
                        float _3180 = _3179 * _3173;
                        float _3181 = _3179 * _3174;
                        float _3182 = _3179 * _3175;
                        float _3189 = exp2(log2(1.0 / ((_3165 * 3.5) + 5.0)) * 0.25);
                        float _3190 = 1.0 - _680;
                        float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                        float _3198 = _3197 * _3197;
                        float _3199 = _3198 * _3198;
                        float _3200 = _3180 + _3145;
                        float _3201 = _3181 + _3146;
                        float _3202 = _3182 + _3147;
                        float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                        float _3210 = dot(vec3(_619, _622, _625), vec3(_3180, _3181, _3182));
                        float _4559 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3213 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3214 = dot(vec3(_619, _622, _625), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                        float _4570 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                        float _3222 = _3158 * _3198;
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3148) + _3223;
                        float _4581 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3228 = 1.0 - _3198;
                        float _3238 = (0.5 / (((_3227 * ((_3213 * _3228) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3198) * _3213))) * _3227;
                        float _4592 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3249 = (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) / ((_3221 * _3221) * ((_3165 * 2.1991131305694580078125) + 3.141590118408203125))) * _3154;
                        _3002 = (_3169 * _3117.x) + _3075;
                        _3003 = (_3169 * _3117.y) + _3076;
                        _3004 = (_3169 * _3117.z) + _3077;
                        _2999 = (_3249 * _3134.x) + _3072;
                        _3000 = (_3249 * _3134.y) + _3073;
                        _3001 = (_3249 * _3134.z) + _3074;
                        if (_3079 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3079;
                        }
                    }
                    frontier_phi_73_pred = _3004;
                    frontier_phi_73_pred_1 = _3003;
                    frontier_phi_73_pred_2 = _3002;
                    frontier_phi_73_pred_3 = _3001;
                    frontier_phi_73_pred_4 = _3000;
                    frontier_phi_73_pred_5 = _2999;
                }
                _2786 = frontier_phi_73_pred;
                _2784 = frontier_phi_73_pred_1;
                _2782 = frontier_phi_73_pred_2;
                _2780 = frontier_phi_73_pred_3;
                _2778 = frontier_phi_73_pred_4;
                _2776 = frontier_phi_73_pred_5;
                uint _2934 = _2933 + 1u;
                if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2927 = _2776;
                    _2928 = _2778;
                    _2929 = _2780;
                    _2930 = _2782;
                    _2931 = _2784;
                    _2932 = _2786;
                    _2933 = _2934;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
        }
        uvec4 _2789 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2790 = _2789.z;
        uint _2792 = (_2790 >> 8u) & 15u;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        if (((4294967295u << _2792) & _2696) == 0u)
        {
            _2895 = _2775;
            _2897 = _2777;
            _2899 = _2779;
            _2901 = _2781;
            _2903 = _2783;
            _2905 = _2785;
        }
        else
        {
            float _2920 = inversesqrt(dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776)));
            float _2921 = _2920 * _1774;
            float _2922 = _2920 * _1775;
            float _2923 = _2920 * _1776;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2792 < ((_2790 >> 12u) & 15u))
            {
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _3055 = _2775;
                float _3056 = _2777;
                float _3057 = _2779;
                float _3058 = _2781;
                float _3059 = _2783;
                float _3060 = _2785;
                uint _3061 = _2792;
                uint _3070;
                bool _3071;
                for (;;)
                {
                    _3070 = texelFetch(g_lightClassification, int((((_2690 << 5u) + (_2676 << 9u)) + (_3061 << 2u)) >> 2u)).x;
                    _3071 = _3070 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3071)
                    {
                        frontier_phi_84_pred = _3059;
                        frontier_phi_84_pred_1 = _3058;
                        frontier_phi_84_pred_2 = _3057;
                        frontier_phi_84_pred_3 = _3056;
                        frontier_phi_84_pred_4 = _3055;
                        frontier_phi_84_pred_5 = _3060;
                    }
                    else
                    {
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3276 = _3055;
                        float _3277 = _3056;
                        float _3278 = _3057;
                        float _3279 = _3058;
                        float _3280 = _3059;
                        float _3281 = _3060;
                        uint _3282 = _3070;
                        uint _3283;
                        vec4 _3308;
                        float _3309;
                        vec4 _3324;
                        vec3 _3336;
                        vec4 _3352;
                        vec4 _3368;
                        float _3415;
                        bool _3416;
                        for (;;)
                        {
                            uint _3293 = ((_3061 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3282));
                            _3283 = (_3282 + 4294967295u) & _3282;
                            uint _3295 = _3293 * 40u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3309 = _3308.w;
                            uint _3311 = (_3293 * 40u) + 4u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3326 = (_3293 * 40u) + 8u;
                            _3336 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x));
                            uint _3339 = (_3293 * 40u) + 16u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3355 = (_3293 * 40u) + 20u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3371 = (_3293 * 40u) + 24u;
                            vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3390 = (_3293 * 40u) + 28u;
                            vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3415 = fma(_1776, _3403.z, fma(_1775, _3403.y, _3403.x * _1774)) + _3403.w;
                            _3416 = !((fma(_1776, _3384.z, fma(_1775, _3384.y, _3384.x * _1774)) + _3384.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3416)
                            {
                                float _3443 = _3308.x - _1774;
                                float _3444 = _3308.y - _1775;
                                float _3445 = _3308.z - _1776;
                                float _3446 = dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445));
                                float _3449 = inversesqrt(_3446);
                                float _3450 = _3449 * _3443;
                                float _3451 = _3449 * _3444;
                                float _3452 = _3449 * _3445;
                                float _3456 = 1.0 - (_3446 / (_3309 * _3309));
                                float _4603 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3461 = sqrt(_3446) * _3324.w;
                                float _3463 = 1.39999997615814208984375 / (_3461 + 1.39999997615814208984375);
                                float _3464 = _3463 * _3463;
                                float _3467 = ((1.0 - _3464) * dot(vec3(_3450, _3451, _3452), vec3(_619, _622, _625))) + _3464;
                                float _3470 = _3461 * _3461;
                                float _3474 = (fma(_1776, _3352.z, fma(_1775, _3352.y, _3352.x * _1774)) + _3352.w) / _3415;
                                float _3475 = (fma(_1776, _3368.z, fma(_1775, _3368.y, _3368.x * _1774)) + _3368.w) / _3415;
                                float _3479 = 1.0 - dot(vec2(_3474, _3475), vec2(_3474, _3475));
                                float _4619 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3481 = _3480 * (((isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0))) * _3457) / ((_3470 * 0.699999988079071044921875) + 1.0));
                                float _3493 = exp2(log2(1.0 / ((_3470 * 3.5) + 5.0)) * 0.25);
                                float _3494 = 1.0 - _680;
                                float _3501 = sqrt(1.0 - ((1.0 - (_3494 * _3494)) * (1.0 - (_3493 * _3493))));
                                float _3502 = _3501 * _3501;
                                float _3503 = _3502 * _3502;
                                float _3504 = _3450 - _2921;
                                float _3505 = _3451 - _2922;
                                float _3506 = _3452 - _2923;
                                float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                                float _3514 = dot(vec3(_619, _622, _625), vec3((-0.0) - _2921, (-0.0) - _2922, (-0.0) - _2923));
                                float _4630 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3517 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3518 = dot(vec3(_619, _622, _625), vec3(_3510 * _3504, _3510 * _3505, _3510 * _3506));
                                float _4641 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3521 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3525 = ((_3521 * _3521) * (_3503 + (-1.0))) + 1.0;
                                float _3526 = _3463 * _3502;
                                float _3527 = _3526 * _3526;
                                float _3533 = ((1.0 - _3527) * dot(vec3(_619, _622, _625), vec3(_3450, _3451, _3452))) + _3527;
                                float _4652 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3534 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3535 = 1.0 - _3502;
                                float _3545 = (0.5 / (((_3534 * ((_3517 * _3535) + _3502)) + 9.9999999392252902907785028219223e-09) + (((_3534 * _3535) + _3502) * _3517))) * _3534;
                                float _4663 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3555 = (_3480 * _3457) * (((_3503 * 3.1415927410125732421875) * (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) / ((_3525 * _3525) * ((_3470 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3481 * _3324.y;
                                frontier_phi_90_pred_1 = _3481 * _3324.x;
                                frontier_phi_90_pred_2 = _3555 * _3336.z;
                                frontier_phi_90_pred_3 = _3555 * _3336.y;
                                frontier_phi_90_pred_4 = _3555 * _3336.x;
                                frontier_phi_90_pred_5 = _3481 * _3324.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3563 = frontier_phi_90_pred;
                            _3562 = frontier_phi_90_pred_1;
                            _3561 = frontier_phi_90_pred_2;
                            _3560 = frontier_phi_90_pred_3;
                            _3559 = frontier_phi_90_pred_4;
                            _3564 = frontier_phi_90_pred_5;
                            _3266 = _3562 + _3279;
                            _3267 = _3563 + _3280;
                            _3268 = _3564 + _3281;
                            _3263 = _3559 + _3276;
                            _3264 = _3560 + _3277;
                            _3265 = _3561 + _3278;
                            if (_3283 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3283;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3267;
                        frontier_phi_84_pred_1 = _3266;
                        frontier_phi_84_pred_2 = _3265;
                        frontier_phi_84_pred_3 = _3264;
                        frontier_phi_84_pred_4 = _3263;
                        frontier_phi_84_pred_5 = _3268;
                    }
                    _2904 = frontier_phi_84_pred;
                    _2902 = frontier_phi_84_pred_1;
                    _2900 = frontier_phi_84_pred_2;
                    _2898 = frontier_phi_84_pred_3;
                    _2896 = frontier_phi_84_pred_4;
                    _2906 = frontier_phi_84_pred_5;
                    uint _3062 = _3061 + 1u;
                    if (_3062 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3055 = _2896;
                        _3056 = _2898;
                        _3057 = _2900;
                        _3058 = _2902;
                        _3059 = _2904;
                        _3060 = _2906;
                        _3061 = _3062;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2906;
                frontier_phi_65_66_ladder_1 = _2902;
                frontier_phi_65_66_ladder_2 = _2904;
                frontier_phi_65_66_ladder_3 = _2898;
                frontier_phi_65_66_ladder_4 = _2896;
                frontier_phi_65_66_ladder_5 = _2900;
            }
            else
            {
                frontier_phi_65_66_ladder = _2785;
                frontier_phi_65_66_ladder_1 = _2781;
                frontier_phi_65_66_ladder_2 = _2783;
                frontier_phi_65_66_ladder_3 = _2777;
                frontier_phi_65_66_ladder_4 = _2775;
                frontier_phi_65_66_ladder_5 = _2779;
            }
            _2895 = frontier_phi_65_66_ladder_4;
            _2897 = frontier_phi_65_66_ladder_3;
            _2899 = frontier_phi_65_66_ladder_5;
            _2901 = frontier_phi_65_66_ladder_1;
            _2903 = frontier_phi_65_66_ladder_2;
            _2905 = frontier_phi_65_66_ladder;
        }
        float _2910 = isnan(1.0) ? _664 : (isnan(_664) ? 1.0 : min(_664, 1.0));
        _2708 = (_2910 * _2901) + _2240;
        _2710 = (_2910 * _2903) + _2242;
        _2712 = (_2910 * _2905) + _2244;
        _2714 = ((_2895 * 0.039999999105930328369140625) * _2910) + _2563;
        _2716 = ((_2897 * 0.039999999105930328369140625) * _2910) + _2565;
        _2718 = ((_2899 * 0.039999999105930328369140625) * _2910) + _2567;
    }
    else
    {
        _2708 = _2240;
        _2710 = _2242;
        _2712 = _2244;
        _2714 = _2563;
        _2716 = _2565;
        _2718 = _2567;
    }
    float _4679 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4690 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4701 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _2735 = ((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2708 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _664))) + ((_2714 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1503)) * cbPerFrame._m0[3u].x);
    float _2736 = ((isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2710 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _664))) + ((_2716 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1503)) * cbPerFrame._m0[3u].x);
    float _2737 = ((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2712 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _664))) + ((_2718 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1503)) * cbPerFrame._m0[3u].x);
    uint _2738 = _638 + 6u;
    float _2746 = _600 / cbSceneParam._m0[86u].x;
    float _2747 = _601 / cbSceneParam._m0[86u].y;
    vec4 _2761 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2746, _2747, (log2((isnan(cbSceneParam._m0[77u].w) ? _522 : (isnan(_522) ? cbSceneParam._m0[77u].w : min(_522, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2763 = _2761.x;
    float _2764 = _2761.y;
    float _2765 = _2761.z;
    float _2766 = _2761.w;
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    if (_522 > cbSceneParam._m0[78u].w)
    {
        float _2800 = isnan(_522) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _522 : min(cbSceneParam._m0[80u].w, _522));
        float _2801 = _2800 / _522;
        float _2812 = _2801 * _573;
        float _2813 = _574 * _2801;
        float _2814 = (-0.0) - _2813;
        float _2815 = _2801 * _575;
        float _2817 = (cbSceneParam._m0[77u].w * _2814) / _2800;
        float _2818 = _2817 + cbSceneParam._m0[79u].w;
        float _2819 = cbSceneParam._m0[79u].w - _2813;
        float _2825 = sqrt(((_2812 * _2812) + (_2813 * _2813)) + (_2815 * _2815));
        float _2828 = (1.0 - (cbSceneParam._m0[77u].w / _2800)) * _2825;
        float _2833 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2835 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3012;
        if (abs((_2814 - _2817) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3012 = ((((_2818 > 0.0) ? exp2(_2833 * _2818) : (2.0 - exp2(_2835 * _2818))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2828;
        }
        else
        {
            float _2956 = 1.0 / cbSceneParam._m0[80u].x;
            float _2957 = isnan(_2819) ? _2818 : (isnan(_2818) ? _2819 : max(_2818, _2819));
            float _2958 = isnan(_2819) ? _2818 : (isnan(_2818) ? _2819 : min(_2818, _2819));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            _3012 = ((abs(_2825 / _2814) * cbSceneParam._m0[80u].y) * ((((_2967 - _2968) * 2.0) - ((exp2(_2833 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0)))) - exp2(_2833 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))))) * _2956)) - ((exp2(_2835 * _2967) - exp2(_2835 * _2968)) * _2956))) + (_2828 * cbSceneParam._m0[80u].z);
        }
        vec4 _3014 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2746, _2747, 1.0), 0.0);
        float _3023 = exp2((_3012 * (-1.44269502162933349609375)) * (1.0 - _3014.w));
        float _3024 = log2(_3023);
        float _3040 = log2(_2766);
        _2837 = (exp2(_3040 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].x)) * _3014.x) / cbSceneParam._m0[78u].x)) + _2763;
        _2839 = (exp2(_3040 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].y)) * _3014.y) / cbSceneParam._m0[78u].y)) + _2764;
        _2841 = (exp2(_3040 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].z)) * _3014.z) / cbSceneParam._m0[78u].z)) + _2765;
        _2843 = _3023 * _2766;
    }
    else
    {
        _2837 = _2763;
        _2839 = _2764;
        _2841 = _2765;
        _2843 = _2766;
    }
    bool _3050;
    vec4 _2853;
    vec4 _2875;
    float _2877;
    float _2881;
    float _2882;
    float _2883;
    float _2884;
    bool _2894;
    for (;;)
    {
        _2853 = cbMatDynParam._m0[0u];
        float _2855 = roundEven(_2853.y);
        bool _2856 = _2855 == 3.0;
        float _2857 = log2(_2843);
        float _2864 = exp2(_2857 * cbSceneParam._m0[78u].x) * _2735;
        float _2865 = exp2(_2857 * cbSceneParam._m0[78u].y) * _2736;
        float _2866 = exp2(_2857 * cbSceneParam._m0[78u].z) * _2737;
        float _2873 = _589 + (-0.5);
        _2875 = cbMtdParam._m0[1u];
        _2877 = _2875.y * _2873;
        float _2880 = (_2855 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2881 = _2880 * (_2856 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2837)));
        _2882 = _2880 * (_2856 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2839)));
        _2883 = _2880 * (_2856 ? _2866 : (_2866 + (cbSceneParam._m0[72u].w * _2841)));
        _2884 = _2873 * 0.999000012874603271484375;
        _2894 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2894)
        {
            if ((cbInstanceData._m0[_638 + 7u].x + _2884) < 0.5)
            {
                _3050 = true;
                break;
            }
        }
        uint _2991 = _640 + uint(_2853.w);
        if ((cbInstanceData._m0[_2991].w < 1.0) && ((cbInstanceData._m0[_2991].w + _2884) < 0.5))
        {
            _3050 = true;
            break;
        }
        if ((_2877 + 1.0) < _2875.x)
        {
            _3050 = true;
            break;
        }
        _3050 = false;
        break;
    }
    float _3254;
    if (_3050)
    {
        discard_state = true;
        _3254 = 0.0;
    }
    else
    {
        _3254 = cbInstanceData._m0[_2738].w;
    }
    SV_Target.x = _2881;
    SV_Target.y = _2882;
    SV_Target.z = _2883;
    SV_Target.w = _3254;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2738].w;
    discard_exit();
}


