#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_7;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1016;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    float _237 = (POSITION_1.w - cbMtdParam._m0[9u].y) * (1.0 / cbMtdParam._m0[10u].x);
    float _3331 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _238 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    vec4 _251 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _254 = _251.x;
    float _255 = _251.y;
    float _256 = _251.z;
    vec4 _268 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _279 = ((_268.x - _254) * _238) + _254;
    float _280 = ((_268.y - _255) * _238) + _255;
    float _281 = ((_268.z - _256) * _238) + _256;
    vec4 _293 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _310 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _312 = _310.x;
    float _313 = _310.y;
    float _314 = _310.z;
    float _346 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3342 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _347 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _357 = (_347 * ((_312 - _279) + ((_293.x - _312) * _238))) + _279;
    float _358 = (_347 * ((_313 - _280) + ((_293.y - _313) * _238))) + _280;
    float _359 = (_347 * ((_314 - _281) + ((_293.z - _314) * _238))) + _281;
    vec4 _372 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _374 = _372.x;
    float _375 = _372.y;
    float _376 = _372.z;
    vec4 _389 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _400 = ((_389.x - _374) * _238) + _374;
    float _401 = ((_389.y - _375) * _238) + _375;
    float _402 = ((_389.z - _376) * _238) + _376;
    vec4 _414 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _429 = ((((_414.x - _400) * _347) + _400) * 2.0) + (-1.0);
    float _430 = ((((_414.y - _401) * _347) + _401) * 2.0) + (-1.0);
    float _431 = dot(vec2(_429, _430), vec2(_429, _430));
    float _3353 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _436 = sqrt(1.0 - (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))));
    float _438 = (_402 + cbMtdParam._m0[9u].w) + ((_414.z - _402) * _347);
    float _453 = (((cbMtdParam._m0[10u].w * _436) - _436) * _238) + _436;
    vec4 _467 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _477 = ((((_429 * cbMtdParam._m0[10u].y) - _429) * _238) + _429) + (((_467.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _478 = ((((_430 * cbMtdParam._m0[10u].z) - _430) * _238) + _430) + (((_467.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _481 = fma(_453, _222, fma(_478, _214 * TANGENT.x, (_200 * _192) * _477));
    float _484 = fma(_453, _223, fma(_478, _214 * TANGENT.y, (_200 * _193) * _477));
    float _487 = fma(_453, _224, fma(_478, _214 * TANGENT.z, (_200 * _194) * _477));
    float _491 = inversesqrt(dot(vec3(_481, _484, _487), vec3(_481, _484, _487)));
    float _492 = _491 * _481;
    float _493 = _491 * _484;
    float _494 = _491 * _487;
    float _3364 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _495 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _3375 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _3386 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _3397 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _514 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _565 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _555);
    float _566 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _555);
    float _567 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _555);
    float _571 = inversesqrt(dot(vec3(_565, _566, _567), vec3(_565, _566, _567)));
    float _572 = _565 * _571;
    float _573 = _566 * _571;
    float _574 = _567 * _571;
    float _580 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _581 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _599 = fma(_494, cbSceneParam._m0[5u].z, fma(_493, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _492));
    float _602 = fma(_494, cbSceneParam._m0[6u].z, fma(_493, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _492));
    float _605 = fma(_494, cbSceneParam._m0[7u].z, fma(_493, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _492));
    uint _618 = uint(roundEven(NORMAL.w)) * 13u;
    uint _621 = (_618 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _627 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_621].x;
    float _628 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_621].y;
    float _629 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) * cbInstanceData._m0[_621].z;
    float _3408 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    vec4 _641 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _580, cbSceneParam._m0[86u].y * _581));
    float _644 = _641.x * TEXCOORD_3.w;
    float _645 = dot(vec3(_492, _493, _494), vec3(_572, _573, _574));
    float _648 = _645 * 2.0;
    float _652 = (_648 * _492) - _572;
    float _653 = (_648 * _493) - _573;
    float _654 = (_648 * _494) - _574;
    float _658 = abs(dot(vec3(_572, _573, _574), vec3(_492, _493, _494)));
    float _3441 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _660 = sqrt(_495);
    float _673 = exp2((_660 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_660 * 3.0));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1015;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _740 = fma(_713, cbModelParam._m0[26u].z, fma(_709, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _705));
        float _744 = fma(_713, cbModelParam._m0[27u].z, fma(_709, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _705));
        float _748 = fma(_713, cbModelParam._m0[28u].z, fma(_709, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _705));
        float _773 = _705 + _492;
        float _774 = _709 + _493;
        float _775 = _713 + _494;
        float _785 = fma(_775, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _773)) - _740;
        float _786 = fma(_775, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _773)) - _744;
        float _787 = fma(_775, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _773)) - _748;
        float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
        float _804 = ((_791 * _785) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_740 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _805 = ((_791 * _786) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_744 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _806 = ((_791 * _787) / cbModelParam._m0[34u].z) + ((((((_748 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        float _843 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_809.x + (-0.5));
        float _845 = _843 * (_809.y + (-0.5));
        float _846 = _843 * (_809.z + (-0.5));
        float _853 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_816.x + (-0.5));
        float _855 = _853 * (_816.y + (-0.5));
        float _856 = _853 * (_816.z + (-0.5));
        float _863 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_823.x + (-0.5));
        float _865 = _863 * (_823.y + (-0.5));
        float _866 = _863 * (_823.z + (-0.5));
        float _873 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_830.x + (-0.5));
        float _875 = _873 * (_830.y + (-0.5));
        float _876 = _873 * (_830.z + (-0.5));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = _844 * 0.5;
        float _881 = _854 * 0.5;
        float _882 = _864 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _897 = (dot(vec3(_492, _493, _494), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _907 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3489 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_909 + 1.0))) + _914) * _877;
        float _924 = _845 * 0.5;
        float _925 = _855 * 0.5;
        float _926 = _865 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_492, _493, _494), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3522 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_951 + 1.0))) + _956) * _878;
        float _966 = _846 * 0.5;
        float _967 = _856 * 0.5;
        float _968 = _866 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_492, _493, _494), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3555 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_993 + 1.0))) + _998) * _879;
        _1015 = _846;
        _1017 = _845;
        _1018 = _844;
        _1019 = _856;
        _1020 = _855;
        _1021 = _854;
        _1022 = _866;
        _1023 = _865;
        _1024 = _864;
        _1025 = _879;
        _1026 = _878;
        _1027 = _877;
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
    }
    else
    {
        _1015 = _1016;
        _1017 = _1016;
        _1018 = _1016;
        _1019 = _1016;
        _1020 = _1016;
        _1021 = _1016;
        _1022 = _1016;
        _1023 = _1016;
        _1024 = _1016;
        _1025 = _1016;
        _1026 = _1016;
        _1027 = _1016;
        _1028 = 0.0;
        _1029 = 0.0;
        _1030 = 0.0;
    }
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1056 = fma(_713, cbModelParam._m0[30u].z, fma(_709, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _705));
        float _1060 = fma(_713, cbModelParam._m0[31u].z, fma(_709, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _705));
        float _1064 = fma(_713, cbModelParam._m0[32u].z, fma(_709, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _705));
        float _1087 = _705 + _492;
        float _1088 = _709 + _493;
        float _1089 = _713 + _494;
        float _1099 = fma(_1089, cbModelParam._m0[30u].z, fma(_1088, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1087)) - _1056;
        float _1100 = fma(_1089, cbModelParam._m0[31u].z, fma(_1088, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1087)) - _1060;
        float _1101 = fma(_1089, cbModelParam._m0[32u].z, fma(_1088, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1087)) - _1064;
        float _1105 = inversesqrt(dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101)));
        float _1118 = ((_1105 * _1099) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1056 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1105 * _1100) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1060 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1105 * _1101) / cbModelParam._m0[35u].z) + ((((((_1064 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        float _1155 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1122.x + (-0.5));
        float _1157 = _1155 * (_1122.y + (-0.5));
        float _1158 = _1155 * (_1122.z + (-0.5));
        float _1165 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1129.x + (-0.5));
        float _1167 = _1165 * (_1129.y + (-0.5));
        float _1168 = _1165 * (_1129.z + (-0.5));
        float _1175 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1136.x + (-0.5));
        float _1177 = _1175 * (_1136.y + (-0.5));
        float _1178 = _1175 * (_1136.z + (-0.5));
        float _1185 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1143.x + (-0.5));
        float _1187 = _1185 * (_1143.y + (-0.5));
        float _1188 = _1185 * (_1143.z + (-0.5));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = _1156 * 0.5;
        float _1193 = _1166 * 0.5;
        float _1194 = _1176 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_492, _493, _494), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3618 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1219 + 1.0))) + _1224) * _1189;
        float _1234 = _1157 * 0.5;
        float _1235 = _1167 * 0.5;
        float _1236 = _1177 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_492, _493, _494), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3651 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1261 + 1.0))) + _1266) * _1190;
        float _1276 = _1158 * 0.5;
        float _1277 = _1168 * 0.5;
        float _1278 = _1178 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_492, _493, _494), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3684 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1303 + 1.0))) + _1308) * _1191;
        _1325 = _1158;
        _1326 = _1157;
        _1327 = _1156;
        _1328 = _1168;
        _1329 = _1167;
        _1330 = _1166;
        _1331 = _1178;
        _1332 = _1177;
        _1333 = _1176;
        _1334 = _1191;
        _1335 = _1190;
        _1336 = _1189;
        _1337 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1016;
        _1326 = _1016;
        _1327 = _1016;
        _1328 = _1016;
        _1329 = _1016;
        _1330 = _1016;
        _1331 = _1016;
        _1332 = _1016;
        _1333 = _1016;
        _1334 = _1016;
        _1335 = _1016;
        _1336 = _1016;
        _1337 = 0.0;
        _1338 = 0.0;
        _1339 = 0.0;
    }
    float _1349 = (cbModelParam._m0[1u].x * (_1337 - _1028)) + _1028;
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1029)) + _1029;
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1030)) + _1030;
    float _1372 = fma(_1351, cbSceneParam._m0[89u].z, fma(_1350, cbSceneParam._m0[89u].y, _1349 * cbSceneParam._m0[89u].x));
    float _1375 = fma(_1351, cbSceneParam._m0[90u].z, fma(_1350, cbSceneParam._m0[90u].y, _1349 * cbSceneParam._m0[90u].x));
    float _1378 = fma(_1351, cbSceneParam._m0[91u].z, fma(_1350, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1349));
    float _1393 = _652 * 0.5;
    float _1394 = _653 * 0.5;
    float _1395 = _654 * 0.5;
    float _1396 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1399 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1402 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1325, _1328, _1331, _1334));
    float _1436;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1409 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1015, _1019, _1022, _1025));
        float _1413 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1017, _1020, _1023, _1026));
        float _1417 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1018, _1021, _1024, _1027));
        float _1424 = dot(vec4(cbModelParam._m0[39u]), vec4(_1393, _1394, _1395, 1.0));
        _1436 = dot(vec3(isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1424) ? 0.0 : (isnan(0.0) ? _1424 : max(0.0, _1424))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1436 = 1.0;
    }
    float _1447;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1438 = dot(vec4(cbModelParam._m0[40u]), vec4(_1393, _1394, _1395, 1.0));
        _1447 = dot(vec3(isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1438) ? 0.0 : (isnan(0.0) ? _1438 : max(0.0, _1438))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1447 = 1.0;
    }
    float _1451 = (_1447 * cbModelParam._m0[1u].x) + (_1436 * (1.0 - cbModelParam._m0[1u].x));
    float _1461 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _495);
    float _1462 = isnan(_1461) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1461 : min(cbModelParam._m0[25u].z, _1461));
    float _1544;
    float _1546;
    float _1548;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1511 = fma(_713, cbModelParam._m0[13u].z, fma(_709, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _705)) + cbModelParam._m0[13u].w;
        float _1515 = fma(_713, cbModelParam._m0[14u].z, fma(_709, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _705)) + cbModelParam._m0[14u].w;
        float _1519 = fma(_713, cbModelParam._m0[15u].z, fma(_709, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _705)) + cbModelParam._m0[15u].w;
        float _1522 = fma(_654, cbModelParam._m0[13u].z, fma(_653, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _652));
        float _1525 = fma(_654, cbModelParam._m0[14u].z, fma(_653, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _652));
        float _1528 = fma(_654, cbModelParam._m0[15u].z, fma(_653, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _652));
        float _1556;
        if (_1522 > 0.0)
        {
            _1556 = abs((1.0 - _1511) / _1522);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1511 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1556 = frontier_phi_16_14_ladder;
        }
        float _1761;
        if (_1525 > 0.0)
        {
            _1761 = abs((1.0 - _1515) / _1525);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1515 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1761 = frontier_phi_25_21_ladder;
        }
        float _2004;
        if (_1528 > 0.0)
        {
            _2004 = abs((1.0 - _1519) / _1528);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1519 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2004 = frontier_phi_37_32_ladder;
        }
        float _2006 = isnan(_1761) ? _1556 : (isnan(_1556) ? _1761 : min(_1556, _1761));
        float _2007 = isnan(_2004) ? _2006 : (isnan(_2006) ? _2004 : min(_2006, _2004));
        float _2011 = (_2007 * _1522) + _1511;
        float _2012 = (_2007 * _1525) + _1515;
        float _2013 = (_2007 * _1528) + _1519;
        float _2014 = _2007 * 9.9999997473787516355514526367188e-05;
        float _2016 = (-1.0) - _2014;
        float _2018 = _2014 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2013 > _2018) || ((_2013 < _2016) || ((_2012 > _2018) || ((_2012 < _2016) || ((_2011 < _2016) || (_2011 > _2018))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2137 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2013, cbModelParam._m0[9u].z, fma(_2012, cbModelParam._m0[9u].y, _2011 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2013, cbModelParam._m0[10u].z, fma(_2012, cbModelParam._m0[10u].y, _2011 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2013, cbModelParam._m0[11u].z, fma(_2012, cbModelParam._m0[11u].y, _2011 * cbModelParam._m0[11u].x))), _1462);
            frontier_phi_15_37_ladder = _2137.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2137.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2137.x * cbModelParam._m0[1u].y;
        }
        _1544 = frontier_phi_15_37_ladder_2;
        _1546 = frontier_phi_15_37_ladder_1;
        _1548 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1532 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_652, _653, _654), _1462);
        _1544 = _1532.x * cbModelParam._m0[1u].y;
        _1546 = _1532.y * cbModelParam._m0[1u].y;
        _1548 = _1532.z * cbModelParam._m0[1u].y;
    }
    float _1552 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _495);
    float _1553 = isnan(_1552) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1552 : min(cbModelParam._m0[25u].w, _1552));
    float _1646;
    float _1648;
    float _1650;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1610 = fma(_713, cbModelParam._m0[21u].z, fma(_709, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _705)) + cbModelParam._m0[21u].w;
        float _1614 = fma(_713, cbModelParam._m0[22u].z, fma(_709, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _705)) + cbModelParam._m0[22u].w;
        float _1618 = fma(_713, cbModelParam._m0[23u].z, fma(_709, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _705)) + cbModelParam._m0[23u].w;
        float _1621 = fma(_654, cbModelParam._m0[21u].z, fma(_653, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _652));
        float _1624 = fma(_654, cbModelParam._m0[22u].z, fma(_653, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _652));
        float _1627 = fma(_654, cbModelParam._m0[23u].z, fma(_653, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _652));
        float _1766;
        if (_1621 > 0.0)
        {
            _1766 = abs((1.0 - _1610) / _1621);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1610 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1766 = frontier_phi_27_23_ladder;
        }
        float _2031;
        if (_1624 > 0.0)
        {
            _2031 = abs((1.0 - _1614) / _1624);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1614 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2031 = frontier_phi_39_34_ladder;
        }
        float _2236;
        if (_1627 > 0.0)
        {
            _2236 = abs((1.0 - _1618) / _1627);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1618 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2236 = frontier_phi_48_45_ladder;
        }
        float _2238 = isnan(_2031) ? _1766 : (isnan(_1766) ? _2031 : min(_1766, _2031));
        float _2239 = isnan(_2236) ? _2238 : (isnan(_2238) ? _2236 : min(_2238, _2236));
        float _2243 = (_2239 * _1621) + _1610;
        float _2244 = (_2239 * _1624) + _1614;
        float _2245 = (_2239 * _1627) + _1618;
        float _2246 = _2239 * 9.9999997473787516355514526367188e-05;
        float _2247 = (-1.0) - _2246;
        float _2249 = _2246 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2245 > _2249) || ((_2245 < _2247) || ((_2244 > _2249) || ((_2244 < _2247) || ((_2243 < _2247) || (_2243 > _2249))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2245, cbModelParam._m0[17u].z, fma(_2244, cbModelParam._m0[17u].y, _2243 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2245, cbModelParam._m0[18u].z, fma(_2244, cbModelParam._m0[18u].y, _2243 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2245, cbModelParam._m0[19u].z, fma(_2244, cbModelParam._m0[19u].y, _2243 * cbModelParam._m0[19u].x))), _1553);
            frontier_phi_24_48_ladder = _2443.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2443.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2443.x * cbModelParam._m0[1u].z;
        }
        _1646 = frontier_phi_24_48_ladder_2;
        _1648 = frontier_phi_24_48_ladder_1;
        _1650 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1630 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_652, _653, _654), _1553);
        _1646 = _1630.x * cbModelParam._m0[1u].z;
        _1648 = _1630.y * cbModelParam._m0[1u].z;
        _1650 = _1630.z * cbModelParam._m0[1u].z;
    }
    float _1662 = ((((1.0 - _673) * ((_660 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_673 * _660)) * _644;
    float _1663 = _1662 * ((cbModelParam._m0[1u].w * (_1646 - _1544)) + _1544);
    float _1664 = _1662 * ((cbModelParam._m0[1u].w * (_1648 - _1546)) + _1546);
    float _1665 = _1662 * ((cbModelParam._m0[1u].w * (_1650 - _1548)) + _1548);
    float _1668 = fma(_1665, cbSceneParam._m0[89u].z, fma(_1664, cbSceneParam._m0[89u].y, _1663 * cbSceneParam._m0[89u].x));
    float _1671 = fma(_1665, cbSceneParam._m0[90u].z, fma(_1664, cbSceneParam._m0[90u].y, _1663 * cbSceneParam._m0[90u].x));
    float _1674 = fma(_1665, cbSceneParam._m0[91u].z, fma(_1664, cbSceneParam._m0[91u].y, _1663 * cbSceneParam._m0[91u].x));
    uvec4 _1684 = floatBitsToUint(cbInstanceData._m0[_618 + 5u]);
    uint _1686 = _1684.x * 14u;
    uint _1687 = _1686 + 13u;
    float _1694 = _644 + (-1.0);
    float _1699 = (cbLight._m0[_1687].x * _1694) + 1.0;
    float _1700 = (cbLight._m0[_1687].y * _1694) + 1.0;
    float _1701 = (cbLight._m0[_1687].z * _1694) + 1.0;
    float _1702 = (cbLight._m0[_1687].w * _1694) + 1.0;
    uint _1703 = _1686 + 5u;
    float _1709 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
    uint _1713 = _1686 + 4u;
    float _1719 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
    uint _1723 = _1686 | 1u;
    float _1734 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_492, _493, _494));
    float _1737 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_492, _493, _494));
    float _3820 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _3831 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1742 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1744 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.3183098733425140380859375;
    float _1751 = ((cbLight._m0[_1703].x * _1709) * _1744) + ((cbLight._m0[_1713].x * _1719) * _1742);
    float _1752 = ((_1709 * cbLight._m0[_1703].y) * _1744) + ((_1719 * cbLight._m0[_1713].y) * _1742);
    float _1753 = ((_1709 * cbLight._m0[_1703].z) * _1744) + ((_1719 * cbLight._m0[_1713].z) * _1742);
    uvec4 _1758 = floatBitsToUint(cbLight._m0[_1686 + 12u]);
    bool _1760 = _1758.x == 0u;
    float _1771;
    float _1773;
    float _1775;
    if (_1760)
    {
        _1771 = _1751;
        _1773 = _1752;
        _1775 = _1753;
    }
    else
    {
        uint _1779 = _1686 + 6u;
        float _1795 = (dot(vec3(cbLight._m0[_1686 + 2u].xyz), vec3(_492, _493, _494)) * 0.5) + 0.5;
        float _1796 = _1795 * _1795;
        float _3842 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1798 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _1771 = (((cbLight._m0[_1779].x * 0.3183098733425140380859375) * _1797) * _1798) + _1751;
        _1773 = (((cbLight._m0[_1779].y * 0.3183098733425140380859375) * _1797) * _1798) + _1752;
        _1775 = (((cbLight._m0[_1779].z * 0.3183098733425140380859375) * _1797) * _1798) + _1753;
    }
    bool _1778 = _1758.y == 0u;
    float _1816;
    float _1818;
    float _1820;
    if (_1778)
    {
        _1816 = _1771;
        _1818 = _1773;
        _1820 = _1775;
    }
    else
    {
        uint _1975 = _1686 + 7u;
        float _1991 = (dot(vec3(cbLight._m0[_1686 + 3u].xyz), vec3(_492, _493, _494)) * 0.5) + 0.5;
        float _1992 = _1991 * _1991;
        float _3858 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1993 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1994 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _1816 = (((cbLight._m0[_1975].x * 0.3183098733425140380859375) * _1993) * _1994) + _1771;
        _1818 = (((cbLight._m0[_1975].y * 0.3183098733425140380859375) * _1993) * _1994) + _1773;
        _1820 = (((cbLight._m0[_1975].z * 0.3183098733425140380859375) * _1993) * _1994) + _1775;
    }
    uint _1823 = _1686 + 8u;
    float _1836 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1686].w)) * _495) * 0.949999988079071044921875);
    float _1837 = _1836 * _1836;
    float _1838 = cbLight._m0[_1686].x + _572;
    float _1839 = cbLight._m0[_1686].y + _573;
    float _1840 = cbLight._m0[_1686].z + _574;
    float _1844 = inversesqrt(dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840)));
    float _1845 = _1844 * _1838;
    float _1846 = _1844 * _1839;
    float _1847 = _1844 * _1840;
    float _1848 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_1686].xyz));
    float _3874 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _1852 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1853 = dot(vec3(_492, _493, _494), vec3(_1845, _1846, _1847));
    float _3896 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1857 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_1845, _1846, _1847));
    float _3907 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1861 = _1837 * _1837;
    float _1865 = ((_1856 * _1856) * (_1861 + (-1.0))) + 1.0;
    float _1876 = (exp2(log2(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1877 = 1.0 - _1837;
    float _1888 = (0.5 / (((_1852 * ((_1851 * _1877) + _1837)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _1877) + _1837) * _1851))) * _1851;
    float _3918 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1890 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1861 / ((_1865 * _1865) * 3.141590118408203125));
    uint _1901 = _1686 + 9u;
    float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1723].w)) * _495) * 0.949999988079071044921875);
    float _1913 = _1912 * _1912;
    float _1914 = cbLight._m0[_1723].x + _572;
    float _1915 = cbLight._m0[_1723].y + _573;
    float _1916 = cbLight._m0[_1723].z + _574;
    float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
    float _1921 = _1920 * _1914;
    float _1922 = _1920 * _1915;
    float _1923 = _1920 * _1916;
    float _1924 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_1723].xyz));
    float _3929 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1928 = dot(vec3(_492, _493, _494), vec3(_1921, _1922, _1923));
    float _3940 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1932 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_1921, _1922, _1923));
    float _3951 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1936 = _1913 * _1913;
    float _1940 = ((_1931 * _1931) * (_1936 + (-1.0))) + 1.0;
    float _1949 = (exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1950 = 1.0 - _1913;
    float _1960 = (0.5 / (((_1852 * ((_1927 * _1950) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _1950) + _1913) * _1927))) * _1927;
    float _3962 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1962 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1936 / ((_1940 * _1940) * 3.141590118408203125));
    float _1972 = (((_1949 * cbLight._m0[_1901].x) * _1962) * _1709) + (((_1876 * cbLight._m0[_1823].x) * _1890) * _1719);
    float _1973 = (((_1949 * cbLight._m0[_1901].y) * _1962) * _1709) + (((_1876 * cbLight._m0[_1823].y) * _1890) * _1719);
    float _1974 = (((_1949 * cbLight._m0[_1901].z) * _1962) * _1709) + (((_1876 * cbLight._m0[_1823].z) * _1890) * _1719);
    float _2036;
    float _2038;
    float _2040;
    if (_1760)
    {
        _2036 = _1972;
        _2038 = _1973;
        _2040 = _1974;
    }
    else
    {
        uint _2042 = _1686 + 2u;
        uint _2046 = _1686 + 10u;
        float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _495) * 0.949999988079071044921875);
        float _2061 = _2060 * _2060;
        float _2062 = cbLight._m0[_2042].x + _572;
        float _2063 = cbLight._m0[_2042].y + _573;
        float _2064 = cbLight._m0[_2042].z + _574;
        float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
        float _2069 = _2068 * _2062;
        float _2070 = _2068 * _2063;
        float _2071 = _2068 * _2064;
        float _2072 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_2042].xyz));
        float _3973 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2075 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _2076 = dot(vec3(_492, _493, _494), vec3(_2069, _2070, _2071));
        float _3984 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2079 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _2080 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2069, _2070, _2071));
        float _3995 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2084 = _2061 * _2061;
        float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
        float _2097 = (exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2098 = 1.0 - _2061;
        float _2108 = (0.5 / (((_1852 * ((_2075 * _2098) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _2098) + _2061) * _2075))) * _2075;
        float _4006 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2110 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
        float _2111 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _2036 = (((_2097 * cbLight._m0[_2046].x) * _2110) * _2111) + _1972;
        _2038 = (((_2097 * cbLight._m0[_2046].y) * _2110) * _2111) + _1973;
        _2040 = (((_2097 * cbLight._m0[_2046].z) * _2110) * _2111) + _1974;
    }
    float _2146;
    float _2148;
    float _2150;
    if (_1778)
    {
        _2146 = _2036;
        _2148 = _2038;
        _2150 = _2040;
    }
    else
    {
        uint _2157 = _1686 + 3u;
        uint _2161 = _1686 + 11u;
        float _2175 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _495) * 0.949999988079071044921875);
        float _2176 = _2175 * _2175;
        float _2177 = cbLight._m0[_2157].x + _572;
        float _2178 = cbLight._m0[_2157].y + _573;
        float _2179 = cbLight._m0[_2157].z + _574;
        float _2183 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
        float _2184 = _2183 * _2177;
        float _2185 = _2183 * _2178;
        float _2186 = _2183 * _2179;
        float _2187 = dot(vec3(_492, _493, _494), vec3(cbLight._m0[_2157].xyz));
        float _4022 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2190 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2191 = dot(vec3(_492, _493, _494), vec3(_2184, _2185, _2186));
        float _4033 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2194 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2195 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2184, _2185, _2186));
        float _4044 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2199 = _2176 * _2176;
        float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
        float _2212 = (exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2213 = 1.0 - _2176;
        float _2223 = (0.5 / (((_1852 * ((_2190 * _2213) + _2176)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _2213) + _2176) * _2190))) * _2190;
        float _4055 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2225 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
        float _2226 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _2146 = (((_2212 * cbLight._m0[_2161].x) * _2225) * _2226) + _2036;
        _2148 = (((_2212 * cbLight._m0[_2161].y) * _2225) * _2226) + _2038;
        _2150 = (((_2212 * cbLight._m0[_2161].z) * _2225) * _2226) + _2040;
    }
    float _2360;
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    float _2370;
    if (_1684.y == 0u)
    {
        float _2301 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2301;
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2301;
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2301;
        uvec4 _2316 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2317 = _2316.x;
        uint _2328 = uint((float(_2316.y) * floor(float(uint(cbSceneParam._m0[85u].y * _581) / _2317))) + floor(float(uint(cbSceneParam._m0[85u].x * _580) / _2317)));
        float _2338 = (log2(_2304 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2339 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        uint _2342 = uint(isnan(14.0) ? _2339 : (isnan(_2339) ? 14.0 : min(_2339, 14.0)));
        uvec4 _2347 = texelFetch(g_lightClusterGridBuffer, int(((_2342 << 2u) + (_2328 << 6u)) >> 2u));
        uint _2348 = _2347.x;
        uint _2349 = _2316.z;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        if (((((1u << ((_2349 >> 4u) & 15u)) + 4294967295u) & _2348) == 0u) || ((_2349 & 240u) == 0u))
        {
            _2448 = 0.0;
            _2450 = 0.0;
            _2452 = 0.0;
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
        }
        else
        {
            float _2449;
            float _2451;
            float _2453;
            float _2455;
            float _2457;
            float _2459;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            uint _2598 = 0u;
            uint _2607;
            bool _2608;
            for (;;)
            {
                _2607 = texelFetch(g_lightClassification, int((((_2342 << 5u) + (_2328 << 9u)) + (_2598 << 2u)) >> 2u)).x;
                _2608 = _2607 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2608)
                {
                    frontier_phi_63_pred = _2597;
                    frontier_phi_63_pred_1 = _2596;
                    frontier_phi_63_pred_2 = _2595;
                    frontier_phi_63_pred_3 = _2594;
                    frontier_phi_63_pred_4 = _2593;
                    frontier_phi_63_pred_5 = _2592;
                }
                else
                {
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    uint _2722;
                    _2716 = _2592;
                    _2717 = _2593;
                    _2718 = _2594;
                    _2719 = _2595;
                    _2720 = _2596;
                    _2721 = _2597;
                    _2722 = _2607;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    for (;;)
                    {
                        uint _2726 = uint(findLSB(_2722)) + (_2598 << 5u);
                        uint _2723 = (_2722 + 4294967295u) & _2722;
                        uint _2728 = _2726 * 48u;
                        vec4 _2742 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 3u)).x));
                        uint _2748 = (_2726 * 48u) + 4u;
                        vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 3u)).x));
                        uint _2767 = (_2726 * 48u) + 8u;
                        vec3 _2778 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x));
                        float _2782 = _2742.x - _2302;
                        float _2783 = _2742.y - _2303;
                        float _2784 = _2742.z - _2304;
                        float _2785 = dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784));
                        float _2788 = inversesqrt(_2785);
                        float _2789 = _2788 * _2782;
                        float _2790 = _2788 * _2783;
                        float _2791 = _2788 * _2784;
                        float _2792 = dot(vec3(_599, _602, _605), vec3(_2789, _2790, _2791));
                        float _2797 = 1.0 - (_2785 * _2742.w);
                        float _4081 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2798 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2799 = sqrt(_2785) * _2761.w;
                        float _2802 = 1.39999997615814208984375 / (_2799 + 1.39999997615814208984375);
                        float _2803 = _2802 * _2802;
                        float _2806 = ((1.0 - _2803) * _2792) + _2803;
                        float _2809 = _2799 * _2799;
                        float _2813 = ((isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))) * _2798) / ((_2809 * 0.699999988079071044921875) + 1.0);
                        float _2817 = (-0.0) - _2302;
                        float _2818 = (-0.0) - _2303;
                        float _2819 = (-0.0) - _2304;
                        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
                        float _2824 = _2823 * _2817;
                        float _2825 = _2823 * _2818;
                        float _2826 = _2823 * _2819;
                        float _2834 = exp2(log2(1.0 / ((_2809 * 3.5) + 5.0)) * 0.25);
                        float _2835 = 1.0 - _660;
                        float _2842 = sqrt(1.0 - ((1.0 - (_2835 * _2835)) * (1.0 - (_2834 * _2834))));
                        float _2843 = _2842 * _2842;
                        float _2844 = _2843 * _2843;
                        float _2845 = _2824 + _2789;
                        float _2846 = _2825 + _2790;
                        float _2847 = _2826 + _2791;
                        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
                        float _2855 = dot(vec3(_599, _602, _605), vec3(_2824, _2825, _2826));
                        float _4097 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2858 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2859 = dot(vec3(_599, _602, _605), vec3(_2851 * _2845, _2851 * _2846, _2851 * _2847));
                        float _4108 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2862 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2866 = ((_2862 * _2862) * (_2844 + (-1.0))) + 1.0;
                        float _2867 = _2802 * _2843;
                        float _2868 = _2867 * _2867;
                        float _2871 = ((1.0 - _2868) * _2792) + _2868;
                        float _4119 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2872 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2873 = 1.0 - _2843;
                        float _2883 = (0.5 / (((_2872 * ((_2858 * _2873) + _2843)) + 9.9999999392252902907785028219223e-09) + (((_2872 * _2873) + _2843) * _2858))) * _2872;
                        float _4130 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2894 = (((_2844 * 3.1415927410125732421875) * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) / ((_2866 * _2866) * ((_2809 * 2.1991131305694580078125) + 3.141590118408203125))) * _2798;
                        _2651 = (_2813 * _2761.x) + _2719;
                        _2652 = (_2813 * _2761.y) + _2720;
                        _2653 = (_2813 * _2761.z) + _2721;
                        _2648 = (_2894 * _2778.x) + _2716;
                        _2649 = (_2894 * _2778.y) + _2717;
                        _2650 = (_2894 * _2778.z) + _2718;
                        if (_2723 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2716 = _2648;
                            _2717 = _2649;
                            _2718 = _2650;
                            _2719 = _2651;
                            _2720 = _2652;
                            _2721 = _2653;
                            _2722 = _2723;
                        }
                    }
                    frontier_phi_63_pred = _2653;
                    frontier_phi_63_pred_1 = _2652;
                    frontier_phi_63_pred_2 = _2651;
                    frontier_phi_63_pred_3 = _2650;
                    frontier_phi_63_pred_4 = _2649;
                    frontier_phi_63_pred_5 = _2648;
                }
                _2459 = frontier_phi_63_pred;
                _2457 = frontier_phi_63_pred_1;
                _2455 = frontier_phi_63_pred_2;
                _2453 = frontier_phi_63_pred_3;
                _2451 = frontier_phi_63_pred_4;
                _2449 = frontier_phi_63_pred_5;
                uint _2599 = _2598 + 1u;
                if (_2599 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2592 = _2449;
                    _2593 = _2451;
                    _2594 = _2453;
                    _2595 = _2455;
                    _2596 = _2457;
                    _2597 = _2459;
                    _2598 = _2599;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2448 = _2449;
            _2450 = _2451;
            _2452 = _2453;
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
        }
        uvec4 _2462 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2463 = _2462.z;
        uint _2465 = (_2463 >> 8u) & 15u;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        if (((4294967295u << _2465) & _2348) == 0u)
        {
            _2560 = _2448;
            _2562 = _2450;
            _2564 = _2452;
            _2566 = _2454;
            _2568 = _2456;
            _2570 = _2458;
        }
        else
        {
            float _2585 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
            float _2586 = _2585 * _2302;
            float _2587 = _2585 * _2303;
            float _2588 = _2585 * _2304;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2465 < ((_2463 >> 12u) & 15u))
            {
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2699 = _2448;
                float _2700 = _2450;
                float _2701 = _2452;
                float _2702 = _2454;
                float _2703 = _2456;
                float _2704 = _2458;
                uint _2705 = _2465;
                uint _2714;
                bool _2715;
                for (;;)
                {
                    _2714 = texelFetch(g_lightClassification, int((((_2342 << 5u) + (_2328 << 9u)) + (_2705 << 2u)) >> 2u)).x;
                    _2715 = _2714 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2715)
                    {
                        frontier_phi_69_pred = _2704;
                        frontier_phi_69_pred_1 = _2703;
                        frontier_phi_69_pred_2 = _2702;
                        frontier_phi_69_pred_3 = _2701;
                        frontier_phi_69_pred_4 = _2700;
                        frontier_phi_69_pred_5 = _2699;
                    }
                    else
                    {
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _2912 = _2699;
                        float _2913 = _2700;
                        float _2914 = _2701;
                        float _2915 = _2702;
                        float _2916 = _2703;
                        float _2917 = _2704;
                        uint _2918 = _2714;
                        uint _2919;
                        vec4 _2944;
                        float _2945;
                        vec4 _2960;
                        vec3 _2972;
                        vec4 _2988;
                        vec4 _3004;
                        float _3051;
                        bool _3052;
                        for (;;)
                        {
                            uint _2929 = ((_2705 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2918));
                            _2919 = (_2918 + 4294967295u) & _2918;
                            uint _2931 = _2929 * 40u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            _2945 = _2944.w;
                            uint _2947 = (_2929 * 40u) + 4u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2962 = (_2929 * 40u) + 8u;
                            _2972 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x));
                            uint _2975 = (_2929 * 40u) + 16u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2991 = (_2929 * 40u) + 20u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3007 = (_2929 * 40u) + 24u;
                            vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3026 = (_2929 * 40u) + 28u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3051 = fma(_2304, _3039.z, fma(_2303, _3039.y, _3039.x * _2302)) + _3039.w;
                            _3052 = !((fma(_2304, _3020.z, fma(_2303, _3020.y, _3020.x * _2302)) + _3020.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3052)
                            {
                                float _3079 = _2944.x - _2302;
                                float _3080 = _2944.y - _2303;
                                float _3081 = _2944.z - _2304;
                                float _3082 = dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081));
                                float _3085 = inversesqrt(_3082);
                                float _3086 = _3085 * _3079;
                                float _3087 = _3085 * _3080;
                                float _3088 = _3085 * _3081;
                                float _3092 = 1.0 - (_3082 / (_2945 * _2945));
                                float _4141 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3097 = sqrt(_3082) * _2960.w;
                                float _3099 = 1.39999997615814208984375 / (_3097 + 1.39999997615814208984375);
                                float _3100 = _3099 * _3099;
                                float _3103 = ((1.0 - _3100) * dot(vec3(_3086, _3087, _3088), vec3(_599, _602, _605))) + _3100;
                                float _3106 = _3097 * _3097;
                                float _3110 = (fma(_2304, _2988.z, fma(_2303, _2988.y, _2988.x * _2302)) + _2988.w) / _3051;
                                float _3111 = (fma(_2304, _3004.z, fma(_2303, _3004.y, _3004.x * _2302)) + _3004.w) / _3051;
                                float _3115 = 1.0 - dot(vec2(_3110, _3111), vec2(_3110, _3111));
                                float _4157 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3117 = _3116 * (((isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))) * _3093) / ((_3106 * 0.699999988079071044921875) + 1.0));
                                float _3129 = exp2(log2(1.0 / ((_3106 * 3.5) + 5.0)) * 0.25);
                                float _3130 = 1.0 - _660;
                                float _3137 = sqrt(1.0 - ((1.0 - (_3130 * _3130)) * (1.0 - (_3129 * _3129))));
                                float _3138 = _3137 * _3137;
                                float _3139 = _3138 * _3138;
                                float _3140 = _3086 - _2586;
                                float _3141 = _3087 - _2587;
                                float _3142 = _3088 - _2588;
                                float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                                float _3150 = dot(vec3(_599, _602, _605), vec3((-0.0) - _2586, (-0.0) - _2587, (-0.0) - _2588));
                                float _4168 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3153 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3154 = dot(vec3(_599, _602, _605), vec3(_3146 * _3140, _3146 * _3141, _3146 * _3142));
                                float _4179 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3157 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3161 = ((_3157 * _3157) * (_3139 + (-1.0))) + 1.0;
                                float _3162 = _3099 * _3138;
                                float _3163 = _3162 * _3162;
                                float _3169 = ((1.0 - _3163) * dot(vec3(_599, _602, _605), vec3(_3086, _3087, _3088))) + _3163;
                                float _4190 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3171 = 1.0 - _3138;
                                float _3181 = (0.5 / (((_3170 * ((_3153 * _3171) + _3138)) + 9.9999999392252902907785028219223e-09) + (((_3170 * _3171) + _3138) * _3153))) * _3170;
                                float _4201 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3191 = (_3116 * _3093) * (((_3139 * 3.1415927410125732421875) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) / ((_3161 * _3161) * ((_3106 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3117 * _2960.z;
                                frontier_phi_75_pred_1 = _3117 * _2960.y;
                                frontier_phi_75_pred_2 = _3117 * _2960.x;
                                frontier_phi_75_pred_3 = _3191 * _2972.z;
                                frontier_phi_75_pred_4 = _3191 * _2972.y;
                                frontier_phi_75_pred_5 = _3191 * _2972.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3200 = frontier_phi_75_pred;
                            _3199 = frontier_phi_75_pred_1;
                            _3198 = frontier_phi_75_pred_2;
                            _3197 = frontier_phi_75_pred_3;
                            _3196 = frontier_phi_75_pred_4;
                            _3195 = frontier_phi_75_pred_5;
                            _2902 = _3198 + _2915;
                            _2903 = _3199 + _2916;
                            _2904 = _3200 + _2917;
                            _2899 = _3195 + _2912;
                            _2900 = _3196 + _2913;
                            _2901 = _3197 + _2914;
                            if (_2919 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2919;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2904;
                        frontier_phi_69_pred_1 = _2903;
                        frontier_phi_69_pred_2 = _2902;
                        frontier_phi_69_pred_3 = _2901;
                        frontier_phi_69_pred_4 = _2900;
                        frontier_phi_69_pred_5 = _2899;
                    }
                    _2571 = frontier_phi_69_pred;
                    _2569 = frontier_phi_69_pred_1;
                    _2567 = frontier_phi_69_pred_2;
                    _2565 = frontier_phi_69_pred_3;
                    _2563 = frontier_phi_69_pred_4;
                    _2561 = frontier_phi_69_pred_5;
                    uint _2706 = _2705 + 1u;
                    if (_2706 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2699 = _2561;
                        _2700 = _2563;
                        _2701 = _2565;
                        _2702 = _2567;
                        _2703 = _2569;
                        _2704 = _2571;
                        _2705 = _2706;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2571;
                frontier_phi_57_58_ladder_1 = _2569;
                frontier_phi_57_58_ladder_2 = _2567;
                frontier_phi_57_58_ladder_3 = _2565;
                frontier_phi_57_58_ladder_4 = _2563;
                frontier_phi_57_58_ladder_5 = _2561;
            }
            else
            {
                frontier_phi_57_58_ladder = _2458;
                frontier_phi_57_58_ladder_1 = _2456;
                frontier_phi_57_58_ladder_2 = _2454;
                frontier_phi_57_58_ladder_3 = _2452;
                frontier_phi_57_58_ladder_4 = _2450;
                frontier_phi_57_58_ladder_5 = _2448;
            }
            _2560 = frontier_phi_57_58_ladder_5;
            _2562 = frontier_phi_57_58_ladder_4;
            _2564 = frontier_phi_57_58_ladder_3;
            _2566 = frontier_phi_57_58_ladder_2;
            _2568 = frontier_phi_57_58_ladder_1;
            _2570 = frontier_phi_57_58_ladder;
        }
        float _2575 = isnan(1.0) ? _644 : (isnan(_644) ? 1.0 : min(_644, 1.0));
        _2360 = (_2575 * _2566) + _1816;
        _2362 = (_2575 * _2568) + _1818;
        _2364 = (_2575 * _2570) + _1820;
        _2366 = ((_2560 * 0.039999999105930328369140625) * _2575) + _2146;
        _2368 = ((_2562 * 0.039999999105930328369140625) * _2575) + _2148;
        _2370 = ((_2564 * 0.039999999105930328369140625) * _2575) + _2150;
    }
    else
    {
        _2360 = _1816;
        _2362 = _1818;
        _2364 = _1820;
        _2366 = _2146;
        _2368 = _2148;
        _2370 = _2150;
    }
    float _4217 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4228 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4239 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    uint _2390 = _618 + 6u;
    float _2398 = _580 / cbSceneParam._m0[86u].x;
    float _2399 = _581 / cbSceneParam._m0[86u].y;
    vec4 _2413 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2398, _2399, (log2((isnan(cbSceneParam._m0[77u].w) ? _514 : (isnan(_514) ? cbSceneParam._m0[77u].w : min(_514, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2415 = _2413.x;
    float _2416 = _2413.y;
    float _2417 = _2413.z;
    float _2418 = _2413.w;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    if (_514 > cbSceneParam._m0[78u].w)
    {
        float _2473 = isnan(_514) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _514 : min(cbSceneParam._m0[80u].w, _514));
        float _2474 = _2473 / _514;
        float _2485 = _2474 * _565;
        float _2486 = _566 * _2474;
        float _2487 = (-0.0) - _2486;
        float _2488 = _2474 * _567;
        float _2490 = (cbSceneParam._m0[77u].w * _2487) / _2473;
        float _2491 = _2490 + cbSceneParam._m0[79u].w;
        float _2492 = cbSceneParam._m0[79u].w - _2486;
        float _2498 = sqrt(((_2485 * _2485) + (_2486 * _2486)) + (_2488 * _2488));
        float _2501 = (1.0 - (cbSceneParam._m0[77u].w / _2473)) * _2498;
        float _2506 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2508 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2661;
        if (abs((_2487 - _2490) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2661 = ((((_2491 > 0.0) ? exp2(_2506 * _2491) : (2.0 - exp2(_2508 * _2491))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2501;
        }
        else
        {
            float _2621 = 1.0 / cbSceneParam._m0[80u].x;
            float _2622 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : max(_2491, _2492));
            float _2623 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : min(_2491, _2492));
            float _2632 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : min(_2622, 0.0));
            float _2633 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : min(_2623, 0.0));
            _2661 = ((abs(_2498 / _2487) * cbSceneParam._m0[80u].y) * ((((_2632 - _2633) * 2.0) - ((exp2(_2506 * (isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0)))) - exp2(_2506 * (isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0))))) * _2621)) - ((exp2(_2508 * _2632) - exp2(_2508 * _2633)) * _2621))) + (_2501 * cbSceneParam._m0[80u].z);
        }
        vec4 _2663 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2398, _2399, 1.0), 0.0);
        float _2672 = exp2((_2661 * (-1.44269502162933349609375)) * (1.0 - _2663.w));
        float _2673 = log2(_2672);
        float _2689 = log2(_2418);
        _2510 = (exp2(_2689 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].x)) * _2663.x) / cbSceneParam._m0[78u].x)) + _2415;
        _2512 = (exp2(_2689 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].y)) * _2663.y) / cbSceneParam._m0[78u].y)) + _2416;
        _2514 = (exp2(_2689 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].z)) * _2663.z) / cbSceneParam._m0[78u].z)) + _2417;
        _2516 = _2672 * _2418;
    }
    else
    {
        _2510 = _2415;
        _2512 = _2416;
        _2514 = _2417;
        _2516 = _2418;
    }
    float _2528 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2529 = _2528 == 3.0;
    float _2530 = log2(_2516);
    float _2537 = exp2(_2530 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2360 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _644))) + ((_2366 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1451)) * cbPerFrame._m0[3u].x));
    float _2538 = exp2(_2530 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2362 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _644))) + ((_2368 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1451)) * cbPerFrame._m0[3u].x));
    float _2539 = exp2(_2530 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2364 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _644))) + ((_2370 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1451)) * cbPerFrame._m0[3u].x));
    float _2548 = (_2528 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2548 * (_2529 ? _2537 : (_2537 + (cbSceneParam._m0[72u].w * _2510)));
    SV_Target.y = _2548 * (_2529 ? _2538 : (_2538 + (cbSceneParam._m0[72u].w * _2512)));
    SV_Target.z = _2548 * (_2529 ? _2539 : (_2539 + (cbSceneParam._m0[72u].w * _2514)));
    SV_Target.w = cbInstanceData._m0[_2390].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2390].w;
}


