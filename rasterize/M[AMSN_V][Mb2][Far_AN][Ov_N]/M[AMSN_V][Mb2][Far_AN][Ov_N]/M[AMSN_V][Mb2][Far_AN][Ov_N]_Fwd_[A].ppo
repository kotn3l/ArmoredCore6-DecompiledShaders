#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_7;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1061;
float _3430;
float _3431;
float _3432;
float _3433;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    float _241 = (POSITION_1.w - cbMtdParam._m0[9u].y) * (1.0 / cbMtdParam._m0[10u].x);
    float _3442 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _242 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    vec4 _255 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _258 = _255.x;
    float _259 = _255.y;
    float _260 = _255.z;
    vec4 _272 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _283 = ((_272.x - _258) * _242) + _258;
    float _284 = ((_272.y - _259) * _242) + _259;
    float _285 = ((_272.z - _260) * _242) + _260;
    vec4 _297 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _314 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _316 = _314.x;
    float _317 = _314.y;
    float _318 = _314.z;
    float _350 = ((cbMtdParam._m0[9u].x * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3453 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _361 = (_351 * ((_316 - _283) + ((_297.x - _316) * _242))) + _283;
    float _362 = (_351 * ((_317 - _284) + ((_297.y - _317) * _242))) + _284;
    float _363 = (_351 * ((_318 - _285) + ((_297.z - _318) * _242))) + _285;
    vec4 _376 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _378 = _376.x;
    float _379 = _376.y;
    float _380 = _376.z;
    vec4 _393 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _404 = ((_393.x - _378) * _242) + _378;
    float _405 = ((_393.y - _379) * _242) + _379;
    float _406 = ((_393.z - _380) * _242) + _380;
    vec4 _418 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _433 = ((((_418.x - _404) * _351) + _404) * 2.0) + (-1.0);
    float _434 = ((((_418.y - _405) * _351) + _405) * 2.0) + (-1.0);
    float _435 = dot(vec2(_433, _434), vec2(_433, _434));
    float _3464 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _440 = sqrt(1.0 - (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))));
    float _442 = (_406 + cbMtdParam._m0[9u].w) + ((_418.z - _406) * _351);
    float _457 = (((cbMtdParam._m0[10u].w * _440) - _440) * _242) + _440;
    vec4 _471 = texture(sampler2D(M_AMSN_V_Mb2_Far_AN_Ov_N_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _481 = ((((_433 * cbMtdParam._m0[10u].y) - _433) * _242) + _433) + (((_471.x * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _482 = ((((_434 * cbMtdParam._m0[10u].z) - _434) * _242) + _434) + (((_471.y * 2.0) + (-1.0)) * cbMtdParam._m0[9u].z);
    float _485 = fma(_457, _226, fma(_482, _218 * TANGENT.x, (_204 * _196) * _481));
    float _488 = fma(_457, _227, fma(_482, _218 * TANGENT.y, (_204 * _197) * _481));
    float _491 = fma(_457, _228, fma(_482, _218 * TANGENT.z, (_204 * _198) * _481));
    float _495 = inversesqrt(dot(vec3(_485, _488, _491), vec3(_485, _488, _491)));
    float _496 = _495 * _485;
    float _497 = _495 * _488;
    float _498 = _495 * _491;
    float _3475 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _499 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _3486 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3497 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3508 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _518 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _569 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _559);
    float _570 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _559);
    float _571 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _559);
    float _575 = inversesqrt(dot(vec3(_569, _570, _571), vec3(_569, _570, _571)));
    float _576 = _569 * _575;
    float _577 = _570 * _575;
    float _578 = _571 * _575;
    vec4 _583 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _585 = _583.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _740 = sqrt(((_569 * _569) + (_570 * _570)) + (_571 * _571));
        float _746 = (cbMatDynParam._m0[5u].x * _740) + cbMatDynParam._m0[5u].y;
        float _3519 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _751 = (cbMatDynParam._m0[5u].z * _740) + cbMatDynParam._m0[5u].w;
        float _3530 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) - _747)) + _747) < ((_585 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _596 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _597 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _615 = fma(_498, cbSceneParam._m0[5u].z, fma(_497, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _496));
    float _618 = fma(_498, cbSceneParam._m0[6u].z, fma(_497, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _496));
    float _621 = fma(_498, cbSceneParam._m0[7u].z, fma(_497, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _496));
    uint _634 = uint(roundEven(NORMAL.w)) * 13u;
    uint _636 = _634 + 9u;
    uint _637 = _636 + uint(cbMatDynParam._m0[0u].w);
    float _643 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * cbInstanceData._m0[_637].x;
    float _644 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * cbInstanceData._m0[_637].y;
    float _645 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * cbInstanceData._m0[_637].z;
    float _3541 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    vec4 _657 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _596, cbSceneParam._m0[86u].y * _597));
    float _660 = _657.x * TEXCOORD_3.w;
    float _661 = dot(vec3(_496, _497, _498), vec3(_576, _577, _578));
    float _664 = _661 * 2.0;
    float _668 = (_664 * _496) - _576;
    float _669 = (_664 * _497) - _577;
    float _670 = (_664 * _498) - _578;
    float _674 = abs(dot(vec3(_576, _577, _578), vec3(_496, _497, _498)));
    float _3574 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _676 = sqrt(_499);
    float _689 = exp2((_676 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_676 * 3.0));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1060;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _785 = fma(_729, cbModelParam._m0[26u].z, fma(_725, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _721));
        float _789 = fma(_729, cbModelParam._m0[27u].z, fma(_725, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _721));
        float _793 = fma(_729, cbModelParam._m0[28u].z, fma(_725, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _721));
        float _818 = _721 + _496;
        float _819 = _725 + _497;
        float _820 = _729 + _498;
        float _830 = fma(_820, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818)) - _785;
        float _831 = fma(_820, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818)) - _789;
        float _832 = fma(_820, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818)) - _793;
        float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
        float _849 = ((_836 * _830) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_785 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_836 * _831) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_789 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_836 * _832) / cbModelParam._m0[34u].z) + ((((((_793 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        float _888 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_854.x + (-0.5));
        float _890 = _888 * (_854.y + (-0.5));
        float _891 = _888 * (_854.z + (-0.5));
        float _898 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_861.x + (-0.5));
        float _900 = _898 * (_861.y + (-0.5));
        float _901 = _898 * (_861.z + (-0.5));
        float _908 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_868.x + (-0.5));
        float _910 = _908 * (_868.y + (-0.5));
        float _911 = _908 * (_868.z + (-0.5));
        float _918 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_875.x + (-0.5));
        float _920 = _918 * (_875.y + (-0.5));
        float _921 = _918 * (_875.z + (-0.5));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = _889 * 0.5;
        float _926 = _899 * 0.5;
        float _927 = _909 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _942 = (dot(vec3(_496, _497, _498), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _952 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3622 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_954 + 1.0))) + _959) * _922;
        float _969 = _890 * 0.5;
        float _970 = _900 * 0.5;
        float _971 = _910 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _985 = (dot(vec3(_496, _497, _498), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _994 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3655 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_996 + 1.0))) + _1001) * _923;
        float _1011 = _891 * 0.5;
        float _1012 = _901 * 0.5;
        float _1013 = _911 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_496, _497, _498), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3688 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1038 + 1.0))) + _1043) * _924;
        _1060 = _891;
        _1062 = _890;
        _1063 = _889;
        _1064 = _901;
        _1065 = _900;
        _1066 = _899;
        _1067 = _911;
        _1068 = _910;
        _1069 = _909;
        _1070 = _924;
        _1071 = _923;
        _1072 = _922;
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
    }
    else
    {
        _1060 = _1061;
        _1062 = _1061;
        _1063 = _1061;
        _1064 = _1061;
        _1065 = _1061;
        _1066 = _1061;
        _1067 = _1061;
        _1068 = _1061;
        _1069 = _1061;
        _1070 = _1061;
        _1071 = _1061;
        _1072 = _1061;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1104 = fma(_729, cbModelParam._m0[30u].z, fma(_725, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _721));
        float _1108 = fma(_729, cbModelParam._m0[31u].z, fma(_725, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _721));
        float _1112 = fma(_729, cbModelParam._m0[32u].z, fma(_725, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _721));
        float _1135 = _721 + _496;
        float _1136 = _725 + _497;
        float _1137 = _729 + _498;
        float _1147 = fma(_1137, cbModelParam._m0[30u].z, fma(_1136, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1135)) - _1104;
        float _1148 = fma(_1137, cbModelParam._m0[31u].z, fma(_1136, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1135)) - _1108;
        float _1149 = fma(_1137, cbModelParam._m0[32u].z, fma(_1136, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1135)) - _1112;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1104 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1108 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[35u].z) + ((((((_1112 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1203 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1170.x + (-0.5));
        float _1205 = _1203 * (_1170.y + (-0.5));
        float _1206 = _1203 * (_1170.z + (-0.5));
        float _1213 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1177.x + (-0.5));
        float _1215 = _1213 * (_1177.y + (-0.5));
        float _1216 = _1213 * (_1177.z + (-0.5));
        float _1223 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1184.x + (-0.5));
        float _1225 = _1223 * (_1184.y + (-0.5));
        float _1226 = _1223 * (_1184.z + (-0.5));
        float _1233 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1191.x + (-0.5));
        float _1235 = _1233 * (_1191.y + (-0.5));
        float _1236 = _1233 * (_1191.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_496, _497, _498), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3751 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1267 + 1.0))) + _1272) * _1237;
        float _1282 = _1205 * 0.5;
        float _1283 = _1215 * 0.5;
        float _1284 = _1225 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_496, _497, _498), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3784 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1309 + 1.0))) + _1314) * _1238;
        float _1324 = _1206 * 0.5;
        float _1325 = _1216 * 0.5;
        float _1326 = _1226 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_496, _497, _498), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3817 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1351 + 1.0))) + _1356) * _1239;
        _1373 = _1206;
        _1374 = _1205;
        _1375 = _1204;
        _1376 = _1216;
        _1377 = _1215;
        _1378 = _1214;
        _1379 = _1226;
        _1380 = _1225;
        _1381 = _1224;
        _1382 = _1239;
        _1383 = _1238;
        _1384 = _1237;
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1061;
        _1374 = _1061;
        _1375 = _1061;
        _1376 = _1061;
        _1377 = _1061;
        _1378 = _1061;
        _1379 = _1061;
        _1380 = _1061;
        _1381 = _1061;
        _1382 = _1061;
        _1383 = _1061;
        _1384 = _1061;
        _1385 = 0.0;
        _1386 = 0.0;
        _1387 = 0.0;
    }
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1073)) + _1073;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1074)) + _1074;
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1075)) + _1075;
    float _1420 = fma(_1399, cbSceneParam._m0[89u].z, fma(_1398, cbSceneParam._m0[89u].y, _1397 * cbSceneParam._m0[89u].x));
    float _1423 = fma(_1399, cbSceneParam._m0[90u].z, fma(_1398, cbSceneParam._m0[90u].y, _1397 * cbSceneParam._m0[90u].x));
    float _1426 = fma(_1399, cbSceneParam._m0[91u].z, fma(_1398, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1397));
    float _1441 = _668 * 0.5;
    float _1442 = _669 * 0.5;
    float _1443 = _670 * 0.5;
    float _1444 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1447 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1450 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1484;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1457 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1060, _1064, _1067, _1070));
        float _1461 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1465 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1472 = dot(vec4(cbModelParam._m0[39u]), vec4(_1441, _1442, _1443, 1.0));
        _1484 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1484 = 1.0;
    }
    float _1495;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1486 = dot(vec4(cbModelParam._m0[40u]), vec4(_1441, _1442, _1443, 1.0));
        _1495 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1486) ? 0.0 : (isnan(0.0) ? _1486 : max(0.0, _1486))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1495 = 1.0;
    }
    float _1499 = (_1495 * cbModelParam._m0[1u].x) + (_1484 * (1.0 - cbModelParam._m0[1u].x));
    float _1509 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _499);
    float _1510 = isnan(_1509) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1509 : min(cbModelParam._m0[25u].z, _1509));
    float _1592;
    float _1594;
    float _1596;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1559 = fma(_729, cbModelParam._m0[13u].z, fma(_725, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _721)) + cbModelParam._m0[13u].w;
        float _1563 = fma(_729, cbModelParam._m0[14u].z, fma(_725, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _721)) + cbModelParam._m0[14u].w;
        float _1567 = fma(_729, cbModelParam._m0[15u].z, fma(_725, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _721)) + cbModelParam._m0[15u].w;
        float _1570 = fma(_670, cbModelParam._m0[13u].z, fma(_669, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _668));
        float _1573 = fma(_670, cbModelParam._m0[14u].z, fma(_669, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _668));
        float _1576 = fma(_670, cbModelParam._m0[15u].z, fma(_669, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _668));
        float _1604;
        if (_1570 > 0.0)
        {
            _1604 = abs((1.0 - _1559) / _1570);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1559 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1604 = frontier_phi_19_17_ladder;
        }
        float _1809;
        if (_1573 > 0.0)
        {
            _1809 = abs((1.0 - _1563) / _1573);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1563 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1809 = frontier_phi_28_24_ladder;
        }
        float _2052;
        if (_1576 > 0.0)
        {
            _2052 = abs((1.0 - _1567) / _1576);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1567 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2052 = frontier_phi_40_35_ladder;
        }
        float _2054 = isnan(_1809) ? _1604 : (isnan(_1604) ? _1809 : min(_1604, _1809));
        float _2055 = isnan(_2052) ? _2054 : (isnan(_2054) ? _2052 : min(_2054, _2052));
        float _2059 = (_2055 * _1570) + _1559;
        float _2060 = (_2055 * _1573) + _1563;
        float _2061 = (_2055 * _1576) + _1567;
        float _2062 = _2055 * 9.9999997473787516355514526367188e-05;
        float _2064 = (-1.0) - _2062;
        float _2066 = _2062 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2061 > _2066) || ((_2061 < _2064) || ((_2060 > _2066) || ((_2060 < _2064) || ((_2059 < _2064) || (_2059 > _2066))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2185 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2061, cbModelParam._m0[9u].z, fma(_2060, cbModelParam._m0[9u].y, _2059 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2061, cbModelParam._m0[10u].z, fma(_2060, cbModelParam._m0[10u].y, _2059 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2061, cbModelParam._m0[11u].z, fma(_2060, cbModelParam._m0[11u].y, _2059 * cbModelParam._m0[11u].x))), _1510);
            frontier_phi_18_40_ladder = _2185.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2185.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2185.x * cbModelParam._m0[1u].y;
        }
        _1592 = frontier_phi_18_40_ladder_2;
        _1594 = frontier_phi_18_40_ladder_1;
        _1596 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1580 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_668, _669, _670), _1510);
        _1592 = _1580.x * cbModelParam._m0[1u].y;
        _1594 = _1580.y * cbModelParam._m0[1u].y;
        _1596 = _1580.z * cbModelParam._m0[1u].y;
    }
    float _1600 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _499);
    float _1601 = isnan(_1600) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1600 : min(cbModelParam._m0[25u].w, _1600));
    float _1694;
    float _1696;
    float _1698;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1658 = fma(_729, cbModelParam._m0[21u].z, fma(_725, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _721)) + cbModelParam._m0[21u].w;
        float _1662 = fma(_729, cbModelParam._m0[22u].z, fma(_725, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _721)) + cbModelParam._m0[22u].w;
        float _1666 = fma(_729, cbModelParam._m0[23u].z, fma(_725, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _721)) + cbModelParam._m0[23u].w;
        float _1669 = fma(_670, cbModelParam._m0[21u].z, fma(_669, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _668));
        float _1672 = fma(_670, cbModelParam._m0[22u].z, fma(_669, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _668));
        float _1675 = fma(_670, cbModelParam._m0[23u].z, fma(_669, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _668));
        float _1814;
        if (_1669 > 0.0)
        {
            _1814 = abs((1.0 - _1658) / _1669);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1658 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1814 = frontier_phi_30_26_ladder;
        }
        float _2079;
        if (_1672 > 0.0)
        {
            _2079 = abs((1.0 - _1662) / _1672);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1662 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2079 = frontier_phi_42_37_ladder;
        }
        float _2284;
        if (_1675 > 0.0)
        {
            _2284 = abs((1.0 - _1666) / _1675);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1666 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2284 = frontier_phi_51_48_ladder;
        }
        float _2286 = isnan(_2079) ? _1814 : (isnan(_1814) ? _2079 : min(_1814, _2079));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1669) + _1658;
        float _2292 = (_2287 * _1672) + _1662;
        float _2293 = (_2287 * _1675) + _1666;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2294;
        float _2297 = _2294 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2293 > _2297) || ((_2293 < _2295) || ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 < _2295) || (_2291 > _2297))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2491 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2293, cbModelParam._m0[17u].z, fma(_2292, cbModelParam._m0[17u].y, _2291 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2293, cbModelParam._m0[18u].z, fma(_2292, cbModelParam._m0[18u].y, _2291 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2293, cbModelParam._m0[19u].z, fma(_2292, cbModelParam._m0[19u].y, _2291 * cbModelParam._m0[19u].x))), _1601);
            frontier_phi_27_51_ladder = _2491.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2491.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2491.x * cbModelParam._m0[1u].z;
        }
        _1694 = frontier_phi_27_51_ladder_2;
        _1696 = frontier_phi_27_51_ladder_1;
        _1698 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_668, _669, _670), _1601);
        _1694 = _1678.x * cbModelParam._m0[1u].z;
        _1696 = _1678.y * cbModelParam._m0[1u].z;
        _1698 = _1678.z * cbModelParam._m0[1u].z;
    }
    float _1710 = ((((1.0 - _689) * ((_676 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_689 * _676)) * _660;
    float _1711 = _1710 * ((cbModelParam._m0[1u].w * (_1694 - _1592)) + _1592);
    float _1712 = _1710 * ((cbModelParam._m0[1u].w * (_1696 - _1594)) + _1594);
    float _1713 = _1710 * ((cbModelParam._m0[1u].w * (_1698 - _1596)) + _1596);
    float _1716 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1712, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1712, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1712, cbSceneParam._m0[91u].y, _1711 * cbSceneParam._m0[91u].x));
    uvec4 _1732 = floatBitsToUint(cbInstanceData._m0[_634 + 5u]);
    uint _1734 = _1732.x * 14u;
    uint _1735 = _1734 + 13u;
    float _1742 = _660 + (-1.0);
    float _1747 = (cbLight._m0[_1735].x * _1742) + 1.0;
    float _1748 = (cbLight._m0[_1735].y * _1742) + 1.0;
    float _1749 = (cbLight._m0[_1735].z * _1742) + 1.0;
    float _1750 = (cbLight._m0[_1735].w * _1742) + 1.0;
    uint _1751 = _1734 + 5u;
    float _1757 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
    uint _1761 = _1734 + 4u;
    float _1767 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
    uint _1771 = _1734 | 1u;
    float _1782 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_496, _497, _498));
    float _1785 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_496, _497, _498));
    float _3953 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _3964 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1790 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
    float _1792 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.3183098733425140380859375;
    float _1799 = ((cbLight._m0[_1751].x * _1757) * _1792) + ((cbLight._m0[_1761].x * _1767) * _1790);
    float _1800 = ((_1757 * cbLight._m0[_1751].y) * _1792) + ((_1767 * cbLight._m0[_1761].y) * _1790);
    float _1801 = ((_1757 * cbLight._m0[_1751].z) * _1792) + ((_1767 * cbLight._m0[_1761].z) * _1790);
    uvec4 _1806 = floatBitsToUint(cbLight._m0[_1734 + 12u]);
    bool _1808 = _1806.x == 0u;
    float _1819;
    float _1821;
    float _1823;
    if (_1808)
    {
        _1819 = _1799;
        _1821 = _1800;
        _1823 = _1801;
    }
    else
    {
        uint _1827 = _1734 + 6u;
        float _1843 = (dot(vec3(cbLight._m0[_1734 + 2u].xyz), vec3(_496, _497, _498)) * 0.5) + 0.5;
        float _1844 = _1843 * _1843;
        float _3975 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1846 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _1819 = (((cbLight._m0[_1827].x * 0.3183098733425140380859375) * _1845) * _1846) + _1799;
        _1821 = (((cbLight._m0[_1827].y * 0.3183098733425140380859375) * _1845) * _1846) + _1800;
        _1823 = (((cbLight._m0[_1827].z * 0.3183098733425140380859375) * _1845) * _1846) + _1801;
    }
    bool _1826 = _1806.y == 0u;
    float _1864;
    float _1866;
    float _1868;
    if (_1826)
    {
        _1864 = _1819;
        _1866 = _1821;
        _1868 = _1823;
    }
    else
    {
        uint _2023 = _1734 + 7u;
        float _2039 = (dot(vec3(cbLight._m0[_1734 + 3u].xyz), vec3(_496, _497, _498)) * 0.5) + 0.5;
        float _2040 = _2039 * _2039;
        float _3991 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2041 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2042 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
        _1864 = (((cbLight._m0[_2023].x * 0.3183098733425140380859375) * _2041) * _2042) + _1819;
        _1866 = (((cbLight._m0[_2023].y * 0.3183098733425140380859375) * _2041) * _2042) + _1821;
        _1868 = (((cbLight._m0[_2023].z * 0.3183098733425140380859375) * _2041) * _2042) + _1823;
    }
    uint _1871 = _1734 + 8u;
    float _1884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1734].w)) * _499) * 0.949999988079071044921875);
    float _1885 = _1884 * _1884;
    float _1886 = cbLight._m0[_1734].x + _576;
    float _1887 = cbLight._m0[_1734].y + _577;
    float _1888 = cbLight._m0[_1734].z + _578;
    float _1892 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
    float _1893 = _1892 * _1886;
    float _1894 = _1892 * _1887;
    float _1895 = _1892 * _1888;
    float _1896 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_1734].xyz));
    float _4007 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1899 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _1900 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1901 = dot(vec3(_496, _497, _498), vec3(_1893, _1894, _1895));
    float _4029 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_1893, _1894, _1895));
    float _4040 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1885 * _1885;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1924 = (exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1925 = 1.0 - _1885;
    float _1936 = (0.5 / (((_1900 * ((_1899 * _1925) + _1885)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _1925) + _1885) * _1899))) * _1899;
    float _4051 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1938 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    uint _1949 = _1734 + 9u;
    float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _499) * 0.949999988079071044921875);
    float _1961 = _1960 * _1960;
    float _1962 = cbLight._m0[_1771].x + _576;
    float _1963 = cbLight._m0[_1771].y + _577;
    float _1964 = cbLight._m0[_1771].z + _578;
    float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
    float _1969 = _1968 * _1962;
    float _1970 = _1968 * _1963;
    float _1971 = _1968 * _1964;
    float _1972 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_1771].xyz));
    float _4062 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _1976 = dot(vec3(_496, _497, _498), vec3(_1969, _1970, _1971));
    float _4073 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1969, _1970, _1971));
    float _4084 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1984 = _1961 * _1961;
    float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
    float _1997 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1998 = 1.0 - _1961;
    float _2008 = (0.5 / (((_1900 * ((_1975 * _1998) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _1998) + _1961) * _1975))) * _1975;
    float _4095 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2010 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
    float _2020 = (((_1997 * cbLight._m0[_1949].x) * _2010) * _1757) + (((_1924 * cbLight._m0[_1871].x) * _1938) * _1767);
    float _2021 = (((_1997 * cbLight._m0[_1949].y) * _2010) * _1757) + (((_1924 * cbLight._m0[_1871].y) * _1938) * _1767);
    float _2022 = (((_1997 * cbLight._m0[_1949].z) * _2010) * _1757) + (((_1924 * cbLight._m0[_1871].z) * _1938) * _1767);
    float _2084;
    float _2086;
    float _2088;
    if (_1808)
    {
        _2084 = _2020;
        _2086 = _2021;
        _2088 = _2022;
    }
    else
    {
        uint _2090 = _1734 + 2u;
        uint _2094 = _1734 + 10u;
        float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _499) * 0.949999988079071044921875);
        float _2109 = _2108 * _2108;
        float _2110 = cbLight._m0[_2090].x + _576;
        float _2111 = cbLight._m0[_2090].y + _577;
        float _2112 = cbLight._m0[_2090].z + _578;
        float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
        float _2117 = _2116 * _2110;
        float _2118 = _2116 * _2111;
        float _2119 = _2116 * _2112;
        float _2120 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_2090].xyz));
        float _4106 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2124 = dot(vec3(_496, _497, _498), vec3(_2117, _2118, _2119));
        float _4117 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2128 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2117, _2118, _2119));
        float _4128 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2132 = _2109 * _2109;
        float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
        float _2145 = (exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2146 = 1.0 - _2109;
        float _2156 = (0.5 / (((_1900 * ((_2123 * _2146) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2146) + _2109) * _2123))) * _2123;
        float _4139 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2158 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
        float _2159 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _2084 = (((_2145 * cbLight._m0[_2094].x) * _2158) * _2159) + _2020;
        _2086 = (((_2145 * cbLight._m0[_2094].y) * _2158) * _2159) + _2021;
        _2088 = (((_2145 * cbLight._m0[_2094].z) * _2158) * _2159) + _2022;
    }
    float _2194;
    float _2196;
    float _2198;
    if (_1826)
    {
        _2194 = _2084;
        _2196 = _2086;
        _2198 = _2088;
    }
    else
    {
        uint _2205 = _1734 + 3u;
        uint _2209 = _1734 + 11u;
        float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _499) * 0.949999988079071044921875);
        float _2224 = _2223 * _2223;
        float _2225 = cbLight._m0[_2205].x + _576;
        float _2226 = cbLight._m0[_2205].y + _577;
        float _2227 = cbLight._m0[_2205].z + _578;
        float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
        float _2232 = _2231 * _2225;
        float _2233 = _2231 * _2226;
        float _2234 = _2231 * _2227;
        float _2235 = dot(vec3(_496, _497, _498), vec3(cbLight._m0[_2205].xyz));
        float _4155 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2239 = dot(vec3(_496, _497, _498), vec3(_2232, _2233, _2234));
        float _4166 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2243 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2232, _2233, _2234));
        float _4177 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2247 = _2224 * _2224;
        float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
        float _2260 = (exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2261 = 1.0 - _2224;
        float _2271 = (0.5 / (((_1900 * ((_2238 * _2261) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2261) + _2224) * _2238))) * _2238;
        float _4188 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2273 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
        float _2274 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
        _2194 = (((_2260 * cbLight._m0[_2209].x) * _2273) * _2274) + _2084;
        _2196 = (((_2260 * cbLight._m0[_2209].y) * _2273) * _2274) + _2086;
        _2198 = (((_2260 * cbLight._m0[_2209].z) * _2273) * _2274) + _2088;
    }
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    if (_1732.y == 0u)
    {
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2350 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2349;
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2349;
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2349;
        uvec4 _2364 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2365 = _2364.x;
        uint _2376 = uint((float(_2364.y) * floor(float(uint(cbSceneParam._m0[85u].y * _597) / _2365))) + floor(float(uint(cbSceneParam._m0[85u].x * _596) / _2365)));
        float _2386 = (log2(_2352 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2387 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        uint _2390 = uint(isnan(14.0) ? _2387 : (isnan(_2387) ? 14.0 : min(_2387, 14.0)));
        uvec4 _2395 = texelFetch(g_lightClusterGridBuffer, int(((_2390 << 2u) + (_2376 << 6u)) >> 2u));
        uint _2396 = _2395.x;
        uint _2397 = _2364.z;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        if (((((1u << ((_2397 >> 4u) & 15u)) + 4294967295u) & _2396) == 0u) || ((_2397 & 240u) == 0u))
        {
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
            _2506 = 0.0;
        }
        else
        {
            float _2497;
            float _2499;
            float _2501;
            float _2503;
            float _2505;
            float _2507;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            uint _2654 = 0u;
            uint _2663;
            bool _2664;
            for (;;)
            {
                _2663 = texelFetch(g_lightClassification, int((((_2390 << 5u) + (_2376 << 9u)) + (_2654 << 2u)) >> 2u)).x;
                _2664 = _2663 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2664)
                {
                    frontier_phi_68_pred = _2650;
                    frontier_phi_68_pred_1 = _2653;
                    frontier_phi_68_pred_2 = _2652;
                    frontier_phi_68_pred_3 = _2651;
                    frontier_phi_68_pred_4 = _2649;
                    frontier_phi_68_pred_5 = _2648;
                }
                else
                {
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    uint _2799;
                    _2793 = _2648;
                    _2794 = _2649;
                    _2795 = _2650;
                    _2796 = _2651;
                    _2797 = _2652;
                    _2798 = _2653;
                    _2799 = _2663;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    for (;;)
                    {
                        uint _2803 = uint(findLSB(_2799)) + (_2654 << 5u);
                        uint _2800 = (_2799 + 4294967295u) & _2799;
                        uint _2805 = _2803 * 48u;
                        vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 3u)).x));
                        uint _2825 = (_2803 * 48u) + 4u;
                        vec4 _2838 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 3u)).x));
                        uint _2844 = (_2803 * 48u) + 8u;
                        vec3 _2855 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x));
                        float _2859 = _2819.x - _2350;
                        float _2860 = _2819.y - _2351;
                        float _2861 = _2819.z - _2352;
                        float _2862 = dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861));
                        float _2865 = inversesqrt(_2862);
                        float _2866 = _2865 * _2859;
                        float _2867 = _2865 * _2860;
                        float _2868 = _2865 * _2861;
                        float _2869 = dot(vec3(_615, _618, _621), vec3(_2866, _2867, _2868));
                        float _2874 = 1.0 - (_2862 * _2819.w);
                        float _4214 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2876 = sqrt(_2862) * _2838.w;
                        float _2879 = 1.39999997615814208984375 / (_2876 + 1.39999997615814208984375);
                        float _2880 = _2879 * _2879;
                        float _2883 = ((1.0 - _2880) * _2869) + _2880;
                        float _2886 = _2876 * _2876;
                        float _2890 = ((isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))) * _2875) / ((_2886 * 0.699999988079071044921875) + 1.0);
                        float _2894 = (-0.0) - _2350;
                        float _2895 = (-0.0) - _2351;
                        float _2896 = (-0.0) - _2352;
                        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
                        float _2901 = _2900 * _2894;
                        float _2902 = _2900 * _2895;
                        float _2903 = _2900 * _2896;
                        float _2911 = exp2(log2(1.0 / ((_2886 * 3.5) + 5.0)) * 0.25);
                        float _2912 = 1.0 - _676;
                        float _2919 = sqrt(1.0 - ((1.0 - (_2912 * _2912)) * (1.0 - (_2911 * _2911))));
                        float _2920 = _2919 * _2919;
                        float _2921 = _2920 * _2920;
                        float _2922 = _2901 + _2866;
                        float _2923 = _2902 + _2867;
                        float _2924 = _2903 + _2868;
                        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
                        float _2932 = dot(vec3(_615, _618, _621), vec3(_2901, _2902, _2903));
                        float _4230 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2936 = dot(vec3(_615, _618, _621), vec3(_2928 * _2922, _2928 * _2923, _2928 * _2924));
                        float _4241 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2939 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2943 = ((_2939 * _2939) * (_2921 + (-1.0))) + 1.0;
                        float _2944 = _2879 * _2920;
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2869) + _2945;
                        float _4252 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2949 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2950 = 1.0 - _2920;
                        float _2960 = (0.5 / (((_2949 * ((_2935 * _2950) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2949 * _2950) + _2920) * _2935))) * _2949;
                        float _4263 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2971 = (((_2921 * 3.1415927410125732421875) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) / ((_2943 * _2943) * ((_2886 * 2.1991131305694580078125) + 3.141590118408203125))) * _2875;
                        _2723 = (_2890 * _2838.x) + _2796;
                        _2724 = (_2890 * _2838.y) + _2797;
                        _2725 = (_2890 * _2838.z) + _2798;
                        _2720 = (_2971 * _2855.x) + _2793;
                        _2721 = (_2971 * _2855.y) + _2794;
                        _2722 = (_2971 * _2855.z) + _2795;
                        if (_2800 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2793 = _2720;
                            _2794 = _2721;
                            _2795 = _2722;
                            _2796 = _2723;
                            _2797 = _2724;
                            _2798 = _2725;
                            _2799 = _2800;
                        }
                    }
                    frontier_phi_68_pred = _2722;
                    frontier_phi_68_pred_1 = _2725;
                    frontier_phi_68_pred_2 = _2724;
                    frontier_phi_68_pred_3 = _2723;
                    frontier_phi_68_pred_4 = _2721;
                    frontier_phi_68_pred_5 = _2720;
                }
                _2501 = frontier_phi_68_pred;
                _2507 = frontier_phi_68_pred_1;
                _2505 = frontier_phi_68_pred_2;
                _2503 = frontier_phi_68_pred_3;
                _2499 = frontier_phi_68_pred_4;
                _2497 = frontier_phi_68_pred_5;
                uint _2655 = _2654 + 1u;
                if (_2655 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2648 = _2497;
                    _2649 = _2499;
                    _2650 = _2501;
                    _2651 = _2503;
                    _2652 = _2505;
                    _2653 = _2507;
                    _2654 = _2655;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
            _2506 = _2507;
        }
        uvec4 _2510 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2511 = _2510.z;
        uint _2513 = (_2511 >> 8u) & 15u;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        if (((4294967295u << _2513) & _2396) == 0u)
        {
            _2616 = _2496;
            _2618 = _2498;
            _2620 = _2500;
            _2622 = _2502;
            _2624 = _2504;
            _2626 = _2506;
        }
        else
        {
            float _2641 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
            float _2642 = _2641 * _2350;
            float _2643 = _2641 * _2351;
            float _2644 = _2641 * _2352;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2513 < ((_2511 >> 12u) & 15u))
            {
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2627;
                float _2776 = _2496;
                float _2777 = _2498;
                float _2778 = _2500;
                float _2779 = _2502;
                float _2780 = _2504;
                float _2781 = _2506;
                uint _2782 = _2513;
                uint _2791;
                bool _2792;
                for (;;)
                {
                    _2791 = texelFetch(g_lightClassification, int((((_2390 << 5u) + (_2376 << 9u)) + (_2782 << 2u)) >> 2u)).x;
                    _2792 = _2791 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2792)
                    {
                        frontier_phi_79_pred = _2781;
                        frontier_phi_79_pred_1 = _2780;
                        frontier_phi_79_pred_2 = _2779;
                        frontier_phi_79_pred_3 = _2778;
                        frontier_phi_79_pred_4 = _2777;
                        frontier_phi_79_pred_5 = _2776;
                    }
                    else
                    {
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _2998 = _2776;
                        float _2999 = _2777;
                        float _3000 = _2778;
                        float _3001 = _2779;
                        float _3002 = _2780;
                        float _3003 = _2781;
                        uint _3004 = _2791;
                        uint _3005;
                        vec4 _3030;
                        float _3031;
                        vec4 _3046;
                        vec3 _3058;
                        vec4 _3074;
                        vec4 _3090;
                        float _3137;
                        bool _3138;
                        for (;;)
                        {
                            uint _3015 = ((_2782 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3004));
                            _3005 = (_3004 + 4294967295u) & _3004;
                            uint _3017 = _3015 * 40u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            _3031 = _3030.w;
                            uint _3033 = (_3015 * 40u) + 4u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3048 = (_3015 * 40u) + 8u;
                            _3058 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x));
                            uint _3061 = (_3015 * 40u) + 16u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3077 = (_3015 * 40u) + 20u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3093 = (_3015 * 40u) + 24u;
                            vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3112 = (_3015 * 40u) + 28u;
                            vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3137 = fma(_2352, _3125.z, fma(_2351, _3125.y, _3125.x * _2350)) + _3125.w;
                            _3138 = !((fma(_2352, _3106.z, fma(_2351, _3106.y, _3106.x * _2350)) + _3106.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3138)
                            {
                                float _3165 = _3030.x - _2350;
                                float _3166 = _3030.y - _2351;
                                float _3167 = _3030.z - _2352;
                                float _3168 = dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167));
                                float _3171 = inversesqrt(_3168);
                                float _3172 = _3171 * _3165;
                                float _3173 = _3171 * _3166;
                                float _3174 = _3171 * _3167;
                                float _3178 = 1.0 - (_3168 / (_3031 * _3031));
                                float _4274 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3179 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3183 = sqrt(_3168) * _3046.w;
                                float _3185 = 1.39999997615814208984375 / (_3183 + 1.39999997615814208984375);
                                float _3186 = _3185 * _3185;
                                float _3189 = ((1.0 - _3186) * dot(vec3(_3172, _3173, _3174), vec3(_615, _618, _621))) + _3186;
                                float _3192 = _3183 * _3183;
                                float _3196 = (fma(_2352, _3074.z, fma(_2351, _3074.y, _3074.x * _2350)) + _3074.w) / _3137;
                                float _3197 = (fma(_2352, _3090.z, fma(_2351, _3090.y, _3090.x * _2350)) + _3090.w) / _3137;
                                float _3201 = 1.0 - dot(vec2(_3196, _3197), vec2(_3196, _3197));
                                float _4290 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3203 = _3202 * (((isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))) * _3179) / ((_3192 * 0.699999988079071044921875) + 1.0));
                                float _3215 = exp2(log2(1.0 / ((_3192 * 3.5) + 5.0)) * 0.25);
                                float _3216 = 1.0 - _676;
                                float _3223 = sqrt(1.0 - ((1.0 - (_3216 * _3216)) * (1.0 - (_3215 * _3215))));
                                float _3224 = _3223 * _3223;
                                float _3225 = _3224 * _3224;
                                float _3226 = _3172 - _2642;
                                float _3227 = _3173 - _2643;
                                float _3228 = _3174 - _2644;
                                float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                                float _3236 = dot(vec3(_615, _618, _621), vec3((-0.0) - _2642, (-0.0) - _2643, (-0.0) - _2644));
                                float _4301 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3239 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3240 = dot(vec3(_615, _618, _621), vec3(_3232 * _3226, _3232 * _3227, _3232 * _3228));
                                float _4312 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3243 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3247 = ((_3243 * _3243) * (_3225 + (-1.0))) + 1.0;
                                float _3248 = _3185 * _3224;
                                float _3249 = _3248 * _3248;
                                float _3255 = ((1.0 - _3249) * dot(vec3(_615, _618, _621), vec3(_3172, _3173, _3174))) + _3249;
                                float _4323 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3257 = 1.0 - _3224;
                                float _3267 = (0.5 / (((_3256 * ((_3239 * _3257) + _3224)) + 9.9999999392252902907785028219223e-09) + (((_3256 * _3257) + _3224) * _3239))) * _3256;
                                float _4334 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3277 = (_3202 * _3179) * (((_3225 * 3.1415927410125732421875) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) / ((_3247 * _3247) * ((_3192 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3203 * _3046.z;
                                frontier_phi_85_pred_1 = _3203 * _3046.y;
                                frontier_phi_85_pred_2 = _3203 * _3046.x;
                                frontier_phi_85_pred_3 = _3277 * _3058.z;
                                frontier_phi_85_pred_4 = _3277 * _3058.y;
                                frontier_phi_85_pred_5 = _3277 * _3058.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3286 = frontier_phi_85_pred;
                            _3285 = frontier_phi_85_pred_1;
                            _3284 = frontier_phi_85_pred_2;
                            _3283 = frontier_phi_85_pred_3;
                            _3282 = frontier_phi_85_pred_4;
                            _3281 = frontier_phi_85_pred_5;
                            _2988 = _3284 + _3001;
                            _2989 = _3285 + _3002;
                            _2990 = _3286 + _3003;
                            _2985 = _3281 + _2998;
                            _2986 = _3282 + _2999;
                            _2987 = _3283 + _3000;
                            if (_3005 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _3005;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2990;
                        frontier_phi_79_pred_1 = _2989;
                        frontier_phi_79_pred_2 = _2988;
                        frontier_phi_79_pred_3 = _2987;
                        frontier_phi_79_pred_4 = _2986;
                        frontier_phi_79_pred_5 = _2985;
                    }
                    _2627 = frontier_phi_79_pred;
                    _2625 = frontier_phi_79_pred_1;
                    _2623 = frontier_phi_79_pred_2;
                    _2621 = frontier_phi_79_pred_3;
                    _2619 = frontier_phi_79_pred_4;
                    _2617 = frontier_phi_79_pred_5;
                    uint _2783 = _2782 + 1u;
                    if (_2783 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2776 = _2617;
                        _2777 = _2619;
                        _2778 = _2621;
                        _2779 = _2623;
                        _2780 = _2625;
                        _2781 = _2627;
                        _2782 = _2783;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2623;
                frontier_phi_60_61_ladder_1 = _2627;
                frontier_phi_60_61_ladder_2 = _2625;
                frontier_phi_60_61_ladder_3 = _2621;
                frontier_phi_60_61_ladder_4 = _2619;
                frontier_phi_60_61_ladder_5 = _2617;
            }
            else
            {
                frontier_phi_60_61_ladder = _2502;
                frontier_phi_60_61_ladder_1 = _2506;
                frontier_phi_60_61_ladder_2 = _2504;
                frontier_phi_60_61_ladder_3 = _2500;
                frontier_phi_60_61_ladder_4 = _2498;
                frontier_phi_60_61_ladder_5 = _2496;
            }
            _2616 = frontier_phi_60_61_ladder_5;
            _2618 = frontier_phi_60_61_ladder_4;
            _2620 = frontier_phi_60_61_ladder_3;
            _2622 = frontier_phi_60_61_ladder;
            _2624 = frontier_phi_60_61_ladder_2;
            _2626 = frontier_phi_60_61_ladder_1;
        }
        float _2631 = isnan(1.0) ? _660 : (isnan(_660) ? 1.0 : min(_660, 1.0));
        _2408 = (_2631 * _2622) + _1864;
        _2410 = (_2631 * _2624) + _1866;
        _2412 = (_2631 * _2626) + _1868;
        _2414 = ((_2616 * 0.039999999105930328369140625) * _2631) + _2194;
        _2416 = ((_2618 * 0.039999999105930328369140625) * _2631) + _2196;
        _2418 = ((_2620 * 0.039999999105930328369140625) * _2631) + _2198;
    }
    else
    {
        _2408 = _1864;
        _2410 = _1866;
        _2412 = _1868;
        _2414 = _2194;
        _2416 = _2196;
        _2418 = _2198;
    }
    float _4350 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4361 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4372 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _2435 = ((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2408 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _660))) + ((_2414 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1499)) * cbPerFrame._m0[3u].x);
    float _2436 = ((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2410 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _660))) + ((_2416 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1499)) * cbPerFrame._m0[3u].x);
    float _2437 = ((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2412 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _660))) + ((_2418 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1499)) * cbPerFrame._m0[3u].x);
    uint _2438 = _634 + 6u;
    float _2446 = _596 / cbSceneParam._m0[86u].x;
    float _2447 = _597 / cbSceneParam._m0[86u].y;
    vec4 _2461 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2446, _2447, (log2((isnan(cbSceneParam._m0[77u].w) ? _518 : (isnan(_518) ? cbSceneParam._m0[77u].w : min(_518, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2463 = _2461.x;
    float _2464 = _2461.y;
    float _2465 = _2461.z;
    float _2466 = _2461.w;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_518 > cbSceneParam._m0[78u].w)
    {
        float _2521 = isnan(_518) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _518 : min(cbSceneParam._m0[80u].w, _518));
        float _2522 = _2521 / _518;
        float _2533 = _2522 * _569;
        float _2534 = _570 * _2522;
        float _2535 = (-0.0) - _2534;
        float _2536 = _2522 * _571;
        float _2538 = (cbSceneParam._m0[77u].w * _2535) / _2521;
        float _2539 = _2538 + cbSceneParam._m0[79u].w;
        float _2540 = cbSceneParam._m0[79u].w - _2534;
        float _2546 = sqrt(((_2533 * _2533) + (_2534 * _2534)) + (_2536 * _2536));
        float _2549 = (1.0 - (cbSceneParam._m0[77u].w / _2521)) * _2546;
        float _2554 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2556 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2733;
        if (abs((_2535 - _2538) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2733 = ((((_2539 > 0.0) ? exp2(_2554 * _2539) : (2.0 - exp2(_2556 * _2539))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2549;
        }
        else
        {
            float _2677 = 1.0 / cbSceneParam._m0[80u].x;
            float _2678 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : max(_2539, _2540));
            float _2679 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : min(_2539, _2540));
            float _2688 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : min(_2678, 0.0));
            float _2689 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : min(_2679, 0.0));
            _2733 = ((abs(_2546 / _2535) * cbSceneParam._m0[80u].y) * ((((_2688 - _2689) * 2.0) - ((exp2(_2554 * (isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0)))) - exp2(_2554 * (isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0))))) * _2677)) - ((exp2(_2556 * _2688) - exp2(_2556 * _2689)) * _2677))) + (_2549 * cbSceneParam._m0[80u].z);
        }
        vec4 _2735 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2446, _2447, 1.0), 0.0);
        float _2744 = exp2((_2733 * (-1.44269502162933349609375)) * (1.0 - _2735.w));
        float _2745 = log2(_2744);
        float _2761 = log2(_2466);
        _2558 = (exp2(_2761 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].x)) * _2735.x) / cbSceneParam._m0[78u].x)) + _2463;
        _2560 = (exp2(_2761 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].y)) * _2735.y) / cbSceneParam._m0[78u].y)) + _2464;
        _2562 = (exp2(_2761 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].z)) * _2735.z) / cbSceneParam._m0[78u].z)) + _2465;
        _2564 = _2744 * _2466;
    }
    else
    {
        _2558 = _2463;
        _2560 = _2464;
        _2562 = _2465;
        _2564 = _2466;
    }
    bool _2771;
    vec4 _2574;
    vec4 _2596;
    float _2598;
    float _2602;
    float _2603;
    float _2604;
    float _2605;
    bool _2615;
    for (;;)
    {
        _2574 = cbMatDynParam._m0[0u];
        float _2576 = roundEven(_2574.y);
        bool _2577 = _2576 == 3.0;
        float _2578 = log2(_2564);
        float _2585 = exp2(_2578 * cbSceneParam._m0[78u].x) * _2435;
        float _2586 = exp2(_2578 * cbSceneParam._m0[78u].y) * _2436;
        float _2587 = exp2(_2578 * cbSceneParam._m0[78u].z) * _2437;
        float _2594 = _585 + (-0.5);
        _2596 = cbMtdParam._m0[1u];
        _2598 = _2596.y * _2594;
        float _2601 = (_2576 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2602 = _2601 * (_2577 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2558)));
        _2603 = _2601 * (_2577 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2560)));
        _2604 = _2601 * (_2577 ? _2587 : (_2587 + (cbSceneParam._m0[72u].w * _2562)));
        _2605 = _2594 * 0.999000012874603271484375;
        _2615 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2615)
        {
            if ((cbInstanceData._m0[_634 + 7u].x + _2605) < 0.5)
            {
                _2771 = true;
                break;
            }
        }
        uint _2712 = _636 + uint(_2574.w);
        if ((cbInstanceData._m0[_2712].w < 1.0) && ((cbInstanceData._m0[_2712].w + _2605) < 0.5))
        {
            _2771 = true;
            break;
        }
        if ((_2598 + 1.0) < _2596.x)
        {
            _2771 = true;
            break;
        }
        _2771 = false;
        break;
    }
    float _2976;
    if (_2771)
    {
        discard_state = true;
        _2976 = 0.0;
    }
    else
    {
        _2976 = cbInstanceData._m0[_2438].w;
    }
    SV_Target.x = _2602;
    SV_Target.y = _2603;
    SV_Target.z = _2604;
    SV_Target.w = _2976;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2438].w;
    discard_exit();
}


