#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1079;
float _3474;
float _3475;
float _3476;
float _3477;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    uint _240 = uint(int(floor(cbMtdParam._m0[10u].z)));
    float _241 = fract(cbMtdParam._m0[10u].z);
    uint _242 = _240 + 1u;
    uint _243 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _246 = float(int(_240 - _243 * (_240 / _243)));
    float _250 = float(int(_242 - _243 * (_242 / _243)));
    float _254 = 1.0 / cbMtdParam._m0[10u].w;
    float _256 = 1.0 / cbMtdParam._m0[11u].x;
    float _257 = fract(TEXCOORD_1.x);
    float _258 = fract(TEXCOORD_1.y);
    float _260 = (_257 + (_246 - cbMtdParam._m0[10u].w * trunc(_246 / cbMtdParam._m0[10u].w))) * _254;
    float _262 = (_258 + floor(_246 / cbMtdParam._m0[10u].w)) * _256;
    float _264 = (_257 + (_250 - cbMtdParam._m0[10u].w * trunc(_250 / cbMtdParam._m0[10u].w))) * _254;
    float _266 = (_258 + floor(_250 / cbMtdParam._m0[10u].w)) * _256;
    vec4 _279 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _264) + cbTextureTilingScale._m0[0u].z, (_266 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _290 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _260) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _262) + cbTextureTilingScale._m0[0u].w));
    float _292 = _290.x;
    float _293 = _290.y;
    float _294 = _290.z;
    float _295 = _290.w;
    float _308 = (((_279.x - _292) * _241) + _292) * cbMtdParam._m0[9u].x;
    float _309 = (((_279.y - _293) * _241) + _293) * cbMtdParam._m0[9u].y;
    float _310 = (((_279.z - _294) * _241) + _294) * cbMtdParam._m0[9u].z;
    vec4 _320 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _322 = _320.x;
    float _345 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _322)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _322))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3486 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _348 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * (((_279.w - _295) * _241) + _295);
    float _349 = (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * _348;
    float _350 = gl_FragCoord.x * 0.125;
    float _352 = gl_FragCoord.y * 0.125;
    float _362 = float(_348 >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_350, _352)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _384 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _262) + cbTextureTilingScale._m0[2u].w));
    float _386 = _384.x;
    float _390 = (_386 + cbMtdParam._m0[10u].x) + ((texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _266) + cbTextureTilingScale._m0[2u].w)).x - _386) * _241);
    vec4 _402 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _264) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _266) + cbTextureTilingScale._m0[1u].w));
    float _409 = (_402.x * 2.0) + (-1.0);
    float _411 = (_402.y * 2.0) + (-1.0);
    float _415 = 1.0 - dot(vec2(_409, _411), vec2(_409, _411));
    float _3497 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _417 = sqrt(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)));
    float _420 = fma(_417, _218, fma(_411, _211, _409 * _197));
    float _423 = fma(_417, _219, fma(_411, _212, _409 * _198));
    float _426 = fma(_417, _220, fma(_411, _213, _409 * _199));
    float _430 = inversesqrt(dot(vec3(_420, _423, _426), vec3(_420, _423, _426)));
    vec4 _438 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _260) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _262) + cbTextureTilingScale._m0[1u].w));
    float _444 = (_438.x * 2.0) + (-1.0);
    float _445 = (_438.y * 2.0) + (-1.0);
    float _449 = 1.0 - dot(vec2(_444, _445), vec2(_444, _445));
    float _3508 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _451 = sqrt(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)));
    float _454 = fma(_451, _218, fma(_445, _211, _444 * _197));
    float _457 = fma(_451, _219, fma(_445, _212, _444 * _198));
    float _460 = fma(_451, _220, fma(_445, _213, _444 * _199));
    float _464 = inversesqrt(dot(vec3(_454, _457, _460), vec3(_454, _457, _460)));
    float _465 = _464 * _454;
    float _466 = _464 * _457;
    float _467 = _464 * _460;
    float _476 = (((_430 * _426) - _467) * _241) + _467;
    float _479 = (((((_430 * _420) - _465) * _241) + _465) * 2.0) + (-1.0);
    float _480 = (((((_430 * _423) - _466) * _241) + _466) * 2.0) + (-1.0);
    float _481 = dot(vec2(_479, _480), vec2(_479, _480));
    float _3519 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))));
    float _489 = fma(_486, _218, fma(_480, _211, _479 * _197));
    float _492 = fma(_486, _219, fma(_480, _212, _479 * _198));
    float _495 = fma(_486, _220, fma(_480, _213, _479 * _199));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    float _500 = _499 * _489;
    float _501 = _499 * _492;
    float _502 = _499 * _495;
    float _3530 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _503 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _504 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3563 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3574 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3585 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _508 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _522 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _573 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _563);
    float _574 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _563);
    float _575 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _563);
    float _579 = inversesqrt(dot(vec3(_573, _574, _575), vec3(_573, _574, _575)));
    float _580 = _573 * _579;
    float _581 = _574 * _579;
    float _582 = _575 * _579;
    vec4 _583 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_350, _352));
    float _585 = _583.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _760 = sqrt(((_573 * _573) + (_574 * _574)) + (_575 * _575));
        float _766 = (cbMatDynParam._m0[5u].x * _760) + cbMatDynParam._m0[5u].y;
        float _3596 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _771 = (cbMatDynParam._m0[5u].z * _760) + cbMatDynParam._m0[5u].w;
        float _3607 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) - _767)) + _767) < ((_585 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _596 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _597 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _617 = fma(_502, cbSceneParam._m0[5u].z, fma(_501, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _500));
    float _620 = fma(_502, cbSceneParam._m0[6u].z, fma(_501, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _500));
    float _623 = fma(_502, cbSceneParam._m0[7u].z, fma(_501, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _500));
    uint _636 = uint(roundEven(NORMAL.w)) * 13u;
    uint _638 = _636 + 9u;
    uint _639 = _638 + uint(cbMatDynParam._m0[0u].w);
    float _645 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_639].x;
    float _646 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_639].y;
    float _647 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * cbInstanceData._m0[_639].z;
    float _3618 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _3629 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _651 = 1.0 - _508;
    float _652 = _648 * _651;
    float _653 = _649 * _651;
    float _654 = _650 * _651;
    float _659 = (_648 + (-0.039999999105930328369140625)) * _508;
    float _660 = (_649 + (-0.039999999105930328369140625)) * _508;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _508;
    float _662 = _659 + 0.039999999105930328369140625;
    float _664 = _660 + 0.039999999105930328369140625;
    float _665 = _661 + 0.039999999105930328369140625;
    vec4 _674 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _596, cbSceneParam._m0[86u].y * _597));
    float _677 = _674.x * TEXCOORD_1.w;
    float _678 = dot(vec3(_500, _501, _502), vec3(_580, _581, _582));
    float _681 = _678 * 2.0;
    float _685 = (_681 * _500) - _580;
    float _686 = (_681 * _501) - _581;
    float _687 = (_681 * _502) - _582;
    float _691 = abs(dot(vec3(_580, _581, _582), vec3(_500, _501, _502)));
    float _3651 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _693 = sqrt(_504);
    float _706 = exp2((_693 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_693 * 3.0));
    float _712 = (1.0 - _706) * ((_693 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _713 = _706 * _693;
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1078;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _803 = fma(_749, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741));
        float _807 = fma(_749, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741));
        float _811 = fma(_749, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741));
        float _836 = _741 + _500;
        float _837 = _745 + _501;
        float _838 = _749 + _502;
        float _848 = fma(_838, cbModelParam._m0[26u].z, fma(_837, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _836)) - _803;
        float _849 = fma(_838, cbModelParam._m0[27u].z, fma(_837, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _836)) - _807;
        float _850 = fma(_838, cbModelParam._m0[28u].z, fma(_837, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _836)) - _811;
        float _854 = inversesqrt(dot(vec3(_848, _849, _850), vec3(_848, _849, _850)));
        float _867 = ((_854 * _848) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_803 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_854 * _849) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_807 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_854 * _850) / cbModelParam._m0[34u].z) + ((((((_811 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        float _906 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_872.x + (-0.5));
        float _908 = _906 * (_872.y + (-0.5));
        float _909 = _906 * (_872.z + (-0.5));
        float _916 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_879.x + (-0.5));
        float _918 = _916 * (_879.y + (-0.5));
        float _919 = _916 * (_879.z + (-0.5));
        float _926 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_886.x + (-0.5));
        float _928 = _926 * (_886.y + (-0.5));
        float _929 = _926 * (_886.z + (-0.5));
        float _936 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_893.x + (-0.5));
        float _938 = _936 * (_893.y + (-0.5));
        float _939 = _936 * (_893.z + (-0.5));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = _907 * 0.5;
        float _944 = _917 * 0.5;
        float _945 = _927 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _960 = (dot(vec3(_500, _501, _502), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _970 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3699 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_972 + 1.0))) + _977) * _940;
        float _987 = _908 * 0.5;
        float _988 = _918 * 0.5;
        float _989 = _928 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_500, _501, _502), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3732 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1014 + 1.0))) + _1019) * _941;
        float _1029 = _909 * 0.5;
        float _1030 = _919 * 0.5;
        float _1031 = _929 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_500, _501, _502), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3765 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1056 + 1.0))) + _1061) * _942;
        _1078 = _909;
        _1080 = _908;
        _1081 = _907;
        _1082 = _919;
        _1083 = _918;
        _1084 = _917;
        _1085 = _929;
        _1086 = _928;
        _1087 = _927;
        _1088 = _942;
        _1089 = _941;
        _1090 = _940;
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
    }
    else
    {
        _1078 = _1079;
        _1080 = _1079;
        _1081 = _1079;
        _1082 = _1079;
        _1083 = _1079;
        _1084 = _1079;
        _1085 = _1079;
        _1086 = _1079;
        _1087 = _1079;
        _1088 = _1079;
        _1089 = _1079;
        _1090 = _1079;
        _1091 = 0.0;
        _1092 = 0.0;
        _1093 = 0.0;
    }
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1122 = fma(_749, cbModelParam._m0[30u].z, fma(_745, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _741));
        float _1126 = fma(_749, cbModelParam._m0[31u].z, fma(_745, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _741));
        float _1130 = fma(_749, cbModelParam._m0[32u].z, fma(_745, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _741));
        float _1153 = _741 + _500;
        float _1154 = _745 + _501;
        float _1155 = _749 + _502;
        float _1165 = fma(_1155, cbModelParam._m0[30u].z, fma(_1154, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1153)) - _1122;
        float _1166 = fma(_1155, cbModelParam._m0[31u].z, fma(_1154, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1153)) - _1126;
        float _1167 = fma(_1155, cbModelParam._m0[32u].z, fma(_1154, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1153)) - _1130;
        float _1171 = inversesqrt(dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167)));
        float _1184 = ((_1171 * _1165) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1122 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1171 * _1166) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1126 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1171 * _1167) / cbModelParam._m0[35u].z) + ((((((_1130 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        float _1221 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1188.x + (-0.5));
        float _1223 = _1221 * (_1188.y + (-0.5));
        float _1224 = _1221 * (_1188.z + (-0.5));
        float _1231 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1195.x + (-0.5));
        float _1233 = _1231 * (_1195.y + (-0.5));
        float _1234 = _1231 * (_1195.z + (-0.5));
        float _1241 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1202.x + (-0.5));
        float _1243 = _1241 * (_1202.y + (-0.5));
        float _1244 = _1241 * (_1202.z + (-0.5));
        float _1251 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1209.x + (-0.5));
        float _1253 = _1251 * (_1209.y + (-0.5));
        float _1254 = _1251 * (_1209.z + (-0.5));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = _1222 * 0.5;
        float _1259 = _1232 * 0.5;
        float _1260 = _1242 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_500, _501, _502), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3806 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3817 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3828 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1285 + 1.0))) + _1290) * _1255;
        float _1300 = _1223 * 0.5;
        float _1301 = _1233 * 0.5;
        float _1302 = _1243 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_500, _501, _502), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3861 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1327 + 1.0))) + _1332) * _1256;
        float _1342 = _1224 * 0.5;
        float _1343 = _1234 * 0.5;
        float _1344 = _1244 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_500, _501, _502), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3894 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1369 + 1.0))) + _1374) * _1257;
        _1391 = _1224;
        _1392 = _1223;
        _1393 = _1222;
        _1394 = _1234;
        _1395 = _1233;
        _1396 = _1232;
        _1397 = _1244;
        _1398 = _1243;
        _1399 = _1242;
        _1400 = _1257;
        _1401 = _1256;
        _1402 = _1255;
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
    }
    else
    {
        _1391 = _1079;
        _1392 = _1079;
        _1393 = _1079;
        _1394 = _1079;
        _1395 = _1079;
        _1396 = _1079;
        _1397 = _1079;
        _1398 = _1079;
        _1399 = _1079;
        _1400 = _1079;
        _1401 = _1079;
        _1402 = _1079;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1091)) + _1091;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1092)) + _1092;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1093)) + _1093;
    float _1438 = fma(_1417, cbSceneParam._m0[89u].z, fma(_1416, cbSceneParam._m0[89u].y, _1415 * cbSceneParam._m0[89u].x));
    float _1441 = fma(_1417, cbSceneParam._m0[90u].z, fma(_1416, cbSceneParam._m0[90u].y, _1415 * cbSceneParam._m0[90u].x));
    float _1444 = fma(_1417, cbSceneParam._m0[91u].z, fma(_1416, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1415));
    float _1459 = _685 * 0.5;
    float _1460 = _686 * 0.5;
    float _1461 = _687 * 0.5;
    float _1462 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1465 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1468 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1502;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1475 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1078, _1082, _1085, _1088));
        float _1479 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1483 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1490 = dot(vec4(cbModelParam._m0[39u]), vec4(_1459, _1460, _1461, 1.0));
        _1502 = dot(vec3(isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1490) ? 0.0 : (isnan(0.0) ? _1490 : max(0.0, _1490))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1502 = 1.0;
    }
    float _1513;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1504 = dot(vec4(cbModelParam._m0[40u]), vec4(_1459, _1460, _1461, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1504) ? 0.0 : (isnan(0.0) ? _1504 : max(0.0, _1504))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1517 = (_1513 * cbModelParam._m0[1u].x) + (_1502 * (1.0 - cbModelParam._m0[1u].x));
    float _1527 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _504);
    float _1528 = isnan(_1527) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1527 : min(cbModelParam._m0[25u].z, _1527));
    float _1610;
    float _1612;
    float _1614;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1577 = fma(_749, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _741)) + cbModelParam._m0[13u].w;
        float _1581 = fma(_749, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _741)) + cbModelParam._m0[14u].w;
        float _1585 = fma(_749, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _741)) + cbModelParam._m0[15u].w;
        float _1588 = fma(_687, cbModelParam._m0[13u].z, fma(_686, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _685));
        float _1591 = fma(_687, cbModelParam._m0[14u].z, fma(_686, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _685));
        float _1594 = fma(_687, cbModelParam._m0[15u].z, fma(_686, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _685));
        float _1622;
        if (_1588 > 0.0)
        {
            _1622 = abs((1.0 - _1577) / _1588);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1577 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1622 = frontier_phi_19_17_ladder;
        }
        float _1829;
        if (_1591 > 0.0)
        {
            _1829 = abs((1.0 - _1581) / _1591);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1581 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1829 = frontier_phi_28_24_ladder;
        }
        float _2083;
        if (_1594 > 0.0)
        {
            _2083 = abs((1.0 - _1585) / _1594);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1585 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2083 = frontier_phi_40_35_ladder;
        }
        float _2085 = isnan(_1829) ? _1622 : (isnan(_1622) ? _1829 : min(_1622, _1829));
        float _2086 = isnan(_2083) ? _2085 : (isnan(_2085) ? _2083 : min(_2085, _2083));
        float _2090 = (_2086 * _1588) + _1577;
        float _2091 = (_2086 * _1591) + _1581;
        float _2092 = (_2086 * _1594) + _1585;
        float _2093 = _2086 * 9.9999997473787516355514526367188e-05;
        float _2095 = (-1.0) - _2093;
        float _2097 = _2093 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2092 > _2097) || ((_2092 < _2095) || ((_2091 > _2097) || ((_2091 < _2095) || ((_2090 < _2095) || (_2090 > _2097))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2220 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2092, cbModelParam._m0[9u].z, fma(_2091, cbModelParam._m0[9u].y, _2090 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2092, cbModelParam._m0[10u].z, fma(_2091, cbModelParam._m0[10u].y, _2090 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2092, cbModelParam._m0[11u].z, fma(_2091, cbModelParam._m0[11u].y, _2090 * cbModelParam._m0[11u].x))), _1528);
            frontier_phi_18_40_ladder = _2220.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2220.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2220.x * cbModelParam._m0[1u].y;
        }
        _1610 = frontier_phi_18_40_ladder_2;
        _1612 = frontier_phi_18_40_ladder_1;
        _1614 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1598 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_685, _686, _687), _1528);
        _1610 = _1598.x * cbModelParam._m0[1u].y;
        _1612 = _1598.y * cbModelParam._m0[1u].y;
        _1614 = _1598.z * cbModelParam._m0[1u].y;
    }
    float _1618 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _504);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1618 : min(cbModelParam._m0[25u].w, _1618));
    float _1712;
    float _1714;
    float _1716;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1676 = fma(_749, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _741)) + cbModelParam._m0[21u].w;
        float _1680 = fma(_749, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _741)) + cbModelParam._m0[22u].w;
        float _1684 = fma(_749, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _741)) + cbModelParam._m0[23u].w;
        float _1687 = fma(_687, cbModelParam._m0[21u].z, fma(_686, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _685));
        float _1690 = fma(_687, cbModelParam._m0[22u].z, fma(_686, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _685));
        float _1693 = fma(_687, cbModelParam._m0[23u].z, fma(_686, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _685));
        float _1834;
        if (_1687 > 0.0)
        {
            _1834 = abs((1.0 - _1676) / _1687);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1676 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1834 = frontier_phi_30_26_ladder;
        }
        float _2110;
        if (_1690 > 0.0)
        {
            _2110 = abs((1.0 - _1680) / _1690);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1680 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2110 = frontier_phi_42_37_ladder;
        }
        float _2323;
        if (_1693 > 0.0)
        {
            _2323 = abs((1.0 - _1684) / _1693);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1684 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2323 = frontier_phi_51_48_ladder;
        }
        float _2325 = isnan(_2110) ? _1834 : (isnan(_1834) ? _2110 : min(_1834, _2110));
        float _2326 = isnan(_2323) ? _2325 : (isnan(_2325) ? _2323 : min(_2325, _2323));
        float _2330 = (_2326 * _1687) + _1676;
        float _2331 = (_2326 * _1690) + _1680;
        float _2332 = (_2326 * _1693) + _1684;
        float _2333 = _2326 * 9.9999997473787516355514526367188e-05;
        float _2334 = (-1.0) - _2333;
        float _2336 = _2333 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2332 > _2336) || ((_2332 < _2334) || ((_2331 > _2336) || ((_2331 < _2334) || ((_2330 < _2334) || (_2330 > _2336))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2332, cbModelParam._m0[17u].z, fma(_2331, cbModelParam._m0[17u].y, _2330 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2332, cbModelParam._m0[18u].z, fma(_2331, cbModelParam._m0[18u].y, _2330 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2332, cbModelParam._m0[19u].z, fma(_2331, cbModelParam._m0[19u].y, _2330 * cbModelParam._m0[19u].x))), _1619);
            frontier_phi_27_51_ladder = _2535.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2535.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2535.x * cbModelParam._m0[1u].z;
        }
        _1712 = frontier_phi_27_51_ladder_2;
        _1714 = frontier_phi_27_51_ladder_1;
        _1716 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1696 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_685, _686, _687), _1619);
        _1712 = _1696.x * cbModelParam._m0[1u].z;
        _1714 = _1696.y * cbModelParam._m0[1u].z;
        _1716 = _1696.z * cbModelParam._m0[1u].z;
    }
    float _1729 = (((_712 * _662) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1712 - _1610)) + _1610);
    float _1731 = (((_712 * _664) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1714 - _1612)) + _1612);
    float _1733 = (((_712 * _665) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1716 - _1614)) + _1614);
    float _1736 = fma(_1733, cbSceneParam._m0[89u].z, fma(_1731, cbSceneParam._m0[89u].y, _1729 * cbSceneParam._m0[89u].x));
    float _1739 = fma(_1733, cbSceneParam._m0[90u].z, fma(_1731, cbSceneParam._m0[90u].y, _1729 * cbSceneParam._m0[90u].x));
    float _1742 = fma(_1733, cbSceneParam._m0[91u].z, fma(_1731, cbSceneParam._m0[91u].y, _1729 * cbSceneParam._m0[91u].x));
    uvec4 _1752 = floatBitsToUint(cbInstanceData._m0[_636 + 5u]);
    uint _1754 = _1752.x * 14u;
    uint _1755 = _1754 + 13u;
    float _1762 = _677 + (-1.0);
    float _1767 = (cbLight._m0[_1755].x * _1762) + 1.0;
    float _1768 = (cbLight._m0[_1755].y * _1762) + 1.0;
    float _1769 = (cbLight._m0[_1755].z * _1762) + 1.0;
    float _1770 = (cbLight._m0[_1755].w * _1762) + 1.0;
    uint _1771 = _1754 + 5u;
    float _1777 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
    uint _1781 = _1754 + 4u;
    float _1788 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
    uint _1792 = _1754 | 1u;
    float _1803 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_500, _501, _502));
    float _1806 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_500, _501, _502));
    float _4030 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _4041 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1811 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 0.3183098733425140380859375;
    float _1813 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.3183098733425140380859375;
    float _1820 = ((cbLight._m0[_1771].x * _1777) * _1813) + ((cbLight._m0[_1781].x * _1788) * _1811);
    float _1821 = ((_1777 * cbLight._m0[_1771].y) * _1813) + ((_1788 * cbLight._m0[_1781].y) * _1811);
    float _1822 = ((_1777 * cbLight._m0[_1771].z) * _1813) + ((_1788 * cbLight._m0[_1781].z) * _1811);
    uvec4 _1826 = floatBitsToUint(cbLight._m0[_1754 + 12u]);
    bool _1828 = _1826.x == 0u;
    float _1839;
    float _1841;
    float _1843;
    if (_1828)
    {
        _1839 = _1820;
        _1841 = _1821;
        _1843 = _1822;
    }
    else
    {
        uint _1847 = _1754 + 6u;
        float _1863 = (dot(vec3(cbLight._m0[_1754 + 2u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _1864 = _1863 * _1863;
        float _4052 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1866 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _1839 = (((cbLight._m0[_1847].x * 0.3183098733425140380859375) * _1865) * _1866) + _1820;
        _1841 = (((cbLight._m0[_1847].y * 0.3183098733425140380859375) * _1865) * _1866) + _1821;
        _1843 = (((cbLight._m0[_1847].z * 0.3183098733425140380859375) * _1865) * _1866) + _1822;
    }
    bool _1846 = _1826.y == 0u;
    float _1884;
    float _1886;
    float _1888;
    if (_1846)
    {
        _1884 = _1839;
        _1886 = _1841;
        _1888 = _1843;
    }
    else
    {
        uint _2054 = _1754 + 7u;
        float _2070 = (dot(vec3(cbLight._m0[_1754 + 3u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _2071 = _2070 * _2070;
        float _4068 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2072 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2073 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _1884 = (((cbLight._m0[_2054].x * 0.3183098733425140380859375) * _2072) * _2073) + _1839;
        _1886 = (((cbLight._m0[_2054].y * 0.3183098733425140380859375) * _2072) * _2073) + _1841;
        _1888 = (((cbLight._m0[_2054].z * 0.3183098733425140380859375) * _2072) * _2073) + _1843;
    }
    uint _1891 = _1754 + 8u;
    float _1904 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1754].w)) * _504) * 0.949999988079071044921875);
    float _1905 = _1904 * _1904;
    float _1906 = cbLight._m0[_1754].x + _580;
    float _1907 = cbLight._m0[_1754].y + _581;
    float _1908 = cbLight._m0[_1754].z + _582;
    float _1912 = inversesqrt(dot(vec3(_1906, _1907, _1908), vec3(_1906, _1907, _1908)));
    float _1913 = _1912 * _1906;
    float _1914 = _1912 * _1907;
    float _1915 = _1912 * _1908;
    float _1916 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1754].xyz));
    float _4084 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1919 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _1920 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _1921 = dot(vec3(_500, _501, _502), vec3(_1913, _1914, _1915));
    float _4106 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1924 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _1925 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_1913, _1914, _1915));
    float _4117 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1929 = _1905 * _1905;
    float _1933 = ((_1924 * _1924) * (_1929 + (-1.0))) + 1.0;
    float _1941 = exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0);
    float _1942 = 0.959999978542327880859375 - _659;
    float _1944 = 0.959999978542327880859375 - _660;
    float _1945 = 0.959999978542327880859375 - _661;
    float _1952 = 1.0 - _1905;
    float _1963 = (0.5 / (((_1920 * ((_1919 * _1952) + _1905)) + 9.9999999392252902907785028219223e-09) + (((_1920 * _1952) + _1905) * _1919))) * _1919;
    float _4128 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1965 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1929 / ((_1933 * _1933) * 3.141590118408203125));
    uint _1976 = _1754 + 9u;
    float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1792].w)) * _504) * 0.949999988079071044921875);
    float _1988 = _1987 * _1987;
    float _1989 = cbLight._m0[_1792].x + _580;
    float _1990 = cbLight._m0[_1792].y + _581;
    float _1991 = cbLight._m0[_1792].z + _582;
    float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
    float _1996 = _1995 * _1989;
    float _1997 = _1995 * _1990;
    float _1998 = _1995 * _1991;
    float _1999 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1792].xyz));
    float _4139 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _2003 = dot(vec3(_500, _501, _502), vec3(_1996, _1997, _1998));
    float _4150 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2007 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_1996, _1997, _1998));
    float _4161 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2011 = _1988 * _1988;
    float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
    float _2022 = exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0);
    float _2029 = 1.0 - _1988;
    float _2039 = (0.5 / (((_1920 * ((_2002 * _2029) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_1920 * _2029) + _1988) * _2002))) * _2002;
    float _4172 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2041 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
    float _2051 = (((((_2022 * _1942) + _662) * cbLight._m0[_1976].x) * _2041) * _1777) + (((((_1941 * _1942) + _662) * cbLight._m0[_1891].x) * _1965) * _1788);
    float _2052 = (((((_2022 * _1944) + _664) * cbLight._m0[_1976].y) * _2041) * _1777) + (((((_1941 * _1944) + _664) * cbLight._m0[_1891].y) * _1965) * _1788);
    float _2053 = (((((_2022 * _1945) + _665) * cbLight._m0[_1976].z) * _2041) * _1777) + (((((_1941 * _1945) + _665) * cbLight._m0[_1891].z) * _1965) * _1788);
    float _2115;
    float _2117;
    float _2119;
    if (_1828)
    {
        _2115 = _2051;
        _2117 = _2052;
        _2119 = _2053;
    }
    else
    {
        uint _2121 = _1754 + 2u;
        uint _2125 = _1754 + 10u;
        float _2139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _504) * 0.949999988079071044921875);
        float _2140 = _2139 * _2139;
        float _2141 = cbLight._m0[_2121].x + _580;
        float _2142 = cbLight._m0[_2121].y + _581;
        float _2143 = cbLight._m0[_2121].z + _582;
        float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
        float _2148 = _2147 * _2141;
        float _2149 = _2147 * _2142;
        float _2150 = _2147 * _2143;
        float _2151 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2121].xyz));
        float _4183 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2155 = dot(vec3(_500, _501, _502), vec3(_2148, _2149, _2150));
        float _4194 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2159 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2148, _2149, _2150));
        float _4205 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2163 = _2140 * _2140;
        float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
        float _2174 = exp2(log2(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * 5.0);
        float _2181 = 1.0 - _2140;
        float _2191 = (0.5 / (((_1920 * ((_2154 * _2181) + _2140)) + 9.9999999392252902907785028219223e-09) + (((_1920 * _2181) + _2140) * _2154))) * _2154;
        float _4216 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2193 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
        float _2194 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _2115 = (((((_2174 * _1942) + _662) * cbLight._m0[_2125].x) * _2193) * _2194) + _2051;
        _2117 = (((((_2174 * _1944) + _664) * cbLight._m0[_2125].y) * _2193) * _2194) + _2052;
        _2119 = (((((_2174 * _1945) + _665) * cbLight._m0[_2125].z) * _2193) * _2194) + _2053;
    }
    float _2229;
    float _2231;
    float _2233;
    if (_1846)
    {
        _2229 = _2115;
        _2231 = _2117;
        _2233 = _2119;
    }
    else
    {
        uint _2240 = _1754 + 3u;
        uint _2244 = _1754 + 11u;
        float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2240].w)) * _504) * 0.949999988079071044921875);
        float _2259 = _2258 * _2258;
        float _2260 = cbLight._m0[_2240].x + _580;
        float _2261 = cbLight._m0[_2240].y + _581;
        float _2262 = cbLight._m0[_2240].z + _582;
        float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
        float _2267 = _2266 * _2260;
        float _2268 = _2266 * _2261;
        float _2269 = _2266 * _2262;
        float _2270 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2240].xyz));
        float _4232 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2274 = dot(vec3(_500, _501, _502), vec3(_2267, _2268, _2269));
        float _4243 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2278 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_2267, _2268, _2269));
        float _4254 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2282 = _2259 * _2259;
        float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
        float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0);
        float _2300 = 1.0 - _2259;
        float _2310 = (0.5 / (((_1920 * ((_2273 * _2300) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_1920 * _2300) + _2259) * _2273))) * _2273;
        float _4265 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2312 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
        float _2313 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _2229 = (((((_2293 * _1942) + _662) * cbLight._m0[_2244].x) * _2312) * _2313) + _2115;
        _2231 = (((((_2293 * _1944) + _664) * cbLight._m0[_2244].y) * _2312) * _2313) + _2117;
        _2233 = (((((_2293 * _1945) + _665) * cbLight._m0[_2244].z) * _2312) * _2313) + _2119;
    }
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    if (_1752.y == 0u)
    {
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2388;
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2388;
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2388;
        uvec4 _2403 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2404 = _2403.x;
        uint _2415 = uint((float(_2403.y) * floor(float(uint(cbSceneParam._m0[85u].y * _597) / _2404))) + floor(float(uint(cbSceneParam._m0[85u].x * _596) / _2404)));
        float _2425 = (log2(_2391 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2426 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        uint _2429 = uint(isnan(14.0) ? _2426 : (isnan(_2426) ? 14.0 : min(_2426, 14.0)));
        uvec4 _2434 = texelFetch(g_lightClusterGridBuffer, int(((_2429 << 2u) + (_2415 << 6u)) >> 2u));
        uint _2435 = _2434.x;
        uint _2436 = _2403.z;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        if (((((1u << ((_2436 >> 4u) & 15u)) + 4294967295u) & _2435) == 0u) || ((_2436 & 240u) == 0u))
        {
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
        }
        else
        {
            float _2541;
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            uint _2698 = 0u;
            uint _2707;
            bool _2708;
            for (;;)
            {
                _2707 = texelFetch(g_lightClassification, int((((_2429 << 5u) + (_2415 << 9u)) + (_2698 << 2u)) >> 2u)).x;
                _2708 = _2707 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2708)
                {
                    frontier_phi_68_pred = _2694;
                    frontier_phi_68_pred_1 = _2697;
                    frontier_phi_68_pred_2 = _2696;
                    frontier_phi_68_pred_3 = _2695;
                    frontier_phi_68_pred_4 = _2693;
                    frontier_phi_68_pred_5 = _2692;
                }
                else
                {
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    uint _2843;
                    _2837 = _2692;
                    _2838 = _2693;
                    _2839 = _2694;
                    _2840 = _2695;
                    _2841 = _2696;
                    _2842 = _2697;
                    _2843 = _2707;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    for (;;)
                    {
                        uint _2847 = uint(findLSB(_2843)) + (_2698 << 5u);
                        uint _2844 = (_2843 + 4294967295u) & _2843;
                        uint _2849 = _2847 * 48u;
                        vec4 _2863 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 3u)).x));
                        uint _2869 = (_2847 * 48u) + 4u;
                        vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2888 = (_2847 * 48u) + 8u;
                        vec3 _2899 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x));
                        float _2903 = _2863.x - _2389;
                        float _2904 = _2863.y - _2390;
                        float _2905 = _2863.z - _2391;
                        float _2906 = dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905));
                        float _2909 = inversesqrt(_2906);
                        float _2910 = _2909 * _2903;
                        float _2911 = _2909 * _2904;
                        float _2912 = _2909 * _2905;
                        float _2913 = dot(vec3(_617, _620, _623), vec3(_2910, _2911, _2912));
                        float _2918 = 1.0 - (_2906 * _2863.w);
                        float _4291 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2919 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _2920 = sqrt(_2906) * _2882.w;
                        float _2923 = 1.39999997615814208984375 / (_2920 + 1.39999997615814208984375);
                        float _2924 = _2923 * _2923;
                        float _2927 = ((1.0 - _2924) * _2913) + _2924;
                        float _2930 = _2920 * _2920;
                        float _2934 = ((isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0))) * _2919) / ((_2930 * 0.699999988079071044921875) + 1.0);
                        float _2938 = (-0.0) - _2389;
                        float _2939 = (-0.0) - _2390;
                        float _2940 = (-0.0) - _2391;
                        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
                        float _2945 = _2944 * _2938;
                        float _2946 = _2944 * _2939;
                        float _2947 = _2944 * _2940;
                        float _2955 = exp2(log2(1.0 / ((_2930 * 3.5) + 5.0)) * 0.25);
                        float _2956 = 1.0 - _693;
                        float _2963 = sqrt(1.0 - ((1.0 - (_2956 * _2956)) * (1.0 - (_2955 * _2955))));
                        float _2964 = _2963 * _2963;
                        float _2965 = _2964 * _2964;
                        float _2966 = _2945 + _2910;
                        float _2967 = _2946 + _2911;
                        float _2968 = _2947 + _2912;
                        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                        float _2976 = dot(vec3(_617, _620, _623), vec3(_2945, _2946, _2947));
                        float _4307 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2979 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _2980 = dot(vec3(_617, _620, _623), vec3(_2972 * _2966, _2972 * _2967, _2972 * _2968));
                        float _4318 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2983 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _2987 = ((_2983 * _2983) * (_2965 + (-1.0))) + 1.0;
                        float _2988 = _2923 * _2964;
                        float _2989 = _2988 * _2988;
                        float _2992 = ((1.0 - _2989) * _2913) + _2989;
                        float _4329 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _2994 = 1.0 - _2964;
                        float _3004 = (0.5 / (((_2993 * ((_2979 * _2994) + _2964)) + 9.9999999392252902907785028219223e-09) + (((_2993 * _2994) + _2964) * _2979))) * _2993;
                        float _4340 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3015 = (((_2965 * 3.1415927410125732421875) * (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) / ((_2987 * _2987) * ((_2930 * 2.1991131305694580078125) + 3.141590118408203125))) * _2919;
                        _2767 = (_2934 * _2882.x) + _2840;
                        _2768 = (_2934 * _2882.y) + _2841;
                        _2769 = (_2934 * _2882.z) + _2842;
                        _2764 = (_3015 * _2899.x) + _2837;
                        _2765 = (_3015 * _2899.y) + _2838;
                        _2766 = (_3015 * _2899.z) + _2839;
                        if (_2844 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2837 = _2764;
                            _2838 = _2765;
                            _2839 = _2766;
                            _2840 = _2767;
                            _2841 = _2768;
                            _2842 = _2769;
                            _2843 = _2844;
                        }
                    }
                    frontier_phi_68_pred = _2766;
                    frontier_phi_68_pred_1 = _2769;
                    frontier_phi_68_pred_2 = _2768;
                    frontier_phi_68_pred_3 = _2767;
                    frontier_phi_68_pred_4 = _2765;
                    frontier_phi_68_pred_5 = _2764;
                }
                _2545 = frontier_phi_68_pred;
                _2551 = frontier_phi_68_pred_1;
                _2549 = frontier_phi_68_pred_2;
                _2547 = frontier_phi_68_pred_3;
                _2543 = frontier_phi_68_pred_4;
                _2541 = frontier_phi_68_pred_5;
                uint _2699 = _2698 + 1u;
                if (_2699 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2692 = _2541;
                    _2693 = _2543;
                    _2694 = _2545;
                    _2695 = _2547;
                    _2696 = _2549;
                    _2697 = _2551;
                    _2698 = _2699;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
        }
        uvec4 _2554 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2555 = _2554.z;
        uint _2557 = (_2555 >> 8u) & 15u;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        if (((4294967295u << _2557) & _2435) == 0u)
        {
            _2660 = _2540;
            _2662 = _2542;
            _2664 = _2544;
            _2666 = _2546;
            _2668 = _2548;
            _2670 = _2550;
        }
        else
        {
            float _2685 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
            float _2686 = _2685 * _2389;
            float _2687 = _2685 * _2390;
            float _2688 = _2685 * _2391;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2557 < ((_2555 >> 12u) & 15u))
            {
                float _2661;
                float _2663;
                float _2665;
                float _2667;
                float _2669;
                float _2671;
                float _2820 = _2540;
                float _2821 = _2542;
                float _2822 = _2544;
                float _2823 = _2546;
                float _2824 = _2548;
                float _2825 = _2550;
                uint _2826 = _2557;
                uint _2835;
                bool _2836;
                for (;;)
                {
                    _2835 = texelFetch(g_lightClassification, int((((_2429 << 5u) + (_2415 << 9u)) + (_2826 << 2u)) >> 2u)).x;
                    _2836 = _2835 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2836)
                    {
                        frontier_phi_79_pred = _2825;
                        frontier_phi_79_pred_1 = _2824;
                        frontier_phi_79_pred_2 = _2823;
                        frontier_phi_79_pred_3 = _2822;
                        frontier_phi_79_pred_4 = _2821;
                        frontier_phi_79_pred_5 = _2820;
                    }
                    else
                    {
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3042 = _2820;
                        float _3043 = _2821;
                        float _3044 = _2822;
                        float _3045 = _2823;
                        float _3046 = _2824;
                        float _3047 = _2825;
                        uint _3048 = _2835;
                        uint _3049;
                        vec4 _3074;
                        float _3075;
                        vec4 _3090;
                        vec3 _3102;
                        vec4 _3118;
                        vec4 _3134;
                        float _3181;
                        bool _3182;
                        for (;;)
                        {
                            uint _3059 = ((_2826 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3048));
                            _3049 = (_3048 + 4294967295u) & _3048;
                            uint _3061 = _3059 * 40u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            _3075 = _3074.w;
                            uint _3077 = (_3059 * 40u) + 4u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3092 = (_3059 * 40u) + 8u;
                            _3102 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x));
                            uint _3105 = (_3059 * 40u) + 16u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3121 = (_3059 * 40u) + 20u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3137 = (_3059 * 40u) + 24u;
                            vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3156 = (_3059 * 40u) + 28u;
                            vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            _3181 = fma(_2391, _3169.z, fma(_2390, _3169.y, _3169.x * _2389)) + _3169.w;
                            _3182 = !((fma(_2391, _3150.z, fma(_2390, _3150.y, _3150.x * _2389)) + _3150.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3182)
                            {
                                float _3209 = _3074.x - _2389;
                                float _3210 = _3074.y - _2390;
                                float _3211 = _3074.z - _2391;
                                float _3212 = dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211));
                                float _3215 = inversesqrt(_3212);
                                float _3216 = _3215 * _3209;
                                float _3217 = _3215 * _3210;
                                float _3218 = _3215 * _3211;
                                float _3222 = 1.0 - (_3212 / (_3075 * _3075));
                                float _4351 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3227 = sqrt(_3212) * _3090.w;
                                float _3229 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                                float _3230 = _3229 * _3229;
                                float _3233 = ((1.0 - _3230) * dot(vec3(_3216, _3217, _3218), vec3(_617, _620, _623))) + _3230;
                                float _3236 = _3227 * _3227;
                                float _3240 = (fma(_2391, _3118.z, fma(_2390, _3118.y, _3118.x * _2389)) + _3118.w) / _3181;
                                float _3241 = (fma(_2391, _3134.z, fma(_2390, _3134.y, _3134.x * _2389)) + _3134.w) / _3181;
                                float _3245 = 1.0 - dot(vec2(_3240, _3241), vec2(_3240, _3241));
                                float _4367 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3247 = _3246 * (((isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))) * _3223) / ((_3236 * 0.699999988079071044921875) + 1.0));
                                float _3259 = exp2(log2(1.0 / ((_3236 * 3.5) + 5.0)) * 0.25);
                                float _3260 = 1.0 - _693;
                                float _3267 = sqrt(1.0 - ((1.0 - (_3260 * _3260)) * (1.0 - (_3259 * _3259))));
                                float _3268 = _3267 * _3267;
                                float _3269 = _3268 * _3268;
                                float _3270 = _3216 - _2686;
                                float _3271 = _3217 - _2687;
                                float _3272 = _3218 - _2688;
                                float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                                float _3280 = dot(vec3(_617, _620, _623), vec3((-0.0) - _2686, (-0.0) - _2687, (-0.0) - _2688));
                                float _4378 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3283 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3284 = dot(vec3(_617, _620, _623), vec3(_3276 * _3270, _3276 * _3271, _3276 * _3272));
                                float _4389 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3291 = ((_3287 * _3287) * (_3269 + (-1.0))) + 1.0;
                                float _3292 = _3229 * _3268;
                                float _3293 = _3292 * _3292;
                                float _3299 = ((1.0 - _3293) * dot(vec3(_617, _620, _623), vec3(_3216, _3217, _3218))) + _3293;
                                float _4400 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3301 = 1.0 - _3268;
                                float _3311 = (0.5 / (((_3300 * ((_3283 * _3301) + _3268)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3268) * _3283))) * _3300;
                                float _4411 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3321 = (_3246 * _3223) * (((_3269 * 3.1415927410125732421875) * (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) / ((_3291 * _3291) * ((_3236 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3247 * _3090.z;
                                frontier_phi_85_pred_1 = _3247 * _3090.y;
                                frontier_phi_85_pred_2 = _3247 * _3090.x;
                                frontier_phi_85_pred_3 = _3321 * _3102.z;
                                frontier_phi_85_pred_4 = _3321 * _3102.y;
                                frontier_phi_85_pred_5 = _3321 * _3102.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3330 = frontier_phi_85_pred;
                            _3329 = frontier_phi_85_pred_1;
                            _3328 = frontier_phi_85_pred_2;
                            _3327 = frontier_phi_85_pred_3;
                            _3326 = frontier_phi_85_pred_4;
                            _3325 = frontier_phi_85_pred_5;
                            _3032 = _3328 + _3045;
                            _3033 = _3329 + _3046;
                            _3034 = _3330 + _3047;
                            _3029 = _3325 + _3042;
                            _3030 = _3326 + _3043;
                            _3031 = _3327 + _3044;
                            if (_3049 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3049;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3034;
                        frontier_phi_79_pred_1 = _3033;
                        frontier_phi_79_pred_2 = _3032;
                        frontier_phi_79_pred_3 = _3031;
                        frontier_phi_79_pred_4 = _3030;
                        frontier_phi_79_pred_5 = _3029;
                    }
                    _2671 = frontier_phi_79_pred;
                    _2669 = frontier_phi_79_pred_1;
                    _2667 = frontier_phi_79_pred_2;
                    _2665 = frontier_phi_79_pred_3;
                    _2663 = frontier_phi_79_pred_4;
                    _2661 = frontier_phi_79_pred_5;
                    uint _2827 = _2826 + 1u;
                    if (_2827 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2820 = _2661;
                        _2821 = _2663;
                        _2822 = _2665;
                        _2823 = _2667;
                        _2824 = _2669;
                        _2825 = _2671;
                        _2826 = _2827;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2667;
                frontier_phi_60_61_ladder_1 = _2671;
                frontier_phi_60_61_ladder_2 = _2669;
                frontier_phi_60_61_ladder_3 = _2665;
                frontier_phi_60_61_ladder_4 = _2663;
                frontier_phi_60_61_ladder_5 = _2661;
            }
            else
            {
                frontier_phi_60_61_ladder = _2546;
                frontier_phi_60_61_ladder_1 = _2550;
                frontier_phi_60_61_ladder_2 = _2548;
                frontier_phi_60_61_ladder_3 = _2544;
                frontier_phi_60_61_ladder_4 = _2542;
                frontier_phi_60_61_ladder_5 = _2540;
            }
            _2660 = frontier_phi_60_61_ladder_5;
            _2662 = frontier_phi_60_61_ladder_4;
            _2664 = frontier_phi_60_61_ladder_3;
            _2666 = frontier_phi_60_61_ladder;
            _2668 = frontier_phi_60_61_ladder_2;
            _2670 = frontier_phi_60_61_ladder_1;
        }
        float _2675 = isnan(1.0) ? _677 : (isnan(_677) ? 1.0 : min(_677, 1.0));
        _2447 = (_2675 * _2666) + _1884;
        _2449 = (_2675 * _2668) + _1886;
        _2451 = (_2675 * _2670) + _1888;
        _2453 = ((_2660 * _662) * _2675) + _2229;
        _2455 = ((_2662 * _664) * _2675) + _2231;
        _2457 = ((_2664 * _665) * _2675) + _2233;
    }
    else
    {
        _2447 = _1884;
        _2449 = _1886;
        _2451 = _1888;
        _2453 = _2229;
        _2455 = _2231;
        _2457 = _2233;
    }
    float _4427 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4438 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4449 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4460 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _2475 = ((isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2447 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _677))) + ((_2453 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1517)) * cbPerFrame._m0[3u].x);
    float _2476 = ((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2449 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _677))) + ((_2455 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1517)) * cbPerFrame._m0[3u].x);
    float _2477 = ((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2451 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _677))) + ((_2457 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1517)) * cbPerFrame._m0[3u].x);
    float _2478 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2479 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2480 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2485 = cbInstanceData._m0[_636 + 6u].w * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)));
    float _2490 = _596 / cbSceneParam._m0[86u].x;
    float _2491 = _597 / cbSceneParam._m0[86u].y;
    vec4 _2505 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2490, _2491, (log2((isnan(cbSceneParam._m0[77u].w) ? _522 : (isnan(_522) ? cbSceneParam._m0[77u].w : min(_522, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2507 = _2505.x;
    float _2508 = _2505.y;
    float _2509 = _2505.z;
    float _2510 = _2505.w;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_522 > cbSceneParam._m0[78u].w)
    {
        float _2565 = isnan(_522) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _522 : min(cbSceneParam._m0[80u].w, _522));
        float _2566 = _2565 / _522;
        float _2577 = _2566 * _573;
        float _2578 = _574 * _2566;
        float _2579 = (-0.0) - _2578;
        float _2580 = _2566 * _575;
        float _2582 = (cbSceneParam._m0[77u].w * _2579) / _2565;
        float _2583 = _2582 + cbSceneParam._m0[79u].w;
        float _2584 = cbSceneParam._m0[79u].w - _2578;
        float _2590 = sqrt(((_2577 * _2577) + (_2578 * _2578)) + (_2580 * _2580));
        float _2593 = (1.0 - (cbSceneParam._m0[77u].w / _2565)) * _2590;
        float _2598 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2600 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2777;
        if (abs((_2579 - _2582) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2777 = ((((_2583 > 0.0) ? exp2(_2598 * _2583) : (2.0 - exp2(_2600 * _2583))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2593;
        }
        else
        {
            float _2721 = 1.0 / cbSceneParam._m0[80u].x;
            float _2722 = isnan(_2584) ? _2583 : (isnan(_2583) ? _2584 : max(_2583, _2584));
            float _2723 = isnan(_2584) ? _2583 : (isnan(_2583) ? _2584 : min(_2583, _2584));
            float _2732 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : min(_2722, 0.0));
            float _2733 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : min(_2723, 0.0));
            _2777 = ((abs(_2590 / _2579) * cbSceneParam._m0[80u].y) * ((((_2732 - _2733) * 2.0) - ((exp2(_2598 * (isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0)))) - exp2(_2598 * (isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0))))) * _2721)) - ((exp2(_2600 * _2732) - exp2(_2600 * _2733)) * _2721))) + (_2593 * cbSceneParam._m0[80u].z);
        }
        vec4 _2779 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2490, _2491, 1.0), 0.0);
        float _2788 = exp2((_2777 * (-1.44269502162933349609375)) * (1.0 - _2779.w));
        float _2789 = log2(_2788);
        float _2805 = log2(_2510);
        _2602 = (exp2(_2805 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].x)) * _2779.x) / cbSceneParam._m0[78u].x)) + _2507;
        _2604 = (exp2(_2805 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].y)) * _2779.y) / cbSceneParam._m0[78u].y)) + _2508;
        _2606 = (exp2(_2805 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].z)) * _2779.z) / cbSceneParam._m0[78u].z)) + _2509;
        _2608 = _2788 * _2510;
    }
    else
    {
        _2602 = _2507;
        _2604 = _2508;
        _2606 = _2509;
        _2608 = _2510;
    }
    bool _2815;
    vec4 _2618;
    vec4 _2640;
    float _2642;
    float _2646;
    float _2647;
    float _2648;
    float _2649;
    bool _2659;
    for (;;)
    {
        _2618 = cbMatDynParam._m0[0u];
        float _2620 = roundEven(_2618.y);
        bool _2621 = _2620 == 3.0;
        float _2622 = log2(_2608);
        float _2629 = exp2(_2622 * cbSceneParam._m0[78u].x) * _2478;
        float _2630 = exp2(_2622 * cbSceneParam._m0[78u].y) * _2479;
        float _2631 = exp2(_2622 * cbSceneParam._m0[78u].z) * _2480;
        float _2638 = _585 + (-0.5);
        _2640 = cbMtdParam._m0[1u];
        _2642 = _2640.y * _2638;
        float _2645 = (_2620 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2646 = _2645 * (_2621 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2602)));
        _2647 = _2645 * (_2621 ? _2630 : (_2630 + (cbSceneParam._m0[72u].w * _2604)));
        _2648 = _2645 * (_2621 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2606)));
        _2649 = _2638 * 0.999000012874603271484375;
        _2659 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2659)
        {
            if ((cbInstanceData._m0[_636 + 7u].x + _2649) < 0.5)
            {
                _2815 = true;
                break;
            }
        }
        uint _2756 = _638 + uint(_2618.w);
        if ((cbInstanceData._m0[_2756].w < 1.0) && ((cbInstanceData._m0[_2756].w + _2649) < 0.5))
        {
            _2815 = true;
            break;
        }
        if ((_2642 + _362) < _2640.x)
        {
            _2815 = true;
            break;
        }
        _2815 = false;
        break;
    }
    float _3020;
    if (_2815)
    {
        discard_state = true;
        _3020 = 0.0;
    }
    else
    {
        _3020 = _2485;
    }
    SV_Target.x = _2646;
    SV_Target.y = _2647;
    SV_Target.z = _2648;
    SV_Target.w = _3020;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2485;
    discard_exit();
}


