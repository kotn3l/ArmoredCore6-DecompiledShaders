#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1022;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    uint _240 = uint(int(floor(cbMtdParam._m0[10u].z)));
    float _241 = fract(cbMtdParam._m0[10u].z);
    uint _242 = _240 + 1u;
    uint _243 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _246 = float(int(_240 - _243 * (_240 / _243)));
    float _250 = float(int(_242 - _243 * (_242 / _243)));
    float _254 = 1.0 / cbMtdParam._m0[10u].w;
    float _256 = 1.0 / cbMtdParam._m0[11u].x;
    float _257 = fract(TEXCOORD_1.x);
    float _258 = fract(TEXCOORD_1.y);
    float _260 = (_257 + (_246 - cbMtdParam._m0[10u].w * trunc(_246 / cbMtdParam._m0[10u].w))) * _254;
    float _262 = (_258 + floor(_246 / cbMtdParam._m0[10u].w)) * _256;
    float _264 = (_257 + (_250 - cbMtdParam._m0[10u].w * trunc(_250 / cbMtdParam._m0[10u].w))) * _254;
    float _266 = (_258 + floor(_250 / cbMtdParam._m0[10u].w)) * _256;
    vec4 _279 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _264) + cbTextureTilingScale._m0[0u].z, (_266 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _290 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _260) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _262) + cbTextureTilingScale._m0[0u].w));
    float _292 = _290.x;
    float _293 = _290.y;
    float _294 = _290.z;
    float _295 = _290.w;
    float _308 = (((_279.x - _292) * _241) + _292) * cbMtdParam._m0[9u].x;
    float _309 = (((_279.y - _293) * _241) + _293) * cbMtdParam._m0[9u].y;
    float _310 = (((_279.z - _294) * _241) + _294) * cbMtdParam._m0[9u].z;
    vec4 _320 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _322 = _320.x;
    bool _329 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _345 = ((_329 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _322)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _322))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3646 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _349 = ((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * (((_279.w - _295) * _241) + _295)) * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)));
    vec4 _371 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _262) + cbTextureTilingScale._m0[2u].w));
    float _373 = _371.x;
    float _377 = (_373 + cbMtdParam._m0[10u].x) + ((texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _266) + cbTextureTilingScale._m0[2u].w)).x - _373) * _241);
    vec4 _389 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _264) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _266) + cbTextureTilingScale._m0[1u].w));
    float _396 = (_389.x * 2.0) + (-1.0);
    float _398 = (_389.y * 2.0) + (-1.0);
    float _402 = 1.0 - dot(vec2(_396, _398), vec2(_396, _398));
    float _3657 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _404 = sqrt(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)));
    float _407 = fma(_404, _218, fma(_398, _211, _396 * _197));
    float _410 = fma(_404, _219, fma(_398, _212, _396 * _198));
    float _413 = fma(_404, _220, fma(_398, _213, _396 * _199));
    float _417 = inversesqrt(dot(vec3(_407, _410, _413), vec3(_407, _410, _413)));
    vec4 _425 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _260) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _262) + cbTextureTilingScale._m0[1u].w));
    float _431 = (_425.x * 2.0) + (-1.0);
    float _432 = (_425.y * 2.0) + (-1.0);
    float _436 = 1.0 - dot(vec2(_431, _432), vec2(_431, _432));
    float _3668 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _438 = sqrt(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)));
    float _441 = fma(_438, _218, fma(_432, _211, _431 * _197));
    float _444 = fma(_438, _219, fma(_432, _212, _431 * _198));
    float _447 = fma(_438, _220, fma(_432, _213, _431 * _199));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    float _452 = _451 * _441;
    float _453 = _451 * _444;
    float _454 = _451 * _447;
    float _463 = (((_417 * _413) - _454) * _241) + _454;
    float _466 = (((((_417 * _407) - _452) * _241) + _452) * 2.0) + (-1.0);
    float _467 = (((((_417 * _410) - _453) * _241) + _453) * 2.0) + (-1.0);
    float _468 = dot(vec2(_466, _467), vec2(_466, _467));
    float _3679 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = sqrt(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))));
    float _476 = fma(_473, _218, fma(_467, _211, _466 * _197));
    float _479 = fma(_473, _219, fma(_467, _212, _466 * _198));
    float _482 = fma(_473, _220, fma(_467, _213, _466 * _199));
    float _486 = inversesqrt(dot(vec3(_476, _479, _482), vec3(_476, _479, _482)));
    float _487 = _486 * _476;
    float _488 = _486 * _479;
    float _489 = _486 * _482;
    float _3690 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _490 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _491 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _3712 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3723 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3734 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3745 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _495 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _500 = _329 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _551 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _541);
    float _552 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _541);
    float _553 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _541);
    float _557 = inversesqrt(dot(vec3(_551, _552, _553), vec3(_551, _552, _553)));
    float _558 = _551 * _557;
    float _559 = _552 * _557;
    float _560 = _553 * _557;
    float _565 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _566 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _587 = fma(_489, cbSceneParam._m0[5u].z, fma(_488, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _487));
    float _590 = fma(_489, cbSceneParam._m0[6u].z, fma(_488, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _487));
    float _593 = fma(_489, cbSceneParam._m0[7u].z, fma(_488, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _487));
    uint _606 = uint(roundEven(NORMAL.w)) * 13u;
    uint _609 = (_606 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _615 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_609].x;
    float _616 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_609].y;
    float _617 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_609].z;
    float _3756 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _621 = 1.0 - _495;
    float _622 = _618 * _621;
    float _623 = _619 * _621;
    float _624 = _620 * _621;
    float _629 = (_618 + (-0.039999999105930328369140625)) * _495;
    float _630 = (_619 + (-0.039999999105930328369140625)) * _495;
    float _631 = (_620 + (-0.039999999105930328369140625)) * _495;
    float _632 = _629 + 0.039999999105930328369140625;
    float _634 = _630 + 0.039999999105930328369140625;
    float _635 = _631 + 0.039999999105930328369140625;
    vec4 _644 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _565, cbSceneParam._m0[86u].y * _566));
    float _647 = _644.x * TEXCOORD_1.w;
    float _648 = dot(vec3(_487, _488, _489), vec3(_558, _559, _560));
    float _651 = _648 * 2.0;
    float _655 = (_651 * _487) - _558;
    float _656 = (_651 * _488) - _559;
    float _657 = (_651 * _489) - _560;
    float _661 = abs(dot(vec3(_558, _559, _560), vec3(_487, _488, _489)));
    float _3789 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _663 = sqrt(_491);
    float _676 = exp2((_663 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_663 * 3.0));
    float _682 = (1.0 - _676) * ((_663 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _683 = _676 * _663;
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1021;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _746 = fma(_719, cbModelParam._m0[26u].z, fma(_715, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711));
        float _750 = fma(_719, cbModelParam._m0[27u].z, fma(_715, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711));
        float _754 = fma(_719, cbModelParam._m0[28u].z, fma(_715, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711));
        float _779 = _711 + _487;
        float _780 = _715 + _488;
        float _781 = _719 + _489;
        float _791 = fma(_781, cbModelParam._m0[26u].z, fma(_780, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779)) - _746;
        float _792 = fma(_781, cbModelParam._m0[27u].z, fma(_780, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779)) - _750;
        float _793 = fma(_781, cbModelParam._m0[28u].z, fma(_780, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779)) - _754;
        float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
        float _810 = ((_797 * _791) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_746 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_797 * _792) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_750 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _812 = ((_797 * _793) / cbModelParam._m0[34u].z) + ((((((_754 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        float _849 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_815.x + (-0.5));
        float _851 = _849 * (_815.y + (-0.5));
        float _852 = _849 * (_815.z + (-0.5));
        float _859 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_822.x + (-0.5));
        float _861 = _859 * (_822.y + (-0.5));
        float _862 = _859 * (_822.z + (-0.5));
        float _869 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_829.x + (-0.5));
        float _871 = _869 * (_829.y + (-0.5));
        float _872 = _869 * (_829.z + (-0.5));
        float _879 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_836.x + (-0.5));
        float _881 = _879 * (_836.y + (-0.5));
        float _882 = _879 * (_836.z + (-0.5));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = _850 * 0.5;
        float _887 = _860 * 0.5;
        float _888 = _870 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _903 = (dot(vec3(_487, _488, _489), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _913 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3837 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_915 + 1.0))) + _920) * _883;
        float _930 = _851 * 0.5;
        float _931 = _861 * 0.5;
        float _932 = _871 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_487, _488, _489), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3870 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_957 + 1.0))) + _962) * _884;
        float _972 = _852 * 0.5;
        float _973 = _862 * 0.5;
        float _974 = _872 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_487, _488, _489), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3903 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_999 + 1.0))) + _1004) * _885;
        _1021 = _852;
        _1023 = _851;
        _1024 = _850;
        _1025 = _862;
        _1026 = _861;
        _1027 = _860;
        _1028 = _872;
        _1029 = _871;
        _1030 = _870;
        _1031 = _885;
        _1032 = _884;
        _1033 = _883;
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
    }
    else
    {
        _1021 = _1022;
        _1023 = _1022;
        _1024 = _1022;
        _1025 = _1022;
        _1026 = _1022;
        _1027 = _1022;
        _1028 = _1022;
        _1029 = _1022;
        _1030 = _1022;
        _1031 = _1022;
        _1032 = _1022;
        _1033 = _1022;
        _1034 = 0.0;
        _1035 = 0.0;
        _1036 = 0.0;
    }
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1062 = fma(_719, cbModelParam._m0[30u].z, fma(_715, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _711));
        float _1066 = fma(_719, cbModelParam._m0[31u].z, fma(_715, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _711));
        float _1070 = fma(_719, cbModelParam._m0[32u].z, fma(_715, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _711));
        float _1093 = _711 + _487;
        float _1094 = _715 + _488;
        float _1095 = _719 + _489;
        float _1105 = fma(_1095, cbModelParam._m0[30u].z, fma(_1094, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1093)) - _1062;
        float _1106 = fma(_1095, cbModelParam._m0[31u].z, fma(_1094, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1093)) - _1066;
        float _1107 = fma(_1095, cbModelParam._m0[32u].z, fma(_1094, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1093)) - _1070;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1062 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1066 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[35u].z) + ((((((_1070 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1161 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1128.x + (-0.5));
        float _1163 = _1161 * (_1128.y + (-0.5));
        float _1164 = _1161 * (_1128.z + (-0.5));
        float _1171 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1135.x + (-0.5));
        float _1173 = _1171 * (_1135.y + (-0.5));
        float _1174 = _1171 * (_1135.z + (-0.5));
        float _1181 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1142.x + (-0.5));
        float _1183 = _1181 * (_1142.y + (-0.5));
        float _1184 = _1181 * (_1142.z + (-0.5));
        float _1191 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1149.x + (-0.5));
        float _1193 = _1191 * (_1149.y + (-0.5));
        float _1194 = _1191 * (_1149.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_487, _488, _489), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3966 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1225 + 1.0))) + _1230) * _1195;
        float _1240 = _1163 * 0.5;
        float _1241 = _1173 * 0.5;
        float _1242 = _1183 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_487, _488, _489), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3999 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1267 + 1.0))) + _1272) * _1196;
        float _1282 = _1164 * 0.5;
        float _1283 = _1174 * 0.5;
        float _1284 = _1184 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_487, _488, _489), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4032 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1309 + 1.0))) + _1314) * _1197;
        _1331 = _1164;
        _1332 = _1163;
        _1333 = _1162;
        _1334 = _1174;
        _1335 = _1173;
        _1336 = _1172;
        _1337 = _1184;
        _1338 = _1183;
        _1339 = _1182;
        _1340 = _1197;
        _1341 = _1196;
        _1342 = _1195;
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1022;
        _1332 = _1022;
        _1333 = _1022;
        _1334 = _1022;
        _1335 = _1022;
        _1336 = _1022;
        _1337 = _1022;
        _1338 = _1022;
        _1339 = _1022;
        _1340 = _1022;
        _1341 = _1022;
        _1342 = _1022;
        _1343 = 0.0;
        _1344 = 0.0;
        _1345 = 0.0;
    }
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1034)) + _1034;
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1035)) + _1035;
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1036)) + _1036;
    float _1378 = fma(_1357, cbSceneParam._m0[89u].z, fma(_1356, cbSceneParam._m0[89u].y, _1355 * cbSceneParam._m0[89u].x));
    float _1381 = fma(_1357, cbSceneParam._m0[90u].z, fma(_1356, cbSceneParam._m0[90u].y, _1355 * cbSceneParam._m0[90u].x));
    float _1384 = fma(_1357, cbSceneParam._m0[91u].z, fma(_1356, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1355));
    float _1399 = _655 * 0.5;
    float _1400 = _656 * 0.5;
    float _1401 = _657 * 0.5;
    float _1402 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1405 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1408 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1442;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1415 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1021, _1025, _1028, _1031));
        float _1419 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1423 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1024, _1027, _1030, _1033));
        float _1430 = dot(vec4(cbModelParam._m0[39u]), vec4(_1399, _1400, _1401, 1.0));
        _1442 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1430) ? 0.0 : (isnan(0.0) ? _1430 : max(0.0, _1430))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1442 = 1.0;
    }
    float _1453;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1444 = dot(vec4(cbModelParam._m0[40u]), vec4(_1399, _1400, _1401, 1.0));
        _1453 = dot(vec3(isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1453 = 1.0;
    }
    float _1457 = (_1453 * cbModelParam._m0[1u].x) + (_1442 * (1.0 - cbModelParam._m0[1u].x));
    float _1467 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _491);
    float _1468 = isnan(_1467) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1467 : min(cbModelParam._m0[25u].z, _1467));
    float _1550;
    float _1552;
    float _1554;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1517 = fma(_719, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711)) + cbModelParam._m0[13u].w;
        float _1521 = fma(_719, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711)) + cbModelParam._m0[14u].w;
        float _1525 = fma(_719, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711)) + cbModelParam._m0[15u].w;
        float _1528 = fma(_657, cbModelParam._m0[13u].z, fma(_656, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655));
        float _1531 = fma(_657, cbModelParam._m0[14u].z, fma(_656, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655));
        float _1534 = fma(_657, cbModelParam._m0[15u].z, fma(_656, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655));
        float _1562;
        if (_1528 > 0.0)
        {
            _1562 = abs((1.0 - _1517) / _1528);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1517 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1562 = frontier_phi_16_14_ladder;
        }
        float _1737;
        if (_1531 > 0.0)
        {
            _1737 = abs((1.0 - _1521) / _1531);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1521 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1737 = frontier_phi_25_21_ladder;
        }
        float _2033;
        if (_1534 > 0.0)
        {
            _2033 = abs((1.0 - _1525) / _1534);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1525 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2033 = frontier_phi_37_32_ladder;
        }
        float _2035 = isnan(_1737) ? _1562 : (isnan(_1562) ? _1737 : min(_1562, _1737));
        float _2036 = isnan(_2033) ? _2035 : (isnan(_2035) ? _2033 : min(_2035, _2033));
        float _2040 = (_2036 * _1528) + _1517;
        float _2041 = (_2036 * _1531) + _1521;
        float _2042 = (_2036 * _1534) + _1525;
        float _2043 = _2036 * 9.9999997473787516355514526367188e-05;
        float _2045 = (-1.0) - _2043;
        float _2047 = _2043 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2042 > _2047) || ((_2042 < _2045) || ((_2041 > _2047) || ((_2041 < _2045) || ((_2040 < _2045) || (_2040 > _2047))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2187 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2042, cbModelParam._m0[9u].z, fma(_2041, cbModelParam._m0[9u].y, _2040 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2042, cbModelParam._m0[10u].z, fma(_2041, cbModelParam._m0[10u].y, _2040 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2042, cbModelParam._m0[11u].z, fma(_2041, cbModelParam._m0[11u].y, _2040 * cbModelParam._m0[11u].x))), _1468);
            frontier_phi_15_37_ladder = _2187.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2187.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2187.z * cbModelParam._m0[1u].y;
        }
        _1550 = frontier_phi_15_37_ladder_1;
        _1552 = frontier_phi_15_37_ladder;
        _1554 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_655, _656, _657), _1468);
        _1550 = _1538.x * cbModelParam._m0[1u].y;
        _1552 = _1538.y * cbModelParam._m0[1u].y;
        _1554 = _1538.z * cbModelParam._m0[1u].y;
    }
    float _1558 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _491);
    float _1559 = isnan(_1558) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1558 : min(cbModelParam._m0[25u].w, _1558));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1616 = fma(_719, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711)) + cbModelParam._m0[21u].w;
        float _1620 = fma(_719, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711)) + cbModelParam._m0[22u].w;
        float _1624 = fma(_719, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711)) + cbModelParam._m0[23u].w;
        float _1627 = fma(_657, cbModelParam._m0[21u].z, fma(_656, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655));
        float _1630 = fma(_657, cbModelParam._m0[22u].z, fma(_656, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655));
        float _1633 = fma(_657, cbModelParam._m0[23u].z, fma(_656, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655));
        float _1742;
        if (_1627 > 0.0)
        {
            _1742 = abs((1.0 - _1616) / _1627);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1616 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1742 = frontier_phi_27_23_ladder;
        }
        float _2060;
        if (_1630 > 0.0)
        {
            _2060 = abs((1.0 - _1620) / _1630);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1620 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2060 = frontier_phi_39_34_ladder;
        }
        float _2398;
        if (_1633 > 0.0)
        {
            _2398 = abs((1.0 - _1624) / _1633);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1624 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2398 = frontier_phi_49_46_ladder;
        }
        float _2400 = isnan(_2060) ? _1742 : (isnan(_1742) ? _2060 : min(_1742, _2060));
        float _2401 = isnan(_2398) ? _2400 : (isnan(_2400) ? _2398 : min(_2400, _2398));
        float _2405 = (_2401 * _1627) + _1616;
        float _2406 = (_2401 * _1630) + _1620;
        float _2407 = (_2401 * _1633) + _1624;
        float _2408 = _2401 * 9.9999997473787516355514526367188e-05;
        float _2409 = (-1.0) - _2408;
        float _2411 = _2408 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2407 > _2411) || ((_2407 < _2409) || ((_2406 > _2411) || ((_2406 < _2409) || ((_2405 < _2409) || (_2405 > _2411))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2529 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2407, cbModelParam._m0[17u].z, fma(_2406, cbModelParam._m0[17u].y, _2405 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2407, cbModelParam._m0[18u].z, fma(_2406, cbModelParam._m0[18u].y, _2405 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2407, cbModelParam._m0[19u].z, fma(_2406, cbModelParam._m0[19u].y, _2405 * cbModelParam._m0[19u].x))), _1559);
            frontier_phi_24_49_ladder = _2529.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2529.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2529.x * cbModelParam._m0[1u].z;
        }
        _1652 = frontier_phi_24_49_ladder_2;
        _1654 = frontier_phi_24_49_ladder_1;
        _1656 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1636 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_655, _656, _657), _1559);
        _1652 = _1636.x * cbModelParam._m0[1u].z;
        _1654 = _1636.y * cbModelParam._m0[1u].z;
        _1656 = _1636.z * cbModelParam._m0[1u].z;
    }
    float _1669 = (((_682 * _632) + _683) * _647) * ((cbModelParam._m0[1u].w * (_1652 - _1550)) + _1550);
    float _1671 = (((_682 * _634) + _683) * _647) * ((cbModelParam._m0[1u].w * (_1654 - _1552)) + _1552);
    float _1673 = (((_682 * _635) + _683) * _647) * ((cbModelParam._m0[1u].w * (_1656 - _1554)) + _1554);
    float _1676 = fma(_1673, cbSceneParam._m0[89u].z, fma(_1671, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1679 = fma(_1673, cbSceneParam._m0[90u].z, fma(_1671, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1682 = fma(_1673, cbSceneParam._m0[91u].z, fma(_1671, cbSceneParam._m0[91u].y, _1669 * cbSceneParam._m0[91u].x));
    float _1716 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1720 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1724 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1728 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1729 = _1716 / _1728;
    float _1730 = _1720 / _1728;
    float _1731 = _1724 / _1728;
    float _1878;
    float _1879;
    float _1880;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1758 = ((uint(_1731 > cbSceneParam._m0[59u].y) + uint(_1731 > cbSceneParam._m0[59u].x)) + uint(_1731 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1759 = _1758 + 43u;
        uint _1767 = _1758 + 44u;
        uint _1775 = _1758 + 45u;
        uint _1783 = _1758 + 46u;
        float _1794 = fma(_1728, cbSceneParam._m0[_1759].w, fma(_1724, cbSceneParam._m0[_1759].z, fma(_1720, cbSceneParam._m0[_1759].y, _1716 * cbSceneParam._m0[_1759].x)));
        float _1798 = fma(_1728, cbSceneParam._m0[_1767].w, fma(_1724, cbSceneParam._m0[_1767].z, fma(_1720, cbSceneParam._m0[_1767].y, _1716 * cbSceneParam._m0[_1767].x)));
        float _1806 = fma(_1728, cbSceneParam._m0[_1783].w, fma(_1724, cbSceneParam._m0[_1783].z, fma(_1720, cbSceneParam._m0[_1783].y, _1716 * cbSceneParam._m0[_1783].x)));
        float _1811 = cbSceneParam._m0[33u].z * _1806;
        float _1813 = cbSceneParam._m0[33u].w * _1806;
        float _1816 = fma(_1728, cbSceneParam._m0[_1775].w, fma(_1724, cbSceneParam._m0[_1775].z, fma(_1720, cbSceneParam._m0[_1775].y, _1716 * cbSceneParam._m0[_1775].x))) / _1806;
        float _1864 = (cbSceneParam._m0[33u].x - sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731))) * cbSceneParam._m0[33u].y;
        float _4158 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1871 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1811 + _1794) / _1806, (_1813 + _1798) / _1806), _1816), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1813 + _1794) / _1806, (_1798 - _1811) / _1806), _1816), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1794 - _1811) / _1806, (_1798 - _1813) / _1806), _1816), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1794 - _1813) / _1806, (_1811 + _1798) / _1806), _1816), 0.0)).x), vec4(0.25)));
        _1878 = 1.0 - (_1871 * cbSceneParam._m0[34u].x);
        _1879 = 1.0 - (_1871 * cbSceneParam._m0[34u].y);
        _1880 = 1.0 - (_1871 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1878 = 1.0;
        _1879 = 1.0;
        _1880 = 1.0;
    }
    float _1944;
    float _1946;
    float _1948;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1932 = fma(_1728, cbSceneParam._m0[63u].w, fma(_1724, cbSceneParam._m0[63u].z, fma(_1720, cbSceneParam._m0[63u].y, _1716 * cbSceneParam._m0[63u].x)));
        float _1933 = fma(_1728, cbSceneParam._m0[60u].w, fma(_1724, cbSceneParam._m0[60u].z, fma(_1720, cbSceneParam._m0[60u].y, _1716 * cbSceneParam._m0[60u].x))) / _1932;
        float _1934 = fma(_1728, cbSceneParam._m0[61u].w, fma(_1724, cbSceneParam._m0[61u].z, fma(_1720, cbSceneParam._m0[61u].y, _1716 * cbSceneParam._m0[61u].x))) / _1932;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1933 >= cbSceneParam._m0[64u].x) && (_1934 >= cbSceneParam._m0[64u].y)) && (_1933 <= cbSceneParam._m0[64u].z)) && (_1934 <= cbSceneParam._m0[64u].w))
        {
            float _2073 = fma(_1728, cbSceneParam._m0[62u].w, fma(_1724, cbSceneParam._m0[62u].z, fma(_1720, cbSceneParam._m0[62u].y, _1716 * cbSceneParam._m0[62u].x))) / _1932;
            float _2077 = isnan(cbSceneParam._m0[41u].w) ? _2073 : (isnan(_2073) ? cbSceneParam._m0[41u].w : max(_2073, cbSceneParam._m0[41u].w));
            float _2120 = (cbSceneParam._m0[33u].x - sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731))) * cbSceneParam._m0[33u].y;
            float _4174 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
            float _2127 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1933, cbSceneParam._m0[33u].w + _1934), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1933, _1934 - cbSceneParam._m0[33u].z), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1933 - cbSceneParam._m0[33u].z, _1934 - cbSceneParam._m0[33u].w), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1933 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1934), _2077), 0.0)).x), vec4(0.25)));
            float _2131 = 1.0 - (_2127 * cbSceneParam._m0[34u].x);
            float _2132 = 1.0 - (_2127 * cbSceneParam._m0[34u].y);
            float _2133 = 1.0 - (_2127 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2132) ? _1879 : (isnan(_1879) ? _2132 : min(_1879, _2132));
            frontier_phi_36_35_ladder_1 = isnan(_2133) ? _1880 : (isnan(_1880) ? _2133 : min(_1880, _2133));
            frontier_phi_36_35_ladder_2 = isnan(_2131) ? _1878 : (isnan(_1878) ? _2131 : min(_1878, _2131));
        }
        else
        {
            frontier_phi_36_35_ladder = _1879;
            frontier_phi_36_35_ladder_1 = _1880;
            frontier_phi_36_35_ladder_2 = _1878;
        }
        _1944 = frontier_phi_36_35_ladder_2;
        _1946 = frontier_phi_36_35_ladder;
        _1948 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1944 = _1878;
        _1946 = _1879;
        _1948 = _1880;
    }
    uvec4 _1953 = floatBitsToUint(cbInstanceData._m0[_606 + 5u]);
    uint _1955 = _1953.x * 14u;
    uint _1956 = _1955 + 13u;
    float _1963 = _647 + (-1.0);
    float _1968 = (cbLight._m0[_1956].x * _1963) + 1.0;
    float _1969 = (cbLight._m0[_1956].y * _1963) + 1.0;
    float _1970 = (cbLight._m0[_1956].z * _1963) + 1.0;
    float _1971 = (cbLight._m0[_1956].w * _1963) + 1.0;
    uint _1972 = _1955 + 5u;
    float _1978 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1982 = _1955 + 4u;
    float _1992 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1996 = _1955 | 1u;
    float _2007 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_487, _488, _489));
    float _2010 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_487, _488, _489));
    float _4210 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _4221 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2015 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.3183098733425140380859375;
    float _2017 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.3183098733425140380859375;
    float _2024 = ((cbLight._m0[_1972].x * _1978) * _2017) + (((cbLight._m0[_1982].x * _1944) * _1992) * _2015);
    float _2025 = ((_1978 * cbLight._m0[_1972].y) * _2017) + (((cbLight._m0[_1982].y * _1946) * _1992) * _2015);
    float _2026 = ((_1978 * cbLight._m0[_1972].z) * _2017) + (((cbLight._m0[_1982].z * _1948) * _1992) * _2015);
    uvec4 _2030 = floatBitsToUint(cbLight._m0[_1955 + 12u]);
    bool _2032 = _2030.x == 0u;
    float _2134;
    float _2136;
    float _2138;
    if (_2032)
    {
        _2134 = _2024;
        _2136 = _2025;
        _2138 = _2026;
    }
    else
    {
        uint _2142 = _1955 + 6u;
        float _2158 = (dot(vec3(cbLight._m0[_1955 + 2u].xyz), vec3(_487, _488, _489)) * 0.5) + 0.5;
        float _2159 = _2158 * _2158;
        float _4232 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2160 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2161 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2134 = (((cbLight._m0[_2142].x * 0.3183098733425140380859375) * _2160) * _2161) + _2024;
        _2136 = (((cbLight._m0[_2142].y * 0.3183098733425140380859375) * _2160) * _2161) + _2025;
        _2138 = (((cbLight._m0[_2142].z * 0.3183098733425140380859375) * _2160) * _2161) + _2026;
    }
    bool _2141 = _2030.y == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2141)
    {
        _2196 = _2134;
        _2198 = _2136;
        _2200 = _2138;
    }
    else
    {
        uint _2369 = _1955 + 7u;
        float _2385 = (dot(vec3(cbLight._m0[_1955 + 3u].xyz), vec3(_487, _488, _489)) * 0.5) + 0.5;
        float _2386 = _2385 * _2385;
        float _4248 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2387 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2388 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2196 = (((cbLight._m0[_2369].x * 0.3183098733425140380859375) * _2387) * _2388) + _2134;
        _2198 = (((cbLight._m0[_2369].y * 0.3183098733425140380859375) * _2387) * _2388) + _2136;
        _2200 = (((cbLight._m0[_2369].z * 0.3183098733425140380859375) * _2387) * _2388) + _2138;
    }
    uint _2203 = _1955 + 8u;
    float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _491) * 0.949999988079071044921875);
    float _2217 = _2216 * _2216;
    float _2218 = cbLight._m0[_1955].x + _558;
    float _2219 = cbLight._m0[_1955].y + _559;
    float _2220 = cbLight._m0[_1955].z + _560;
    float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
    float _2225 = _2224 * _2218;
    float _2226 = _2224 * _2219;
    float _2227 = _2224 * _2220;
    float _2228 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_1955].xyz));
    float _4264 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _2232 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2233 = dot(vec3(_487, _488, _489), vec3(_2225, _2226, _2227));
    float _4286 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2237 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2225, _2226, _2227));
    float _4297 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2241 = _2217 * _2217;
    float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
    float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0);
    float _2254 = 0.959999978542327880859375 - _629;
    float _2256 = 0.959999978542327880859375 - _630;
    float _2257 = 0.959999978542327880859375 - _631;
    float _2264 = 1.0 - _2217;
    float _2275 = (0.5 / (((_2232 * ((_2231 * _2264) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2264) + _2217) * _2231))) * _2231;
    float _4308 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2277 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
    uint _2291 = _1955 + 9u;
    float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _491) * 0.949999988079071044921875);
    float _2303 = _2302 * _2302;
    float _2304 = cbLight._m0[_1996].x + _558;
    float _2305 = cbLight._m0[_1996].y + _559;
    float _2306 = cbLight._m0[_1996].z + _560;
    float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
    float _2311 = _2310 * _2304;
    float _2312 = _2310 * _2305;
    float _2313 = _2310 * _2306;
    float _2314 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_1996].xyz));
    float _4319 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2318 = dot(vec3(_487, _488, _489), vec3(_2311, _2312, _2313));
    float _4330 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2311, _2312, _2313));
    float _4341 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2303 * _2303;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2337 = exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0);
    float _2344 = 1.0 - _2303;
    float _2354 = (0.5 / (((_2232 * ((_2317 * _2344) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2344) + _2303) * _2317))) * _2317;
    float _4352 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2356 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    float _2366 = (((((_2337 * _2254) + _632) * cbLight._m0[_2291].x) * _2356) * _1978) + ((((cbLight._m0[_2203].x * _1944) * ((_2253 * _2254) + _632)) * _2277) * _1992);
    float _2367 = (((((_2337 * _2256) + _634) * cbLight._m0[_2291].y) * _2356) * _1978) + ((((cbLight._m0[_2203].y * _1946) * ((_2253 * _2256) + _634)) * _2277) * _1992);
    float _2368 = (((((_2337 * _2257) + _635) * cbLight._m0[_2291].z) * _2356) * _1978) + ((((cbLight._m0[_2203].z * _1948) * ((_2253 * _2257) + _635)) * _2277) * _1992);
    float _2424;
    float _2426;
    float _2428;
    if (_2032)
    {
        _2424 = _2366;
        _2426 = _2367;
        _2428 = _2368;
    }
    else
    {
        uint _2430 = _1955 + 2u;
        uint _2434 = _1955 + 10u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _491) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _558;
        float _2451 = cbLight._m0[_2430].y + _559;
        float _2452 = cbLight._m0[_2430].z + _560;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_2430].xyz));
        float _4363 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2464 = dot(vec3(_487, _488, _489), vec3(_2457, _2458, _2459));
        float _4374 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4385 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0);
        float _2490 = 1.0 - _2449;
        float _2500 = (0.5 / (((_2232 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2490) + _2449) * _2463))) * _2463;
        float _4396 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2424 = (((((_2483 * _2254) + _632) * cbLight._m0[_2434].x) * _2502) * _2503) + _2366;
        _2426 = (((((_2483 * _2256) + _634) * cbLight._m0[_2434].y) * _2502) * _2503) + _2367;
        _2428 = (((((_2483 * _2257) + _635) * cbLight._m0[_2434].z) * _2502) * _2503) + _2368;
    }
    float _2534;
    float _2536;
    float _2538;
    if (_2141)
    {
        _2534 = _2424;
        _2536 = _2426;
        _2538 = _2428;
    }
    else
    {
        uint _2545 = _1955 + 3u;
        uint _2549 = _1955 + 11u;
        float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2545].w)) * _491) * 0.949999988079071044921875);
        float _2564 = _2563 * _2563;
        float _2565 = cbLight._m0[_2545].x + _558;
        float _2566 = cbLight._m0[_2545].y + _559;
        float _2567 = cbLight._m0[_2545].z + _560;
        float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
        float _2572 = _2571 * _2565;
        float _2573 = _2571 * _2566;
        float _2574 = _2571 * _2567;
        float _2575 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_2545].xyz));
        float _4412 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2579 = dot(vec3(_487, _488, _489), vec3(_2572, _2573, _2574));
        float _4423 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2583 = dot(vec3(cbLight._m0[_2545].xyz), vec3(_2572, _2573, _2574));
        float _4434 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2587 = _2564 * _2564;
        float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
        float _2598 = exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0);
        float _2605 = 1.0 - _2564;
        float _2615 = (0.5 / (((_2232 * ((_2578 * _2605) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2605) + _2564) * _2578))) * _2578;
        float _4445 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2617 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
        float _2618 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2534 = (((((_2598 * _2254) + _632) * cbLight._m0[_2549].x) * _2617) * _2618) + _2424;
        _2536 = (((((_2598 * _2256) + _634) * cbLight._m0[_2549].y) * _2617) * _2618) + _2426;
        _2538 = (((((_2598 * _2257) + _635) * cbLight._m0[_2549].z) * _2617) * _2618) + _2428;
    }
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    if (_1953.y == 0u)
    {
        uvec4 _2639 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2640 = _2639.x;
        uint _2651 = uint((float(_2639.y) * floor(float(uint(cbSceneParam._m0[85u].y * _566) / _2640))) + floor(float(uint(cbSceneParam._m0[85u].x * _565) / _2640)));
        float _2661 = (log2(_1731 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2662 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        uint _2665 = uint(isnan(14.0) ? _2662 : (isnan(_2662) ? 14.0 : min(_2662, 14.0)));
        uvec4 _2670 = texelFetch(g_lightClusterGridBuffer, int(((_2665 << 2u) + (_2651 << 6u)) >> 2u));
        uint _2671 = _2670.x;
        uint _2672 = _2639.z;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        if (((((1u << ((_2672 >> 4u) & 15u)) + 4294967295u) & _2671) == 0u) || ((_2672 & 240u) == 0u))
        {
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
        }
        else
        {
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            uint _2905 = 0u;
            uint _2914;
            bool _2915;
            for (;;)
            {
                _2914 = texelFetch(g_lightClassification, int((((_2665 << 5u) + (_2651 << 9u)) + (_2905 << 2u)) >> 2u)).x;
                _2915 = _2914 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2915)
                {
                    frontier_phi_68_pred = _2904;
                    frontier_phi_68_pred_1 = _2903;
                    frontier_phi_68_pred_2 = _2902;
                    frontier_phi_68_pred_3 = _2900;
                    frontier_phi_68_pred_4 = _2899;
                    frontier_phi_68_pred_5 = _2901;
                }
                else
                {
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    uint _3029;
                    _3023 = _2899;
                    _3024 = _2900;
                    _3025 = _2901;
                    _3026 = _2902;
                    _3027 = _2903;
                    _3028 = _2904;
                    _3029 = _2914;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    for (;;)
                    {
                        uint _3033 = uint(findLSB(_3029)) + (_2905 << 5u);
                        uint _3030 = (_3029 + 4294967295u) & _3029;
                        uint _3035 = _3033 * 48u;
                        vec4 _3049 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3035)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 3u)).x));
                        uint _3055 = (_3033 * 48u) + 4u;
                        vec4 _3068 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3055)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 3u)).x));
                        uint _3074 = (_3033 * 48u) + 8u;
                        vec3 _3085 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 2u)).x));
                        float _3089 = _3049.x - _1729;
                        float _3090 = _3049.y - _1730;
                        float _3091 = _3049.z - _1731;
                        float _3092 = dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091));
                        float _3095 = inversesqrt(_3092);
                        float _3096 = _3095 * _3089;
                        float _3097 = _3095 * _3090;
                        float _3098 = _3095 * _3091;
                        float _3099 = dot(vec3(_587, _590, _593), vec3(_3096, _3097, _3098));
                        float _3104 = 1.0 - (_3092 * _3049.w);
                        float _4471 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3105 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3106 = sqrt(_3092) * _3068.w;
                        float _3109 = 1.39999997615814208984375 / (_3106 + 1.39999997615814208984375);
                        float _3110 = _3109 * _3109;
                        float _3113 = ((1.0 - _3110) * _3099) + _3110;
                        float _3116 = _3106 * _3106;
                        float _3120 = ((isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0))) * _3105) / ((_3116 * 0.699999988079071044921875) + 1.0);
                        float _3124 = (-0.0) - _1729;
                        float _3125 = (-0.0) - _1730;
                        float _3126 = (-0.0) - _1731;
                        float _3130 = inversesqrt(dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126)));
                        float _3131 = _3130 * _3124;
                        float _3132 = _3130 * _3125;
                        float _3133 = _3130 * _3126;
                        float _3140 = exp2(log2(1.0 / ((_3116 * 3.5) + 5.0)) * 0.25);
                        float _3141 = 1.0 - _663;
                        float _3148 = sqrt(1.0 - ((1.0 - (_3141 * _3141)) * (1.0 - (_3140 * _3140))));
                        float _3149 = _3148 * _3148;
                        float _3150 = _3149 * _3149;
                        float _3151 = _3131 + _3096;
                        float _3152 = _3132 + _3097;
                        float _3153 = _3133 + _3098;
                        float _3157 = inversesqrt(dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153)));
                        float _3161 = dot(vec3(_587, _590, _593), vec3(_3131, _3132, _3133));
                        float _4487 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3164 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3165 = dot(vec3(_587, _590, _593), vec3(_3157 * _3151, _3157 * _3152, _3157 * _3153));
                        float _4498 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3168 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3172 = ((_3168 * _3168) * (_3150 + (-1.0))) + 1.0;
                        float _3173 = _3109 * _3149;
                        float _3174 = _3173 * _3173;
                        float _3177 = ((1.0 - _3174) * _3099) + _3174;
                        float _4509 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3178 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3179 = 1.0 - _3149;
                        float _3189 = (0.5 / (((_3178 * ((_3164 * _3179) + _3149)) + 9.9999999392252902907785028219223e-09) + (((_3178 * _3179) + _3149) * _3164))) * _3178;
                        float _4520 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3200 = (((_3150 * 3.1415927410125732421875) * (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) / ((_3172 * _3172) * ((_3116 * 2.1991131305694580078125) + 3.141590118408203125))) * _3105;
                        _2958 = (_3120 * _3068.x) + _3026;
                        _2959 = (_3120 * _3068.y) + _3027;
                        _2960 = (_3120 * _3068.z) + _3028;
                        _2955 = (_3200 * _3085.x) + _3023;
                        _2956 = (_3200 * _3085.y) + _3024;
                        _2957 = (_3200 * _3085.z) + _3025;
                        if (_3030 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3023 = _2955;
                            _3024 = _2956;
                            _3025 = _2957;
                            _3026 = _2958;
                            _3027 = _2959;
                            _3028 = _2960;
                            _3029 = _3030;
                        }
                    }
                    frontier_phi_68_pred = _2960;
                    frontier_phi_68_pred_1 = _2959;
                    frontier_phi_68_pred_2 = _2958;
                    frontier_phi_68_pred_3 = _2956;
                    frontier_phi_68_pred_4 = _2955;
                    frontier_phi_68_pred_5 = _2957;
                }
                _2766 = frontier_phi_68_pred;
                _2764 = frontier_phi_68_pred_1;
                _2762 = frontier_phi_68_pred_2;
                _2758 = frontier_phi_68_pred_3;
                _2756 = frontier_phi_68_pred_4;
                _2760 = frontier_phi_68_pred_5;
                uint _2906 = _2905 + 1u;
                if (_2906 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2899 = _2756;
                    _2900 = _2758;
                    _2901 = _2760;
                    _2902 = _2762;
                    _2903 = _2764;
                    _2904 = _2766;
                    _2905 = _2906;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
        }
        uvec4 _2769 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2770 = _2769.z;
        uint _2772 = (_2770 >> 8u) & 15u;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        if (((4294967295u << _2772) & _2671) == 0u)
        {
            _2867 = _2755;
            _2869 = _2757;
            _2871 = _2759;
            _2873 = _2761;
            _2875 = _2763;
            _2877 = _2765;
        }
        else
        {
            float _2892 = inversesqrt(dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731)));
            float _2893 = _2892 * _1729;
            float _2894 = _2892 * _1730;
            float _2895 = _2892 * _1731;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2772 < ((_2770 >> 12u) & 15u))
            {
                float _2868;
                float _2870;
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _3006 = _2755;
                float _3007 = _2757;
                float _3008 = _2759;
                float _3009 = _2761;
                float _3010 = _2763;
                float _3011 = _2765;
                uint _3012 = _2772;
                uint _3021;
                bool _3022;
                for (;;)
                {
                    _3021 = texelFetch(g_lightClassification, int((((_2665 << 5u) + (_2651 << 9u)) + (_3012 << 2u)) >> 2u)).x;
                    _3022 = _3021 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3022)
                    {
                        frontier_phi_74_pred = _3008;
                        frontier_phi_74_pred_1 = _3007;
                        frontier_phi_74_pred_2 = _3006;
                        frontier_phi_74_pred_3 = _3011;
                        frontier_phi_74_pred_4 = _3010;
                        frontier_phi_74_pred_5 = _3009;
                    }
                    else
                    {
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3218 = _3006;
                        float _3219 = _3007;
                        float _3220 = _3008;
                        float _3221 = _3009;
                        float _3222 = _3010;
                        float _3223 = _3011;
                        uint _3224 = _3021;
                        uint _3225;
                        vec4 _3250;
                        float _3251;
                        vec4 _3266;
                        vec3 _3278;
                        vec4 _3294;
                        vec4 _3310;
                        float _3357;
                        bool _3358;
                        for (;;)
                        {
                            uint _3235 = ((_3012 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3224));
                            _3225 = (_3224 + 4294967295u) & _3224;
                            uint _3237 = _3235 * 40u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            _3251 = _3250.w;
                            uint _3253 = (_3235 * 40u) + 4u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3268 = (_3235 * 40u) + 8u;
                            _3278 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x));
                            uint _3281 = (_3235 * 40u) + 16u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3297 = (_3235 * 40u) + 20u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3313 = (_3235 * 40u) + 24u;
                            vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3332 = (_3235 * 40u) + 28u;
                            vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            _3357 = fma(_1731, _3345.z, fma(_1730, _3345.y, _3345.x * _1729)) + _3345.w;
                            _3358 = !((fma(_1731, _3326.z, fma(_1730, _3326.y, _3326.x * _1729)) + _3326.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3358)
                            {
                                float _3385 = _3250.x - _1729;
                                float _3386 = _3250.y - _1730;
                                float _3387 = _3250.z - _1731;
                                float _3388 = dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387));
                                float _3391 = inversesqrt(_3388);
                                float _3392 = _3391 * _3385;
                                float _3393 = _3391 * _3386;
                                float _3394 = _3391 * _3387;
                                float _3398 = 1.0 - (_3388 / (_3251 * _3251));
                                float _4531 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3399 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3403 = sqrt(_3388) * _3266.w;
                                float _3405 = 1.39999997615814208984375 / (_3403 + 1.39999997615814208984375);
                                float _3406 = _3405 * _3405;
                                float _3409 = ((1.0 - _3406) * dot(vec3(_3392, _3393, _3394), vec3(_587, _590, _593))) + _3406;
                                float _3412 = _3403 * _3403;
                                float _3416 = (fma(_1731, _3294.z, fma(_1730, _3294.y, _3294.x * _1729)) + _3294.w) / _3357;
                                float _3417 = (fma(_1731, _3310.z, fma(_1730, _3310.y, _3310.x * _1729)) + _3310.w) / _3357;
                                float _3421 = 1.0 - dot(vec2(_3416, _3417), vec2(_3416, _3417));
                                float _4547 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3423 = _3422 * (((isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0))) * _3399) / ((_3412 * 0.699999988079071044921875) + 1.0));
                                float _3435 = exp2(log2(1.0 / ((_3412 * 3.5) + 5.0)) * 0.25);
                                float _3436 = 1.0 - _663;
                                float _3443 = sqrt(1.0 - ((1.0 - (_3436 * _3436)) * (1.0 - (_3435 * _3435))));
                                float _3444 = _3443 * _3443;
                                float _3445 = _3444 * _3444;
                                float _3446 = _3392 - _2893;
                                float _3447 = _3393 - _2894;
                                float _3448 = _3394 - _2895;
                                float _3452 = inversesqrt(dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448)));
                                float _3456 = dot(vec3(_587, _590, _593), vec3((-0.0) - _2893, (-0.0) - _2894, (-0.0) - _2895));
                                float _4558 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3459 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3460 = dot(vec3(_587, _590, _593), vec3(_3452 * _3446, _3452 * _3447, _3452 * _3448));
                                float _4569 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3463 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3467 = ((_3463 * _3463) * (_3445 + (-1.0))) + 1.0;
                                float _3468 = _3405 * _3444;
                                float _3469 = _3468 * _3468;
                                float _3475 = ((1.0 - _3469) * dot(vec3(_587, _590, _593), vec3(_3392, _3393, _3394))) + _3469;
                                float _4580 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3476 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3477 = 1.0 - _3444;
                                float _3487 = (0.5 / (((_3476 * ((_3459 * _3477) + _3444)) + 9.9999999392252902907785028219223e-09) + (((_3476 * _3477) + _3444) * _3459))) * _3476;
                                float _4591 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3497 = (_3422 * _3399) * (((_3445 * 3.1415927410125732421875) * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) / ((_3467 * _3467) * ((_3412 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3497 * _3278.z;
                                frontier_phi_80_pred_1 = _3497 * _3278.y;
                                frontier_phi_80_pred_2 = _3497 * _3278.x;
                                frontier_phi_80_pred_3 = _3423 * _3266.z;
                                frontier_phi_80_pred_4 = _3423 * _3266.y;
                                frontier_phi_80_pred_5 = _3423 * _3266.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3503 = frontier_phi_80_pred;
                            _3502 = frontier_phi_80_pred_1;
                            _3501 = frontier_phi_80_pred_2;
                            _3506 = frontier_phi_80_pred_3;
                            _3505 = frontier_phi_80_pred_4;
                            _3504 = frontier_phi_80_pred_5;
                            _3208 = _3504 + _3221;
                            _3209 = _3505 + _3222;
                            _3210 = _3506 + _3223;
                            _3205 = _3501 + _3218;
                            _3206 = _3502 + _3219;
                            _3207 = _3503 + _3220;
                            if (_3225 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3225;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3207;
                        frontier_phi_74_pred_1 = _3206;
                        frontier_phi_74_pred_2 = _3205;
                        frontier_phi_74_pred_3 = _3210;
                        frontier_phi_74_pred_4 = _3209;
                        frontier_phi_74_pred_5 = _3208;
                    }
                    _2872 = frontier_phi_74_pred;
                    _2870 = frontier_phi_74_pred_1;
                    _2868 = frontier_phi_74_pred_2;
                    _2878 = frontier_phi_74_pred_3;
                    _2876 = frontier_phi_74_pred_4;
                    _2874 = frontier_phi_74_pred_5;
                    uint _3013 = _3012 + 1u;
                    if (_3013 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3006 = _2868;
                        _3007 = _2870;
                        _3008 = _2872;
                        _3009 = _2874;
                        _3010 = _2876;
                        _3011 = _2878;
                        _3012 = _3013;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2876;
                frontier_phi_62_63_ladder_1 = _2874;
                frontier_phi_62_63_ladder_2 = _2872;
                frontier_phi_62_63_ladder_3 = _2878;
                frontier_phi_62_63_ladder_4 = _2870;
                frontier_phi_62_63_ladder_5 = _2868;
            }
            else
            {
                frontier_phi_62_63_ladder = _2763;
                frontier_phi_62_63_ladder_1 = _2761;
                frontier_phi_62_63_ladder_2 = _2759;
                frontier_phi_62_63_ladder_3 = _2765;
                frontier_phi_62_63_ladder_4 = _2757;
                frontier_phi_62_63_ladder_5 = _2755;
            }
            _2867 = frontier_phi_62_63_ladder_5;
            _2869 = frontier_phi_62_63_ladder_4;
            _2871 = frontier_phi_62_63_ladder_2;
            _2873 = frontier_phi_62_63_ladder_1;
            _2875 = frontier_phi_62_63_ladder;
            _2877 = frontier_phi_62_63_ladder_3;
        }
        float _2882 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
        _2683 = (_2882 * _2873) + _2196;
        _2685 = (_2882 * _2875) + _2198;
        _2687 = (_2882 * _2877) + _2200;
        _2689 = ((_2867 * _632) * _2882) + _2534;
        _2691 = ((_2869 * _634) * _2882) + _2536;
        _2693 = ((_2871 * _635) * _2882) + _2538;
    }
    else
    {
        _2683 = _2196;
        _2685 = _2198;
        _2687 = _2200;
        _2689 = _2534;
        _2691 = _2536;
        _2693 = _2538;
    }
    float _4607 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4618 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4629 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4640 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _2711 = ((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2683 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _647))) + ((_2689 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1457)) * cbPerFrame._m0[3u].x);
    float _2712 = ((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2685 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _647))) + ((_2691 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1457)) * cbPerFrame._m0[3u].x);
    float _2713 = ((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2687 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _647))) + ((_2693 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1457)) * cbPerFrame._m0[3u].x);
    float _2721 = cbInstanceData._m0[_606 + 6u].w * (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)));
    float _2726 = _565 / cbSceneParam._m0[86u].x;
    float _2727 = _566 / cbSceneParam._m0[86u].y;
    vec4 _2741 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, (log2((isnan(cbSceneParam._m0[77u].w) ? _500 : (isnan(_500) ? cbSceneParam._m0[77u].w : min(_500, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2743 = _2741.x;
    float _2744 = _2741.y;
    float _2745 = _2741.z;
    float _2746 = _2741.w;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    if (_500 > cbSceneParam._m0[78u].w)
    {
        float _2780 = isnan(_500) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _500 : min(cbSceneParam._m0[80u].w, _500));
        float _2781 = _2780 / _500;
        float _2792 = _2781 * _551;
        float _2793 = _552 * _2781;
        float _2794 = (-0.0) - _2793;
        float _2795 = _2781 * _553;
        float _2797 = (cbSceneParam._m0[77u].w * _2794) / _2780;
        float _2798 = _2797 + cbSceneParam._m0[79u].w;
        float _2799 = cbSceneParam._m0[79u].w - _2793;
        float _2805 = sqrt(((_2792 * _2792) + (_2793 * _2793)) + (_2795 * _2795));
        float _2808 = (1.0 - (cbSceneParam._m0[77u].w / _2780)) * _2805;
        float _2813 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2815 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2968;
        if (abs((_2794 - _2797) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2968 = ((((_2798 > 0.0) ? exp2(_2813 * _2798) : (2.0 - exp2(_2815 * _2798))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2808;
        }
        else
        {
            float _2928 = 1.0 / cbSceneParam._m0[80u].x;
            float _2929 = isnan(_2799) ? _2798 : (isnan(_2798) ? _2799 : max(_2798, _2799));
            float _2930 = isnan(_2799) ? _2798 : (isnan(_2798) ? _2799 : min(_2798, _2799));
            float _2939 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : min(_2929, 0.0));
            float _2940 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : min(_2930, 0.0));
            _2968 = ((abs(_2805 / _2794) * cbSceneParam._m0[80u].y) * ((((_2939 - _2940) * 2.0) - ((exp2(_2813 * (isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0)))) - exp2(_2813 * (isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0))))) * _2928)) - ((exp2(_2815 * _2939) - exp2(_2815 * _2940)) * _2928))) + (_2808 * cbSceneParam._m0[80u].z);
        }
        vec4 _2970 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, 1.0), 0.0);
        float _2979 = exp2((_2968 * (-1.44269502162933349609375)) * (1.0 - _2970.w));
        float _2980 = log2(_2979);
        float _2996 = log2(_2746);
        _2817 = (exp2(_2996 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].x)) * _2970.x) / cbSceneParam._m0[78u].x)) + _2743;
        _2819 = (exp2(_2996 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].y)) * _2970.y) / cbSceneParam._m0[78u].y)) + _2744;
        _2821 = (exp2(_2996 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].z)) * _2970.z) / cbSceneParam._m0[78u].z)) + _2745;
        _2823 = _2979 * _2746;
    }
    else
    {
        _2817 = _2743;
        _2819 = _2744;
        _2821 = _2745;
        _2823 = _2746;
    }
    float _2835 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2836 = _2835 == 3.0;
    float _2837 = log2(_2823);
    float _2844 = exp2(_2837 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0)));
    float _2845 = exp2(_2837 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0)));
    float _2846 = exp2(_2837 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0)));
    float _2855 = (_2835 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2855 * (_2836 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2817)));
    SV_Target.y = _2855 * (_2836 ? _2845 : (_2845 + (cbSceneParam._m0[72u].w * _2819)));
    SV_Target.z = _2855 * (_2836 ? _2846 : (_2846 + (cbSceneParam._m0[72u].w * _2821)));
    SV_Target.w = _2721;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2721;
}


