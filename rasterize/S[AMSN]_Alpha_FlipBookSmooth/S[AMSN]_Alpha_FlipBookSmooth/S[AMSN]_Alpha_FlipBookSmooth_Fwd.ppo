#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1018;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _193 = _192 * _184;
    float _194 = _192 * _185;
    float _195 = _192 * _186;
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207 = _206 * TANGENT.x;
    float _208 = _206 * TANGENT.y;
    float _209 = _206 * TANGENT.z;
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    uint _236 = uint(int(floor(cbMtdParam._m0[10u].z)));
    float _237 = fract(cbMtdParam._m0[10u].z);
    uint _238 = _236 + 1u;
    uint _239 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _242 = float(int(_236 - _239 * (_236 / _239)));
    float _246 = float(int(_238 - _239 * (_238 / _239)));
    float _250 = 1.0 / cbMtdParam._m0[10u].w;
    float _252 = 1.0 / cbMtdParam._m0[11u].x;
    float _253 = fract(TEXCOORD_1.x);
    float _254 = fract(TEXCOORD_1.y);
    float _256 = (_253 + (_242 - cbMtdParam._m0[10u].w * trunc(_242 / cbMtdParam._m0[10u].w))) * _250;
    float _258 = (_254 + floor(_242 / cbMtdParam._m0[10u].w)) * _252;
    float _260 = (_253 + (_246 - cbMtdParam._m0[10u].w * trunc(_246 / cbMtdParam._m0[10u].w))) * _250;
    float _262 = (_254 + floor(_246 / cbMtdParam._m0[10u].w)) * _252;
    vec4 _275 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _260) + cbTextureTilingScale._m0[0u].z, (_262 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _286 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _256) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _258) + cbTextureTilingScale._m0[0u].w));
    float _288 = _286.x;
    float _289 = _286.y;
    float _290 = _286.z;
    float _291 = _286.w;
    float _304 = (((_275.x - _288) * _237) + _288) * cbMtdParam._m0[9u].x;
    float _305 = (((_275.y - _289) * _237) + _289) * cbMtdParam._m0[9u].y;
    float _306 = (((_275.z - _290) * _237) + _290) * cbMtdParam._m0[9u].z;
    vec4 _316 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _318 = _316.x;
    bool _325 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _341 = ((_325 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _318)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _318))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3359 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _345 = ((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * (((_275.w - _291) * _237) + _291)) * (isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0)));
    vec4 _367 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _256) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _258) + cbTextureTilingScale._m0[2u].w));
    float _369 = _367.x;
    float _373 = (_369 + cbMtdParam._m0[10u].x) + ((texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _262) + cbTextureTilingScale._m0[2u].w)).x - _369) * _237);
    vec4 _385 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _260) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _262) + cbTextureTilingScale._m0[1u].w));
    float _392 = (_385.x * 2.0) + (-1.0);
    float _394 = (_385.y * 2.0) + (-1.0);
    float _398 = 1.0 - dot(vec2(_392, _394), vec2(_392, _394));
    float _3370 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _400 = sqrt(isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0)));
    float _403 = fma(_400, _214, fma(_394, _207, _392 * _193));
    float _406 = fma(_400, _215, fma(_394, _208, _392 * _194));
    float _409 = fma(_400, _216, fma(_394, _209, _392 * _195));
    float _413 = inversesqrt(dot(vec3(_403, _406, _409), vec3(_403, _406, _409)));
    vec4 _421 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _256) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _258) + cbTextureTilingScale._m0[1u].w));
    float _427 = (_421.x * 2.0) + (-1.0);
    float _428 = (_421.y * 2.0) + (-1.0);
    float _432 = 1.0 - dot(vec2(_427, _428), vec2(_427, _428));
    float _3381 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _434 = sqrt(isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0)));
    float _437 = fma(_434, _214, fma(_428, _207, _427 * _193));
    float _440 = fma(_434, _215, fma(_428, _208, _427 * _194));
    float _443 = fma(_434, _216, fma(_428, _209, _427 * _195));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    float _448 = _447 * _437;
    float _449 = _447 * _440;
    float _450 = _447 * _443;
    float _459 = (((_413 * _409) - _450) * _237) + _450;
    float _462 = (((((_413 * _403) - _448) * _237) + _448) * 2.0) + (-1.0);
    float _463 = (((((_413 * _406) - _449) * _237) + _449) * 2.0) + (-1.0);
    float _464 = dot(vec2(_462, _463), vec2(_462, _463));
    float _3392 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _469 = sqrt(1.0 - (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))));
    float _472 = fma(_469, _214, fma(_463, _207, _462 * _193));
    float _475 = fma(_469, _215, fma(_463, _208, _462 * _194));
    float _478 = fma(_469, _216, fma(_463, _209, _462 * _195));
    float _482 = inversesqrt(dot(vec3(_472, _475, _478), vec3(_472, _475, _478)));
    float _483 = _482 * _472;
    float _484 = _482 * _475;
    float _485 = _482 * _478;
    float _3403 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _486 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _3414 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _487 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _3425 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3436 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3447 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3458 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _491 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _496 = _325 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _547 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _537);
    float _548 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _537);
    float _549 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _537);
    float _553 = inversesqrt(dot(vec3(_547, _548, _549), vec3(_547, _548, _549)));
    float _554 = _547 * _553;
    float _555 = _548 * _553;
    float _556 = _549 * _553;
    float _561 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _562 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _583 = fma(_485, cbSceneParam._m0[5u].z, fma(_484, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _483));
    float _586 = fma(_485, cbSceneParam._m0[6u].z, fma(_484, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _483));
    float _589 = fma(_485, cbSceneParam._m0[7u].z, fma(_484, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _483));
    uint _602 = uint(roundEven(NORMAL.w)) * 13u;
    uint _605 = (_602 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _611 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) * cbInstanceData._m0[_605].x;
    float _612 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0)))) * cbInstanceData._m0[_605].y;
    float _613 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0)))) * cbInstanceData._m0[_605].z;
    float _3469 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _3480 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _617 = 1.0 - _491;
    float _618 = _614 * _617;
    float _619 = _615 * _617;
    float _620 = _616 * _617;
    float _625 = (_614 + (-0.039999999105930328369140625)) * _491;
    float _626 = (_615 + (-0.039999999105930328369140625)) * _491;
    float _627 = (_616 + (-0.039999999105930328369140625)) * _491;
    float _628 = _625 + 0.039999999105930328369140625;
    float _630 = _626 + 0.039999999105930328369140625;
    float _631 = _627 + 0.039999999105930328369140625;
    vec4 _640 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _561, cbSceneParam._m0[86u].y * _562));
    float _643 = _640.x * TEXCOORD_1.w;
    float _644 = dot(vec3(_483, _484, _485), vec3(_554, _555, _556));
    float _647 = _644 * 2.0;
    float _651 = (_647 * _483) - _554;
    float _652 = (_647 * _484) - _555;
    float _653 = (_647 * _485) - _556;
    float _657 = abs(dot(vec3(_554, _555, _556), vec3(_483, _484, _485)));
    float _3502 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _659 = sqrt(_487);
    float _672 = exp2((_659 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_659 * 3.0));
    float _678 = (1.0 - _672) * ((_659 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _679 = _672 * _659;
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1017;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _742 = fma(_715, cbModelParam._m0[26u].z, fma(_711, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _707));
        float _746 = fma(_715, cbModelParam._m0[27u].z, fma(_711, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _707));
        float _750 = fma(_715, cbModelParam._m0[28u].z, fma(_711, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _707));
        float _775 = _707 + _483;
        float _776 = _711 + _484;
        float _777 = _715 + _485;
        float _787 = fma(_777, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775)) - _742;
        float _788 = fma(_777, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775)) - _746;
        float _789 = fma(_777, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775)) - _750;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _806 = ((_793 * _787) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_742 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_793 * _788) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_746 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_793 * _789) / cbModelParam._m0[34u].z) + ((((((_750 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        float _845 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_811.x + (-0.5));
        float _847 = _845 * (_811.y + (-0.5));
        float _848 = _845 * (_811.z + (-0.5));
        float _855 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_818.x + (-0.5));
        float _857 = _855 * (_818.y + (-0.5));
        float _858 = _855 * (_818.z + (-0.5));
        float _865 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_825.x + (-0.5));
        float _867 = _865 * (_825.y + (-0.5));
        float _868 = _865 * (_825.z + (-0.5));
        float _875 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_832.x + (-0.5));
        float _877 = _875 * (_832.y + (-0.5));
        float _878 = _875 * (_832.z + (-0.5));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = _846 * 0.5;
        float _883 = _856 * 0.5;
        float _884 = _866 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _899 = (dot(vec3(_483, _484, _485), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _909 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3550 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_911 + 1.0))) + _916) * _879;
        float _926 = _847 * 0.5;
        float _927 = _857 * 0.5;
        float _928 = _867 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_483, _484, _485), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3561 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3572 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3583 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * (_953 + 1.0))) + _958) * _880;
        float _968 = _848 * 0.5;
        float _969 = _858 * 0.5;
        float _970 = _868 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_483, _484, _485), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3616 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_995 + 1.0))) + _1000) * _881;
        _1017 = _848;
        _1019 = _847;
        _1020 = _846;
        _1021 = _858;
        _1022 = _857;
        _1023 = _856;
        _1024 = _868;
        _1025 = _867;
        _1026 = _866;
        _1027 = _881;
        _1028 = _880;
        _1029 = _879;
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
    }
    else
    {
        _1017 = _1018;
        _1019 = _1018;
        _1020 = _1018;
        _1021 = _1018;
        _1022 = _1018;
        _1023 = _1018;
        _1024 = _1018;
        _1025 = _1018;
        _1026 = _1018;
        _1027 = _1018;
        _1028 = _1018;
        _1029 = _1018;
        _1030 = 0.0;
        _1031 = 0.0;
        _1032 = 0.0;
    }
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1058 = fma(_715, cbModelParam._m0[30u].z, fma(_711, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _707));
        float _1062 = fma(_715, cbModelParam._m0[31u].z, fma(_711, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _707));
        float _1066 = fma(_715, cbModelParam._m0[32u].z, fma(_711, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _707));
        float _1089 = _707 + _483;
        float _1090 = _711 + _484;
        float _1091 = _715 + _485;
        float _1101 = fma(_1091, cbModelParam._m0[30u].z, fma(_1090, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1089)) - _1058;
        float _1102 = fma(_1091, cbModelParam._m0[31u].z, fma(_1090, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1089)) - _1062;
        float _1103 = fma(_1091, cbModelParam._m0[32u].z, fma(_1090, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1089)) - _1066;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1058 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1062 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[35u].z) + ((((((_1066 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1157 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1124.x + (-0.5));
        float _1159 = _1157 * (_1124.y + (-0.5));
        float _1160 = _1157 * (_1124.z + (-0.5));
        float _1167 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1131.x + (-0.5));
        float _1169 = _1167 * (_1131.y + (-0.5));
        float _1170 = _1167 * (_1131.z + (-0.5));
        float _1177 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1138.x + (-0.5));
        float _1179 = _1177 * (_1138.y + (-0.5));
        float _1180 = _1177 * (_1138.z + (-0.5));
        float _1187 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1145.x + (-0.5));
        float _1189 = _1187 * (_1145.y + (-0.5));
        float _1190 = _1187 * (_1145.z + (-0.5));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = _1158 * 0.5;
        float _1195 = _1168 * 0.5;
        float _1196 = _1178 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_483, _484, _485), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3679 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1221 + 1.0))) + _1226) * _1191;
        float _1236 = _1159 * 0.5;
        float _1237 = _1169 * 0.5;
        float _1238 = _1179 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_483, _484, _485), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3712 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1263 + 1.0))) + _1268) * _1192;
        float _1278 = _1160 * 0.5;
        float _1279 = _1170 * 0.5;
        float _1280 = _1180 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_483, _484, _485), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _3745 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1305 + 1.0))) + _1310) * _1193;
        _1327 = _1160;
        _1328 = _1159;
        _1329 = _1158;
        _1330 = _1170;
        _1331 = _1169;
        _1332 = _1168;
        _1333 = _1180;
        _1334 = _1179;
        _1335 = _1178;
        _1336 = _1193;
        _1337 = _1192;
        _1338 = _1191;
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
    }
    else
    {
        _1327 = _1018;
        _1328 = _1018;
        _1329 = _1018;
        _1330 = _1018;
        _1331 = _1018;
        _1332 = _1018;
        _1333 = _1018;
        _1334 = _1018;
        _1335 = _1018;
        _1336 = _1018;
        _1337 = _1018;
        _1338 = _1018;
        _1339 = 0.0;
        _1340 = 0.0;
        _1341 = 0.0;
    }
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1030)) + _1030;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1031)) + _1031;
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1032)) + _1032;
    float _1374 = fma(_1353, cbSceneParam._m0[89u].z, fma(_1352, cbSceneParam._m0[89u].y, _1351 * cbSceneParam._m0[89u].x));
    float _1377 = fma(_1353, cbSceneParam._m0[90u].z, fma(_1352, cbSceneParam._m0[90u].y, _1351 * cbSceneParam._m0[90u].x));
    float _1380 = fma(_1353, cbSceneParam._m0[91u].z, fma(_1352, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1351));
    float _1395 = _651 * 0.5;
    float _1396 = _652 * 0.5;
    float _1397 = _653 * 0.5;
    float _1398 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1401 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1404 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1438;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1411 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1017, _1021, _1024, _1027));
        float _1415 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1419 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1426 = dot(vec4(cbModelParam._m0[39u]), vec4(_1395, _1396, _1397, 1.0));
        _1438 = dot(vec3(isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1426) ? 0.0 : (isnan(0.0) ? _1426 : max(0.0, _1426))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1438 = 1.0;
    }
    float _1449;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1440 = dot(vec4(cbModelParam._m0[40u]), vec4(_1395, _1396, _1397, 1.0));
        _1449 = dot(vec3(isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1440) ? 0.0 : (isnan(0.0) ? _1440 : max(0.0, _1440))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1449 = 1.0;
    }
    float _1453 = (_1449 * cbModelParam._m0[1u].x) + (_1438 * (1.0 - cbModelParam._m0[1u].x));
    float _1463 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _487);
    float _1464 = isnan(_1463) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1463 : min(cbModelParam._m0[25u].z, _1463));
    float _1546;
    float _1548;
    float _1550;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1513 = fma(_715, cbModelParam._m0[13u].z, fma(_711, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707)) + cbModelParam._m0[13u].w;
        float _1517 = fma(_715, cbModelParam._m0[14u].z, fma(_711, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707)) + cbModelParam._m0[14u].w;
        float _1521 = fma(_715, cbModelParam._m0[15u].z, fma(_711, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707)) + cbModelParam._m0[15u].w;
        float _1524 = fma(_653, cbModelParam._m0[13u].z, fma(_652, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _651));
        float _1527 = fma(_653, cbModelParam._m0[14u].z, fma(_652, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _651));
        float _1530 = fma(_653, cbModelParam._m0[15u].z, fma(_652, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _651));
        float _1558;
        if (_1524 > 0.0)
        {
            _1558 = abs((1.0 - _1513) / _1524);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1513 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1558 = frontier_phi_16_14_ladder;
        }
        float _1765;
        if (_1527 > 0.0)
        {
            _1765 = abs((1.0 - _1517) / _1527);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1517 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1765 = frontier_phi_25_21_ladder;
        }
        float _2019;
        if (_1530 > 0.0)
        {
            _2019 = abs((1.0 - _1521) / _1530);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1521 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2019 = frontier_phi_37_32_ladder;
        }
        float _2021 = isnan(_1765) ? _1558 : (isnan(_1558) ? _1765 : min(_1558, _1765));
        float _2022 = isnan(_2019) ? _2021 : (isnan(_2021) ? _2019 : min(_2021, _2019));
        float _2026 = (_2022 * _1524) + _1513;
        float _2027 = (_2022 * _1527) + _1517;
        float _2028 = (_2022 * _1530) + _1521;
        float _2029 = _2022 * 9.9999997473787516355514526367188e-05;
        float _2031 = (-1.0) - _2029;
        float _2033 = _2029 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2028 > _2033) || ((_2028 < _2031) || ((_2027 > _2033) || ((_2027 < _2031) || ((_2026 < _2031) || (_2026 > _2033))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2156 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2028, cbModelParam._m0[9u].z, fma(_2027, cbModelParam._m0[9u].y, _2026 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2028, cbModelParam._m0[10u].z, fma(_2027, cbModelParam._m0[10u].y, _2026 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2028, cbModelParam._m0[11u].z, fma(_2027, cbModelParam._m0[11u].y, _2026 * cbModelParam._m0[11u].x))), _1464);
            frontier_phi_15_37_ladder = _2156.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2156.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2156.x * cbModelParam._m0[1u].y;
        }
        _1546 = frontier_phi_15_37_ladder_2;
        _1548 = frontier_phi_15_37_ladder_1;
        _1550 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_651, _652, _653), _1464);
        _1546 = _1534.x * cbModelParam._m0[1u].y;
        _1548 = _1534.y * cbModelParam._m0[1u].y;
        _1550 = _1534.z * cbModelParam._m0[1u].y;
    }
    float _1554 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _487);
    float _1555 = isnan(_1554) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1554 : min(cbModelParam._m0[25u].w, _1554));
    float _1648;
    float _1650;
    float _1652;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1612 = fma(_715, cbModelParam._m0[21u].z, fma(_711, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707)) + cbModelParam._m0[21u].w;
        float _1616 = fma(_715, cbModelParam._m0[22u].z, fma(_711, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707)) + cbModelParam._m0[22u].w;
        float _1620 = fma(_715, cbModelParam._m0[23u].z, fma(_711, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707)) + cbModelParam._m0[23u].w;
        float _1623 = fma(_653, cbModelParam._m0[21u].z, fma(_652, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _651));
        float _1626 = fma(_653, cbModelParam._m0[22u].z, fma(_652, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _651));
        float _1629 = fma(_653, cbModelParam._m0[23u].z, fma(_652, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _651));
        float _1770;
        if (_1623 > 0.0)
        {
            _1770 = abs((1.0 - _1612) / _1623);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1612 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1770 = frontier_phi_27_23_ladder;
        }
        float _2046;
        if (_1626 > 0.0)
        {
            _2046 = abs((1.0 - _1616) / _1626);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1616 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2046 = frontier_phi_39_34_ladder;
        }
        float _2259;
        if (_1629 > 0.0)
        {
            _2259 = abs((1.0 - _1620) / _1629);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1620 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2259 = frontier_phi_48_45_ladder;
        }
        float _2261 = isnan(_2046) ? _1770 : (isnan(_1770) ? _2046 : min(_1770, _2046));
        float _2262 = isnan(_2259) ? _2261 : (isnan(_2261) ? _2259 : min(_2261, _2259));
        float _2266 = (_2262 * _1623) + _1612;
        float _2267 = (_2262 * _1626) + _1616;
        float _2268 = (_2262 * _1629) + _1620;
        float _2269 = _2262 * 9.9999997473787516355514526367188e-05;
        float _2270 = (-1.0) - _2269;
        float _2272 = _2269 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2268 > _2272) || ((_2268 < _2270) || ((_2267 > _2272) || ((_2267 < _2270) || ((_2266 < _2270) || (_2266 > _2272))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2471 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2268, cbModelParam._m0[17u].z, fma(_2267, cbModelParam._m0[17u].y, _2266 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2268, cbModelParam._m0[18u].z, fma(_2267, cbModelParam._m0[18u].y, _2266 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2268, cbModelParam._m0[19u].z, fma(_2267, cbModelParam._m0[19u].y, _2266 * cbModelParam._m0[19u].x))), _1555);
            frontier_phi_24_48_ladder = _2471.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2471.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2471.x * cbModelParam._m0[1u].z;
        }
        _1648 = frontier_phi_24_48_ladder_2;
        _1650 = frontier_phi_24_48_ladder_1;
        _1652 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1632 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_651, _652, _653), _1555);
        _1648 = _1632.x * cbModelParam._m0[1u].z;
        _1650 = _1632.y * cbModelParam._m0[1u].z;
        _1652 = _1632.z * cbModelParam._m0[1u].z;
    }
    float _1665 = (((_678 * _628) + _679) * _643) * ((cbModelParam._m0[1u].w * (_1648 - _1546)) + _1546);
    float _1667 = (((_678 * _630) + _679) * _643) * ((cbModelParam._m0[1u].w * (_1650 - _1548)) + _1548);
    float _1669 = (((_678 * _631) + _679) * _643) * ((cbModelParam._m0[1u].w * (_1652 - _1550)) + _1550);
    float _1672 = fma(_1669, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1665 * cbSceneParam._m0[89u].x));
    float _1675 = fma(_1669, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1665 * cbSceneParam._m0[90u].x));
    float _1678 = fma(_1669, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, _1665 * cbSceneParam._m0[91u].x));
    uvec4 _1688 = floatBitsToUint(cbInstanceData._m0[_602 + 5u]);
    uint _1690 = _1688.x * 14u;
    uint _1691 = _1690 + 13u;
    float _1698 = _643 + (-1.0);
    float _1703 = (cbLight._m0[_1691].x * _1698) + 1.0;
    float _1704 = (cbLight._m0[_1691].y * _1698) + 1.0;
    float _1705 = (cbLight._m0[_1691].z * _1698) + 1.0;
    float _1706 = (cbLight._m0[_1691].w * _1698) + 1.0;
    uint _1707 = _1690 + 5u;
    float _1713 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
    uint _1717 = _1690 + 4u;
    float _1724 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1728 = _1690 | 1u;
    float _1739 = dot(vec3(cbLight._m0[_1690].xyz), vec3(_483, _484, _485));
    float _1742 = dot(vec3(cbLight._m0[_1728].xyz), vec3(_483, _484, _485));
    float _3881 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _3892 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1747 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 0.3183098733425140380859375;
    float _1749 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 0.3183098733425140380859375;
    float _1756 = ((cbLight._m0[_1707].x * _1713) * _1749) + ((cbLight._m0[_1717].x * _1724) * _1747);
    float _1757 = ((_1713 * cbLight._m0[_1707].y) * _1749) + ((_1724 * cbLight._m0[_1717].y) * _1747);
    float _1758 = ((_1713 * cbLight._m0[_1707].z) * _1749) + ((_1724 * cbLight._m0[_1717].z) * _1747);
    uvec4 _1762 = floatBitsToUint(cbLight._m0[_1690 + 12u]);
    bool _1764 = _1762.x == 0u;
    float _1775;
    float _1777;
    float _1779;
    if (_1764)
    {
        _1775 = _1756;
        _1777 = _1757;
        _1779 = _1758;
    }
    else
    {
        uint _1783 = _1690 + 6u;
        float _1799 = (dot(vec3(cbLight._m0[_1690 + 2u].xyz), vec3(_483, _484, _485)) * 0.5) + 0.5;
        float _1800 = _1799 * _1799;
        float _3903 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1802 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _1775 = (((cbLight._m0[_1783].x * 0.3183098733425140380859375) * _1801) * _1802) + _1756;
        _1777 = (((cbLight._m0[_1783].y * 0.3183098733425140380859375) * _1801) * _1802) + _1757;
        _1779 = (((cbLight._m0[_1783].z * 0.3183098733425140380859375) * _1801) * _1802) + _1758;
    }
    bool _1782 = _1762.y == 0u;
    float _1820;
    float _1822;
    float _1824;
    if (_1782)
    {
        _1820 = _1775;
        _1822 = _1777;
        _1824 = _1779;
    }
    else
    {
        uint _1990 = _1690 + 7u;
        float _2006 = (dot(vec3(cbLight._m0[_1690 + 3u].xyz), vec3(_483, _484, _485)) * 0.5) + 0.5;
        float _2007 = _2006 * _2006;
        float _3919 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2008 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _2009 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
        _1820 = (((cbLight._m0[_1990].x * 0.3183098733425140380859375) * _2008) * _2009) + _1775;
        _1822 = (((cbLight._m0[_1990].y * 0.3183098733425140380859375) * _2008) * _2009) + _1777;
        _1824 = (((cbLight._m0[_1990].z * 0.3183098733425140380859375) * _2008) * _2009) + _1779;
    }
    uint _1827 = _1690 + 8u;
    float _1840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1690].w)) * _487) * 0.949999988079071044921875);
    float _1841 = _1840 * _1840;
    float _1842 = cbLight._m0[_1690].x + _554;
    float _1843 = cbLight._m0[_1690].y + _555;
    float _1844 = cbLight._m0[_1690].z + _556;
    float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
    float _1849 = _1848 * _1842;
    float _1850 = _1848 * _1843;
    float _1851 = _1848 * _1844;
    float _1852 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_1690].xyz));
    float _3935 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _1856 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _1857 = dot(vec3(_483, _484, _485), vec3(_1849, _1850, _1851));
    float _3957 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1690].xyz), vec3(_1849, _1850, _1851));
    float _3968 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1841 * _1841;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1877 = exp2(log2(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * 5.0);
    float _1878 = 0.959999978542327880859375 - _625;
    float _1880 = 0.959999978542327880859375 - _626;
    float _1881 = 0.959999978542327880859375 - _627;
    float _1888 = 1.0 - _1841;
    float _1899 = (0.5 / (((_1856 * ((_1855 * _1888) + _1841)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _1888) + _1841) * _1855))) * _1855;
    float _3979 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1901 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    uint _1912 = _1690 + 9u;
    float _1923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1728].w)) * _487) * 0.949999988079071044921875);
    float _1924 = _1923 * _1923;
    float _1925 = cbLight._m0[_1728].x + _554;
    float _1926 = cbLight._m0[_1728].y + _555;
    float _1927 = cbLight._m0[_1728].z + _556;
    float _1931 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
    float _1932 = _1931 * _1925;
    float _1933 = _1931 * _1926;
    float _1934 = _1931 * _1927;
    float _1935 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_1728].xyz));
    float _3990 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _1939 = dot(vec3(_483, _484, _485), vec3(_1932, _1933, _1934));
    float _4001 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1942 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1943 = dot(vec3(cbLight._m0[_1728].xyz), vec3(_1932, _1933, _1934));
    float _4012 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1947 = _1924 * _1924;
    float _1951 = ((_1942 * _1942) * (_1947 + (-1.0))) + 1.0;
    float _1958 = exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0);
    float _1965 = 1.0 - _1924;
    float _1975 = (0.5 / (((_1856 * ((_1938 * _1965) + _1924)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _1965) + _1924) * _1938))) * _1938;
    float _4023 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1977 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1947 / ((_1951 * _1951) * 3.141590118408203125));
    float _1987 = (((((_1958 * _1878) + _628) * cbLight._m0[_1912].x) * _1977) * _1713) + (((((_1877 * _1878) + _628) * cbLight._m0[_1827].x) * _1901) * _1724);
    float _1988 = (((((_1958 * _1880) + _630) * cbLight._m0[_1912].y) * _1977) * _1713) + (((((_1877 * _1880) + _630) * cbLight._m0[_1827].y) * _1901) * _1724);
    float _1989 = (((((_1958 * _1881) + _631) * cbLight._m0[_1912].z) * _1977) * _1713) + (((((_1877 * _1881) + _631) * cbLight._m0[_1827].z) * _1901) * _1724);
    float _2051;
    float _2053;
    float _2055;
    if (_1764)
    {
        _2051 = _1987;
        _2053 = _1988;
        _2055 = _1989;
    }
    else
    {
        uint _2057 = _1690 + 2u;
        uint _2061 = _1690 + 10u;
        float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _487) * 0.949999988079071044921875);
        float _2076 = _2075 * _2075;
        float _2077 = cbLight._m0[_2057].x + _554;
        float _2078 = cbLight._m0[_2057].y + _555;
        float _2079 = cbLight._m0[_2057].z + _556;
        float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
        float _2084 = _2083 * _2077;
        float _2085 = _2083 * _2078;
        float _2086 = _2083 * _2079;
        float _2087 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_2057].xyz));
        float _4034 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2090 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _2091 = dot(vec3(_483, _484, _485), vec3(_2084, _2085, _2086));
        float _4045 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2094 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _2095 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2084, _2085, _2086));
        float _4056 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2099 = _2076 * _2076;
        float _2103 = ((_2094 * _2094) * (_2099 + (-1.0))) + 1.0;
        float _2110 = exp2(log2(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * 5.0);
        float _2117 = 1.0 - _2076;
        float _2127 = (0.5 / (((_1856 * ((_2090 * _2117) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _2117) + _2076) * _2090))) * _2090;
        float _4067 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2129 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_2099 / ((_2103 * _2103) * 3.141590118408203125));
        float _2130 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _2051 = (((((_2110 * _1878) + _628) * cbLight._m0[_2061].x) * _2129) * _2130) + _1987;
        _2053 = (((((_2110 * _1880) + _630) * cbLight._m0[_2061].y) * _2129) * _2130) + _1988;
        _2055 = (((((_2110 * _1881) + _631) * cbLight._m0[_2061].z) * _2129) * _2130) + _1989;
    }
    float _2165;
    float _2167;
    float _2169;
    if (_1782)
    {
        _2165 = _2051;
        _2167 = _2053;
        _2169 = _2055;
    }
    else
    {
        uint _2176 = _1690 + 3u;
        uint _2180 = _1690 + 11u;
        float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2176].w)) * _487) * 0.949999988079071044921875);
        float _2195 = _2194 * _2194;
        float _2196 = cbLight._m0[_2176].x + _554;
        float _2197 = cbLight._m0[_2176].y + _555;
        float _2198 = cbLight._m0[_2176].z + _556;
        float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
        float _2203 = _2202 * _2196;
        float _2204 = _2202 * _2197;
        float _2205 = _2202 * _2198;
        float _2206 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_2176].xyz));
        float _4083 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2209 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2210 = dot(vec3(_483, _484, _485), vec3(_2203, _2204, _2205));
        float _4094 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2213 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2214 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2203, _2204, _2205));
        float _4105 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2218 = _2195 * _2195;
        float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
        float _2229 = exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0);
        float _2236 = 1.0 - _2195;
        float _2246 = (0.5 / (((_1856 * ((_2209 * _2236) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _2236) + _2195) * _2209))) * _2209;
        float _4116 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2248 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
        float _2249 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
        _2165 = (((((_2229 * _1878) + _628) * cbLight._m0[_2180].x) * _2248) * _2249) + _2051;
        _2167 = (((((_2229 * _1880) + _630) * cbLight._m0[_2180].y) * _2248) * _2249) + _2053;
        _2169 = (((((_2229 * _1881) + _631) * cbLight._m0[_2180].z) * _2248) * _2249) + _2055;
    }
    float _2383;
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    if (_1688.y == 0u)
    {
        float _2324 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2325 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2324;
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2324;
        float _2327 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2324;
        uvec4 _2339 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2340 = _2339.x;
        uint _2351 = uint((float(_2339.y) * floor(float(uint(cbSceneParam._m0[85u].y * _562) / _2340))) + floor(float(uint(cbSceneParam._m0[85u].x * _561) / _2340)));
        float _2361 = (log2(_2327 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2362 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        uint _2365 = uint(isnan(14.0) ? _2362 : (isnan(_2362) ? 14.0 : min(_2362, 14.0)));
        uvec4 _2370 = texelFetch(g_lightClusterGridBuffer, int(((_2365 << 2u) + (_2351 << 6u)) >> 2u));
        uint _2371 = _2370.x;
        uint _2372 = _2339.z;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        if (((((1u << ((_2372 >> 4u) & 15u)) + 4294967295u) & _2371) == 0u) || ((_2372 & 240u) == 0u))
        {
            _2476 = 0.0;
            _2478 = 0.0;
            _2480 = 0.0;
            _2482 = 0.0;
            _2484 = 0.0;
            _2486 = 0.0;
        }
        else
        {
            float _2477;
            float _2479;
            float _2481;
            float _2483;
            float _2485;
            float _2487;
            float _2620 = 0.0;
            float _2621 = 0.0;
            float _2622 = 0.0;
            float _2623 = 0.0;
            float _2624 = 0.0;
            float _2625 = 0.0;
            uint _2626 = 0u;
            uint _2635;
            bool _2636;
            for (;;)
            {
                _2635 = texelFetch(g_lightClassification, int((((_2365 << 5u) + (_2351 << 9u)) + (_2626 << 2u)) >> 2u)).x;
                _2636 = _2635 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2636)
                {
                    frontier_phi_63_pred = _2625;
                    frontier_phi_63_pred_1 = _2624;
                    frontier_phi_63_pred_2 = _2623;
                    frontier_phi_63_pred_3 = _2622;
                    frontier_phi_63_pred_4 = _2621;
                    frontier_phi_63_pred_5 = _2620;
                }
                else
                {
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    uint _2750;
                    _2744 = _2620;
                    _2745 = _2621;
                    _2746 = _2622;
                    _2747 = _2623;
                    _2748 = _2624;
                    _2749 = _2625;
                    _2750 = _2635;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    for (;;)
                    {
                        uint _2754 = uint(findLSB(_2750)) + (_2626 << 5u);
                        uint _2751 = (_2750 + 4294967295u) & _2750;
                        uint _2756 = _2754 * 48u;
                        vec4 _2770 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2756)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 3u)).x));
                        uint _2776 = (_2754 * 48u) + 4u;
                        vec4 _2789 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2776)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 3u)).x));
                        uint _2795 = (_2754 * 48u) + 8u;
                        vec3 _2806 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2795)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 2u)).x));
                        float _2810 = _2770.x - _2325;
                        float _2811 = _2770.y - _2326;
                        float _2812 = _2770.z - _2327;
                        float _2813 = dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812));
                        float _2816 = inversesqrt(_2813);
                        float _2817 = _2816 * _2810;
                        float _2818 = _2816 * _2811;
                        float _2819 = _2816 * _2812;
                        float _2820 = dot(vec3(_583, _586, _589), vec3(_2817, _2818, _2819));
                        float _2825 = 1.0 - (_2813 * _2770.w);
                        float _4142 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2826 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                        float _2827 = sqrt(_2813) * _2789.w;
                        float _2830 = 1.39999997615814208984375 / (_2827 + 1.39999997615814208984375);
                        float _2831 = _2830 * _2830;
                        float _2834 = ((1.0 - _2831) * _2820) + _2831;
                        float _2837 = _2827 * _2827;
                        float _2841 = ((isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0))) * _2826) / ((_2837 * 0.699999988079071044921875) + 1.0);
                        float _2845 = (-0.0) - _2325;
                        float _2846 = (-0.0) - _2326;
                        float _2847 = (-0.0) - _2327;
                        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
                        float _2852 = _2851 * _2845;
                        float _2853 = _2851 * _2846;
                        float _2854 = _2851 * _2847;
                        float _2862 = exp2(log2(1.0 / ((_2837 * 3.5) + 5.0)) * 0.25);
                        float _2863 = 1.0 - _659;
                        float _2870 = sqrt(1.0 - ((1.0 - (_2863 * _2863)) * (1.0 - (_2862 * _2862))));
                        float _2871 = _2870 * _2870;
                        float _2872 = _2871 * _2871;
                        float _2873 = _2852 + _2817;
                        float _2874 = _2853 + _2818;
                        float _2875 = _2854 + _2819;
                        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
                        float _2883 = dot(vec3(_583, _586, _589), vec3(_2852, _2853, _2854));
                        float _4158 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2886 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2887 = dot(vec3(_583, _586, _589), vec3(_2879 * _2873, _2879 * _2874, _2879 * _2875));
                        float _4169 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2890 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2894 = ((_2890 * _2890) * (_2872 + (-1.0))) + 1.0;
                        float _2895 = _2830 * _2871;
                        float _2896 = _2895 * _2895;
                        float _2899 = ((1.0 - _2896) * _2820) + _2896;
                        float _4180 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2900 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                        float _2901 = 1.0 - _2871;
                        float _2911 = (0.5 / (((_2900 * ((_2886 * _2901) + _2871)) + 9.9999999392252902907785028219223e-09) + (((_2900 * _2901) + _2871) * _2886))) * _2900;
                        float _4191 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2922 = (((_2872 * 3.1415927410125732421875) * (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) / ((_2894 * _2894) * ((_2837 * 2.1991131305694580078125) + 3.141590118408203125))) * _2826;
                        _2679 = (_2841 * _2789.x) + _2747;
                        _2680 = (_2841 * _2789.y) + _2748;
                        _2681 = (_2841 * _2789.z) + _2749;
                        _2676 = (_2922 * _2806.x) + _2744;
                        _2677 = (_2922 * _2806.y) + _2745;
                        _2678 = (_2922 * _2806.z) + _2746;
                        if (_2751 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2744 = _2676;
                            _2745 = _2677;
                            _2746 = _2678;
                            _2747 = _2679;
                            _2748 = _2680;
                            _2749 = _2681;
                            _2750 = _2751;
                        }
                    }
                    frontier_phi_63_pred = _2681;
                    frontier_phi_63_pred_1 = _2680;
                    frontier_phi_63_pred_2 = _2679;
                    frontier_phi_63_pred_3 = _2678;
                    frontier_phi_63_pred_4 = _2677;
                    frontier_phi_63_pred_5 = _2676;
                }
                _2487 = frontier_phi_63_pred;
                _2485 = frontier_phi_63_pred_1;
                _2483 = frontier_phi_63_pred_2;
                _2481 = frontier_phi_63_pred_3;
                _2479 = frontier_phi_63_pred_4;
                _2477 = frontier_phi_63_pred_5;
                uint _2627 = _2626 + 1u;
                if (_2627 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2620 = _2477;
                    _2621 = _2479;
                    _2622 = _2481;
                    _2623 = _2483;
                    _2624 = _2485;
                    _2625 = _2487;
                    _2626 = _2627;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2476 = _2477;
            _2478 = _2479;
            _2480 = _2481;
            _2482 = _2483;
            _2484 = _2485;
            _2486 = _2487;
        }
        uvec4 _2490 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2491 = _2490.z;
        uint _2493 = (_2491 >> 8u) & 15u;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        if (((4294967295u << _2493) & _2371) == 0u)
        {
            _2588 = _2476;
            _2590 = _2478;
            _2592 = _2480;
            _2594 = _2482;
            _2596 = _2484;
            _2598 = _2486;
        }
        else
        {
            float _2613 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
            float _2614 = _2613 * _2325;
            float _2615 = _2613 * _2326;
            float _2616 = _2613 * _2327;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2493 < ((_2491 >> 12u) & 15u))
            {
                float _2589;
                float _2591;
                float _2593;
                float _2595;
                float _2597;
                float _2599;
                float _2727 = _2476;
                float _2728 = _2478;
                float _2729 = _2480;
                float _2730 = _2482;
                float _2731 = _2484;
                float _2732 = _2486;
                uint _2733 = _2493;
                uint _2742;
                bool _2743;
                for (;;)
                {
                    _2742 = texelFetch(g_lightClassification, int((((_2365 << 5u) + (_2351 << 9u)) + (_2733 << 2u)) >> 2u)).x;
                    _2743 = _2742 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2743)
                    {
                        frontier_phi_69_pred = _2732;
                        frontier_phi_69_pred_1 = _2731;
                        frontier_phi_69_pred_2 = _2730;
                        frontier_phi_69_pred_3 = _2729;
                        frontier_phi_69_pred_4 = _2728;
                        frontier_phi_69_pred_5 = _2727;
                    }
                    else
                    {
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _2931;
                        float _2932;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _2940 = _2727;
                        float _2941 = _2728;
                        float _2942 = _2729;
                        float _2943 = _2730;
                        float _2944 = _2731;
                        float _2945 = _2732;
                        uint _2946 = _2742;
                        uint _2947;
                        vec4 _2972;
                        float _2973;
                        vec4 _2988;
                        vec3 _3000;
                        vec4 _3016;
                        vec4 _3032;
                        float _3079;
                        bool _3080;
                        for (;;)
                        {
                            uint _2957 = ((_2733 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2946));
                            _2947 = (_2946 + 4294967295u) & _2946;
                            uint _2959 = _2957 * 40u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            _2973 = _2972.w;
                            uint _2975 = (_2957 * 40u) + 4u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2990 = (_2957 * 40u) + 8u;
                            _3000 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x));
                            uint _3003 = (_2957 * 40u) + 16u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3019 = (_2957 * 40u) + 20u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3035 = (_2957 * 40u) + 24u;
                            vec4 _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3054 = (_2957 * 40u) + 28u;
                            vec4 _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            _3079 = fma(_2327, _3067.z, fma(_2326, _3067.y, _3067.x * _2325)) + _3067.w;
                            _3080 = !((fma(_2327, _3048.z, fma(_2326, _3048.y, _3048.x * _2325)) + _3048.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3080)
                            {
                                float _3107 = _2972.x - _2325;
                                float _3108 = _2972.y - _2326;
                                float _3109 = _2972.z - _2327;
                                float _3110 = dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109));
                                float _3113 = inversesqrt(_3110);
                                float _3114 = _3113 * _3107;
                                float _3115 = _3113 * _3108;
                                float _3116 = _3113 * _3109;
                                float _3120 = 1.0 - (_3110 / (_2973 * _2973));
                                float _4202 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                                float _3125 = sqrt(_3110) * _2988.w;
                                float _3127 = 1.39999997615814208984375 / (_3125 + 1.39999997615814208984375);
                                float _3128 = _3127 * _3127;
                                float _3131 = ((1.0 - _3128) * dot(vec3(_3114, _3115, _3116), vec3(_583, _586, _589))) + _3128;
                                float _3134 = _3125 * _3125;
                                float _3138 = (fma(_2327, _3016.z, fma(_2326, _3016.y, _3016.x * _2325)) + _3016.w) / _3079;
                                float _3139 = (fma(_2327, _3032.z, fma(_2326, _3032.y, _3032.x * _2325)) + _3032.w) / _3079;
                                float _3143 = 1.0 - dot(vec2(_3138, _3139), vec2(_3138, _3139));
                                float _4218 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3144 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3145 = _3144 * (((isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0))) * _3121) / ((_3134 * 0.699999988079071044921875) + 1.0));
                                float _3157 = exp2(log2(1.0 / ((_3134 * 3.5) + 5.0)) * 0.25);
                                float _3158 = 1.0 - _659;
                                float _3165 = sqrt(1.0 - ((1.0 - (_3158 * _3158)) * (1.0 - (_3157 * _3157))));
                                float _3166 = _3165 * _3165;
                                float _3167 = _3166 * _3166;
                                float _3168 = _3114 - _2614;
                                float _3169 = _3115 - _2615;
                                float _3170 = _3116 - _2616;
                                float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                                float _3178 = dot(vec3(_583, _586, _589), vec3((-0.0) - _2614, (-0.0) - _2615, (-0.0) - _2616));
                                float _4229 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3181 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3182 = dot(vec3(_583, _586, _589), vec3(_3174 * _3168, _3174 * _3169, _3174 * _3170));
                                float _4240 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3185 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                                float _3189 = ((_3185 * _3185) * (_3167 + (-1.0))) + 1.0;
                                float _3190 = _3127 * _3166;
                                float _3191 = _3190 * _3190;
                                float _3197 = ((1.0 - _3191) * dot(vec3(_583, _586, _589), vec3(_3114, _3115, _3116))) + _3191;
                                float _4251 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3198 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3199 = 1.0 - _3166;
                                float _3209 = (0.5 / (((_3198 * ((_3181 * _3199) + _3166)) + 9.9999999392252902907785028219223e-09) + (((_3198 * _3199) + _3166) * _3181))) * _3198;
                                float _4262 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3219 = (_3144 * _3121) * (((_3167 * 3.1415927410125732421875) * (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) / ((_3189 * _3189) * ((_3134 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3145 * _2988.z;
                                frontier_phi_75_pred_1 = _3145 * _2988.y;
                                frontier_phi_75_pred_2 = _3145 * _2988.x;
                                frontier_phi_75_pred_3 = _3219 * _3000.z;
                                frontier_phi_75_pred_4 = _3219 * _3000.y;
                                frontier_phi_75_pred_5 = _3219 * _3000.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3228 = frontier_phi_75_pred;
                            _3227 = frontier_phi_75_pred_1;
                            _3226 = frontier_phi_75_pred_2;
                            _3225 = frontier_phi_75_pred_3;
                            _3224 = frontier_phi_75_pred_4;
                            _3223 = frontier_phi_75_pred_5;
                            _2930 = _3226 + _2943;
                            _2931 = _3227 + _2944;
                            _2932 = _3228 + _2945;
                            _2927 = _3223 + _2940;
                            _2928 = _3224 + _2941;
                            _2929 = _3225 + _2942;
                            if (_2947 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2931;
                                _2945 = _2932;
                                _2946 = _2947;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2932;
                        frontier_phi_69_pred_1 = _2931;
                        frontier_phi_69_pred_2 = _2930;
                        frontier_phi_69_pred_3 = _2929;
                        frontier_phi_69_pred_4 = _2928;
                        frontier_phi_69_pred_5 = _2927;
                    }
                    _2599 = frontier_phi_69_pred;
                    _2597 = frontier_phi_69_pred_1;
                    _2595 = frontier_phi_69_pred_2;
                    _2593 = frontier_phi_69_pred_3;
                    _2591 = frontier_phi_69_pred_4;
                    _2589 = frontier_phi_69_pred_5;
                    uint _2734 = _2733 + 1u;
                    if (_2734 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2727 = _2589;
                        _2728 = _2591;
                        _2729 = _2593;
                        _2730 = _2595;
                        _2731 = _2597;
                        _2732 = _2599;
                        _2733 = _2734;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2599;
                frontier_phi_57_58_ladder_1 = _2597;
                frontier_phi_57_58_ladder_2 = _2595;
                frontier_phi_57_58_ladder_3 = _2593;
                frontier_phi_57_58_ladder_4 = _2591;
                frontier_phi_57_58_ladder_5 = _2589;
            }
            else
            {
                frontier_phi_57_58_ladder = _2486;
                frontier_phi_57_58_ladder_1 = _2484;
                frontier_phi_57_58_ladder_2 = _2482;
                frontier_phi_57_58_ladder_3 = _2480;
                frontier_phi_57_58_ladder_4 = _2478;
                frontier_phi_57_58_ladder_5 = _2476;
            }
            _2588 = frontier_phi_57_58_ladder_5;
            _2590 = frontier_phi_57_58_ladder_4;
            _2592 = frontier_phi_57_58_ladder_3;
            _2594 = frontier_phi_57_58_ladder_2;
            _2596 = frontier_phi_57_58_ladder_1;
            _2598 = frontier_phi_57_58_ladder;
        }
        float _2603 = isnan(1.0) ? _643 : (isnan(_643) ? 1.0 : min(_643, 1.0));
        _2383 = (_2603 * _2594) + _1820;
        _2385 = (_2603 * _2596) + _1822;
        _2387 = (_2603 * _2598) + _1824;
        _2389 = ((_2588 * _628) * _2603) + _2165;
        _2391 = ((_2590 * _630) * _2603) + _2167;
        _2393 = ((_2592 * _631) * _2603) + _2169;
    }
    else
    {
        _2383 = _1820;
        _2385 = _1822;
        _2387 = _1824;
        _2389 = _2165;
        _2391 = _2167;
        _2393 = _2169;
    }
    float _4278 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _4289 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4300 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4311 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _2411 = ((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2383 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _643))) + ((_2389 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1453)) * cbPerFrame._m0[3u].x);
    float _2412 = ((isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2385 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _643))) + ((_2391 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1453)) * cbPerFrame._m0[3u].x);
    float _2413 = ((isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2387 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _643))) + ((_2393 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1453)) * cbPerFrame._m0[3u].x);
    float _2421 = cbInstanceData._m0[_602 + 6u].w * (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)));
    float _2426 = _561 / cbSceneParam._m0[86u].x;
    float _2427 = _562 / cbSceneParam._m0[86u].y;
    vec4 _2441 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2426, _2427, (log2((isnan(cbSceneParam._m0[77u].w) ? _496 : (isnan(_496) ? cbSceneParam._m0[77u].w : min(_496, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2443 = _2441.x;
    float _2444 = _2441.y;
    float _2445 = _2441.z;
    float _2446 = _2441.w;
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    if (_496 > cbSceneParam._m0[78u].w)
    {
        float _2501 = isnan(_496) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _496 : min(cbSceneParam._m0[80u].w, _496));
        float _2502 = _2501 / _496;
        float _2513 = _2502 * _547;
        float _2514 = _548 * _2502;
        float _2515 = (-0.0) - _2514;
        float _2516 = _2502 * _549;
        float _2518 = (cbSceneParam._m0[77u].w * _2515) / _2501;
        float _2519 = _2518 + cbSceneParam._m0[79u].w;
        float _2520 = cbSceneParam._m0[79u].w - _2514;
        float _2526 = sqrt(((_2513 * _2513) + (_2514 * _2514)) + (_2516 * _2516));
        float _2529 = (1.0 - (cbSceneParam._m0[77u].w / _2501)) * _2526;
        float _2534 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2536 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2689;
        if (abs((_2515 - _2518) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2689 = ((((_2519 > 0.0) ? exp2(_2534 * _2519) : (2.0 - exp2(_2536 * _2519))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2529;
        }
        else
        {
            float _2649 = 1.0 / cbSceneParam._m0[80u].x;
            float _2650 = isnan(_2520) ? _2519 : (isnan(_2519) ? _2520 : max(_2519, _2520));
            float _2651 = isnan(_2520) ? _2519 : (isnan(_2519) ? _2520 : min(_2519, _2520));
            float _2660 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : min(_2650, 0.0));
            float _2661 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : min(_2651, 0.0));
            _2689 = ((abs(_2526 / _2515) * cbSceneParam._m0[80u].y) * ((((_2660 - _2661) * 2.0) - ((exp2(_2534 * (isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0)))) - exp2(_2534 * (isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0))))) * _2649)) - ((exp2(_2536 * _2660) - exp2(_2536 * _2661)) * _2649))) + (_2529 * cbSceneParam._m0[80u].z);
        }
        vec4 _2691 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2426, _2427, 1.0), 0.0);
        float _2700 = exp2((_2689 * (-1.44269502162933349609375)) * (1.0 - _2691.w));
        float _2701 = log2(_2700);
        float _2717 = log2(_2446);
        _2538 = (exp2(_2717 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].x)) * _2691.x) / cbSceneParam._m0[78u].x)) + _2443;
        _2540 = (exp2(_2717 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].y)) * _2691.y) / cbSceneParam._m0[78u].y)) + _2444;
        _2542 = (exp2(_2717 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].z)) * _2691.z) / cbSceneParam._m0[78u].z)) + _2445;
        _2544 = _2700 * _2446;
    }
    else
    {
        _2538 = _2443;
        _2540 = _2444;
        _2542 = _2445;
        _2544 = _2446;
    }
    float _2556 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2557 = _2556 == 3.0;
    float _2558 = log2(_2544);
    float _2565 = exp2(_2558 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0)));
    float _2566 = exp2(_2558 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0)));
    float _2567 = exp2(_2558 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0)));
    float _2576 = (_2556 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2576 * (_2557 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2538)));
    SV_Target.y = _2576 * (_2557 ? _2566 : (_2566 + (cbSceneParam._m0[72u].w * _2540)));
    SV_Target.z = _2576 * (_2557 ? _2567 : (_2567 + (cbSceneParam._m0[72u].w * _2542)));
    SV_Target.w = _2421;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2421;
}


