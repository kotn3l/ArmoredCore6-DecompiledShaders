#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1020;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _195 = _194 * _186;
    float _196 = _194 * _187;
    float _197 = _194 * _188;
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209 = _208 * TANGENT.x;
    float _210 = _208 * TANGENT.y;
    float _211 = _208 * TANGENT.z;
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    uint _238 = uint(int(floor(cbMtdParam._m0[10u].z)));
    float _239 = fract(cbMtdParam._m0[10u].z);
    uint _240 = _238 + 1u;
    uint _241 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _244 = float(int(_238 - _241 * (_238 / _241)));
    float _248 = float(int(_240 - _241 * (_240 / _241)));
    float _252 = 1.0 / cbMtdParam._m0[10u].w;
    float _254 = 1.0 / cbMtdParam._m0[11u].x;
    float _255 = fract(TEXCOORD_1.x);
    float _256 = fract(TEXCOORD_1.y);
    float _258 = (_255 + (_244 - cbMtdParam._m0[10u].w * trunc(_244 / cbMtdParam._m0[10u].w))) * _252;
    float _260 = (_256 + floor(_244 / cbMtdParam._m0[10u].w)) * _254;
    float _262 = (_255 + (_248 - cbMtdParam._m0[10u].w * trunc(_248 / cbMtdParam._m0[10u].w))) * _252;
    float _264 = (_256 + floor(_248 / cbMtdParam._m0[10u].w)) * _254;
    vec4 _277 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _262) + cbTextureTilingScale._m0[0u].z, (_264 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _288 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _258) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _260) + cbTextureTilingScale._m0[0u].w));
    float _290 = _288.x;
    float _291 = _288.y;
    float _292 = _288.z;
    float _293 = _288.w;
    float _306 = (((_277.x - _290) * _239) + _290) * cbMtdParam._m0[9u].x;
    float _307 = (((_277.y - _291) * _239) + _291) * cbMtdParam._m0[9u].y;
    float _308 = (((_277.z - _292) * _239) + _292) * cbMtdParam._m0[9u].z;
    vec4 _318 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _320 = _318.x;
    bool _327 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _343 = ((_327 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _320)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _320))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3385 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _347 = ((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * (((_277.w - _293) * _239) + _293)) * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)));
    vec4 _369 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _260) + cbTextureTilingScale._m0[2u].w));
    float _371 = _369.x;
    float _375 = (_371 + cbMtdParam._m0[10u].x) + ((texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _264) + cbTextureTilingScale._m0[2u].w)).x - _371) * _239);
    vec4 _387 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _262) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _264) + cbTextureTilingScale._m0[1u].w));
    float _394 = (_387.x * 2.0) + (-1.0);
    float _396 = (_387.y * 2.0) + (-1.0);
    float _400 = 1.0 - dot(vec2(_394, _396), vec2(_394, _396));
    float _3396 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _402 = sqrt(isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)));
    float _405 = fma(_402, _216, fma(_396, _209, _394 * _195));
    float _408 = fma(_402, _217, fma(_396, _210, _394 * _196));
    float _411 = fma(_402, _218, fma(_396, _211, _394 * _197));
    float _415 = inversesqrt(dot(vec3(_405, _408, _411), vec3(_405, _408, _411)));
    vec4 _423 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _258) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _260) + cbTextureTilingScale._m0[1u].w));
    float _429 = (_423.x * 2.0) + (-1.0);
    float _430 = (_423.y * 2.0) + (-1.0);
    float _434 = 1.0 - dot(vec2(_429, _430), vec2(_429, _430));
    float _3407 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _436 = sqrt(isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)));
    float _439 = fma(_436, _216, fma(_430, _209, _429 * _195));
    float _442 = fma(_436, _217, fma(_430, _210, _429 * _196));
    float _445 = fma(_436, _218, fma(_430, _211, _429 * _197));
    float _449 = inversesqrt(dot(vec3(_439, _442, _445), vec3(_439, _442, _445)));
    float _450 = _449 * _439;
    float _451 = _449 * _442;
    float _452 = _449 * _445;
    float _461 = (((_415 * _411) - _452) * _239) + _452;
    float _464 = (((((_415 * _405) - _450) * _239) + _450) * 2.0) + (-1.0);
    float _465 = (((((_415 * _408) - _451) * _239) + _451) * 2.0) + (-1.0);
    float _466 = dot(vec2(_464, _465), vec2(_464, _465));
    float _3418 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _471 = sqrt(1.0 - (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))));
    float _474 = fma(_471, _216, fma(_465, _209, _464 * _195));
    float _477 = fma(_471, _217, fma(_465, _210, _464 * _196));
    float _480 = fma(_471, _218, fma(_465, _211, _464 * _197));
    float _484 = inversesqrt(dot(vec3(_474, _477, _480), vec3(_474, _477, _480)));
    float _485 = _484 * _474;
    float _486 = _484 * _477;
    float _487 = _484 * _480;
    float _3429 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _488 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _3440 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _489 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3462 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3473 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3484 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _493 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _498 = _327 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _549 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _539);
    float _550 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _539);
    float _551 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _539);
    float _555 = inversesqrt(dot(vec3(_549, _550, _551), vec3(_549, _550, _551)));
    float _556 = _549 * _555;
    float _557 = _550 * _555;
    float _558 = _551 * _555;
    float _563 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _564 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _585 = fma(_487, cbSceneParam._m0[5u].z, fma(_486, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _485));
    float _588 = fma(_487, cbSceneParam._m0[6u].z, fma(_486, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _485));
    float _591 = fma(_487, cbSceneParam._m0[7u].z, fma(_486, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _485));
    uint _604 = uint(roundEven(NORMAL.w)) * 13u;
    uint _607 = (_604 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _613 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0)))) * cbInstanceData._m0[_607].x;
    float _614 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) * cbInstanceData._m0[_607].y;
    float _615 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_607].z;
    float _3495 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _3506 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _619 = 1.0 - _493;
    float _620 = _616 * _619;
    float _621 = _617 * _619;
    float _622 = _618 * _619;
    float _627 = (_616 + (-0.039999999105930328369140625)) * _493;
    float _628 = (_617 + (-0.039999999105930328369140625)) * _493;
    float _629 = (_618 + (-0.039999999105930328369140625)) * _493;
    float _630 = _627 + 0.039999999105930328369140625;
    float _632 = _628 + 0.039999999105930328369140625;
    float _633 = _629 + 0.039999999105930328369140625;
    vec4 _642 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _563, cbSceneParam._m0[86u].y * _564));
    float _645 = _642.x * TEXCOORD_1.w;
    float _646 = dot(vec3(_485, _486, _487), vec3(_556, _557, _558));
    float _649 = _646 * 2.0;
    float _653 = (_649 * _485) - _556;
    float _654 = (_649 * _486) - _557;
    float _655 = (_649 * _487) - _558;
    float _659 = abs(dot(vec3(_556, _557, _558), vec3(_485, _486, _487)));
    float _3528 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _661 = sqrt(_489);
    float _674 = exp2((_661 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_661 * 3.0));
    float _680 = (1.0 - _674) * ((_661 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _681 = _674 * _661;
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1019;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _744 = fma(_717, cbModelParam._m0[26u].z, fma(_713, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _709));
        float _748 = fma(_717, cbModelParam._m0[27u].z, fma(_713, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _709));
        float _752 = fma(_717, cbModelParam._m0[28u].z, fma(_713, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _709));
        float _777 = _709 + _485;
        float _778 = _713 + _486;
        float _779 = _717 + _487;
        float _789 = fma(_779, cbModelParam._m0[26u].z, fma(_778, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _777)) - _744;
        float _790 = fma(_779, cbModelParam._m0[27u].z, fma(_778, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _777)) - _748;
        float _791 = fma(_779, cbModelParam._m0[28u].z, fma(_778, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _777)) - _752;
        float _795 = inversesqrt(dot(vec3(_789, _790, _791), vec3(_789, _790, _791)));
        float _808 = ((_795 * _789) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_744 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _809 = ((_795 * _790) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_748 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _810 = ((_795 * _791) / cbModelParam._m0[34u].z) + ((((((_752 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        float _847 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_813.x + (-0.5));
        float _849 = _847 * (_813.y + (-0.5));
        float _850 = _847 * (_813.z + (-0.5));
        float _857 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_820.x + (-0.5));
        float _859 = _857 * (_820.y + (-0.5));
        float _860 = _857 * (_820.z + (-0.5));
        float _867 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_827.x + (-0.5));
        float _869 = _867 * (_827.y + (-0.5));
        float _870 = _867 * (_827.z + (-0.5));
        float _877 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_834.x + (-0.5));
        float _879 = _877 * (_834.y + (-0.5));
        float _880 = _877 * (_834.z + (-0.5));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = _848 * 0.5;
        float _885 = _858 * 0.5;
        float _886 = _868 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _901 = (dot(vec3(_485, _486, _487), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _911 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3576 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_913 + 1.0))) + _918) * _881;
        float _928 = _849 * 0.5;
        float _929 = _859 * 0.5;
        float _930 = _869 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_485, _486, _487), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3609 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_955 + 1.0))) + _960) * _882;
        float _970 = _850 * 0.5;
        float _971 = _860 * 0.5;
        float _972 = _870 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_485, _486, _487), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3642 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_997 + 1.0))) + _1002) * _883;
        _1019 = _850;
        _1021 = _849;
        _1022 = _848;
        _1023 = _860;
        _1024 = _859;
        _1025 = _858;
        _1026 = _870;
        _1027 = _869;
        _1028 = _868;
        _1029 = _883;
        _1030 = _882;
        _1031 = _881;
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
    }
    else
    {
        _1019 = _1020;
        _1021 = _1020;
        _1022 = _1020;
        _1023 = _1020;
        _1024 = _1020;
        _1025 = _1020;
        _1026 = _1020;
        _1027 = _1020;
        _1028 = _1020;
        _1029 = _1020;
        _1030 = _1020;
        _1031 = _1020;
        _1032 = 0.0;
        _1033 = 0.0;
        _1034 = 0.0;
    }
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1060 = fma(_717, cbModelParam._m0[30u].z, fma(_713, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _709));
        float _1064 = fma(_717, cbModelParam._m0[31u].z, fma(_713, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _709));
        float _1068 = fma(_717, cbModelParam._m0[32u].z, fma(_713, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _709));
        float _1091 = _709 + _485;
        float _1092 = _713 + _486;
        float _1093 = _717 + _487;
        float _1103 = fma(_1093, cbModelParam._m0[30u].z, fma(_1092, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1091)) - _1060;
        float _1104 = fma(_1093, cbModelParam._m0[31u].z, fma(_1092, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1091)) - _1064;
        float _1105 = fma(_1093, cbModelParam._m0[32u].z, fma(_1092, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1091)) - _1068;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1060 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1064 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[35u].z) + ((((((_1068 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1159 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1126.x + (-0.5));
        float _1161 = _1159 * (_1126.y + (-0.5));
        float _1162 = _1159 * (_1126.z + (-0.5));
        float _1169 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1133.x + (-0.5));
        float _1171 = _1169 * (_1133.y + (-0.5));
        float _1172 = _1169 * (_1133.z + (-0.5));
        float _1179 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1140.x + (-0.5));
        float _1181 = _1179 * (_1140.y + (-0.5));
        float _1182 = _1179 * (_1140.z + (-0.5));
        float _1189 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1147.x + (-0.5));
        float _1191 = _1189 * (_1147.y + (-0.5));
        float _1192 = _1189 * (_1147.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_485, _486, _487), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3705 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1223 + 1.0))) + _1228) * _1193;
        float _1238 = _1161 * 0.5;
        float _1239 = _1171 * 0.5;
        float _1240 = _1181 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_485, _486, _487), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3738 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1265 + 1.0))) + _1270) * _1194;
        float _1280 = _1162 * 0.5;
        float _1281 = _1172 * 0.5;
        float _1282 = _1182 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_485, _486, _487), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _3771 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1307 + 1.0))) + _1312) * _1195;
        _1329 = _1162;
        _1330 = _1161;
        _1331 = _1160;
        _1332 = _1172;
        _1333 = _1171;
        _1334 = _1170;
        _1335 = _1182;
        _1336 = _1181;
        _1337 = _1180;
        _1338 = _1195;
        _1339 = _1194;
        _1340 = _1193;
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1020;
        _1330 = _1020;
        _1331 = _1020;
        _1332 = _1020;
        _1333 = _1020;
        _1334 = _1020;
        _1335 = _1020;
        _1336 = _1020;
        _1337 = _1020;
        _1338 = _1020;
        _1339 = _1020;
        _1340 = _1020;
        _1341 = 0.0;
        _1342 = 0.0;
        _1343 = 0.0;
    }
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1032)) + _1032;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1033)) + _1033;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1034)) + _1034;
    float _1376 = fma(_1355, cbSceneParam._m0[89u].z, fma(_1354, cbSceneParam._m0[89u].y, _1353 * cbSceneParam._m0[89u].x));
    float _1379 = fma(_1355, cbSceneParam._m0[90u].z, fma(_1354, cbSceneParam._m0[90u].y, _1353 * cbSceneParam._m0[90u].x));
    float _1382 = fma(_1355, cbSceneParam._m0[91u].z, fma(_1354, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1353));
    float _1397 = _653 * 0.5;
    float _1398 = _654 * 0.5;
    float _1399 = _655 * 0.5;
    float _1400 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1403 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1406 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1440;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1413 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1019, _1023, _1026, _1029));
        float _1417 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1021, _1024, _1027, _1030));
        float _1421 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1022, _1025, _1028, _1031));
        float _1428 = dot(vec4(cbModelParam._m0[39u]), vec4(_1397, _1398, _1399, 1.0));
        _1440 = dot(vec3(isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1428) ? 0.0 : (isnan(0.0) ? _1428 : max(0.0, _1428))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1440 = 1.0;
    }
    float _1451;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1442 = dot(vec4(cbModelParam._m0[40u]), vec4(_1397, _1398, _1399, 1.0));
        _1451 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1451 = 1.0;
    }
    float _1455 = (_1451 * cbModelParam._m0[1u].x) + (_1440 * (1.0 - cbModelParam._m0[1u].x));
    float _1465 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _489);
    float _1466 = isnan(_1465) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1465 : min(cbModelParam._m0[25u].z, _1465));
    float _1548;
    float _1550;
    float _1552;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1515 = fma(_717, cbModelParam._m0[13u].z, fma(_713, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _709)) + cbModelParam._m0[13u].w;
        float _1519 = fma(_717, cbModelParam._m0[14u].z, fma(_713, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _709)) + cbModelParam._m0[14u].w;
        float _1523 = fma(_717, cbModelParam._m0[15u].z, fma(_713, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _709)) + cbModelParam._m0[15u].w;
        float _1526 = fma(_655, cbModelParam._m0[13u].z, fma(_654, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653));
        float _1529 = fma(_655, cbModelParam._m0[14u].z, fma(_654, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653));
        float _1532 = fma(_655, cbModelParam._m0[15u].z, fma(_654, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653));
        float _1560;
        if (_1526 > 0.0)
        {
            _1560 = abs((1.0 - _1515) / _1526);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1515 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1560 = frontier_phi_16_14_ladder;
        }
        float _1788;
        if (_1529 > 0.0)
        {
            _1788 = abs((1.0 - _1519) / _1529);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1519 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1788 = frontier_phi_25_21_ladder;
        }
        float _2045;
        if (_1532 > 0.0)
        {
            _2045 = abs((1.0 - _1523) / _1532);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1523 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2045 = frontier_phi_37_32_ladder;
        }
        float _2047 = isnan(_1788) ? _1560 : (isnan(_1560) ? _1788 : min(_1560, _1788));
        float _2048 = isnan(_2045) ? _2047 : (isnan(_2047) ? _2045 : min(_2047, _2045));
        float _2052 = (_2048 * _1526) + _1515;
        float _2053 = (_2048 * _1529) + _1519;
        float _2054 = (_2048 * _1532) + _1523;
        float _2055 = _2048 * 9.9999997473787516355514526367188e-05;
        float _2057 = (-1.0) - _2055;
        float _2059 = _2055 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2054 > _2059) || ((_2054 < _2057) || ((_2053 > _2059) || ((_2053 < _2057) || ((_2052 < _2057) || (_2052 > _2059))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2182 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2054, cbModelParam._m0[9u].z, fma(_2053, cbModelParam._m0[9u].y, _2052 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2054, cbModelParam._m0[10u].z, fma(_2053, cbModelParam._m0[10u].y, _2052 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2054, cbModelParam._m0[11u].z, fma(_2053, cbModelParam._m0[11u].y, _2052 * cbModelParam._m0[11u].x))), _1466);
            frontier_phi_15_37_ladder = _2182.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2182.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2182.x * cbModelParam._m0[1u].y;
        }
        _1548 = frontier_phi_15_37_ladder_2;
        _1550 = frontier_phi_15_37_ladder_1;
        _1552 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_653, _654, _655), _1466);
        _1548 = _1536.x * cbModelParam._m0[1u].y;
        _1550 = _1536.y * cbModelParam._m0[1u].y;
        _1552 = _1536.z * cbModelParam._m0[1u].y;
    }
    float _1556 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _489);
    float _1557 = isnan(_1556) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1556 : min(cbModelParam._m0[25u].w, _1556));
    float _1650;
    float _1652;
    float _1654;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1614 = fma(_717, cbModelParam._m0[21u].z, fma(_713, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _709)) + cbModelParam._m0[21u].w;
        float _1618 = fma(_717, cbModelParam._m0[22u].z, fma(_713, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _709)) + cbModelParam._m0[22u].w;
        float _1622 = fma(_717, cbModelParam._m0[23u].z, fma(_713, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _709)) + cbModelParam._m0[23u].w;
        float _1625 = fma(_655, cbModelParam._m0[21u].z, fma(_654, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653));
        float _1628 = fma(_655, cbModelParam._m0[22u].z, fma(_654, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653));
        float _1631 = fma(_655, cbModelParam._m0[23u].z, fma(_654, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653));
        float _1793;
        if (_1625 > 0.0)
        {
            _1793 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1793 = frontier_phi_27_23_ladder;
        }
        float _2072;
        if (_1628 > 0.0)
        {
            _2072 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2072 = frontier_phi_39_34_ladder;
        }
        float _2285;
        if (_1631 > 0.0)
        {
            _2285 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2285 = frontier_phi_48_45_ladder;
        }
        float _2287 = isnan(_2072) ? _1793 : (isnan(_1793) ? _2072 : min(_1793, _2072));
        float _2288 = isnan(_2285) ? _2287 : (isnan(_2287) ? _2285 : min(_2287, _2285));
        float _2292 = (_2288 * _1625) + _1614;
        float _2293 = (_2288 * _1628) + _1618;
        float _2294 = (_2288 * _1631) + _1622;
        float _2295 = _2288 * 9.9999997473787516355514526367188e-05;
        float _2296 = (-1.0) - _2295;
        float _2298 = _2295 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2294 > _2298) || ((_2294 < _2296) || ((_2293 > _2298) || ((_2293 < _2296) || ((_2292 < _2296) || (_2292 > _2298))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2497 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2294, cbModelParam._m0[17u].z, fma(_2293, cbModelParam._m0[17u].y, _2292 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2294, cbModelParam._m0[18u].z, fma(_2293, cbModelParam._m0[18u].y, _2292 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2294, cbModelParam._m0[19u].z, fma(_2293, cbModelParam._m0[19u].y, _2292 * cbModelParam._m0[19u].x))), _1557);
            frontier_phi_24_48_ladder = _2497.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2497.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2497.x * cbModelParam._m0[1u].z;
        }
        _1650 = frontier_phi_24_48_ladder_2;
        _1652 = frontier_phi_24_48_ladder_1;
        _1654 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1634 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_653, _654, _655), _1557);
        _1650 = _1634.x * cbModelParam._m0[1u].z;
        _1652 = _1634.y * cbModelParam._m0[1u].z;
        _1654 = _1634.z * cbModelParam._m0[1u].z;
    }
    float _1667 = (((_680 * _630) + _681) * _645) * ((cbModelParam._m0[1u].w * (_1650 - _1548)) + _1548);
    float _1669 = (((_680 * _632) + _681) * _645) * ((cbModelParam._m0[1u].w * (_1652 - _1550)) + _1550);
    float _1671 = (((_680 * _633) + _681) * _645) * ((cbModelParam._m0[1u].w * (_1654 - _1552)) + _1552);
    float _1674 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1667 * cbSceneParam._m0[89u].x));
    float _1677 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1667 * cbSceneParam._m0[90u].x));
    float _1680 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, _1667 * cbSceneParam._m0[91u].x));
    vec4 _1688 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_563, _564));
    float _1690 = _1688.w;
    float _1702 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1690);
    float _1703 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1690);
    float _1704 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1690);
    uvec4 _1708 = floatBitsToUint(cbInstanceData._m0[_604 + 5u]);
    uint _1710 = _1708.x * 14u;
    uint _1711 = _1710 + 13u;
    float _1718 = _645 + (-1.0);
    float _1723 = (cbLight._m0[_1711].x * _1718) + 1.0;
    float _1724 = (cbLight._m0[_1711].y * _1718) + 1.0;
    float _1725 = (cbLight._m0[_1711].z * _1718) + 1.0;
    float _1726 = (cbLight._m0[_1711].w * _1718) + 1.0;
    uint _1727 = _1710 + 5u;
    float _1733 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
    uint _1737 = _1710 + 4u;
    float _1747 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
    uint _1751 = _1710 | 1u;
    float _1762 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_485, _486, _487));
    float _1765 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_485, _486, _487));
    float _3907 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _3918 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1770 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 0.3183098733425140380859375;
    float _1772 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * 0.3183098733425140380859375;
    float _1779 = ((cbLight._m0[_1727].x * _1733) * _1772) + (((cbLight._m0[_1737].x * _1702) * _1747) * _1770);
    float _1780 = ((_1733 * cbLight._m0[_1727].y) * _1772) + (((cbLight._m0[_1737].y * _1703) * _1747) * _1770);
    float _1781 = ((_1733 * cbLight._m0[_1727].z) * _1772) + (((cbLight._m0[_1737].z * _1704) * _1747) * _1770);
    uvec4 _1785 = floatBitsToUint(cbLight._m0[_1710 + 12u]);
    bool _1787 = _1785.x == 0u;
    float _1798;
    float _1800;
    float _1802;
    if (_1787)
    {
        _1798 = _1779;
        _1800 = _1780;
        _1802 = _1781;
    }
    else
    {
        uint _1806 = _1710 + 6u;
        float _1822 = (dot(vec3(cbLight._m0[_1710 + 2u].xyz), vec3(_485, _486, _487)) * 0.5) + 0.5;
        float _1823 = _1822 * _1822;
        float _3929 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1825 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _1798 = (((cbLight._m0[_1806].x * 0.3183098733425140380859375) * _1824) * _1825) + _1779;
        _1800 = (((cbLight._m0[_1806].y * 0.3183098733425140380859375) * _1824) * _1825) + _1780;
        _1802 = (((cbLight._m0[_1806].z * 0.3183098733425140380859375) * _1824) * _1825) + _1781;
    }
    bool _1805 = _1785.y == 0u;
    float _1843;
    float _1845;
    float _1847;
    if (_1805)
    {
        _1843 = _1798;
        _1845 = _1800;
        _1847 = _1802;
    }
    else
    {
        uint _2016 = _1710 + 7u;
        float _2032 = (dot(vec3(cbLight._m0[_1710 + 3u].xyz), vec3(_485, _486, _487)) * 0.5) + 0.5;
        float _2033 = _2032 * _2032;
        float _3945 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2034 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _2035 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _1843 = (((cbLight._m0[_2016].x * 0.3183098733425140380859375) * _2034) * _2035) + _1798;
        _1845 = (((cbLight._m0[_2016].y * 0.3183098733425140380859375) * _2034) * _2035) + _1800;
        _1847 = (((cbLight._m0[_2016].z * 0.3183098733425140380859375) * _2034) * _2035) + _1802;
    }
    uint _1850 = _1710 + 8u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1710].w)) * _489) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1710].x + _556;
    float _1866 = cbLight._m0[_1710].y + _557;
    float _1867 = cbLight._m0[_1710].z + _558;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_1710].xyz));
    float _3961 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _3972 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _1879 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _1880 = dot(vec3(_485, _486, _487), vec3(_1872, _1873, _1874));
    float _3983 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _1884 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_1872, _1873, _1874));
    float _3994 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1888 = _1864 * _1864;
    float _1892 = ((_1883 * _1883) * (_1888 + (-1.0))) + 1.0;
    float _1900 = exp2(log2(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * 5.0);
    float _1901 = 0.959999978542327880859375 - _627;
    float _1903 = 0.959999978542327880859375 - _628;
    float _1904 = 0.959999978542327880859375 - _629;
    float _1911 = 1.0 - _1864;
    float _1922 = (0.5 / (((_1879 * ((_1878 * _1911) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _1911) + _1864) * _1878))) * _1878;
    float _4005 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1924 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1888 / ((_1892 * _1892) * 3.141590118408203125));
    uint _1938 = _1710 + 9u;
    float _1949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1751].w)) * _489) * 0.949999988079071044921875);
    float _1950 = _1949 * _1949;
    float _1951 = cbLight._m0[_1751].x + _556;
    float _1952 = cbLight._m0[_1751].y + _557;
    float _1953 = cbLight._m0[_1751].z + _558;
    float _1957 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
    float _1958 = _1957 * _1951;
    float _1959 = _1957 * _1952;
    float _1960 = _1957 * _1953;
    float _1961 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_1751].xyz));
    float _4016 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _1965 = dot(vec3(_485, _486, _487), vec3(_1958, _1959, _1960));
    float _4027 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1968 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1969 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_1958, _1959, _1960));
    float _4038 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1973 = _1950 * _1950;
    float _1977 = ((_1968 * _1968) * (_1973 + (-1.0))) + 1.0;
    float _1984 = exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0);
    float _1991 = 1.0 - _1950;
    float _2001 = (0.5 / (((_1879 * ((_1964 * _1991) + _1950)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _1991) + _1950) * _1964))) * _1964;
    float _4049 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2003 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1973 / ((_1977 * _1977) * 3.141590118408203125));
    float _2013 = (((((_1984 * _1901) + _630) * cbLight._m0[_1938].x) * _2003) * _1733) + ((((cbLight._m0[_1850].x * _1702) * ((_1900 * _1901) + _630)) * _1924) * _1747);
    float _2014 = (((((_1984 * _1903) + _632) * cbLight._m0[_1938].y) * _2003) * _1733) + ((((cbLight._m0[_1850].y * _1703) * ((_1900 * _1903) + _632)) * _1924) * _1747);
    float _2015 = (((((_1984 * _1904) + _633) * cbLight._m0[_1938].z) * _2003) * _1733) + ((((cbLight._m0[_1850].z * _1704) * ((_1900 * _1904) + _633)) * _1924) * _1747);
    float _2077;
    float _2079;
    float _2081;
    if (_1787)
    {
        _2077 = _2013;
        _2079 = _2014;
        _2081 = _2015;
    }
    else
    {
        uint _2083 = _1710 + 2u;
        uint _2087 = _1710 + 10u;
        float _2101 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _489) * 0.949999988079071044921875);
        float _2102 = _2101 * _2101;
        float _2103 = cbLight._m0[_2083].x + _556;
        float _2104 = cbLight._m0[_2083].y + _557;
        float _2105 = cbLight._m0[_2083].z + _558;
        float _2109 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
        float _2110 = _2109 * _2103;
        float _2111 = _2109 * _2104;
        float _2112 = _2109 * _2105;
        float _2113 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_2083].xyz));
        float _4060 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2116 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2117 = dot(vec3(_485, _486, _487), vec3(_2110, _2111, _2112));
        float _4071 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _2121 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2110, _2111, _2112));
        float _4082 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2125 = _2102 * _2102;
        float _2129 = ((_2120 * _2120) * (_2125 + (-1.0))) + 1.0;
        float _2136 = exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0);
        float _2143 = 1.0 - _2102;
        float _2153 = (0.5 / (((_1879 * ((_2116 * _2143) + _2102)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _2143) + _2102) * _2116))) * _2116;
        float _4093 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2155 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2125 / ((_2129 * _2129) * 3.141590118408203125));
        float _2156 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _2077 = (((((_2136 * _1901) + _630) * cbLight._m0[_2087].x) * _2155) * _2156) + _2013;
        _2079 = (((((_2136 * _1903) + _632) * cbLight._m0[_2087].y) * _2155) * _2156) + _2014;
        _2081 = (((((_2136 * _1904) + _633) * cbLight._m0[_2087].z) * _2155) * _2156) + _2015;
    }
    float _2191;
    float _2193;
    float _2195;
    if (_1805)
    {
        _2191 = _2077;
        _2193 = _2079;
        _2195 = _2081;
    }
    else
    {
        uint _2202 = _1710 + 3u;
        uint _2206 = _1710 + 11u;
        float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2202].w)) * _489) * 0.949999988079071044921875);
        float _2221 = _2220 * _2220;
        float _2222 = cbLight._m0[_2202].x + _556;
        float _2223 = cbLight._m0[_2202].y + _557;
        float _2224 = cbLight._m0[_2202].z + _558;
        float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
        float _2229 = _2228 * _2222;
        float _2230 = _2228 * _2223;
        float _2231 = _2228 * _2224;
        float _2232 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_2202].xyz));
        float _4109 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2235 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2236 = dot(vec3(_485, _486, _487), vec3(_2229, _2230, _2231));
        float _4120 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2239 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2240 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2229, _2230, _2231));
        float _4131 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2244 = _2221 * _2221;
        float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
        float _2255 = exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0);
        float _2262 = 1.0 - _2221;
        float _2272 = (0.5 / (((_1879 * ((_2235 * _2262) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _2262) + _2221) * _2235))) * _2235;
        float _4142 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2274 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
        float _2275 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _2191 = (((((_2255 * _1901) + _630) * cbLight._m0[_2206].x) * _2274) * _2275) + _2077;
        _2193 = (((((_2255 * _1903) + _632) * cbLight._m0[_2206].y) * _2274) * _2275) + _2079;
        _2195 = (((((_2255 * _1904) + _633) * cbLight._m0[_2206].z) * _2274) * _2275) + _2081;
    }
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    float _2419;
    if (_1708.y == 0u)
    {
        float _2350 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2350;
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2350;
        float _2353 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2350;
        uvec4 _2365 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2366 = _2365.x;
        uint _2377 = uint((float(_2365.y) * floor(float(uint(cbSceneParam._m0[85u].y * _564) / _2366))) + floor(float(uint(cbSceneParam._m0[85u].x * _563) / _2366)));
        float _2387 = (log2(_2353 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2388 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        uint _2391 = uint(isnan(14.0) ? _2388 : (isnan(_2388) ? 14.0 : min(_2388, 14.0)));
        uvec4 _2396 = texelFetch(g_lightClusterGridBuffer, int(((_2391 << 2u) + (_2377 << 6u)) >> 2u));
        uint _2397 = _2396.x;
        uint _2398 = _2365.z;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        if (((((1u << ((_2398 >> 4u) & 15u)) + 4294967295u) & _2397) == 0u) || ((_2398 & 240u) == 0u))
        {
            _2502 = 0.0;
            _2504 = 0.0;
            _2506 = 0.0;
            _2508 = 0.0;
            _2510 = 0.0;
            _2512 = 0.0;
        }
        else
        {
            float _2503;
            float _2505;
            float _2507;
            float _2509;
            float _2511;
            float _2513;
            float _2646 = 0.0;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            uint _2652 = 0u;
            uint _2661;
            bool _2662;
            for (;;)
            {
                _2661 = texelFetch(g_lightClassification, int((((_2391 << 5u) + (_2377 << 9u)) + (_2652 << 2u)) >> 2u)).x;
                _2662 = _2661 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2662)
                {
                    frontier_phi_63_pred = _2651;
                    frontier_phi_63_pred_1 = _2650;
                    frontier_phi_63_pred_2 = _2649;
                    frontier_phi_63_pred_3 = _2648;
                    frontier_phi_63_pred_4 = _2647;
                    frontier_phi_63_pred_5 = _2646;
                }
                else
                {
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    uint _2776;
                    _2770 = _2646;
                    _2771 = _2647;
                    _2772 = _2648;
                    _2773 = _2649;
                    _2774 = _2650;
                    _2775 = _2651;
                    _2776 = _2661;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    for (;;)
                    {
                        uint _2780 = uint(findLSB(_2776)) + (_2652 << 5u);
                        uint _2777 = (_2776 + 4294967295u) & _2776;
                        uint _2782 = _2780 * 48u;
                        vec4 _2796 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2782)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 3u)).x));
                        uint _2802 = (_2780 * 48u) + 4u;
                        vec4 _2815 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2802)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 3u)).x));
                        uint _2821 = (_2780 * 48u) + 8u;
                        vec3 _2832 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x));
                        float _2836 = _2796.x - _2351;
                        float _2837 = _2796.y - _2352;
                        float _2838 = _2796.z - _2353;
                        float _2839 = dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838));
                        float _2842 = inversesqrt(_2839);
                        float _2843 = _2842 * _2836;
                        float _2844 = _2842 * _2837;
                        float _2845 = _2842 * _2838;
                        float _2846 = dot(vec3(_585, _588, _591), vec3(_2843, _2844, _2845));
                        float _2851 = 1.0 - (_2839 * _2796.w);
                        float _4168 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2852 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                        float _2853 = sqrt(_2839) * _2815.w;
                        float _2856 = 1.39999997615814208984375 / (_2853 + 1.39999997615814208984375);
                        float _2857 = _2856 * _2856;
                        float _2860 = ((1.0 - _2857) * _2846) + _2857;
                        float _2863 = _2853 * _2853;
                        float _2867 = ((isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0))) * _2852) / ((_2863 * 0.699999988079071044921875) + 1.0);
                        float _2871 = (-0.0) - _2351;
                        float _2872 = (-0.0) - _2352;
                        float _2873 = (-0.0) - _2353;
                        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
                        float _2878 = _2877 * _2871;
                        float _2879 = _2877 * _2872;
                        float _2880 = _2877 * _2873;
                        float _2888 = exp2(log2(1.0 / ((_2863 * 3.5) + 5.0)) * 0.25);
                        float _2889 = 1.0 - _661;
                        float _2896 = sqrt(1.0 - ((1.0 - (_2889 * _2889)) * (1.0 - (_2888 * _2888))));
                        float _2897 = _2896 * _2896;
                        float _2898 = _2897 * _2897;
                        float _2899 = _2878 + _2843;
                        float _2900 = _2879 + _2844;
                        float _2901 = _2880 + _2845;
                        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
                        float _2909 = dot(vec3(_585, _588, _591), vec3(_2878, _2879, _2880));
                        float _4184 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2912 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2913 = dot(vec3(_585, _588, _591), vec3(_2905 * _2899, _2905 * _2900, _2905 * _2901));
                        float _4195 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2916 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2920 = ((_2916 * _2916) * (_2898 + (-1.0))) + 1.0;
                        float _2921 = _2856 * _2897;
                        float _2922 = _2921 * _2921;
                        float _2925 = ((1.0 - _2922) * _2846) + _2922;
                        float _4206 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2926 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _2927 = 1.0 - _2897;
                        float _2937 = (0.5 / (((_2926 * ((_2912 * _2927) + _2897)) + 9.9999999392252902907785028219223e-09) + (((_2926 * _2927) + _2897) * _2912))) * _2926;
                        float _4217 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2948 = (((_2898 * 3.1415927410125732421875) * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) / ((_2920 * _2920) * ((_2863 * 2.1991131305694580078125) + 3.141590118408203125))) * _2852;
                        _2705 = (_2867 * _2815.x) + _2773;
                        _2706 = (_2867 * _2815.y) + _2774;
                        _2707 = (_2867 * _2815.z) + _2775;
                        _2702 = (_2948 * _2832.x) + _2770;
                        _2703 = (_2948 * _2832.y) + _2771;
                        _2704 = (_2948 * _2832.z) + _2772;
                        if (_2777 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2770 = _2702;
                            _2771 = _2703;
                            _2772 = _2704;
                            _2773 = _2705;
                            _2774 = _2706;
                            _2775 = _2707;
                            _2776 = _2777;
                        }
                    }
                    frontier_phi_63_pred = _2707;
                    frontier_phi_63_pred_1 = _2706;
                    frontier_phi_63_pred_2 = _2705;
                    frontier_phi_63_pred_3 = _2704;
                    frontier_phi_63_pred_4 = _2703;
                    frontier_phi_63_pred_5 = _2702;
                }
                _2513 = frontier_phi_63_pred;
                _2511 = frontier_phi_63_pred_1;
                _2509 = frontier_phi_63_pred_2;
                _2507 = frontier_phi_63_pred_3;
                _2505 = frontier_phi_63_pred_4;
                _2503 = frontier_phi_63_pred_5;
                uint _2653 = _2652 + 1u;
                if (_2653 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2646 = _2503;
                    _2647 = _2505;
                    _2648 = _2507;
                    _2649 = _2509;
                    _2650 = _2511;
                    _2651 = _2513;
                    _2652 = _2653;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2502 = _2503;
            _2504 = _2505;
            _2506 = _2507;
            _2508 = _2509;
            _2510 = _2511;
            _2512 = _2513;
        }
        uvec4 _2516 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2517 = _2516.z;
        uint _2519 = (_2517 >> 8u) & 15u;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        if (((4294967295u << _2519) & _2397) == 0u)
        {
            _2614 = _2502;
            _2616 = _2504;
            _2618 = _2506;
            _2620 = _2508;
            _2622 = _2510;
            _2624 = _2512;
        }
        else
        {
            float _2639 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
            float _2640 = _2639 * _2351;
            float _2641 = _2639 * _2352;
            float _2642 = _2639 * _2353;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2519 < ((_2517 >> 12u) & 15u))
            {
                float _2615;
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2753 = _2502;
                float _2754 = _2504;
                float _2755 = _2506;
                float _2756 = _2508;
                float _2757 = _2510;
                float _2758 = _2512;
                uint _2759 = _2519;
                uint _2768;
                bool _2769;
                for (;;)
                {
                    _2768 = texelFetch(g_lightClassification, int((((_2391 << 5u) + (_2377 << 9u)) + (_2759 << 2u)) >> 2u)).x;
                    _2769 = _2768 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2769)
                    {
                        frontier_phi_69_pred = _2758;
                        frontier_phi_69_pred_1 = _2757;
                        frontier_phi_69_pred_2 = _2756;
                        frontier_phi_69_pred_3 = _2755;
                        frontier_phi_69_pred_4 = _2754;
                        frontier_phi_69_pred_5 = _2753;
                    }
                    else
                    {
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _2966 = _2753;
                        float _2967 = _2754;
                        float _2968 = _2755;
                        float _2969 = _2756;
                        float _2970 = _2757;
                        float _2971 = _2758;
                        uint _2972 = _2768;
                        uint _2973;
                        vec4 _2998;
                        float _2999;
                        vec4 _3014;
                        vec3 _3026;
                        vec4 _3042;
                        vec4 _3058;
                        float _3105;
                        bool _3106;
                        for (;;)
                        {
                            uint _2983 = ((_2759 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2972));
                            _2973 = (_2972 + 4294967295u) & _2972;
                            uint _2985 = _2983 * 40u;
                            _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            _2999 = _2998.w;
                            uint _3001 = (_2983 * 40u) + 4u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3016 = (_2983 * 40u) + 8u;
                            _3026 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x));
                            uint _3029 = (_2983 * 40u) + 16u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3045 = (_2983 * 40u) + 20u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3061 = (_2983 * 40u) + 24u;
                            vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3080 = (_2983 * 40u) + 28u;
                            vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            _3105 = fma(_2353, _3093.z, fma(_2352, _3093.y, _3093.x * _2351)) + _3093.w;
                            _3106 = !((fma(_2353, _3074.z, fma(_2352, _3074.y, _3074.x * _2351)) + _3074.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3106)
                            {
                                float _3133 = _2998.x - _2351;
                                float _3134 = _2998.y - _2352;
                                float _3135 = _2998.z - _2353;
                                float _3136 = dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135));
                                float _3139 = inversesqrt(_3136);
                                float _3140 = _3139 * _3133;
                                float _3141 = _3139 * _3134;
                                float _3142 = _3139 * _3135;
                                float _3146 = 1.0 - (_3136 / (_2999 * _2999));
                                float _4228 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3147 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3151 = sqrt(_3136) * _3014.w;
                                float _3153 = 1.39999997615814208984375 / (_3151 + 1.39999997615814208984375);
                                float _3154 = _3153 * _3153;
                                float _3157 = ((1.0 - _3154) * dot(vec3(_3140, _3141, _3142), vec3(_585, _588, _591))) + _3154;
                                float _3160 = _3151 * _3151;
                                float _3164 = (fma(_2353, _3042.z, fma(_2352, _3042.y, _3042.x * _2351)) + _3042.w) / _3105;
                                float _3165 = (fma(_2353, _3058.z, fma(_2352, _3058.y, _3058.x * _2351)) + _3058.w) / _3105;
                                float _3169 = 1.0 - dot(vec2(_3164, _3165), vec2(_3164, _3165));
                                float _4244 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3171 = _3170 * (((isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0))) * _3147) / ((_3160 * 0.699999988079071044921875) + 1.0));
                                float _3183 = exp2(log2(1.0 / ((_3160 * 3.5) + 5.0)) * 0.25);
                                float _3184 = 1.0 - _661;
                                float _3191 = sqrt(1.0 - ((1.0 - (_3184 * _3184)) * (1.0 - (_3183 * _3183))));
                                float _3192 = _3191 * _3191;
                                float _3193 = _3192 * _3192;
                                float _3194 = _3140 - _2640;
                                float _3195 = _3141 - _2641;
                                float _3196 = _3142 - _2642;
                                float _3200 = inversesqrt(dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196)));
                                float _3204 = dot(vec3(_585, _588, _591), vec3((-0.0) - _2640, (-0.0) - _2641, (-0.0) - _2642));
                                float _4255 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3207 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3208 = dot(vec3(_585, _588, _591), vec3(_3200 * _3194, _3200 * _3195, _3200 * _3196));
                                float _4266 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3211 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3215 = ((_3211 * _3211) * (_3193 + (-1.0))) + 1.0;
                                float _3216 = _3153 * _3192;
                                float _3217 = _3216 * _3216;
                                float _3223 = ((1.0 - _3217) * dot(vec3(_585, _588, _591), vec3(_3140, _3141, _3142))) + _3217;
                                float _4277 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3224 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3225 = 1.0 - _3192;
                                float _3235 = (0.5 / (((_3224 * ((_3207 * _3225) + _3192)) + 9.9999999392252902907785028219223e-09) + (((_3224 * _3225) + _3192) * _3207))) * _3224;
                                float _4288 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3245 = (_3170 * _3147) * (((_3193 * 3.1415927410125732421875) * (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) / ((_3215 * _3215) * ((_3160 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3171 * _3014.z;
                                frontier_phi_75_pred_1 = _3171 * _3014.y;
                                frontier_phi_75_pred_2 = _3171 * _3014.x;
                                frontier_phi_75_pred_3 = _3245 * _3026.z;
                                frontier_phi_75_pred_4 = _3245 * _3026.y;
                                frontier_phi_75_pred_5 = _3245 * _3026.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3254 = frontier_phi_75_pred;
                            _3253 = frontier_phi_75_pred_1;
                            _3252 = frontier_phi_75_pred_2;
                            _3251 = frontier_phi_75_pred_3;
                            _3250 = frontier_phi_75_pred_4;
                            _3249 = frontier_phi_75_pred_5;
                            _2956 = _3252 + _2969;
                            _2957 = _3253 + _2970;
                            _2958 = _3254 + _2971;
                            _2953 = _3249 + _2966;
                            _2954 = _3250 + _2967;
                            _2955 = _3251 + _2968;
                            if (_2973 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2973;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2958;
                        frontier_phi_69_pred_1 = _2957;
                        frontier_phi_69_pred_2 = _2956;
                        frontier_phi_69_pred_3 = _2955;
                        frontier_phi_69_pred_4 = _2954;
                        frontier_phi_69_pred_5 = _2953;
                    }
                    _2625 = frontier_phi_69_pred;
                    _2623 = frontier_phi_69_pred_1;
                    _2621 = frontier_phi_69_pred_2;
                    _2619 = frontier_phi_69_pred_3;
                    _2617 = frontier_phi_69_pred_4;
                    _2615 = frontier_phi_69_pred_5;
                    uint _2760 = _2759 + 1u;
                    if (_2760 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2753 = _2615;
                        _2754 = _2617;
                        _2755 = _2619;
                        _2756 = _2621;
                        _2757 = _2623;
                        _2758 = _2625;
                        _2759 = _2760;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2625;
                frontier_phi_57_58_ladder_1 = _2623;
                frontier_phi_57_58_ladder_2 = _2621;
                frontier_phi_57_58_ladder_3 = _2619;
                frontier_phi_57_58_ladder_4 = _2617;
                frontier_phi_57_58_ladder_5 = _2615;
            }
            else
            {
                frontier_phi_57_58_ladder = _2512;
                frontier_phi_57_58_ladder_1 = _2510;
                frontier_phi_57_58_ladder_2 = _2508;
                frontier_phi_57_58_ladder_3 = _2506;
                frontier_phi_57_58_ladder_4 = _2504;
                frontier_phi_57_58_ladder_5 = _2502;
            }
            _2614 = frontier_phi_57_58_ladder_5;
            _2616 = frontier_phi_57_58_ladder_4;
            _2618 = frontier_phi_57_58_ladder_3;
            _2620 = frontier_phi_57_58_ladder_2;
            _2622 = frontier_phi_57_58_ladder_1;
            _2624 = frontier_phi_57_58_ladder;
        }
        float _2629 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
        _2409 = (_2629 * _2620) + _1843;
        _2411 = (_2629 * _2622) + _1845;
        _2413 = (_2629 * _2624) + _1847;
        _2415 = ((_2614 * _630) * _2629) + _2191;
        _2417 = ((_2616 * _632) * _2629) + _2193;
        _2419 = ((_2618 * _633) * _2629) + _2195;
    }
    else
    {
        _2409 = _1843;
        _2411 = _1845;
        _2413 = _1847;
        _2415 = _2191;
        _2417 = _2193;
        _2419 = _2195;
    }
    float _4304 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4315 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4326 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4337 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _2437 = ((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2409 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _645))) + ((_2415 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1455)) * cbPerFrame._m0[3u].x);
    float _2438 = ((isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2411 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _645))) + ((_2417 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1455)) * cbPerFrame._m0[3u].x);
    float _2439 = ((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2413 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _645))) + ((_2419 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1455)) * cbPerFrame._m0[3u].x);
    float _2447 = cbInstanceData._m0[_604 + 6u].w * (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)));
    float _2452 = _563 / cbSceneParam._m0[86u].x;
    float _2453 = _564 / cbSceneParam._m0[86u].y;
    vec4 _2467 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2452, _2453, (log2((isnan(cbSceneParam._m0[77u].w) ? _498 : (isnan(_498) ? cbSceneParam._m0[77u].w : min(_498, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2469 = _2467.x;
    float _2470 = _2467.y;
    float _2471 = _2467.z;
    float _2472 = _2467.w;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    if (_498 > cbSceneParam._m0[78u].w)
    {
        float _2527 = isnan(_498) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _498 : min(cbSceneParam._m0[80u].w, _498));
        float _2528 = _2527 / _498;
        float _2539 = _2528 * _549;
        float _2540 = _550 * _2528;
        float _2541 = (-0.0) - _2540;
        float _2542 = _2528 * _551;
        float _2544 = (cbSceneParam._m0[77u].w * _2541) / _2527;
        float _2545 = _2544 + cbSceneParam._m0[79u].w;
        float _2546 = cbSceneParam._m0[79u].w - _2540;
        float _2552 = sqrt(((_2539 * _2539) + (_2540 * _2540)) + (_2542 * _2542));
        float _2555 = (1.0 - (cbSceneParam._m0[77u].w / _2527)) * _2552;
        float _2560 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2562 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2715;
        if (abs((_2541 - _2544) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2715 = ((((_2545 > 0.0) ? exp2(_2560 * _2545) : (2.0 - exp2(_2562 * _2545))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2555;
        }
        else
        {
            float _2675 = 1.0 / cbSceneParam._m0[80u].x;
            float _2676 = isnan(_2546) ? _2545 : (isnan(_2545) ? _2546 : max(_2545, _2546));
            float _2677 = isnan(_2546) ? _2545 : (isnan(_2545) ? _2546 : min(_2545, _2546));
            float _2686 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : min(_2676, 0.0));
            float _2687 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : min(_2677, 0.0));
            _2715 = ((abs(_2552 / _2541) * cbSceneParam._m0[80u].y) * ((((_2686 - _2687) * 2.0) - ((exp2(_2560 * (isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0)))) - exp2(_2560 * (isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0))))) * _2675)) - ((exp2(_2562 * _2686) - exp2(_2562 * _2687)) * _2675))) + (_2555 * cbSceneParam._m0[80u].z);
        }
        vec4 _2717 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2452, _2453, 1.0), 0.0);
        float _2726 = exp2((_2715 * (-1.44269502162933349609375)) * (1.0 - _2717.w));
        float _2727 = log2(_2726);
        float _2743 = log2(_2472);
        _2564 = (exp2(_2743 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].x)) * _2717.x) / cbSceneParam._m0[78u].x)) + _2469;
        _2566 = (exp2(_2743 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].y)) * _2717.y) / cbSceneParam._m0[78u].y)) + _2470;
        _2568 = (exp2(_2743 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].z)) * _2717.z) / cbSceneParam._m0[78u].z)) + _2471;
        _2570 = _2726 * _2472;
    }
    else
    {
        _2564 = _2469;
        _2566 = _2470;
        _2568 = _2471;
        _2570 = _2472;
    }
    float _2582 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2583 = _2582 == 3.0;
    float _2584 = log2(_2570);
    float _2591 = exp2(_2584 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0)));
    float _2592 = exp2(_2584 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0)));
    float _2593 = exp2(_2584 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0)));
    float _2602 = (_2582 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2602 * (_2583 ? _2591 : (_2591 + (cbSceneParam._m0[72u].w * _2564)));
    SV_Target.y = _2602 * (_2583 ? _2592 : (_2592 + (cbSceneParam._m0[72u].w * _2566)));
    SV_Target.z = _2602 * (_2583 ? _2593 : (_2593 + (cbSceneParam._m0[72u].w * _2568)));
    SV_Target.w = _2447;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2447;
}


