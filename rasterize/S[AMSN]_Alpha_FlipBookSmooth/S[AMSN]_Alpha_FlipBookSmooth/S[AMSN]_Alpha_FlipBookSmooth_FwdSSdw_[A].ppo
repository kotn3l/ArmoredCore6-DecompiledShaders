#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1081;
float _3500;
float _3501;
float _3502;
float _3503;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    uint _242 = uint(int(floor(cbMtdParam._m0[10u].z)));
    float _243 = fract(cbMtdParam._m0[10u].z);
    uint _244 = _242 + 1u;
    uint _245 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _248 = float(int(_242 - _245 * (_242 / _245)));
    float _252 = float(int(_244 - _245 * (_244 / _245)));
    float _256 = 1.0 / cbMtdParam._m0[10u].w;
    float _258 = 1.0 / cbMtdParam._m0[11u].x;
    float _259 = fract(TEXCOORD_1.x);
    float _260 = fract(TEXCOORD_1.y);
    float _262 = (_259 + (_248 - cbMtdParam._m0[10u].w * trunc(_248 / cbMtdParam._m0[10u].w))) * _256;
    float _264 = (_260 + floor(_248 / cbMtdParam._m0[10u].w)) * _258;
    float _266 = (_259 + (_252 - cbMtdParam._m0[10u].w * trunc(_252 / cbMtdParam._m0[10u].w))) * _256;
    float _268 = (_260 + floor(_252 / cbMtdParam._m0[10u].w)) * _258;
    vec4 _281 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _266) + cbTextureTilingScale._m0[0u].z, (_268 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _292 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _262) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _264) + cbTextureTilingScale._m0[0u].w));
    float _294 = _292.x;
    float _295 = _292.y;
    float _296 = _292.z;
    float _297 = _292.w;
    float _310 = (((_281.x - _294) * _243) + _294) * cbMtdParam._m0[9u].x;
    float _311 = (((_281.y - _295) * _243) + _295) * cbMtdParam._m0[9u].y;
    float _312 = (((_281.z - _296) * _243) + _296) * cbMtdParam._m0[9u].z;
    vec4 _322 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _324 = _322.x;
    float _347 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _324)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _324))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3512 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _350 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * (((_281.w - _297) * _243) + _297);
    float _351 = (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * _350;
    float _352 = gl_FragCoord.x * 0.125;
    float _354 = gl_FragCoord.y * 0.125;
    float _364 = float(_350 >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_352, _354)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _386 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _264) + cbTextureTilingScale._m0[2u].w));
    float _388 = _386.x;
    float _392 = (_388 + cbMtdParam._m0[10u].x) + ((texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _268) + cbTextureTilingScale._m0[2u].w)).x - _388) * _243);
    vec4 _404 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _266) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _268) + cbTextureTilingScale._m0[1u].w));
    float _411 = (_404.x * 2.0) + (-1.0);
    float _413 = (_404.y * 2.0) + (-1.0);
    float _417 = 1.0 - dot(vec2(_411, _413), vec2(_411, _413));
    float _3523 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _419 = sqrt(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0)));
    float _422 = fma(_419, _220, fma(_413, _213, _411 * _199));
    float _425 = fma(_419, _221, fma(_413, _214, _411 * _200));
    float _428 = fma(_419, _222, fma(_413, _215, _411 * _201));
    float _432 = inversesqrt(dot(vec3(_422, _425, _428), vec3(_422, _425, _428)));
    vec4 _440 = texture(sampler2D(S_AMSN_Alpha_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _262) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _264) + cbTextureTilingScale._m0[1u].w));
    float _446 = (_440.x * 2.0) + (-1.0);
    float _447 = (_440.y * 2.0) + (-1.0);
    float _451 = 1.0 - dot(vec2(_446, _447), vec2(_446, _447));
    float _3534 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _453 = sqrt(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)));
    float _456 = fma(_453, _220, fma(_447, _213, _446 * _199));
    float _459 = fma(_453, _221, fma(_447, _214, _446 * _200));
    float _462 = fma(_453, _222, fma(_447, _215, _446 * _201));
    float _466 = inversesqrt(dot(vec3(_456, _459, _462), vec3(_456, _459, _462)));
    float _467 = _466 * _456;
    float _468 = _466 * _459;
    float _469 = _466 * _462;
    float _478 = (((_432 * _428) - _469) * _243) + _469;
    float _481 = (((((_432 * _422) - _467) * _243) + _467) * 2.0) + (-1.0);
    float _482 = (((((_432 * _425) - _468) * _243) + _468) * 2.0) + (-1.0);
    float _483 = dot(vec2(_481, _482), vec2(_481, _482));
    float _3545 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))));
    float _491 = fma(_488, _220, fma(_482, _213, _481 * _199));
    float _494 = fma(_488, _221, fma(_482, _214, _481 * _200));
    float _497 = fma(_488, _222, fma(_482, _215, _481 * _201));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    float _502 = _501 * _491;
    float _503 = _501 * _494;
    float _504 = _501 * _497;
    float _3556 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _505 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _3567 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _506 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3589 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3600 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3611 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _510 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _524 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _575 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _565);
    float _576 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _565);
    float _577 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _565);
    float _581 = inversesqrt(dot(vec3(_575, _576, _577), vec3(_575, _576, _577)));
    float _582 = _575 * _581;
    float _583 = _576 * _581;
    float _584 = _577 * _581;
    vec4 _585 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_352, _354));
    float _587 = _585.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _762 = sqrt(((_575 * _575) + (_576 * _576)) + (_577 * _577));
        float _768 = (cbMatDynParam._m0[5u].x * _762) + cbMatDynParam._m0[5u].y;
        float _3622 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _773 = (cbMatDynParam._m0[5u].z * _762) + cbMatDynParam._m0[5u].w;
        float _3633 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) - _769)) + _769) < ((_587 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _598 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _599 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _619 = fma(_504, cbSceneParam._m0[5u].z, fma(_503, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _502));
    float _622 = fma(_504, cbSceneParam._m0[6u].z, fma(_503, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _502));
    float _625 = fma(_504, cbSceneParam._m0[7u].z, fma(_503, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _502));
    uint _638 = uint(roundEven(NORMAL.w)) * 13u;
    uint _640 = _638 + 9u;
    uint _641 = _640 + uint(cbMatDynParam._m0[0u].w);
    float _647 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * cbInstanceData._m0[_641].x;
    float _648 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * cbInstanceData._m0[_641].y;
    float _649 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_641].z;
    float _3644 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _653 = 1.0 - _510;
    float _654 = _650 * _653;
    float _655 = _651 * _653;
    float _656 = _652 * _653;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _510;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _510;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _510;
    float _664 = _661 + 0.039999999105930328369140625;
    float _666 = _662 + 0.039999999105930328369140625;
    float _667 = _663 + 0.039999999105930328369140625;
    vec4 _676 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _598, cbSceneParam._m0[86u].y * _599));
    float _679 = _676.x * TEXCOORD_1.w;
    float _680 = dot(vec3(_502, _503, _504), vec3(_582, _583, _584));
    float _683 = _680 * 2.0;
    float _687 = (_683 * _502) - _582;
    float _688 = (_683 * _503) - _583;
    float _689 = (_683 * _504) - _584;
    float _693 = abs(dot(vec3(_582, _583, _584), vec3(_502, _503, _504)));
    float _3677 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _695 = sqrt(_506);
    float _708 = exp2((_695 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_695 * 3.0));
    float _714 = (1.0 - _708) * ((_695 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _715 = _708 * _695;
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1080;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _805 = fma(_751, cbModelParam._m0[26u].z, fma(_747, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _743));
        float _809 = fma(_751, cbModelParam._m0[27u].z, fma(_747, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _743));
        float _813 = fma(_751, cbModelParam._m0[28u].z, fma(_747, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _743));
        float _838 = _743 + _502;
        float _839 = _747 + _503;
        float _840 = _751 + _504;
        float _850 = fma(_840, cbModelParam._m0[26u].z, fma(_839, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _838)) - _805;
        float _851 = fma(_840, cbModelParam._m0[27u].z, fma(_839, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _838)) - _809;
        float _852 = fma(_840, cbModelParam._m0[28u].z, fma(_839, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _838)) - _813;
        float _856 = inversesqrt(dot(vec3(_850, _851, _852), vec3(_850, _851, _852)));
        float _869 = ((_856 * _850) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_805 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_856 * _851) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_809 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_856 * _852) / cbModelParam._m0[34u].z) + ((((((_813 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        float _908 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_874.x + (-0.5));
        float _910 = _908 * (_874.y + (-0.5));
        float _911 = _908 * (_874.z + (-0.5));
        float _918 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_881.x + (-0.5));
        float _920 = _918 * (_881.y + (-0.5));
        float _921 = _918 * (_881.z + (-0.5));
        float _928 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_888.x + (-0.5));
        float _930 = _928 * (_888.y + (-0.5));
        float _931 = _928 * (_888.z + (-0.5));
        float _938 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_895.x + (-0.5));
        float _940 = _938 * (_895.y + (-0.5));
        float _941 = _938 * (_895.z + (-0.5));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = _909 * 0.5;
        float _946 = _919 * 0.5;
        float _947 = _929 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _962 = (dot(vec3(_502, _503, _504), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _972 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3725 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_974 + 1.0))) + _979) * _942;
        float _989 = _910 * 0.5;
        float _990 = _920 * 0.5;
        float _991 = _930 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(_502, _503, _504), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3758 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1016 + 1.0))) + _1021) * _943;
        float _1031 = _911 * 0.5;
        float _1032 = _921 * 0.5;
        float _1033 = _931 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_502, _503, _504), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3791 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1058 + 1.0))) + _1063) * _944;
        _1080 = _911;
        _1082 = _910;
        _1083 = _909;
        _1084 = _921;
        _1085 = _920;
        _1086 = _919;
        _1087 = _931;
        _1088 = _930;
        _1089 = _929;
        _1090 = _944;
        _1091 = _943;
        _1092 = _942;
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
    }
    else
    {
        _1080 = _1081;
        _1082 = _1081;
        _1083 = _1081;
        _1084 = _1081;
        _1085 = _1081;
        _1086 = _1081;
        _1087 = _1081;
        _1088 = _1081;
        _1089 = _1081;
        _1090 = _1081;
        _1091 = _1081;
        _1092 = _1081;
        _1093 = 0.0;
        _1094 = 0.0;
        _1095 = 0.0;
    }
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1124 = fma(_751, cbModelParam._m0[30u].z, fma(_747, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _743));
        float _1128 = fma(_751, cbModelParam._m0[31u].z, fma(_747, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _743));
        float _1132 = fma(_751, cbModelParam._m0[32u].z, fma(_747, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _743));
        float _1155 = _743 + _502;
        float _1156 = _747 + _503;
        float _1157 = _751 + _504;
        float _1167 = fma(_1157, cbModelParam._m0[30u].z, fma(_1156, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1155)) - _1124;
        float _1168 = fma(_1157, cbModelParam._m0[31u].z, fma(_1156, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1155)) - _1128;
        float _1169 = fma(_1157, cbModelParam._m0[32u].z, fma(_1156, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1155)) - _1132;
        float _1173 = inversesqrt(dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169)));
        float _1186 = ((_1173 * _1167) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1124 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1173 * _1168) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1128 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1173 * _1169) / cbModelParam._m0[35u].z) + ((((((_1132 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        float _1223 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1190.x + (-0.5));
        float _1225 = _1223 * (_1190.y + (-0.5));
        float _1226 = _1223 * (_1190.z + (-0.5));
        float _1233 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1197.x + (-0.5));
        float _1235 = _1233 * (_1197.y + (-0.5));
        float _1236 = _1233 * (_1197.z + (-0.5));
        float _1243 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1204.x + (-0.5));
        float _1245 = _1243 * (_1204.y + (-0.5));
        float _1246 = _1243 * (_1204.z + (-0.5));
        float _1253 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1211.x + (-0.5));
        float _1255 = _1253 * (_1211.y + (-0.5));
        float _1256 = _1253 * (_1211.z + (-0.5));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = _1224 * 0.5;
        float _1261 = _1234 * 0.5;
        float _1262 = _1244 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_502, _503, _504), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3854 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1287 + 1.0))) + _1292) * _1257;
        float _1302 = _1225 * 0.5;
        float _1303 = _1235 * 0.5;
        float _1304 = _1245 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_502, _503, _504), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3887 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1329 + 1.0))) + _1334) * _1258;
        float _1344 = _1226 * 0.5;
        float _1345 = _1236 * 0.5;
        float _1346 = _1246 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_502, _503, _504), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3920 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1371 + 1.0))) + _1376) * _1259;
        _1393 = _1226;
        _1394 = _1225;
        _1395 = _1224;
        _1396 = _1236;
        _1397 = _1235;
        _1398 = _1234;
        _1399 = _1246;
        _1400 = _1245;
        _1401 = _1244;
        _1402 = _1259;
        _1403 = _1258;
        _1404 = _1257;
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
    }
    else
    {
        _1393 = _1081;
        _1394 = _1081;
        _1395 = _1081;
        _1396 = _1081;
        _1397 = _1081;
        _1398 = _1081;
        _1399 = _1081;
        _1400 = _1081;
        _1401 = _1081;
        _1402 = _1081;
        _1403 = _1081;
        _1404 = _1081;
        _1405 = 0.0;
        _1406 = 0.0;
        _1407 = 0.0;
    }
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1093)) + _1093;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1094)) + _1094;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1095)) + _1095;
    float _1440 = fma(_1419, cbSceneParam._m0[89u].z, fma(_1418, cbSceneParam._m0[89u].y, _1417 * cbSceneParam._m0[89u].x));
    float _1443 = fma(_1419, cbSceneParam._m0[90u].z, fma(_1418, cbSceneParam._m0[90u].y, _1417 * cbSceneParam._m0[90u].x));
    float _1446 = fma(_1419, cbSceneParam._m0[91u].z, fma(_1418, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1417));
    float _1461 = _687 * 0.5;
    float _1462 = _688 * 0.5;
    float _1463 = _689 * 0.5;
    float _1464 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1467 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1470 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1504;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1477 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1080, _1084, _1087, _1090));
        float _1481 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1485 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1492 = dot(vec4(cbModelParam._m0[39u]), vec4(_1461, _1462, _1463, 1.0));
        _1504 = dot(vec3(isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1492) ? 0.0 : (isnan(0.0) ? _1492 : max(0.0, _1492))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1504 = 1.0;
    }
    float _1515;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1506 = dot(vec4(cbModelParam._m0[40u]), vec4(_1461, _1462, _1463, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1506) ? 0.0 : (isnan(0.0) ? _1506 : max(0.0, _1506))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1519 = (_1515 * cbModelParam._m0[1u].x) + (_1504 * (1.0 - cbModelParam._m0[1u].x));
    float _1529 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _506);
    float _1530 = isnan(_1529) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1529 : min(cbModelParam._m0[25u].z, _1529));
    float _1612;
    float _1614;
    float _1616;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1579 = fma(_751, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _743)) + cbModelParam._m0[13u].w;
        float _1583 = fma(_751, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _743)) + cbModelParam._m0[14u].w;
        float _1587 = fma(_751, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _743)) + cbModelParam._m0[15u].w;
        float _1590 = fma(_689, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687));
        float _1593 = fma(_689, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687));
        float _1596 = fma(_689, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687));
        float _1624;
        if (_1590 > 0.0)
        {
            _1624 = abs((1.0 - _1579) / _1590);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1579 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1624 = frontier_phi_19_17_ladder;
        }
        float _1852;
        if (_1593 > 0.0)
        {
            _1852 = abs((1.0 - _1583) / _1593);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1583 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1852 = frontier_phi_28_24_ladder;
        }
        float _2109;
        if (_1596 > 0.0)
        {
            _2109 = abs((1.0 - _1587) / _1596);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1587 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2109 = frontier_phi_40_35_ladder;
        }
        float _2111 = isnan(_1852) ? _1624 : (isnan(_1624) ? _1852 : min(_1624, _1852));
        float _2112 = isnan(_2109) ? _2111 : (isnan(_2111) ? _2109 : min(_2111, _2109));
        float _2116 = (_2112 * _1590) + _1579;
        float _2117 = (_2112 * _1593) + _1583;
        float _2118 = (_2112 * _1596) + _1587;
        float _2119 = _2112 * 9.9999997473787516355514526367188e-05;
        float _2121 = (-1.0) - _2119;
        float _2123 = _2119 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2118 > _2123) || ((_2118 < _2121) || ((_2117 > _2123) || ((_2117 < _2121) || ((_2116 < _2121) || (_2116 > _2123))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2246 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2118, cbModelParam._m0[9u].z, fma(_2117, cbModelParam._m0[9u].y, _2116 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2118, cbModelParam._m0[10u].z, fma(_2117, cbModelParam._m0[10u].y, _2116 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2118, cbModelParam._m0[11u].z, fma(_2117, cbModelParam._m0[11u].y, _2116 * cbModelParam._m0[11u].x))), _1530);
            frontier_phi_18_40_ladder = _2246.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2246.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2246.x * cbModelParam._m0[1u].y;
        }
        _1612 = frontier_phi_18_40_ladder_2;
        _1614 = frontier_phi_18_40_ladder_1;
        _1616 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1600 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_687, _688, _689), _1530);
        _1612 = _1600.x * cbModelParam._m0[1u].y;
        _1614 = _1600.y * cbModelParam._m0[1u].y;
        _1616 = _1600.z * cbModelParam._m0[1u].y;
    }
    float _1620 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _506);
    float _1621 = isnan(_1620) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1620 : min(cbModelParam._m0[25u].w, _1620));
    float _1714;
    float _1716;
    float _1718;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1678 = fma(_751, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _743)) + cbModelParam._m0[21u].w;
        float _1682 = fma(_751, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _743)) + cbModelParam._m0[22u].w;
        float _1686 = fma(_751, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _743)) + cbModelParam._m0[23u].w;
        float _1689 = fma(_689, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687));
        float _1692 = fma(_689, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687));
        float _1695 = fma(_689, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687));
        float _1857;
        if (_1689 > 0.0)
        {
            _1857 = abs((1.0 - _1678) / _1689);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1678 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1857 = frontier_phi_30_26_ladder;
        }
        float _2136;
        if (_1692 > 0.0)
        {
            _2136 = abs((1.0 - _1682) / _1692);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1682 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2136 = frontier_phi_42_37_ladder;
        }
        float _2349;
        if (_1695 > 0.0)
        {
            _2349 = abs((1.0 - _1686) / _1695);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1686 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2349 = frontier_phi_51_48_ladder;
        }
        float _2351 = isnan(_2136) ? _1857 : (isnan(_1857) ? _2136 : min(_1857, _2136));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1689) + _1678;
        float _2357 = (_2352 * _1692) + _1682;
        float _2358 = (_2352 * _1695) + _1686;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2360 = (-1.0) - _2359;
        float _2362 = _2359 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2358 > _2362) || ((_2358 < _2360) || ((_2357 > _2362) || ((_2357 < _2360) || ((_2356 < _2360) || (_2356 > _2362))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2561 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2358, cbModelParam._m0[17u].z, fma(_2357, cbModelParam._m0[17u].y, _2356 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2358, cbModelParam._m0[18u].z, fma(_2357, cbModelParam._m0[18u].y, _2356 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2358, cbModelParam._m0[19u].z, fma(_2357, cbModelParam._m0[19u].y, _2356 * cbModelParam._m0[19u].x))), _1621);
            frontier_phi_27_51_ladder = _2561.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2561.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2561.x * cbModelParam._m0[1u].z;
        }
        _1714 = frontier_phi_27_51_ladder_2;
        _1716 = frontier_phi_27_51_ladder_1;
        _1718 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_687, _688, _689), _1621);
        _1714 = _1698.x * cbModelParam._m0[1u].z;
        _1716 = _1698.y * cbModelParam._m0[1u].z;
        _1718 = _1698.z * cbModelParam._m0[1u].z;
    }
    float _1731 = (((_714 * _664) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1714 - _1612)) + _1612);
    float _1733 = (((_714 * _666) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1716 - _1614)) + _1614);
    float _1735 = (((_714 * _667) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1718 - _1616)) + _1616);
    float _1738 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1733, cbSceneParam._m0[89u].y, _1731 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1733, cbSceneParam._m0[90u].y, _1731 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1733, cbSceneParam._m0[91u].y, _1731 * cbSceneParam._m0[91u].x));
    vec4 _1752 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_598, _599));
    float _1754 = _1752.w;
    float _1766 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1754);
    float _1767 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1754);
    float _1768 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1754);
    uvec4 _1772 = floatBitsToUint(cbInstanceData._m0[_638 + 5u]);
    uint _1774 = _1772.x * 14u;
    uint _1775 = _1774 + 13u;
    float _1782 = _679 + (-1.0);
    float _1787 = (cbLight._m0[_1775].x * _1782) + 1.0;
    float _1788 = (cbLight._m0[_1775].y * _1782) + 1.0;
    float _1789 = (cbLight._m0[_1775].z * _1782) + 1.0;
    float _1790 = (cbLight._m0[_1775].w * _1782) + 1.0;
    uint _1791 = _1774 + 5u;
    float _1797 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
    uint _1801 = _1774 + 4u;
    float _1811 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
    uint _1815 = _1774 | 1u;
    float _1826 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_502, _503, _504));
    float _1829 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_502, _503, _504));
    float _4056 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _4067 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1834 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 0.3183098733425140380859375;
    float _1836 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 0.3183098733425140380859375;
    float _1843 = ((cbLight._m0[_1791].x * _1797) * _1836) + (((cbLight._m0[_1801].x * _1766) * _1811) * _1834);
    float _1844 = ((_1797 * cbLight._m0[_1791].y) * _1836) + (((cbLight._m0[_1801].y * _1767) * _1811) * _1834);
    float _1845 = ((_1797 * cbLight._m0[_1791].z) * _1836) + (((cbLight._m0[_1801].z * _1768) * _1811) * _1834);
    uvec4 _1849 = floatBitsToUint(cbLight._m0[_1774 + 12u]);
    bool _1851 = _1849.x == 0u;
    float _1862;
    float _1864;
    float _1866;
    if (_1851)
    {
        _1862 = _1843;
        _1864 = _1844;
        _1866 = _1845;
    }
    else
    {
        uint _1870 = _1774 + 6u;
        float _1886 = (dot(vec3(cbLight._m0[_1774 + 2u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _1887 = _1886 * _1886;
        float _4078 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1889 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _1862 = (((cbLight._m0[_1870].x * 0.3183098733425140380859375) * _1888) * _1889) + _1843;
        _1864 = (((cbLight._m0[_1870].y * 0.3183098733425140380859375) * _1888) * _1889) + _1844;
        _1866 = (((cbLight._m0[_1870].z * 0.3183098733425140380859375) * _1888) * _1889) + _1845;
    }
    bool _1869 = _1849.y == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1869)
    {
        _1907 = _1862;
        _1909 = _1864;
        _1911 = _1866;
    }
    else
    {
        uint _2080 = _1774 + 7u;
        float _2096 = (dot(vec3(cbLight._m0[_1774 + 3u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _2097 = _2096 * _2096;
        float _4094 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2099 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _1907 = (((cbLight._m0[_2080].x * 0.3183098733425140380859375) * _2098) * _2099) + _1862;
        _1909 = (((cbLight._m0[_2080].y * 0.3183098733425140380859375) * _2098) * _2099) + _1864;
        _1911 = (((cbLight._m0[_2080].z * 0.3183098733425140380859375) * _2098) * _2099) + _1866;
    }
    uint _1914 = _1774 + 8u;
    float _1927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1774].w)) * _506) * 0.949999988079071044921875);
    float _1928 = _1927 * _1927;
    float _1929 = cbLight._m0[_1774].x + _582;
    float _1930 = cbLight._m0[_1774].y + _583;
    float _1931 = cbLight._m0[_1774].z + _584;
    float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
    float _1936 = _1935 * _1929;
    float _1937 = _1935 * _1930;
    float _1938 = _1935 * _1931;
    float _1939 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1774].xyz));
    float _4110 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1942 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _4121 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _1943 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _1944 = dot(vec3(_502, _503, _504), vec3(_1936, _1937, _1938));
    float _4132 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _1948 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_1936, _1937, _1938));
    float _4143 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1952 = _1928 * _1928;
    float _1956 = ((_1947 * _1947) * (_1952 + (-1.0))) + 1.0;
    float _1964 = exp2(log2(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * 5.0);
    float _1965 = 0.959999978542327880859375 - _661;
    float _1967 = 0.959999978542327880859375 - _662;
    float _1968 = 0.959999978542327880859375 - _663;
    float _1975 = 1.0 - _1928;
    float _1986 = (0.5 / (((_1943 * ((_1942 * _1975) + _1928)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _1975) + _1928) * _1942))) * _1942;
    float _4154 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1988 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1952 / ((_1956 * _1956) * 3.141590118408203125));
    uint _2002 = _1774 + 9u;
    float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1815].w)) * _506) * 0.949999988079071044921875);
    float _2014 = _2013 * _2013;
    float _2015 = cbLight._m0[_1815].x + _582;
    float _2016 = cbLight._m0[_1815].y + _583;
    float _2017 = cbLight._m0[_1815].z + _584;
    float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
    float _2022 = _2021 * _2015;
    float _2023 = _2021 * _2016;
    float _2024 = _2021 * _2017;
    float _2025 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1815].xyz));
    float _4165 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _2029 = dot(vec3(_502, _503, _504), vec3(_2022, _2023, _2024));
    float _4176 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_2022, _2023, _2024));
    float _4187 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2037 = _2014 * _2014;
    float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
    float _2048 = exp2(log2(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * 5.0);
    float _2055 = 1.0 - _2014;
    float _2065 = (0.5 / (((_1943 * ((_2028 * _2055) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _2055) + _2014) * _2028))) * _2028;
    float _4198 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2067 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
    float _2077 = (((((_2048 * _1965) + _664) * cbLight._m0[_2002].x) * _2067) * _1797) + ((((cbLight._m0[_1914].x * _1766) * ((_1964 * _1965) + _664)) * _1988) * _1811);
    float _2078 = (((((_2048 * _1967) + _666) * cbLight._m0[_2002].y) * _2067) * _1797) + ((((cbLight._m0[_1914].y * _1767) * ((_1964 * _1967) + _666)) * _1988) * _1811);
    float _2079 = (((((_2048 * _1968) + _667) * cbLight._m0[_2002].z) * _2067) * _1797) + ((((cbLight._m0[_1914].z * _1768) * ((_1964 * _1968) + _667)) * _1988) * _1811);
    float _2141;
    float _2143;
    float _2145;
    if (_1851)
    {
        _2141 = _2077;
        _2143 = _2078;
        _2145 = _2079;
    }
    else
    {
        uint _2147 = _1774 + 2u;
        uint _2151 = _1774 + 10u;
        float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _506) * 0.949999988079071044921875);
        float _2166 = _2165 * _2165;
        float _2167 = cbLight._m0[_2147].x + _582;
        float _2168 = cbLight._m0[_2147].y + _583;
        float _2169 = cbLight._m0[_2147].z + _584;
        float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
        float _2174 = _2173 * _2167;
        float _2175 = _2173 * _2168;
        float _2176 = _2173 * _2169;
        float _2177 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2147].xyz));
        float _4209 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2181 = dot(vec3(_502, _503, _504), vec3(_2174, _2175, _2176));
        float _4220 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2185 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2174, _2175, _2176));
        float _4231 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2189 = _2166 * _2166;
        float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
        float _2200 = exp2(log2(1.0 - (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * 5.0);
        float _2207 = 1.0 - _2166;
        float _2217 = (0.5 / (((_1943 * ((_2180 * _2207) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _2207) + _2166) * _2180))) * _2180;
        float _4242 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2219 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
        float _2220 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _2141 = (((((_2200 * _1965) + _664) * cbLight._m0[_2151].x) * _2219) * _2220) + _2077;
        _2143 = (((((_2200 * _1967) + _666) * cbLight._m0[_2151].y) * _2219) * _2220) + _2078;
        _2145 = (((((_2200 * _1968) + _667) * cbLight._m0[_2151].z) * _2219) * _2220) + _2079;
    }
    float _2255;
    float _2257;
    float _2259;
    if (_1869)
    {
        _2255 = _2141;
        _2257 = _2143;
        _2259 = _2145;
    }
    else
    {
        uint _2266 = _1774 + 3u;
        uint _2270 = _1774 + 11u;
        float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _506) * 0.949999988079071044921875);
        float _2285 = _2284 * _2284;
        float _2286 = cbLight._m0[_2266].x + _582;
        float _2287 = cbLight._m0[_2266].y + _583;
        float _2288 = cbLight._m0[_2266].z + _584;
        float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
        float _2293 = _2292 * _2286;
        float _2294 = _2292 * _2287;
        float _2295 = _2292 * _2288;
        float _2296 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2266].xyz));
        float _4258 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2300 = dot(vec3(_502, _503, _504), vec3(_2293, _2294, _2295));
        float _4269 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2304 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2293, _2294, _2295));
        float _4280 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2308 = _2285 * _2285;
        float _2312 = ((_2303 * _2303) * (_2308 + (-1.0))) + 1.0;
        float _2319 = exp2(log2(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * 5.0);
        float _2326 = 1.0 - _2285;
        float _2336 = (0.5 / (((_1943 * ((_2299 * _2326) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_1943 * _2326) + _2285) * _2299))) * _2299;
        float _4291 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2338 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2308 / ((_2312 * _2312) * 3.141590118408203125));
        float _2339 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _2255 = (((((_2319 * _1965) + _664) * cbLight._m0[_2270].x) * _2338) * _2339) + _2141;
        _2257 = (((((_2319 * _1967) + _666) * cbLight._m0[_2270].y) * _2338) * _2339) + _2143;
        _2259 = (((((_2319 * _1968) + _667) * cbLight._m0[_2270].z) * _2338) * _2339) + _2145;
    }
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    if (_1772.y == 0u)
    {
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2414;
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2414;
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2414;
        uvec4 _2429 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2430 = _2429.x;
        uint _2441 = uint((float(_2429.y) * floor(float(uint(cbSceneParam._m0[85u].y * _599) / _2430))) + floor(float(uint(cbSceneParam._m0[85u].x * _598) / _2430)));
        float _2451 = (log2(_2417 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2452 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        uint _2455 = uint(isnan(14.0) ? _2452 : (isnan(_2452) ? 14.0 : min(_2452, 14.0)));
        uvec4 _2460 = texelFetch(g_lightClusterGridBuffer, int(((_2455 << 2u) + (_2441 << 6u)) >> 2u));
        uint _2461 = _2460.x;
        uint _2462 = _2429.z;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        if (((((1u << ((_2462 >> 4u) & 15u)) + 4294967295u) & _2461) == 0u) || ((_2462 & 240u) == 0u))
        {
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
        }
        else
        {
            float _2567;
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            uint _2724 = 0u;
            uint _2733;
            bool _2734;
            for (;;)
            {
                _2733 = texelFetch(g_lightClassification, int((((_2455 << 5u) + (_2441 << 9u)) + (_2724 << 2u)) >> 2u)).x;
                _2734 = _2733 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2734)
                {
                    frontier_phi_68_pred = _2720;
                    frontier_phi_68_pred_1 = _2723;
                    frontier_phi_68_pred_2 = _2722;
                    frontier_phi_68_pred_3 = _2721;
                    frontier_phi_68_pred_4 = _2719;
                    frontier_phi_68_pred_5 = _2718;
                }
                else
                {
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    uint _2869;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2723;
                    _2869 = _2733;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    for (;;)
                    {
                        uint _2873 = uint(findLSB(_2869)) + (_2724 << 5u);
                        uint _2870 = (_2869 + 4294967295u) & _2869;
                        uint _2875 = _2873 * 48u;
                        vec4 _2889 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2875)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 3u)).x));
                        uint _2895 = (_2873 * 48u) + 4u;
                        vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 3u)).x));
                        uint _2914 = (_2873 * 48u) + 8u;
                        vec3 _2925 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x));
                        float _2929 = _2889.x - _2415;
                        float _2930 = _2889.y - _2416;
                        float _2931 = _2889.z - _2417;
                        float _2932 = dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931));
                        float _2935 = inversesqrt(_2932);
                        float _2936 = _2935 * _2929;
                        float _2937 = _2935 * _2930;
                        float _2938 = _2935 * _2931;
                        float _2939 = dot(vec3(_619, _622, _625), vec3(_2936, _2937, _2938));
                        float _2944 = 1.0 - (_2932 * _2889.w);
                        float _4317 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2945 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _2946 = sqrt(_2932) * _2908.w;
                        float _2949 = 1.39999997615814208984375 / (_2946 + 1.39999997615814208984375);
                        float _2950 = _2949 * _2949;
                        float _2953 = ((1.0 - _2950) * _2939) + _2950;
                        float _2956 = _2946 * _2946;
                        float _2960 = ((isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0))) * _2945) / ((_2956 * 0.699999988079071044921875) + 1.0);
                        float _2964 = (-0.0) - _2415;
                        float _2965 = (-0.0) - _2416;
                        float _2966 = (-0.0) - _2417;
                        float _2970 = inversesqrt(dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966)));
                        float _2971 = _2970 * _2964;
                        float _2972 = _2970 * _2965;
                        float _2973 = _2970 * _2966;
                        float _2981 = exp2(log2(1.0 / ((_2956 * 3.5) + 5.0)) * 0.25);
                        float _2982 = 1.0 - _695;
                        float _2989 = sqrt(1.0 - ((1.0 - (_2982 * _2982)) * (1.0 - (_2981 * _2981))));
                        float _2990 = _2989 * _2989;
                        float _2991 = _2990 * _2990;
                        float _2992 = _2971 + _2936;
                        float _2993 = _2972 + _2937;
                        float _2994 = _2973 + _2938;
                        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
                        float _3002 = dot(vec3(_619, _622, _625), vec3(_2971, _2972, _2973));
                        float _4333 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3005 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                        float _3006 = dot(vec3(_619, _622, _625), vec3(_2998 * _2992, _2998 * _2993, _2998 * _2994));
                        float _4344 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3009 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3013 = ((_3009 * _3009) * (_2991 + (-1.0))) + 1.0;
                        float _3014 = _2949 * _2990;
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _2939) + _3015;
                        float _4355 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3019 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3020 = 1.0 - _2990;
                        float _3030 = (0.5 / (((_3019 * ((_3005 * _3020) + _2990)) + 9.9999999392252902907785028219223e-09) + (((_3019 * _3020) + _2990) * _3005))) * _3019;
                        float _4366 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3041 = (((_2991 * 3.1415927410125732421875) * (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) / ((_3013 * _3013) * ((_2956 * 2.1991131305694580078125) + 3.141590118408203125))) * _2945;
                        _2793 = (_2960 * _2908.x) + _2866;
                        _2794 = (_2960 * _2908.y) + _2867;
                        _2795 = (_2960 * _2908.z) + _2868;
                        _2790 = (_3041 * _2925.x) + _2863;
                        _2791 = (_3041 * _2925.y) + _2864;
                        _2792 = (_3041 * _2925.z) + _2865;
                        if (_2870 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2863 = _2790;
                            _2864 = _2791;
                            _2865 = _2792;
                            _2866 = _2793;
                            _2867 = _2794;
                            _2868 = _2795;
                            _2869 = _2870;
                        }
                    }
                    frontier_phi_68_pred = _2792;
                    frontier_phi_68_pred_1 = _2795;
                    frontier_phi_68_pred_2 = _2794;
                    frontier_phi_68_pred_3 = _2793;
                    frontier_phi_68_pred_4 = _2791;
                    frontier_phi_68_pred_5 = _2790;
                }
                _2571 = frontier_phi_68_pred;
                _2577 = frontier_phi_68_pred_1;
                _2575 = frontier_phi_68_pred_2;
                _2573 = frontier_phi_68_pred_3;
                _2569 = frontier_phi_68_pred_4;
                _2567 = frontier_phi_68_pred_5;
                uint _2725 = _2724 + 1u;
                if (_2725 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2718 = _2567;
                    _2719 = _2569;
                    _2720 = _2571;
                    _2721 = _2573;
                    _2722 = _2575;
                    _2723 = _2577;
                    _2724 = _2725;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
        }
        uvec4 _2580 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2581 = _2580.z;
        uint _2583 = (_2581 >> 8u) & 15u;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        if (((4294967295u << _2583) & _2461) == 0u)
        {
            _2686 = _2566;
            _2688 = _2568;
            _2690 = _2570;
            _2692 = _2572;
            _2694 = _2574;
            _2696 = _2576;
        }
        else
        {
            float _2711 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
            float _2712 = _2711 * _2415;
            float _2713 = _2711 * _2416;
            float _2714 = _2711 * _2417;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2583 < ((_2581 >> 12u) & 15u))
            {
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2697;
                float _2846 = _2566;
                float _2847 = _2568;
                float _2848 = _2570;
                float _2849 = _2572;
                float _2850 = _2574;
                float _2851 = _2576;
                uint _2852 = _2583;
                uint _2861;
                bool _2862;
                for (;;)
                {
                    _2861 = texelFetch(g_lightClassification, int((((_2455 << 5u) + (_2441 << 9u)) + (_2852 << 2u)) >> 2u)).x;
                    _2862 = _2861 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2862)
                    {
                        frontier_phi_79_pred = _2851;
                        frontier_phi_79_pred_1 = _2850;
                        frontier_phi_79_pred_2 = _2849;
                        frontier_phi_79_pred_3 = _2848;
                        frontier_phi_79_pred_4 = _2847;
                        frontier_phi_79_pred_5 = _2846;
                    }
                    else
                    {
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3068 = _2846;
                        float _3069 = _2847;
                        float _3070 = _2848;
                        float _3071 = _2849;
                        float _3072 = _2850;
                        float _3073 = _2851;
                        uint _3074 = _2861;
                        uint _3075;
                        vec4 _3100;
                        float _3101;
                        vec4 _3116;
                        vec3 _3128;
                        vec4 _3144;
                        vec4 _3160;
                        float _3207;
                        bool _3208;
                        for (;;)
                        {
                            uint _3085 = ((_2852 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3074));
                            _3075 = (_3074 + 4294967295u) & _3074;
                            uint _3087 = _3085 * 40u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            _3101 = _3100.w;
                            uint _3103 = (_3085 * 40u) + 4u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            uint _3118 = (_3085 * 40u) + 8u;
                            _3128 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x));
                            uint _3131 = (_3085 * 40u) + 16u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3147 = (_3085 * 40u) + 20u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3163 = (_3085 * 40u) + 24u;
                            vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3182 = (_3085 * 40u) + 28u;
                            vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            _3207 = fma(_2417, _3195.z, fma(_2416, _3195.y, _3195.x * _2415)) + _3195.w;
                            _3208 = !((fma(_2417, _3176.z, fma(_2416, _3176.y, _3176.x * _2415)) + _3176.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3208)
                            {
                                float _3235 = _3100.x - _2415;
                                float _3236 = _3100.y - _2416;
                                float _3237 = _3100.z - _2417;
                                float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                                float _3241 = inversesqrt(_3238);
                                float _3242 = _3241 * _3235;
                                float _3243 = _3241 * _3236;
                                float _3244 = _3241 * _3237;
                                float _3248 = 1.0 - (_3238 / (_3101 * _3101));
                                float _4377 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3253 = sqrt(_3238) * _3116.w;
                                float _3255 = 1.39999997615814208984375 / (_3253 + 1.39999997615814208984375);
                                float _3256 = _3255 * _3255;
                                float _3259 = ((1.0 - _3256) * dot(vec3(_3242, _3243, _3244), vec3(_619, _622, _625))) + _3256;
                                float _3262 = _3253 * _3253;
                                float _3266 = (fma(_2417, _3144.z, fma(_2416, _3144.y, _3144.x * _2415)) + _3144.w) / _3207;
                                float _3267 = (fma(_2417, _3160.z, fma(_2416, _3160.y, _3160.x * _2415)) + _3160.w) / _3207;
                                float _3271 = 1.0 - dot(vec2(_3266, _3267), vec2(_3266, _3267));
                                float _4393 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3273 = _3272 * (((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3249) / ((_3262 * 0.699999988079071044921875) + 1.0));
                                float _3285 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                                float _3286 = 1.0 - _695;
                                float _3293 = sqrt(1.0 - ((1.0 - (_3286 * _3286)) * (1.0 - (_3285 * _3285))));
                                float _3294 = _3293 * _3293;
                                float _3295 = _3294 * _3294;
                                float _3296 = _3242 - _2712;
                                float _3297 = _3243 - _2713;
                                float _3298 = _3244 - _2714;
                                float _3302 = inversesqrt(dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298)));
                                float _3306 = dot(vec3(_619, _622, _625), vec3((-0.0) - _2712, (-0.0) - _2713, (-0.0) - _2714));
                                float _4404 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3309 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3310 = dot(vec3(_619, _622, _625), vec3(_3302 * _3296, _3302 * _3297, _3302 * _3298));
                                float _4415 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3313 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3317 = ((_3313 * _3313) * (_3295 + (-1.0))) + 1.0;
                                float _3318 = _3255 * _3294;
                                float _3319 = _3318 * _3318;
                                float _3325 = ((1.0 - _3319) * dot(vec3(_619, _622, _625), vec3(_3242, _3243, _3244))) + _3319;
                                float _4426 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3327 = 1.0 - _3294;
                                float _3337 = (0.5 / (((_3326 * ((_3309 * _3327) + _3294)) + 9.9999999392252902907785028219223e-09) + (((_3326 * _3327) + _3294) * _3309))) * _3326;
                                float _4437 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3347 = (_3272 * _3249) * (((_3295 * 3.1415927410125732421875) * (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) / ((_3317 * _3317) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3273 * _3116.z;
                                frontier_phi_85_pred_1 = _3273 * _3116.y;
                                frontier_phi_85_pred_2 = _3273 * _3116.x;
                                frontier_phi_85_pred_3 = _3347 * _3128.z;
                                frontier_phi_85_pred_4 = _3347 * _3128.y;
                                frontier_phi_85_pred_5 = _3347 * _3128.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3356 = frontier_phi_85_pred;
                            _3355 = frontier_phi_85_pred_1;
                            _3354 = frontier_phi_85_pred_2;
                            _3353 = frontier_phi_85_pred_3;
                            _3352 = frontier_phi_85_pred_4;
                            _3351 = frontier_phi_85_pred_5;
                            _3058 = _3354 + _3071;
                            _3059 = _3355 + _3072;
                            _3060 = _3356 + _3073;
                            _3055 = _3351 + _3068;
                            _3056 = _3352 + _3069;
                            _3057 = _3353 + _3070;
                            if (_3075 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3075;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3060;
                        frontier_phi_79_pred_1 = _3059;
                        frontier_phi_79_pred_2 = _3058;
                        frontier_phi_79_pred_3 = _3057;
                        frontier_phi_79_pred_4 = _3056;
                        frontier_phi_79_pred_5 = _3055;
                    }
                    _2697 = frontier_phi_79_pred;
                    _2695 = frontier_phi_79_pred_1;
                    _2693 = frontier_phi_79_pred_2;
                    _2691 = frontier_phi_79_pred_3;
                    _2689 = frontier_phi_79_pred_4;
                    _2687 = frontier_phi_79_pred_5;
                    uint _2853 = _2852 + 1u;
                    if (_2853 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2846 = _2687;
                        _2847 = _2689;
                        _2848 = _2691;
                        _2849 = _2693;
                        _2850 = _2695;
                        _2851 = _2697;
                        _2852 = _2853;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2693;
                frontier_phi_60_61_ladder_1 = _2697;
                frontier_phi_60_61_ladder_2 = _2695;
                frontier_phi_60_61_ladder_3 = _2691;
                frontier_phi_60_61_ladder_4 = _2689;
                frontier_phi_60_61_ladder_5 = _2687;
            }
            else
            {
                frontier_phi_60_61_ladder = _2572;
                frontier_phi_60_61_ladder_1 = _2576;
                frontier_phi_60_61_ladder_2 = _2574;
                frontier_phi_60_61_ladder_3 = _2570;
                frontier_phi_60_61_ladder_4 = _2568;
                frontier_phi_60_61_ladder_5 = _2566;
            }
            _2686 = frontier_phi_60_61_ladder_5;
            _2688 = frontier_phi_60_61_ladder_4;
            _2690 = frontier_phi_60_61_ladder_3;
            _2692 = frontier_phi_60_61_ladder;
            _2694 = frontier_phi_60_61_ladder_2;
            _2696 = frontier_phi_60_61_ladder_1;
        }
        float _2701 = isnan(1.0) ? _679 : (isnan(_679) ? 1.0 : min(_679, 1.0));
        _2473 = (_2701 * _2692) + _1907;
        _2475 = (_2701 * _2694) + _1909;
        _2477 = (_2701 * _2696) + _1911;
        _2479 = ((_2686 * _664) * _2701) + _2255;
        _2481 = ((_2688 * _666) * _2701) + _2257;
        _2483 = ((_2690 * _667) * _2701) + _2259;
    }
    else
    {
        _2473 = _1907;
        _2475 = _1909;
        _2477 = _1911;
        _2479 = _2255;
        _2481 = _2257;
        _2483 = _2259;
    }
    float _4453 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4464 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4475 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4486 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _2501 = ((isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2473 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _679))) + ((_2479 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1519)) * cbPerFrame._m0[3u].x);
    float _2502 = ((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2475 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _679))) + ((_2481 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1519)) * cbPerFrame._m0[3u].x);
    float _2503 = ((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2477 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _679))) + ((_2483 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1519)) * cbPerFrame._m0[3u].x);
    float _2504 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2505 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2506 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2511 = cbInstanceData._m0[_638 + 6u].w * (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)));
    float _2516 = _598 / cbSceneParam._m0[86u].x;
    float _2517 = _599 / cbSceneParam._m0[86u].y;
    vec4 _2531 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2516, _2517, (log2((isnan(cbSceneParam._m0[77u].w) ? _524 : (isnan(_524) ? cbSceneParam._m0[77u].w : min(_524, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2533 = _2531.x;
    float _2534 = _2531.y;
    float _2535 = _2531.z;
    float _2536 = _2531.w;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    if (_524 > cbSceneParam._m0[78u].w)
    {
        float _2591 = isnan(_524) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _524 : min(cbSceneParam._m0[80u].w, _524));
        float _2592 = _2591 / _524;
        float _2603 = _2592 * _575;
        float _2604 = _576 * _2592;
        float _2605 = (-0.0) - _2604;
        float _2606 = _2592 * _577;
        float _2608 = (cbSceneParam._m0[77u].w * _2605) / _2591;
        float _2609 = _2608 + cbSceneParam._m0[79u].w;
        float _2610 = cbSceneParam._m0[79u].w - _2604;
        float _2616 = sqrt(((_2603 * _2603) + (_2604 * _2604)) + (_2606 * _2606));
        float _2619 = (1.0 - (cbSceneParam._m0[77u].w / _2591)) * _2616;
        float _2624 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2626 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2803;
        if (abs((_2605 - _2608) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2803 = ((((_2609 > 0.0) ? exp2(_2624 * _2609) : (2.0 - exp2(_2626 * _2609))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2619;
        }
        else
        {
            float _2747 = 1.0 / cbSceneParam._m0[80u].x;
            float _2748 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : max(_2609, _2610));
            float _2749 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : min(_2609, _2610));
            float _2758 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : min(_2748, 0.0));
            float _2759 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : min(_2749, 0.0));
            _2803 = ((abs(_2616 / _2605) * cbSceneParam._m0[80u].y) * ((((_2758 - _2759) * 2.0) - ((exp2(_2624 * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0)))) - exp2(_2624 * (isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0))))) * _2747)) - ((exp2(_2626 * _2758) - exp2(_2626 * _2759)) * _2747))) + (_2619 * cbSceneParam._m0[80u].z);
        }
        vec4 _2805 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2516, _2517, 1.0), 0.0);
        float _2814 = exp2((_2803 * (-1.44269502162933349609375)) * (1.0 - _2805.w));
        float _2815 = log2(_2814);
        float _2831 = log2(_2536);
        _2628 = (exp2(_2831 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].x)) * _2805.x) / cbSceneParam._m0[78u].x)) + _2533;
        _2630 = (exp2(_2831 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].y)) * _2805.y) / cbSceneParam._m0[78u].y)) + _2534;
        _2632 = (exp2(_2831 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].z)) * _2805.z) / cbSceneParam._m0[78u].z)) + _2535;
        _2634 = _2814 * _2536;
    }
    else
    {
        _2628 = _2533;
        _2630 = _2534;
        _2632 = _2535;
        _2634 = _2536;
    }
    bool _2841;
    vec4 _2644;
    vec4 _2666;
    float _2668;
    float _2672;
    float _2673;
    float _2674;
    float _2675;
    bool _2685;
    for (;;)
    {
        _2644 = cbMatDynParam._m0[0u];
        float _2646 = roundEven(_2644.y);
        bool _2647 = _2646 == 3.0;
        float _2648 = log2(_2634);
        float _2655 = exp2(_2648 * cbSceneParam._m0[78u].x) * _2504;
        float _2656 = exp2(_2648 * cbSceneParam._m0[78u].y) * _2505;
        float _2657 = exp2(_2648 * cbSceneParam._m0[78u].z) * _2506;
        float _2664 = _587 + (-0.5);
        _2666 = cbMtdParam._m0[1u];
        _2668 = _2666.y * _2664;
        float _2671 = (_2646 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2672 = _2671 * (_2647 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2628)));
        _2673 = _2671 * (_2647 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2630)));
        _2674 = _2671 * (_2647 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2632)));
        _2675 = _2664 * 0.999000012874603271484375;
        _2685 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2685)
        {
            if ((cbInstanceData._m0[_638 + 7u].x + _2675) < 0.5)
            {
                _2841 = true;
                break;
            }
        }
        uint _2782 = _640 + uint(_2644.w);
        if ((cbInstanceData._m0[_2782].w < 1.0) && ((cbInstanceData._m0[_2782].w + _2675) < 0.5))
        {
            _2841 = true;
            break;
        }
        if ((_2668 + _364) < _2666.x)
        {
            _2841 = true;
            break;
        }
        _2841 = false;
        break;
    }
    float _3046;
    if (_2841)
    {
        discard_state = true;
        _3046 = 0.0;
    }
    else
    {
        _3046 = _2511;
    }
    SV_Target.x = _2672;
    SV_Target.y = _2673;
    SV_Target.z = _2674;
    SV_Target.w = _3046;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2511;
    discard_exit();
}


