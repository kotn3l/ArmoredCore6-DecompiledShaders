#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _842;
float _3212;
float _3213;
float _3214;
float _3215;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(S_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _242 = texture(sampler2D(S_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _246 = _242.z;
    float _250 = (_242.x * 2.0) + (-1.0);
    float _252 = (_242.y * 2.0) + (-1.0);
    float _253 = dot(vec2(_250, _252), vec2(_250, _252));
    float _3224 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _259 = sqrt(1.0 - (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0))));
    float _262 = fma(_259, _192 * NORMAL.x, fma(_252, _199 * TANGENT.x, (_185 * _178) * _250));
    float _265 = fma(_259, _192 * NORMAL.y, fma(_252, _199 * TANGENT.y, (_185 * _179) * _250));
    float _268 = fma(_259, _192 * NORMAL.z, fma(_252, _199 * TANGENT.z, (_185 * _180) * _250));
    float _272 = inversesqrt(dot(vec3(_262, _265, _268), vec3(_262, _265, _268)));
    float _273 = _272 * _262;
    float _274 = _272 * _265;
    float _275 = _272 * _268;
    float _3235 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _276 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
    float _3246 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3257 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3268 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _295 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _337 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _347 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _337);
    float _348 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _337);
    float _349 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _337);
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _347 * _353;
    float _355 = _348 * _353;
    float _356 = _349 * _353;
    vec4 _361 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _363 = _361.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _521 = sqrt(((_347 * _347) + (_348 * _348)) + (_349 * _349));
        float _527 = (cbMatDynParam._m0[5u].x * _521) + cbMatDynParam._m0[5u].y;
        float _3279 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
        float _528 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _532 = (cbMatDynParam._m0[5u].z * _521) + cbMatDynParam._m0[5u].w;
        float _3290 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))) - _528)) + _528) < ((_363 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _375 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _376 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _396 = fma(_275, cbSceneParam._m0[5u].z, fma(_274, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _273));
    float _399 = fma(_275, cbSceneParam._m0[6u].z, fma(_274, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _273));
    float _402 = fma(_275, cbSceneParam._m0[7u].z, fma(_274, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _273));
    uint _415 = uint(roundEven(NORMAL.w)) * 13u;
    uint _417 = _415 + 9u;
    uint _418 = _417 + uint(cbMatDynParam._m0[0u].w);
    float _424 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0)))) * cbInstanceData._m0[_418].x;
    float _425 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0)))) * cbInstanceData._m0[_418].y;
    float _426 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0)))) * cbInstanceData._m0[_418].z;
    float _3301 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _427 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _3312 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _3323 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    vec4 _438 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _375, cbSceneParam._m0[86u].y * _376));
    float _441 = _438.x * TEXCOORD.z;
    float _442 = dot(vec3(_273, _274, _275), vec3(_354, _355, _356));
    float _445 = _442 * 2.0;
    float _449 = (_445 * _273) - _354;
    float _450 = (_445 * _274) - _355;
    float _451 = (_445 * _275) - _356;
    float _455 = abs(dot(vec3(_354, _355, _356), vec3(_273, _274, _275)));
    float _3334 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _457 = sqrt(_276);
    float _470 = exp2((_457 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_457 * 3.0));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _841;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _566 = fma(_510, cbModelParam._m0[26u].z, fma(_506, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _502));
        float _570 = fma(_510, cbModelParam._m0[27u].z, fma(_506, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _502));
        float _574 = fma(_510, cbModelParam._m0[28u].z, fma(_506, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _502));
        float _599 = _502 + _273;
        float _600 = _506 + _274;
        float _601 = _510 + _275;
        float _611 = fma(_601, cbModelParam._m0[26u].z, fma(_600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _599)) - _566;
        float _612 = fma(_601, cbModelParam._m0[27u].z, fma(_600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _599)) - _570;
        float _613 = fma(_601, cbModelParam._m0[28u].z, fma(_600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _599)) - _574;
        float _617 = inversesqrt(dot(vec3(_611, _612, _613), vec3(_611, _612, _613)));
        float _630 = ((_617 * _611) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_566 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _631 = ((_617 * _612) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_570 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _632 = ((_617 * _613) / cbModelParam._m0[34u].z) + ((((((_574 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        float _669 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_635.x + (-0.5));
        float _671 = _669 * (_635.y + (-0.5));
        float _672 = _669 * (_635.z + (-0.5));
        float _679 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_642.x + (-0.5));
        float _681 = _679 * (_642.y + (-0.5));
        float _682 = _679 * (_642.z + (-0.5));
        float _689 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_649.x + (-0.5));
        float _691 = _689 * (_649.y + (-0.5));
        float _692 = _689 * (_649.z + (-0.5));
        float _699 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_656.x + (-0.5));
        float _701 = _699 * (_656.y + (-0.5));
        float _702 = _699 * (_656.z + (-0.5));
        float _703 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _704 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = _670 * 0.5;
        float _707 = _680 * 0.5;
        float _708 = _690 * 0.5;
        float _709 = dot(vec3(_706, _707, _708), vec3(_706, _707, _708));
        float _714 = (_709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_709);
        float _723 = (dot(vec3(_273, _274, _275), vec3(_714 * _706, _714 * _707, _714 * _708)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _733 = sqrt(((_707 * _707) + (_706 * _706)) + (_708 * _708)) / (_703 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _735 = _734 * 2.0;
        float _739 = (1.0 - _734) / (_734 + 1.0);
        float _3382 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _749 = ((((1.0 - _740) * (_735 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_735 + 1.0))) + _740) * _703;
        float _750 = _671 * 0.5;
        float _751 = _681 * 0.5;
        float _752 = _691 * 0.5;
        float _753 = dot(vec3(_750, _751, _752), vec3(_750, _751, _752));
        float _758 = (_753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_753);
        float _766 = (dot(vec3(_273, _274, _275), vec3(_758 * _750, _758 * _751, _758 * _752)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _775 = sqrt(((_751 * _751) + (_750 * _750)) + (_752 * _752)) / (_704 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _777 = _776 * 2.0;
        float _781 = (1.0 - _776) / (_776 + 1.0);
        float _3415 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _791 = ((((1.0 - _782) * (_777 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_777 + 1.0))) + _782) * _704;
        float _792 = _672 * 0.5;
        float _793 = _682 * 0.5;
        float _794 = _692 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _808 = (dot(vec3(_273, _274, _275), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _817 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3448 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_819 + 1.0))) + _824) * _705;
        _841 = _672;
        _843 = _671;
        _844 = _670;
        _845 = _682;
        _846 = _681;
        _847 = _680;
        _848 = _692;
        _849 = _691;
        _850 = _690;
        _851 = _705;
        _852 = _704;
        _853 = _703;
        _854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0)));
        _855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0)));
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
    }
    else
    {
        _841 = _842;
        _843 = _842;
        _844 = _842;
        _845 = _842;
        _846 = _842;
        _847 = _842;
        _848 = _842;
        _849 = _842;
        _850 = _842;
        _851 = _842;
        _852 = _842;
        _853 = _842;
        _854 = 0.0;
        _855 = 0.0;
        _856 = 0.0;
    }
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _885 = fma(_510, cbModelParam._m0[30u].z, fma(_506, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _502));
        float _889 = fma(_510, cbModelParam._m0[31u].z, fma(_506, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _502));
        float _893 = fma(_510, cbModelParam._m0[32u].z, fma(_506, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _502));
        float _916 = _502 + _273;
        float _917 = _506 + _274;
        float _918 = _510 + _275;
        float _928 = fma(_918, cbModelParam._m0[30u].z, fma(_917, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916)) - _885;
        float _929 = fma(_918, cbModelParam._m0[31u].z, fma(_917, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916)) - _889;
        float _930 = fma(_918, cbModelParam._m0[32u].z, fma(_917, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916)) - _893;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_885 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_889 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[35u].z) + ((((((_893 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _984 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_951.x + (-0.5));
        float _986 = _984 * (_951.y + (-0.5));
        float _987 = _984 * (_951.z + (-0.5));
        float _994 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_958.x + (-0.5));
        float _996 = _994 * (_958.y + (-0.5));
        float _997 = _994 * (_958.z + (-0.5));
        float _1004 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_965.x + (-0.5));
        float _1006 = _1004 * (_965.y + (-0.5));
        float _1007 = _1004 * (_965.z + (-0.5));
        float _1014 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_972.x + (-0.5));
        float _1016 = _1014 * (_972.y + (-0.5));
        float _1017 = _1014 * (_972.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_273, _274, _275), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3511 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1048 + 1.0))) + _1053) * _1018;
        float _1063 = _986 * 0.5;
        float _1064 = _996 * 0.5;
        float _1065 = _1006 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_273, _274, _275), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3544 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1090 + 1.0))) + _1095) * _1019;
        float _1105 = _987 * 0.5;
        float _1106 = _997 * 0.5;
        float _1107 = _1007 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_273, _274, _275), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3577 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_1132 + 1.0))) + _1137) * _1020;
        _1154 = _987;
        _1155 = _986;
        _1156 = _985;
        _1157 = _997;
        _1158 = _996;
        _1159 = _995;
        _1160 = _1007;
        _1161 = _1006;
        _1162 = _1005;
        _1163 = _1020;
        _1164 = _1019;
        _1165 = _1018;
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _842;
        _1155 = _842;
        _1156 = _842;
        _1157 = _842;
        _1158 = _842;
        _1159 = _842;
        _1160 = _842;
        _1161 = _842;
        _1162 = _842;
        _1163 = _842;
        _1164 = _842;
        _1165 = _842;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _854)) + _854;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _855)) + _855;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _856)) + _856;
    float _1201 = fma(_1180, cbSceneParam._m0[89u].z, fma(_1179, cbSceneParam._m0[89u].y, _1178 * cbSceneParam._m0[89u].x));
    float _1204 = fma(_1180, cbSceneParam._m0[90u].z, fma(_1179, cbSceneParam._m0[90u].y, _1178 * cbSceneParam._m0[90u].x));
    float _1207 = fma(_1180, cbSceneParam._m0[91u].z, fma(_1179, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1178));
    float _1222 = _449 * 0.5;
    float _1223 = _450 * 0.5;
    float _1224 = _451 * 0.5;
    float _1225 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1228 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1231 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1265;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1238 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_841, _845, _848, _851));
        float _1242 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_843, _846, _849, _852));
        float _1246 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_844, _847, _850, _853));
        float _1253 = dot(vec4(cbModelParam._m0[39u]), vec4(_1222, _1223, _1224, 1.0));
        _1265 = dot(vec3(isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1253) ? 0.0 : (isnan(0.0) ? _1253 : max(0.0, _1253))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1265 = 1.0;
    }
    float _1276;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1267 = dot(vec4(cbModelParam._m0[40u]), vec4(_1222, _1223, _1224, 1.0));
        _1276 = dot(vec3(isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1276 = 1.0;
    }
    float _1280 = (_1276 * cbModelParam._m0[1u].x) + (_1265 * (1.0 - cbModelParam._m0[1u].x));
    float _1290 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _276);
    float _1291 = isnan(_1290) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1290 : min(cbModelParam._m0[25u].z, _1290));
    float _1373;
    float _1375;
    float _1377;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1340 = fma(_510, cbModelParam._m0[13u].z, fma(_506, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502)) + cbModelParam._m0[13u].w;
        float _1344 = fma(_510, cbModelParam._m0[14u].z, fma(_506, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502)) + cbModelParam._m0[14u].w;
        float _1348 = fma(_510, cbModelParam._m0[15u].z, fma(_506, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502)) + cbModelParam._m0[15u].w;
        float _1351 = fma(_451, cbModelParam._m0[13u].z, fma(_450, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _449));
        float _1354 = fma(_451, cbModelParam._m0[14u].z, fma(_450, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _449));
        float _1357 = fma(_451, cbModelParam._m0[15u].z, fma(_450, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _449));
        float _1385;
        if (_1351 > 0.0)
        {
            _1385 = abs((1.0 - _1340) / _1351);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1340 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1385 = frontier_phi_17_15_ladder;
        }
        float _1591;
        if (_1354 > 0.0)
        {
            _1591 = abs((1.0 - _1344) / _1354);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1344 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1591 = frontier_phi_26_22_ladder;
        }
        float _1834;
        if (_1357 > 0.0)
        {
            _1834 = abs((1.0 - _1348) / _1357);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1348 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1834 = frontier_phi_38_33_ladder;
        }
        float _1836 = isnan(_1591) ? _1385 : (isnan(_1385) ? _1591 : min(_1385, _1591));
        float _1837 = isnan(_1834) ? _1836 : (isnan(_1836) ? _1834 : min(_1836, _1834));
        float _1841 = (_1837 * _1351) + _1340;
        float _1842 = (_1837 * _1354) + _1344;
        float _1843 = (_1837 * _1357) + _1348;
        float _1844 = _1837 * 9.9999997473787516355514526367188e-05;
        float _1846 = (-1.0) - _1844;
        float _1848 = _1844 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1843 > _1848) || ((_1843 < _1846) || ((_1842 > _1848) || ((_1842 < _1846) || ((_1841 < _1846) || (_1841 > _1848))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1967 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1843, cbModelParam._m0[9u].z, fma(_1842, cbModelParam._m0[9u].y, _1841 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1843, cbModelParam._m0[10u].z, fma(_1842, cbModelParam._m0[10u].y, _1841 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1843, cbModelParam._m0[11u].z, fma(_1842, cbModelParam._m0[11u].y, _1841 * cbModelParam._m0[11u].x))), _1291);
            frontier_phi_16_38_ladder = _1967.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1967.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1967.x * cbModelParam._m0[1u].y;
        }
        _1373 = frontier_phi_16_38_ladder_2;
        _1375 = frontier_phi_16_38_ladder_1;
        _1377 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1361 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_449, _450, _451), _1291);
        _1373 = _1361.x * cbModelParam._m0[1u].y;
        _1375 = _1361.y * cbModelParam._m0[1u].y;
        _1377 = _1361.z * cbModelParam._m0[1u].y;
    }
    float _1381 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _276);
    float _1382 = isnan(_1381) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1381 : min(cbModelParam._m0[25u].w, _1381));
    float _1475;
    float _1477;
    float _1479;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1439 = fma(_510, cbModelParam._m0[21u].z, fma(_506, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502)) + cbModelParam._m0[21u].w;
        float _1443 = fma(_510, cbModelParam._m0[22u].z, fma(_506, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502)) + cbModelParam._m0[22u].w;
        float _1447 = fma(_510, cbModelParam._m0[23u].z, fma(_506, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502)) + cbModelParam._m0[23u].w;
        float _1450 = fma(_451, cbModelParam._m0[21u].z, fma(_450, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _449));
        float _1453 = fma(_451, cbModelParam._m0[22u].z, fma(_450, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _449));
        float _1456 = fma(_451, cbModelParam._m0[23u].z, fma(_450, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _449));
        float _1596;
        if (_1450 > 0.0)
        {
            _1596 = abs((1.0 - _1439) / _1450);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1439 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1596 = frontier_phi_28_24_ladder;
        }
        float _1861;
        if (_1453 > 0.0)
        {
            _1861 = abs((1.0 - _1443) / _1453);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1443 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1861 = frontier_phi_40_35_ladder;
        }
        float _2066;
        if (_1456 > 0.0)
        {
            _2066 = abs((1.0 - _1447) / _1456);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1447 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2066 = frontier_phi_49_46_ladder;
        }
        float _2068 = isnan(_1861) ? _1596 : (isnan(_1596) ? _1861 : min(_1596, _1861));
        float _2069 = isnan(_2066) ? _2068 : (isnan(_2068) ? _2066 : min(_2068, _2066));
        float _2073 = (_2069 * _1450) + _1439;
        float _2074 = (_2069 * _1453) + _1443;
        float _2075 = (_2069 * _1456) + _1447;
        float _2076 = _2069 * 9.9999997473787516355514526367188e-05;
        float _2077 = (-1.0) - _2076;
        float _2079 = _2076 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2075 > _2079) || ((_2075 < _2077) || ((_2074 > _2079) || ((_2074 < _2077) || ((_2073 < _2077) || (_2073 > _2079))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2274 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2075, cbModelParam._m0[17u].z, fma(_2074, cbModelParam._m0[17u].y, _2073 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2075, cbModelParam._m0[18u].z, fma(_2074, cbModelParam._m0[18u].y, _2073 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2075, cbModelParam._m0[19u].z, fma(_2074, cbModelParam._m0[19u].y, _2073 * cbModelParam._m0[19u].x))), _1382);
            frontier_phi_25_49_ladder = _2274.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2274.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2274.x * cbModelParam._m0[1u].z;
        }
        _1475 = frontier_phi_25_49_ladder_2;
        _1477 = frontier_phi_25_49_ladder_1;
        _1479 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1459 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_449, _450, _451), _1382);
        _1475 = _1459.x * cbModelParam._m0[1u].z;
        _1477 = _1459.y * cbModelParam._m0[1u].z;
        _1479 = _1459.z * cbModelParam._m0[1u].z;
    }
    float _1491 = ((((1.0 - _470) * ((_457 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_470 * _457)) * _441;
    float _1492 = _1491 * ((cbModelParam._m0[1u].w * (_1475 - _1373)) + _1373);
    float _1493 = _1491 * ((cbModelParam._m0[1u].w * (_1477 - _1375)) + _1375);
    float _1494 = _1491 * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1497 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1500 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1503 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, _1492 * cbSceneParam._m0[91u].x));
    uvec4 _1513 = floatBitsToUint(cbInstanceData._m0[_415 + 5u]);
    uint _1515 = _1513.x * 14u;
    uint _1516 = _1515 + 13u;
    float _1523 = _441 + (-1.0);
    float _1528 = (cbLight._m0[_1516].x * _1523) + 1.0;
    float _1529 = (cbLight._m0[_1516].y * _1523) + 1.0;
    float _1530 = (cbLight._m0[_1516].z * _1523) + 1.0;
    float _1531 = (cbLight._m0[_1516].w * _1523) + 1.0;
    uint _1532 = _1515 + 5u;
    float _1538 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
    uint _1542 = _1515 + 4u;
    float _1549 = isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0));
    uint _1553 = _1515 | 1u;
    float _1564 = dot(vec3(cbLight._m0[_1515].xyz), vec3(_273, _274, _275));
    float _1567 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_273, _274, _275));
    float _3713 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
    float _3724 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
    float _1572 = (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.3183098733425140380859375;
    float _1574 = (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * 0.3183098733425140380859375;
    float _1581 = ((cbLight._m0[_1532].x * _1538) * _1574) + ((cbLight._m0[_1542].x * _1549) * _1572);
    float _1582 = ((_1538 * cbLight._m0[_1532].y) * _1574) + ((_1549 * cbLight._m0[_1542].y) * _1572);
    float _1583 = ((_1538 * cbLight._m0[_1532].z) * _1574) + ((_1549 * cbLight._m0[_1542].z) * _1572);
    uvec4 _1588 = floatBitsToUint(cbLight._m0[_1515 + 12u]);
    bool _1590 = _1588.x == 0u;
    float _1601;
    float _1603;
    float _1605;
    if (_1590)
    {
        _1601 = _1581;
        _1603 = _1582;
        _1605 = _1583;
    }
    else
    {
        uint _1609 = _1515 + 6u;
        float _1625 = (dot(vec3(cbLight._m0[_1515 + 2u].xyz), vec3(_273, _274, _275)) * 0.5) + 0.5;
        float _1626 = _1625 * _1625;
        float _3735 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1628 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1601 = (((cbLight._m0[_1609].x * 0.3183098733425140380859375) * _1627) * _1628) + _1581;
        _1603 = (((cbLight._m0[_1609].y * 0.3183098733425140380859375) * _1627) * _1628) + _1582;
        _1605 = (((cbLight._m0[_1609].z * 0.3183098733425140380859375) * _1627) * _1628) + _1583;
    }
    bool _1608 = _1588.y == 0u;
    float _1646;
    float _1648;
    float _1650;
    if (_1608)
    {
        _1646 = _1601;
        _1648 = _1603;
        _1650 = _1605;
    }
    else
    {
        uint _1805 = _1515 + 7u;
        float _1821 = (dot(vec3(cbLight._m0[_1515 + 3u].xyz), vec3(_273, _274, _275)) * 0.5) + 0.5;
        float _1822 = _1821 * _1821;
        float _3751 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1824 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1646 = (((cbLight._m0[_1805].x * 0.3183098733425140380859375) * _1823) * _1824) + _1601;
        _1648 = (((cbLight._m0[_1805].y * 0.3183098733425140380859375) * _1823) * _1824) + _1603;
        _1650 = (((cbLight._m0[_1805].z * 0.3183098733425140380859375) * _1823) * _1824) + _1605;
    }
    uint _1653 = _1515 + 8u;
    float _1666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1515].w)) * _276) * 0.949999988079071044921875);
    float _1667 = _1666 * _1666;
    float _1668 = cbLight._m0[_1515].x + _354;
    float _1669 = cbLight._m0[_1515].y + _355;
    float _1670 = cbLight._m0[_1515].z + _356;
    float _1674 = inversesqrt(dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670)));
    float _1675 = _1674 * _1668;
    float _1676 = _1674 * _1669;
    float _1677 = _1674 * _1670;
    float _1678 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1515].xyz));
    float _3767 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _1681 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _1682 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _1683 = dot(vec3(_273, _274, _275), vec3(_1675, _1676, _1677));
    float _3789 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1686 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1687 = dot(vec3(cbLight._m0[_1515].xyz), vec3(_1675, _1676, _1677));
    float _3800 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1691 = _1667 * _1667;
    float _1695 = ((_1686 * _1686) * (_1691 + (-1.0))) + 1.0;
    float _1706 = (exp2(log2(1.0 - (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1707 = 1.0 - _1667;
    float _1718 = (0.5 / (((_1682 * ((_1681 * _1707) + _1667)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1707) + _1667) * _1681))) * _1681;
    float _3811 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1720 = (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1691 / ((_1695 * _1695) * 3.141590118408203125));
    uint _1731 = _1515 + 9u;
    float _1742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1553].w)) * _276) * 0.949999988079071044921875);
    float _1743 = _1742 * _1742;
    float _1744 = cbLight._m0[_1553].x + _354;
    float _1745 = cbLight._m0[_1553].y + _355;
    float _1746 = cbLight._m0[_1553].z + _356;
    float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
    float _1751 = _1750 * _1744;
    float _1752 = _1750 * _1745;
    float _1753 = _1750 * _1746;
    float _1754 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1553].xyz));
    float _3822 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1758 = dot(vec3(_273, _274, _275), vec3(_1751, _1752, _1753));
    float _3833 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1761 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _1762 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_1751, _1752, _1753));
    float _3844 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1766 = _1743 * _1743;
    float _1770 = ((_1761 * _1761) * (_1766 + (-1.0))) + 1.0;
    float _1779 = (exp2(log2(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1780 = 1.0 - _1743;
    float _1790 = (0.5 / (((_1682 * ((_1757 * _1780) + _1743)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1780) + _1743) * _1757))) * _1757;
    float _3855 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1792 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1766 / ((_1770 * _1770) * 3.141590118408203125));
    float _1802 = (((_1779 * cbLight._m0[_1731].x) * _1792) * _1538) + (((_1706 * cbLight._m0[_1653].x) * _1720) * _1549);
    float _1803 = (((_1779 * cbLight._m0[_1731].y) * _1792) * _1538) + (((_1706 * cbLight._m0[_1653].y) * _1720) * _1549);
    float _1804 = (((_1779 * cbLight._m0[_1731].z) * _1792) * _1538) + (((_1706 * cbLight._m0[_1653].z) * _1720) * _1549);
    float _1866;
    float _1868;
    float _1870;
    if (_1590)
    {
        _1866 = _1802;
        _1868 = _1803;
        _1870 = _1804;
    }
    else
    {
        uint _1872 = _1515 + 2u;
        uint _1876 = _1515 + 10u;
        float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1872].w)) * _276) * 0.949999988079071044921875);
        float _1891 = _1890 * _1890;
        float _1892 = cbLight._m0[_1872].x + _354;
        float _1893 = cbLight._m0[_1872].y + _355;
        float _1894 = cbLight._m0[_1872].z + _356;
        float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
        float _1899 = _1898 * _1892;
        float _1900 = _1898 * _1893;
        float _1901 = _1898 * _1894;
        float _1902 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1872].xyz));
        float _3866 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1905 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1906 = dot(vec3(_273, _274, _275), vec3(_1899, _1900, _1901));
        float _3877 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1909 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1910 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_1899, _1900, _1901));
        float _3888 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1914 = _1891 * _1891;
        float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
        float _1927 = (exp2(log2(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1928 = 1.0 - _1891;
        float _1938 = (0.5 / (((_1682 * ((_1905 * _1928) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1928) + _1891) * _1905))) * _1905;
        float _3899 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1940 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
        float _1941 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1866 = (((_1927 * cbLight._m0[_1876].x) * _1940) * _1941) + _1802;
        _1868 = (((_1927 * cbLight._m0[_1876].y) * _1940) * _1941) + _1803;
        _1870 = (((_1927 * cbLight._m0[_1876].z) * _1940) * _1941) + _1804;
    }
    float _1976;
    float _1978;
    float _1980;
    if (_1608)
    {
        _1976 = _1866;
        _1978 = _1868;
        _1980 = _1870;
    }
    else
    {
        uint _1987 = _1515 + 3u;
        uint _1991 = _1515 + 11u;
        float _2005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1987].w)) * _276) * 0.949999988079071044921875);
        float _2006 = _2005 * _2005;
        float _2007 = cbLight._m0[_1987].x + _354;
        float _2008 = cbLight._m0[_1987].y + _355;
        float _2009 = cbLight._m0[_1987].z + _356;
        float _2013 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
        float _2014 = _2013 * _2007;
        float _2015 = _2013 * _2008;
        float _2016 = _2013 * _2009;
        float _2017 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1987].xyz));
        float _3915 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2020 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _2021 = dot(vec3(_273, _274, _275), vec3(_2014, _2015, _2016));
        float _3926 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2024 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _2025 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_2014, _2015, _2016));
        float _3937 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2029 = _2006 * _2006;
        float _2033 = ((_2024 * _2024) * (_2029 + (-1.0))) + 1.0;
        float _2042 = (exp2(log2(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2043 = 1.0 - _2006;
        float _2053 = (0.5 / (((_1682 * ((_2020 * _2043) + _2006)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _2043) + _2006) * _2020))) * _2020;
        float _3948 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2055 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_2029 / ((_2033 * _2033) * 3.141590118408203125));
        float _2056 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1976 = (((_2042 * cbLight._m0[_1991].x) * _2055) * _2056) + _1866;
        _1978 = (((_2042 * cbLight._m0[_1991].y) * _2055) * _2056) + _1868;
        _1980 = (((_2042 * cbLight._m0[_1991].z) * _2055) * _2056) + _1870;
    }
    float _2191;
    float _2193;
    float _2195;
    float _2197;
    float _2199;
    float _2201;
    if (_1513.y == 0u)
    {
        float _2131 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2132 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2131;
        float _2133 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2131;
        float _2134 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2131;
        uvec4 _2146 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2147 = _2146.x;
        uint _2158 = uint((float(_2146.y) * floor(float(uint(cbSceneParam._m0[85u].y * _376) / _2147))) + floor(float(uint(cbSceneParam._m0[85u].x * _375) / _2147)));
        float _2168 = (log2(_2134 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2169 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        uint _2172 = uint(isnan(14.0) ? _2169 : (isnan(_2169) ? 14.0 : min(_2169, 14.0)));
        uvec4 _2177 = texelFetch(g_lightClusterGridBuffer, int(((_2172 << 2u) + (_2158 << 6u)) >> 2u));
        uint _2178 = _2177.x;
        uint _2179 = _2146.z;
        float _2279;
        float _2281;
        float _2283;
        float _2285;
        float _2287;
        float _2289;
        if (((((1u << ((_2179 >> 4u) & 15u)) + 4294967295u) & _2178) == 0u) || ((_2179 & 240u) == 0u))
        {
            _2279 = 0.0;
            _2281 = 0.0;
            _2283 = 0.0;
            _2285 = 0.0;
            _2287 = 0.0;
            _2289 = 0.0;
        }
        else
        {
            float _2280;
            float _2282;
            float _2284;
            float _2286;
            float _2288;
            float _2290;
            float _2432 = 0.0;
            float _2433 = 0.0;
            float _2434 = 0.0;
            float _2435 = 0.0;
            float _2436 = 0.0;
            float _2437 = 0.0;
            uint _2438 = 0u;
            uint _2447;
            bool _2448;
            for (;;)
            {
                _2447 = texelFetch(g_lightClassification, int((((_2172 << 5u) + (_2158 << 9u)) + (_2438 << 2u)) >> 2u)).x;
                _2448 = _2447 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2448)
                {
                    frontier_phi_66_pred = _2432;
                    frontier_phi_66_pred_1 = _2437;
                    frontier_phi_66_pred_2 = _2436;
                    frontier_phi_66_pred_3 = _2435;
                    frontier_phi_66_pred_4 = _2434;
                    frontier_phi_66_pred_5 = _2433;
                }
                else
                {
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    uint _2583;
                    _2577 = _2432;
                    _2578 = _2433;
                    _2579 = _2434;
                    _2580 = _2435;
                    _2581 = _2436;
                    _2582 = _2437;
                    _2583 = _2447;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    float _2508;
                    float _2509;
                    for (;;)
                    {
                        uint _2587 = uint(findLSB(_2583)) + (_2438 << 5u);
                        uint _2584 = (_2583 + 4294967295u) & _2583;
                        uint _2589 = _2587 * 48u;
                        vec4 _2603 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2589)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 3u)).x));
                        uint _2609 = (_2587 * 48u) + 4u;
                        vec4 _2622 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2609)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 3u)).x));
                        uint _2628 = (_2587 * 48u) + 8u;
                        vec3 _2639 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2628)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 2u)).x));
                        float _2643 = _2603.x - _2132;
                        float _2644 = _2603.y - _2133;
                        float _2645 = _2603.z - _2134;
                        float _2646 = dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645));
                        float _2649 = inversesqrt(_2646);
                        float _2650 = _2649 * _2643;
                        float _2651 = _2649 * _2644;
                        float _2652 = _2649 * _2645;
                        float _2653 = dot(vec3(_396, _399, _402), vec3(_2650, _2651, _2652));
                        float _2658 = 1.0 - (_2646 * _2603.w);
                        float _3974 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
                        float _2659 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                        float _2660 = sqrt(_2646) * _2622.w;
                        float _2663 = 1.39999997615814208984375 / (_2660 + 1.39999997615814208984375);
                        float _2664 = _2663 * _2663;
                        float _2667 = ((1.0 - _2664) * _2653) + _2664;
                        float _2670 = _2660 * _2660;
                        float _2674 = ((isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0))) * _2659) / ((_2670 * 0.699999988079071044921875) + 1.0);
                        float _2678 = (-0.0) - _2132;
                        float _2679 = (-0.0) - _2133;
                        float _2680 = (-0.0) - _2134;
                        float _2684 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
                        float _2685 = _2684 * _2678;
                        float _2686 = _2684 * _2679;
                        float _2687 = _2684 * _2680;
                        float _2695 = exp2(log2(1.0 / ((_2670 * 3.5) + 5.0)) * 0.25);
                        float _2696 = 1.0 - _457;
                        float _2703 = sqrt(1.0 - ((1.0 - (_2696 * _2696)) * (1.0 - (_2695 * _2695))));
                        float _2704 = _2703 * _2703;
                        float _2705 = _2704 * _2704;
                        float _2706 = _2685 + _2650;
                        float _2707 = _2686 + _2651;
                        float _2708 = _2687 + _2652;
                        float _2712 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
                        float _2716 = dot(vec3(_396, _399, _402), vec3(_2685, _2686, _2687));
                        float _3990 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
                        float _2719 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
                        float _2720 = dot(vec3(_396, _399, _402), vec3(_2712 * _2706, _2712 * _2707, _2712 * _2708));
                        float _4001 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2723 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                        float _2727 = ((_2723 * _2723) * (_2705 + (-1.0))) + 1.0;
                        float _2728 = _2663 * _2704;
                        float _2729 = _2728 * _2728;
                        float _2732 = ((1.0 - _2729) * _2653) + _2729;
                        float _4012 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2733 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                        float _2734 = 1.0 - _2704;
                        float _2744 = (0.5 / (((_2733 * ((_2719 * _2734) + _2704)) + 9.9999999392252902907785028219223e-09) + (((_2733 * _2734) + _2704) * _2719))) * _2733;
                        float _4023 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _2755 = (((_2705 * 3.1415927410125732421875) * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) / ((_2727 * _2727) * ((_2670 * 2.1991131305694580078125) + 3.141590118408203125))) * _2659;
                        _2507 = (_2674 * _2622.x) + _2580;
                        _2508 = (_2674 * _2622.y) + _2581;
                        _2509 = (_2674 * _2622.z) + _2582;
                        _2504 = (_2755 * _2639.x) + _2577;
                        _2505 = (_2755 * _2639.y) + _2578;
                        _2506 = (_2755 * _2639.z) + _2579;
                        if (_2584 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2577 = _2504;
                            _2578 = _2505;
                            _2579 = _2506;
                            _2580 = _2507;
                            _2581 = _2508;
                            _2582 = _2509;
                            _2583 = _2584;
                        }
                    }
                    frontier_phi_66_pred = _2504;
                    frontier_phi_66_pred_1 = _2509;
                    frontier_phi_66_pred_2 = _2508;
                    frontier_phi_66_pred_3 = _2507;
                    frontier_phi_66_pred_4 = _2506;
                    frontier_phi_66_pred_5 = _2505;
                }
                _2280 = frontier_phi_66_pred;
                _2290 = frontier_phi_66_pred_1;
                _2288 = frontier_phi_66_pred_2;
                _2286 = frontier_phi_66_pred_3;
                _2284 = frontier_phi_66_pred_4;
                _2282 = frontier_phi_66_pred_5;
                uint _2439 = _2438 + 1u;
                if (_2439 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2432 = _2280;
                    _2433 = _2282;
                    _2434 = _2284;
                    _2435 = _2286;
                    _2436 = _2288;
                    _2437 = _2290;
                    _2438 = _2439;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2279 = _2280;
            _2281 = _2282;
            _2283 = _2284;
            _2285 = _2286;
            _2287 = _2288;
            _2289 = _2290;
        }
        uvec4 _2293 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2294 = _2293.z;
        uint _2296 = (_2294 >> 8u) & 15u;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        if (((4294967295u << _2296) & _2178) == 0u)
        {
            _2400 = _2279;
            _2402 = _2281;
            _2404 = _2283;
            _2406 = _2285;
            _2408 = _2287;
            _2410 = _2289;
        }
        else
        {
            float _2425 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
            float _2426 = _2425 * _2132;
            float _2427 = _2425 * _2133;
            float _2428 = _2425 * _2134;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2296 < ((_2294 >> 12u) & 15u))
            {
                float _2401;
                float _2403;
                float _2405;
                float _2407;
                float _2409;
                float _2411;
                float _2560 = _2279;
                float _2561 = _2281;
                float _2562 = _2283;
                float _2563 = _2285;
                float _2564 = _2287;
                float _2565 = _2289;
                uint _2566 = _2296;
                uint _2575;
                bool _2576;
                for (;;)
                {
                    _2575 = texelFetch(g_lightClassification, int((((_2172 << 5u) + (_2158 << 9u)) + (_2566 << 2u)) >> 2u)).x;
                    _2576 = _2575 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2576)
                    {
                        frontier_phi_77_pred = _2565;
                        frontier_phi_77_pred_1 = _2564;
                        frontier_phi_77_pred_2 = _2563;
                        frontier_phi_77_pred_3 = _2562;
                        frontier_phi_77_pred_4 = _2561;
                        frontier_phi_77_pred_5 = _2560;
                    }
                    else
                    {
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _2782 = _2560;
                        float _2783 = _2561;
                        float _2784 = _2562;
                        float _2785 = _2563;
                        float _2786 = _2564;
                        float _2787 = _2565;
                        uint _2788 = _2575;
                        uint _2789;
                        vec4 _2814;
                        float _2815;
                        vec4 _2830;
                        vec3 _2842;
                        vec4 _2858;
                        vec4 _2874;
                        float _2921;
                        bool _2922;
                        for (;;)
                        {
                            uint _2799 = ((_2566 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2788));
                            _2789 = (_2788 + 4294967295u) & _2788;
                            uint _2801 = _2799 * 40u;
                            _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            _2815 = _2814.w;
                            uint _2817 = (_2799 * 40u) + 4u;
                            _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            uint _2832 = (_2799 * 40u) + 8u;
                            _2842 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x));
                            uint _2845 = (_2799 * 40u) + 16u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            uint _2861 = (_2799 * 40u) + 20u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2877 = (_2799 * 40u) + 24u;
                            vec4 _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2896 = (_2799 * 40u) + 28u;
                            vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            _2921 = fma(_2134, _2909.z, fma(_2133, _2909.y, _2909.x * _2132)) + _2909.w;
                            _2922 = !((fma(_2134, _2890.z, fma(_2133, _2890.y, _2890.x * _2132)) + _2890.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2922)
                            {
                                float _2949 = _2814.x - _2132;
                                float _2950 = _2814.y - _2133;
                                float _2951 = _2814.z - _2134;
                                float _2952 = dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951));
                                float _2955 = inversesqrt(_2952);
                                float _2956 = _2955 * _2949;
                                float _2957 = _2955 * _2950;
                                float _2958 = _2955 * _2951;
                                float _2962 = 1.0 - (_2952 / (_2815 * _2815));
                                float _4034 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                                float _2963 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                                float _2967 = sqrt(_2952) * _2830.w;
                                float _2969 = 1.39999997615814208984375 / (_2967 + 1.39999997615814208984375);
                                float _2970 = _2969 * _2969;
                                float _2973 = ((1.0 - _2970) * dot(vec3(_2956, _2957, _2958), vec3(_396, _399, _402))) + _2970;
                                float _2976 = _2967 * _2967;
                                float _2980 = (fma(_2134, _2858.z, fma(_2133, _2858.y, _2858.x * _2132)) + _2858.w) / _2921;
                                float _2981 = (fma(_2134, _2874.z, fma(_2133, _2874.y, _2874.x * _2132)) + _2874.w) / _2921;
                                float _2985 = 1.0 - dot(vec2(_2980, _2981), vec2(_2980, _2981));
                                float _4050 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                                float _2986 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _2987 = _2986 * (((isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))) * _2963) / ((_2976 * 0.699999988079071044921875) + 1.0));
                                float _2999 = exp2(log2(1.0 / ((_2976 * 3.5) + 5.0)) * 0.25);
                                float _3000 = 1.0 - _457;
                                float _3007 = sqrt(1.0 - ((1.0 - (_3000 * _3000)) * (1.0 - (_2999 * _2999))));
                                float _3008 = _3007 * _3007;
                                float _3009 = _3008 * _3008;
                                float _3010 = _2956 - _2426;
                                float _3011 = _2957 - _2427;
                                float _3012 = _2958 - _2428;
                                float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
                                float _3020 = dot(vec3(_396, _399, _402), vec3((-0.0) - _2426, (-0.0) - _2427, (-0.0) - _2428));
                                float _4061 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3023 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _3024 = dot(vec3(_396, _399, _402), vec3(_3016 * _3010, _3016 * _3011, _3016 * _3012));
                                float _4072 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3027 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3031 = ((_3027 * _3027) * (_3009 + (-1.0))) + 1.0;
                                float _3032 = _2969 * _3008;
                                float _3033 = _3032 * _3032;
                                float _3039 = ((1.0 - _3033) * dot(vec3(_396, _399, _402), vec3(_2956, _2957, _2958))) + _3033;
                                float _4083 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3040 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3041 = 1.0 - _3008;
                                float _3051 = (0.5 / (((_3040 * ((_3023 * _3041) + _3008)) + 9.9999999392252902907785028219223e-09) + (((_3040 * _3041) + _3008) * _3023))) * _3040;
                                float _4094 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3061 = (_2986 * _2963) * (((_3009 * 3.1415927410125732421875) * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) / ((_3031 * _3031) * ((_2976 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2987 * _2830.y;
                                frontier_phi_83_pred_1 = _2987 * _2830.x;
                                frontier_phi_83_pred_2 = _3061 * _2842.z;
                                frontier_phi_83_pred_3 = _3061 * _2842.y;
                                frontier_phi_83_pred_4 = _3061 * _2842.x;
                                frontier_phi_83_pred_5 = _2987 * _2830.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3069 = frontier_phi_83_pred;
                            _3068 = frontier_phi_83_pred_1;
                            _3067 = frontier_phi_83_pred_2;
                            _3066 = frontier_phi_83_pred_3;
                            _3065 = frontier_phi_83_pred_4;
                            _3070 = frontier_phi_83_pred_5;
                            _2772 = _3068 + _2785;
                            _2773 = _3069 + _2786;
                            _2774 = _3070 + _2787;
                            _2769 = _3065 + _2782;
                            _2770 = _3066 + _2783;
                            _2771 = _3067 + _2784;
                            if (_2789 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2789;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2774;
                        frontier_phi_77_pred_1 = _2773;
                        frontier_phi_77_pred_2 = _2772;
                        frontier_phi_77_pred_3 = _2771;
                        frontier_phi_77_pred_4 = _2770;
                        frontier_phi_77_pred_5 = _2769;
                    }
                    _2411 = frontier_phi_77_pred;
                    _2409 = frontier_phi_77_pred_1;
                    _2407 = frontier_phi_77_pred_2;
                    _2405 = frontier_phi_77_pred_3;
                    _2403 = frontier_phi_77_pred_4;
                    _2401 = frontier_phi_77_pred_5;
                    uint _2567 = _2566 + 1u;
                    if (_2567 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2560 = _2401;
                        _2561 = _2403;
                        _2562 = _2405;
                        _2563 = _2407;
                        _2564 = _2409;
                        _2565 = _2411;
                        _2566 = _2567;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2405;
                frontier_phi_58_59_ladder_1 = _2411;
                frontier_phi_58_59_ladder_2 = _2409;
                frontier_phi_58_59_ladder_3 = _2407;
                frontier_phi_58_59_ladder_4 = _2403;
                frontier_phi_58_59_ladder_5 = _2401;
            }
            else
            {
                frontier_phi_58_59_ladder = _2283;
                frontier_phi_58_59_ladder_1 = _2289;
                frontier_phi_58_59_ladder_2 = _2287;
                frontier_phi_58_59_ladder_3 = _2285;
                frontier_phi_58_59_ladder_4 = _2281;
                frontier_phi_58_59_ladder_5 = _2279;
            }
            _2400 = frontier_phi_58_59_ladder_5;
            _2402 = frontier_phi_58_59_ladder_4;
            _2404 = frontier_phi_58_59_ladder;
            _2406 = frontier_phi_58_59_ladder_3;
            _2408 = frontier_phi_58_59_ladder_2;
            _2410 = frontier_phi_58_59_ladder_1;
        }
        float _2415 = isnan(1.0) ? _441 : (isnan(_441) ? 1.0 : min(_441, 1.0));
        _2191 = (_2415 * _2406) + _1646;
        _2193 = (_2415 * _2408) + _1648;
        _2195 = (_2415 * _2410) + _1650;
        _2197 = ((_2400 * 0.039999999105930328369140625) * _2415) + _1976;
        _2199 = ((_2402 * 0.039999999105930328369140625) * _2415) + _1978;
        _2201 = ((_2404 * 0.039999999105930328369140625) * _2415) + _1980;
    }
    else
    {
        _2191 = _1646;
        _2193 = _1648;
        _2195 = _1650;
        _2197 = _1976;
        _2199 = _1978;
        _2201 = _1980;
    }
    float _4110 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _4121 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _4132 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _2218 = ((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2191 + ((isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))) * _441))) + ((_2197 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    float _2219 = ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2193 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _441))) + ((_2199 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    float _2220 = ((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2195 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _441))) + ((_2201 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    uint _2221 = _415 + 6u;
    float _2229 = _375 / cbSceneParam._m0[86u].x;
    float _2230 = _376 / cbSceneParam._m0[86u].y;
    vec4 _2244 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2229, _2230, (log2((isnan(cbSceneParam._m0[77u].w) ? _295 : (isnan(_295) ? cbSceneParam._m0[77u].w : min(_295, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2246 = _2244.x;
    float _2247 = _2244.y;
    float _2248 = _2244.z;
    float _2249 = _2244.w;
    float _2342;
    float _2344;
    float _2346;
    float _2348;
    if (_295 > cbSceneParam._m0[78u].w)
    {
        float _2304 = isnan(_295) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _295 : min(cbSceneParam._m0[80u].w, _295));
        float _2305 = _2304 / _295;
        float _2316 = _2305 * _347;
        float _2317 = _348 * _2305;
        float _2318 = (-0.0) - _2317;
        float _2320 = _2305 * _349;
        float _2322 = (cbSceneParam._m0[77u].w * _2318) / _2304;
        float _2323 = _2322 + cbSceneParam._m0[79u].w;
        float _2324 = cbSceneParam._m0[79u].w - _2317;
        float _2330 = sqrt(((_2316 * _2316) + (_2317 * _2317)) + (_2320 * _2320));
        float _2333 = (1.0 - (cbSceneParam._m0[77u].w / _2304)) * _2330;
        float _2338 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2340 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2517;
        if (abs((_2318 - _2322) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2517 = ((((_2323 > 0.0) ? exp2(_2338 * _2323) : (2.0 - exp2(_2340 * _2323))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2333;
        }
        else
        {
            float _2461 = 1.0 / cbSceneParam._m0[80u].x;
            float _2462 = isnan(_2324) ? _2323 : (isnan(_2323) ? _2324 : max(_2323, _2324));
            float _2463 = isnan(_2324) ? _2323 : (isnan(_2323) ? _2324 : min(_2323, _2324));
            float _2472 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : min(_2462, 0.0));
            float _2473 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : min(_2463, 0.0));
            _2517 = ((abs(_2330 / _2318) * cbSceneParam._m0[80u].y) * ((((_2472 - _2473) * 2.0) - ((exp2(_2338 * (isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0)))) - exp2(_2338 * (isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0))))) * _2461)) - ((exp2(_2340 * _2472) - exp2(_2340 * _2473)) * _2461))) + (_2333 * cbSceneParam._m0[80u].z);
        }
        vec4 _2519 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2229, _2230, 1.0), 0.0);
        float _2528 = exp2((_2517 * (-1.44269502162933349609375)) * (1.0 - _2519.w));
        float _2529 = log2(_2528);
        float _2545 = log2(_2249);
        _2342 = (exp2(_2545 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2529 * cbSceneParam._m0[78u].x)) * _2519.x) / cbSceneParam._m0[78u].x)) + _2246;
        _2344 = (exp2(_2545 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2529 * cbSceneParam._m0[78u].y)) * _2519.y) / cbSceneParam._m0[78u].y)) + _2247;
        _2346 = (exp2(_2545 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2529 * cbSceneParam._m0[78u].z)) * _2519.z) / cbSceneParam._m0[78u].z)) + _2248;
        _2348 = _2528 * _2249;
    }
    else
    {
        _2342 = _2246;
        _2344 = _2247;
        _2346 = _2248;
        _2348 = _2249;
    }
    bool _2555;
    vec4 _2358;
    vec4 _2380;
    float _2382;
    float _2386;
    float _2387;
    float _2388;
    float _2389;
    bool _2399;
    for (;;)
    {
        _2358 = cbMatDynParam._m0[0u];
        float _2360 = roundEven(_2358.y);
        bool _2361 = _2360 == 3.0;
        float _2362 = log2(_2348);
        float _2369 = exp2(_2362 * cbSceneParam._m0[78u].x) * _2218;
        float _2370 = exp2(_2362 * cbSceneParam._m0[78u].y) * _2219;
        float _2371 = exp2(_2362 * cbSceneParam._m0[78u].z) * _2220;
        float _2378 = _363 + (-0.5);
        _2380 = cbMtdParam._m0[1u];
        _2382 = _2380.y * _2378;
        float _2385 = (_2360 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2386 = _2385 * (_2361 ? _2369 : (_2369 + (cbSceneParam._m0[72u].w * _2342)));
        _2387 = _2385 * (_2361 ? _2370 : (_2370 + (cbSceneParam._m0[72u].w * _2344)));
        _2388 = _2385 * (_2361 ? _2371 : (_2371 + (cbSceneParam._m0[72u].w * _2346)));
        _2389 = _2378 * 0.999000012874603271484375;
        _2399 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2399)
        {
            if ((cbInstanceData._m0[_415 + 7u].x + _2389) < 0.5)
            {
                _2555 = true;
                break;
            }
        }
        uint _2496 = _417 + uint(_2358.w);
        if ((cbInstanceData._m0[_2496].w < 1.0) && ((cbInstanceData._m0[_2496].w + _2389) < 0.5))
        {
            _2555 = true;
            break;
        }
        if ((_2382 + 1.0) < _2380.x)
        {
            _2555 = true;
            break;
        }
        _2555 = false;
        break;
    }
    float _2760;
    if (_2555)
    {
        discard_state = true;
        _2760 = 0.0;
    }
    else
    {
        _2760 = cbInstanceData._m0[_2221].w;
    }
    SV_Target.x = _2386;
    SV_Target.y = _2387;
    SV_Target.z = _2388;
    SV_Target.w = _2760;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2221].w;
    discard_exit();
}


