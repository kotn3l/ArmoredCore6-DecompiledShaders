#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M0_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _877;
float _3268;
float _3269;
float _3270;
float _3271;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(S_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(S_AMSN_M0_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _246 = _244.x;
    vec4 _258 = texture(sampler2D(S_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _262 = _258.z;
    float _266 = (_258.x * 2.0) + (-1.0);
    float _268 = (_258.y * 2.0) + (-1.0);
    float _269 = dot(vec2(_266, _268), vec2(_266, _268));
    float _3280 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0))));
    float _278 = fma(_275, _194 * NORMAL.x, fma(_268, _201 * TANGENT.x, (_187 * _180) * _266));
    float _281 = fma(_275, _194 * NORMAL.y, fma(_268, _201 * TANGENT.y, (_187 * _181) * _266));
    float _284 = fma(_275, _194 * NORMAL.z, fma(_268, _201 * TANGENT.z, (_187 * _182) * _266));
    float _288 = inversesqrt(dot(vec3(_278, _281, _284), vec3(_278, _281, _284)));
    float _289 = _288 * _278;
    float _290 = _288 * _281;
    float _291 = _288 * _284;
    float _3291 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _292 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3313 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3324 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3335 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _296 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _312 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _364 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _354);
    float _365 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _354);
    float _366 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _354);
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _364 * _370;
    float _372 = _365 * _370;
    float _373 = _366 * _370;
    vec4 _378 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _380 = _378.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _556 = sqrt(((_364 * _364) + (_365 * _365)) + (_366 * _366));
        float _562 = (cbMatDynParam._m0[5u].x * _556) + cbMatDynParam._m0[5u].y;
        float _3346 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
        float _563 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _567 = (cbMatDynParam._m0[5u].z * _556) + cbMatDynParam._m0[5u].w;
        float _3357 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) - _563)) + _563) < ((_380 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _392 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _393 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_291, cbSceneParam._m0[5u].z, fma(_290, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _289));
    float _416 = fma(_291, cbSceneParam._m0[6u].z, fma(_290, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _289));
    float _419 = fma(_291, cbSceneParam._m0[7u].z, fma(_290, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _289));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = _432 + 9u;
    uint _435 = _434 + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3368 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _3379 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
    float _3390 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _447 = 1.0 - _296;
    float _448 = _444 * _447;
    float _449 = _445 * _447;
    float _450 = _446 * _447;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _296;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _296;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _296;
    float _458 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    vec4 _470 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _392, cbSceneParam._m0[86u].y * _393));
    float _473 = _470.x * TEXCOORD.z;
    float _474 = dot(vec3(_289, _290, _291), vec3(_371, _372, _373));
    float _477 = _474 * 2.0;
    float _481 = (_477 * _289) - _371;
    float _482 = (_477 * _290) - _372;
    float _483 = (_477 * _291) - _373;
    float _487 = abs(dot(vec3(_371, _372, _373), vec3(_289, _290, _291)));
    float _3401 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _489 = sqrt(_292);
    float _502 = exp2((_489 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_489 * 3.0));
    float _508 = (1.0 - _502) * ((_489 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _509 = _502 * _489;
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _876;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _601 = fma(_545, cbModelParam._m0[26u].z, fma(_541, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _537));
        float _605 = fma(_545, cbModelParam._m0[27u].z, fma(_541, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _537));
        float _609 = fma(_545, cbModelParam._m0[28u].z, fma(_541, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _537));
        float _634 = _537 + _289;
        float _635 = _541 + _290;
        float _636 = _545 + _291;
        float _646 = fma(_636, cbModelParam._m0[26u].z, fma(_635, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _634)) - _601;
        float _647 = fma(_636, cbModelParam._m0[27u].z, fma(_635, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _634)) - _605;
        float _648 = fma(_636, cbModelParam._m0[28u].z, fma(_635, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _634)) - _609;
        float _652 = inversesqrt(dot(vec3(_646, _647, _648), vec3(_646, _647, _648)));
        float _665 = ((_652 * _646) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_601 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _666 = ((_652 * _647) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_605 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _667 = ((_652 * _648) / cbModelParam._m0[34u].z) + ((((((_609 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        float _704 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_670.x + (-0.5));
        float _706 = _704 * (_670.y + (-0.5));
        float _707 = _704 * (_670.z + (-0.5));
        float _714 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_677.x + (-0.5));
        float _716 = _714 * (_677.y + (-0.5));
        float _717 = _714 * (_677.z + (-0.5));
        float _724 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_684.x + (-0.5));
        float _726 = _724 * (_684.y + (-0.5));
        float _727 = _724 * (_684.z + (-0.5));
        float _734 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_691.x + (-0.5));
        float _736 = _734 * (_691.y + (-0.5));
        float _737 = _734 * (_691.z + (-0.5));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = _705 * 0.5;
        float _742 = _715 * 0.5;
        float _743 = _725 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _758 = (dot(vec3(_289, _290, _291), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _768 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _770 = _769 * 2.0;
        float _774 = (1.0 - _769) / (_769 + 1.0);
        float _3449 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _784 = ((((1.0 - _775) * (_770 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_770 + 1.0))) + _775) * _738;
        float _785 = _706 * 0.5;
        float _786 = _716 * 0.5;
        float _787 = _726 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _801 = (dot(vec3(_289, _290, _291), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _810 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3482 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_812 + 1.0))) + _817) * _739;
        float _827 = _707 * 0.5;
        float _828 = _717 * 0.5;
        float _829 = _727 * 0.5;
        float _830 = dot(vec3(_827, _828, _829), vec3(_827, _828, _829));
        float _835 = (_830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_830);
        float _843 = (dot(vec3(_289, _290, _291), vec3(_835 * _827, _835 * _828, _835 * _829)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _852 = sqrt(((_828 * _828) + (_827 * _827)) + (_829 * _829)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _854 = _853 * 2.0;
        float _858 = (1.0 - _853) / (_853 + 1.0);
        float _3515 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _868 = ((((1.0 - _859) * (_854 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_854 + 1.0))) + _859) * _740;
        _876 = _707;
        _878 = _706;
        _879 = _705;
        _880 = _717;
        _881 = _716;
        _882 = _715;
        _883 = _727;
        _884 = _726;
        _885 = _725;
        _886 = _740;
        _887 = _739;
        _888 = _738;
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0)));
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)));
    }
    else
    {
        _876 = _877;
        _878 = _877;
        _879 = _877;
        _880 = _877;
        _881 = _877;
        _882 = _877;
        _883 = _877;
        _884 = _877;
        _885 = _877;
        _886 = _877;
        _887 = _877;
        _888 = _877;
        _889 = 0.0;
        _890 = 0.0;
        _891 = 0.0;
    }
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _920 = fma(_545, cbModelParam._m0[30u].z, fma(_541, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _537));
        float _924 = fma(_545, cbModelParam._m0[31u].z, fma(_541, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _537));
        float _928 = fma(_545, cbModelParam._m0[32u].z, fma(_541, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _537));
        float _951 = _537 + _289;
        float _952 = _541 + _290;
        float _953 = _545 + _291;
        float _963 = fma(_953, cbModelParam._m0[30u].z, fma(_952, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _951)) - _920;
        float _964 = fma(_953, cbModelParam._m0[31u].z, fma(_952, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _951)) - _924;
        float _965 = fma(_953, cbModelParam._m0[32u].z, fma(_952, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _951)) - _928;
        float _969 = inversesqrt(dot(vec3(_963, _964, _965), vec3(_963, _964, _965)));
        float _982 = ((_969 * _963) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_920 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_969 * _964) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_924 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_969 * _965) / cbModelParam._m0[35u].z) + ((((((_928 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        float _1019 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_986.x + (-0.5));
        float _1021 = _1019 * (_986.y + (-0.5));
        float _1022 = _1019 * (_986.z + (-0.5));
        float _1029 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_993.x + (-0.5));
        float _1031 = _1029 * (_993.y + (-0.5));
        float _1032 = _1029 * (_993.z + (-0.5));
        float _1039 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1000.x + (-0.5));
        float _1041 = _1039 * (_1000.y + (-0.5));
        float _1042 = _1039 * (_1000.z + (-0.5));
        float _1049 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1007.x + (-0.5));
        float _1051 = _1049 * (_1007.y + (-0.5));
        float _1052 = _1049 * (_1007.z + (-0.5));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = _1020 * 0.5;
        float _1057 = _1030 * 0.5;
        float _1058 = _1040 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_289, _290, _291), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3578 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1083 + 1.0))) + _1088) * _1053;
        float _1098 = _1021 * 0.5;
        float _1099 = _1031 * 0.5;
        float _1100 = _1041 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_289, _290, _291), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3611 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1125 + 1.0))) + _1130) * _1054;
        float _1140 = _1022 * 0.5;
        float _1141 = _1032 * 0.5;
        float _1142 = _1042 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_289, _290, _291), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3644 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1167 + 1.0))) + _1172) * _1055;
        _1189 = _1022;
        _1190 = _1021;
        _1191 = _1020;
        _1192 = _1032;
        _1193 = _1031;
        _1194 = _1030;
        _1195 = _1042;
        _1196 = _1041;
        _1197 = _1040;
        _1198 = _1055;
        _1199 = _1054;
        _1200 = _1053;
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
    }
    else
    {
        _1189 = _877;
        _1190 = _877;
        _1191 = _877;
        _1192 = _877;
        _1193 = _877;
        _1194 = _877;
        _1195 = _877;
        _1196 = _877;
        _1197 = _877;
        _1198 = _877;
        _1199 = _877;
        _1200 = _877;
        _1201 = 0.0;
        _1202 = 0.0;
        _1203 = 0.0;
    }
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _889)) + _889;
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _890)) + _890;
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _891)) + _891;
    float _1236 = fma(_1215, cbSceneParam._m0[89u].z, fma(_1214, cbSceneParam._m0[89u].y, _1213 * cbSceneParam._m0[89u].x));
    float _1239 = fma(_1215, cbSceneParam._m0[90u].z, fma(_1214, cbSceneParam._m0[90u].y, _1213 * cbSceneParam._m0[90u].x));
    float _1242 = fma(_1215, cbSceneParam._m0[91u].z, fma(_1214, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1213));
    float _1257 = _481 * 0.5;
    float _1258 = _482 * 0.5;
    float _1259 = _483 * 0.5;
    float _1260 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1263 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1266 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1189, _1192, _1195, _1198));
    float _1300;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1273 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_876, _880, _883, _886));
        float _1277 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_878, _881, _884, _887));
        float _1281 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_879, _882, _885, _888));
        float _1288 = dot(vec4(cbModelParam._m0[39u]), vec4(_1257, _1258, _1259, 1.0));
        _1300 = dot(vec3(isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1288) ? 0.0 : (isnan(0.0) ? _1288 : max(0.0, _1288))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1300 = 1.0;
    }
    float _1311;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1302 = dot(vec4(cbModelParam._m0[40u]), vec4(_1257, _1258, _1259, 1.0));
        _1311 = dot(vec3(isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1302) ? 0.0 : (isnan(0.0) ? _1302 : max(0.0, _1302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1311 = 1.0;
    }
    float _1315 = (_1311 * cbModelParam._m0[1u].x) + (_1300 * (1.0 - cbModelParam._m0[1u].x));
    float _1325 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _292);
    float _1326 = isnan(_1325) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1325 : min(cbModelParam._m0[25u].z, _1325));
    float _1408;
    float _1410;
    float _1412;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1375 = fma(_545, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537)) + cbModelParam._m0[13u].w;
        float _1379 = fma(_545, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537)) + cbModelParam._m0[14u].w;
        float _1383 = fma(_545, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537)) + cbModelParam._m0[15u].w;
        float _1386 = fma(_483, cbModelParam._m0[13u].z, fma(_482, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481));
        float _1389 = fma(_483, cbModelParam._m0[14u].z, fma(_482, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481));
        float _1392 = fma(_483, cbModelParam._m0[15u].z, fma(_482, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481));
        float _1420;
        if (_1386 > 0.0)
        {
            _1420 = abs((1.0 - _1375) / _1386);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1375 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1420 = frontier_phi_17_15_ladder;
        }
        float _1628;
        if (_1389 > 0.0)
        {
            _1628 = abs((1.0 - _1379) / _1389);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1379 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1628 = frontier_phi_26_22_ladder;
        }
        float _1882;
        if (_1392 > 0.0)
        {
            _1882 = abs((1.0 - _1383) / _1392);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1383 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1882 = frontier_phi_38_33_ladder;
        }
        float _1884 = isnan(_1628) ? _1420 : (isnan(_1420) ? _1628 : min(_1420, _1628));
        float _1885 = isnan(_1882) ? _1884 : (isnan(_1884) ? _1882 : min(_1884, _1882));
        float _1889 = (_1885 * _1386) + _1375;
        float _1890 = (_1885 * _1389) + _1379;
        float _1891 = (_1885 * _1392) + _1383;
        float _1892 = _1885 * 9.9999997473787516355514526367188e-05;
        float _1894 = (-1.0) - _1892;
        float _1896 = _1892 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1891 > _1896) || ((_1891 < _1894) || ((_1890 > _1896) || ((_1890 < _1894) || ((_1889 < _1894) || (_1889 > _1896))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1891, cbModelParam._m0[9u].z, fma(_1890, cbModelParam._m0[9u].y, _1889 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1891, cbModelParam._m0[10u].z, fma(_1890, cbModelParam._m0[10u].y, _1889 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1891, cbModelParam._m0[11u].z, fma(_1890, cbModelParam._m0[11u].y, _1889 * cbModelParam._m0[11u].x))), _1326);
            frontier_phi_16_38_ladder = _2019.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2019.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2019.x * cbModelParam._m0[1u].y;
        }
        _1408 = frontier_phi_16_38_ladder_2;
        _1410 = frontier_phi_16_38_ladder_1;
        _1412 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_481, _482, _483), _1326);
        _1408 = _1396.x * cbModelParam._m0[1u].y;
        _1410 = _1396.y * cbModelParam._m0[1u].y;
        _1412 = _1396.z * cbModelParam._m0[1u].y;
    }
    float _1416 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _292);
    float _1417 = isnan(_1416) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1416 : min(cbModelParam._m0[25u].w, _1416));
    float _1510;
    float _1512;
    float _1514;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1474 = fma(_545, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537)) + cbModelParam._m0[21u].w;
        float _1478 = fma(_545, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537)) + cbModelParam._m0[22u].w;
        float _1482 = fma(_545, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537)) + cbModelParam._m0[23u].w;
        float _1485 = fma(_483, cbModelParam._m0[21u].z, fma(_482, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481));
        float _1488 = fma(_483, cbModelParam._m0[22u].z, fma(_482, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481));
        float _1491 = fma(_483, cbModelParam._m0[23u].z, fma(_482, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481));
        float _1633;
        if (_1485 > 0.0)
        {
            _1633 = abs((1.0 - _1474) / _1485);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1474 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1633 = frontier_phi_28_24_ladder;
        }
        float _1909;
        if (_1488 > 0.0)
        {
            _1909 = abs((1.0 - _1478) / _1488);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1478 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1909 = frontier_phi_40_35_ladder;
        }
        float _2122;
        if (_1491 > 0.0)
        {
            _2122 = abs((1.0 - _1482) / _1491);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1482 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2122 = frontier_phi_49_46_ladder;
        }
        float _2124 = isnan(_1909) ? _1633 : (isnan(_1633) ? _1909 : min(_1633, _1909));
        float _2125 = isnan(_2122) ? _2124 : (isnan(_2124) ? _2122 : min(_2124, _2122));
        float _2129 = (_2125 * _1485) + _1474;
        float _2130 = (_2125 * _1488) + _1478;
        float _2131 = (_2125 * _1491) + _1482;
        float _2132 = _2125 * 9.9999997473787516355514526367188e-05;
        float _2133 = (-1.0) - _2132;
        float _2135 = _2132 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2131 > _2135) || ((_2131 < _2133) || ((_2130 > _2135) || ((_2130 < _2133) || ((_2129 < _2133) || (_2129 > _2135))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2330 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2131, cbModelParam._m0[17u].z, fma(_2130, cbModelParam._m0[17u].y, _2129 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2131, cbModelParam._m0[18u].z, fma(_2130, cbModelParam._m0[18u].y, _2129 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2131, cbModelParam._m0[19u].z, fma(_2130, cbModelParam._m0[19u].y, _2129 * cbModelParam._m0[19u].x))), _1417);
            frontier_phi_25_49_ladder = _2330.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2330.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2330.x * cbModelParam._m0[1u].z;
        }
        _1510 = frontier_phi_25_49_ladder_2;
        _1512 = frontier_phi_25_49_ladder_1;
        _1514 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1494 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_481, _482, _483), _1417);
        _1510 = _1494.x * cbModelParam._m0[1u].z;
        _1512 = _1494.y * cbModelParam._m0[1u].z;
        _1514 = _1494.z * cbModelParam._m0[1u].z;
    }
    float _1527 = (((_508 * _458) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1510 - _1408)) + _1408);
    float _1529 = (((_508 * _460) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1512 - _1410)) + _1410);
    float _1531 = (((_508 * _461) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1514 - _1412)) + _1412);
    float _1534 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1529, cbSceneParam._m0[89u].y, _1527 * cbSceneParam._m0[89u].x));
    float _1537 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1529, cbSceneParam._m0[90u].y, _1527 * cbSceneParam._m0[90u].x));
    float _1540 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1529, cbSceneParam._m0[91u].y, _1527 * cbSceneParam._m0[91u].x));
    uvec4 _1550 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1552 = _1550.x * 14u;
    uint _1553 = _1552 + 13u;
    float _1560 = _473 + (-1.0);
    float _1565 = (cbLight._m0[_1553].x * _1560) + 1.0;
    float _1566 = (cbLight._m0[_1553].y * _1560) + 1.0;
    float _1567 = (cbLight._m0[_1553].z * _1560) + 1.0;
    float _1568 = (cbLight._m0[_1553].w * _1560) + 1.0;
    uint _1569 = _1552 + 5u;
    float _1575 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
    uint _1579 = _1552 + 4u;
    float _1586 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
    uint _1590 = _1552 | 1u;
    float _1601 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_289, _290, _291));
    float _1604 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_289, _290, _291));
    float _3780 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
    float _3791 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _1609 = (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * 0.3183098733425140380859375;
    float _1611 = (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * 0.3183098733425140380859375;
    float _1618 = ((cbLight._m0[_1569].x * _1575) * _1611) + ((cbLight._m0[_1579].x * _1586) * _1609);
    float _1619 = ((_1575 * cbLight._m0[_1569].y) * _1611) + ((_1586 * cbLight._m0[_1579].y) * _1609);
    float _1620 = ((_1575 * cbLight._m0[_1569].z) * _1611) + ((_1586 * cbLight._m0[_1579].z) * _1609);
    uvec4 _1625 = floatBitsToUint(cbLight._m0[_1552 + 12u]);
    bool _1627 = _1625.x == 0u;
    float _1638;
    float _1640;
    float _1642;
    if (_1627)
    {
        _1638 = _1618;
        _1640 = _1619;
        _1642 = _1620;
    }
    else
    {
        uint _1646 = _1552 + 6u;
        float _1662 = (dot(vec3(cbLight._m0[_1552 + 2u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1663 = _1662 * _1662;
        float _3802 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1665 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1638 = (((cbLight._m0[_1646].x * 0.3183098733425140380859375) * _1664) * _1665) + _1618;
        _1640 = (((cbLight._m0[_1646].y * 0.3183098733425140380859375) * _1664) * _1665) + _1619;
        _1642 = (((cbLight._m0[_1646].z * 0.3183098733425140380859375) * _1664) * _1665) + _1620;
    }
    bool _1645 = _1625.y == 0u;
    float _1683;
    float _1685;
    float _1687;
    if (_1645)
    {
        _1683 = _1638;
        _1685 = _1640;
        _1687 = _1642;
    }
    else
    {
        uint _1853 = _1552 + 7u;
        float _1869 = (dot(vec3(cbLight._m0[_1552 + 3u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1870 = _1869 * _1869;
        float _3818 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1872 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1683 = (((cbLight._m0[_1853].x * 0.3183098733425140380859375) * _1871) * _1872) + _1638;
        _1685 = (((cbLight._m0[_1853].y * 0.3183098733425140380859375) * _1871) * _1872) + _1640;
        _1687 = (((cbLight._m0[_1853].z * 0.3183098733425140380859375) * _1871) * _1872) + _1642;
    }
    uint _1690 = _1552 + 8u;
    float _1703 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1552].w)) * _292) * 0.949999988079071044921875);
    float _1704 = _1703 * _1703;
    float _1705 = cbLight._m0[_1552].x + _371;
    float _1706 = cbLight._m0[_1552].y + _372;
    float _1707 = cbLight._m0[_1552].z + _373;
    float _1711 = inversesqrt(dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707)));
    float _1712 = _1711 * _1705;
    float _1713 = _1711 * _1706;
    float _1714 = _1711 * _1707;
    float _1715 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1552].xyz));
    float _3834 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1718 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _1719 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _1720 = dot(vec3(_289, _290, _291), vec3(_1712, _1713, _1714));
    float _3856 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1723 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _1724 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_1712, _1713, _1714));
    float _3867 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1728 = _1704 * _1704;
    float _1732 = ((_1723 * _1723) * (_1728 + (-1.0))) + 1.0;
    float _1740 = exp2(log2(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * 5.0);
    float _1741 = 0.959999978542327880859375 - _455;
    float _1743 = 0.959999978542327880859375 - _456;
    float _1744 = 0.959999978542327880859375 - _457;
    float _1751 = 1.0 - _1704;
    float _1762 = (0.5 / (((_1719 * ((_1718 * _1751) + _1704)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _1751) + _1704) * _1718))) * _1718;
    float _3878 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1764 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1728 / ((_1732 * _1732) * 3.141590118408203125));
    uint _1775 = _1552 + 9u;
    float _1786 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1590].w)) * _292) * 0.949999988079071044921875);
    float _1787 = _1786 * _1786;
    float _1788 = cbLight._m0[_1590].x + _371;
    float _1789 = cbLight._m0[_1590].y + _372;
    float _1790 = cbLight._m0[_1590].z + _373;
    float _1794 = inversesqrt(dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790)));
    float _1795 = _1794 * _1788;
    float _1796 = _1794 * _1789;
    float _1797 = _1794 * _1790;
    float _1798 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1590].xyz));
    float _3889 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _1802 = dot(vec3(_289, _290, _291), vec3(_1795, _1796, _1797));
    float _3900 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1805 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _1806 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_1795, _1796, _1797));
    float _3911 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1810 = _1787 * _1787;
    float _1814 = ((_1805 * _1805) * (_1810 + (-1.0))) + 1.0;
    float _1821 = exp2(log2(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * 5.0);
    float _1828 = 1.0 - _1787;
    float _1838 = (0.5 / (((_1719 * ((_1801 * _1828) + _1787)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _1828) + _1787) * _1801))) * _1801;
    float _3922 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1810 / ((_1814 * _1814) * 3.141590118408203125));
    float _1850 = (((((_1821 * _1741) + _458) * cbLight._m0[_1775].x) * _1840) * _1575) + (((((_1740 * _1741) + _458) * cbLight._m0[_1690].x) * _1764) * _1586);
    float _1851 = (((((_1821 * _1743) + _460) * cbLight._m0[_1775].y) * _1840) * _1575) + (((((_1740 * _1743) + _460) * cbLight._m0[_1690].y) * _1764) * _1586);
    float _1852 = (((((_1821 * _1744) + _461) * cbLight._m0[_1775].z) * _1840) * _1575) + (((((_1740 * _1744) + _461) * cbLight._m0[_1690].z) * _1764) * _1586);
    float _1914;
    float _1916;
    float _1918;
    if (_1627)
    {
        _1914 = _1850;
        _1916 = _1851;
        _1918 = _1852;
    }
    else
    {
        uint _1920 = _1552 + 2u;
        uint _1924 = _1552 + 10u;
        float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _292) * 0.949999988079071044921875);
        float _1939 = _1938 * _1938;
        float _1940 = cbLight._m0[_1920].x + _371;
        float _1941 = cbLight._m0[_1920].y + _372;
        float _1942 = cbLight._m0[_1920].z + _373;
        float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
        float _1947 = _1946 * _1940;
        float _1948 = _1946 * _1941;
        float _1949 = _1946 * _1942;
        float _1950 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1920].xyz));
        float _3933 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1953 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1954 = dot(vec3(_289, _290, _291), vec3(_1947, _1948, _1949));
        float _3944 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1957 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1958 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_1947, _1948, _1949));
        float _3955 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1962 = _1939 * _1939;
        float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
        float _1973 = exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * 5.0);
        float _1980 = 1.0 - _1939;
        float _1990 = (0.5 / (((_1719 * ((_1953 * _1980) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _1980) + _1939) * _1953))) * _1953;
        float _3966 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1992 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
        float _1993 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1914 = (((((_1973 * _1741) + _458) * cbLight._m0[_1924].x) * _1992) * _1993) + _1850;
        _1916 = (((((_1973 * _1743) + _460) * cbLight._m0[_1924].y) * _1992) * _1993) + _1851;
        _1918 = (((((_1973 * _1744) + _461) * cbLight._m0[_1924].z) * _1992) * _1993) + _1852;
    }
    float _2028;
    float _2030;
    float _2032;
    if (_1645)
    {
        _2028 = _1914;
        _2030 = _1916;
        _2032 = _1918;
    }
    else
    {
        uint _2039 = _1552 + 3u;
        uint _2043 = _1552 + 11u;
        float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _292) * 0.949999988079071044921875);
        float _2058 = _2057 * _2057;
        float _2059 = cbLight._m0[_2039].x + _371;
        float _2060 = cbLight._m0[_2039].y + _372;
        float _2061 = cbLight._m0[_2039].z + _373;
        float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
        float _2066 = _2065 * _2059;
        float _2067 = _2065 * _2060;
        float _2068 = _2065 * _2061;
        float _2069 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2039].xyz));
        float _3982 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _2073 = dot(vec3(_289, _290, _291), vec3(_2066, _2067, _2068));
        float _3993 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _2077 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2066, _2067, _2068));
        float _4004 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2081 = _2058 * _2058;
        float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
        float _2092 = exp2(log2(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * 5.0);
        float _2099 = 1.0 - _2058;
        float _2109 = (0.5 / (((_1719 * ((_2072 * _2099) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _2099) + _2058) * _2072))) * _2072;
        float _4015 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2111 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
        float _2112 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _2028 = (((((_2092 * _1741) + _458) * cbLight._m0[_2043].x) * _2111) * _2112) + _1914;
        _2030 = (((((_2092 * _1743) + _460) * cbLight._m0[_2043].y) * _2111) * _2112) + _1916;
        _2032 = (((((_2092 * _1744) + _461) * cbLight._m0[_2043].z) * _2111) * _2112) + _1918;
    }
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    if (_1550.y == 0u)
    {
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2187;
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2187;
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2187;
        uvec4 _2202 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2203 = _2202.x;
        uint _2214 = uint((float(_2202.y) * floor(float(uint(cbSceneParam._m0[85u].y * _393) / _2203))) + floor(float(uint(cbSceneParam._m0[85u].x * _392) / _2203)));
        float _2224 = (log2(_2190 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2225 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        uint _2228 = uint(isnan(14.0) ? _2225 : (isnan(_2225) ? 14.0 : min(_2225, 14.0)));
        uvec4 _2233 = texelFetch(g_lightClusterGridBuffer, int(((_2228 << 2u) + (_2214 << 6u)) >> 2u));
        uint _2234 = _2233.x;
        uint _2235 = _2202.z;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        if (((((1u << ((_2235 >> 4u) & 15u)) + 4294967295u) & _2234) == 0u) || ((_2235 & 240u) == 0u))
        {
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
        }
        else
        {
            float _2336;
            float _2338;
            float _2340;
            float _2342;
            float _2344;
            float _2346;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            uint _2494 = 0u;
            uint _2503;
            bool _2504;
            for (;;)
            {
                _2503 = texelFetch(g_lightClassification, int((((_2228 << 5u) + (_2214 << 9u)) + (_2494 << 2u)) >> 2u)).x;
                _2504 = _2503 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2504)
                {
                    frontier_phi_66_pred = _2488;
                    frontier_phi_66_pred_1 = _2493;
                    frontier_phi_66_pred_2 = _2492;
                    frontier_phi_66_pred_3 = _2491;
                    frontier_phi_66_pred_4 = _2490;
                    frontier_phi_66_pred_5 = _2489;
                }
                else
                {
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    uint _2639;
                    _2633 = _2488;
                    _2634 = _2489;
                    _2635 = _2490;
                    _2636 = _2491;
                    _2637 = _2492;
                    _2638 = _2493;
                    _2639 = _2503;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    for (;;)
                    {
                        uint _2643 = uint(findLSB(_2639)) + (_2494 << 5u);
                        uint _2640 = (_2639 + 4294967295u) & _2639;
                        uint _2645 = _2643 * 48u;
                        vec4 _2659 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2645)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 3u)).x));
                        uint _2665 = (_2643 * 48u) + 4u;
                        vec4 _2678 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2684 = (_2643 * 48u) + 8u;
                        vec3 _2695 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x));
                        float _2699 = _2659.x - _2188;
                        float _2700 = _2659.y - _2189;
                        float _2701 = _2659.z - _2190;
                        float _2702 = dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701));
                        float _2705 = inversesqrt(_2702);
                        float _2706 = _2705 * _2699;
                        float _2707 = _2705 * _2700;
                        float _2708 = _2705 * _2701;
                        float _2709 = dot(vec3(_413, _416, _419), vec3(_2706, _2707, _2708));
                        float _2714 = 1.0 - (_2702 * _2659.w);
                        float _4041 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                        float _2715 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                        float _2716 = sqrt(_2702) * _2678.w;
                        float _2719 = 1.39999997615814208984375 / (_2716 + 1.39999997615814208984375);
                        float _2720 = _2719 * _2719;
                        float _2723 = ((1.0 - _2720) * _2709) + _2720;
                        float _2726 = _2716 * _2716;
                        float _2730 = ((isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0))) * _2715) / ((_2726 * 0.699999988079071044921875) + 1.0);
                        float _2734 = (-0.0) - _2188;
                        float _2735 = (-0.0) - _2189;
                        float _2736 = (-0.0) - _2190;
                        float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
                        float _2741 = _2740 * _2734;
                        float _2742 = _2740 * _2735;
                        float _2743 = _2740 * _2736;
                        float _2751 = exp2(log2(1.0 / ((_2726 * 3.5) + 5.0)) * 0.25);
                        float _2752 = 1.0 - _489;
                        float _2759 = sqrt(1.0 - ((1.0 - (_2752 * _2752)) * (1.0 - (_2751 * _2751))));
                        float _2760 = _2759 * _2759;
                        float _2761 = _2760 * _2760;
                        float _2762 = _2741 + _2706;
                        float _2763 = _2742 + _2707;
                        float _2764 = _2743 + _2708;
                        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
                        float _2772 = dot(vec3(_413, _416, _419), vec3(_2741, _2742, _2743));
                        float _4057 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2775 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                        float _2776 = dot(vec3(_413, _416, _419), vec3(_2768 * _2762, _2768 * _2763, _2768 * _2764));
                        float _4068 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                        float _2779 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                        float _2783 = ((_2779 * _2779) * (_2761 + (-1.0))) + 1.0;
                        float _2784 = _2719 * _2760;
                        float _2785 = _2784 * _2784;
                        float _2788 = ((1.0 - _2785) * _2709) + _2785;
                        float _4079 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2789 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                        float _2790 = 1.0 - _2760;
                        float _2800 = (0.5 / (((_2789 * ((_2775 * _2790) + _2760)) + 9.9999999392252902907785028219223e-09) + (((_2789 * _2790) + _2760) * _2775))) * _2789;
                        float _4090 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2811 = (((_2761 * 3.1415927410125732421875) * (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) / ((_2783 * _2783) * ((_2726 * 2.1991131305694580078125) + 3.141590118408203125))) * _2715;
                        _2563 = (_2730 * _2678.x) + _2636;
                        _2564 = (_2730 * _2678.y) + _2637;
                        _2565 = (_2730 * _2678.z) + _2638;
                        _2560 = (_2811 * _2695.x) + _2633;
                        _2561 = (_2811 * _2695.y) + _2634;
                        _2562 = (_2811 * _2695.z) + _2635;
                        if (_2640 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2633 = _2560;
                            _2634 = _2561;
                            _2635 = _2562;
                            _2636 = _2563;
                            _2637 = _2564;
                            _2638 = _2565;
                            _2639 = _2640;
                        }
                    }
                    frontier_phi_66_pred = _2560;
                    frontier_phi_66_pred_1 = _2565;
                    frontier_phi_66_pred_2 = _2564;
                    frontier_phi_66_pred_3 = _2563;
                    frontier_phi_66_pred_4 = _2562;
                    frontier_phi_66_pred_5 = _2561;
                }
                _2336 = frontier_phi_66_pred;
                _2346 = frontier_phi_66_pred_1;
                _2344 = frontier_phi_66_pred_2;
                _2342 = frontier_phi_66_pred_3;
                _2340 = frontier_phi_66_pred_4;
                _2338 = frontier_phi_66_pred_5;
                uint _2495 = _2494 + 1u;
                if (_2495 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2488 = _2336;
                    _2489 = _2338;
                    _2490 = _2340;
                    _2491 = _2342;
                    _2492 = _2344;
                    _2493 = _2346;
                    _2494 = _2495;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
        }
        uvec4 _2349 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2350 = _2349.z;
        uint _2352 = (_2350 >> 8u) & 15u;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        if (((4294967295u << _2352) & _2234) == 0u)
        {
            _2456 = _2335;
            _2458 = _2337;
            _2460 = _2339;
            _2462 = _2341;
            _2464 = _2343;
            _2466 = _2345;
        }
        else
        {
            float _2481 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
            float _2482 = _2481 * _2188;
            float _2483 = _2481 * _2189;
            float _2484 = _2481 * _2190;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2352 < ((_2350 >> 12u) & 15u))
            {
                float _2457;
                float _2459;
                float _2461;
                float _2463;
                float _2465;
                float _2467;
                float _2616 = _2335;
                float _2617 = _2337;
                float _2618 = _2339;
                float _2619 = _2341;
                float _2620 = _2343;
                float _2621 = _2345;
                uint _2622 = _2352;
                uint _2631;
                bool _2632;
                for (;;)
                {
                    _2631 = texelFetch(g_lightClassification, int((((_2228 << 5u) + (_2214 << 9u)) + (_2622 << 2u)) >> 2u)).x;
                    _2632 = _2631 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2632)
                    {
                        frontier_phi_77_pred = _2621;
                        frontier_phi_77_pred_1 = _2620;
                        frontier_phi_77_pred_2 = _2619;
                        frontier_phi_77_pred_3 = _2618;
                        frontier_phi_77_pred_4 = _2617;
                        frontier_phi_77_pred_5 = _2616;
                    }
                    else
                    {
                        float _2825;
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2830;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _2838 = _2616;
                        float _2839 = _2617;
                        float _2840 = _2618;
                        float _2841 = _2619;
                        float _2842 = _2620;
                        float _2843 = _2621;
                        uint _2844 = _2631;
                        uint _2845;
                        vec4 _2870;
                        float _2871;
                        vec4 _2886;
                        vec3 _2898;
                        vec4 _2914;
                        vec4 _2930;
                        float _2977;
                        bool _2978;
                        for (;;)
                        {
                            uint _2855 = ((_2622 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2844));
                            _2845 = (_2844 + 4294967295u) & _2844;
                            uint _2857 = _2855 * 40u;
                            _2870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 3u)).x));
                            _2871 = _2870.w;
                            uint _2873 = (_2855 * 40u) + 4u;
                            _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            uint _2888 = (_2855 * 40u) + 8u;
                            _2898 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x));
                            uint _2901 = (_2855 * 40u) + 16u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2917 = (_2855 * 40u) + 20u;
                            _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2933 = (_2855 * 40u) + 24u;
                            vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            uint _2952 = (_2855 * 40u) + 28u;
                            vec4 _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            _2977 = fma(_2190, _2965.z, fma(_2189, _2965.y, _2965.x * _2188)) + _2965.w;
                            _2978 = !((fma(_2190, _2946.z, fma(_2189, _2946.y, _2946.x * _2188)) + _2946.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2978)
                            {
                                float _3005 = _2870.x - _2188;
                                float _3006 = _2870.y - _2189;
                                float _3007 = _2870.z - _2190;
                                float _3008 = dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007));
                                float _3011 = inversesqrt(_3008);
                                float _3012 = _3011 * _3005;
                                float _3013 = _3011 * _3006;
                                float _3014 = _3011 * _3007;
                                float _3018 = 1.0 - (_3008 / (_2871 * _2871));
                                float _4101 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3019 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3023 = sqrt(_3008) * _2886.w;
                                float _3025 = 1.39999997615814208984375 / (_3023 + 1.39999997615814208984375);
                                float _3026 = _3025 * _3025;
                                float _3029 = ((1.0 - _3026) * dot(vec3(_3012, _3013, _3014), vec3(_413, _416, _419))) + _3026;
                                float _3032 = _3023 * _3023;
                                float _3036 = (fma(_2190, _2914.z, fma(_2189, _2914.y, _2914.x * _2188)) + _2914.w) / _2977;
                                float _3037 = (fma(_2190, _2930.z, fma(_2189, _2930.y, _2930.x * _2188)) + _2930.w) / _2977;
                                float _3041 = 1.0 - dot(vec2(_3036, _3037), vec2(_3036, _3037));
                                float _4117 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3042 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                                float _3043 = _3042 * (((isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0))) * _3019) / ((_3032 * 0.699999988079071044921875) + 1.0));
                                float _3055 = exp2(log2(1.0 / ((_3032 * 3.5) + 5.0)) * 0.25);
                                float _3056 = 1.0 - _489;
                                float _3063 = sqrt(1.0 - ((1.0 - (_3056 * _3056)) * (1.0 - (_3055 * _3055))));
                                float _3064 = _3063 * _3063;
                                float _3065 = _3064 * _3064;
                                float _3066 = _3012 - _2482;
                                float _3067 = _3013 - _2483;
                                float _3068 = _3014 - _2484;
                                float _3072 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
                                float _3076 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2482, (-0.0) - _2483, (-0.0) - _2484));
                                float _4128 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3079 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
                                float _3080 = dot(vec3(_413, _416, _419), vec3(_3072 * _3066, _3072 * _3067, _3072 * _3068));
                                float _4139 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3083 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                                float _3087 = ((_3083 * _3083) * (_3065 + (-1.0))) + 1.0;
                                float _3088 = _3025 * _3064;
                                float _3089 = _3088 * _3088;
                                float _3095 = ((1.0 - _3089) * dot(vec3(_413, _416, _419), vec3(_3012, _3013, _3014))) + _3089;
                                float _4150 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                                float _3097 = 1.0 - _3064;
                                float _3107 = (0.5 / (((_3096 * ((_3079 * _3097) + _3064)) + 9.9999999392252902907785028219223e-09) + (((_3096 * _3097) + _3064) * _3079))) * _3096;
                                float _4161 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3117 = (_3042 * _3019) * (((_3065 * 3.1415927410125732421875) * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) / ((_3087 * _3087) * ((_3032 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3043 * _2886.y;
                                frontier_phi_83_pred_1 = _3043 * _2886.x;
                                frontier_phi_83_pred_2 = _3117 * _2898.z;
                                frontier_phi_83_pred_3 = _3117 * _2898.y;
                                frontier_phi_83_pred_4 = _3117 * _2898.x;
                                frontier_phi_83_pred_5 = _3043 * _2886.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3125 = frontier_phi_83_pred;
                            _3124 = frontier_phi_83_pred_1;
                            _3123 = frontier_phi_83_pred_2;
                            _3122 = frontier_phi_83_pred_3;
                            _3121 = frontier_phi_83_pred_4;
                            _3126 = frontier_phi_83_pred_5;
                            _2828 = _3124 + _2841;
                            _2829 = _3125 + _2842;
                            _2830 = _3126 + _2843;
                            _2825 = _3121 + _2838;
                            _2826 = _3122 + _2839;
                            _2827 = _3123 + _2840;
                            if (_2845 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2845;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2830;
                        frontier_phi_77_pred_1 = _2829;
                        frontier_phi_77_pred_2 = _2828;
                        frontier_phi_77_pred_3 = _2827;
                        frontier_phi_77_pred_4 = _2826;
                        frontier_phi_77_pred_5 = _2825;
                    }
                    _2467 = frontier_phi_77_pred;
                    _2465 = frontier_phi_77_pred_1;
                    _2463 = frontier_phi_77_pred_2;
                    _2461 = frontier_phi_77_pred_3;
                    _2459 = frontier_phi_77_pred_4;
                    _2457 = frontier_phi_77_pred_5;
                    uint _2623 = _2622 + 1u;
                    if (_2623 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2616 = _2457;
                        _2617 = _2459;
                        _2618 = _2461;
                        _2619 = _2463;
                        _2620 = _2465;
                        _2621 = _2467;
                        _2622 = _2623;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2461;
                frontier_phi_58_59_ladder_1 = _2467;
                frontier_phi_58_59_ladder_2 = _2465;
                frontier_phi_58_59_ladder_3 = _2463;
                frontier_phi_58_59_ladder_4 = _2459;
                frontier_phi_58_59_ladder_5 = _2457;
            }
            else
            {
                frontier_phi_58_59_ladder = _2339;
                frontier_phi_58_59_ladder_1 = _2345;
                frontier_phi_58_59_ladder_2 = _2343;
                frontier_phi_58_59_ladder_3 = _2341;
                frontier_phi_58_59_ladder_4 = _2337;
                frontier_phi_58_59_ladder_5 = _2335;
            }
            _2456 = frontier_phi_58_59_ladder_5;
            _2458 = frontier_phi_58_59_ladder_4;
            _2460 = frontier_phi_58_59_ladder;
            _2462 = frontier_phi_58_59_ladder_3;
            _2464 = frontier_phi_58_59_ladder_2;
            _2466 = frontier_phi_58_59_ladder_1;
        }
        float _2471 = isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0));
        _2247 = (_2471 * _2462) + _1683;
        _2249 = (_2471 * _2464) + _1685;
        _2251 = (_2471 * _2466) + _1687;
        _2253 = ((_2456 * _458) * _2471) + _2028;
        _2255 = ((_2458 * _460) * _2471) + _2030;
        _2257 = ((_2460 * _461) * _2471) + _2032;
    }
    else
    {
        _2247 = _1683;
        _2249 = _1685;
        _2251 = _1687;
        _2253 = _2028;
        _2255 = _2030;
        _2257 = _2032;
    }
    float _4177 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4188 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4199 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _2274 = ((isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2247 + ((isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))) * _473))) + ((_2253 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _1315)) * cbPerFrame._m0[3u].x);
    float _2275 = ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2249 + ((isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))) * _473))) + ((_2255 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _1315)) * cbPerFrame._m0[3u].x);
    float _2276 = ((isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_2251 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _473))) + ((_2257 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1315)) * cbPerFrame._m0[3u].x);
    uint _2277 = _432 + 6u;
    float _2285 = _392 / cbSceneParam._m0[86u].x;
    float _2286 = _393 / cbSceneParam._m0[86u].y;
    vec4 _2300 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2285, _2286, (log2((isnan(cbSceneParam._m0[77u].w) ? _312 : (isnan(_312) ? cbSceneParam._m0[77u].w : min(_312, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2302 = _2300.x;
    float _2303 = _2300.y;
    float _2304 = _2300.z;
    float _2305 = _2300.w;
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    if (_312 > cbSceneParam._m0[78u].w)
    {
        float _2360 = isnan(_312) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _312 : min(cbSceneParam._m0[80u].w, _312));
        float _2361 = _2360 / _312;
        float _2372 = _2361 * _364;
        float _2373 = _365 * _2361;
        float _2374 = (-0.0) - _2373;
        float _2376 = _2361 * _366;
        float _2378 = (cbSceneParam._m0[77u].w * _2374) / _2360;
        float _2379 = _2378 + cbSceneParam._m0[79u].w;
        float _2380 = cbSceneParam._m0[79u].w - _2373;
        float _2386 = sqrt(((_2372 * _2372) + (_2373 * _2373)) + (_2376 * _2376));
        float _2389 = (1.0 - (cbSceneParam._m0[77u].w / _2360)) * _2386;
        float _2394 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2396 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2573;
        if (abs((_2374 - _2378) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2573 = ((((_2379 > 0.0) ? exp2(_2394 * _2379) : (2.0 - exp2(_2396 * _2379))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2389;
        }
        else
        {
            float _2517 = 1.0 / cbSceneParam._m0[80u].x;
            float _2518 = isnan(_2380) ? _2379 : (isnan(_2379) ? _2380 : max(_2379, _2380));
            float _2519 = isnan(_2380) ? _2379 : (isnan(_2379) ? _2380 : min(_2379, _2380));
            float _2528 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : min(_2518, 0.0));
            float _2529 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : min(_2519, 0.0));
            _2573 = ((abs(_2386 / _2374) * cbSceneParam._m0[80u].y) * ((((_2528 - _2529) * 2.0) - ((exp2(_2394 * (isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0)))) - exp2(_2394 * (isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0))))) * _2517)) - ((exp2(_2396 * _2528) - exp2(_2396 * _2529)) * _2517))) + (_2389 * cbSceneParam._m0[80u].z);
        }
        vec4 _2575 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2285, _2286, 1.0), 0.0);
        float _2584 = exp2((_2573 * (-1.44269502162933349609375)) * (1.0 - _2575.w));
        float _2585 = log2(_2584);
        float _2601 = log2(_2305);
        _2398 = (exp2(_2601 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2585 * cbSceneParam._m0[78u].x)) * _2575.x) / cbSceneParam._m0[78u].x)) + _2302;
        _2400 = (exp2(_2601 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2585 * cbSceneParam._m0[78u].y)) * _2575.y) / cbSceneParam._m0[78u].y)) + _2303;
        _2402 = (exp2(_2601 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2585 * cbSceneParam._m0[78u].z)) * _2575.z) / cbSceneParam._m0[78u].z)) + _2304;
        _2404 = _2584 * _2305;
    }
    else
    {
        _2398 = _2302;
        _2400 = _2303;
        _2402 = _2304;
        _2404 = _2305;
    }
    bool _2611;
    vec4 _2414;
    vec4 _2436;
    float _2438;
    float _2442;
    float _2443;
    float _2444;
    float _2445;
    bool _2455;
    for (;;)
    {
        _2414 = cbMatDynParam._m0[0u];
        float _2416 = roundEven(_2414.y);
        bool _2417 = _2416 == 3.0;
        float _2418 = log2(_2404);
        float _2425 = exp2(_2418 * cbSceneParam._m0[78u].x) * _2274;
        float _2426 = exp2(_2418 * cbSceneParam._m0[78u].y) * _2275;
        float _2427 = exp2(_2418 * cbSceneParam._m0[78u].z) * _2276;
        float _2434 = _380 + (-0.5);
        _2436 = cbMtdParam._m0[1u];
        _2438 = _2436.y * _2434;
        float _2441 = (_2416 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2442 = _2441 * (_2417 ? _2425 : (_2425 + (cbSceneParam._m0[72u].w * _2398)));
        _2443 = _2441 * (_2417 ? _2426 : (_2426 + (cbSceneParam._m0[72u].w * _2400)));
        _2444 = _2441 * (_2417 ? _2427 : (_2427 + (cbSceneParam._m0[72u].w * _2402)));
        _2445 = _2434 * 0.999000012874603271484375;
        _2455 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2455)
        {
            if ((cbInstanceData._m0[_432 + 7u].x + _2445) < 0.5)
            {
                _2611 = true;
                break;
            }
        }
        uint _2552 = _434 + uint(_2414.w);
        if ((cbInstanceData._m0[_2552].w < 1.0) && ((cbInstanceData._m0[_2552].w + _2445) < 0.5))
        {
            _2611 = true;
            break;
        }
        if ((_2438 + 1.0) < _2436.x)
        {
            _2611 = true;
            break;
        }
        _2611 = false;
        break;
    }
    float _2816;
    if (_2611)
    {
        discard_state = true;
        _2816 = 0.0;
    }
    else
    {
        _2816 = cbInstanceData._m0[_2277].w;
    }
    SV_Target.x = _2442;
    SV_Target.y = _2443;
    SV_Target.z = _2444;
    SV_Target.w = _2816;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2277].w;
    discard_exit();
}


