#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _958;
float _3350;
float _3351;
float _3352;
float _3353;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _239 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _268.z;
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3362 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0))));
    float _288 = fma(_285, _217, fma(_278, _210, _276 * _196));
    float _291 = fma(_285, _218, fma(_278, _211, _276 * _197));
    float _294 = fma(_285, _219, fma(_278, _212, _276 * _198));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _306 = cbMtdParam._m0[10u].x + dot(vec4(_298 * _288, _298 * _291, _298 * _294, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3373 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _307 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    vec4 _319 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _330 = ((_319.x - _245) * _307) + _245;
    float _331 = ((_319.y - _246) * _307) + _246;
    float _332 = ((_319.z - _247) * _307) + _247;
    vec4 _345 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _352 = (_345.x * 2.0) + (-1.0);
    float _353 = (_345.y * 2.0) + (-1.0);
    float _354 = dot(vec2(_352, _353), vec2(_352, _353));
    float _3384 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _362 = ((_345.z - _272) * _307) + _272;
    float _371 = ((sqrt(1.0 - (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) - _285) * _307) + _285;
    float _375 = (((_352 - _276) * _307) + _276) + (cbMtdParam._m0[10u].y * _276);
    float _376 = (((_353 - _278) * _307) + _278) + (cbMtdParam._m0[10u].y * _278);
    float _379 = fma(_371, _217, fma(_376, _210, _375 * _196));
    float _382 = fma(_371, _218, fma(_376, _211, _375 * _197));
    float _385 = fma(_371, _219, fma(_376, _212, _375 * _198));
    float _389 = inversesqrt(dot(vec3(_379, _382, _385), vec3(_379, _382, _385)));
    float _390 = _389 * _379;
    float _391 = _389 * _382;
    float _392 = _389 * _385;
    float _3395 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _393 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    float _3406 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3417 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3428 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _412 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _463 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _453);
    float _464 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _453);
    float _465 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _453);
    float _469 = inversesqrt(dot(vec3(_463, _464, _465), vec3(_463, _464, _465)));
    float _470 = _463 * _469;
    float _471 = _464 * _469;
    float _472 = _465 * _469;
    vec4 _477 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _479 = _477.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _637 = sqrt(((_463 * _463) + (_464 * _464)) + (_465 * _465));
        float _643 = (cbMatDynParam._m0[5u].x * _637) + cbMatDynParam._m0[5u].y;
        float _3439 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _648 = (cbMatDynParam._m0[5u].z * _637) + cbMatDynParam._m0[5u].w;
        float _3450 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) - _644)) + _644) < ((_479 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _491 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _492 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _512 = fma(_392, cbSceneParam._m0[5u].z, fma(_391, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _390));
    float _515 = fma(_392, cbSceneParam._m0[6u].z, fma(_391, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _390));
    float _518 = fma(_392, cbSceneParam._m0[7u].z, fma(_391, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _390));
    uint _531 = uint(roundEven(NORMAL.w)) * 13u;
    uint _533 = _531 + 9u;
    uint _534 = _533 + uint(cbMatDynParam._m0[0u].w);
    float _540 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * cbInstanceData._m0[_534].x;
    float _541 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0)))) * cbInstanceData._m0[_534].y;
    float _542 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) * cbInstanceData._m0[_534].z;
    float _3461 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _3472 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    vec4 _554 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _491, cbSceneParam._m0[86u].y * _492));
    float _557 = _554.x * TEXCOORD.z;
    float _558 = dot(vec3(_390, _391, _392), vec3(_470, _471, _472));
    float _561 = _558 * 2.0;
    float _565 = (_561 * _390) - _470;
    float _566 = (_561 * _391) - _471;
    float _567 = (_561 * _392) - _472;
    float _571 = abs(dot(vec3(_470, _471, _472), vec3(_390, _391, _392)));
    float _3494 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _573 = sqrt(_393);
    float _586 = exp2((_573 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_573 * 3.0));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _957;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _682 = fma(_626, cbModelParam._m0[26u].z, fma(_622, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618));
        float _686 = fma(_626, cbModelParam._m0[27u].z, fma(_622, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618));
        float _690 = fma(_626, cbModelParam._m0[28u].z, fma(_622, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618));
        float _715 = _618 + _390;
        float _716 = _622 + _391;
        float _717 = _626 + _392;
        float _727 = fma(_717, cbModelParam._m0[26u].z, fma(_716, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715)) - _682;
        float _728 = fma(_717, cbModelParam._m0[27u].z, fma(_716, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715)) - _686;
        float _729 = fma(_717, cbModelParam._m0[28u].z, fma(_716, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715)) - _690;
        float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
        float _746 = ((_733 * _727) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_682 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _747 = ((_733 * _728) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_686 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _748 = ((_733 * _729) / cbModelParam._m0[34u].z) + ((((((_690 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        float _785 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_751.x + (-0.5));
        float _787 = _785 * (_751.y + (-0.5));
        float _788 = _785 * (_751.z + (-0.5));
        float _795 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_758.x + (-0.5));
        float _797 = _795 * (_758.y + (-0.5));
        float _798 = _795 * (_758.z + (-0.5));
        float _805 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_765.x + (-0.5));
        float _807 = _805 * (_765.y + (-0.5));
        float _808 = _805 * (_765.z + (-0.5));
        float _815 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_772.x + (-0.5));
        float _817 = _815 * (_772.y + (-0.5));
        float _818 = _815 * (_772.z + (-0.5));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = _786 * 0.5;
        float _823 = _796 * 0.5;
        float _824 = _806 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _839 = (dot(vec3(_390, _391, _392), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _849 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _3542 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_851 + 1.0))) + _856) * _819;
        float _866 = _787 * 0.5;
        float _867 = _797 * 0.5;
        float _868 = _807 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _882 = (dot(vec3(_390, _391, _392), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _891 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3575 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_893 + 1.0))) + _898) * _820;
        float _908 = _788 * 0.5;
        float _909 = _798 * 0.5;
        float _910 = _808 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_390, _391, _392), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3608 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_935 + 1.0))) + _940) * _821;
        _957 = _788;
        _959 = _787;
        _960 = _786;
        _961 = _798;
        _962 = _797;
        _963 = _796;
        _964 = _808;
        _965 = _807;
        _966 = _806;
        _967 = _821;
        _968 = _820;
        _969 = _819;
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
    }
    else
    {
        _957 = _958;
        _959 = _958;
        _960 = _958;
        _961 = _958;
        _962 = _958;
        _963 = _958;
        _964 = _958;
        _965 = _958;
        _966 = _958;
        _967 = _958;
        _968 = _958;
        _969 = _958;
        _970 = 0.0;
        _971 = 0.0;
        _972 = 0.0;
    }
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1001 = fma(_626, cbModelParam._m0[30u].z, fma(_622, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _618));
        float _1005 = fma(_626, cbModelParam._m0[31u].z, fma(_622, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _618));
        float _1009 = fma(_626, cbModelParam._m0[32u].z, fma(_622, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _618));
        float _1032 = _618 + _390;
        float _1033 = _622 + _391;
        float _1034 = _626 + _392;
        float _1044 = fma(_1034, cbModelParam._m0[30u].z, fma(_1033, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032)) - _1001;
        float _1045 = fma(_1034, cbModelParam._m0[31u].z, fma(_1033, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032)) - _1005;
        float _1046 = fma(_1034, cbModelParam._m0[32u].z, fma(_1033, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032)) - _1009;
        float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
        float _1063 = ((_1050 * _1044) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1001 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1050 * _1045) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1005 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1050 * _1046) / cbModelParam._m0[35u].z) + ((((((_1009 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        float _1100 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1067.x + (-0.5));
        float _1102 = _1100 * (_1067.y + (-0.5));
        float _1103 = _1100 * (_1067.z + (-0.5));
        float _1110 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1074.x + (-0.5));
        float _1112 = _1110 * (_1074.y + (-0.5));
        float _1113 = _1110 * (_1074.z + (-0.5));
        float _1120 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1081.x + (-0.5));
        float _1122 = _1120 * (_1081.y + (-0.5));
        float _1123 = _1120 * (_1081.z + (-0.5));
        float _1130 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1088.x + (-0.5));
        float _1132 = _1130 * (_1088.y + (-0.5));
        float _1133 = _1130 * (_1088.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_390, _391, _392), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3671 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1164 + 1.0))) + _1169) * _1134;
        float _1179 = _1102 * 0.5;
        float _1180 = _1112 * 0.5;
        float _1181 = _1122 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_390, _391, _392), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3704 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1206 + 1.0))) + _1211) * _1135;
        float _1221 = _1103 * 0.5;
        float _1222 = _1113 * 0.5;
        float _1223 = _1123 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_390, _391, _392), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3737 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1248 + 1.0))) + _1253) * _1136;
        _1270 = _1103;
        _1271 = _1102;
        _1272 = _1101;
        _1273 = _1113;
        _1274 = _1112;
        _1275 = _1111;
        _1276 = _1123;
        _1277 = _1122;
        _1278 = _1121;
        _1279 = _1136;
        _1280 = _1135;
        _1281 = _1134;
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1283 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1284 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
    }
    else
    {
        _1270 = _958;
        _1271 = _958;
        _1272 = _958;
        _1273 = _958;
        _1274 = _958;
        _1275 = _958;
        _1276 = _958;
        _1277 = _958;
        _1278 = _958;
        _1279 = _958;
        _1280 = _958;
        _1281 = _958;
        _1282 = 0.0;
        _1283 = 0.0;
        _1284 = 0.0;
    }
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _970)) + _970;
    float _1295 = (cbModelParam._m0[1u].x * (_1283 - _971)) + _971;
    float _1296 = (cbModelParam._m0[1u].x * (_1284 - _972)) + _972;
    float _1317 = fma(_1296, cbSceneParam._m0[89u].z, fma(_1295, cbSceneParam._m0[89u].y, _1294 * cbSceneParam._m0[89u].x));
    float _1320 = fma(_1296, cbSceneParam._m0[90u].z, fma(_1295, cbSceneParam._m0[90u].y, _1294 * cbSceneParam._m0[90u].x));
    float _1323 = fma(_1296, cbSceneParam._m0[91u].z, fma(_1295, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1294));
    float _1338 = _565 * 0.5;
    float _1339 = _566 * 0.5;
    float _1340 = _567 * 0.5;
    float _1341 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1272, _1275, _1278, _1281));
    float _1344 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1271, _1274, _1277, _1280));
    float _1347 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1381;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1354 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_957, _961, _964, _967));
        float _1358 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_959, _962, _965, _968));
        float _1362 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_960, _963, _966, _969));
        float _1369 = dot(vec4(cbModelParam._m0[39u]), vec4(_1338, _1339, _1340, 1.0));
        _1381 = dot(vec3(isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1369) ? 0.0 : (isnan(0.0) ? _1369 : max(0.0, _1369))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1381 = 1.0;
    }
    float _1392;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1383 = dot(vec4(cbModelParam._m0[40u]), vec4(_1338, _1339, _1340, 1.0));
        _1392 = dot(vec3(isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1383) ? 0.0 : (isnan(0.0) ? _1383 : max(0.0, _1383))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1392 = 1.0;
    }
    float _1396 = (_1392 * cbModelParam._m0[1u].x) + (_1381 * (1.0 - cbModelParam._m0[1u].x));
    float _1406 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _393);
    float _1407 = isnan(_1406) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1406 : min(cbModelParam._m0[25u].z, _1406));
    float _1489;
    float _1491;
    float _1493;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1456 = fma(_626, cbModelParam._m0[13u].z, fma(_622, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _618)) + cbModelParam._m0[13u].w;
        float _1460 = fma(_626, cbModelParam._m0[14u].z, fma(_622, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _618)) + cbModelParam._m0[14u].w;
        float _1464 = fma(_626, cbModelParam._m0[15u].z, fma(_622, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _618)) + cbModelParam._m0[15u].w;
        float _1467 = fma(_567, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _565));
        float _1470 = fma(_567, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _565));
        float _1473 = fma(_567, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _565));
        float _1501;
        if (_1467 > 0.0)
        {
            _1501 = abs((1.0 - _1456) / _1467);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1456 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1501 = frontier_phi_19_17_ladder;
        }
        float _1726;
        if (_1470 > 0.0)
        {
            _1726 = abs((1.0 - _1460) / _1470);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1460 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1726 = frontier_phi_28_24_ladder;
        }
        float _1972;
        if (_1473 > 0.0)
        {
            _1972 = abs((1.0 - _1464) / _1473);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1464 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1972 = frontier_phi_40_35_ladder;
        }
        float _1974 = isnan(_1726) ? _1501 : (isnan(_1501) ? _1726 : min(_1501, _1726));
        float _1975 = isnan(_1972) ? _1974 : (isnan(_1974) ? _1972 : min(_1974, _1972));
        float _1979 = (_1975 * _1467) + _1456;
        float _1980 = (_1975 * _1470) + _1460;
        float _1981 = (_1975 * _1473) + _1464;
        float _1982 = _1975 * 9.9999997473787516355514526367188e-05;
        float _1984 = (-1.0) - _1982;
        float _1986 = _1982 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1981 > _1986) || ((_1981 < _1984) || ((_1980 > _1986) || ((_1980 < _1984) || ((_1979 < _1984) || (_1979 > _1986))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2105 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1981, cbModelParam._m0[9u].z, fma(_1980, cbModelParam._m0[9u].y, _1979 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1981, cbModelParam._m0[10u].z, fma(_1980, cbModelParam._m0[10u].y, _1979 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1981, cbModelParam._m0[11u].z, fma(_1980, cbModelParam._m0[11u].y, _1979 * cbModelParam._m0[11u].x))), _1407);
            frontier_phi_18_40_ladder = _2105.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2105.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2105.x * cbModelParam._m0[1u].y;
        }
        _1489 = frontier_phi_18_40_ladder_2;
        _1491 = frontier_phi_18_40_ladder_1;
        _1493 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1477 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_565, _566, _567), _1407);
        _1489 = _1477.x * cbModelParam._m0[1u].y;
        _1491 = _1477.y * cbModelParam._m0[1u].y;
        _1493 = _1477.z * cbModelParam._m0[1u].y;
    }
    float _1497 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _393);
    float _1498 = isnan(_1497) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1497 : min(cbModelParam._m0[25u].w, _1497));
    float _1591;
    float _1593;
    float _1595;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1555 = fma(_626, cbModelParam._m0[21u].z, fma(_622, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _618)) + cbModelParam._m0[21u].w;
        float _1559 = fma(_626, cbModelParam._m0[22u].z, fma(_622, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _618)) + cbModelParam._m0[22u].w;
        float _1563 = fma(_626, cbModelParam._m0[23u].z, fma(_622, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _618)) + cbModelParam._m0[23u].w;
        float _1566 = fma(_567, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _565));
        float _1569 = fma(_567, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _565));
        float _1572 = fma(_567, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _565));
        float _1731;
        if (_1566 > 0.0)
        {
            _1731 = abs((1.0 - _1555) / _1566);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1555 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1731 = frontier_phi_30_26_ladder;
        }
        float _1999;
        if (_1569 > 0.0)
        {
            _1999 = abs((1.0 - _1559) / _1569);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1559 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1999 = frontier_phi_42_37_ladder;
        }
        float _2204;
        if (_1572 > 0.0)
        {
            _2204 = abs((1.0 - _1563) / _1572);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1563 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2204 = frontier_phi_51_48_ladder;
        }
        float _2206 = isnan(_1999) ? _1731 : (isnan(_1731) ? _1999 : min(_1731, _1999));
        float _2207 = isnan(_2204) ? _2206 : (isnan(_2206) ? _2204 : min(_2206, _2204));
        float _2211 = (_2207 * _1566) + _1555;
        float _2212 = (_2207 * _1569) + _1559;
        float _2213 = (_2207 * _1572) + _1563;
        float _2214 = _2207 * 9.9999997473787516355514526367188e-05;
        float _2215 = (-1.0) - _2214;
        float _2217 = _2214 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2213 > _2217) || ((_2213 < _2215) || ((_2212 > _2217) || ((_2212 < _2215) || ((_2211 < _2215) || (_2211 > _2217))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2411 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2213, cbModelParam._m0[17u].z, fma(_2212, cbModelParam._m0[17u].y, _2211 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2213, cbModelParam._m0[18u].z, fma(_2212, cbModelParam._m0[18u].y, _2211 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2213, cbModelParam._m0[19u].z, fma(_2212, cbModelParam._m0[19u].y, _2211 * cbModelParam._m0[19u].x))), _1498);
            frontier_phi_27_51_ladder = _2411.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2411.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2411.x * cbModelParam._m0[1u].z;
        }
        _1591 = frontier_phi_27_51_ladder_2;
        _1593 = frontier_phi_27_51_ladder_1;
        _1595 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1575 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_565, _566, _567), _1498);
        _1591 = _1575.x * cbModelParam._m0[1u].z;
        _1593 = _1575.y * cbModelParam._m0[1u].z;
        _1595 = _1575.z * cbModelParam._m0[1u].z;
    }
    float _1607 = ((((1.0 - _586) * ((_573 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_586 * _573)) * _557;
    float _1608 = _1607 * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1609 = _1607 * ((cbModelParam._m0[1u].w * (_1593 - _1491)) + _1491);
    float _1610 = _1607 * ((cbModelParam._m0[1u].w * (_1595 - _1493)) + _1493);
    float _1613 = fma(_1610, cbSceneParam._m0[89u].z, fma(_1609, cbSceneParam._m0[89u].y, _1608 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1610, cbSceneParam._m0[90u].z, fma(_1609, cbSceneParam._m0[90u].y, _1608 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1610, cbSceneParam._m0[91u].z, fma(_1609, cbSceneParam._m0[91u].y, _1608 * cbSceneParam._m0[91u].x));
    vec4 _1627 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_491, _492));
    float _1629 = _1627.w;
    float _1641 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1629);
    float _1642 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1629);
    float _1643 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1629);
    uvec4 _1647 = floatBitsToUint(cbInstanceData._m0[_531 + 5u]);
    uint _1649 = _1647.x * 14u;
    uint _1650 = _1649 + 13u;
    float _1657 = _557 + (-1.0);
    float _1662 = (cbLight._m0[_1650].x * _1657) + 1.0;
    float _1663 = (cbLight._m0[_1650].y * _1657) + 1.0;
    float _1664 = (cbLight._m0[_1650].z * _1657) + 1.0;
    float _1665 = (cbLight._m0[_1650].w * _1657) + 1.0;
    uint _1666 = _1649 + 5u;
    float _1672 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
    uint _1676 = _1649 + 4u;
    float _1685 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
    uint _1689 = _1649 | 1u;
    float _1700 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_390, _391, _392));
    float _1703 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_390, _391, _392));
    float _3873 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _3884 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1708 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.3183098733425140380859375;
    float _1710 = (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * 0.3183098733425140380859375;
    float _1717 = ((cbLight._m0[_1666].x * _1672) * _1710) + (((cbLight._m0[_1676].x * _1641) * _1685) * _1708);
    float _1718 = ((_1672 * cbLight._m0[_1666].y) * _1710) + (((cbLight._m0[_1676].y * _1642) * _1685) * _1708);
    float _1719 = ((_1672 * cbLight._m0[_1666].z) * _1710) + (((cbLight._m0[_1676].z * _1643) * _1685) * _1708);
    uvec4 _1723 = floatBitsToUint(cbLight._m0[_1649 + 12u]);
    bool _1725 = _1723.x == 0u;
    float _1736;
    float _1738;
    float _1740;
    if (_1725)
    {
        _1736 = _1717;
        _1738 = _1718;
        _1740 = _1719;
    }
    else
    {
        uint _1744 = _1649 + 6u;
        float _1760 = (dot(vec3(cbLight._m0[_1649 + 2u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _1761 = _1760 * _1760;
        float _3895 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1763 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _1736 = (((cbLight._m0[_1744].x * 0.3183098733425140380859375) * _1762) * _1763) + _1717;
        _1738 = (((cbLight._m0[_1744].y * 0.3183098733425140380859375) * _1762) * _1763) + _1718;
        _1740 = (((cbLight._m0[_1744].z * 0.3183098733425140380859375) * _1762) * _1763) + _1719;
    }
    bool _1743 = _1723.y == 0u;
    float _1781;
    float _1783;
    float _1785;
    if (_1743)
    {
        _1781 = _1736;
        _1783 = _1738;
        _1785 = _1740;
    }
    else
    {
        uint _1943 = _1649 + 7u;
        float _1959 = (dot(vec3(cbLight._m0[_1649 + 3u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _1960 = _1959 * _1959;
        float _3911 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1961 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1962 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        _1781 = (((cbLight._m0[_1943].x * 0.3183098733425140380859375) * _1961) * _1962) + _1736;
        _1783 = (((cbLight._m0[_1943].y * 0.3183098733425140380859375) * _1961) * _1962) + _1738;
        _1785 = (((cbLight._m0[_1943].z * 0.3183098733425140380859375) * _1961) * _1962) + _1740;
    }
    uint _1788 = _1649 + 8u;
    float _1801 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1649].w)) * _393) * 0.949999988079071044921875);
    float _1802 = _1801 * _1801;
    float _1803 = cbLight._m0[_1649].x + _470;
    float _1804 = cbLight._m0[_1649].y + _471;
    float _1805 = cbLight._m0[_1649].z + _472;
    float _1809 = inversesqrt(dot(vec3(_1803, _1804, _1805), vec3(_1803, _1804, _1805)));
    float _1810 = _1809 * _1803;
    float _1811 = _1809 * _1804;
    float _1812 = _1809 * _1805;
    float _1813 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1649].xyz));
    float _3927 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1816 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _1817 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _1818 = dot(vec3(_390, _391, _392), vec3(_1810, _1811, _1812));
    float _3949 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _1822 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_1810, _1811, _1812));
    float _3960 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1826 = _1802 * _1802;
    float _1830 = ((_1821 * _1821) * (_1826 + (-1.0))) + 1.0;
    float _1841 = (exp2(log2(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1842 = 1.0 - _1802;
    float _1853 = (0.5 / (((_1817 * ((_1816 * _1842) + _1802)) + 9.9999999392252902907785028219223e-09) + (((_1817 * _1842) + _1802) * _1816))) * _1816;
    float _3971 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1855 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1826 / ((_1830 * _1830) * 3.141590118408203125));
    uint _1869 = _1649 + 9u;
    float _1880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1689].w)) * _393) * 0.949999988079071044921875);
    float _1881 = _1880 * _1880;
    float _1882 = cbLight._m0[_1689].x + _470;
    float _1883 = cbLight._m0[_1689].y + _471;
    float _1884 = cbLight._m0[_1689].z + _472;
    float _1888 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
    float _1889 = _1888 * _1882;
    float _1890 = _1888 * _1883;
    float _1891 = _1888 * _1884;
    float _1892 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1689].xyz));
    float _3982 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _1896 = dot(vec3(_390, _391, _392), vec3(_1889, _1890, _1891));
    float _3993 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1899 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _1900 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_1889, _1890, _1891));
    float _4004 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1904 = _1881 * _1881;
    float _1908 = ((_1899 * _1899) * (_1904 + (-1.0))) + 1.0;
    float _1917 = (exp2(log2(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1918 = 1.0 - _1881;
    float _1928 = (0.5 / (((_1817 * ((_1895 * _1918) + _1881)) + 9.9999999392252902907785028219223e-09) + (((_1817 * _1918) + _1881) * _1895))) * _1895;
    float _4015 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1930 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1904 / ((_1908 * _1908) * 3.141590118408203125));
    float _1940 = (((_1917 * cbLight._m0[_1869].x) * _1930) * _1672) + ((((cbLight._m0[_1788].x * _1641) * _1841) * _1855) * _1685);
    float _1941 = (((_1917 * cbLight._m0[_1869].y) * _1930) * _1672) + ((((cbLight._m0[_1788].y * _1642) * _1841) * _1855) * _1685);
    float _1942 = (((_1917 * cbLight._m0[_1869].z) * _1930) * _1672) + ((((cbLight._m0[_1788].z * _1643) * _1841) * _1855) * _1685);
    float _2004;
    float _2006;
    float _2008;
    if (_1725)
    {
        _2004 = _1940;
        _2006 = _1941;
        _2008 = _1942;
    }
    else
    {
        uint _2010 = _1649 + 2u;
        uint _2014 = _1649 + 10u;
        float _2028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _393) * 0.949999988079071044921875);
        float _2029 = _2028 * _2028;
        float _2030 = cbLight._m0[_2010].x + _470;
        float _2031 = cbLight._m0[_2010].y + _471;
        float _2032 = cbLight._m0[_2010].z + _472;
        float _2036 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
        float _2037 = _2036 * _2030;
        float _2038 = _2036 * _2031;
        float _2039 = _2036 * _2032;
        float _2040 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_2010].xyz));
        float _4026 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2043 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2044 = dot(vec3(_390, _391, _392), vec3(_2037, _2038, _2039));
        float _4037 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2047 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2048 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2037, _2038, _2039));
        float _4048 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2052 = _2029 * _2029;
        float _2056 = ((_2047 * _2047) * (_2052 + (-1.0))) + 1.0;
        float _2065 = (exp2(log2(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2066 = 1.0 - _2029;
        float _2076 = (0.5 / (((_1817 * ((_2043 * _2066) + _2029)) + 9.9999999392252902907785028219223e-09) + (((_1817 * _2066) + _2029) * _2043))) * _2043;
        float _4059 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2078 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_2052 / ((_2056 * _2056) * 3.141590118408203125));
        float _2079 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _2004 = (((_2065 * cbLight._m0[_2014].x) * _2078) * _2079) + _1940;
        _2006 = (((_2065 * cbLight._m0[_2014].y) * _2078) * _2079) + _1941;
        _2008 = (((_2065 * cbLight._m0[_2014].z) * _2078) * _2079) + _1942;
    }
    float _2114;
    float _2116;
    float _2118;
    if (_1743)
    {
        _2114 = _2004;
        _2116 = _2006;
        _2118 = _2008;
    }
    else
    {
        uint _2125 = _1649 + 3u;
        uint _2129 = _1649 + 11u;
        float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _393) * 0.949999988079071044921875);
        float _2144 = _2143 * _2143;
        float _2145 = cbLight._m0[_2125].x + _470;
        float _2146 = cbLight._m0[_2125].y + _471;
        float _2147 = cbLight._m0[_2125].z + _472;
        float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
        float _2152 = _2151 * _2145;
        float _2153 = _2151 * _2146;
        float _2154 = _2151 * _2147;
        float _2155 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_2125].xyz));
        float _4075 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2159 = dot(vec3(_390, _391, _392), vec3(_2152, _2153, _2154));
        float _4086 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2163 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2152, _2153, _2154));
        float _4097 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2167 = _2144 * _2144;
        float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
        float _2180 = (exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2181 = 1.0 - _2144;
        float _2191 = (0.5 / (((_1817 * ((_2158 * _2181) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_1817 * _2181) + _2144) * _2158))) * _2158;
        float _4108 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2193 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
        float _2194 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        _2114 = (((_2180 * cbLight._m0[_2129].x) * _2193) * _2194) + _2004;
        _2116 = (((_2180 * cbLight._m0[_2129].y) * _2193) * _2194) + _2006;
        _2118 = (((_2180 * cbLight._m0[_2129].z) * _2193) * _2194) + _2008;
    }
    float _2328;
    float _2330;
    float _2332;
    float _2334;
    float _2336;
    float _2338;
    if (_1647.y == 0u)
    {
        float _2269 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2270 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2269;
        float _2271 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2269;
        float _2272 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2269;
        uvec4 _2284 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2285 = _2284.x;
        uint _2296 = uint((float(_2284.y) * floor(float(uint(cbSceneParam._m0[85u].y * _492) / _2285))) + floor(float(uint(cbSceneParam._m0[85u].x * _491) / _2285)));
        float _2306 = (log2(_2272 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2307 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        uint _2310 = uint(isnan(14.0) ? _2307 : (isnan(_2307) ? 14.0 : min(_2307, 14.0)));
        uvec4 _2315 = texelFetch(g_lightClusterGridBuffer, int(((_2310 << 2u) + (_2296 << 6u)) >> 2u));
        uint _2316 = _2315.x;
        uint _2317 = _2284.z;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        if (((((1u << ((_2317 >> 4u) & 15u)) + 4294967295u) & _2316) == 0u) || ((_2317 & 240u) == 0u))
        {
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
        }
        else
        {
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2425;
            float _2427;
            float _2568 = 0.0;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            uint _2574 = 0u;
            uint _2583;
            bool _2584;
            for (;;)
            {
                _2583 = texelFetch(g_lightClassification, int((((_2310 << 5u) + (_2296 << 9u)) + (_2574 << 2u)) >> 2u)).x;
                _2584 = _2583 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2584)
                {
                    frontier_phi_68_pred = _2570;
                    frontier_phi_68_pred_1 = _2573;
                    frontier_phi_68_pred_2 = _2572;
                    frontier_phi_68_pred_3 = _2571;
                    frontier_phi_68_pred_4 = _2569;
                    frontier_phi_68_pred_5 = _2568;
                }
                else
                {
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    uint _2719;
                    _2713 = _2568;
                    _2714 = _2569;
                    _2715 = _2570;
                    _2716 = _2571;
                    _2717 = _2572;
                    _2718 = _2573;
                    _2719 = _2583;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    for (;;)
                    {
                        uint _2723 = uint(findLSB(_2719)) + (_2574 << 5u);
                        uint _2720 = (_2719 + 4294967295u) & _2719;
                        uint _2725 = _2723 * 48u;
                        vec4 _2739 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 3u)).x));
                        uint _2745 = (_2723 * 48u) + 4u;
                        vec4 _2758 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 3u)).x));
                        uint _2764 = (_2723 * 48u) + 8u;
                        vec3 _2775 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x));
                        float _2779 = _2739.x - _2270;
                        float _2780 = _2739.y - _2271;
                        float _2781 = _2739.z - _2272;
                        float _2782 = dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781));
                        float _2785 = inversesqrt(_2782);
                        float _2786 = _2785 * _2779;
                        float _2787 = _2785 * _2780;
                        float _2788 = _2785 * _2781;
                        float _2789 = dot(vec3(_512, _515, _518), vec3(_2786, _2787, _2788));
                        float _2794 = 1.0 - (_2782 * _2739.w);
                        float _4134 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2795 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2796 = sqrt(_2782) * _2758.w;
                        float _2799 = 1.39999997615814208984375 / (_2796 + 1.39999997615814208984375);
                        float _2800 = _2799 * _2799;
                        float _2803 = ((1.0 - _2800) * _2789) + _2800;
                        float _2806 = _2796 * _2796;
                        float _2810 = ((isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0))) * _2795) / ((_2806 * 0.699999988079071044921875) + 1.0);
                        float _2814 = (-0.0) - _2270;
                        float _2815 = (-0.0) - _2271;
                        float _2816 = (-0.0) - _2272;
                        float _2820 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
                        float _2821 = _2820 * _2814;
                        float _2822 = _2820 * _2815;
                        float _2823 = _2820 * _2816;
                        float _2831 = exp2(log2(1.0 / ((_2806 * 3.5) + 5.0)) * 0.25);
                        float _2832 = 1.0 - _573;
                        float _2839 = sqrt(1.0 - ((1.0 - (_2832 * _2832)) * (1.0 - (_2831 * _2831))));
                        float _2840 = _2839 * _2839;
                        float _2841 = _2840 * _2840;
                        float _2842 = _2821 + _2786;
                        float _2843 = _2822 + _2787;
                        float _2844 = _2823 + _2788;
                        float _2848 = inversesqrt(dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844)));
                        float _2852 = dot(vec3(_512, _515, _518), vec3(_2821, _2822, _2823));
                        float _4150 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2855 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                        float _2856 = dot(vec3(_512, _515, _518), vec3(_2848 * _2842, _2848 * _2843, _2848 * _2844));
                        float _4161 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2859 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                        float _2863 = ((_2859 * _2859) * (_2841 + (-1.0))) + 1.0;
                        float _2864 = _2799 * _2840;
                        float _2865 = _2864 * _2864;
                        float _2868 = ((1.0 - _2865) * _2789) + _2865;
                        float _4172 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2869 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                        float _2870 = 1.0 - _2840;
                        float _2880 = (0.5 / (((_2869 * ((_2855 * _2870) + _2840)) + 9.9999999392252902907785028219223e-09) + (((_2869 * _2870) + _2840) * _2855))) * _2869;
                        float _4183 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2891 = (((_2841 * 3.1415927410125732421875) * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) / ((_2863 * _2863) * ((_2806 * 2.1991131305694580078125) + 3.141590118408203125))) * _2795;
                        _2643 = (_2810 * _2758.x) + _2716;
                        _2644 = (_2810 * _2758.y) + _2717;
                        _2645 = (_2810 * _2758.z) + _2718;
                        _2640 = (_2891 * _2775.x) + _2713;
                        _2641 = (_2891 * _2775.y) + _2714;
                        _2642 = (_2891 * _2775.z) + _2715;
                        if (_2720 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2713 = _2640;
                            _2714 = _2641;
                            _2715 = _2642;
                            _2716 = _2643;
                            _2717 = _2644;
                            _2718 = _2645;
                            _2719 = _2720;
                        }
                    }
                    frontier_phi_68_pred = _2642;
                    frontier_phi_68_pred_1 = _2645;
                    frontier_phi_68_pred_2 = _2644;
                    frontier_phi_68_pred_3 = _2643;
                    frontier_phi_68_pred_4 = _2641;
                    frontier_phi_68_pred_5 = _2640;
                }
                _2421 = frontier_phi_68_pred;
                _2427 = frontier_phi_68_pred_1;
                _2425 = frontier_phi_68_pred_2;
                _2423 = frontier_phi_68_pred_3;
                _2419 = frontier_phi_68_pred_4;
                _2417 = frontier_phi_68_pred_5;
                uint _2575 = _2574 + 1u;
                if (_2575 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2568 = _2417;
                    _2569 = _2419;
                    _2570 = _2421;
                    _2571 = _2423;
                    _2572 = _2425;
                    _2573 = _2427;
                    _2574 = _2575;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
        }
        uvec4 _2430 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2431 = _2430.z;
        uint _2433 = (_2431 >> 8u) & 15u;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        if (((4294967295u << _2433) & _2316) == 0u)
        {
            _2536 = _2416;
            _2538 = _2418;
            _2540 = _2420;
            _2542 = _2422;
            _2544 = _2424;
            _2546 = _2426;
        }
        else
        {
            float _2561 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
            float _2562 = _2561 * _2270;
            float _2563 = _2561 * _2271;
            float _2564 = _2561 * _2272;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2433 < ((_2431 >> 12u) & 15u))
            {
                float _2537;
                float _2539;
                float _2541;
                float _2543;
                float _2545;
                float _2547;
                float _2696 = _2416;
                float _2697 = _2418;
                float _2698 = _2420;
                float _2699 = _2422;
                float _2700 = _2424;
                float _2701 = _2426;
                uint _2702 = _2433;
                uint _2711;
                bool _2712;
                for (;;)
                {
                    _2711 = texelFetch(g_lightClassification, int((((_2310 << 5u) + (_2296 << 9u)) + (_2702 << 2u)) >> 2u)).x;
                    _2712 = _2711 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2712)
                    {
                        frontier_phi_79_pred = _2701;
                        frontier_phi_79_pred_1 = _2700;
                        frontier_phi_79_pred_2 = _2699;
                        frontier_phi_79_pred_3 = _2698;
                        frontier_phi_79_pred_4 = _2697;
                        frontier_phi_79_pred_5 = _2696;
                    }
                    else
                    {
                        float _2905;
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _2918 = _2696;
                        float _2919 = _2697;
                        float _2920 = _2698;
                        float _2921 = _2699;
                        float _2922 = _2700;
                        float _2923 = _2701;
                        uint _2924 = _2711;
                        uint _2925;
                        vec4 _2950;
                        float _2951;
                        vec4 _2966;
                        vec3 _2978;
                        vec4 _2994;
                        vec4 _3010;
                        float _3057;
                        bool _3058;
                        for (;;)
                        {
                            uint _2935 = ((_2702 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2924));
                            _2925 = (_2924 + 4294967295u) & _2924;
                            uint _2937 = _2935 * 40u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            _2951 = _2950.w;
                            uint _2953 = (_2935 * 40u) + 4u;
                            _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2968 = (_2935 * 40u) + 8u;
                            _2978 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x));
                            uint _2981 = (_2935 * 40u) + 16u;
                            _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            uint _2997 = (_2935 * 40u) + 20u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            uint _3013 = (_2935 * 40u) + 24u;
                            vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3032 = (_2935 * 40u) + 28u;
                            vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            _3057 = fma(_2272, _3045.z, fma(_2271, _3045.y, _3045.x * _2270)) + _3045.w;
                            _3058 = !((fma(_2272, _3026.z, fma(_2271, _3026.y, _3026.x * _2270)) + _3026.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3058)
                            {
                                float _3085 = _2950.x - _2270;
                                float _3086 = _2950.y - _2271;
                                float _3087 = _2950.z - _2272;
                                float _3088 = dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087));
                                float _3091 = inversesqrt(_3088);
                                float _3092 = _3091 * _3085;
                                float _3093 = _3091 * _3086;
                                float _3094 = _3091 * _3087;
                                float _3098 = 1.0 - (_3088 / (_2951 * _2951));
                                float _4194 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3103 = sqrt(_3088) * _2966.w;
                                float _3105 = 1.39999997615814208984375 / (_3103 + 1.39999997615814208984375);
                                float _3106 = _3105 * _3105;
                                float _3109 = ((1.0 - _3106) * dot(vec3(_3092, _3093, _3094), vec3(_512, _515, _518))) + _3106;
                                float _3112 = _3103 * _3103;
                                float _3116 = (fma(_2272, _2994.z, fma(_2271, _2994.y, _2994.x * _2270)) + _2994.w) / _3057;
                                float _3117 = (fma(_2272, _3010.z, fma(_2271, _3010.y, _3010.x * _2270)) + _3010.w) / _3057;
                                float _3121 = 1.0 - dot(vec2(_3116, _3117), vec2(_3116, _3117));
                                float _4210 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3122 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3123 = _3122 * (((isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))) * _3099) / ((_3112 * 0.699999988079071044921875) + 1.0));
                                float _3135 = exp2(log2(1.0 / ((_3112 * 3.5) + 5.0)) * 0.25);
                                float _3136 = 1.0 - _573;
                                float _3143 = sqrt(1.0 - ((1.0 - (_3136 * _3136)) * (1.0 - (_3135 * _3135))));
                                float _3144 = _3143 * _3143;
                                float _3145 = _3144 * _3144;
                                float _3146 = _3092 - _2562;
                                float _3147 = _3093 - _2563;
                                float _3148 = _3094 - _2564;
                                float _3152 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
                                float _3156 = dot(vec3(_512, _515, _518), vec3((-0.0) - _2562, (-0.0) - _2563, (-0.0) - _2564));
                                float _4221 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3159 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                                float _3160 = dot(vec3(_512, _515, _518), vec3(_3152 * _3146, _3152 * _3147, _3152 * _3148));
                                float _4232 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3163 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3167 = ((_3163 * _3163) * (_3145 + (-1.0))) + 1.0;
                                float _3168 = _3105 * _3144;
                                float _3169 = _3168 * _3168;
                                float _3175 = ((1.0 - _3169) * dot(vec3(_512, _515, _518), vec3(_3092, _3093, _3094))) + _3169;
                                float _4243 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3177 = 1.0 - _3144;
                                float _3187 = (0.5 / (((_3176 * ((_3159 * _3177) + _3144)) + 9.9999999392252902907785028219223e-09) + (((_3176 * _3177) + _3144) * _3159))) * _3176;
                                float _4254 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3197 = (_3122 * _3099) * (((_3145 * 3.1415927410125732421875) * (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) / ((_3167 * _3167) * ((_3112 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3123 * _2966.z;
                                frontier_phi_85_pred_1 = _3123 * _2966.y;
                                frontier_phi_85_pred_2 = _3123 * _2966.x;
                                frontier_phi_85_pred_3 = _3197 * _2978.z;
                                frontier_phi_85_pred_4 = _3197 * _2978.y;
                                frontier_phi_85_pred_5 = _3197 * _2978.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3206 = frontier_phi_85_pred;
                            _3205 = frontier_phi_85_pred_1;
                            _3204 = frontier_phi_85_pred_2;
                            _3203 = frontier_phi_85_pred_3;
                            _3202 = frontier_phi_85_pred_4;
                            _3201 = frontier_phi_85_pred_5;
                            _2908 = _3204 + _2921;
                            _2909 = _3205 + _2922;
                            _2910 = _3206 + _2923;
                            _2905 = _3201 + _2918;
                            _2906 = _3202 + _2919;
                            _2907 = _3203 + _2920;
                            if (_2925 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2925;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2910;
                        frontier_phi_79_pred_1 = _2909;
                        frontier_phi_79_pred_2 = _2908;
                        frontier_phi_79_pred_3 = _2907;
                        frontier_phi_79_pred_4 = _2906;
                        frontier_phi_79_pred_5 = _2905;
                    }
                    _2547 = frontier_phi_79_pred;
                    _2545 = frontier_phi_79_pred_1;
                    _2543 = frontier_phi_79_pred_2;
                    _2541 = frontier_phi_79_pred_3;
                    _2539 = frontier_phi_79_pred_4;
                    _2537 = frontier_phi_79_pred_5;
                    uint _2703 = _2702 + 1u;
                    if (_2703 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2696 = _2537;
                        _2697 = _2539;
                        _2698 = _2541;
                        _2699 = _2543;
                        _2700 = _2545;
                        _2701 = _2547;
                        _2702 = _2703;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2543;
                frontier_phi_60_61_ladder_1 = _2547;
                frontier_phi_60_61_ladder_2 = _2545;
                frontier_phi_60_61_ladder_3 = _2541;
                frontier_phi_60_61_ladder_4 = _2539;
                frontier_phi_60_61_ladder_5 = _2537;
            }
            else
            {
                frontier_phi_60_61_ladder = _2422;
                frontier_phi_60_61_ladder_1 = _2426;
                frontier_phi_60_61_ladder_2 = _2424;
                frontier_phi_60_61_ladder_3 = _2420;
                frontier_phi_60_61_ladder_4 = _2418;
                frontier_phi_60_61_ladder_5 = _2416;
            }
            _2536 = frontier_phi_60_61_ladder_5;
            _2538 = frontier_phi_60_61_ladder_4;
            _2540 = frontier_phi_60_61_ladder_3;
            _2542 = frontier_phi_60_61_ladder;
            _2544 = frontier_phi_60_61_ladder_2;
            _2546 = frontier_phi_60_61_ladder_1;
        }
        float _2551 = isnan(1.0) ? _557 : (isnan(_557) ? 1.0 : min(_557, 1.0));
        _2328 = (_2551 * _2542) + _1781;
        _2330 = (_2551 * _2544) + _1783;
        _2332 = (_2551 * _2546) + _1785;
        _2334 = ((_2536 * 0.039999999105930328369140625) * _2551) + _2114;
        _2336 = ((_2538 * 0.039999999105930328369140625) * _2551) + _2116;
        _2338 = ((_2540 * 0.039999999105930328369140625) * _2551) + _2118;
    }
    else
    {
        _2328 = _1781;
        _2330 = _1783;
        _2332 = _1785;
        _2334 = _2114;
        _2336 = _2116;
        _2338 = _2118;
    }
    float _4270 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4281 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4292 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _2355 = ((isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2328 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _557))) + ((_2334 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1396)) * cbPerFrame._m0[3u].x);
    float _2356 = ((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2330 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _557))) + ((_2336 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1396)) * cbPerFrame._m0[3u].x);
    float _2357 = ((isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2332 + ((isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))) * _557))) + ((_2338 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1396)) * cbPerFrame._m0[3u].x);
    uint _2358 = _531 + 6u;
    float _2366 = _491 / cbSceneParam._m0[86u].x;
    float _2367 = _492 / cbSceneParam._m0[86u].y;
    vec4 _2381 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2366, _2367, (log2((isnan(cbSceneParam._m0[77u].w) ? _412 : (isnan(_412) ? cbSceneParam._m0[77u].w : min(_412, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2383 = _2381.x;
    float _2384 = _2381.y;
    float _2385 = _2381.z;
    float _2386 = _2381.w;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    if (_412 > cbSceneParam._m0[78u].w)
    {
        float _2441 = isnan(_412) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _412 : min(cbSceneParam._m0[80u].w, _412));
        float _2442 = _2441 / _412;
        float _2453 = _2442 * _463;
        float _2454 = _464 * _2442;
        float _2455 = (-0.0) - _2454;
        float _2456 = _2442 * _465;
        float _2458 = (cbSceneParam._m0[77u].w * _2455) / _2441;
        float _2459 = _2458 + cbSceneParam._m0[79u].w;
        float _2460 = cbSceneParam._m0[79u].w - _2454;
        float _2466 = sqrt(((_2453 * _2453) + (_2454 * _2454)) + (_2456 * _2456));
        float _2469 = (1.0 - (cbSceneParam._m0[77u].w / _2441)) * _2466;
        float _2474 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2476 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2653;
        if (abs((_2455 - _2458) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2653 = ((((_2459 > 0.0) ? exp2(_2474 * _2459) : (2.0 - exp2(_2476 * _2459))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2469;
        }
        else
        {
            float _2597 = 1.0 / cbSceneParam._m0[80u].x;
            float _2598 = isnan(_2460) ? _2459 : (isnan(_2459) ? _2460 : max(_2459, _2460));
            float _2599 = isnan(_2460) ? _2459 : (isnan(_2459) ? _2460 : min(_2459, _2460));
            float _2608 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : min(_2598, 0.0));
            float _2609 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : min(_2599, 0.0));
            _2653 = ((abs(_2466 / _2455) * cbSceneParam._m0[80u].y) * ((((_2608 - _2609) * 2.0) - ((exp2(_2474 * (isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0)))) - exp2(_2474 * (isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0))))) * _2597)) - ((exp2(_2476 * _2608) - exp2(_2476 * _2609)) * _2597))) + (_2469 * cbSceneParam._m0[80u].z);
        }
        vec4 _2655 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2366, _2367, 1.0), 0.0);
        float _2664 = exp2((_2653 * (-1.44269502162933349609375)) * (1.0 - _2655.w));
        float _2665 = log2(_2664);
        float _2681 = log2(_2386);
        _2478 = (exp2(_2681 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2665 * cbSceneParam._m0[78u].x)) * _2655.x) / cbSceneParam._m0[78u].x)) + _2383;
        _2480 = (exp2(_2681 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2665 * cbSceneParam._m0[78u].y)) * _2655.y) / cbSceneParam._m0[78u].y)) + _2384;
        _2482 = (exp2(_2681 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2665 * cbSceneParam._m0[78u].z)) * _2655.z) / cbSceneParam._m0[78u].z)) + _2385;
        _2484 = _2664 * _2386;
    }
    else
    {
        _2478 = _2383;
        _2480 = _2384;
        _2482 = _2385;
        _2484 = _2386;
    }
    bool _2691;
    vec4 _2494;
    vec4 _2516;
    float _2518;
    float _2522;
    float _2523;
    float _2524;
    float _2525;
    bool _2535;
    for (;;)
    {
        _2494 = cbMatDynParam._m0[0u];
        float _2496 = roundEven(_2494.y);
        bool _2497 = _2496 == 3.0;
        float _2498 = log2(_2484);
        float _2505 = exp2(_2498 * cbSceneParam._m0[78u].x) * _2355;
        float _2506 = exp2(_2498 * cbSceneParam._m0[78u].y) * _2356;
        float _2507 = exp2(_2498 * cbSceneParam._m0[78u].z) * _2357;
        float _2514 = _479 + (-0.5);
        _2516 = cbMtdParam._m0[1u];
        _2518 = _2516.y * _2514;
        float _2521 = (_2496 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2522 = _2521 * (_2497 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2478)));
        _2523 = _2521 * (_2497 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2480)));
        _2524 = _2521 * (_2497 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2482)));
        _2525 = _2514 * 0.999000012874603271484375;
        _2535 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2535)
        {
            if ((cbInstanceData._m0[_531 + 7u].x + _2525) < 0.5)
            {
                _2691 = true;
                break;
            }
        }
        uint _2632 = _533 + uint(_2494.w);
        if ((cbInstanceData._m0[_2632].w < 1.0) && ((cbInstanceData._m0[_2632].w + _2525) < 0.5))
        {
            _2691 = true;
            break;
        }
        if ((_2518 + 1.0) < _2516.x)
        {
            _2691 = true;
            break;
        }
        _2691 = false;
        break;
    }
    float _2896;
    if (_2691)
    {
        discard_state = true;
        _2896 = 0.0;
    }
    else
    {
        _2896 = cbInstanceData._m0[_2358].w;
    }
    SV_Target.x = _2522;
    SV_Target.y = _2523;
    SV_Target.z = _2524;
    SV_Target.w = _2896;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2358].w;
    discard_exit();
}


