#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _995;
float _3408;
float _3409;
float _3410;
float _3411;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _241 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3420 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))));
    float _290 = fma(_287, _219, fma(_280, _212, _278 * _198));
    float _293 = fma(_287, _220, fma(_280, _213, _278 * _199));
    float _296 = fma(_287, _221, fma(_280, _214, _278 * _200));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _308 = cbMtdParam._m0[10u].x + dot(vec4(_300 * _290, _300 * _293, _300 * _296, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3431 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _309 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    vec4 _321 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _332 = ((_321.x - _247) * _309) + _247;
    float _333 = ((_321.y - _248) * _309) + _248;
    float _334 = ((_321.z - _249) * _309) + _249;
    vec4 _346 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _348 = _346.x;
    float _350 = _348 - (_348 * _309);
    vec4 _363 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _370 = (_363.x * 2.0) + (-1.0);
    float _371 = (_363.y * 2.0) + (-1.0);
    float _372 = dot(vec2(_370, _371), vec2(_370, _371));
    float _3442 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _380 = ((_363.z - _274) * _309) + _274;
    float _389 = ((sqrt(1.0 - (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0)))) - _287) * _309) + _287;
    float _393 = (((_370 - _278) * _309) + _278) + (cbMtdParam._m0[10u].y * _278);
    float _394 = (((_371 - _280) * _309) + _280) + (cbMtdParam._m0[10u].y * _280);
    float _397 = fma(_389, _219, fma(_394, _212, _393 * _198));
    float _400 = fma(_389, _220, fma(_394, _213, _393 * _199));
    float _403 = fma(_389, _221, fma(_394, _214, _393 * _200));
    float _407 = inversesqrt(dot(vec3(_397, _400, _403), vec3(_397, _400, _403)));
    float _408 = _407 * _397;
    float _409 = _407 * _400;
    float _410 = _407 * _403;
    float _3453 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _411 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _3464 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3475 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3486 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3497 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _415 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _431 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _472 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _482 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _472);
    float _483 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _472);
    float _484 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _472);
    float _488 = inversesqrt(dot(vec3(_482, _483, _484), vec3(_482, _483, _484)));
    float _489 = _482 * _488;
    float _490 = _483 * _488;
    float _491 = _484 * _488;
    vec4 _496 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _498 = _496.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _674 = sqrt(((_482 * _482) + (_483 * _483)) + (_484 * _484));
        float _680 = (cbMatDynParam._m0[5u].x * _674) + cbMatDynParam._m0[5u].y;
        float _3508 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _681 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _685 = (cbMatDynParam._m0[5u].z * _674) + cbMatDynParam._m0[5u].w;
        float _3519 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) - _681)) + _681) < ((_498 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _510 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _511 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _531 = fma(_410, cbSceneParam._m0[5u].z, fma(_409, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _408));
    float _534 = fma(_410, cbSceneParam._m0[6u].z, fma(_409, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _408));
    float _537 = fma(_410, cbSceneParam._m0[7u].z, fma(_409, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _408));
    uint _550 = uint(roundEven(NORMAL.w)) * 13u;
    uint _552 = _550 + 9u;
    uint _553 = _552 + uint(cbMatDynParam._m0[0u].w);
    float _559 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * cbInstanceData._m0[_553].x;
    float _560 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * cbInstanceData._m0[_553].y;
    float _561 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * cbInstanceData._m0[_553].z;
    float _3530 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _565 = 1.0 - _415;
    float _566 = _562 * _565;
    float _567 = _563 * _565;
    float _568 = _564 * _565;
    float _573 = (_562 + (-0.039999999105930328369140625)) * _415;
    float _574 = (_563 + (-0.039999999105930328369140625)) * _415;
    float _575 = (_564 + (-0.039999999105930328369140625)) * _415;
    float _576 = _573 + 0.039999999105930328369140625;
    float _578 = _574 + 0.039999999105930328369140625;
    float _579 = _575 + 0.039999999105930328369140625;
    vec4 _588 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _510, cbSceneParam._m0[86u].y * _511));
    float _591 = _588.x * TEXCOORD.z;
    float _592 = dot(vec3(_408, _409, _410), vec3(_489, _490, _491));
    float _595 = _592 * 2.0;
    float _599 = (_595 * _408) - _489;
    float _600 = (_595 * _409) - _490;
    float _601 = (_595 * _410) - _491;
    float _605 = abs(dot(vec3(_489, _490, _491), vec3(_408, _409, _410)));
    float _3563 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _607 = sqrt(_411);
    float _620 = exp2((_607 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_607 * 3.0));
    float _626 = (1.0 - _620) * ((_607 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _627 = _620 * _607;
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _994;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _719 = fma(_663, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _655));
        float _723 = fma(_663, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _655));
        float _727 = fma(_663, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _655));
        float _752 = _655 + _408;
        float _753 = _659 + _409;
        float _754 = _663 + _410;
        float _764 = fma(_754, cbModelParam._m0[26u].z, fma(_753, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _752)) - _719;
        float _765 = fma(_754, cbModelParam._m0[27u].z, fma(_753, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _752)) - _723;
        float _766 = fma(_754, cbModelParam._m0[28u].z, fma(_753, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _752)) - _727;
        float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
        float _783 = ((_770 * _764) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_719 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _784 = ((_770 * _765) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_723 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _785 = ((_770 * _766) / cbModelParam._m0[34u].z) + ((((((_727 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        float _822 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_788.x + (-0.5));
        float _824 = _822 * (_788.y + (-0.5));
        float _825 = _822 * (_788.z + (-0.5));
        float _832 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_795.x + (-0.5));
        float _834 = _832 * (_795.y + (-0.5));
        float _835 = _832 * (_795.z + (-0.5));
        float _842 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_802.x + (-0.5));
        float _844 = _842 * (_802.y + (-0.5));
        float _845 = _842 * (_802.z + (-0.5));
        float _852 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_809.x + (-0.5));
        float _854 = _852 * (_809.y + (-0.5));
        float _855 = _852 * (_809.z + (-0.5));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = _823 * 0.5;
        float _860 = _833 * 0.5;
        float _861 = _843 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _876 = (dot(vec3(_408, _409, _410), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _886 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3611 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_888 + 1.0))) + _893) * _856;
        float _903 = _824 * 0.5;
        float _904 = _834 * 0.5;
        float _905 = _844 * 0.5;
        float _906 = dot(vec3(_903, _904, _905), vec3(_903, _904, _905));
        float _911 = (_906 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_906);
        float _919 = (dot(vec3(_408, _409, _410), vec3(_911 * _903, _911 * _904, _911 * _905)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _928 = sqrt(((_904 * _904) + (_903 * _903)) + (_905 * _905)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _930 = _929 * 2.0;
        float _934 = (1.0 - _929) / (_929 + 1.0);
        float _3644 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _944 = ((((1.0 - _935) * (_930 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_930 + 1.0))) + _935) * _857;
        float _945 = _825 * 0.5;
        float _946 = _835 * 0.5;
        float _947 = _845 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _961 = (dot(vec3(_408, _409, _410), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _970 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3677 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_972 + 1.0))) + _977) * _858;
        _994 = _825;
        _996 = _824;
        _997 = _823;
        _998 = _835;
        _999 = _834;
        _1000 = _833;
        _1001 = _845;
        _1002 = _844;
        _1003 = _843;
        _1004 = _858;
        _1005 = _857;
        _1006 = _856;
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)));
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
    }
    else
    {
        _994 = _995;
        _996 = _995;
        _997 = _995;
        _998 = _995;
        _999 = _995;
        _1000 = _995;
        _1001 = _995;
        _1002 = _995;
        _1003 = _995;
        _1004 = _995;
        _1005 = _995;
        _1006 = _995;
        _1007 = 0.0;
        _1008 = 0.0;
        _1009 = 0.0;
    }
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1038 = fma(_663, cbModelParam._m0[30u].z, fma(_659, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _655));
        float _1042 = fma(_663, cbModelParam._m0[31u].z, fma(_659, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _655));
        float _1046 = fma(_663, cbModelParam._m0[32u].z, fma(_659, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _655));
        float _1069 = _655 + _408;
        float _1070 = _659 + _409;
        float _1071 = _663 + _410;
        float _1081 = fma(_1071, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069)) - _1038;
        float _1082 = fma(_1071, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069)) - _1042;
        float _1083 = fma(_1071, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069)) - _1046;
        float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
        float _1100 = ((_1087 * _1081) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1038 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1087 * _1082) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1042 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1087 * _1083) / cbModelParam._m0[35u].z) + ((((((_1046 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        float _1137 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1104.x + (-0.5));
        float _1139 = _1137 * (_1104.y + (-0.5));
        float _1140 = _1137 * (_1104.z + (-0.5));
        float _1147 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1111.x + (-0.5));
        float _1149 = _1147 * (_1111.y + (-0.5));
        float _1150 = _1147 * (_1111.z + (-0.5));
        float _1157 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1118.x + (-0.5));
        float _1159 = _1157 * (_1118.y + (-0.5));
        float _1160 = _1157 * (_1118.z + (-0.5));
        float _1167 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1125.x + (-0.5));
        float _1169 = _1167 * (_1125.y + (-0.5));
        float _1170 = _1167 * (_1125.z + (-0.5));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = _1138 * 0.5;
        float _1175 = _1148 * 0.5;
        float _1176 = _1158 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_408, _409, _410), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3740 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1201 + 1.0))) + _1206) * _1171;
        float _1216 = _1139 * 0.5;
        float _1217 = _1149 * 0.5;
        float _1218 = _1159 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_408, _409, _410), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3773 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1243 + 1.0))) + _1248) * _1172;
        float _1258 = _1140 * 0.5;
        float _1259 = _1150 * 0.5;
        float _1260 = _1160 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_408, _409, _410), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3806 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1285 + 1.0))) + _1290) * _1173;
        _1307 = _1140;
        _1308 = _1139;
        _1309 = _1138;
        _1310 = _1150;
        _1311 = _1149;
        _1312 = _1148;
        _1313 = _1160;
        _1314 = _1159;
        _1315 = _1158;
        _1316 = _1173;
        _1317 = _1172;
        _1318 = _1171;
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _995;
        _1308 = _995;
        _1309 = _995;
        _1310 = _995;
        _1311 = _995;
        _1312 = _995;
        _1313 = _995;
        _1314 = _995;
        _1315 = _995;
        _1316 = _995;
        _1317 = _995;
        _1318 = _995;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1007)) + _1007;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1008)) + _1008;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1009)) + _1009;
    float _1354 = fma(_1333, cbSceneParam._m0[89u].z, fma(_1332, cbSceneParam._m0[89u].y, _1331 * cbSceneParam._m0[89u].x));
    float _1357 = fma(_1333, cbSceneParam._m0[90u].z, fma(_1332, cbSceneParam._m0[90u].y, _1331 * cbSceneParam._m0[90u].x));
    float _1360 = fma(_1333, cbSceneParam._m0[91u].z, fma(_1332, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1331));
    float _1375 = _599 * 0.5;
    float _1376 = _600 * 0.5;
    float _1377 = _601 * 0.5;
    float _1378 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1381 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1384 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1418;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1391 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_994, _998, _1001, _1004));
        float _1395 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_996, _999, _1002, _1005));
        float _1399 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_997, _1000, _1003, _1006));
        float _1406 = dot(vec4(cbModelParam._m0[39u]), vec4(_1375, _1376, _1377, 1.0));
        _1418 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1418 = 1.0;
    }
    float _1429;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1420 = dot(vec4(cbModelParam._m0[40u]), vec4(_1375, _1376, _1377, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1420) ? 0.0 : (isnan(0.0) ? _1420 : max(0.0, _1420))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1433 = (_1429 * cbModelParam._m0[1u].x) + (_1418 * (1.0 - cbModelParam._m0[1u].x));
    float _1443 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _411);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1443 : min(cbModelParam._m0[25u].z, _1443));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1493 = fma(_663, cbModelParam._m0[13u].z, fma(_659, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655)) + cbModelParam._m0[13u].w;
        float _1497 = fma(_663, cbModelParam._m0[14u].z, fma(_659, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655)) + cbModelParam._m0[14u].w;
        float _1501 = fma(_663, cbModelParam._m0[15u].z, fma(_659, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655)) + cbModelParam._m0[15u].w;
        float _1504 = fma(_601, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _599));
        float _1507 = fma(_601, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _599));
        float _1510 = fma(_601, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _599));
        float _1538;
        if (_1504 > 0.0)
        {
            _1538 = abs((1.0 - _1493) / _1504);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1493 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1538 = frontier_phi_19_17_ladder;
        }
        float _1765;
        if (_1507 > 0.0)
        {
            _1765 = abs((1.0 - _1497) / _1507);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1497 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1765 = frontier_phi_28_24_ladder;
        }
        float _2022;
        if (_1510 > 0.0)
        {
            _2022 = abs((1.0 - _1501) / _1510);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1501 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2022 = frontier_phi_40_35_ladder;
        }
        float _2024 = isnan(_1765) ? _1538 : (isnan(_1538) ? _1765 : min(_1538, _1765));
        float _2025 = isnan(_2022) ? _2024 : (isnan(_2024) ? _2022 : min(_2024, _2022));
        float _2029 = (_2025 * _1504) + _1493;
        float _2030 = (_2025 * _1507) + _1497;
        float _2031 = (_2025 * _1510) + _1501;
        float _2032 = _2025 * 9.9999997473787516355514526367188e-05;
        float _2034 = (-1.0) - _2032;
        float _2036 = _2032 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2031 > _2036) || ((_2031 < _2034) || ((_2030 > _2036) || ((_2030 < _2034) || ((_2029 < _2034) || (_2029 > _2036))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2159 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2031, cbModelParam._m0[9u].z, fma(_2030, cbModelParam._m0[9u].y, _2029 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2031, cbModelParam._m0[10u].z, fma(_2030, cbModelParam._m0[10u].y, _2029 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2031, cbModelParam._m0[11u].z, fma(_2030, cbModelParam._m0[11u].y, _2029 * cbModelParam._m0[11u].x))), _1444);
            frontier_phi_18_40_ladder = _2159.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2159.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2159.x * cbModelParam._m0[1u].y;
        }
        _1526 = frontier_phi_18_40_ladder_2;
        _1528 = frontier_phi_18_40_ladder_1;
        _1530 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_599, _600, _601), _1444);
        _1526 = _1514.x * cbModelParam._m0[1u].y;
        _1528 = _1514.y * cbModelParam._m0[1u].y;
        _1530 = _1514.z * cbModelParam._m0[1u].y;
    }
    float _1534 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _411);
    float _1535 = isnan(_1534) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1534 : min(cbModelParam._m0[25u].w, _1534));
    float _1628;
    float _1630;
    float _1632;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1592 = fma(_663, cbModelParam._m0[21u].z, fma(_659, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655)) + cbModelParam._m0[21u].w;
        float _1596 = fma(_663, cbModelParam._m0[22u].z, fma(_659, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655)) + cbModelParam._m0[22u].w;
        float _1600 = fma(_663, cbModelParam._m0[23u].z, fma(_659, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655)) + cbModelParam._m0[23u].w;
        float _1603 = fma(_601, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _599));
        float _1606 = fma(_601, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _599));
        float _1609 = fma(_601, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _599));
        float _1770;
        if (_1603 > 0.0)
        {
            _1770 = abs((1.0 - _1592) / _1603);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1592 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1770 = frontier_phi_30_26_ladder;
        }
        float _2049;
        if (_1606 > 0.0)
        {
            _2049 = abs((1.0 - _1596) / _1606);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1596 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2049 = frontier_phi_42_37_ladder;
        }
        float _2262;
        if (_1609 > 0.0)
        {
            _2262 = abs((1.0 - _1600) / _1609);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1600 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2262 = frontier_phi_51_48_ladder;
        }
        float _2264 = isnan(_2049) ? _1770 : (isnan(_1770) ? _2049 : min(_1770, _2049));
        float _2265 = isnan(_2262) ? _2264 : (isnan(_2264) ? _2262 : min(_2264, _2262));
        float _2269 = (_2265 * _1603) + _1592;
        float _2270 = (_2265 * _1606) + _1596;
        float _2271 = (_2265 * _1609) + _1600;
        float _2272 = _2265 * 9.9999997473787516355514526367188e-05;
        float _2273 = (-1.0) - _2272;
        float _2275 = _2272 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2271 > _2275) || ((_2271 < _2273) || ((_2270 > _2275) || ((_2270 < _2273) || ((_2269 < _2273) || (_2269 > _2275))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2469 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2271, cbModelParam._m0[17u].z, fma(_2270, cbModelParam._m0[17u].y, _2269 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2271, cbModelParam._m0[18u].z, fma(_2270, cbModelParam._m0[18u].y, _2269 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2271, cbModelParam._m0[19u].z, fma(_2270, cbModelParam._m0[19u].y, _2269 * cbModelParam._m0[19u].x))), _1535);
            frontier_phi_27_51_ladder = _2469.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2469.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2469.x * cbModelParam._m0[1u].z;
        }
        _1628 = frontier_phi_27_51_ladder_2;
        _1630 = frontier_phi_27_51_ladder_1;
        _1632 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1612 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_599, _600, _601), _1535);
        _1628 = _1612.x * cbModelParam._m0[1u].z;
        _1630 = _1612.y * cbModelParam._m0[1u].z;
        _1632 = _1612.z * cbModelParam._m0[1u].z;
    }
    float _1645 = (((_626 * _576) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1628 - _1526)) + _1526);
    float _1647 = (((_626 * _578) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1630 - _1528)) + _1528);
    float _1649 = (((_626 * _579) + _627) * _591) * ((cbModelParam._m0[1u].w * (_1632 - _1530)) + _1530);
    float _1652 = fma(_1649, cbSceneParam._m0[89u].z, fma(_1647, cbSceneParam._m0[89u].y, _1645 * cbSceneParam._m0[89u].x));
    float _1655 = fma(_1649, cbSceneParam._m0[90u].z, fma(_1647, cbSceneParam._m0[90u].y, _1645 * cbSceneParam._m0[90u].x));
    float _1658 = fma(_1649, cbSceneParam._m0[91u].z, fma(_1647, cbSceneParam._m0[91u].y, _1645 * cbSceneParam._m0[91u].x));
    vec4 _1666 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_510, _511));
    float _1668 = _1666.w;
    float _1680 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1668);
    float _1681 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1668);
    float _1682 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1668);
    uvec4 _1686 = floatBitsToUint(cbInstanceData._m0[_550 + 5u]);
    uint _1688 = _1686.x * 14u;
    uint _1689 = _1688 + 13u;
    float _1696 = _591 + (-1.0);
    float _1701 = (cbLight._m0[_1689].x * _1696) + 1.0;
    float _1702 = (cbLight._m0[_1689].y * _1696) + 1.0;
    float _1703 = (cbLight._m0[_1689].z * _1696) + 1.0;
    float _1704 = (cbLight._m0[_1689].w * _1696) + 1.0;
    uint _1705 = _1688 + 5u;
    float _1711 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
    uint _1715 = _1688 + 4u;
    float _1724 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
    uint _1728 = _1688 | 1u;
    float _1739 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_408, _409, _410));
    float _1742 = dot(vec3(cbLight._m0[_1728].xyz), vec3(_408, _409, _410));
    float _3942 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _3953 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1747 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.3183098733425140380859375;
    float _1749 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
    float _1756 = ((cbLight._m0[_1705].x * _1711) * _1749) + (((cbLight._m0[_1715].x * _1680) * _1724) * _1747);
    float _1757 = ((_1711 * cbLight._m0[_1705].y) * _1749) + (((cbLight._m0[_1715].y * _1681) * _1724) * _1747);
    float _1758 = ((_1711 * cbLight._m0[_1705].z) * _1749) + (((cbLight._m0[_1715].z * _1682) * _1724) * _1747);
    uvec4 _1762 = floatBitsToUint(cbLight._m0[_1688 + 12u]);
    bool _1764 = _1762.x == 0u;
    float _1775;
    float _1777;
    float _1779;
    if (_1764)
    {
        _1775 = _1756;
        _1777 = _1757;
        _1779 = _1758;
    }
    else
    {
        uint _1783 = _1688 + 6u;
        float _1799 = (dot(vec3(cbLight._m0[_1688 + 2u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _1800 = _1799 * _1799;
        float _3964 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1802 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _1775 = (((cbLight._m0[_1783].x * 0.3183098733425140380859375) * _1801) * _1802) + _1756;
        _1777 = (((cbLight._m0[_1783].y * 0.3183098733425140380859375) * _1801) * _1802) + _1757;
        _1779 = (((cbLight._m0[_1783].z * 0.3183098733425140380859375) * _1801) * _1802) + _1758;
    }
    bool _1782 = _1762.y == 0u;
    float _1820;
    float _1822;
    float _1824;
    if (_1782)
    {
        _1820 = _1775;
        _1822 = _1777;
        _1824 = _1779;
    }
    else
    {
        uint _1993 = _1688 + 7u;
        float _2009 = (dot(vec3(cbLight._m0[_1688 + 3u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _2010 = _2009 * _2009;
        float _3980 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2011 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _2012 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _1820 = (((cbLight._m0[_1993].x * 0.3183098733425140380859375) * _2011) * _2012) + _1775;
        _1822 = (((cbLight._m0[_1993].y * 0.3183098733425140380859375) * _2011) * _2012) + _1777;
        _1824 = (((cbLight._m0[_1993].z * 0.3183098733425140380859375) * _2011) * _2012) + _1779;
    }
    uint _1827 = _1688 + 8u;
    float _1840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1688].w)) * _411) * 0.949999988079071044921875);
    float _1841 = _1840 * _1840;
    float _1842 = cbLight._m0[_1688].x + _489;
    float _1843 = cbLight._m0[_1688].y + _490;
    float _1844 = cbLight._m0[_1688].z + _491;
    float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
    float _1849 = _1848 * _1842;
    float _1850 = _1848 * _1843;
    float _1851 = _1848 * _1844;
    float _1852 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1688].xyz));
    float _3996 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _1856 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _1857 = dot(vec3(_408, _409, _410), vec3(_1849, _1850, _1851));
    float _4018 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_1849, _1850, _1851));
    float _4029 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1841 * _1841;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1877 = exp2(log2(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * 5.0);
    float _1878 = 0.959999978542327880859375 - _573;
    float _1880 = 0.959999978542327880859375 - _574;
    float _1881 = 0.959999978542327880859375 - _575;
    float _1888 = 1.0 - _1841;
    float _1899 = (0.5 / (((_1856 * ((_1855 * _1888) + _1841)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _1888) + _1841) * _1855))) * _1855;
    float _4040 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1901 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    uint _1915 = _1688 + 9u;
    float _1926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1728].w)) * _411) * 0.949999988079071044921875);
    float _1927 = _1926 * _1926;
    float _1928 = cbLight._m0[_1728].x + _489;
    float _1929 = cbLight._m0[_1728].y + _490;
    float _1930 = cbLight._m0[_1728].z + _491;
    float _1934 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
    float _1935 = _1934 * _1928;
    float _1936 = _1934 * _1929;
    float _1937 = _1934 * _1930;
    float _1938 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1728].xyz));
    float _4051 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _1942 = dot(vec3(_408, _409, _410), vec3(_1935, _1936, _1937));
    float _4062 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _1946 = dot(vec3(cbLight._m0[_1728].xyz), vec3(_1935, _1936, _1937));
    float _4073 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1950 = _1927 * _1927;
    float _1954 = ((_1945 * _1945) * (_1950 + (-1.0))) + 1.0;
    float _1961 = exp2(log2(1.0 - (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * 5.0);
    float _1968 = 1.0 - _1927;
    float _1978 = (0.5 / (((_1856 * ((_1941 * _1968) + _1927)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _1968) + _1927) * _1941))) * _1941;
    float _4084 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1980 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1950 / ((_1954 * _1954) * 3.141590118408203125));
    float _1990 = (((((_1961 * _1878) + _576) * cbLight._m0[_1915].x) * _1980) * _1711) + ((((cbLight._m0[_1827].x * _1680) * ((_1877 * _1878) + _576)) * _1901) * _1724);
    float _1991 = (((((_1961 * _1880) + _578) * cbLight._m0[_1915].y) * _1980) * _1711) + ((((cbLight._m0[_1827].y * _1681) * ((_1877 * _1880) + _578)) * _1901) * _1724);
    float _1992 = (((((_1961 * _1881) + _579) * cbLight._m0[_1915].z) * _1980) * _1711) + ((((cbLight._m0[_1827].z * _1682) * ((_1877 * _1881) + _579)) * _1901) * _1724);
    float _2054;
    float _2056;
    float _2058;
    if (_1764)
    {
        _2054 = _1990;
        _2056 = _1991;
        _2058 = _1992;
    }
    else
    {
        uint _2060 = _1688 + 2u;
        uint _2064 = _1688 + 10u;
        float _2078 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2060].w)) * _411) * 0.949999988079071044921875);
        float _2079 = _2078 * _2078;
        float _2080 = cbLight._m0[_2060].x + _489;
        float _2081 = cbLight._m0[_2060].y + _490;
        float _2082 = cbLight._m0[_2060].z + _491;
        float _2086 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
        float _2087 = _2086 * _2080;
        float _2088 = _2086 * _2081;
        float _2089 = _2086 * _2082;
        float _2090 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_2060].xyz));
        float _4095 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2093 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2094 = dot(vec3(_408, _409, _410), vec3(_2087, _2088, _2089));
        float _4106 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2097 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2098 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_2087, _2088, _2089));
        float _4117 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2102 = _2079 * _2079;
        float _2106 = ((_2097 * _2097) * (_2102 + (-1.0))) + 1.0;
        float _2113 = exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0);
        float _2120 = 1.0 - _2079;
        float _2130 = (0.5 / (((_1856 * ((_2093 * _2120) + _2079)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _2120) + _2079) * _2093))) * _2093;
        float _4128 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2132 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2102 / ((_2106 * _2106) * 3.141590118408203125));
        float _2133 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _2054 = (((((_2113 * _1878) + _576) * cbLight._m0[_2064].x) * _2132) * _2133) + _1990;
        _2056 = (((((_2113 * _1880) + _578) * cbLight._m0[_2064].y) * _2132) * _2133) + _1991;
        _2058 = (((((_2113 * _1881) + _579) * cbLight._m0[_2064].z) * _2132) * _2133) + _1992;
    }
    float _2168;
    float _2170;
    float _2172;
    if (_1782)
    {
        _2168 = _2054;
        _2170 = _2056;
        _2172 = _2058;
    }
    else
    {
        uint _2179 = _1688 + 3u;
        uint _2183 = _1688 + 11u;
        float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2179].w)) * _411) * 0.949999988079071044921875);
        float _2198 = _2197 * _2197;
        float _2199 = cbLight._m0[_2179].x + _489;
        float _2200 = cbLight._m0[_2179].y + _490;
        float _2201 = cbLight._m0[_2179].z + _491;
        float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
        float _2206 = _2205 * _2199;
        float _2207 = _2205 * _2200;
        float _2208 = _2205 * _2201;
        float _2209 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_2179].xyz));
        float _4144 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2213 = dot(vec3(_408, _409, _410), vec3(_2206, _2207, _2208));
        float _4155 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2216 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2217 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2206, _2207, _2208));
        float _4166 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2221 = _2198 * _2198;
        float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
        float _2232 = exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0);
        float _2239 = 1.0 - _2198;
        float _2249 = (0.5 / (((_1856 * ((_2212 * _2239) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _2239) + _2198) * _2212))) * _2212;
        float _4177 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2251 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
        float _2252 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _2168 = (((((_2232 * _1878) + _576) * cbLight._m0[_2183].x) * _2251) * _2252) + _2054;
        _2170 = (((((_2232 * _1880) + _578) * cbLight._m0[_2183].y) * _2251) * _2252) + _2056;
        _2172 = (((((_2232 * _1881) + _579) * cbLight._m0[_2183].z) * _2251) * _2252) + _2058;
    }
    float _2386;
    float _2388;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    if (_1686.y == 0u)
    {
        float _2327 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2327;
        float _2329 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2327;
        float _2330 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2327;
        uvec4 _2342 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2343 = _2342.x;
        uint _2354 = uint((float(_2342.y) * floor(float(uint(cbSceneParam._m0[85u].y * _511) / _2343))) + floor(float(uint(cbSceneParam._m0[85u].x * _510) / _2343)));
        float _2364 = (log2(_2330 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2365 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        uint _2368 = uint(isnan(14.0) ? _2365 : (isnan(_2365) ? 14.0 : min(_2365, 14.0)));
        uvec4 _2373 = texelFetch(g_lightClusterGridBuffer, int(((_2368 << 2u) + (_2354 << 6u)) >> 2u));
        uint _2374 = _2373.x;
        uint _2375 = _2342.z;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        if (((((1u << ((_2375 >> 4u) & 15u)) + 4294967295u) & _2374) == 0u) || ((_2375 & 240u) == 0u))
        {
            _2474 = 0.0;
            _2476 = 0.0;
            _2478 = 0.0;
            _2480 = 0.0;
            _2482 = 0.0;
            _2484 = 0.0;
        }
        else
        {
            float _2475;
            float _2477;
            float _2479;
            float _2481;
            float _2483;
            float _2485;
            float _2626 = 0.0;
            float _2627 = 0.0;
            float _2628 = 0.0;
            float _2629 = 0.0;
            float _2630 = 0.0;
            float _2631 = 0.0;
            uint _2632 = 0u;
            uint _2641;
            bool _2642;
            for (;;)
            {
                _2641 = texelFetch(g_lightClassification, int((((_2368 << 5u) + (_2354 << 9u)) + (_2632 << 2u)) >> 2u)).x;
                _2642 = _2641 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2642)
                {
                    frontier_phi_68_pred = _2628;
                    frontier_phi_68_pred_1 = _2631;
                    frontier_phi_68_pred_2 = _2630;
                    frontier_phi_68_pred_3 = _2629;
                    frontier_phi_68_pred_4 = _2627;
                    frontier_phi_68_pred_5 = _2626;
                }
                else
                {
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    uint _2777;
                    _2771 = _2626;
                    _2772 = _2627;
                    _2773 = _2628;
                    _2774 = _2629;
                    _2775 = _2630;
                    _2776 = _2631;
                    _2777 = _2641;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    for (;;)
                    {
                        uint _2781 = uint(findLSB(_2777)) + (_2632 << 5u);
                        uint _2778 = (_2777 + 4294967295u) & _2777;
                        uint _2783 = _2781 * 48u;
                        vec4 _2797 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2783)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 3u)).x));
                        uint _2803 = (_2781 * 48u) + 4u;
                        vec4 _2816 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 3u)).x));
                        uint _2822 = (_2781 * 48u) + 8u;
                        vec3 _2833 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2822)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 2u)).x));
                        float _2837 = _2797.x - _2328;
                        float _2838 = _2797.y - _2329;
                        float _2839 = _2797.z - _2330;
                        float _2840 = dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839));
                        float _2843 = inversesqrt(_2840);
                        float _2844 = _2843 * _2837;
                        float _2845 = _2843 * _2838;
                        float _2846 = _2843 * _2839;
                        float _2847 = dot(vec3(_531, _534, _537), vec3(_2844, _2845, _2846));
                        float _2852 = 1.0 - (_2840 * _2797.w);
                        float _4203 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2853 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2854 = sqrt(_2840) * _2816.w;
                        float _2857 = 1.39999997615814208984375 / (_2854 + 1.39999997615814208984375);
                        float _2858 = _2857 * _2857;
                        float _2861 = ((1.0 - _2858) * _2847) + _2858;
                        float _2864 = _2854 * _2854;
                        float _2868 = ((isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))) * _2853) / ((_2864 * 0.699999988079071044921875) + 1.0);
                        float _2872 = (-0.0) - _2328;
                        float _2873 = (-0.0) - _2329;
                        float _2874 = (-0.0) - _2330;
                        float _2878 = inversesqrt(dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874)));
                        float _2879 = _2878 * _2872;
                        float _2880 = _2878 * _2873;
                        float _2881 = _2878 * _2874;
                        float _2889 = exp2(log2(1.0 / ((_2864 * 3.5) + 5.0)) * 0.25);
                        float _2890 = 1.0 - _607;
                        float _2897 = sqrt(1.0 - ((1.0 - (_2890 * _2890)) * (1.0 - (_2889 * _2889))));
                        float _2898 = _2897 * _2897;
                        float _2899 = _2898 * _2898;
                        float _2900 = _2879 + _2844;
                        float _2901 = _2880 + _2845;
                        float _2902 = _2881 + _2846;
                        float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
                        float _2910 = dot(vec3(_531, _534, _537), vec3(_2879, _2880, _2881));
                        float _4219 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2913 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                        float _2914 = dot(vec3(_531, _534, _537), vec3(_2906 * _2900, _2906 * _2901, _2906 * _2902));
                        float _4230 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2917 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2921 = ((_2917 * _2917) * (_2899 + (-1.0))) + 1.0;
                        float _2922 = _2857 * _2898;
                        float _2923 = _2922 * _2922;
                        float _2926 = ((1.0 - _2923) * _2847) + _2923;
                        float _4241 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2927 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2928 = 1.0 - _2898;
                        float _2938 = (0.5 / (((_2927 * ((_2913 * _2928) + _2898)) + 9.9999999392252902907785028219223e-09) + (((_2927 * _2928) + _2898) * _2913))) * _2927;
                        float _4252 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2949 = (((_2899 * 3.1415927410125732421875) * (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) / ((_2921 * _2921) * ((_2864 * 2.1991131305694580078125) + 3.141590118408203125))) * _2853;
                        _2701 = (_2868 * _2816.x) + _2774;
                        _2702 = (_2868 * _2816.y) + _2775;
                        _2703 = (_2868 * _2816.z) + _2776;
                        _2698 = (_2949 * _2833.x) + _2771;
                        _2699 = (_2949 * _2833.y) + _2772;
                        _2700 = (_2949 * _2833.z) + _2773;
                        if (_2778 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2771 = _2698;
                            _2772 = _2699;
                            _2773 = _2700;
                            _2774 = _2701;
                            _2775 = _2702;
                            _2776 = _2703;
                            _2777 = _2778;
                        }
                    }
                    frontier_phi_68_pred = _2700;
                    frontier_phi_68_pred_1 = _2703;
                    frontier_phi_68_pred_2 = _2702;
                    frontier_phi_68_pred_3 = _2701;
                    frontier_phi_68_pred_4 = _2699;
                    frontier_phi_68_pred_5 = _2698;
                }
                _2479 = frontier_phi_68_pred;
                _2485 = frontier_phi_68_pred_1;
                _2483 = frontier_phi_68_pred_2;
                _2481 = frontier_phi_68_pred_3;
                _2477 = frontier_phi_68_pred_4;
                _2475 = frontier_phi_68_pred_5;
                uint _2633 = _2632 + 1u;
                if (_2633 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2626 = _2475;
                    _2627 = _2477;
                    _2628 = _2479;
                    _2629 = _2481;
                    _2630 = _2483;
                    _2631 = _2485;
                    _2632 = _2633;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2474 = _2475;
            _2476 = _2477;
            _2478 = _2479;
            _2480 = _2481;
            _2482 = _2483;
            _2484 = _2485;
        }
        uvec4 _2488 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2489 = _2488.z;
        uint _2491 = (_2489 >> 8u) & 15u;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        if (((4294967295u << _2491) & _2374) == 0u)
        {
            _2594 = _2474;
            _2596 = _2476;
            _2598 = _2478;
            _2600 = _2480;
            _2602 = _2482;
            _2604 = _2484;
        }
        else
        {
            float _2619 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
            float _2620 = _2619 * _2328;
            float _2621 = _2619 * _2329;
            float _2622 = _2619 * _2330;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2491 < ((_2489 >> 12u) & 15u))
            {
                float _2595;
                float _2597;
                float _2599;
                float _2601;
                float _2603;
                float _2605;
                float _2754 = _2474;
                float _2755 = _2476;
                float _2756 = _2478;
                float _2757 = _2480;
                float _2758 = _2482;
                float _2759 = _2484;
                uint _2760 = _2491;
                uint _2769;
                bool _2770;
                for (;;)
                {
                    _2769 = texelFetch(g_lightClassification, int((((_2368 << 5u) + (_2354 << 9u)) + (_2760 << 2u)) >> 2u)).x;
                    _2770 = _2769 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2770)
                    {
                        frontier_phi_79_pred = _2759;
                        frontier_phi_79_pred_1 = _2758;
                        frontier_phi_79_pred_2 = _2757;
                        frontier_phi_79_pred_3 = _2756;
                        frontier_phi_79_pred_4 = _2755;
                        frontier_phi_79_pred_5 = _2754;
                    }
                    else
                    {
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _2976 = _2754;
                        float _2977 = _2755;
                        float _2978 = _2756;
                        float _2979 = _2757;
                        float _2980 = _2758;
                        float _2981 = _2759;
                        uint _2982 = _2769;
                        uint _2983;
                        vec4 _3008;
                        float _3009;
                        vec4 _3024;
                        vec3 _3036;
                        vec4 _3052;
                        vec4 _3068;
                        float _3115;
                        bool _3116;
                        for (;;)
                        {
                            uint _2993 = ((_2760 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2982));
                            _2983 = (_2982 + 4294967295u) & _2982;
                            uint _2995 = _2993 * 40u;
                            _3008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 3u)).x));
                            _3009 = _3008.w;
                            uint _3011 = (_2993 * 40u) + 4u;
                            _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            uint _3026 = (_2993 * 40u) + 8u;
                            _3036 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x));
                            uint _3039 = (_2993 * 40u) + 16u;
                            _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            uint _3055 = (_2993 * 40u) + 20u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            uint _3071 = (_2993 * 40u) + 24u;
                            vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3090 = (_2993 * 40u) + 28u;
                            vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            _3115 = fma(_2330, _3103.z, fma(_2329, _3103.y, _3103.x * _2328)) + _3103.w;
                            _3116 = !((fma(_2330, _3084.z, fma(_2329, _3084.y, _3084.x * _2328)) + _3084.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3116)
                            {
                                float _3143 = _3008.x - _2328;
                                float _3144 = _3008.y - _2329;
                                float _3145 = _3008.z - _2330;
                                float _3146 = dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145));
                                float _3149 = inversesqrt(_3146);
                                float _3150 = _3149 * _3143;
                                float _3151 = _3149 * _3144;
                                float _3152 = _3149 * _3145;
                                float _3156 = 1.0 - (_3146 / (_3009 * _3009));
                                float _4263 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3157 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3161 = sqrt(_3146) * _3024.w;
                                float _3163 = 1.39999997615814208984375 / (_3161 + 1.39999997615814208984375);
                                float _3164 = _3163 * _3163;
                                float _3167 = ((1.0 - _3164) * dot(vec3(_3150, _3151, _3152), vec3(_531, _534, _537))) + _3164;
                                float _3170 = _3161 * _3161;
                                float _3174 = (fma(_2330, _3052.z, fma(_2329, _3052.y, _3052.x * _2328)) + _3052.w) / _3115;
                                float _3175 = (fma(_2330, _3068.z, fma(_2329, _3068.y, _3068.x * _2328)) + _3068.w) / _3115;
                                float _3179 = 1.0 - dot(vec2(_3174, _3175), vec2(_3174, _3175));
                                float _4279 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3180 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3181 = _3180 * (((isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))) * _3157) / ((_3170 * 0.699999988079071044921875) + 1.0));
                                float _3193 = exp2(log2(1.0 / ((_3170 * 3.5) + 5.0)) * 0.25);
                                float _3194 = 1.0 - _607;
                                float _3201 = sqrt(1.0 - ((1.0 - (_3194 * _3194)) * (1.0 - (_3193 * _3193))));
                                float _3202 = _3201 * _3201;
                                float _3203 = _3202 * _3202;
                                float _3204 = _3150 - _2620;
                                float _3205 = _3151 - _2621;
                                float _3206 = _3152 - _2622;
                                float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                                float _3214 = dot(vec3(_531, _534, _537), vec3((-0.0) - _2620, (-0.0) - _2621, (-0.0) - _2622));
                                float _4290 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3217 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3218 = dot(vec3(_531, _534, _537), vec3(_3210 * _3204, _3210 * _3205, _3210 * _3206));
                                float _4301 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                                float _3221 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3225 = ((_3221 * _3221) * (_3203 + (-1.0))) + 1.0;
                                float _3226 = _3163 * _3202;
                                float _3227 = _3226 * _3226;
                                float _3233 = ((1.0 - _3227) * dot(vec3(_531, _534, _537), vec3(_3150, _3151, _3152))) + _3227;
                                float _4312 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3234 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3235 = 1.0 - _3202;
                                float _3245 = (0.5 / (((_3234 * ((_3217 * _3235) + _3202)) + 9.9999999392252902907785028219223e-09) + (((_3234 * _3235) + _3202) * _3217))) * _3234;
                                float _4323 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3255 = (_3180 * _3157) * (((_3203 * 3.1415927410125732421875) * (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) / ((_3225 * _3225) * ((_3170 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3181 * _3024.z;
                                frontier_phi_85_pred_1 = _3181 * _3024.y;
                                frontier_phi_85_pred_2 = _3181 * _3024.x;
                                frontier_phi_85_pred_3 = _3255 * _3036.z;
                                frontier_phi_85_pred_4 = _3255 * _3036.y;
                                frontier_phi_85_pred_5 = _3255 * _3036.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3264 = frontier_phi_85_pred;
                            _3263 = frontier_phi_85_pred_1;
                            _3262 = frontier_phi_85_pred_2;
                            _3261 = frontier_phi_85_pred_3;
                            _3260 = frontier_phi_85_pred_4;
                            _3259 = frontier_phi_85_pred_5;
                            _2966 = _3262 + _2979;
                            _2967 = _3263 + _2980;
                            _2968 = _3264 + _2981;
                            _2963 = _3259 + _2976;
                            _2964 = _3260 + _2977;
                            _2965 = _3261 + _2978;
                            if (_2983 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2983;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2968;
                        frontier_phi_79_pred_1 = _2967;
                        frontier_phi_79_pred_2 = _2966;
                        frontier_phi_79_pred_3 = _2965;
                        frontier_phi_79_pred_4 = _2964;
                        frontier_phi_79_pred_5 = _2963;
                    }
                    _2605 = frontier_phi_79_pred;
                    _2603 = frontier_phi_79_pred_1;
                    _2601 = frontier_phi_79_pred_2;
                    _2599 = frontier_phi_79_pred_3;
                    _2597 = frontier_phi_79_pred_4;
                    _2595 = frontier_phi_79_pred_5;
                    uint _2761 = _2760 + 1u;
                    if (_2761 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2754 = _2595;
                        _2755 = _2597;
                        _2756 = _2599;
                        _2757 = _2601;
                        _2758 = _2603;
                        _2759 = _2605;
                        _2760 = _2761;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2601;
                frontier_phi_60_61_ladder_1 = _2605;
                frontier_phi_60_61_ladder_2 = _2603;
                frontier_phi_60_61_ladder_3 = _2599;
                frontier_phi_60_61_ladder_4 = _2597;
                frontier_phi_60_61_ladder_5 = _2595;
            }
            else
            {
                frontier_phi_60_61_ladder = _2480;
                frontier_phi_60_61_ladder_1 = _2484;
                frontier_phi_60_61_ladder_2 = _2482;
                frontier_phi_60_61_ladder_3 = _2478;
                frontier_phi_60_61_ladder_4 = _2476;
                frontier_phi_60_61_ladder_5 = _2474;
            }
            _2594 = frontier_phi_60_61_ladder_5;
            _2596 = frontier_phi_60_61_ladder_4;
            _2598 = frontier_phi_60_61_ladder_3;
            _2600 = frontier_phi_60_61_ladder;
            _2602 = frontier_phi_60_61_ladder_2;
            _2604 = frontier_phi_60_61_ladder_1;
        }
        float _2609 = isnan(1.0) ? _591 : (isnan(_591) ? 1.0 : min(_591, 1.0));
        _2386 = (_2609 * _2600) + _1820;
        _2388 = (_2609 * _2602) + _1822;
        _2390 = (_2609 * _2604) + _1824;
        _2392 = ((_2594 * _576) * _2609) + _2168;
        _2394 = ((_2596 * _578) * _2609) + _2170;
        _2396 = ((_2598 * _579) * _2609) + _2172;
    }
    else
    {
        _2386 = _1820;
        _2388 = _1822;
        _2390 = _1824;
        _2392 = _2168;
        _2394 = _2170;
        _2396 = _2172;
    }
    float _4339 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4350 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4361 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _2413 = ((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2386 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _591))) + ((_2392 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    float _2414 = ((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2388 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _591))) + ((_2394 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    float _2415 = ((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2390 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _591))) + ((_2396 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    uint _2416 = _550 + 6u;
    float _2424 = _510 / cbSceneParam._m0[86u].x;
    float _2425 = _511 / cbSceneParam._m0[86u].y;
    vec4 _2439 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2424, _2425, (log2((isnan(cbSceneParam._m0[77u].w) ? _431 : (isnan(_431) ? cbSceneParam._m0[77u].w : min(_431, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2441 = _2439.x;
    float _2442 = _2439.y;
    float _2443 = _2439.z;
    float _2444 = _2439.w;
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    if (_431 > cbSceneParam._m0[78u].w)
    {
        float _2499 = isnan(_431) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _431 : min(cbSceneParam._m0[80u].w, _431));
        float _2500 = _2499 / _431;
        float _2511 = _2500 * _482;
        float _2512 = _483 * _2500;
        float _2513 = (-0.0) - _2512;
        float _2514 = _2500 * _484;
        float _2516 = (cbSceneParam._m0[77u].w * _2513) / _2499;
        float _2517 = _2516 + cbSceneParam._m0[79u].w;
        float _2518 = cbSceneParam._m0[79u].w - _2512;
        float _2524 = sqrt(((_2511 * _2511) + (_2512 * _2512)) + (_2514 * _2514));
        float _2527 = (1.0 - (cbSceneParam._m0[77u].w / _2499)) * _2524;
        float _2532 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2534 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2711;
        if (abs((_2513 - _2516) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2711 = ((((_2517 > 0.0) ? exp2(_2532 * _2517) : (2.0 - exp2(_2534 * _2517))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2527;
        }
        else
        {
            float _2655 = 1.0 / cbSceneParam._m0[80u].x;
            float _2656 = isnan(_2518) ? _2517 : (isnan(_2517) ? _2518 : max(_2517, _2518));
            float _2657 = isnan(_2518) ? _2517 : (isnan(_2517) ? _2518 : min(_2517, _2518));
            float _2666 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : min(_2656, 0.0));
            float _2667 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : min(_2657, 0.0));
            _2711 = ((abs(_2524 / _2513) * cbSceneParam._m0[80u].y) * ((((_2666 - _2667) * 2.0) - ((exp2(_2532 * (isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0)))) - exp2(_2532 * (isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0))))) * _2655)) - ((exp2(_2534 * _2666) - exp2(_2534 * _2667)) * _2655))) + (_2527 * cbSceneParam._m0[80u].z);
        }
        vec4 _2713 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2424, _2425, 1.0), 0.0);
        float _2722 = exp2((_2711 * (-1.44269502162933349609375)) * (1.0 - _2713.w));
        float _2723 = log2(_2722);
        float _2739 = log2(_2444);
        _2536 = (exp2(_2739 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2723 * cbSceneParam._m0[78u].x)) * _2713.x) / cbSceneParam._m0[78u].x)) + _2441;
        _2538 = (exp2(_2739 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2723 * cbSceneParam._m0[78u].y)) * _2713.y) / cbSceneParam._m0[78u].y)) + _2442;
        _2540 = (exp2(_2739 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2723 * cbSceneParam._m0[78u].z)) * _2713.z) / cbSceneParam._m0[78u].z)) + _2443;
        _2542 = _2722 * _2444;
    }
    else
    {
        _2536 = _2441;
        _2538 = _2442;
        _2540 = _2443;
        _2542 = _2444;
    }
    bool _2749;
    vec4 _2552;
    vec4 _2574;
    float _2576;
    float _2580;
    float _2581;
    float _2582;
    float _2583;
    bool _2593;
    for (;;)
    {
        _2552 = cbMatDynParam._m0[0u];
        float _2554 = roundEven(_2552.y);
        bool _2555 = _2554 == 3.0;
        float _2556 = log2(_2542);
        float _2563 = exp2(_2556 * cbSceneParam._m0[78u].x) * _2413;
        float _2564 = exp2(_2556 * cbSceneParam._m0[78u].y) * _2414;
        float _2565 = exp2(_2556 * cbSceneParam._m0[78u].z) * _2415;
        float _2572 = _498 + (-0.5);
        _2574 = cbMtdParam._m0[1u];
        _2576 = _2574.y * _2572;
        float _2579 = (_2554 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2580 = _2579 * (_2555 ? _2563 : (_2563 + (cbSceneParam._m0[72u].w * _2536)));
        _2581 = _2579 * (_2555 ? _2564 : (_2564 + (cbSceneParam._m0[72u].w * _2538)));
        _2582 = _2579 * (_2555 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2540)));
        _2583 = _2572 * 0.999000012874603271484375;
        _2593 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2593)
        {
            if ((cbInstanceData._m0[_550 + 7u].x + _2583) < 0.5)
            {
                _2749 = true;
                break;
            }
        }
        uint _2690 = _552 + uint(_2552.w);
        if ((cbInstanceData._m0[_2690].w < 1.0) && ((cbInstanceData._m0[_2690].w + _2583) < 0.5))
        {
            _2749 = true;
            break;
        }
        if ((_2576 + 1.0) < _2574.x)
        {
            _2749 = true;
            break;
        }
        _2749 = false;
        break;
    }
    float _2954;
    if (_2749)
    {
        discard_state = true;
        _2954 = 0.0;
    }
    else
    {
        _2954 = cbInstanceData._m0[_2416].w;
    }
    SV_Target.x = _2580;
    SV_Target.y = _2581;
    SV_Target.z = _2582;
    SV_Target.w = _2954;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2416].w;
    discard_exit();
}


