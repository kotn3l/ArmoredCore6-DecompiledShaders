#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _956;
float _3324;
float _3325;
float _3326;
float _3327;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _237 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _266.z;
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3336 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0))));
    float _286 = fma(_283, _215, fma(_276, _208, _274 * _194));
    float _289 = fma(_283, _216, fma(_276, _209, _274 * _195));
    float _292 = fma(_283, _217, fma(_276, _210, _274 * _196));
    float _296 = inversesqrt(dot(vec3(_286, _289, _292), vec3(_286, _289, _292)));
    float _304 = cbMtdParam._m0[10u].x + dot(vec4(_296 * _286, _296 * _289, _296 * _292, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3347 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _305 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    vec4 _317 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _328 = ((_317.x - _243) * _305) + _243;
    float _329 = ((_317.y - _244) * _305) + _244;
    float _330 = ((_317.z - _245) * _305) + _245;
    vec4 _343 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _350 = (_343.x * 2.0) + (-1.0);
    float _351 = (_343.y * 2.0) + (-1.0);
    float _352 = dot(vec2(_350, _351), vec2(_350, _351));
    float _3358 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _360 = ((_343.z - _270) * _305) + _270;
    float _369 = ((sqrt(1.0 - (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0)))) - _283) * _305) + _283;
    float _373 = (((_350 - _274) * _305) + _274) + (cbMtdParam._m0[10u].y * _274);
    float _374 = (((_351 - _276) * _305) + _276) + (cbMtdParam._m0[10u].y * _276);
    float _377 = fma(_369, _215, fma(_374, _208, _373 * _194));
    float _380 = fma(_369, _216, fma(_374, _209, _373 * _195));
    float _383 = fma(_369, _217, fma(_374, _210, _373 * _196));
    float _387 = inversesqrt(dot(vec3(_377, _380, _383), vec3(_377, _380, _383)));
    float _388 = _387 * _377;
    float _389 = _387 * _380;
    float _390 = _387 * _383;
    float _3369 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _391 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _3380 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3391 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _3402 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _410 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _461 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _451);
    float _462 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _451);
    float _463 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _451);
    float _467 = inversesqrt(dot(vec3(_461, _462, _463), vec3(_461, _462, _463)));
    float _468 = _461 * _467;
    float _469 = _462 * _467;
    float _470 = _463 * _467;
    vec4 _475 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _477 = _475.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _635 = sqrt(((_461 * _461) + (_462 * _462)) + (_463 * _463));
        float _641 = (cbMatDynParam._m0[5u].x * _635) + cbMatDynParam._m0[5u].y;
        float _3413 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _646 = (cbMatDynParam._m0[5u].z * _635) + cbMatDynParam._m0[5u].w;
        float _3424 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) - _642)) + _642) < ((_477 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _489 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _490 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _510 = fma(_390, cbSceneParam._m0[5u].z, fma(_389, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _388));
    float _513 = fma(_390, cbSceneParam._m0[6u].z, fma(_389, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _388));
    float _516 = fma(_390, cbSceneParam._m0[7u].z, fma(_389, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _388));
    uint _529 = uint(roundEven(NORMAL.w)) * 13u;
    uint _531 = _529 + 9u;
    uint _532 = _531 + uint(cbMatDynParam._m0[0u].w);
    float _538 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_532].x;
    float _539 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0)))) * cbInstanceData._m0[_532].y;
    float _540 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0)))) * cbInstanceData._m0[_532].z;
    float _3435 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _3446 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _3457 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    vec4 _552 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _489, cbSceneParam._m0[86u].y * _490));
    float _555 = _552.x * TEXCOORD.z;
    float _556 = dot(vec3(_388, _389, _390), vec3(_468, _469, _470));
    float _559 = _556 * 2.0;
    float _563 = (_559 * _388) - _468;
    float _564 = (_559 * _389) - _469;
    float _565 = (_559 * _390) - _470;
    float _569 = abs(dot(vec3(_468, _469, _470), vec3(_388, _389, _390)));
    float _3468 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _571 = sqrt(_391);
    float _584 = exp2((_571 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_571 * 3.0));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _955;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _680 = fma(_624, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616));
        float _684 = fma(_624, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616));
        float _688 = fma(_624, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616));
        float _713 = _616 + _388;
        float _714 = _620 + _389;
        float _715 = _624 + _390;
        float _725 = fma(_715, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713)) - _680;
        float _726 = fma(_715, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713)) - _684;
        float _727 = fma(_715, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713)) - _688;
        float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
        float _744 = ((_731 * _725) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_680 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_731 * _726) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_684 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _746 = ((_731 * _727) / cbModelParam._m0[34u].z) + ((((((_688 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        float _783 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_749.x + (-0.5));
        float _785 = _783 * (_749.y + (-0.5));
        float _786 = _783 * (_749.z + (-0.5));
        float _793 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_756.x + (-0.5));
        float _795 = _793 * (_756.y + (-0.5));
        float _796 = _793 * (_756.z + (-0.5));
        float _803 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_763.x + (-0.5));
        float _805 = _803 * (_763.y + (-0.5));
        float _806 = _803 * (_763.z + (-0.5));
        float _813 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_770.x + (-0.5));
        float _815 = _813 * (_770.y + (-0.5));
        float _816 = _813 * (_770.z + (-0.5));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = _784 * 0.5;
        float _821 = _794 * 0.5;
        float _822 = _804 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _837 = (dot(vec3(_388, _389, _390), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _847 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3516 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_849 + 1.0))) + _854) * _817;
        float _864 = _785 * 0.5;
        float _865 = _795 * 0.5;
        float _866 = _805 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _880 = (dot(vec3(_388, _389, _390), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _889 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3549 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_891 + 1.0))) + _896) * _818;
        float _906 = _786 * 0.5;
        float _907 = _796 * 0.5;
        float _908 = _806 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_388, _389, _390), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3582 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_933 + 1.0))) + _938) * _819;
        _955 = _786;
        _957 = _785;
        _958 = _784;
        _959 = _796;
        _960 = _795;
        _961 = _794;
        _962 = _806;
        _963 = _805;
        _964 = _804;
        _965 = _819;
        _966 = _818;
        _967 = _817;
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
    }
    else
    {
        _955 = _956;
        _957 = _956;
        _958 = _956;
        _959 = _956;
        _960 = _956;
        _961 = _956;
        _962 = _956;
        _963 = _956;
        _964 = _956;
        _965 = _956;
        _966 = _956;
        _967 = _956;
        _968 = 0.0;
        _969 = 0.0;
        _970 = 0.0;
    }
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _999 = fma(_624, cbModelParam._m0[30u].z, fma(_620, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _616));
        float _1003 = fma(_624, cbModelParam._m0[31u].z, fma(_620, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _616));
        float _1007 = fma(_624, cbModelParam._m0[32u].z, fma(_620, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _616));
        float _1030 = _616 + _388;
        float _1031 = _620 + _389;
        float _1032 = _624 + _390;
        float _1042 = fma(_1032, cbModelParam._m0[30u].z, fma(_1031, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030)) - _999;
        float _1043 = fma(_1032, cbModelParam._m0[31u].z, fma(_1031, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030)) - _1003;
        float _1044 = fma(_1032, cbModelParam._m0[32u].z, fma(_1031, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030)) - _1007;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_999 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1003 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[35u].z) + ((((((_1007 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1098 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1065.x + (-0.5));
        float _1100 = _1098 * (_1065.y + (-0.5));
        float _1101 = _1098 * (_1065.z + (-0.5));
        float _1108 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1072.x + (-0.5));
        float _1110 = _1108 * (_1072.y + (-0.5));
        float _1111 = _1108 * (_1072.z + (-0.5));
        float _1118 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1079.x + (-0.5));
        float _1120 = _1118 * (_1079.y + (-0.5));
        float _1121 = _1118 * (_1079.z + (-0.5));
        float _1128 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1086.x + (-0.5));
        float _1130 = _1128 * (_1086.y + (-0.5));
        float _1131 = _1128 * (_1086.z + (-0.5));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = _1099 * 0.5;
        float _1136 = _1109 * 0.5;
        float _1137 = _1119 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_388, _389, _390), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3645 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1162 + 1.0))) + _1167) * _1132;
        float _1177 = _1100 * 0.5;
        float _1178 = _1110 * 0.5;
        float _1179 = _1120 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_388, _389, _390), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3678 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1204 + 1.0))) + _1209) * _1133;
        float _1219 = _1101 * 0.5;
        float _1220 = _1111 * 0.5;
        float _1221 = _1121 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_388, _389, _390), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3711 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1246 + 1.0))) + _1251) * _1134;
        _1268 = _1101;
        _1269 = _1100;
        _1270 = _1099;
        _1271 = _1111;
        _1272 = _1110;
        _1273 = _1109;
        _1274 = _1121;
        _1275 = _1120;
        _1276 = _1119;
        _1277 = _1134;
        _1278 = _1133;
        _1279 = _1132;
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
    }
    else
    {
        _1268 = _956;
        _1269 = _956;
        _1270 = _956;
        _1271 = _956;
        _1272 = _956;
        _1273 = _956;
        _1274 = _956;
        _1275 = _956;
        _1276 = _956;
        _1277 = _956;
        _1278 = _956;
        _1279 = _956;
        _1280 = 0.0;
        _1281 = 0.0;
        _1282 = 0.0;
    }
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _968)) + _968;
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _969)) + _969;
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _970)) + _970;
    float _1315 = fma(_1294, cbSceneParam._m0[89u].z, fma(_1293, cbSceneParam._m0[89u].y, _1292 * cbSceneParam._m0[89u].x));
    float _1318 = fma(_1294, cbSceneParam._m0[90u].z, fma(_1293, cbSceneParam._m0[90u].y, _1292 * cbSceneParam._m0[90u].x));
    float _1321 = fma(_1294, cbSceneParam._m0[91u].z, fma(_1293, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1292));
    float _1336 = _563 * 0.5;
    float _1337 = _564 * 0.5;
    float _1338 = _565 * 0.5;
    float _1339 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1342 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1345 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1379;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1352 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_955, _959, _962, _965));
        float _1356 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_957, _960, _963, _966));
        float _1360 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_958, _961, _964, _967));
        float _1367 = dot(vec4(cbModelParam._m0[39u]), vec4(_1336, _1337, _1338, 1.0));
        _1379 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1367) ? 0.0 : (isnan(0.0) ? _1367 : max(0.0, _1367))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1379 = 1.0;
    }
    float _1390;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1381 = dot(vec4(cbModelParam._m0[40u]), vec4(_1336, _1337, _1338, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1381) ? 0.0 : (isnan(0.0) ? _1381 : max(0.0, _1381))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1394 = (_1390 * cbModelParam._m0[1u].x) + (_1379 * (1.0 - cbModelParam._m0[1u].x));
    float _1404 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _391);
    float _1405 = isnan(_1404) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1404 : min(cbModelParam._m0[25u].z, _1404));
    float _1487;
    float _1489;
    float _1491;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1454 = fma(_624, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _616)) + cbModelParam._m0[13u].w;
        float _1458 = fma(_624, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _616)) + cbModelParam._m0[14u].w;
        float _1462 = fma(_624, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _616)) + cbModelParam._m0[15u].w;
        float _1465 = fma(_565, cbModelParam._m0[13u].z, fma(_564, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _563));
        float _1468 = fma(_565, cbModelParam._m0[14u].z, fma(_564, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _563));
        float _1471 = fma(_565, cbModelParam._m0[15u].z, fma(_564, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _563));
        float _1499;
        if (_1465 > 0.0)
        {
            _1499 = abs((1.0 - _1454) / _1465);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1454 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1499 = frontier_phi_19_17_ladder;
        }
        float _1703;
        if (_1468 > 0.0)
        {
            _1703 = abs((1.0 - _1458) / _1468);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1458 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1703 = frontier_phi_28_24_ladder;
        }
        float _1946;
        if (_1471 > 0.0)
        {
            _1946 = abs((1.0 - _1462) / _1471);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1462 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1946 = frontier_phi_40_35_ladder;
        }
        float _1948 = isnan(_1703) ? _1499 : (isnan(_1499) ? _1703 : min(_1499, _1703));
        float _1949 = isnan(_1946) ? _1948 : (isnan(_1948) ? _1946 : min(_1948, _1946));
        float _1953 = (_1949 * _1465) + _1454;
        float _1954 = (_1949 * _1468) + _1458;
        float _1955 = (_1949 * _1471) + _1462;
        float _1956 = _1949 * 9.9999997473787516355514526367188e-05;
        float _1958 = (-1.0) - _1956;
        float _1960 = _1956 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1955 > _1960) || ((_1955 < _1958) || ((_1954 > _1960) || ((_1954 < _1958) || ((_1953 < _1958) || (_1953 > _1960))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2079 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1955, cbModelParam._m0[9u].z, fma(_1954, cbModelParam._m0[9u].y, _1953 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1955, cbModelParam._m0[10u].z, fma(_1954, cbModelParam._m0[10u].y, _1953 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1955, cbModelParam._m0[11u].z, fma(_1954, cbModelParam._m0[11u].y, _1953 * cbModelParam._m0[11u].x))), _1405);
            frontier_phi_18_40_ladder = _2079.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2079.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2079.x * cbModelParam._m0[1u].y;
        }
        _1487 = frontier_phi_18_40_ladder_2;
        _1489 = frontier_phi_18_40_ladder_1;
        _1491 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_563, _564, _565), _1405);
        _1487 = _1475.x * cbModelParam._m0[1u].y;
        _1489 = _1475.y * cbModelParam._m0[1u].y;
        _1491 = _1475.z * cbModelParam._m0[1u].y;
    }
    float _1495 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _391);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1495 : min(cbModelParam._m0[25u].w, _1495));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1553 = fma(_624, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _616)) + cbModelParam._m0[21u].w;
        float _1557 = fma(_624, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _616)) + cbModelParam._m0[22u].w;
        float _1561 = fma(_624, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _616)) + cbModelParam._m0[23u].w;
        float _1564 = fma(_565, cbModelParam._m0[21u].z, fma(_564, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _563));
        float _1567 = fma(_565, cbModelParam._m0[22u].z, fma(_564, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _563));
        float _1570 = fma(_565, cbModelParam._m0[23u].z, fma(_564, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _563));
        float _1708;
        if (_1564 > 0.0)
        {
            _1708 = abs((1.0 - _1553) / _1564);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1553 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1708 = frontier_phi_30_26_ladder;
        }
        float _1973;
        if (_1567 > 0.0)
        {
            _1973 = abs((1.0 - _1557) / _1567);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1557 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1973 = frontier_phi_42_37_ladder;
        }
        float _2178;
        if (_1570 > 0.0)
        {
            _2178 = abs((1.0 - _1561) / _1570);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1561 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2178 = frontier_phi_51_48_ladder;
        }
        float _2180 = isnan(_1973) ? _1708 : (isnan(_1708) ? _1973 : min(_1708, _1973));
        float _2181 = isnan(_2178) ? _2180 : (isnan(_2180) ? _2178 : min(_2180, _2178));
        float _2185 = (_2181 * _1564) + _1553;
        float _2186 = (_2181 * _1567) + _1557;
        float _2187 = (_2181 * _1570) + _1561;
        float _2188 = _2181 * 9.9999997473787516355514526367188e-05;
        float _2189 = (-1.0) - _2188;
        float _2191 = _2188 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2187 > _2191) || ((_2187 < _2189) || ((_2186 > _2191) || ((_2186 < _2189) || ((_2185 < _2189) || (_2185 > _2191))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2385 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2187, cbModelParam._m0[17u].z, fma(_2186, cbModelParam._m0[17u].y, _2185 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2187, cbModelParam._m0[18u].z, fma(_2186, cbModelParam._m0[18u].y, _2185 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2187, cbModelParam._m0[19u].z, fma(_2186, cbModelParam._m0[19u].y, _2185 * cbModelParam._m0[19u].x))), _1496);
            frontier_phi_27_51_ladder = _2385.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2385.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2385.x * cbModelParam._m0[1u].z;
        }
        _1589 = frontier_phi_27_51_ladder_2;
        _1591 = frontier_phi_27_51_ladder_1;
        _1593 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_563, _564, _565), _1496);
        _1589 = _1573.x * cbModelParam._m0[1u].z;
        _1591 = _1573.y * cbModelParam._m0[1u].z;
        _1593 = _1573.z * cbModelParam._m0[1u].z;
    }
    float _1605 = ((((1.0 - _584) * ((_571 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_584 * _571)) * _555;
    float _1606 = _1605 * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1607 = _1605 * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1608 = _1605 * ((cbModelParam._m0[1u].w * (_1593 - _1491)) + _1491);
    float _1611 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1607, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1607, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1607, cbSceneParam._m0[91u].y, _1606 * cbSceneParam._m0[91u].x));
    uvec4 _1627 = floatBitsToUint(cbInstanceData._m0[_529 + 5u]);
    uint _1629 = _1627.x * 14u;
    uint _1630 = _1629 + 13u;
    float _1637 = _555 + (-1.0);
    float _1642 = (cbLight._m0[_1630].x * _1637) + 1.0;
    float _1643 = (cbLight._m0[_1630].y * _1637) + 1.0;
    float _1644 = (cbLight._m0[_1630].z * _1637) + 1.0;
    float _1645 = (cbLight._m0[_1630].w * _1637) + 1.0;
    uint _1646 = _1629 + 5u;
    float _1652 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
    uint _1656 = _1629 + 4u;
    float _1662 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
    uint _1666 = _1629 | 1u;
    float _1677 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_388, _389, _390));
    float _1680 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_388, _389, _390));
    float _3847 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _3858 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1685 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 0.3183098733425140380859375;
    float _1687 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * 0.3183098733425140380859375;
    float _1694 = ((cbLight._m0[_1646].x * _1652) * _1687) + ((cbLight._m0[_1656].x * _1662) * _1685);
    float _1695 = ((_1652 * cbLight._m0[_1646].y) * _1687) + ((_1662 * cbLight._m0[_1656].y) * _1685);
    float _1696 = ((_1652 * cbLight._m0[_1646].z) * _1687) + ((_1662 * cbLight._m0[_1656].z) * _1685);
    uvec4 _1700 = floatBitsToUint(cbLight._m0[_1629 + 12u]);
    bool _1702 = _1700.x == 0u;
    float _1713;
    float _1715;
    float _1717;
    if (_1702)
    {
        _1713 = _1694;
        _1715 = _1695;
        _1717 = _1696;
    }
    else
    {
        uint _1721 = _1629 + 6u;
        float _1737 = (dot(vec3(cbLight._m0[_1629 + 2u].xyz), vec3(_388, _389, _390)) * 0.5) + 0.5;
        float _1738 = _1737 * _1737;
        float _3869 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1740 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
        _1713 = (((cbLight._m0[_1721].x * 0.3183098733425140380859375) * _1739) * _1740) + _1694;
        _1715 = (((cbLight._m0[_1721].y * 0.3183098733425140380859375) * _1739) * _1740) + _1695;
        _1717 = (((cbLight._m0[_1721].z * 0.3183098733425140380859375) * _1739) * _1740) + _1696;
    }
    bool _1720 = _1700.y == 0u;
    float _1758;
    float _1760;
    float _1762;
    if (_1720)
    {
        _1758 = _1713;
        _1760 = _1715;
        _1762 = _1717;
    }
    else
    {
        uint _1917 = _1629 + 7u;
        float _1933 = (dot(vec3(cbLight._m0[_1629 + 3u].xyz), vec3(_388, _389, _390)) * 0.5) + 0.5;
        float _1934 = _1933 * _1933;
        float _3885 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1935 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1936 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _1758 = (((cbLight._m0[_1917].x * 0.3183098733425140380859375) * _1935) * _1936) + _1713;
        _1760 = (((cbLight._m0[_1917].y * 0.3183098733425140380859375) * _1935) * _1936) + _1715;
        _1762 = (((cbLight._m0[_1917].z * 0.3183098733425140380859375) * _1935) * _1936) + _1717;
    }
    uint _1765 = _1629 + 8u;
    float _1778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1629].w)) * _391) * 0.949999988079071044921875);
    float _1779 = _1778 * _1778;
    float _1780 = cbLight._m0[_1629].x + _468;
    float _1781 = cbLight._m0[_1629].y + _469;
    float _1782 = cbLight._m0[_1629].z + _470;
    float _1786 = inversesqrt(dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782)));
    float _1787 = _1786 * _1780;
    float _1788 = _1786 * _1781;
    float _1789 = _1786 * _1782;
    float _1790 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1629].xyz));
    float _3901 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1793 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _1794 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _1795 = dot(vec3(_388, _389, _390), vec3(_1787, _1788, _1789));
    float _3923 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _1799 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_1787, _1788, _1789));
    float _3934 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1803 = _1779 * _1779;
    float _1807 = ((_1798 * _1798) * (_1803 + (-1.0))) + 1.0;
    float _1818 = (exp2(log2(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1819 = 1.0 - _1779;
    float _1830 = (0.5 / (((_1794 * ((_1793 * _1819) + _1779)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _1819) + _1779) * _1793))) * _1793;
    float _3945 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1832 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1803 / ((_1807 * _1807) * 3.141590118408203125));
    uint _1843 = _1629 + 9u;
    float _1854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1666].w)) * _391) * 0.949999988079071044921875);
    float _1855 = _1854 * _1854;
    float _1856 = cbLight._m0[_1666].x + _468;
    float _1857 = cbLight._m0[_1666].y + _469;
    float _1858 = cbLight._m0[_1666].z + _470;
    float _1862 = inversesqrt(dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858)));
    float _1863 = _1862 * _1856;
    float _1864 = _1862 * _1857;
    float _1865 = _1862 * _1858;
    float _1866 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1666].xyz));
    float _3956 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1869 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _1870 = dot(vec3(_388, _389, _390), vec3(_1863, _1864, _1865));
    float _3967 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _1874 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_1863, _1864, _1865));
    float _3978 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1878 = _1855 * _1855;
    float _1882 = ((_1873 * _1873) * (_1878 + (-1.0))) + 1.0;
    float _1891 = (exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1892 = 1.0 - _1855;
    float _1902 = (0.5 / (((_1794 * ((_1869 * _1892) + _1855)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _1892) + _1855) * _1869))) * _1869;
    float _3989 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1904 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1878 / ((_1882 * _1882) * 3.141590118408203125));
    float _1914 = (((_1891 * cbLight._m0[_1843].x) * _1904) * _1652) + (((_1818 * cbLight._m0[_1765].x) * _1832) * _1662);
    float _1915 = (((_1891 * cbLight._m0[_1843].y) * _1904) * _1652) + (((_1818 * cbLight._m0[_1765].y) * _1832) * _1662);
    float _1916 = (((_1891 * cbLight._m0[_1843].z) * _1904) * _1652) + (((_1818 * cbLight._m0[_1765].z) * _1832) * _1662);
    float _1978;
    float _1980;
    float _1982;
    if (_1702)
    {
        _1978 = _1914;
        _1980 = _1915;
        _1982 = _1916;
    }
    else
    {
        uint _1984 = _1629 + 2u;
        uint _1988 = _1629 + 10u;
        float _2002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1984].w)) * _391) * 0.949999988079071044921875);
        float _2003 = _2002 * _2002;
        float _2004 = cbLight._m0[_1984].x + _468;
        float _2005 = cbLight._m0[_1984].y + _469;
        float _2006 = cbLight._m0[_1984].z + _470;
        float _2010 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
        float _2011 = _2010 * _2004;
        float _2012 = _2010 * _2005;
        float _2013 = _2010 * _2006;
        float _2014 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1984].xyz));
        float _4000 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2017 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2018 = dot(vec3(_388, _389, _390), vec3(_2011, _2012, _2013));
        float _4011 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2021 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _2022 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_2011, _2012, _2013));
        float _4022 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2026 = _2003 * _2003;
        float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
        float _2039 = (exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2040 = 1.0 - _2003;
        float _2050 = (0.5 / (((_1794 * ((_2017 * _2040) + _2003)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _2040) + _2003) * _2017))) * _2017;
        float _4033 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2052 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
        float _2053 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
        _1978 = (((_2039 * cbLight._m0[_1988].x) * _2052) * _2053) + _1914;
        _1980 = (((_2039 * cbLight._m0[_1988].y) * _2052) * _2053) + _1915;
        _1982 = (((_2039 * cbLight._m0[_1988].z) * _2052) * _2053) + _1916;
    }
    float _2088;
    float _2090;
    float _2092;
    if (_1720)
    {
        _2088 = _1978;
        _2090 = _1980;
        _2092 = _1982;
    }
    else
    {
        uint _2099 = _1629 + 3u;
        uint _2103 = _1629 + 11u;
        float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _391) * 0.949999988079071044921875);
        float _2118 = _2117 * _2117;
        float _2119 = cbLight._m0[_2099].x + _468;
        float _2120 = cbLight._m0[_2099].y + _469;
        float _2121 = cbLight._m0[_2099].z + _470;
        float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
        float _2126 = _2125 * _2119;
        float _2127 = _2125 * _2120;
        float _2128 = _2125 * _2121;
        float _2129 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_2099].xyz));
        float _4049 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2133 = dot(vec3(_388, _389, _390), vec3(_2126, _2127, _2128));
        float _4060 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2137 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2126, _2127, _2128));
        float _4071 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2141 = _2118 * _2118;
        float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
        float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2155 = 1.0 - _2118;
        float _2165 = (0.5 / (((_1794 * ((_2132 * _2155) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _2155) + _2118) * _2132))) * _2132;
        float _4082 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2167 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
        float _2168 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _2088 = (((_2154 * cbLight._m0[_2103].x) * _2167) * _2168) + _1978;
        _2090 = (((_2154 * cbLight._m0[_2103].y) * _2167) * _2168) + _1980;
        _2092 = (((_2154 * cbLight._m0[_2103].z) * _2167) * _2168) + _1982;
    }
    float _2302;
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    float _2312;
    if (_1627.y == 0u)
    {
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2243;
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2243;
        float _2246 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2243;
        uvec4 _2258 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2259 = _2258.x;
        uint _2270 = uint((float(_2258.y) * floor(float(uint(cbSceneParam._m0[85u].y * _490) / _2259))) + floor(float(uint(cbSceneParam._m0[85u].x * _489) / _2259)));
        float _2280 = (log2(_2246 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2281 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        uint _2284 = uint(isnan(14.0) ? _2281 : (isnan(_2281) ? 14.0 : min(_2281, 14.0)));
        uvec4 _2289 = texelFetch(g_lightClusterGridBuffer, int(((_2284 << 2u) + (_2270 << 6u)) >> 2u));
        uint _2290 = _2289.x;
        uint _2291 = _2258.z;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        if (((((1u << ((_2291 >> 4u) & 15u)) + 4294967295u) & _2290) == 0u) || ((_2291 & 240u) == 0u))
        {
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
        }
        else
        {
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            uint _2548 = 0u;
            uint _2557;
            bool _2558;
            for (;;)
            {
                _2557 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2548 << 2u)) >> 2u)).x;
                _2558 = _2557 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2558)
                {
                    frontier_phi_68_pred = _2544;
                    frontier_phi_68_pred_1 = _2547;
                    frontier_phi_68_pred_2 = _2546;
                    frontier_phi_68_pred_3 = _2545;
                    frontier_phi_68_pred_4 = _2543;
                    frontier_phi_68_pred_5 = _2542;
                }
                else
                {
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    uint _2693;
                    _2687 = _2542;
                    _2688 = _2543;
                    _2689 = _2544;
                    _2690 = _2545;
                    _2691 = _2546;
                    _2692 = _2547;
                    _2693 = _2557;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    for (;;)
                    {
                        uint _2697 = uint(findLSB(_2693)) + (_2548 << 5u);
                        uint _2694 = (_2693 + 4294967295u) & _2693;
                        uint _2699 = _2697 * 48u;
                        vec4 _2713 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 3u)).x));
                        uint _2719 = (_2697 * 48u) + 4u;
                        vec4 _2732 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 3u)).x));
                        uint _2738 = (_2697 * 48u) + 8u;
                        vec3 _2749 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x));
                        float _2753 = _2713.x - _2244;
                        float _2754 = _2713.y - _2245;
                        float _2755 = _2713.z - _2246;
                        float _2756 = dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755));
                        float _2759 = inversesqrt(_2756);
                        float _2760 = _2759 * _2753;
                        float _2761 = _2759 * _2754;
                        float _2762 = _2759 * _2755;
                        float _2763 = dot(vec3(_510, _513, _516), vec3(_2760, _2761, _2762));
                        float _2768 = 1.0 - (_2756 * _2713.w);
                        float _4108 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2769 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2770 = sqrt(_2756) * _2732.w;
                        float _2773 = 1.39999997615814208984375 / (_2770 + 1.39999997615814208984375);
                        float _2774 = _2773 * _2773;
                        float _2777 = ((1.0 - _2774) * _2763) + _2774;
                        float _2780 = _2770 * _2770;
                        float _2784 = ((isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0))) * _2769) / ((_2780 * 0.699999988079071044921875) + 1.0);
                        float _2788 = (-0.0) - _2244;
                        float _2789 = (-0.0) - _2245;
                        float _2790 = (-0.0) - _2246;
                        float _2794 = inversesqrt(dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790)));
                        float _2795 = _2794 * _2788;
                        float _2796 = _2794 * _2789;
                        float _2797 = _2794 * _2790;
                        float _2805 = exp2(log2(1.0 / ((_2780 * 3.5) + 5.0)) * 0.25);
                        float _2806 = 1.0 - _571;
                        float _2813 = sqrt(1.0 - ((1.0 - (_2806 * _2806)) * (1.0 - (_2805 * _2805))));
                        float _2814 = _2813 * _2813;
                        float _2815 = _2814 * _2814;
                        float _2816 = _2795 + _2760;
                        float _2817 = _2796 + _2761;
                        float _2818 = _2797 + _2762;
                        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
                        float _2826 = dot(vec3(_510, _513, _516), vec3(_2795, _2796, _2797));
                        float _4124 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2829 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                        float _2830 = dot(vec3(_510, _513, _516), vec3(_2822 * _2816, _2822 * _2817, _2822 * _2818));
                        float _4135 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2833 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                        float _2837 = ((_2833 * _2833) * (_2815 + (-1.0))) + 1.0;
                        float _2838 = _2773 * _2814;
                        float _2839 = _2838 * _2838;
                        float _2842 = ((1.0 - _2839) * _2763) + _2839;
                        float _4146 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2843 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                        float _2844 = 1.0 - _2814;
                        float _2854 = (0.5 / (((_2843 * ((_2829 * _2844) + _2814)) + 9.9999999392252902907785028219223e-09) + (((_2843 * _2844) + _2814) * _2829))) * _2843;
                        float _4157 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2865 = (((_2815 * 3.1415927410125732421875) * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) / ((_2837 * _2837) * ((_2780 * 2.1991131305694580078125) + 3.141590118408203125))) * _2769;
                        _2617 = (_2784 * _2732.x) + _2690;
                        _2618 = (_2784 * _2732.y) + _2691;
                        _2619 = (_2784 * _2732.z) + _2692;
                        _2614 = (_2865 * _2749.x) + _2687;
                        _2615 = (_2865 * _2749.y) + _2688;
                        _2616 = (_2865 * _2749.z) + _2689;
                        if (_2694 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2687 = _2614;
                            _2688 = _2615;
                            _2689 = _2616;
                            _2690 = _2617;
                            _2691 = _2618;
                            _2692 = _2619;
                            _2693 = _2694;
                        }
                    }
                    frontier_phi_68_pred = _2616;
                    frontier_phi_68_pred_1 = _2619;
                    frontier_phi_68_pred_2 = _2618;
                    frontier_phi_68_pred_3 = _2617;
                    frontier_phi_68_pred_4 = _2615;
                    frontier_phi_68_pred_5 = _2614;
                }
                _2395 = frontier_phi_68_pred;
                _2401 = frontier_phi_68_pred_1;
                _2399 = frontier_phi_68_pred_2;
                _2397 = frontier_phi_68_pred_3;
                _2393 = frontier_phi_68_pred_4;
                _2391 = frontier_phi_68_pred_5;
                uint _2549 = _2548 + 1u;
                if (_2549 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2542 = _2391;
                    _2543 = _2393;
                    _2544 = _2395;
                    _2545 = _2397;
                    _2546 = _2399;
                    _2547 = _2401;
                    _2548 = _2549;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
        }
        uvec4 _2404 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2405 = _2404.z;
        uint _2407 = (_2405 >> 8u) & 15u;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        if (((4294967295u << _2407) & _2290) == 0u)
        {
            _2510 = _2390;
            _2512 = _2392;
            _2514 = _2394;
            _2516 = _2396;
            _2518 = _2398;
            _2520 = _2400;
        }
        else
        {
            float _2535 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
            float _2536 = _2535 * _2244;
            float _2537 = _2535 * _2245;
            float _2538 = _2535 * _2246;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2407 < ((_2405 >> 12u) & 15u))
            {
                float _2511;
                float _2513;
                float _2515;
                float _2517;
                float _2519;
                float _2521;
                float _2670 = _2390;
                float _2671 = _2392;
                float _2672 = _2394;
                float _2673 = _2396;
                float _2674 = _2398;
                float _2675 = _2400;
                uint _2676 = _2407;
                uint _2685;
                bool _2686;
                for (;;)
                {
                    _2685 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2676 << 2u)) >> 2u)).x;
                    _2686 = _2685 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2686)
                    {
                        frontier_phi_79_pred = _2675;
                        frontier_phi_79_pred_1 = _2674;
                        frontier_phi_79_pred_2 = _2673;
                        frontier_phi_79_pred_3 = _2672;
                        frontier_phi_79_pred_4 = _2671;
                        frontier_phi_79_pred_5 = _2670;
                    }
                    else
                    {
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _2892 = _2670;
                        float _2893 = _2671;
                        float _2894 = _2672;
                        float _2895 = _2673;
                        float _2896 = _2674;
                        float _2897 = _2675;
                        uint _2898 = _2685;
                        uint _2899;
                        vec4 _2924;
                        float _2925;
                        vec4 _2940;
                        vec3 _2952;
                        vec4 _2968;
                        vec4 _2984;
                        float _3031;
                        bool _3032;
                        for (;;)
                        {
                            uint _2909 = ((_2676 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2898));
                            _2899 = (_2898 + 4294967295u) & _2898;
                            uint _2911 = _2909 * 40u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            _2925 = _2924.w;
                            uint _2927 = (_2909 * 40u) + 4u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2942 = (_2909 * 40u) + 8u;
                            _2952 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x));
                            uint _2955 = (_2909 * 40u) + 16u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2971 = (_2909 * 40u) + 20u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2987 = (_2909 * 40u) + 24u;
                            vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3006 = (_2909 * 40u) + 28u;
                            vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            _3031 = fma(_2246, _3019.z, fma(_2245, _3019.y, _3019.x * _2244)) + _3019.w;
                            _3032 = !((fma(_2246, _3000.z, fma(_2245, _3000.y, _3000.x * _2244)) + _3000.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3032)
                            {
                                float _3059 = _2924.x - _2244;
                                float _3060 = _2924.y - _2245;
                                float _3061 = _2924.z - _2246;
                                float _3062 = dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061));
                                float _3065 = inversesqrt(_3062);
                                float _3066 = _3065 * _3059;
                                float _3067 = _3065 * _3060;
                                float _3068 = _3065 * _3061;
                                float _3072 = 1.0 - (_3062 / (_2925 * _2925));
                                float _4168 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3077 = sqrt(_3062) * _2940.w;
                                float _3079 = 1.39999997615814208984375 / (_3077 + 1.39999997615814208984375);
                                float _3080 = _3079 * _3079;
                                float _3083 = ((1.0 - _3080) * dot(vec3(_3066, _3067, _3068), vec3(_510, _513, _516))) + _3080;
                                float _3086 = _3077 * _3077;
                                float _3090 = (fma(_2246, _2968.z, fma(_2245, _2968.y, _2968.x * _2244)) + _2968.w) / _3031;
                                float _3091 = (fma(_2246, _2984.z, fma(_2245, _2984.y, _2984.x * _2244)) + _2984.w) / _3031;
                                float _3095 = 1.0 - dot(vec2(_3090, _3091), vec2(_3090, _3091));
                                float _4184 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3097 = _3096 * (((isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))) * _3073) / ((_3086 * 0.699999988079071044921875) + 1.0));
                                float _3109 = exp2(log2(1.0 / ((_3086 * 3.5) + 5.0)) * 0.25);
                                float _3110 = 1.0 - _571;
                                float _3117 = sqrt(1.0 - ((1.0 - (_3110 * _3110)) * (1.0 - (_3109 * _3109))));
                                float _3118 = _3117 * _3117;
                                float _3119 = _3118 * _3118;
                                float _3120 = _3066 - _2536;
                                float _3121 = _3067 - _2537;
                                float _3122 = _3068 - _2538;
                                float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
                                float _3130 = dot(vec3(_510, _513, _516), vec3((-0.0) - _2536, (-0.0) - _2537, (-0.0) - _2538));
                                float _4195 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3133 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                                float _3134 = dot(vec3(_510, _513, _516), vec3(_3126 * _3120, _3126 * _3121, _3126 * _3122));
                                float _4206 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3137 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3141 = ((_3137 * _3137) * (_3119 + (-1.0))) + 1.0;
                                float _3142 = _3079 * _3118;
                                float _3143 = _3142 * _3142;
                                float _3149 = ((1.0 - _3143) * dot(vec3(_510, _513, _516), vec3(_3066, _3067, _3068))) + _3143;
                                float _4217 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                                float _3151 = 1.0 - _3118;
                                float _3161 = (0.5 / (((_3150 * ((_3133 * _3151) + _3118)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3118) * _3133))) * _3150;
                                float _4228 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3171 = (_3096 * _3073) * (((_3119 * 3.1415927410125732421875) * (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) / ((_3141 * _3141) * ((_3086 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3097 * _2940.z;
                                frontier_phi_85_pred_1 = _3097 * _2940.y;
                                frontier_phi_85_pred_2 = _3097 * _2940.x;
                                frontier_phi_85_pred_3 = _3171 * _2952.z;
                                frontier_phi_85_pred_4 = _3171 * _2952.y;
                                frontier_phi_85_pred_5 = _3171 * _2952.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3180 = frontier_phi_85_pred;
                            _3179 = frontier_phi_85_pred_1;
                            _3178 = frontier_phi_85_pred_2;
                            _3177 = frontier_phi_85_pred_3;
                            _3176 = frontier_phi_85_pred_4;
                            _3175 = frontier_phi_85_pred_5;
                            _2882 = _3178 + _2895;
                            _2883 = _3179 + _2896;
                            _2884 = _3180 + _2897;
                            _2879 = _3175 + _2892;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            if (_2899 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2899;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2884;
                        frontier_phi_79_pred_1 = _2883;
                        frontier_phi_79_pred_2 = _2882;
                        frontier_phi_79_pred_3 = _2881;
                        frontier_phi_79_pred_4 = _2880;
                        frontier_phi_79_pred_5 = _2879;
                    }
                    _2521 = frontier_phi_79_pred;
                    _2519 = frontier_phi_79_pred_1;
                    _2517 = frontier_phi_79_pred_2;
                    _2515 = frontier_phi_79_pred_3;
                    _2513 = frontier_phi_79_pred_4;
                    _2511 = frontier_phi_79_pred_5;
                    uint _2677 = _2676 + 1u;
                    if (_2677 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2670 = _2511;
                        _2671 = _2513;
                        _2672 = _2515;
                        _2673 = _2517;
                        _2674 = _2519;
                        _2675 = _2521;
                        _2676 = _2677;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2517;
                frontier_phi_60_61_ladder_1 = _2521;
                frontier_phi_60_61_ladder_2 = _2519;
                frontier_phi_60_61_ladder_3 = _2515;
                frontier_phi_60_61_ladder_4 = _2513;
                frontier_phi_60_61_ladder_5 = _2511;
            }
            else
            {
                frontier_phi_60_61_ladder = _2396;
                frontier_phi_60_61_ladder_1 = _2400;
                frontier_phi_60_61_ladder_2 = _2398;
                frontier_phi_60_61_ladder_3 = _2394;
                frontier_phi_60_61_ladder_4 = _2392;
                frontier_phi_60_61_ladder_5 = _2390;
            }
            _2510 = frontier_phi_60_61_ladder_5;
            _2512 = frontier_phi_60_61_ladder_4;
            _2514 = frontier_phi_60_61_ladder_3;
            _2516 = frontier_phi_60_61_ladder;
            _2518 = frontier_phi_60_61_ladder_2;
            _2520 = frontier_phi_60_61_ladder_1;
        }
        float _2525 = isnan(1.0) ? _555 : (isnan(_555) ? 1.0 : min(_555, 1.0));
        _2302 = (_2525 * _2516) + _1758;
        _2304 = (_2525 * _2518) + _1760;
        _2306 = (_2525 * _2520) + _1762;
        _2308 = ((_2510 * 0.039999999105930328369140625) * _2525) + _2088;
        _2310 = ((_2512 * 0.039999999105930328369140625) * _2525) + _2090;
        _2312 = ((_2514 * 0.039999999105930328369140625) * _2525) + _2092;
    }
    else
    {
        _2302 = _1758;
        _2304 = _1760;
        _2306 = _1762;
        _2308 = _2088;
        _2310 = _2090;
        _2312 = _2092;
    }
    float _4244 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4255 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4266 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _2329 = ((isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2302 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _555))) + ((_2308 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1394)) * cbPerFrame._m0[3u].x);
    float _2330 = ((isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2304 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _555))) + ((_2310 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1394)) * cbPerFrame._m0[3u].x);
    float _2331 = ((isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2306 + ((isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))) * _555))) + ((_2312 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1394)) * cbPerFrame._m0[3u].x);
    uint _2332 = _529 + 6u;
    float _2340 = _489 / cbSceneParam._m0[86u].x;
    float _2341 = _490 / cbSceneParam._m0[86u].y;
    vec4 _2355 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2340, _2341, (log2((isnan(cbSceneParam._m0[77u].w) ? _410 : (isnan(_410) ? cbSceneParam._m0[77u].w : min(_410, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2357 = _2355.x;
    float _2358 = _2355.y;
    float _2359 = _2355.z;
    float _2360 = _2355.w;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    if (_410 > cbSceneParam._m0[78u].w)
    {
        float _2415 = isnan(_410) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _410 : min(cbSceneParam._m0[80u].w, _410));
        float _2416 = _2415 / _410;
        float _2427 = _2416 * _461;
        float _2428 = _462 * _2416;
        float _2429 = (-0.0) - _2428;
        float _2430 = _2416 * _463;
        float _2432 = (cbSceneParam._m0[77u].w * _2429) / _2415;
        float _2433 = _2432 + cbSceneParam._m0[79u].w;
        float _2434 = cbSceneParam._m0[79u].w - _2428;
        float _2440 = sqrt(((_2427 * _2427) + (_2428 * _2428)) + (_2430 * _2430));
        float _2443 = (1.0 - (cbSceneParam._m0[77u].w / _2415)) * _2440;
        float _2448 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2450 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2627;
        if (abs((_2429 - _2432) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2627 = ((((_2433 > 0.0) ? exp2(_2448 * _2433) : (2.0 - exp2(_2450 * _2433))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2443;
        }
        else
        {
            float _2571 = 1.0 / cbSceneParam._m0[80u].x;
            float _2572 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : max(_2433, _2434));
            float _2573 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : min(_2433, _2434));
            float _2582 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : min(_2572, 0.0));
            float _2583 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : min(_2573, 0.0));
            _2627 = ((abs(_2440 / _2429) * cbSceneParam._m0[80u].y) * ((((_2582 - _2583) * 2.0) - ((exp2(_2448 * (isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0)))) - exp2(_2448 * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0))))) * _2571)) - ((exp2(_2450 * _2582) - exp2(_2450 * _2583)) * _2571))) + (_2443 * cbSceneParam._m0[80u].z);
        }
        vec4 _2629 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2340, _2341, 1.0), 0.0);
        float _2638 = exp2((_2627 * (-1.44269502162933349609375)) * (1.0 - _2629.w));
        float _2639 = log2(_2638);
        float _2655 = log2(_2360);
        _2452 = (exp2(_2655 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].x)) * _2629.x) / cbSceneParam._m0[78u].x)) + _2357;
        _2454 = (exp2(_2655 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].y)) * _2629.y) / cbSceneParam._m0[78u].y)) + _2358;
        _2456 = (exp2(_2655 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].z)) * _2629.z) / cbSceneParam._m0[78u].z)) + _2359;
        _2458 = _2638 * _2360;
    }
    else
    {
        _2452 = _2357;
        _2454 = _2358;
        _2456 = _2359;
        _2458 = _2360;
    }
    bool _2665;
    vec4 _2468;
    vec4 _2490;
    float _2492;
    float _2496;
    float _2497;
    float _2498;
    float _2499;
    bool _2509;
    for (;;)
    {
        _2468 = cbMatDynParam._m0[0u];
        float _2470 = roundEven(_2468.y);
        bool _2471 = _2470 == 3.0;
        float _2472 = log2(_2458);
        float _2479 = exp2(_2472 * cbSceneParam._m0[78u].x) * _2329;
        float _2480 = exp2(_2472 * cbSceneParam._m0[78u].y) * _2330;
        float _2481 = exp2(_2472 * cbSceneParam._m0[78u].z) * _2331;
        float _2488 = _477 + (-0.5);
        _2490 = cbMtdParam._m0[1u];
        _2492 = _2490.y * _2488;
        float _2495 = (_2470 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2496 = _2495 * (_2471 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2452)));
        _2497 = _2495 * (_2471 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2454)));
        _2498 = _2495 * (_2471 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2456)));
        _2499 = _2488 * 0.999000012874603271484375;
        _2509 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2509)
        {
            if ((cbInstanceData._m0[_529 + 7u].x + _2499) < 0.5)
            {
                _2665 = true;
                break;
            }
        }
        uint _2606 = _531 + uint(_2468.w);
        if ((cbInstanceData._m0[_2606].w < 1.0) && ((cbInstanceData._m0[_2606].w + _2499) < 0.5))
        {
            _2665 = true;
            break;
        }
        if ((_2492 + 1.0) < _2490.x)
        {
            _2665 = true;
            break;
        }
        _2665 = false;
        break;
    }
    float _2870;
    if (_2665)
    {
        discard_state = true;
        _2870 = 0.0;
    }
    else
    {
        _2870 = cbInstanceData._m0[_2332].w;
    }
    SV_Target.x = _2496;
    SV_Target.y = _2497;
    SV_Target.z = _2498;
    SV_Target.w = _2870;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2332].w;
    discard_exit();
}


