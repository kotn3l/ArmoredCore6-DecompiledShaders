#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _993;
float _3382;
float _3383;
float _3384;
float _3385;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _239 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _268.z;
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3394 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))));
    float _288 = fma(_285, _217, fma(_278, _210, _276 * _196));
    float _291 = fma(_285, _218, fma(_278, _211, _276 * _197));
    float _294 = fma(_285, _219, fma(_278, _212, _276 * _198));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _306 = cbMtdParam._m0[10u].x + dot(vec4(_298 * _288, _298 * _291, _298 * _294, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3405 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _307 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
    vec4 _319 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _330 = ((_319.x - _245) * _307) + _245;
    float _331 = ((_319.y - _246) * _307) + _246;
    float _332 = ((_319.z - _247) * _307) + _247;
    vec4 _344 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _346 = _344.x;
    float _348 = _346 - (_346 * _307);
    vec4 _361 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _368 = (_361.x * 2.0) + (-1.0);
    float _369 = (_361.y * 2.0) + (-1.0);
    float _370 = dot(vec2(_368, _369), vec2(_368, _369));
    float _3416 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _378 = ((_361.z - _272) * _307) + _272;
    float _387 = ((sqrt(1.0 - (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0)))) - _285) * _307) + _285;
    float _391 = (((_368 - _276) * _307) + _276) + (cbMtdParam._m0[10u].y * _276);
    float _392 = (((_369 - _278) * _307) + _278) + (cbMtdParam._m0[10u].y * _278);
    float _395 = fma(_387, _217, fma(_392, _210, _391 * _196));
    float _398 = fma(_387, _218, fma(_392, _211, _391 * _197));
    float _401 = fma(_387, _219, fma(_392, _212, _391 * _198));
    float _405 = inversesqrt(dot(vec3(_395, _398, _401), vec3(_395, _398, _401)));
    float _406 = _405 * _395;
    float _407 = _405 * _398;
    float _408 = _405 * _401;
    float _3427 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _409 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _3438 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3449 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3460 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3471 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _413 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _429 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _470 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _480 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _470);
    float _481 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _470);
    float _482 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _470);
    float _486 = inversesqrt(dot(vec3(_480, _481, _482), vec3(_480, _481, _482)));
    float _487 = _480 * _486;
    float _488 = _481 * _486;
    float _489 = _482 * _486;
    vec4 _494 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _496 = _494.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _672 = sqrt(((_480 * _480) + (_481 * _481)) + (_482 * _482));
        float _678 = (cbMatDynParam._m0[5u].x * _672) + cbMatDynParam._m0[5u].y;
        float _3482 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _683 = (cbMatDynParam._m0[5u].z * _672) + cbMatDynParam._m0[5u].w;
        float _3493 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) - _679)) + _679) < ((_496 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _508 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _509 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _529 = fma(_408, cbSceneParam._m0[5u].z, fma(_407, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _406));
    float _532 = fma(_408, cbSceneParam._m0[6u].z, fma(_407, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _406));
    float _535 = fma(_408, cbSceneParam._m0[7u].z, fma(_407, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _406));
    uint _548 = uint(roundEven(NORMAL.w)) * 13u;
    uint _550 = _548 + 9u;
    uint _551 = _550 + uint(cbMatDynParam._m0[0u].w);
    float _557 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0)))) * cbInstanceData._m0[_551].x;
    float _558 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0)))) * cbInstanceData._m0[_551].y;
    float _559 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * cbInstanceData._m0[_551].z;
    float _3504 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _560 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _3526 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _563 = 1.0 - _413;
    float _564 = _560 * _563;
    float _565 = _561 * _563;
    float _566 = _562 * _563;
    float _571 = (_560 + (-0.039999999105930328369140625)) * _413;
    float _572 = (_561 + (-0.039999999105930328369140625)) * _413;
    float _573 = (_562 + (-0.039999999105930328369140625)) * _413;
    float _574 = _571 + 0.039999999105930328369140625;
    float _576 = _572 + 0.039999999105930328369140625;
    float _577 = _573 + 0.039999999105930328369140625;
    vec4 _586 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _508, cbSceneParam._m0[86u].y * _509));
    float _589 = _586.x * TEXCOORD.z;
    float _590 = dot(vec3(_406, _407, _408), vec3(_487, _488, _489));
    float _593 = _590 * 2.0;
    float _597 = (_593 * _406) - _487;
    float _598 = (_593 * _407) - _488;
    float _599 = (_593 * _408) - _489;
    float _603 = abs(dot(vec3(_487, _488, _489), vec3(_406, _407, _408)));
    float _3537 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _605 = sqrt(_409);
    float _618 = exp2((_605 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_605 * 3.0));
    float _624 = (1.0 - _618) * ((_605 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _625 = _618 * _605;
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _992;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _717 = fma(_661, cbModelParam._m0[26u].z, fma(_657, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _653));
        float _721 = fma(_661, cbModelParam._m0[27u].z, fma(_657, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _653));
        float _725 = fma(_661, cbModelParam._m0[28u].z, fma(_657, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _653));
        float _750 = _653 + _406;
        float _751 = _657 + _407;
        float _752 = _661 + _408;
        float _762 = fma(_752, cbModelParam._m0[26u].z, fma(_751, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _750)) - _717;
        float _763 = fma(_752, cbModelParam._m0[27u].z, fma(_751, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _750)) - _721;
        float _764 = fma(_752, cbModelParam._m0[28u].z, fma(_751, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _750)) - _725;
        float _768 = inversesqrt(dot(vec3(_762, _763, _764), vec3(_762, _763, _764)));
        float _781 = ((_768 * _762) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_717 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _782 = ((_768 * _763) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_721 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _783 = ((_768 * _764) / cbModelParam._m0[34u].z) + ((((((_725 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        float _820 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_786.x + (-0.5));
        float _822 = _820 * (_786.y + (-0.5));
        float _823 = _820 * (_786.z + (-0.5));
        float _830 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_793.x + (-0.5));
        float _832 = _830 * (_793.y + (-0.5));
        float _833 = _830 * (_793.z + (-0.5));
        float _840 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_800.x + (-0.5));
        float _842 = _840 * (_800.y + (-0.5));
        float _843 = _840 * (_800.z + (-0.5));
        float _850 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_807.x + (-0.5));
        float _852 = _850 * (_807.y + (-0.5));
        float _853 = _850 * (_807.z + (-0.5));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = _821 * 0.5;
        float _858 = _831 * 0.5;
        float _859 = _841 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _874 = (dot(vec3(_406, _407, _408), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _884 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3585 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_886 + 1.0))) + _891) * _854;
        float _901 = _822 * 0.5;
        float _902 = _832 * 0.5;
        float _903 = _842 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _917 = (dot(vec3(_406, _407, _408), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _926 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3618 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_928 + 1.0))) + _933) * _855;
        float _943 = _823 * 0.5;
        float _944 = _833 * 0.5;
        float _945 = _843 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _959 = (dot(vec3(_406, _407, _408), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _968 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3651 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_970 + 1.0))) + _975) * _856;
        _992 = _823;
        _994 = _822;
        _995 = _821;
        _996 = _833;
        _997 = _832;
        _998 = _831;
        _999 = _843;
        _1000 = _842;
        _1001 = _841;
        _1002 = _856;
        _1003 = _855;
        _1004 = _854;
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
    }
    else
    {
        _992 = _993;
        _994 = _993;
        _995 = _993;
        _996 = _993;
        _997 = _993;
        _998 = _993;
        _999 = _993;
        _1000 = _993;
        _1001 = _993;
        _1002 = _993;
        _1003 = _993;
        _1004 = _993;
        _1005 = 0.0;
        _1006 = 0.0;
        _1007 = 0.0;
    }
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1036 = fma(_661, cbModelParam._m0[30u].z, fma(_657, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _653));
        float _1040 = fma(_661, cbModelParam._m0[31u].z, fma(_657, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _653));
        float _1044 = fma(_661, cbModelParam._m0[32u].z, fma(_657, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _653));
        float _1067 = _653 + _406;
        float _1068 = _657 + _407;
        float _1069 = _661 + _408;
        float _1079 = fma(_1069, cbModelParam._m0[30u].z, fma(_1068, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1067)) - _1036;
        float _1080 = fma(_1069, cbModelParam._m0[31u].z, fma(_1068, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1067)) - _1040;
        float _1081 = fma(_1069, cbModelParam._m0[32u].z, fma(_1068, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1067)) - _1044;
        float _1085 = inversesqrt(dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081)));
        float _1098 = ((_1085 * _1079) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1036 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1085 * _1080) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1040 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1085 * _1081) / cbModelParam._m0[35u].z) + ((((((_1044 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        float _1135 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1102.x + (-0.5));
        float _1137 = _1135 * (_1102.y + (-0.5));
        float _1138 = _1135 * (_1102.z + (-0.5));
        float _1145 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1109.x + (-0.5));
        float _1147 = _1145 * (_1109.y + (-0.5));
        float _1148 = _1145 * (_1109.z + (-0.5));
        float _1155 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1116.x + (-0.5));
        float _1157 = _1155 * (_1116.y + (-0.5));
        float _1158 = _1155 * (_1116.z + (-0.5));
        float _1165 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1123.x + (-0.5));
        float _1167 = _1165 * (_1123.y + (-0.5));
        float _1168 = _1165 * (_1123.z + (-0.5));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = _1136 * 0.5;
        float _1173 = _1146 * 0.5;
        float _1174 = _1156 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_406, _407, _408), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3714 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1199 + 1.0))) + _1204) * _1169;
        float _1214 = _1137 * 0.5;
        float _1215 = _1147 * 0.5;
        float _1216 = _1157 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_406, _407, _408), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3747 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1241 + 1.0))) + _1246) * _1170;
        float _1256 = _1138 * 0.5;
        float _1257 = _1148 * 0.5;
        float _1258 = _1158 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_406, _407, _408), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3780 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1283 + 1.0))) + _1288) * _1171;
        _1305 = _1138;
        _1306 = _1137;
        _1307 = _1136;
        _1308 = _1148;
        _1309 = _1147;
        _1310 = _1146;
        _1311 = _1158;
        _1312 = _1157;
        _1313 = _1156;
        _1314 = _1171;
        _1315 = _1170;
        _1316 = _1169;
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _993;
        _1306 = _993;
        _1307 = _993;
        _1308 = _993;
        _1309 = _993;
        _1310 = _993;
        _1311 = _993;
        _1312 = _993;
        _1313 = _993;
        _1314 = _993;
        _1315 = _993;
        _1316 = _993;
        _1317 = 0.0;
        _1318 = 0.0;
        _1319 = 0.0;
    }
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1005)) + _1005;
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1006)) + _1006;
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1007)) + _1007;
    float _1352 = fma(_1331, cbSceneParam._m0[89u].z, fma(_1330, cbSceneParam._m0[89u].y, _1329 * cbSceneParam._m0[89u].x));
    float _1355 = fma(_1331, cbSceneParam._m0[90u].z, fma(_1330, cbSceneParam._m0[90u].y, _1329 * cbSceneParam._m0[90u].x));
    float _1358 = fma(_1331, cbSceneParam._m0[91u].z, fma(_1330, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1329));
    float _1373 = _597 * 0.5;
    float _1374 = _598 * 0.5;
    float _1375 = _599 * 0.5;
    float _1376 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1379 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1382 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1416;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1389 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_992, _996, _999, _1002));
        float _1393 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_994, _997, _1000, _1003));
        float _1397 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_995, _998, _1001, _1004));
        float _1404 = dot(vec4(cbModelParam._m0[39u]), vec4(_1373, _1374, _1375, 1.0));
        _1416 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1404) ? 0.0 : (isnan(0.0) ? _1404 : max(0.0, _1404))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1416 = 1.0;
    }
    float _1427;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1418 = dot(vec4(cbModelParam._m0[40u]), vec4(_1373, _1374, _1375, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1418) ? 0.0 : (isnan(0.0) ? _1418 : max(0.0, _1418))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1431 = (_1427 * cbModelParam._m0[1u].x) + (_1416 * (1.0 - cbModelParam._m0[1u].x));
    float _1441 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _409);
    float _1442 = isnan(_1441) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1441 : min(cbModelParam._m0[25u].z, _1441));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1491 = fma(_661, cbModelParam._m0[13u].z, fma(_657, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653)) + cbModelParam._m0[13u].w;
        float _1495 = fma(_661, cbModelParam._m0[14u].z, fma(_657, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653)) + cbModelParam._m0[14u].w;
        float _1499 = fma(_661, cbModelParam._m0[15u].z, fma(_657, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653)) + cbModelParam._m0[15u].w;
        float _1502 = fma(_599, cbModelParam._m0[13u].z, fma(_598, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _597));
        float _1505 = fma(_599, cbModelParam._m0[14u].z, fma(_598, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _597));
        float _1508 = fma(_599, cbModelParam._m0[15u].z, fma(_598, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _597));
        float _1536;
        if (_1502 > 0.0)
        {
            _1536 = abs((1.0 - _1491) / _1502);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1491 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1536 = frontier_phi_19_17_ladder;
        }
        float _1742;
        if (_1505 > 0.0)
        {
            _1742 = abs((1.0 - _1495) / _1505);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1495 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1742 = frontier_phi_28_24_ladder;
        }
        float _1996;
        if (_1508 > 0.0)
        {
            _1996 = abs((1.0 - _1499) / _1508);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1499 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1996 = frontier_phi_40_35_ladder;
        }
        float _1998 = isnan(_1742) ? _1536 : (isnan(_1536) ? _1742 : min(_1536, _1742));
        float _1999 = isnan(_1996) ? _1998 : (isnan(_1998) ? _1996 : min(_1998, _1996));
        float _2003 = (_1999 * _1502) + _1491;
        float _2004 = (_1999 * _1505) + _1495;
        float _2005 = (_1999 * _1508) + _1499;
        float _2006 = _1999 * 9.9999997473787516355514526367188e-05;
        float _2008 = (-1.0) - _2006;
        float _2010 = _2006 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2005 > _2010) || ((_2005 < _2008) || ((_2004 > _2010) || ((_2004 < _2008) || ((_2003 < _2008) || (_2003 > _2010))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2133 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2005, cbModelParam._m0[9u].z, fma(_2004, cbModelParam._m0[9u].y, _2003 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2005, cbModelParam._m0[10u].z, fma(_2004, cbModelParam._m0[10u].y, _2003 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2005, cbModelParam._m0[11u].z, fma(_2004, cbModelParam._m0[11u].y, _2003 * cbModelParam._m0[11u].x))), _1442);
            frontier_phi_18_40_ladder = _2133.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2133.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2133.x * cbModelParam._m0[1u].y;
        }
        _1524 = frontier_phi_18_40_ladder_2;
        _1526 = frontier_phi_18_40_ladder_1;
        _1528 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_597, _598, _599), _1442);
        _1524 = _1512.x * cbModelParam._m0[1u].y;
        _1526 = _1512.y * cbModelParam._m0[1u].y;
        _1528 = _1512.z * cbModelParam._m0[1u].y;
    }
    float _1532 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _409);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1532 : min(cbModelParam._m0[25u].w, _1532));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1590 = fma(_661, cbModelParam._m0[21u].z, fma(_657, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653)) + cbModelParam._m0[21u].w;
        float _1594 = fma(_661, cbModelParam._m0[22u].z, fma(_657, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653)) + cbModelParam._m0[22u].w;
        float _1598 = fma(_661, cbModelParam._m0[23u].z, fma(_657, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653)) + cbModelParam._m0[23u].w;
        float _1601 = fma(_599, cbModelParam._m0[21u].z, fma(_598, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _597));
        float _1604 = fma(_599, cbModelParam._m0[22u].z, fma(_598, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _597));
        float _1607 = fma(_599, cbModelParam._m0[23u].z, fma(_598, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _597));
        float _1747;
        if (_1601 > 0.0)
        {
            _1747 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1747 = frontier_phi_30_26_ladder;
        }
        float _2023;
        if (_1604 > 0.0)
        {
            _2023 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2023 = frontier_phi_42_37_ladder;
        }
        float _2236;
        if (_1607 > 0.0)
        {
            _2236 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2236 = frontier_phi_51_48_ladder;
        }
        float _2238 = isnan(_2023) ? _1747 : (isnan(_1747) ? _2023 : min(_1747, _2023));
        float _2239 = isnan(_2236) ? _2238 : (isnan(_2238) ? _2236 : min(_2238, _2236));
        float _2243 = (_2239 * _1601) + _1590;
        float _2244 = (_2239 * _1604) + _1594;
        float _2245 = (_2239 * _1607) + _1598;
        float _2246 = _2239 * 9.9999997473787516355514526367188e-05;
        float _2247 = (-1.0) - _2246;
        float _2249 = _2246 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2245 > _2249) || ((_2245 < _2247) || ((_2244 > _2249) || ((_2244 < _2247) || ((_2243 < _2247) || (_2243 > _2249))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2245, cbModelParam._m0[17u].z, fma(_2244, cbModelParam._m0[17u].y, _2243 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2245, cbModelParam._m0[18u].z, fma(_2244, cbModelParam._m0[18u].y, _2243 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2245, cbModelParam._m0[19u].z, fma(_2244, cbModelParam._m0[19u].y, _2243 * cbModelParam._m0[19u].x))), _1533);
            frontier_phi_27_51_ladder = _2443.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2443.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2443.x * cbModelParam._m0[1u].z;
        }
        _1626 = frontier_phi_27_51_ladder_2;
        _1628 = frontier_phi_27_51_ladder_1;
        _1630 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_597, _598, _599), _1533);
        _1626 = _1610.x * cbModelParam._m0[1u].z;
        _1628 = _1610.y * cbModelParam._m0[1u].z;
        _1630 = _1610.z * cbModelParam._m0[1u].z;
    }
    float _1643 = (((_624 * _574) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1626 - _1524)) + _1524);
    float _1645 = (((_624 * _576) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1628 - _1526)) + _1526);
    float _1647 = (((_624 * _577) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1630 - _1528)) + _1528);
    float _1650 = fma(_1647, cbSceneParam._m0[89u].z, fma(_1645, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1647, cbSceneParam._m0[90u].z, fma(_1645, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1647, cbSceneParam._m0[91u].z, fma(_1645, cbSceneParam._m0[91u].y, _1643 * cbSceneParam._m0[91u].x));
    uvec4 _1666 = floatBitsToUint(cbInstanceData._m0[_548 + 5u]);
    uint _1668 = _1666.x * 14u;
    uint _1669 = _1668 + 13u;
    float _1676 = _589 + (-1.0);
    float _1681 = (cbLight._m0[_1669].x * _1676) + 1.0;
    float _1682 = (cbLight._m0[_1669].y * _1676) + 1.0;
    float _1683 = (cbLight._m0[_1669].z * _1676) + 1.0;
    float _1684 = (cbLight._m0[_1669].w * _1676) + 1.0;
    uint _1685 = _1668 + 5u;
    float _1691 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
    uint _1695 = _1668 + 4u;
    float _1701 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
    uint _1705 = _1668 | 1u;
    float _1716 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_406, _407, _408));
    float _1719 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_406, _407, _408));
    float _3916 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _3927 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1724 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * 0.3183098733425140380859375;
    float _1726 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * 0.3183098733425140380859375;
    float _1733 = ((cbLight._m0[_1685].x * _1691) * _1726) + ((cbLight._m0[_1695].x * _1701) * _1724);
    float _1734 = ((_1691 * cbLight._m0[_1685].y) * _1726) + ((_1701 * cbLight._m0[_1695].y) * _1724);
    float _1735 = ((_1691 * cbLight._m0[_1685].z) * _1726) + ((_1701 * cbLight._m0[_1695].z) * _1724);
    uvec4 _1739 = floatBitsToUint(cbLight._m0[_1668 + 12u]);
    bool _1741 = _1739.x == 0u;
    float _1752;
    float _1754;
    float _1756;
    if (_1741)
    {
        _1752 = _1733;
        _1754 = _1734;
        _1756 = _1735;
    }
    else
    {
        uint _1760 = _1668 + 6u;
        float _1776 = (dot(vec3(cbLight._m0[_1668 + 2u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _1777 = _1776 * _1776;
        float _3938 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1779 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
        _1752 = (((cbLight._m0[_1760].x * 0.3183098733425140380859375) * _1778) * _1779) + _1733;
        _1754 = (((cbLight._m0[_1760].y * 0.3183098733425140380859375) * _1778) * _1779) + _1734;
        _1756 = (((cbLight._m0[_1760].z * 0.3183098733425140380859375) * _1778) * _1779) + _1735;
    }
    bool _1759 = _1739.y == 0u;
    float _1797;
    float _1799;
    float _1801;
    if (_1759)
    {
        _1797 = _1752;
        _1799 = _1754;
        _1801 = _1756;
    }
    else
    {
        uint _1967 = _1668 + 7u;
        float _1983 = (dot(vec3(cbLight._m0[_1668 + 3u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _1984 = _1983 * _1983;
        float _3954 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1985 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1986 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
        _1797 = (((cbLight._m0[_1967].x * 0.3183098733425140380859375) * _1985) * _1986) + _1752;
        _1799 = (((cbLight._m0[_1967].y * 0.3183098733425140380859375) * _1985) * _1986) + _1754;
        _1801 = (((cbLight._m0[_1967].z * 0.3183098733425140380859375) * _1985) * _1986) + _1756;
    }
    uint _1804 = _1668 + 8u;
    float _1817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1668].w)) * _409) * 0.949999988079071044921875);
    float _1818 = _1817 * _1817;
    float _1819 = cbLight._m0[_1668].x + _487;
    float _1820 = cbLight._m0[_1668].y + _488;
    float _1821 = cbLight._m0[_1668].z + _489;
    float _1825 = inversesqrt(dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821)));
    float _1826 = _1825 * _1819;
    float _1827 = _1825 * _1820;
    float _1828 = _1825 * _1821;
    float _1829 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1668].xyz));
    float _3970 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _1833 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _1834 = dot(vec3(_406, _407, _408), vec3(_1826, _1827, _1828));
    float _3992 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1837 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _1838 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_1826, _1827, _1828));
    float _4003 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1842 = _1818 * _1818;
    float _1846 = ((_1837 * _1837) * (_1842 + (-1.0))) + 1.0;
    float _1854 = exp2(log2(1.0 - (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * 5.0);
    float _1855 = 0.959999978542327880859375 - _571;
    float _1857 = 0.959999978542327880859375 - _572;
    float _1858 = 0.959999978542327880859375 - _573;
    float _1865 = 1.0 - _1818;
    float _1876 = (0.5 / (((_1833 * ((_1832 * _1865) + _1818)) + 9.9999999392252902907785028219223e-09) + (((_1833 * _1865) + _1818) * _1832))) * _1832;
    float _4014 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1878 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1842 / ((_1846 * _1846) * 3.141590118408203125));
    uint _1889 = _1668 + 9u;
    float _1900 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1705].w)) * _409) * 0.949999988079071044921875);
    float _1901 = _1900 * _1900;
    float _1902 = cbLight._m0[_1705].x + _487;
    float _1903 = cbLight._m0[_1705].y + _488;
    float _1904 = cbLight._m0[_1705].z + _489;
    float _1908 = inversesqrt(dot(vec3(_1902, _1903, _1904), vec3(_1902, _1903, _1904)));
    float _1909 = _1908 * _1902;
    float _1910 = _1908 * _1903;
    float _1911 = _1908 * _1904;
    float _1912 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1705].xyz));
    float _4025 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1916 = dot(vec3(_406, _407, _408), vec3(_1909, _1910, _1911));
    float _4036 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1919 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _1920 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_1909, _1910, _1911));
    float _4047 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1924 = _1901 * _1901;
    float _1928 = ((_1919 * _1919) * (_1924 + (-1.0))) + 1.0;
    float _1935 = exp2(log2(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * 5.0);
    float _1942 = 1.0 - _1901;
    float _1952 = (0.5 / (((_1833 * ((_1915 * _1942) + _1901)) + 9.9999999392252902907785028219223e-09) + (((_1833 * _1942) + _1901) * _1915))) * _1915;
    float _4058 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1954 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1924 / ((_1928 * _1928) * 3.141590118408203125));
    float _1964 = (((((_1935 * _1855) + _574) * cbLight._m0[_1889].x) * _1954) * _1691) + (((((_1854 * _1855) + _574) * cbLight._m0[_1804].x) * _1878) * _1701);
    float _1965 = (((((_1935 * _1857) + _576) * cbLight._m0[_1889].y) * _1954) * _1691) + (((((_1854 * _1857) + _576) * cbLight._m0[_1804].y) * _1878) * _1701);
    float _1966 = (((((_1935 * _1858) + _577) * cbLight._m0[_1889].z) * _1954) * _1691) + (((((_1854 * _1858) + _577) * cbLight._m0[_1804].z) * _1878) * _1701);
    float _2028;
    float _2030;
    float _2032;
    if (_1741)
    {
        _2028 = _1964;
        _2030 = _1965;
        _2032 = _1966;
    }
    else
    {
        uint _2034 = _1668 + 2u;
        uint _2038 = _1668 + 10u;
        float _2052 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _409) * 0.949999988079071044921875);
        float _2053 = _2052 * _2052;
        float _2054 = cbLight._m0[_2034].x + _487;
        float _2055 = cbLight._m0[_2034].y + _488;
        float _2056 = cbLight._m0[_2034].z + _489;
        float _2060 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
        float _2061 = _2060 * _2054;
        float _2062 = _2060 * _2055;
        float _2063 = _2060 * _2056;
        float _2064 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2034].xyz));
        float _4069 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2067 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2068 = dot(vec3(_406, _407, _408), vec3(_2061, _2062, _2063));
        float _4080 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2071 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2072 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2061, _2062, _2063));
        float _4091 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2076 = _2053 * _2053;
        float _2080 = ((_2071 * _2071) * (_2076 + (-1.0))) + 1.0;
        float _2087 = exp2(log2(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * 5.0);
        float _2094 = 1.0 - _2053;
        float _2104 = (0.5 / (((_1833 * ((_2067 * _2094) + _2053)) + 9.9999999392252902907785028219223e-09) + (((_1833 * _2094) + _2053) * _2067))) * _2067;
        float _4102 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2106 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_2076 / ((_2080 * _2080) * 3.141590118408203125));
        float _2107 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
        _2028 = (((((_2087 * _1855) + _574) * cbLight._m0[_2038].x) * _2106) * _2107) + _1964;
        _2030 = (((((_2087 * _1857) + _576) * cbLight._m0[_2038].y) * _2106) * _2107) + _1965;
        _2032 = (((((_2087 * _1858) + _577) * cbLight._m0[_2038].z) * _2106) * _2107) + _1966;
    }
    float _2142;
    float _2144;
    float _2146;
    if (_1759)
    {
        _2142 = _2028;
        _2144 = _2030;
        _2146 = _2032;
    }
    else
    {
        uint _2153 = _1668 + 3u;
        uint _2157 = _1668 + 11u;
        float _2171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2153].w)) * _409) * 0.949999988079071044921875);
        float _2172 = _2171 * _2171;
        float _2173 = cbLight._m0[_2153].x + _487;
        float _2174 = cbLight._m0[_2153].y + _488;
        float _2175 = cbLight._m0[_2153].z + _489;
        float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
        float _2180 = _2179 * _2173;
        float _2181 = _2179 * _2174;
        float _2182 = _2179 * _2175;
        float _2183 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2153].xyz));
        float _4118 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2186 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2187 = dot(vec3(_406, _407, _408), vec3(_2180, _2181, _2182));
        float _4129 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2190 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2191 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2180, _2181, _2182));
        float _4140 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2195 = _2172 * _2172;
        float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
        float _2206 = exp2(log2(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * 5.0);
        float _2213 = 1.0 - _2172;
        float _2223 = (0.5 / (((_1833 * ((_2186 * _2213) + _2172)) + 9.9999999392252902907785028219223e-09) + (((_1833 * _2213) + _2172) * _2186))) * _2186;
        float _4151 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2225 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
        float _2226 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
        _2142 = (((((_2206 * _1855) + _574) * cbLight._m0[_2157].x) * _2225) * _2226) + _2028;
        _2144 = (((((_2206 * _1857) + _576) * cbLight._m0[_2157].y) * _2225) * _2226) + _2030;
        _2146 = (((((_2206 * _1858) + _577) * cbLight._m0[_2157].z) * _2225) * _2226) + _2032;
    }
    float _2360;
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    float _2370;
    if (_1666.y == 0u)
    {
        float _2301 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2301;
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2301;
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2301;
        uvec4 _2316 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2317 = _2316.x;
        uint _2328 = uint((float(_2316.y) * floor(float(uint(cbSceneParam._m0[85u].y * _509) / _2317))) + floor(float(uint(cbSceneParam._m0[85u].x * _508) / _2317)));
        float _2338 = (log2(_2304 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2339 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        uint _2342 = uint(isnan(14.0) ? _2339 : (isnan(_2339) ? 14.0 : min(_2339, 14.0)));
        uvec4 _2347 = texelFetch(g_lightClusterGridBuffer, int(((_2342 << 2u) + (_2328 << 6u)) >> 2u));
        uint _2348 = _2347.x;
        uint _2349 = _2316.z;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        if (((((1u << ((_2349 >> 4u) & 15u)) + 4294967295u) & _2348) == 0u) || ((_2349 & 240u) == 0u))
        {
            _2448 = 0.0;
            _2450 = 0.0;
            _2452 = 0.0;
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
        }
        else
        {
            float _2449;
            float _2451;
            float _2453;
            float _2455;
            float _2457;
            float _2459;
            float _2600 = 0.0;
            float _2601 = 0.0;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            float _2605 = 0.0;
            uint _2606 = 0u;
            uint _2615;
            bool _2616;
            for (;;)
            {
                _2615 = texelFetch(g_lightClassification, int((((_2342 << 5u) + (_2328 << 9u)) + (_2606 << 2u)) >> 2u)).x;
                _2616 = _2615 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2616)
                {
                    frontier_phi_68_pred = _2602;
                    frontier_phi_68_pred_1 = _2605;
                    frontier_phi_68_pred_2 = _2604;
                    frontier_phi_68_pred_3 = _2603;
                    frontier_phi_68_pred_4 = _2601;
                    frontier_phi_68_pred_5 = _2600;
                }
                else
                {
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    uint _2751;
                    _2745 = _2600;
                    _2746 = _2601;
                    _2747 = _2602;
                    _2748 = _2603;
                    _2749 = _2604;
                    _2750 = _2605;
                    _2751 = _2615;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    for (;;)
                    {
                        uint _2755 = uint(findLSB(_2751)) + (_2606 << 5u);
                        uint _2752 = (_2751 + 4294967295u) & _2751;
                        uint _2757 = _2755 * 48u;
                        vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 3u)).x));
                        uint _2777 = (_2755 * 48u) + 4u;
                        vec4 _2790 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2777)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 3u)).x));
                        uint _2796 = (_2755 * 48u) + 8u;
                        vec3 _2807 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2796)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 2u)).x));
                        float _2811 = _2771.x - _2302;
                        float _2812 = _2771.y - _2303;
                        float _2813 = _2771.z - _2304;
                        float _2814 = dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813));
                        float _2817 = inversesqrt(_2814);
                        float _2818 = _2817 * _2811;
                        float _2819 = _2817 * _2812;
                        float _2820 = _2817 * _2813;
                        float _2821 = dot(vec3(_529, _532, _535), vec3(_2818, _2819, _2820));
                        float _2826 = 1.0 - (_2814 * _2771.w);
                        float _4177 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2827 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2828 = sqrt(_2814) * _2790.w;
                        float _2831 = 1.39999997615814208984375 / (_2828 + 1.39999997615814208984375);
                        float _2832 = _2831 * _2831;
                        float _2835 = ((1.0 - _2832) * _2821) + _2832;
                        float _2838 = _2828 * _2828;
                        float _2842 = ((isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))) * _2827) / ((_2838 * 0.699999988079071044921875) + 1.0);
                        float _2846 = (-0.0) - _2302;
                        float _2847 = (-0.0) - _2303;
                        float _2848 = (-0.0) - _2304;
                        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
                        float _2853 = _2852 * _2846;
                        float _2854 = _2852 * _2847;
                        float _2855 = _2852 * _2848;
                        float _2863 = exp2(log2(1.0 / ((_2838 * 3.5) + 5.0)) * 0.25);
                        float _2864 = 1.0 - _605;
                        float _2871 = sqrt(1.0 - ((1.0 - (_2864 * _2864)) * (1.0 - (_2863 * _2863))));
                        float _2872 = _2871 * _2871;
                        float _2873 = _2872 * _2872;
                        float _2874 = _2853 + _2818;
                        float _2875 = _2854 + _2819;
                        float _2876 = _2855 + _2820;
                        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
                        float _2884 = dot(vec3(_529, _532, _535), vec3(_2853, _2854, _2855));
                        float _4193 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2887 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                        float _2888 = dot(vec3(_529, _532, _535), vec3(_2880 * _2874, _2880 * _2875, _2880 * _2876));
                        float _4204 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2891 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2895 = ((_2891 * _2891) * (_2873 + (-1.0))) + 1.0;
                        float _2896 = _2831 * _2872;
                        float _2897 = _2896 * _2896;
                        float _2900 = ((1.0 - _2897) * _2821) + _2897;
                        float _4215 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2901 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2902 = 1.0 - _2872;
                        float _2912 = (0.5 / (((_2901 * ((_2887 * _2902) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2901 * _2902) + _2872) * _2887))) * _2901;
                        float _4226 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2923 = (((_2873 * 3.1415927410125732421875) * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) / ((_2895 * _2895) * ((_2838 * 2.1991131305694580078125) + 3.141590118408203125))) * _2827;
                        _2675 = (_2842 * _2790.x) + _2748;
                        _2676 = (_2842 * _2790.y) + _2749;
                        _2677 = (_2842 * _2790.z) + _2750;
                        _2672 = (_2923 * _2807.x) + _2745;
                        _2673 = (_2923 * _2807.y) + _2746;
                        _2674 = (_2923 * _2807.z) + _2747;
                        if (_2752 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2745 = _2672;
                            _2746 = _2673;
                            _2747 = _2674;
                            _2748 = _2675;
                            _2749 = _2676;
                            _2750 = _2677;
                            _2751 = _2752;
                        }
                    }
                    frontier_phi_68_pred = _2674;
                    frontier_phi_68_pred_1 = _2677;
                    frontier_phi_68_pred_2 = _2676;
                    frontier_phi_68_pred_3 = _2675;
                    frontier_phi_68_pred_4 = _2673;
                    frontier_phi_68_pred_5 = _2672;
                }
                _2453 = frontier_phi_68_pred;
                _2459 = frontier_phi_68_pred_1;
                _2457 = frontier_phi_68_pred_2;
                _2455 = frontier_phi_68_pred_3;
                _2451 = frontier_phi_68_pred_4;
                _2449 = frontier_phi_68_pred_5;
                uint _2607 = _2606 + 1u;
                if (_2607 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2600 = _2449;
                    _2601 = _2451;
                    _2602 = _2453;
                    _2603 = _2455;
                    _2604 = _2457;
                    _2605 = _2459;
                    _2606 = _2607;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2448 = _2449;
            _2450 = _2451;
            _2452 = _2453;
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
        }
        uvec4 _2462 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2463 = _2462.z;
        uint _2465 = (_2463 >> 8u) & 15u;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        if (((4294967295u << _2465) & _2348) == 0u)
        {
            _2568 = _2448;
            _2570 = _2450;
            _2572 = _2452;
            _2574 = _2454;
            _2576 = _2456;
            _2578 = _2458;
        }
        else
        {
            float _2593 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
            float _2594 = _2593 * _2302;
            float _2595 = _2593 * _2303;
            float _2596 = _2593 * _2304;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2465 < ((_2463 >> 12u) & 15u))
            {
                float _2569;
                float _2571;
                float _2573;
                float _2575;
                float _2577;
                float _2579;
                float _2728 = _2448;
                float _2729 = _2450;
                float _2730 = _2452;
                float _2731 = _2454;
                float _2732 = _2456;
                float _2733 = _2458;
                uint _2734 = _2465;
                uint _2743;
                bool _2744;
                for (;;)
                {
                    _2743 = texelFetch(g_lightClassification, int((((_2342 << 5u) + (_2328 << 9u)) + (_2734 << 2u)) >> 2u)).x;
                    _2744 = _2743 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2744)
                    {
                        frontier_phi_79_pred = _2733;
                        frontier_phi_79_pred_1 = _2732;
                        frontier_phi_79_pred_2 = _2731;
                        frontier_phi_79_pred_3 = _2730;
                        frontier_phi_79_pred_4 = _2729;
                        frontier_phi_79_pred_5 = _2728;
                    }
                    else
                    {
                        float _2937;
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _2950 = _2728;
                        float _2951 = _2729;
                        float _2952 = _2730;
                        float _2953 = _2731;
                        float _2954 = _2732;
                        float _2955 = _2733;
                        uint _2956 = _2743;
                        uint _2957;
                        vec4 _2982;
                        float _2983;
                        vec4 _2998;
                        vec3 _3010;
                        vec4 _3026;
                        vec4 _3042;
                        float _3089;
                        bool _3090;
                        for (;;)
                        {
                            uint _2967 = ((_2734 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2956));
                            _2957 = (_2956 + 4294967295u) & _2956;
                            uint _2969 = _2967 * 40u;
                            _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            _2983 = _2982.w;
                            uint _2985 = (_2967 * 40u) + 4u;
                            _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            uint _3000 = (_2967 * 40u) + 8u;
                            _3010 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x));
                            uint _3013 = (_2967 * 40u) + 16u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3029 = (_2967 * 40u) + 20u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3045 = (_2967 * 40u) + 24u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3064 = (_2967 * 40u) + 28u;
                            vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            _3089 = fma(_2304, _3077.z, fma(_2303, _3077.y, _3077.x * _2302)) + _3077.w;
                            _3090 = !((fma(_2304, _3058.z, fma(_2303, _3058.y, _3058.x * _2302)) + _3058.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3090)
                            {
                                float _3117 = _2982.x - _2302;
                                float _3118 = _2982.y - _2303;
                                float _3119 = _2982.z - _2304;
                                float _3120 = dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119));
                                float _3123 = inversesqrt(_3120);
                                float _3124 = _3123 * _3117;
                                float _3125 = _3123 * _3118;
                                float _3126 = _3123 * _3119;
                                float _3130 = 1.0 - (_3120 / (_2983 * _2983));
                                float _4237 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3135 = sqrt(_3120) * _2998.w;
                                float _3137 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                                float _3138 = _3137 * _3137;
                                float _3141 = ((1.0 - _3138) * dot(vec3(_3124, _3125, _3126), vec3(_529, _532, _535))) + _3138;
                                float _3144 = _3135 * _3135;
                                float _3148 = (fma(_2304, _3026.z, fma(_2303, _3026.y, _3026.x * _2302)) + _3026.w) / _3089;
                                float _3149 = (fma(_2304, _3042.z, fma(_2303, _3042.y, _3042.x * _2302)) + _3042.w) / _3089;
                                float _3153 = 1.0 - dot(vec2(_3148, _3149), vec2(_3148, _3149));
                                float _4253 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                                float _3155 = _3154 * (((isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * _3131) / ((_3144 * 0.699999988079071044921875) + 1.0));
                                float _3167 = exp2(log2(1.0 / ((_3144 * 3.5) + 5.0)) * 0.25);
                                float _3168 = 1.0 - _605;
                                float _3175 = sqrt(1.0 - ((1.0 - (_3168 * _3168)) * (1.0 - (_3167 * _3167))));
                                float _3176 = _3175 * _3175;
                                float _3177 = _3176 * _3176;
                                float _3178 = _3124 - _2594;
                                float _3179 = _3125 - _2595;
                                float _3180 = _3126 - _2596;
                                float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                                float _3188 = dot(vec3(_529, _532, _535), vec3((-0.0) - _2594, (-0.0) - _2595, (-0.0) - _2596));
                                float _4264 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3191 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3192 = dot(vec3(_529, _532, _535), vec3(_3184 * _3178, _3184 * _3179, _3184 * _3180));
                                float _4275 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3195 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3199 = ((_3195 * _3195) * (_3177 + (-1.0))) + 1.0;
                                float _3200 = _3137 * _3176;
                                float _3201 = _3200 * _3200;
                                float _3207 = ((1.0 - _3201) * dot(vec3(_529, _532, _535), vec3(_3124, _3125, _3126))) + _3201;
                                float _4286 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3209 = 1.0 - _3176;
                                float _3219 = (0.5 / (((_3208 * ((_3191 * _3209) + _3176)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3176) * _3191))) * _3208;
                                float _4297 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3229 = (_3154 * _3131) * (((_3177 * 3.1415927410125732421875) * (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) / ((_3199 * _3199) * ((_3144 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3155 * _2998.z;
                                frontier_phi_85_pred_1 = _3155 * _2998.y;
                                frontier_phi_85_pred_2 = _3155 * _2998.x;
                                frontier_phi_85_pred_3 = _3229 * _3010.z;
                                frontier_phi_85_pred_4 = _3229 * _3010.y;
                                frontier_phi_85_pred_5 = _3229 * _3010.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3238 = frontier_phi_85_pred;
                            _3237 = frontier_phi_85_pred_1;
                            _3236 = frontier_phi_85_pred_2;
                            _3235 = frontier_phi_85_pred_3;
                            _3234 = frontier_phi_85_pred_4;
                            _3233 = frontier_phi_85_pred_5;
                            _2940 = _3236 + _2953;
                            _2941 = _3237 + _2954;
                            _2942 = _3238 + _2955;
                            _2937 = _3233 + _2950;
                            _2938 = _3234 + _2951;
                            _2939 = _3235 + _2952;
                            if (_2957 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2950 = _2937;
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2957;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2942;
                        frontier_phi_79_pred_1 = _2941;
                        frontier_phi_79_pred_2 = _2940;
                        frontier_phi_79_pred_3 = _2939;
                        frontier_phi_79_pred_4 = _2938;
                        frontier_phi_79_pred_5 = _2937;
                    }
                    _2579 = frontier_phi_79_pred;
                    _2577 = frontier_phi_79_pred_1;
                    _2575 = frontier_phi_79_pred_2;
                    _2573 = frontier_phi_79_pred_3;
                    _2571 = frontier_phi_79_pred_4;
                    _2569 = frontier_phi_79_pred_5;
                    uint _2735 = _2734 + 1u;
                    if (_2735 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2728 = _2569;
                        _2729 = _2571;
                        _2730 = _2573;
                        _2731 = _2575;
                        _2732 = _2577;
                        _2733 = _2579;
                        _2734 = _2735;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2575;
                frontier_phi_60_61_ladder_1 = _2579;
                frontier_phi_60_61_ladder_2 = _2577;
                frontier_phi_60_61_ladder_3 = _2573;
                frontier_phi_60_61_ladder_4 = _2571;
                frontier_phi_60_61_ladder_5 = _2569;
            }
            else
            {
                frontier_phi_60_61_ladder = _2454;
                frontier_phi_60_61_ladder_1 = _2458;
                frontier_phi_60_61_ladder_2 = _2456;
                frontier_phi_60_61_ladder_3 = _2452;
                frontier_phi_60_61_ladder_4 = _2450;
                frontier_phi_60_61_ladder_5 = _2448;
            }
            _2568 = frontier_phi_60_61_ladder_5;
            _2570 = frontier_phi_60_61_ladder_4;
            _2572 = frontier_phi_60_61_ladder_3;
            _2574 = frontier_phi_60_61_ladder;
            _2576 = frontier_phi_60_61_ladder_2;
            _2578 = frontier_phi_60_61_ladder_1;
        }
        float _2583 = isnan(1.0) ? _589 : (isnan(_589) ? 1.0 : min(_589, 1.0));
        _2360 = (_2583 * _2574) + _1797;
        _2362 = (_2583 * _2576) + _1799;
        _2364 = (_2583 * _2578) + _1801;
        _2366 = ((_2568 * _574) * _2583) + _2142;
        _2368 = ((_2570 * _576) * _2583) + _2144;
        _2370 = ((_2572 * _577) * _2583) + _2146;
    }
    else
    {
        _2360 = _1797;
        _2362 = _1799;
        _2364 = _1801;
        _2366 = _2142;
        _2368 = _2144;
        _2370 = _2146;
    }
    float _4313 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4324 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4335 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _2387 = ((isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2360 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _589))) + ((_2366 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1431)) * cbPerFrame._m0[3u].x);
    float _2388 = ((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2362 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _589))) + ((_2368 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _1431)) * cbPerFrame._m0[3u].x);
    float _2389 = ((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2364 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _589))) + ((_2370 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1431)) * cbPerFrame._m0[3u].x);
    uint _2390 = _548 + 6u;
    float _2398 = _508 / cbSceneParam._m0[86u].x;
    float _2399 = _509 / cbSceneParam._m0[86u].y;
    vec4 _2413 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2398, _2399, (log2((isnan(cbSceneParam._m0[77u].w) ? _429 : (isnan(_429) ? cbSceneParam._m0[77u].w : min(_429, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2415 = _2413.x;
    float _2416 = _2413.y;
    float _2417 = _2413.z;
    float _2418 = _2413.w;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    if (_429 > cbSceneParam._m0[78u].w)
    {
        float _2473 = isnan(_429) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _429 : min(cbSceneParam._m0[80u].w, _429));
        float _2474 = _2473 / _429;
        float _2485 = _2474 * _480;
        float _2486 = _481 * _2474;
        float _2487 = (-0.0) - _2486;
        float _2488 = _2474 * _482;
        float _2490 = (cbSceneParam._m0[77u].w * _2487) / _2473;
        float _2491 = _2490 + cbSceneParam._m0[79u].w;
        float _2492 = cbSceneParam._m0[79u].w - _2486;
        float _2498 = sqrt(((_2485 * _2485) + (_2486 * _2486)) + (_2488 * _2488));
        float _2501 = (1.0 - (cbSceneParam._m0[77u].w / _2473)) * _2498;
        float _2506 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2508 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2685;
        if (abs((_2487 - _2490) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2685 = ((((_2491 > 0.0) ? exp2(_2506 * _2491) : (2.0 - exp2(_2508 * _2491))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2501;
        }
        else
        {
            float _2629 = 1.0 / cbSceneParam._m0[80u].x;
            float _2630 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : max(_2491, _2492));
            float _2631 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : min(_2491, _2492));
            float _2640 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : min(_2630, 0.0));
            float _2641 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : min(_2631, 0.0));
            _2685 = ((abs(_2498 / _2487) * cbSceneParam._m0[80u].y) * ((((_2640 - _2641) * 2.0) - ((exp2(_2506 * (isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0)))) - exp2(_2506 * (isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0))))) * _2629)) - ((exp2(_2508 * _2640) - exp2(_2508 * _2641)) * _2629))) + (_2501 * cbSceneParam._m0[80u].z);
        }
        vec4 _2687 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2398, _2399, 1.0), 0.0);
        float _2696 = exp2((_2685 * (-1.44269502162933349609375)) * (1.0 - _2687.w));
        float _2697 = log2(_2696);
        float _2713 = log2(_2418);
        _2510 = (exp2(_2713 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].x)) * _2687.x) / cbSceneParam._m0[78u].x)) + _2415;
        _2512 = (exp2(_2713 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].y)) * _2687.y) / cbSceneParam._m0[78u].y)) + _2416;
        _2514 = (exp2(_2713 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].z)) * _2687.z) / cbSceneParam._m0[78u].z)) + _2417;
        _2516 = _2696 * _2418;
    }
    else
    {
        _2510 = _2415;
        _2512 = _2416;
        _2514 = _2417;
        _2516 = _2418;
    }
    bool _2723;
    vec4 _2526;
    vec4 _2548;
    float _2550;
    float _2554;
    float _2555;
    float _2556;
    float _2557;
    bool _2567;
    for (;;)
    {
        _2526 = cbMatDynParam._m0[0u];
        float _2528 = roundEven(_2526.y);
        bool _2529 = _2528 == 3.0;
        float _2530 = log2(_2516);
        float _2537 = exp2(_2530 * cbSceneParam._m0[78u].x) * _2387;
        float _2538 = exp2(_2530 * cbSceneParam._m0[78u].y) * _2388;
        float _2539 = exp2(_2530 * cbSceneParam._m0[78u].z) * _2389;
        float _2546 = _496 + (-0.5);
        _2548 = cbMtdParam._m0[1u];
        _2550 = _2548.y * _2546;
        float _2553 = (_2528 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2554 = _2553 * (_2529 ? _2537 : (_2537 + (cbSceneParam._m0[72u].w * _2510)));
        _2555 = _2553 * (_2529 ? _2538 : (_2538 + (cbSceneParam._m0[72u].w * _2512)));
        _2556 = _2553 * (_2529 ? _2539 : (_2539 + (cbSceneParam._m0[72u].w * _2514)));
        _2557 = _2546 * 0.999000012874603271484375;
        _2567 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2567)
        {
            if ((cbInstanceData._m0[_548 + 7u].x + _2557) < 0.5)
            {
                _2723 = true;
                break;
            }
        }
        uint _2664 = _550 + uint(_2526.w);
        if ((cbInstanceData._m0[_2664].w < 1.0) && ((cbInstanceData._m0[_2664].w + _2557) < 0.5))
        {
            _2723 = true;
            break;
        }
        if ((_2550 + 1.0) < _2548.x)
        {
            _2723 = true;
            break;
        }
        _2723 = false;
        break;
    }
    float _2928;
    if (_2723)
    {
        discard_state = true;
        _2928 = 0.0;
    }
    else
    {
        _2928 = cbInstanceData._m0[_2390].w;
    }
    SV_Target.x = _2554;
    SV_Target.y = _2555;
    SV_Target.z = _2556;
    SV_Target.w = _2928;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2390].w;
    discard_exit();
}


