#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _997;
float _3669;
float _3670;
float _3671;
float _3672;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    vec4 _243 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _272 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _272.z;
    float _280 = (_272.x * 2.0) + (-1.0);
    float _282 = (_272.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3681 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))));
    float _292 = fma(_289, _221, fma(_282, _214, _280 * _200));
    float _295 = fma(_289, _222, fma(_282, _215, _280 * _201));
    float _298 = fma(_289, _223, fma(_282, _216, _280 * _202));
    float _302 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    float _310 = cbMtdParam._m0[10u].x + dot(vec4(_302 * _292, _302 * _295, _302 * _298, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3692 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _311 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    vec4 _323 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _334 = ((_323.x - _249) * _311) + _249;
    float _335 = ((_323.y - _250) * _311) + _250;
    float _336 = ((_323.z - _251) * _311) + _251;
    vec4 _348 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _350 = _348.x;
    float _352 = _350 - (_350 * _311);
    vec4 _365 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _372 = (_365.x * 2.0) + (-1.0);
    float _373 = (_365.y * 2.0) + (-1.0);
    float _374 = dot(vec2(_372, _373), vec2(_372, _373));
    float _3703 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _382 = ((_365.z - _276) * _311) + _276;
    float _391 = ((sqrt(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) - _289) * _311) + _289;
    float _395 = (((_372 - _280) * _311) + _280) + (cbMtdParam._m0[10u].y * _280);
    float _396 = (((_373 - _282) * _311) + _282) + (cbMtdParam._m0[10u].y * _282);
    float _399 = fma(_391, _221, fma(_396, _214, _395 * _200));
    float _402 = fma(_391, _222, fma(_396, _215, _395 * _201));
    float _405 = fma(_391, _223, fma(_396, _216, _395 * _202));
    float _409 = inversesqrt(dot(vec3(_399, _402, _405), vec3(_399, _402, _405)));
    float _410 = _409 * _399;
    float _411 = _409 * _402;
    float _412 = _409 * _405;
    float _3714 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _413 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3736 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3747 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3758 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _417 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _433 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _474 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _484 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _474);
    float _485 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _474);
    float _486 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _474);
    float _490 = inversesqrt(dot(vec3(_484, _485, _486), vec3(_484, _485, _486)));
    float _491 = _484 * _490;
    float _492 = _485 * _490;
    float _493 = _486 * _490;
    vec4 _498 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _500 = _498.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _676 = sqrt(((_484 * _484) + (_485 * _485)) + (_486 * _486));
        float _682 = (cbMatDynParam._m0[5u].x * _676) + cbMatDynParam._m0[5u].y;
        float _3769 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _683 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _687 = (cbMatDynParam._m0[5u].z * _676) + cbMatDynParam._m0[5u].w;
        float _3780 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) - _683)) + _683) < ((_500 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _512 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _513 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _533 = fma(_412, cbSceneParam._m0[5u].z, fma(_411, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _410));
    float _536 = fma(_412, cbSceneParam._m0[6u].z, fma(_411, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _410));
    float _539 = fma(_412, cbSceneParam._m0[7u].z, fma(_411, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _410));
    uint _552 = uint(roundEven(NORMAL.w)) * 13u;
    uint _554 = _552 + 9u;
    uint _555 = _554 + uint(cbMatDynParam._m0[0u].w);
    float _561 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) * cbInstanceData._m0[_555].x;
    float _562 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_555].y;
    float _563 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_555].z;
    float _3791 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _567 = 1.0 - _417;
    float _568 = _564 * _567;
    float _569 = _565 * _567;
    float _570 = _566 * _567;
    float _575 = (_564 + (-0.039999999105930328369140625)) * _417;
    float _576 = (_565 + (-0.039999999105930328369140625)) * _417;
    float _577 = (_566 + (-0.039999999105930328369140625)) * _417;
    float _578 = _575 + 0.039999999105930328369140625;
    float _580 = _576 + 0.039999999105930328369140625;
    float _581 = _577 + 0.039999999105930328369140625;
    vec4 _590 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _512, cbSceneParam._m0[86u].y * _513));
    float _593 = _590.x * TEXCOORD.z;
    float _594 = dot(vec3(_410, _411, _412), vec3(_491, _492, _493));
    float _597 = _594 * 2.0;
    float _601 = (_597 * _410) - _491;
    float _602 = (_597 * _411) - _492;
    float _603 = (_597 * _412) - _493;
    float _607 = abs(dot(vec3(_491, _492, _493), vec3(_410, _411, _412)));
    float _3824 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _609 = sqrt(_413);
    float _622 = exp2((_609 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_609 * 3.0));
    float _628 = (1.0 - _622) * ((_609 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _629 = _622 * _609;
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _996;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _721 = fma(_665, cbModelParam._m0[26u].z, fma(_661, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _657));
        float _725 = fma(_665, cbModelParam._m0[27u].z, fma(_661, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _657));
        float _729 = fma(_665, cbModelParam._m0[28u].z, fma(_661, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _657));
        float _754 = _657 + _410;
        float _755 = _661 + _411;
        float _756 = _665 + _412;
        float _766 = fma(_756, cbModelParam._m0[26u].z, fma(_755, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754)) - _721;
        float _767 = fma(_756, cbModelParam._m0[27u].z, fma(_755, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754)) - _725;
        float _768 = fma(_756, cbModelParam._m0[28u].z, fma(_755, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754)) - _729;
        float _772 = inversesqrt(dot(vec3(_766, _767, _768), vec3(_766, _767, _768)));
        float _785 = ((_772 * _766) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_721 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _786 = ((_772 * _767) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_725 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _787 = ((_772 * _768) / cbModelParam._m0[34u].z) + ((((((_729 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        float _824 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_790.x + (-0.5));
        float _826 = _824 * (_790.y + (-0.5));
        float _827 = _824 * (_790.z + (-0.5));
        float _834 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_797.x + (-0.5));
        float _836 = _834 * (_797.y + (-0.5));
        float _837 = _834 * (_797.z + (-0.5));
        float _844 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_804.x + (-0.5));
        float _846 = _844 * (_804.y + (-0.5));
        float _847 = _844 * (_804.z + (-0.5));
        float _854 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_811.x + (-0.5));
        float _856 = _854 * (_811.y + (-0.5));
        float _857 = _854 * (_811.z + (-0.5));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = _825 * 0.5;
        float _862 = _835 * 0.5;
        float _863 = _845 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _878 = (dot(vec3(_410, _411, _412), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _888 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3872 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_890 + 1.0))) + _895) * _858;
        float _905 = _826 * 0.5;
        float _906 = _836 * 0.5;
        float _907 = _846 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _921 = (dot(vec3(_410, _411, _412), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _930 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3905 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_932 + 1.0))) + _937) * _859;
        float _947 = _827 * 0.5;
        float _948 = _837 * 0.5;
        float _949 = _847 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _963 = (dot(vec3(_410, _411, _412), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _972 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3938 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_974 + 1.0))) + _979) * _860;
        _996 = _827;
        _998 = _826;
        _999 = _825;
        _1000 = _837;
        _1001 = _836;
        _1002 = _835;
        _1003 = _847;
        _1004 = _846;
        _1005 = _845;
        _1006 = _860;
        _1007 = _859;
        _1008 = _858;
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
    }
    else
    {
        _996 = _997;
        _998 = _997;
        _999 = _997;
        _1000 = _997;
        _1001 = _997;
        _1002 = _997;
        _1003 = _997;
        _1004 = _997;
        _1005 = _997;
        _1006 = _997;
        _1007 = _997;
        _1008 = _997;
        _1009 = 0.0;
        _1010 = 0.0;
        _1011 = 0.0;
    }
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1040 = fma(_665, cbModelParam._m0[30u].z, fma(_661, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _657));
        float _1044 = fma(_665, cbModelParam._m0[31u].z, fma(_661, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _657));
        float _1048 = fma(_665, cbModelParam._m0[32u].z, fma(_661, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _657));
        float _1071 = _657 + _410;
        float _1072 = _661 + _411;
        float _1073 = _665 + _412;
        float _1083 = fma(_1073, cbModelParam._m0[30u].z, fma(_1072, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1071)) - _1040;
        float _1084 = fma(_1073, cbModelParam._m0[31u].z, fma(_1072, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1071)) - _1044;
        float _1085 = fma(_1073, cbModelParam._m0[32u].z, fma(_1072, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1071)) - _1048;
        float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
        float _1102 = ((_1089 * _1083) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1040 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1089 * _1084) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1044 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1089 * _1085) / cbModelParam._m0[35u].z) + ((((((_1048 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        float _1139 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1106.x + (-0.5));
        float _1141 = _1139 * (_1106.y + (-0.5));
        float _1142 = _1139 * (_1106.z + (-0.5));
        float _1149 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1113.x + (-0.5));
        float _1151 = _1149 * (_1113.y + (-0.5));
        float _1152 = _1149 * (_1113.z + (-0.5));
        float _1159 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1120.x + (-0.5));
        float _1161 = _1159 * (_1120.y + (-0.5));
        float _1162 = _1159 * (_1120.z + (-0.5));
        float _1169 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1127.x + (-0.5));
        float _1171 = _1169 * (_1127.y + (-0.5));
        float _1172 = _1169 * (_1127.z + (-0.5));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = _1140 * 0.5;
        float _1177 = _1150 * 0.5;
        float _1178 = _1160 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_410, _411, _412), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _4001 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1203 + 1.0))) + _1208) * _1173;
        float _1218 = _1141 * 0.5;
        float _1219 = _1151 * 0.5;
        float _1220 = _1161 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_410, _411, _412), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _4034 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1245 + 1.0))) + _1250) * _1174;
        float _1260 = _1142 * 0.5;
        float _1261 = _1152 * 0.5;
        float _1262 = _1162 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_410, _411, _412), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4067 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1287 + 1.0))) + _1292) * _1175;
        _1309 = _1142;
        _1310 = _1141;
        _1311 = _1140;
        _1312 = _1152;
        _1313 = _1151;
        _1314 = _1150;
        _1315 = _1162;
        _1316 = _1161;
        _1317 = _1160;
        _1318 = _1175;
        _1319 = _1174;
        _1320 = _1173;
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1323 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
    }
    else
    {
        _1309 = _997;
        _1310 = _997;
        _1311 = _997;
        _1312 = _997;
        _1313 = _997;
        _1314 = _997;
        _1315 = _997;
        _1316 = _997;
        _1317 = _997;
        _1318 = _997;
        _1319 = _997;
        _1320 = _997;
        _1321 = 0.0;
        _1322 = 0.0;
        _1323 = 0.0;
    }
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1009)) + _1009;
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1010)) + _1010;
    float _1335 = (cbModelParam._m0[1u].x * (_1323 - _1011)) + _1011;
    float _1356 = fma(_1335, cbSceneParam._m0[89u].z, fma(_1334, cbSceneParam._m0[89u].y, _1333 * cbSceneParam._m0[89u].x));
    float _1359 = fma(_1335, cbSceneParam._m0[90u].z, fma(_1334, cbSceneParam._m0[90u].y, _1333 * cbSceneParam._m0[90u].x));
    float _1362 = fma(_1335, cbSceneParam._m0[91u].z, fma(_1334, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1333));
    float _1377 = _601 * 0.5;
    float _1378 = _602 * 0.5;
    float _1379 = _603 * 0.5;
    float _1380 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1311, _1314, _1317, _1320));
    float _1383 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1386 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1420;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1393 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_996, _1000, _1003, _1006));
        float _1397 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_998, _1001, _1004, _1007));
        float _1401 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_999, _1002, _1005, _1008));
        float _1408 = dot(vec4(cbModelParam._m0[39u]), vec4(_1377, _1378, _1379, 1.0));
        _1420 = dot(vec3(isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1408) ? 0.0 : (isnan(0.0) ? _1408 : max(0.0, _1408))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1420 = 1.0;
    }
    float _1431;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1422 = dot(vec4(cbModelParam._m0[40u]), vec4(_1377, _1378, _1379, 1.0));
        _1431 = dot(vec3(isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1422) ? 0.0 : (isnan(0.0) ? _1422 : max(0.0, _1422))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1431 = 1.0;
    }
    float _1435 = (_1431 * cbModelParam._m0[1u].x) + (_1420 * (1.0 - cbModelParam._m0[1u].x));
    float _1445 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _413);
    float _1446 = isnan(_1445) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1445 : min(cbModelParam._m0[25u].z, _1445));
    float _1528;
    float _1530;
    float _1532;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1495 = fma(_665, cbModelParam._m0[13u].z, fma(_661, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _657)) + cbModelParam._m0[13u].w;
        float _1499 = fma(_665, cbModelParam._m0[14u].z, fma(_661, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _657)) + cbModelParam._m0[14u].w;
        float _1503 = fma(_665, cbModelParam._m0[15u].z, fma(_661, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _657)) + cbModelParam._m0[15u].w;
        float _1506 = fma(_603, cbModelParam._m0[13u].z, fma(_602, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _601));
        float _1509 = fma(_603, cbModelParam._m0[14u].z, fma(_602, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _601));
        float _1512 = fma(_603, cbModelParam._m0[15u].z, fma(_602, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _601));
        float _1540;
        if (_1506 > 0.0)
        {
            _1540 = abs((1.0 - _1495) / _1506);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1495 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1540 = frontier_phi_19_17_ladder;
        }
        float _1715;
        if (_1509 > 0.0)
        {
            _1715 = abs((1.0 - _1499) / _1509);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1499 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1715 = frontier_phi_28_24_ladder;
        }
        float _2010;
        if (_1512 > 0.0)
        {
            _2010 = abs((1.0 - _1503) / _1512);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1503 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2010 = frontier_phi_40_35_ladder;
        }
        float _2012 = isnan(_1715) ? _1540 : (isnan(_1540) ? _1715 : min(_1540, _1715));
        float _2013 = isnan(_2010) ? _2012 : (isnan(_2012) ? _2010 : min(_2012, _2010));
        float _2017 = (_2013 * _1506) + _1495;
        float _2018 = (_2013 * _1509) + _1499;
        float _2019 = (_2013 * _1512) + _1503;
        float _2020 = _2013 * 9.9999997473787516355514526367188e-05;
        float _2022 = (-1.0) - _2020;
        float _2024 = _2020 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2019 > _2024) || ((_2019 < _2022) || ((_2018 > _2024) || ((_2018 < _2022) || ((_2017 < _2022) || (_2017 > _2024))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2164 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2019, cbModelParam._m0[9u].z, fma(_2018, cbModelParam._m0[9u].y, _2017 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2019, cbModelParam._m0[10u].z, fma(_2018, cbModelParam._m0[10u].y, _2017 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2019, cbModelParam._m0[11u].z, fma(_2018, cbModelParam._m0[11u].y, _2017 * cbModelParam._m0[11u].x))), _1446);
            frontier_phi_18_40_ladder = _2164.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2164.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2164.x * cbModelParam._m0[1u].y;
        }
        _1528 = frontier_phi_18_40_ladder_2;
        _1530 = frontier_phi_18_40_ladder_1;
        _1532 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1516 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_601, _602, _603), _1446);
        _1528 = _1516.x * cbModelParam._m0[1u].y;
        _1530 = _1516.y * cbModelParam._m0[1u].y;
        _1532 = _1516.z * cbModelParam._m0[1u].y;
    }
    float _1536 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _413);
    float _1537 = isnan(_1536) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1536 : min(cbModelParam._m0[25u].w, _1536));
    float _1630;
    float _1632;
    float _1634;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1594 = fma(_665, cbModelParam._m0[21u].z, fma(_661, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _657)) + cbModelParam._m0[21u].w;
        float _1598 = fma(_665, cbModelParam._m0[22u].z, fma(_661, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _657)) + cbModelParam._m0[22u].w;
        float _1602 = fma(_665, cbModelParam._m0[23u].z, fma(_661, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _657)) + cbModelParam._m0[23u].w;
        float _1605 = fma(_603, cbModelParam._m0[21u].z, fma(_602, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _601));
        float _1608 = fma(_603, cbModelParam._m0[22u].z, fma(_602, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _601));
        float _1611 = fma(_603, cbModelParam._m0[23u].z, fma(_602, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _601));
        float _1720;
        if (_1605 > 0.0)
        {
            _1720 = abs((1.0 - _1594) / _1605);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1594 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1720 = frontier_phi_30_26_ladder;
        }
        float _2037;
        if (_1608 > 0.0)
        {
            _2037 = abs((1.0 - _1598) / _1608);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1598 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2037 = frontier_phi_42_37_ladder;
        }
        float _2375;
        if (_1611 > 0.0)
        {
            _2375 = abs((1.0 - _1602) / _1611);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1602 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2375 = frontier_phi_52_49_ladder;
        }
        float _2377 = isnan(_2037) ? _1720 : (isnan(_1720) ? _2037 : min(_1720, _2037));
        float _2378 = isnan(_2375) ? _2377 : (isnan(_2377) ? _2375 : min(_2377, _2375));
        float _2382 = (_2378 * _1605) + _1594;
        float _2383 = (_2378 * _1608) + _1598;
        float _2384 = (_2378 * _1611) + _1602;
        float _2385 = _2378 * 9.9999997473787516355514526367188e-05;
        float _2386 = (-1.0) - _2385;
        float _2388 = _2385 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2384 > _2388) || ((_2384 < _2386) || ((_2383 > _2388) || ((_2383 < _2386) || ((_2382 < _2386) || (_2382 > _2388))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2506 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2384, cbModelParam._m0[17u].z, fma(_2383, cbModelParam._m0[17u].y, _2382 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2384, cbModelParam._m0[18u].z, fma(_2383, cbModelParam._m0[18u].y, _2382 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2384, cbModelParam._m0[19u].z, fma(_2383, cbModelParam._m0[19u].y, _2382 * cbModelParam._m0[19u].x))), _1537);
            frontier_phi_27_52_ladder = _2506.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2506.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2506.x * cbModelParam._m0[1u].z;
        }
        _1630 = frontier_phi_27_52_ladder_2;
        _1632 = frontier_phi_27_52_ladder_1;
        _1634 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1614 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_601, _602, _603), _1537);
        _1630 = _1614.x * cbModelParam._m0[1u].z;
        _1632 = _1614.y * cbModelParam._m0[1u].z;
        _1634 = _1614.z * cbModelParam._m0[1u].z;
    }
    float _1647 = (((_628 * _578) + _629) * _593) * ((cbModelParam._m0[1u].w * (_1630 - _1528)) + _1528);
    float _1649 = (((_628 * _580) + _629) * _593) * ((cbModelParam._m0[1u].w * (_1632 - _1530)) + _1530);
    float _1651 = (((_628 * _581) + _629) * _593) * ((cbModelParam._m0[1u].w * (_1634 - _1532)) + _1532);
    float _1654 = fma(_1651, cbSceneParam._m0[89u].z, fma(_1649, cbSceneParam._m0[89u].y, _1647 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1651, cbSceneParam._m0[90u].z, fma(_1649, cbSceneParam._m0[90u].y, _1647 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1651, cbSceneParam._m0[91u].z, fma(_1649, cbSceneParam._m0[91u].y, _1647 * cbSceneParam._m0[91u].x));
    float _1694 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1698 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1702 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1706 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1707 = _1694 / _1706;
    float _1708 = _1698 / _1706;
    float _1709 = _1702 / _1706;
    float _1856;
    float _1857;
    float _1858;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1736 = ((uint(_1709 > cbSceneParam._m0[59u].y) + uint(_1709 > cbSceneParam._m0[59u].x)) + uint(_1709 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1737 = _1736 + 43u;
        uint _1745 = _1736 + 44u;
        uint _1753 = _1736 + 45u;
        uint _1761 = _1736 + 46u;
        float _1772 = fma(_1706, cbSceneParam._m0[_1737].w, fma(_1702, cbSceneParam._m0[_1737].z, fma(_1698, cbSceneParam._m0[_1737].y, _1694 * cbSceneParam._m0[_1737].x)));
        float _1776 = fma(_1706, cbSceneParam._m0[_1745].w, fma(_1702, cbSceneParam._m0[_1745].z, fma(_1698, cbSceneParam._m0[_1745].y, _1694 * cbSceneParam._m0[_1745].x)));
        float _1784 = fma(_1706, cbSceneParam._m0[_1761].w, fma(_1702, cbSceneParam._m0[_1761].z, fma(_1698, cbSceneParam._m0[_1761].y, _1694 * cbSceneParam._m0[_1761].x)));
        float _1789 = cbSceneParam._m0[33u].z * _1784;
        float _1791 = cbSceneParam._m0[33u].w * _1784;
        float _1794 = fma(_1706, cbSceneParam._m0[_1753].w, fma(_1702, cbSceneParam._m0[_1753].z, fma(_1698, cbSceneParam._m0[_1753].y, _1694 * cbSceneParam._m0[_1753].x))) / _1784;
        float _1842 = (cbSceneParam._m0[33u].x - sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709))) * cbSceneParam._m0[33u].y;
        float _4193 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1849 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1789 + _1772) / _1784, (_1791 + _1776) / _1784), _1794), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1791 + _1772) / _1784, (_1776 - _1789) / _1784), _1794), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1772 - _1789) / _1784, (_1776 - _1791) / _1784), _1794), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1772 - _1791) / _1784, (_1789 + _1776) / _1784), _1794), 0.0)).x), vec4(0.25)));
        _1856 = 1.0 - (_1849 * cbSceneParam._m0[34u].x);
        _1857 = 1.0 - (_1849 * cbSceneParam._m0[34u].y);
        _1858 = 1.0 - (_1849 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1856 = 1.0;
        _1857 = 1.0;
        _1858 = 1.0;
    }
    float _1922;
    float _1924;
    float _1926;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1910 = fma(_1706, cbSceneParam._m0[63u].w, fma(_1702, cbSceneParam._m0[63u].z, fma(_1698, cbSceneParam._m0[63u].y, _1694 * cbSceneParam._m0[63u].x)));
        float _1911 = fma(_1706, cbSceneParam._m0[60u].w, fma(_1702, cbSceneParam._m0[60u].z, fma(_1698, cbSceneParam._m0[60u].y, _1694 * cbSceneParam._m0[60u].x))) / _1910;
        float _1912 = fma(_1706, cbSceneParam._m0[61u].w, fma(_1702, cbSceneParam._m0[61u].z, fma(_1698, cbSceneParam._m0[61u].y, _1694 * cbSceneParam._m0[61u].x))) / _1910;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1911 >= cbSceneParam._m0[64u].x) && (_1912 >= cbSceneParam._m0[64u].y)) && (_1911 <= cbSceneParam._m0[64u].z)) && (_1912 <= cbSceneParam._m0[64u].w))
        {
            float _2050 = fma(_1706, cbSceneParam._m0[62u].w, fma(_1702, cbSceneParam._m0[62u].z, fma(_1698, cbSceneParam._m0[62u].y, _1694 * cbSceneParam._m0[62u].x))) / _1910;
            float _2054 = isnan(cbSceneParam._m0[41u].w) ? _2050 : (isnan(_2050) ? cbSceneParam._m0[41u].w : max(_2050, cbSceneParam._m0[41u].w));
            float _2097 = (cbSceneParam._m0[33u].x - sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709))) * cbSceneParam._m0[33u].y;
            float _4209 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
            float _2104 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1911, cbSceneParam._m0[33u].w + _1912), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1911, _1912 - cbSceneParam._m0[33u].z), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1911 - cbSceneParam._m0[33u].z, _1912 - cbSceneParam._m0[33u].w), _2054), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1911 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1912), _2054), 0.0)).x), vec4(0.25)));
            float _2108 = 1.0 - (_2104 * cbSceneParam._m0[34u].x);
            float _2109 = 1.0 - (_2104 * cbSceneParam._m0[34u].y);
            float _2110 = 1.0 - (_2104 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2109) ? _1857 : (isnan(_1857) ? _2109 : min(_1857, _2109));
            frontier_phi_39_38_ladder_1 = isnan(_2108) ? _1856 : (isnan(_1856) ? _2108 : min(_1856, _2108));
            frontier_phi_39_38_ladder_2 = isnan(_2110) ? _1858 : (isnan(_1858) ? _2110 : min(_1858, _2110));
        }
        else
        {
            frontier_phi_39_38_ladder = _1857;
            frontier_phi_39_38_ladder_1 = _1856;
            frontier_phi_39_38_ladder_2 = _1858;
        }
        _1922 = frontier_phi_39_38_ladder_1;
        _1924 = frontier_phi_39_38_ladder;
        _1926 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1922 = _1856;
        _1924 = _1857;
        _1926 = _1858;
    }
    uvec4 _1931 = floatBitsToUint(cbInstanceData._m0[_552 + 5u]);
    uint _1933 = _1931.x * 14u;
    uint _1934 = _1933 + 13u;
    float _1941 = _593 + (-1.0);
    float _1946 = (cbLight._m0[_1934].x * _1941) + 1.0;
    float _1947 = (cbLight._m0[_1934].y * _1941) + 1.0;
    float _1948 = (cbLight._m0[_1934].z * _1941) + 1.0;
    float _1949 = (cbLight._m0[_1934].w * _1941) + 1.0;
    uint _1950 = _1933 + 5u;
    float _1956 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
    uint _1960 = _1933 + 4u;
    float _1969 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
    uint _1973 = _1933 | 1u;
    float _1984 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_410, _411, _412));
    float _1987 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_410, _411, _412));
    float _4245 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _4256 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1992 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * 0.3183098733425140380859375;
    float _1994 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.3183098733425140380859375;
    float _2001 = ((cbLight._m0[_1950].x * _1956) * _1994) + (((cbLight._m0[_1960].x * _1922) * _1969) * _1992);
    float _2002 = ((_1956 * cbLight._m0[_1950].y) * _1994) + (((cbLight._m0[_1960].y * _1924) * _1969) * _1992);
    float _2003 = ((_1956 * cbLight._m0[_1950].z) * _1994) + (((cbLight._m0[_1960].z * _1926) * _1969) * _1992);
    uvec4 _2007 = floatBitsToUint(cbLight._m0[_1933 + 12u]);
    bool _2009 = _2007.x == 0u;
    float _2111;
    float _2113;
    float _2115;
    if (_2009)
    {
        _2111 = _2001;
        _2113 = _2002;
        _2115 = _2003;
    }
    else
    {
        uint _2119 = _1933 + 6u;
        float _2135 = (dot(vec3(cbLight._m0[_1933 + 2u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _2136 = _2135 * _2135;
        float _4267 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2137 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2138 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2111 = (((cbLight._m0[_2119].x * 0.3183098733425140380859375) * _2137) * _2138) + _2001;
        _2113 = (((cbLight._m0[_2119].y * 0.3183098733425140380859375) * _2137) * _2138) + _2002;
        _2115 = (((cbLight._m0[_2119].z * 0.3183098733425140380859375) * _2137) * _2138) + _2003;
    }
    bool _2118 = _2007.y == 0u;
    float _2173;
    float _2175;
    float _2177;
    if (_2118)
    {
        _2173 = _2111;
        _2175 = _2113;
        _2177 = _2115;
    }
    else
    {
        uint _2346 = _1933 + 7u;
        float _2362 = (dot(vec3(cbLight._m0[_1933 + 3u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _2363 = _2362 * _2362;
        float _4283 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2364 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2365 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2173 = (((cbLight._m0[_2346].x * 0.3183098733425140380859375) * _2364) * _2365) + _2111;
        _2175 = (((cbLight._m0[_2346].y * 0.3183098733425140380859375) * _2364) * _2365) + _2113;
        _2177 = (((cbLight._m0[_2346].z * 0.3183098733425140380859375) * _2364) * _2365) + _2115;
    }
    uint _2180 = _1933 + 8u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1933].w)) * _413) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_1933].x + _491;
    float _2196 = cbLight._m0[_1933].y + _492;
    float _2197 = cbLight._m0[_1933].z + _493;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1933].xyz));
    float _4299 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _4310 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _2209 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2210 = dot(vec3(_410, _411, _412), vec3(_2202, _2203, _2204));
    float _4321 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_2202, _2203, _2204));
    float _4332 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2194 * _2194;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2230 = exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0);
    float _2231 = 0.959999978542327880859375 - _575;
    float _2233 = 0.959999978542327880859375 - _576;
    float _2234 = 0.959999978542327880859375 - _577;
    float _2241 = 1.0 - _2194;
    float _2252 = (0.5 / (((_2209 * ((_2208 * _2241) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2241) + _2194) * _2208))) * _2208;
    float _4343 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2254 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    uint _2268 = _1933 + 9u;
    float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _413) * 0.949999988079071044921875);
    float _2280 = _2279 * _2279;
    float _2281 = cbLight._m0[_1973].x + _491;
    float _2282 = cbLight._m0[_1973].y + _492;
    float _2283 = cbLight._m0[_1973].z + _493;
    float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
    float _2288 = _2287 * _2281;
    float _2289 = _2287 * _2282;
    float _2290 = _2287 * _2283;
    float _2291 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1973].xyz));
    float _4354 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2295 = dot(vec3(_410, _411, _412), vec3(_2288, _2289, _2290));
    float _4365 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2299 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2288, _2289, _2290));
    float _4376 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2303 = _2280 * _2280;
    float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
    float _2314 = exp2(log2(1.0 - (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) * 5.0);
    float _2321 = 1.0 - _2280;
    float _2331 = (0.5 / (((_2209 * ((_2294 * _2321) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2321) + _2280) * _2294))) * _2294;
    float _4387 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2333 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
    float _2343 = (((((_2314 * _2231) + _578) * cbLight._m0[_2268].x) * _2333) * _1956) + ((((cbLight._m0[_2180].x * _1922) * ((_2230 * _2231) + _578)) * _2254) * _1969);
    float _2344 = (((((_2314 * _2233) + _580) * cbLight._m0[_2268].y) * _2333) * _1956) + ((((cbLight._m0[_2180].y * _1924) * ((_2230 * _2233) + _580)) * _2254) * _1969);
    float _2345 = (((((_2314 * _2234) + _581) * cbLight._m0[_2268].z) * _2333) * _1956) + ((((cbLight._m0[_2180].z * _1926) * ((_2230 * _2234) + _581)) * _2254) * _1969);
    float _2401;
    float _2403;
    float _2405;
    if (_2009)
    {
        _2401 = _2343;
        _2403 = _2344;
        _2405 = _2345;
    }
    else
    {
        uint _2407 = _1933 + 2u;
        uint _2411 = _1933 + 10u;
        float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _413) * 0.949999988079071044921875);
        float _2426 = _2425 * _2425;
        float _2427 = cbLight._m0[_2407].x + _491;
        float _2428 = cbLight._m0[_2407].y + _492;
        float _2429 = cbLight._m0[_2407].z + _493;
        float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
        float _2434 = _2433 * _2427;
        float _2435 = _2433 * _2428;
        float _2436 = _2433 * _2429;
        float _2437 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_2407].xyz));
        float _4398 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2441 = dot(vec3(_410, _411, _412), vec3(_2434, _2435, _2436));
        float _4409 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2445 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2434, _2435, _2436));
        float _4420 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2449 = _2426 * _2426;
        float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
        float _2460 = exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0);
        float _2467 = 1.0 - _2426;
        float _2477 = (0.5 / (((_2209 * ((_2440 * _2467) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2467) + _2426) * _2440))) * _2440;
        float _4431 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2479 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
        float _2480 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2401 = (((((_2460 * _2231) + _578) * cbLight._m0[_2411].x) * _2479) * _2480) + _2343;
        _2403 = (((((_2460 * _2233) + _580) * cbLight._m0[_2411].y) * _2479) * _2480) + _2344;
        _2405 = (((((_2460 * _2234) + _581) * cbLight._m0[_2411].z) * _2479) * _2480) + _2345;
    }
    float _2511;
    float _2513;
    float _2515;
    if (_2118)
    {
        _2511 = _2401;
        _2513 = _2403;
        _2515 = _2405;
    }
    else
    {
        uint _2522 = _1933 + 3u;
        uint _2526 = _1933 + 11u;
        float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2522].w)) * _413) * 0.949999988079071044921875);
        float _2541 = _2540 * _2540;
        float _2542 = cbLight._m0[_2522].x + _491;
        float _2543 = cbLight._m0[_2522].y + _492;
        float _2544 = cbLight._m0[_2522].z + _493;
        float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
        float _2549 = _2548 * _2542;
        float _2550 = _2548 * _2543;
        float _2551 = _2548 * _2544;
        float _2552 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_2522].xyz));
        float _4447 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2556 = dot(vec3(_410, _411, _412), vec3(_2549, _2550, _2551));
        float _4458 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2560 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_2549, _2550, _2551));
        float _4469 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2564 = _2541 * _2541;
        float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
        float _2575 = exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0);
        float _2582 = 1.0 - _2541;
        float _2592 = (0.5 / (((_2209 * ((_2555 * _2582) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2582) + _2541) * _2555))) * _2555;
        float _4480 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2511 = (((((_2575 * _2231) + _578) * cbLight._m0[_2526].x) * _2594) * _2595) + _2401;
        _2513 = (((((_2575 * _2233) + _580) * cbLight._m0[_2526].y) * _2594) * _2595) + _2403;
        _2515 = (((((_2575 * _2234) + _581) * cbLight._m0[_2526].z) * _2594) * _2595) + _2405;
    }
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    if (_1931.y == 0u)
    {
        uvec4 _2616 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2617 = _2616.x;
        uint _2628 = uint((float(_2616.y) * floor(float(uint(cbSceneParam._m0[85u].y * _513) / _2617))) + floor(float(uint(cbSceneParam._m0[85u].x * _512) / _2617)));
        float _2638 = (log2(_1709 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2639 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        uint _2642 = uint(isnan(14.0) ? _2639 : (isnan(_2639) ? 14.0 : min(_2639, 14.0)));
        uvec4 _2647 = texelFetch(g_lightClusterGridBuffer, int(((_2642 << 2u) + (_2628 << 6u)) >> 2u));
        uint _2648 = _2647.x;
        uint _2649 = _2616.z;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        if (((((1u << ((_2649 >> 4u) & 15u)) + 4294967295u) & _2648) == 0u) || ((_2649 & 240u) == 0u))
        {
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
        }
        else
        {
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            uint _2885 = 0u;
            uint _2894;
            bool _2895;
            for (;;)
            {
                _2894 = texelFetch(g_lightClassification, int((((_2642 << 5u) + (_2628 << 9u)) + (_2885 << 2u)) >> 2u)).x;
                _2895 = _2894 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2895)
                {
                    frontier_phi_73_pred = _2884;
                    frontier_phi_73_pred_1 = _2883;
                    frontier_phi_73_pred_2 = _2882;
                    frontier_phi_73_pred_3 = _2881;
                    frontier_phi_73_pred_4 = _2880;
                    frontier_phi_73_pred_5 = _2879;
                }
                else
                {
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    uint _3030;
                    _3024 = _2879;
                    _3025 = _2880;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2894;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    for (;;)
                    {
                        uint _3034 = uint(findLSB(_3030)) + (_2885 << 5u);
                        uint _3031 = (_3030 + 4294967295u) & _3030;
                        uint _3036 = _3034 * 48u;
                        vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 3u)).x));
                        uint _3056 = (_3034 * 48u) + 4u;
                        vec4 _3069 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 3u)).x));
                        uint _3075 = (_3034 * 48u) + 8u;
                        vec3 _3086 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 2u)).x));
                        float _3090 = _3050.x - _1707;
                        float _3091 = _3050.y - _1708;
                        float _3092 = _3050.z - _1709;
                        float _3093 = dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092));
                        float _3096 = inversesqrt(_3093);
                        float _3097 = _3096 * _3090;
                        float _3098 = _3096 * _3091;
                        float _3099 = _3096 * _3092;
                        float _3100 = dot(vec3(_533, _536, _539), vec3(_3097, _3098, _3099));
                        float _3105 = 1.0 - (_3093 * _3050.w);
                        float _4506 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3106 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3107 = sqrt(_3093) * _3069.w;
                        float _3110 = 1.39999997615814208984375 / (_3107 + 1.39999997615814208984375);
                        float _3111 = _3110 * _3110;
                        float _3114 = ((1.0 - _3111) * _3100) + _3111;
                        float _3117 = _3107 * _3107;
                        float _3121 = ((isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))) * _3106) / ((_3117 * 0.699999988079071044921875) + 1.0);
                        float _3125 = (-0.0) - _1707;
                        float _3126 = (-0.0) - _1708;
                        float _3127 = (-0.0) - _1709;
                        float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                        float _3132 = _3131 * _3125;
                        float _3133 = _3131 * _3126;
                        float _3134 = _3131 * _3127;
                        float _3141 = exp2(log2(1.0 / ((_3117 * 3.5) + 5.0)) * 0.25);
                        float _3142 = 1.0 - _609;
                        float _3149 = sqrt(1.0 - ((1.0 - (_3142 * _3142)) * (1.0 - (_3141 * _3141))));
                        float _3150 = _3149 * _3149;
                        float _3151 = _3150 * _3150;
                        float _3152 = _3132 + _3097;
                        float _3153 = _3133 + _3098;
                        float _3154 = _3134 + _3099;
                        float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                        float _3162 = dot(vec3(_533, _536, _539), vec3(_3132, _3133, _3134));
                        float _4522 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3165 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3166 = dot(vec3(_533, _536, _539), vec3(_3158 * _3152, _3158 * _3153, _3158 * _3154));
                        float _4533 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3169 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3173 = ((_3169 * _3169) * (_3151 + (-1.0))) + 1.0;
                        float _3174 = _3110 * _3150;
                        float _3175 = _3174 * _3174;
                        float _3178 = ((1.0 - _3175) * _3100) + _3175;
                        float _4544 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3179 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3180 = 1.0 - _3150;
                        float _3190 = (0.5 / (((_3179 * ((_3165 * _3180) + _3150)) + 9.9999999392252902907785028219223e-09) + (((_3179 * _3180) + _3150) * _3165))) * _3179;
                        float _4555 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3201 = (((_3151 * 3.1415927410125732421875) * (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) / ((_3173 * _3173) * ((_3117 * 2.1991131305694580078125) + 3.141590118408203125))) * _3106;
                        _2954 = (_3121 * _3069.x) + _3027;
                        _2955 = (_3121 * _3069.y) + _3028;
                        _2956 = (_3121 * _3069.z) + _3029;
                        _2951 = (_3201 * _3086.x) + _3024;
                        _2952 = (_3201 * _3086.y) + _3025;
                        _2953 = (_3201 * _3086.z) + _3026;
                        if (_3031 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3024 = _2951;
                            _3025 = _2952;
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _3031;
                        }
                    }
                    frontier_phi_73_pred = _2956;
                    frontier_phi_73_pred_1 = _2955;
                    frontier_phi_73_pred_2 = _2954;
                    frontier_phi_73_pred_3 = _2953;
                    frontier_phi_73_pred_4 = _2952;
                    frontier_phi_73_pred_5 = _2951;
                }
                _2738 = frontier_phi_73_pred;
                _2736 = frontier_phi_73_pred_1;
                _2734 = frontier_phi_73_pred_2;
                _2732 = frontier_phi_73_pred_3;
                _2730 = frontier_phi_73_pred_4;
                _2728 = frontier_phi_73_pred_5;
                uint _2886 = _2885 + 1u;
                if (_2886 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2879 = _2728;
                    _2880 = _2730;
                    _2881 = _2732;
                    _2882 = _2734;
                    _2883 = _2736;
                    _2884 = _2738;
                    _2885 = _2886;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
        }
        uvec4 _2741 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2742 = _2741.z;
        uint _2744 = (_2742 >> 8u) & 15u;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((4294967295u << _2744) & _2648) == 0u)
        {
            _2847 = _2727;
            _2849 = _2729;
            _2851 = _2731;
            _2853 = _2733;
            _2855 = _2735;
            _2857 = _2737;
        }
        else
        {
            float _2872 = inversesqrt(dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709)));
            float _2873 = _2872 * _1707;
            float _2874 = _2872 * _1708;
            float _2875 = _2872 * _1709;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2744 < ((_2742 >> 12u) & 15u))
            {
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _3007 = _2727;
                float _3008 = _2729;
                float _3009 = _2731;
                float _3010 = _2733;
                float _3011 = _2735;
                float _3012 = _2737;
                uint _3013 = _2744;
                uint _3022;
                bool _3023;
                for (;;)
                {
                    _3022 = texelFetch(g_lightClassification, int((((_2642 << 5u) + (_2628 << 9u)) + (_3013 << 2u)) >> 2u)).x;
                    _3023 = _3022 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3023)
                    {
                        frontier_phi_84_pred = _3011;
                        frontier_phi_84_pred_1 = _3010;
                        frontier_phi_84_pred_2 = _3009;
                        frontier_phi_84_pred_3 = _3008;
                        frontier_phi_84_pred_4 = _3007;
                        frontier_phi_84_pred_5 = _3012;
                    }
                    else
                    {
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3228 = _3007;
                        float _3229 = _3008;
                        float _3230 = _3009;
                        float _3231 = _3010;
                        float _3232 = _3011;
                        float _3233 = _3012;
                        uint _3234 = _3022;
                        uint _3235;
                        vec4 _3260;
                        float _3261;
                        vec4 _3276;
                        vec3 _3288;
                        vec4 _3304;
                        vec4 _3320;
                        float _3367;
                        bool _3368;
                        for (;;)
                        {
                            uint _3245 = ((_3013 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3234));
                            _3235 = (_3234 + 4294967295u) & _3234;
                            uint _3247 = _3245 * 40u;
                            _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            _3261 = _3260.w;
                            uint _3263 = (_3245 * 40u) + 4u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3278 = (_3245 * 40u) + 8u;
                            _3288 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x));
                            uint _3291 = (_3245 * 40u) + 16u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3307 = (_3245 * 40u) + 20u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3323 = (_3245 * 40u) + 24u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3342 = (_3245 * 40u) + 28u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            _3367 = fma(_1709, _3355.z, fma(_1708, _3355.y, _3355.x * _1707)) + _3355.w;
                            _3368 = !((fma(_1709, _3336.z, fma(_1708, _3336.y, _3336.x * _1707)) + _3336.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3368)
                            {
                                float _3395 = _3260.x - _1707;
                                float _3396 = _3260.y - _1708;
                                float _3397 = _3260.z - _1709;
                                float _3398 = dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397));
                                float _3401 = inversesqrt(_3398);
                                float _3402 = _3401 * _3395;
                                float _3403 = _3401 * _3396;
                                float _3404 = _3401 * _3397;
                                float _3408 = 1.0 - (_3398 / (_3261 * _3261));
                                float _4566 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3413 = sqrt(_3398) * _3276.w;
                                float _3415 = 1.39999997615814208984375 / (_3413 + 1.39999997615814208984375);
                                float _3416 = _3415 * _3415;
                                float _3419 = ((1.0 - _3416) * dot(vec3(_3402, _3403, _3404), vec3(_533, _536, _539))) + _3416;
                                float _3422 = _3413 * _3413;
                                float _3426 = (fma(_1709, _3304.z, fma(_1708, _3304.y, _3304.x * _1707)) + _3304.w) / _3367;
                                float _3427 = (fma(_1709, _3320.z, fma(_1708, _3320.y, _3320.x * _1707)) + _3320.w) / _3367;
                                float _3431 = 1.0 - dot(vec2(_3426, _3427), vec2(_3426, _3427));
                                float _4582 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3433 = _3432 * (((isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))) * _3409) / ((_3422 * 0.699999988079071044921875) + 1.0));
                                float _3445 = exp2(log2(1.0 / ((_3422 * 3.5) + 5.0)) * 0.25);
                                float _3446 = 1.0 - _609;
                                float _3453 = sqrt(1.0 - ((1.0 - (_3446 * _3446)) * (1.0 - (_3445 * _3445))));
                                float _3454 = _3453 * _3453;
                                float _3455 = _3454 * _3454;
                                float _3456 = _3402 - _2873;
                                float _3457 = _3403 - _2874;
                                float _3458 = _3404 - _2875;
                                float _3462 = inversesqrt(dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458)));
                                float _3466 = dot(vec3(_533, _536, _539), vec3((-0.0) - _2873, (-0.0) - _2874, (-0.0) - _2875));
                                float _4593 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3469 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3470 = dot(vec3(_533, _536, _539), vec3(_3462 * _3456, _3462 * _3457, _3462 * _3458));
                                float _4604 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3473 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3477 = ((_3473 * _3473) * (_3455 + (-1.0))) + 1.0;
                                float _3478 = _3415 * _3454;
                                float _3479 = _3478 * _3478;
                                float _3485 = ((1.0 - _3479) * dot(vec3(_533, _536, _539), vec3(_3402, _3403, _3404))) + _3479;
                                float _4615 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3487 = 1.0 - _3454;
                                float _3497 = (0.5 / (((_3486 * ((_3469 * _3487) + _3454)) + 9.9999999392252902907785028219223e-09) + (((_3486 * _3487) + _3454) * _3469))) * _3486;
                                float _4626 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3507 = (_3432 * _3409) * (((_3455 * 3.1415927410125732421875) * (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) / ((_3477 * _3477) * ((_3422 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3433 * _3276.y;
                                frontier_phi_90_pred_1 = _3433 * _3276.x;
                                frontier_phi_90_pred_2 = _3507 * _3288.z;
                                frontier_phi_90_pred_3 = _3507 * _3288.y;
                                frontier_phi_90_pred_4 = _3507 * _3288.x;
                                frontier_phi_90_pred_5 = _3433 * _3276.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3515 = frontier_phi_90_pred;
                            _3514 = frontier_phi_90_pred_1;
                            _3513 = frontier_phi_90_pred_2;
                            _3512 = frontier_phi_90_pred_3;
                            _3511 = frontier_phi_90_pred_4;
                            _3516 = frontier_phi_90_pred_5;
                            _3218 = _3514 + _3231;
                            _3219 = _3515 + _3232;
                            _3220 = _3516 + _3233;
                            _3215 = _3511 + _3228;
                            _3216 = _3512 + _3229;
                            _3217 = _3513 + _3230;
                            if (_3235 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3235;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3219;
                        frontier_phi_84_pred_1 = _3218;
                        frontier_phi_84_pred_2 = _3217;
                        frontier_phi_84_pred_3 = _3216;
                        frontier_phi_84_pred_4 = _3215;
                        frontier_phi_84_pred_5 = _3220;
                    }
                    _2856 = frontier_phi_84_pred;
                    _2854 = frontier_phi_84_pred_1;
                    _2852 = frontier_phi_84_pred_2;
                    _2850 = frontier_phi_84_pred_3;
                    _2848 = frontier_phi_84_pred_4;
                    _2858 = frontier_phi_84_pred_5;
                    uint _3014 = _3013 + 1u;
                    if (_3014 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3007 = _2848;
                        _3008 = _2850;
                        _3009 = _2852;
                        _3010 = _2854;
                        _3011 = _2856;
                        _3012 = _2858;
                        _3013 = _3014;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2858;
                frontier_phi_65_66_ladder_1 = _2854;
                frontier_phi_65_66_ladder_2 = _2856;
                frontier_phi_65_66_ladder_3 = _2850;
                frontier_phi_65_66_ladder_4 = _2848;
                frontier_phi_65_66_ladder_5 = _2852;
            }
            else
            {
                frontier_phi_65_66_ladder = _2737;
                frontier_phi_65_66_ladder_1 = _2733;
                frontier_phi_65_66_ladder_2 = _2735;
                frontier_phi_65_66_ladder_3 = _2729;
                frontier_phi_65_66_ladder_4 = _2727;
                frontier_phi_65_66_ladder_5 = _2731;
            }
            _2847 = frontier_phi_65_66_ladder_4;
            _2849 = frontier_phi_65_66_ladder_3;
            _2851 = frontier_phi_65_66_ladder_5;
            _2853 = frontier_phi_65_66_ladder_1;
            _2855 = frontier_phi_65_66_ladder_2;
            _2857 = frontier_phi_65_66_ladder;
        }
        float _2862 = isnan(1.0) ? _593 : (isnan(_593) ? 1.0 : min(_593, 1.0));
        _2660 = (_2862 * _2853) + _2173;
        _2662 = (_2862 * _2855) + _2175;
        _2664 = (_2862 * _2857) + _2177;
        _2666 = ((_2847 * _578) * _2862) + _2511;
        _2668 = ((_2849 * _580) * _2862) + _2513;
        _2670 = ((_2851 * _581) * _2862) + _2515;
    }
    else
    {
        _2660 = _2173;
        _2662 = _2175;
        _2664 = _2177;
        _2666 = _2511;
        _2668 = _2513;
        _2670 = _2515;
    }
    float _4642 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4653 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4664 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _2687 = ((isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2660 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _593))) + ((_2666 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1435)) * cbPerFrame._m0[3u].x);
    float _2688 = ((isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2662 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _593))) + ((_2668 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1435)) * cbPerFrame._m0[3u].x);
    float _2689 = ((isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2664 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _593))) + ((_2670 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1435)) * cbPerFrame._m0[3u].x);
    uint _2690 = _552 + 6u;
    float _2698 = _512 / cbSceneParam._m0[86u].x;
    float _2699 = _513 / cbSceneParam._m0[86u].y;
    vec4 _2713 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, (log2((isnan(cbSceneParam._m0[77u].w) ? _433 : (isnan(_433) ? cbSceneParam._m0[77u].w : min(_433, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2715 = _2713.x;
    float _2716 = _2713.y;
    float _2717 = _2713.z;
    float _2718 = _2713.w;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    if (_433 > cbSceneParam._m0[78u].w)
    {
        float _2752 = isnan(_433) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _433 : min(cbSceneParam._m0[80u].w, _433));
        float _2753 = _2752 / _433;
        float _2764 = _2753 * _484;
        float _2765 = _485 * _2753;
        float _2766 = (-0.0) - _2765;
        float _2767 = _2753 * _486;
        float _2769 = (cbSceneParam._m0[77u].w * _2766) / _2752;
        float _2770 = _2769 + cbSceneParam._m0[79u].w;
        float _2771 = cbSceneParam._m0[79u].w - _2765;
        float _2777 = sqrt(((_2764 * _2764) + (_2765 * _2765)) + (_2767 * _2767));
        float _2780 = (1.0 - (cbSceneParam._m0[77u].w / _2752)) * _2777;
        float _2785 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2787 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2964;
        if (abs((_2766 - _2769) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2964 = ((((_2770 > 0.0) ? exp2(_2785 * _2770) : (2.0 - exp2(_2787 * _2770))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2780;
        }
        else
        {
            float _2908 = 1.0 / cbSceneParam._m0[80u].x;
            float _2909 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : max(_2770, _2771));
            float _2910 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : min(_2770, _2771));
            float _2919 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : min(_2909, 0.0));
            float _2920 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : min(_2910, 0.0));
            _2964 = ((abs(_2777 / _2766) * cbSceneParam._m0[80u].y) * ((((_2919 - _2920) * 2.0) - ((exp2(_2785 * (isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0)))) - exp2(_2785 * (isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0))))) * _2908)) - ((exp2(_2787 * _2919) - exp2(_2787 * _2920)) * _2908))) + (_2780 * cbSceneParam._m0[80u].z);
        }
        vec4 _2966 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, 1.0), 0.0);
        float _2975 = exp2((_2964 * (-1.44269502162933349609375)) * (1.0 - _2966.w));
        float _2976 = log2(_2975);
        float _2992 = log2(_2718);
        _2789 = (exp2(_2992 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].x)) * _2966.x) / cbSceneParam._m0[78u].x)) + _2715;
        _2791 = (exp2(_2992 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].y)) * _2966.y) / cbSceneParam._m0[78u].y)) + _2716;
        _2793 = (exp2(_2992 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].z)) * _2966.z) / cbSceneParam._m0[78u].z)) + _2717;
        _2795 = _2975 * _2718;
    }
    else
    {
        _2789 = _2715;
        _2791 = _2716;
        _2793 = _2717;
        _2795 = _2718;
    }
    bool _3002;
    vec4 _2805;
    vec4 _2827;
    float _2829;
    float _2833;
    float _2834;
    float _2835;
    float _2836;
    bool _2846;
    for (;;)
    {
        _2805 = cbMatDynParam._m0[0u];
        float _2807 = roundEven(_2805.y);
        bool _2808 = _2807 == 3.0;
        float _2809 = log2(_2795);
        float _2816 = exp2(_2809 * cbSceneParam._m0[78u].x) * _2687;
        float _2817 = exp2(_2809 * cbSceneParam._m0[78u].y) * _2688;
        float _2818 = exp2(_2809 * cbSceneParam._m0[78u].z) * _2689;
        float _2825 = _500 + (-0.5);
        _2827 = cbMtdParam._m0[1u];
        _2829 = _2827.y * _2825;
        float _2832 = (_2807 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2833 = _2832 * (_2808 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2789)));
        _2834 = _2832 * (_2808 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2791)));
        _2835 = _2832 * (_2808 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2793)));
        _2836 = _2825 * 0.999000012874603271484375;
        _2846 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2846)
        {
            if ((cbInstanceData._m0[_552 + 7u].x + _2836) < 0.5)
            {
                _3002 = true;
                break;
            }
        }
        uint _2943 = _554 + uint(_2805.w);
        if ((cbInstanceData._m0[_2943].w < 1.0) && ((cbInstanceData._m0[_2943].w + _2836) < 0.5))
        {
            _3002 = true;
            break;
        }
        if ((_2829 + 1.0) < _2827.x)
        {
            _3002 = true;
            break;
        }
        _3002 = false;
        break;
    }
    float _3206;
    if (_3002)
    {
        discard_state = true;
        _3206 = 0.0;
    }
    else
    {
        _3206 = cbInstanceData._m0[_2690].w;
    }
    SV_Target.x = _2833;
    SV_Target.y = _2834;
    SV_Target.z = _2835;
    SV_Target.w = _3206;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2690].w;
    discard_exit();
}


