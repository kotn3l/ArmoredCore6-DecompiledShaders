#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _952;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _239 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _268.z;
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3570 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))));
    float _288 = fma(_285, _217, fma(_278, _210, _276 * _196));
    float _291 = fma(_285, _218, fma(_278, _211, _276 * _197));
    float _294 = fma(_285, _219, fma(_278, _212, _276 * _198));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _306 = cbMtdParam._m0[10u].x + dot(vec4(_298 * _288, _298 * _291, _298 * _294, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3581 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _307 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    vec4 _319 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _330 = ((_319.x - _245) * _307) + _245;
    float _331 = ((_319.y - _246) * _307) + _246;
    float _332 = ((_319.z - _247) * _307) + _247;
    vec4 _344 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _346 = _344.x;
    float _348 = _346 - (_346 * _307);
    vec4 _361 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _368 = (_361.x * 2.0) + (-1.0);
    float _369 = (_361.y * 2.0) + (-1.0);
    float _370 = dot(vec2(_368, _369), vec2(_368, _369));
    float _3592 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _378 = ((_361.z - _272) * _307) + _272;
    float _387 = ((sqrt(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) - _285) * _307) + _285;
    float _391 = (((_368 - _276) * _307) + _276) + (cbMtdParam._m0[10u].y * _276);
    float _392 = (((_369 - _278) * _307) + _278) + (cbMtdParam._m0[10u].y * _278);
    float _395 = fma(_387, _217, fma(_392, _210, _391 * _196));
    float _398 = fma(_387, _218, fma(_392, _211, _391 * _197));
    float _401 = fma(_387, _219, fma(_392, _212, _391 * _198));
    float _405 = inversesqrt(dot(vec3(_395, _398, _401), vec3(_395, _398, _401)));
    float _406 = _405 * _395;
    float _407 = _405 * _398;
    float _408 = _405 * _401;
    float _3603 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _409 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3625 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3636 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3647 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _413 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _429 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _470 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _480 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _470);
    float _481 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _470);
    float _482 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _470);
    float _486 = inversesqrt(dot(vec3(_480, _481, _482), vec3(_480, _481, _482)));
    float _487 = _480 * _486;
    float _488 = _481 * _486;
    float _489 = _482 * _486;
    float _495 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _496 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _517 = fma(_408, cbSceneParam._m0[5u].z, fma(_407, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _406));
    float _520 = fma(_408, cbSceneParam._m0[6u].z, fma(_407, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _406));
    float _523 = fma(_408, cbSceneParam._m0[7u].z, fma(_407, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _406));
    uint _536 = uint(roundEven(NORMAL.w)) * 13u;
    uint _539 = (_536 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _545 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * cbInstanceData._m0[_539].x;
    float _546 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_539].y;
    float _547 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_539].z;
    float _3658 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _548 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _551 = 1.0 - _413;
    float _552 = _548 * _551;
    float _553 = _549 * _551;
    float _554 = _550 * _551;
    float _559 = (_548 + (-0.039999999105930328369140625)) * _413;
    float _560 = (_549 + (-0.039999999105930328369140625)) * _413;
    float _561 = (_550 + (-0.039999999105930328369140625)) * _413;
    float _562 = _559 + 0.039999999105930328369140625;
    float _564 = _560 + 0.039999999105930328369140625;
    float _565 = _561 + 0.039999999105930328369140625;
    vec4 _574 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _495, cbSceneParam._m0[86u].y * _496));
    float _577 = _574.x * TEXCOORD.z;
    float _578 = dot(vec3(_406, _407, _408), vec3(_487, _488, _489));
    float _581 = _578 * 2.0;
    float _585 = (_581 * _406) - _487;
    float _586 = (_581 * _407) - _488;
    float _587 = (_581 * _408) - _489;
    float _591 = abs(dot(vec3(_487, _488, _489), vec3(_406, _407, _408)));
    float _3691 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _593 = sqrt(_409);
    float _606 = exp2((_593 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_593 * 3.0));
    float _612 = (1.0 - _606) * ((_593 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _613 = _606 * _593;
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _951;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _676 = fma(_649, cbModelParam._m0[26u].z, fma(_645, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _641));
        float _680 = fma(_649, cbModelParam._m0[27u].z, fma(_645, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _641));
        float _684 = fma(_649, cbModelParam._m0[28u].z, fma(_645, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _641));
        float _709 = _641 + _406;
        float _710 = _645 + _407;
        float _711 = _649 + _408;
        float _721 = fma(_711, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _709)) - _676;
        float _722 = fma(_711, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _709)) - _680;
        float _723 = fma(_711, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _709)) - _684;
        float _727 = inversesqrt(dot(vec3(_721, _722, _723), vec3(_721, _722, _723)));
        float _740 = ((_727 * _721) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_676 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _741 = ((_727 * _722) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_680 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _742 = ((_727 * _723) / cbModelParam._m0[34u].z) + ((((((_684 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        float _779 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_745.x + (-0.5));
        float _781 = _779 * (_745.y + (-0.5));
        float _782 = _779 * (_745.z + (-0.5));
        float _789 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_752.x + (-0.5));
        float _791 = _789 * (_752.y + (-0.5));
        float _792 = _789 * (_752.z + (-0.5));
        float _799 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_759.x + (-0.5));
        float _801 = _799 * (_759.y + (-0.5));
        float _802 = _799 * (_759.z + (-0.5));
        float _809 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_766.x + (-0.5));
        float _811 = _809 * (_766.y + (-0.5));
        float _812 = _809 * (_766.z + (-0.5));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = _780 * 0.5;
        float _817 = _790 * 0.5;
        float _818 = _800 * 0.5;
        float _819 = dot(vec3(_816, _817, _818), vec3(_816, _817, _818));
        float _824 = (_819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_819);
        float _833 = (dot(vec3(_406, _407, _408), vec3(_824 * _816, _824 * _817, _824 * _818)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _843 = sqrt(((_817 * _817) + (_816 * _816)) + (_818 * _818)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3739 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_845 + 1.0))) + _850) * _813;
        float _860 = _781 * 0.5;
        float _861 = _791 * 0.5;
        float _862 = _801 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _876 = (dot(vec3(_406, _407, _408), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _885 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_814 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3772 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_887 + 1.0))) + _892) * _814;
        float _902 = _782 * 0.5;
        float _903 = _792 * 0.5;
        float _904 = _802 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_406, _407, _408), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3805 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_929 + 1.0))) + _934) * _815;
        _951 = _782;
        _953 = _781;
        _954 = _780;
        _955 = _792;
        _956 = _791;
        _957 = _790;
        _958 = _802;
        _959 = _801;
        _960 = _800;
        _961 = _815;
        _962 = _814;
        _963 = _813;
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
        _965 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
    }
    else
    {
        _951 = _952;
        _953 = _952;
        _954 = _952;
        _955 = _952;
        _956 = _952;
        _957 = _952;
        _958 = _952;
        _959 = _952;
        _960 = _952;
        _961 = _952;
        _962 = _952;
        _963 = _952;
        _964 = 0.0;
        _965 = 0.0;
        _966 = 0.0;
    }
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _992 = fma(_649, cbModelParam._m0[30u].z, fma(_645, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _641));
        float _996 = fma(_649, cbModelParam._m0[31u].z, fma(_645, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _641));
        float _1000 = fma(_649, cbModelParam._m0[32u].z, fma(_645, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _641));
        float _1023 = _641 + _406;
        float _1024 = _645 + _407;
        float _1025 = _649 + _408;
        float _1035 = fma(_1025, cbModelParam._m0[30u].z, fma(_1024, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1023)) - _992;
        float _1036 = fma(_1025, cbModelParam._m0[31u].z, fma(_1024, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1023)) - _996;
        float _1037 = fma(_1025, cbModelParam._m0[32u].z, fma(_1024, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1023)) - _1000;
        float _1041 = inversesqrt(dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037)));
        float _1054 = ((_1041 * _1035) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_992 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1041 * _1036) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_996 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1041 * _1037) / cbModelParam._m0[35u].z) + ((((((_1000 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        float _1091 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1058.x + (-0.5));
        float _1093 = _1091 * (_1058.y + (-0.5));
        float _1094 = _1091 * (_1058.z + (-0.5));
        float _1101 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1065.x + (-0.5));
        float _1103 = _1101 * (_1065.y + (-0.5));
        float _1104 = _1101 * (_1065.z + (-0.5));
        float _1111 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1072.x + (-0.5));
        float _1113 = _1111 * (_1072.y + (-0.5));
        float _1114 = _1111 * (_1072.z + (-0.5));
        float _1121 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1079.x + (-0.5));
        float _1123 = _1121 * (_1079.y + (-0.5));
        float _1124 = _1121 * (_1079.z + (-0.5));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = _1092 * 0.5;
        float _1129 = _1102 * 0.5;
        float _1130 = _1112 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_406, _407, _408), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3868 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1155 + 1.0))) + _1160) * _1125;
        float _1170 = _1093 * 0.5;
        float _1171 = _1103 * 0.5;
        float _1172 = _1113 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_406, _407, _408), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3901 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1197 + 1.0))) + _1202) * _1126;
        float _1212 = _1094 * 0.5;
        float _1213 = _1104 * 0.5;
        float _1214 = _1114 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_406, _407, _408), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3934 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1239 + 1.0))) + _1244) * _1127;
        _1261 = _1094;
        _1262 = _1093;
        _1263 = _1092;
        _1264 = _1104;
        _1265 = _1103;
        _1266 = _1102;
        _1267 = _1114;
        _1268 = _1113;
        _1269 = _1112;
        _1270 = _1127;
        _1271 = _1126;
        _1272 = _1125;
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1274 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1275 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
    }
    else
    {
        _1261 = _952;
        _1262 = _952;
        _1263 = _952;
        _1264 = _952;
        _1265 = _952;
        _1266 = _952;
        _1267 = _952;
        _1268 = _952;
        _1269 = _952;
        _1270 = _952;
        _1271 = _952;
        _1272 = _952;
        _1273 = 0.0;
        _1274 = 0.0;
        _1275 = 0.0;
    }
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _964)) + _964;
    float _1286 = (cbModelParam._m0[1u].x * (_1274 - _965)) + _965;
    float _1287 = (cbModelParam._m0[1u].x * (_1275 - _966)) + _966;
    float _1308 = fma(_1287, cbSceneParam._m0[89u].z, fma(_1286, cbSceneParam._m0[89u].y, _1285 * cbSceneParam._m0[89u].x));
    float _1311 = fma(_1287, cbSceneParam._m0[90u].z, fma(_1286, cbSceneParam._m0[90u].y, _1285 * cbSceneParam._m0[90u].x));
    float _1314 = fma(_1287, cbSceneParam._m0[91u].z, fma(_1286, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1285));
    float _1329 = _585 * 0.5;
    float _1330 = _586 * 0.5;
    float _1331 = _587 * 0.5;
    float _1332 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_1263, _1266, _1269, _1272));
    float _1335 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_1262, _1265, _1268, _1271));
    float _1338 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1372;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1345 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_951, _955, _958, _961));
        float _1349 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_953, _956, _959, _962));
        float _1353 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_954, _957, _960, _963));
        float _1360 = dot(vec4(cbModelParam._m0[39u]), vec4(_1329, _1330, _1331, 1.0));
        _1372 = dot(vec3(isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1360) ? 0.0 : (isnan(0.0) ? _1360 : max(0.0, _1360))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1372 = 1.0;
    }
    float _1383;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1374 = dot(vec4(cbModelParam._m0[40u]), vec4(_1329, _1330, _1331, 1.0));
        _1383 = dot(vec3(isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1374) ? 0.0 : (isnan(0.0) ? _1374 : max(0.0, _1374))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1383 = 1.0;
    }
    float _1387 = (_1383 * cbModelParam._m0[1u].x) + (_1372 * (1.0 - cbModelParam._m0[1u].x));
    float _1397 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _409);
    float _1398 = isnan(_1397) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1397 : min(cbModelParam._m0[25u].z, _1397));
    float _1480;
    float _1482;
    float _1484;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1447 = fma(_649, cbModelParam._m0[13u].z, fma(_645, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _641)) + cbModelParam._m0[13u].w;
        float _1451 = fma(_649, cbModelParam._m0[14u].z, fma(_645, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _641)) + cbModelParam._m0[14u].w;
        float _1455 = fma(_649, cbModelParam._m0[15u].z, fma(_645, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _641)) + cbModelParam._m0[15u].w;
        float _1458 = fma(_587, cbModelParam._m0[13u].z, fma(_586, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _585));
        float _1461 = fma(_587, cbModelParam._m0[14u].z, fma(_586, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _585));
        float _1464 = fma(_587, cbModelParam._m0[15u].z, fma(_586, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _585));
        float _1492;
        if (_1458 > 0.0)
        {
            _1492 = abs((1.0 - _1447) / _1458);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1447 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1492 = frontier_phi_16_14_ladder;
        }
        float _1667;
        if (_1461 > 0.0)
        {
            _1667 = abs((1.0 - _1451) / _1461);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1451 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1667 = frontier_phi_25_21_ladder;
        }
        float _1962;
        if (_1464 > 0.0)
        {
            _1962 = abs((1.0 - _1455) / _1464);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1455 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1962 = frontier_phi_37_32_ladder;
        }
        float _1964 = isnan(_1667) ? _1492 : (isnan(_1492) ? _1667 : min(_1492, _1667));
        float _1965 = isnan(_1962) ? _1964 : (isnan(_1964) ? _1962 : min(_1964, _1962));
        float _1969 = (_1965 * _1458) + _1447;
        float _1970 = (_1965 * _1461) + _1451;
        float _1971 = (_1965 * _1464) + _1455;
        float _1972 = _1965 * 9.9999997473787516355514526367188e-05;
        float _1974 = (-1.0) - _1972;
        float _1976 = _1972 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1971 > _1976) || ((_1971 < _1974) || ((_1970 > _1976) || ((_1970 < _1974) || ((_1969 < _1974) || (_1969 > _1976))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2116 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1971, cbModelParam._m0[9u].z, fma(_1970, cbModelParam._m0[9u].y, _1969 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1971, cbModelParam._m0[10u].z, fma(_1970, cbModelParam._m0[10u].y, _1969 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1971, cbModelParam._m0[11u].z, fma(_1970, cbModelParam._m0[11u].y, _1969 * cbModelParam._m0[11u].x))), _1398);
            frontier_phi_15_37_ladder = _2116.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2116.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2116.z * cbModelParam._m0[1u].y;
        }
        _1480 = frontier_phi_15_37_ladder_1;
        _1482 = frontier_phi_15_37_ladder;
        _1484 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1468 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_585, _586, _587), _1398);
        _1480 = _1468.x * cbModelParam._m0[1u].y;
        _1482 = _1468.y * cbModelParam._m0[1u].y;
        _1484 = _1468.z * cbModelParam._m0[1u].y;
    }
    float _1488 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _409);
    float _1489 = isnan(_1488) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1488 : min(cbModelParam._m0[25u].w, _1488));
    float _1582;
    float _1584;
    float _1586;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1546 = fma(_649, cbModelParam._m0[21u].z, fma(_645, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _641)) + cbModelParam._m0[21u].w;
        float _1550 = fma(_649, cbModelParam._m0[22u].z, fma(_645, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _641)) + cbModelParam._m0[22u].w;
        float _1554 = fma(_649, cbModelParam._m0[23u].z, fma(_645, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _641)) + cbModelParam._m0[23u].w;
        float _1557 = fma(_587, cbModelParam._m0[21u].z, fma(_586, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _585));
        float _1560 = fma(_587, cbModelParam._m0[22u].z, fma(_586, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _585));
        float _1563 = fma(_587, cbModelParam._m0[23u].z, fma(_586, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _585));
        float _1672;
        if (_1557 > 0.0)
        {
            _1672 = abs((1.0 - _1546) / _1557);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1546 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1672 = frontier_phi_27_23_ladder;
        }
        float _1989;
        if (_1560 > 0.0)
        {
            _1989 = abs((1.0 - _1550) / _1560);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1550 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1989 = frontier_phi_39_34_ladder;
        }
        float _2327;
        if (_1563 > 0.0)
        {
            _2327 = abs((1.0 - _1554) / _1563);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1554 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2327 = frontier_phi_49_46_ladder;
        }
        float _2329 = isnan(_1989) ? _1672 : (isnan(_1672) ? _1989 : min(_1672, _1989));
        float _2330 = isnan(_2327) ? _2329 : (isnan(_2329) ? _2327 : min(_2329, _2327));
        float _2334 = (_2330 * _1557) + _1546;
        float _2335 = (_2330 * _1560) + _1550;
        float _2336 = (_2330 * _1563) + _1554;
        float _2337 = _2330 * 9.9999997473787516355514526367188e-05;
        float _2338 = (-1.0) - _2337;
        float _2340 = _2337 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2336 > _2340) || ((_2336 < _2338) || ((_2335 > _2340) || ((_2335 < _2338) || ((_2334 < _2338) || (_2334 > _2340))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2458 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2336, cbModelParam._m0[17u].z, fma(_2335, cbModelParam._m0[17u].y, _2334 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2336, cbModelParam._m0[18u].z, fma(_2335, cbModelParam._m0[18u].y, _2334 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2336, cbModelParam._m0[19u].z, fma(_2335, cbModelParam._m0[19u].y, _2334 * cbModelParam._m0[19u].x))), _1489);
            frontier_phi_24_49_ladder = _2458.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2458.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2458.x * cbModelParam._m0[1u].z;
        }
        _1582 = frontier_phi_24_49_ladder_2;
        _1584 = frontier_phi_24_49_ladder_1;
        _1586 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1566 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_585, _586, _587), _1489);
        _1582 = _1566.x * cbModelParam._m0[1u].z;
        _1584 = _1566.y * cbModelParam._m0[1u].z;
        _1586 = _1566.z * cbModelParam._m0[1u].z;
    }
    float _1599 = (((_612 * _562) + _613) * _577) * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1601 = (((_612 * _564) + _613) * _577) * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1603 = (((_612 * _565) + _613) * _577) * ((cbModelParam._m0[1u].w * (_1586 - _1484)) + _1484);
    float _1606 = fma(_1603, cbSceneParam._m0[89u].z, fma(_1601, cbSceneParam._m0[89u].y, _1599 * cbSceneParam._m0[89u].x));
    float _1609 = fma(_1603, cbSceneParam._m0[90u].z, fma(_1601, cbSceneParam._m0[90u].y, _1599 * cbSceneParam._m0[90u].x));
    float _1612 = fma(_1603, cbSceneParam._m0[91u].z, fma(_1601, cbSceneParam._m0[91u].y, _1599 * cbSceneParam._m0[91u].x));
    float _1646 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1650 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1654 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1658 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1659 = _1646 / _1658;
    float _1660 = _1650 / _1658;
    float _1661 = _1654 / _1658;
    float _1808;
    float _1809;
    float _1810;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1688 = ((uint(_1661 > cbSceneParam._m0[59u].y) + uint(_1661 > cbSceneParam._m0[59u].x)) + uint(_1661 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1689 = _1688 + 43u;
        uint _1697 = _1688 + 44u;
        uint _1705 = _1688 + 45u;
        uint _1713 = _1688 + 46u;
        float _1724 = fma(_1658, cbSceneParam._m0[_1689].w, fma(_1654, cbSceneParam._m0[_1689].z, fma(_1650, cbSceneParam._m0[_1689].y, _1646 * cbSceneParam._m0[_1689].x)));
        float _1728 = fma(_1658, cbSceneParam._m0[_1697].w, fma(_1654, cbSceneParam._m0[_1697].z, fma(_1650, cbSceneParam._m0[_1697].y, _1646 * cbSceneParam._m0[_1697].x)));
        float _1736 = fma(_1658, cbSceneParam._m0[_1713].w, fma(_1654, cbSceneParam._m0[_1713].z, fma(_1650, cbSceneParam._m0[_1713].y, _1646 * cbSceneParam._m0[_1713].x)));
        float _1741 = cbSceneParam._m0[33u].z * _1736;
        float _1743 = cbSceneParam._m0[33u].w * _1736;
        float _1746 = fma(_1658, cbSceneParam._m0[_1705].w, fma(_1654, cbSceneParam._m0[_1705].z, fma(_1650, cbSceneParam._m0[_1705].y, _1646 * cbSceneParam._m0[_1705].x))) / _1736;
        float _1794 = (cbSceneParam._m0[33u].x - sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661))) * cbSceneParam._m0[33u].y;
        float _4060 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1801 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1741 + _1724) / _1736, (_1743 + _1728) / _1736), _1746), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1743 + _1724) / _1736, (_1728 - _1741) / _1736), _1746), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1724 - _1741) / _1736, (_1728 - _1743) / _1736), _1746), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1724 - _1743) / _1736, (_1741 + _1728) / _1736), _1746), 0.0)).x), vec4(0.25)));
        _1808 = 1.0 - (_1801 * cbSceneParam._m0[34u].x);
        _1809 = 1.0 - (_1801 * cbSceneParam._m0[34u].y);
        _1810 = 1.0 - (_1801 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1808 = 1.0;
        _1809 = 1.0;
        _1810 = 1.0;
    }
    float _1874;
    float _1876;
    float _1878;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1862 = fma(_1658, cbSceneParam._m0[63u].w, fma(_1654, cbSceneParam._m0[63u].z, fma(_1650, cbSceneParam._m0[63u].y, _1646 * cbSceneParam._m0[63u].x)));
        float _1863 = fma(_1658, cbSceneParam._m0[60u].w, fma(_1654, cbSceneParam._m0[60u].z, fma(_1650, cbSceneParam._m0[60u].y, _1646 * cbSceneParam._m0[60u].x))) / _1862;
        float _1864 = fma(_1658, cbSceneParam._m0[61u].w, fma(_1654, cbSceneParam._m0[61u].z, fma(_1650, cbSceneParam._m0[61u].y, _1646 * cbSceneParam._m0[61u].x))) / _1862;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1863 >= cbSceneParam._m0[64u].x) && (_1864 >= cbSceneParam._m0[64u].y)) && (_1863 <= cbSceneParam._m0[64u].z)) && (_1864 <= cbSceneParam._m0[64u].w))
        {
            float _2002 = fma(_1658, cbSceneParam._m0[62u].w, fma(_1654, cbSceneParam._m0[62u].z, fma(_1650, cbSceneParam._m0[62u].y, _1646 * cbSceneParam._m0[62u].x))) / _1862;
            float _2006 = isnan(cbSceneParam._m0[41u].w) ? _2002 : (isnan(_2002) ? cbSceneParam._m0[41u].w : max(_2002, cbSceneParam._m0[41u].w));
            float _2049 = (cbSceneParam._m0[33u].x - sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661))) * cbSceneParam._m0[33u].y;
            float _4076 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
            float _2056 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1863, cbSceneParam._m0[33u].w + _1864), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1863, _1864 - cbSceneParam._m0[33u].z), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1863 - cbSceneParam._m0[33u].z, _1864 - cbSceneParam._m0[33u].w), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1863 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1864), _2006), 0.0)).x), vec4(0.25)));
            float _2060 = 1.0 - (_2056 * cbSceneParam._m0[34u].x);
            float _2061 = 1.0 - (_2056 * cbSceneParam._m0[34u].y);
            float _2062 = 1.0 - (_2056 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2061) ? _1809 : (isnan(_1809) ? _2061 : min(_1809, _2061));
            frontier_phi_36_35_ladder_1 = isnan(_2062) ? _1810 : (isnan(_1810) ? _2062 : min(_1810, _2062));
            frontier_phi_36_35_ladder_2 = isnan(_2060) ? _1808 : (isnan(_1808) ? _2060 : min(_1808, _2060));
        }
        else
        {
            frontier_phi_36_35_ladder = _1809;
            frontier_phi_36_35_ladder_1 = _1810;
            frontier_phi_36_35_ladder_2 = _1808;
        }
        _1874 = frontier_phi_36_35_ladder_2;
        _1876 = frontier_phi_36_35_ladder;
        _1878 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1874 = _1808;
        _1876 = _1809;
        _1878 = _1810;
    }
    uvec4 _1883 = floatBitsToUint(cbInstanceData._m0[_536 + 5u]);
    uint _1885 = _1883.x * 14u;
    uint _1886 = _1885 + 13u;
    float _1893 = _577 + (-1.0);
    float _1898 = (cbLight._m0[_1886].x * _1893) + 1.0;
    float _1899 = (cbLight._m0[_1886].y * _1893) + 1.0;
    float _1900 = (cbLight._m0[_1886].z * _1893) + 1.0;
    float _1901 = (cbLight._m0[_1886].w * _1893) + 1.0;
    uint _1902 = _1885 + 5u;
    float _1908 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
    uint _1912 = _1885 + 4u;
    float _1921 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
    uint _1925 = _1885 | 1u;
    float _1936 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_406, _407, _408));
    float _1939 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_406, _407, _408));
    float _4112 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _4123 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1944 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * 0.3183098733425140380859375;
    float _1946 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.3183098733425140380859375;
    float _1953 = ((cbLight._m0[_1902].x * _1908) * _1946) + (((cbLight._m0[_1912].x * _1874) * _1921) * _1944);
    float _1954 = ((_1908 * cbLight._m0[_1902].y) * _1946) + (((cbLight._m0[_1912].y * _1876) * _1921) * _1944);
    float _1955 = ((_1908 * cbLight._m0[_1902].z) * _1946) + (((cbLight._m0[_1912].z * _1878) * _1921) * _1944);
    uvec4 _1959 = floatBitsToUint(cbLight._m0[_1885 + 12u]);
    bool _1961 = _1959.x == 0u;
    float _2063;
    float _2065;
    float _2067;
    if (_1961)
    {
        _2063 = _1953;
        _2065 = _1954;
        _2067 = _1955;
    }
    else
    {
        uint _2071 = _1885 + 6u;
        float _2087 = (dot(vec3(cbLight._m0[_1885 + 2u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _2088 = _2087 * _2087;
        float _4134 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2090 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
        _2063 = (((cbLight._m0[_2071].x * 0.3183098733425140380859375) * _2089) * _2090) + _1953;
        _2065 = (((cbLight._m0[_2071].y * 0.3183098733425140380859375) * _2089) * _2090) + _1954;
        _2067 = (((cbLight._m0[_2071].z * 0.3183098733425140380859375) * _2089) * _2090) + _1955;
    }
    bool _2070 = _1959.y == 0u;
    float _2125;
    float _2127;
    float _2129;
    if (_2070)
    {
        _2125 = _2063;
        _2127 = _2065;
        _2129 = _2067;
    }
    else
    {
        uint _2298 = _1885 + 7u;
        float _2314 = (dot(vec3(cbLight._m0[_1885 + 3u].xyz), vec3(_406, _407, _408)) * 0.5) + 0.5;
        float _2315 = _2314 * _2314;
        float _4150 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2316 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2317 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _2125 = (((cbLight._m0[_2298].x * 0.3183098733425140380859375) * _2316) * _2317) + _2063;
        _2127 = (((cbLight._m0[_2298].y * 0.3183098733425140380859375) * _2316) * _2317) + _2065;
        _2129 = (((cbLight._m0[_2298].z * 0.3183098733425140380859375) * _2316) * _2317) + _2067;
    }
    uint _2132 = _1885 + 8u;
    float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _409) * 0.949999988079071044921875);
    float _2146 = _2145 * _2145;
    float _2147 = cbLight._m0[_1885].x + _487;
    float _2148 = cbLight._m0[_1885].y + _488;
    float _2149 = cbLight._m0[_1885].z + _489;
    float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
    float _2154 = _2153 * _2147;
    float _2155 = _2153 * _2148;
    float _2156 = _2153 * _2149;
    float _2157 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1885].xyz));
    float _4166 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _4177 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _2161 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2162 = dot(vec3(_406, _407, _408), vec3(_2154, _2155, _2156));
    float _4188 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2166 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_2154, _2155, _2156));
    float _4199 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2170 = _2146 * _2146;
    float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
    float _2182 = exp2(log2(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * 5.0);
    float _2183 = 0.959999978542327880859375 - _559;
    float _2185 = 0.959999978542327880859375 - _560;
    float _2186 = 0.959999978542327880859375 - _561;
    float _2193 = 1.0 - _2146;
    float _2204 = (0.5 / (((_2161 * ((_2160 * _2193) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2193) + _2146) * _2160))) * _2160;
    float _4210 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2206 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
    uint _2220 = _1885 + 9u;
    float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1925].w)) * _409) * 0.949999988079071044921875);
    float _2232 = _2231 * _2231;
    float _2233 = cbLight._m0[_1925].x + _487;
    float _2234 = cbLight._m0[_1925].y + _488;
    float _2235 = cbLight._m0[_1925].z + _489;
    float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
    float _2240 = _2239 * _2233;
    float _2241 = _2239 * _2234;
    float _2242 = _2239 * _2235;
    float _2243 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_1925].xyz));
    float _4221 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2247 = dot(vec3(_406, _407, _408), vec3(_2240, _2241, _2242));
    float _4232 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2251 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_2240, _2241, _2242));
    float _4243 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2255 = _2232 * _2232;
    float _2259 = ((_2250 * _2250) * (_2255 + (-1.0))) + 1.0;
    float _2266 = exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0);
    float _2273 = 1.0 - _2232;
    float _2283 = (0.5 / (((_2161 * ((_2246 * _2273) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2273) + _2232) * _2246))) * _2246;
    float _4254 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2285 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2255 / ((_2259 * _2259) * 3.141590118408203125));
    float _2295 = (((((_2266 * _2183) + _562) * cbLight._m0[_2220].x) * _2285) * _1908) + ((((cbLight._m0[_2132].x * _1874) * ((_2182 * _2183) + _562)) * _2206) * _1921);
    float _2296 = (((((_2266 * _2185) + _564) * cbLight._m0[_2220].y) * _2285) * _1908) + ((((cbLight._m0[_2132].y * _1876) * ((_2182 * _2185) + _564)) * _2206) * _1921);
    float _2297 = (((((_2266 * _2186) + _565) * cbLight._m0[_2220].z) * _2285) * _1908) + ((((cbLight._m0[_2132].z * _1878) * ((_2182 * _2186) + _565)) * _2206) * _1921);
    float _2353;
    float _2355;
    float _2357;
    if (_1961)
    {
        _2353 = _2295;
        _2355 = _2296;
        _2357 = _2297;
    }
    else
    {
        uint _2359 = _1885 + 2u;
        uint _2363 = _1885 + 10u;
        float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _409) * 0.949999988079071044921875);
        float _2378 = _2377 * _2377;
        float _2379 = cbLight._m0[_2359].x + _487;
        float _2380 = cbLight._m0[_2359].y + _488;
        float _2381 = cbLight._m0[_2359].z + _489;
        float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
        float _2386 = _2385 * _2379;
        float _2387 = _2385 * _2380;
        float _2388 = _2385 * _2381;
        float _2389 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2359].xyz));
        float _4265 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2393 = dot(vec3(_406, _407, _408), vec3(_2386, _2387, _2388));
        float _4276 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2397 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2386, _2387, _2388));
        float _4287 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2401 = _2378 * _2378;
        float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
        float _2412 = exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0);
        float _2419 = 1.0 - _2378;
        float _2429 = (0.5 / (((_2161 * ((_2392 * _2419) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2419) + _2378) * _2392))) * _2392;
        float _4298 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2431 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
        float _2432 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
        _2353 = (((((_2412 * _2183) + _562) * cbLight._m0[_2363].x) * _2431) * _2432) + _2295;
        _2355 = (((((_2412 * _2185) + _564) * cbLight._m0[_2363].y) * _2431) * _2432) + _2296;
        _2357 = (((((_2412 * _2186) + _565) * cbLight._m0[_2363].z) * _2431) * _2432) + _2297;
    }
    float _2463;
    float _2465;
    float _2467;
    if (_2070)
    {
        _2463 = _2353;
        _2465 = _2355;
        _2467 = _2357;
    }
    else
    {
        uint _2474 = _1885 + 3u;
        uint _2478 = _1885 + 11u;
        float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _409) * 0.949999988079071044921875);
        float _2493 = _2492 * _2492;
        float _2494 = cbLight._m0[_2474].x + _487;
        float _2495 = cbLight._m0[_2474].y + _488;
        float _2496 = cbLight._m0[_2474].z + _489;
        float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
        float _2501 = _2500 * _2494;
        float _2502 = _2500 * _2495;
        float _2503 = _2500 * _2496;
        float _2504 = dot(vec3(_406, _407, _408), vec3(cbLight._m0[_2474].xyz));
        float _4314 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2508 = dot(vec3(_406, _407, _408), vec3(_2501, _2502, _2503));
        float _4325 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2512 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2501, _2502, _2503));
        float _4336 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2516 = _2493 * _2493;
        float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
        float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * 5.0);
        float _2534 = 1.0 - _2493;
        float _2544 = (0.5 / (((_2161 * ((_2507 * _2534) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2534) + _2493) * _2507))) * _2507;
        float _4347 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2546 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
        float _2547 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _2463 = (((((_2527 * _2183) + _562) * cbLight._m0[_2478].x) * _2546) * _2547) + _2353;
        _2465 = (((((_2527 * _2185) + _564) * cbLight._m0[_2478].y) * _2546) * _2547) + _2355;
        _2467 = (((((_2527 * _2186) + _565) * cbLight._m0[_2478].z) * _2546) * _2547) + _2357;
    }
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    if (_1883.y == 0u)
    {
        uvec4 _2568 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2569 = _2568.x;
        uint _2580 = uint((float(_2568.y) * floor(float(uint(cbSceneParam._m0[85u].y * _496) / _2569))) + floor(float(uint(cbSceneParam._m0[85u].x * _495) / _2569)));
        float _2590 = (log2(_1661 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2591 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        uint _2594 = uint(isnan(14.0) ? _2591 : (isnan(_2591) ? 14.0 : min(_2591, 14.0)));
        uvec4 _2599 = texelFetch(g_lightClusterGridBuffer, int(((_2594 << 2u) + (_2580 << 6u)) >> 2u));
        uint _2600 = _2599.x;
        uint _2601 = _2568.z;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        if (((((1u << ((_2601 >> 4u) & 15u)) + 4294967295u) & _2600) == 0u) || ((_2601 & 240u) == 0u))
        {
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
        }
        else
        {
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            uint _2829 = 0u;
            uint _2838;
            bool _2839;
            for (;;)
            {
                _2838 = texelFetch(g_lightClassification, int((((_2594 << 5u) + (_2580 << 9u)) + (_2829 << 2u)) >> 2u)).x;
                _2839 = _2838 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2839)
                {
                    frontier_phi_68_pred = _2828;
                    frontier_phi_68_pred_1 = _2827;
                    frontier_phi_68_pred_2 = _2826;
                    frontier_phi_68_pred_3 = _2824;
                    frontier_phi_68_pred_4 = _2823;
                    frontier_phi_68_pred_5 = _2825;
                }
                else
                {
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    uint _2953;
                    _2947 = _2823;
                    _2948 = _2824;
                    _2949 = _2825;
                    _2950 = _2826;
                    _2951 = _2827;
                    _2952 = _2828;
                    _2953 = _2838;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    for (;;)
                    {
                        uint _2957 = uint(findLSB(_2953)) + (_2829 << 5u);
                        uint _2954 = (_2953 + 4294967295u) & _2953;
                        uint _2959 = _2957 * 48u;
                        vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 3u)).x));
                        uint _2979 = (_2957 * 48u) + 4u;
                        vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 3u)).x));
                        uint _2998 = (_2957 * 48u) + 8u;
                        vec3 _3009 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x));
                        float _3013 = _2973.x - _1659;
                        float _3014 = _2973.y - _1660;
                        float _3015 = _2973.z - _1661;
                        float _3016 = dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015));
                        float _3019 = inversesqrt(_3016);
                        float _3020 = _3019 * _3013;
                        float _3021 = _3019 * _3014;
                        float _3022 = _3019 * _3015;
                        float _3023 = dot(vec3(_517, _520, _523), vec3(_3020, _3021, _3022));
                        float _3028 = 1.0 - (_3016 * _2973.w);
                        float _4373 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3029 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3030 = sqrt(_3016) * _2992.w;
                        float _3033 = 1.39999997615814208984375 / (_3030 + 1.39999997615814208984375);
                        float _3034 = _3033 * _3033;
                        float _3037 = ((1.0 - _3034) * _3023) + _3034;
                        float _3040 = _3030 * _3030;
                        float _3044 = ((isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0))) * _3029) / ((_3040 * 0.699999988079071044921875) + 1.0);
                        float _3048 = (-0.0) - _1659;
                        float _3049 = (-0.0) - _1660;
                        float _3050 = (-0.0) - _1661;
                        float _3054 = inversesqrt(dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050)));
                        float _3055 = _3054 * _3048;
                        float _3056 = _3054 * _3049;
                        float _3057 = _3054 * _3050;
                        float _3064 = exp2(log2(1.0 / ((_3040 * 3.5) + 5.0)) * 0.25);
                        float _3065 = 1.0 - _593;
                        float _3072 = sqrt(1.0 - ((1.0 - (_3065 * _3065)) * (1.0 - (_3064 * _3064))));
                        float _3073 = _3072 * _3072;
                        float _3074 = _3073 * _3073;
                        float _3075 = _3055 + _3020;
                        float _3076 = _3056 + _3021;
                        float _3077 = _3057 + _3022;
                        float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                        float _3085 = dot(vec3(_517, _520, _523), vec3(_3055, _3056, _3057));
                        float _4389 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3088 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                        float _3089 = dot(vec3(_517, _520, _523), vec3(_3081 * _3075, _3081 * _3076, _3081 * _3077));
                        float _4400 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3092 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3096 = ((_3092 * _3092) * (_3074 + (-1.0))) + 1.0;
                        float _3097 = _3033 * _3073;
                        float _3098 = _3097 * _3097;
                        float _3101 = ((1.0 - _3098) * _3023) + _3098;
                        float _4411 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3102 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3103 = 1.0 - _3073;
                        float _3113 = (0.5 / (((_3102 * ((_3088 * _3103) + _3073)) + 9.9999999392252902907785028219223e-09) + (((_3102 * _3103) + _3073) * _3088))) * _3102;
                        float _4422 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3124 = (((_3074 * 3.1415927410125732421875) * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) / ((_3096 * _3096) * ((_3040 * 2.1991131305694580078125) + 3.141590118408203125))) * _3029;
                        _2882 = (_3044 * _2992.x) + _2950;
                        _2883 = (_3044 * _2992.y) + _2951;
                        _2884 = (_3044 * _2992.z) + _2952;
                        _2879 = (_3124 * _3009.x) + _2947;
                        _2880 = (_3124 * _3009.y) + _2948;
                        _2881 = (_3124 * _3009.z) + _2949;
                        if (_2954 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2947 = _2879;
                            _2948 = _2880;
                            _2949 = _2881;
                            _2950 = _2882;
                            _2951 = _2883;
                            _2952 = _2884;
                            _2953 = _2954;
                        }
                    }
                    frontier_phi_68_pred = _2884;
                    frontier_phi_68_pred_1 = _2883;
                    frontier_phi_68_pred_2 = _2882;
                    frontier_phi_68_pred_3 = _2880;
                    frontier_phi_68_pred_4 = _2879;
                    frontier_phi_68_pred_5 = _2881;
                }
                _2690 = frontier_phi_68_pred;
                _2688 = frontier_phi_68_pred_1;
                _2686 = frontier_phi_68_pred_2;
                _2682 = frontier_phi_68_pred_3;
                _2680 = frontier_phi_68_pred_4;
                _2684 = frontier_phi_68_pred_5;
                uint _2830 = _2829 + 1u;
                if (_2830 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2823 = _2680;
                    _2824 = _2682;
                    _2825 = _2684;
                    _2826 = _2686;
                    _2827 = _2688;
                    _2828 = _2690;
                    _2829 = _2830;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
        }
        uvec4 _2693 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2694 = _2693.z;
        uint _2696 = (_2694 >> 8u) & 15u;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        if (((4294967295u << _2696) & _2600) == 0u)
        {
            _2791 = _2679;
            _2793 = _2681;
            _2795 = _2683;
            _2797 = _2685;
            _2799 = _2687;
            _2801 = _2689;
        }
        else
        {
            float _2816 = inversesqrt(dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661)));
            float _2817 = _2816 * _1659;
            float _2818 = _2816 * _1660;
            float _2819 = _2816 * _1661;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2696 < ((_2694 >> 12u) & 15u))
            {
                float _2792;
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2930 = _2679;
                float _2931 = _2681;
                float _2932 = _2683;
                float _2933 = _2685;
                float _2934 = _2687;
                float _2935 = _2689;
                uint _2936 = _2696;
                uint _2945;
                bool _2946;
                for (;;)
                {
                    _2945 = texelFetch(g_lightClassification, int((((_2594 << 5u) + (_2580 << 9u)) + (_2936 << 2u)) >> 2u)).x;
                    _2946 = _2945 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2946)
                    {
                        frontier_phi_74_pred = _2932;
                        frontier_phi_74_pred_1 = _2931;
                        frontier_phi_74_pred_2 = _2930;
                        frontier_phi_74_pred_3 = _2935;
                        frontier_phi_74_pred_4 = _2934;
                        frontier_phi_74_pred_5 = _2933;
                    }
                    else
                    {
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3142 = _2930;
                        float _3143 = _2931;
                        float _3144 = _2932;
                        float _3145 = _2933;
                        float _3146 = _2934;
                        float _3147 = _2935;
                        uint _3148 = _2945;
                        uint _3149;
                        vec4 _3174;
                        float _3175;
                        vec4 _3190;
                        vec3 _3202;
                        vec4 _3218;
                        vec4 _3234;
                        float _3281;
                        bool _3282;
                        for (;;)
                        {
                            uint _3159 = ((_2936 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3148));
                            _3149 = (_3148 + 4294967295u) & _3148;
                            uint _3161 = _3159 * 40u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            _3175 = _3174.w;
                            uint _3177 = (_3159 * 40u) + 4u;
                            _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3192 = (_3159 * 40u) + 8u;
                            _3202 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x));
                            uint _3205 = (_3159 * 40u) + 16u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3221 = (_3159 * 40u) + 20u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3237 = (_3159 * 40u) + 24u;
                            vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3256 = (_3159 * 40u) + 28u;
                            vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            _3281 = fma(_1661, _3269.z, fma(_1660, _3269.y, _3269.x * _1659)) + _3269.w;
                            _3282 = !((fma(_1661, _3250.z, fma(_1660, _3250.y, _3250.x * _1659)) + _3250.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3282)
                            {
                                float _3309 = _3174.x - _1659;
                                float _3310 = _3174.y - _1660;
                                float _3311 = _3174.z - _1661;
                                float _3312 = dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311));
                                float _3315 = inversesqrt(_3312);
                                float _3316 = _3315 * _3309;
                                float _3317 = _3315 * _3310;
                                float _3318 = _3315 * _3311;
                                float _3322 = 1.0 - (_3312 / (_3175 * _3175));
                                float _4433 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3327 = sqrt(_3312) * _3190.w;
                                float _3329 = 1.39999997615814208984375 / (_3327 + 1.39999997615814208984375);
                                float _3330 = _3329 * _3329;
                                float _3333 = ((1.0 - _3330) * dot(vec3(_3316, _3317, _3318), vec3(_517, _520, _523))) + _3330;
                                float _3336 = _3327 * _3327;
                                float _3340 = (fma(_1661, _3218.z, fma(_1660, _3218.y, _3218.x * _1659)) + _3218.w) / _3281;
                                float _3341 = (fma(_1661, _3234.z, fma(_1660, _3234.y, _3234.x * _1659)) + _3234.w) / _3281;
                                float _3345 = 1.0 - dot(vec2(_3340, _3341), vec2(_3340, _3341));
                                float _4449 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3347 = _3346 * (((isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0))) * _3323) / ((_3336 * 0.699999988079071044921875) + 1.0));
                                float _3359 = exp2(log2(1.0 / ((_3336 * 3.5) + 5.0)) * 0.25);
                                float _3360 = 1.0 - _593;
                                float _3367 = sqrt(1.0 - ((1.0 - (_3360 * _3360)) * (1.0 - (_3359 * _3359))));
                                float _3368 = _3367 * _3367;
                                float _3369 = _3368 * _3368;
                                float _3370 = _3316 - _2817;
                                float _3371 = _3317 - _2818;
                                float _3372 = _3318 - _2819;
                                float _3376 = inversesqrt(dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372)));
                                float _3380 = dot(vec3(_517, _520, _523), vec3((-0.0) - _2817, (-0.0) - _2818, (-0.0) - _2819));
                                float _4460 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3383 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3384 = dot(vec3(_517, _520, _523), vec3(_3376 * _3370, _3376 * _3371, _3376 * _3372));
                                float _4471 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3387 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3391 = ((_3387 * _3387) * (_3369 + (-1.0))) + 1.0;
                                float _3392 = _3329 * _3368;
                                float _3393 = _3392 * _3392;
                                float _3399 = ((1.0 - _3393) * dot(vec3(_517, _520, _523), vec3(_3316, _3317, _3318))) + _3393;
                                float _4482 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3401 = 1.0 - _3368;
                                float _3411 = (0.5 / (((_3400 * ((_3383 * _3401) + _3368)) + 9.9999999392252902907785028219223e-09) + (((_3400 * _3401) + _3368) * _3383))) * _3400;
                                float _4493 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3421 = (_3346 * _3323) * (((_3369 * 3.1415927410125732421875) * (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) / ((_3391 * _3391) * ((_3336 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3421 * _3202.z;
                                frontier_phi_80_pred_1 = _3421 * _3202.y;
                                frontier_phi_80_pred_2 = _3421 * _3202.x;
                                frontier_phi_80_pred_3 = _3347 * _3190.z;
                                frontier_phi_80_pred_4 = _3347 * _3190.y;
                                frontier_phi_80_pred_5 = _3347 * _3190.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3427 = frontier_phi_80_pred;
                            _3426 = frontier_phi_80_pred_1;
                            _3425 = frontier_phi_80_pred_2;
                            _3430 = frontier_phi_80_pred_3;
                            _3429 = frontier_phi_80_pred_4;
                            _3428 = frontier_phi_80_pred_5;
                            _3132 = _3428 + _3145;
                            _3133 = _3429 + _3146;
                            _3134 = _3430 + _3147;
                            _3129 = _3425 + _3142;
                            _3130 = _3426 + _3143;
                            _3131 = _3427 + _3144;
                            if (_3149 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3149;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3131;
                        frontier_phi_74_pred_1 = _3130;
                        frontier_phi_74_pred_2 = _3129;
                        frontier_phi_74_pred_3 = _3134;
                        frontier_phi_74_pred_4 = _3133;
                        frontier_phi_74_pred_5 = _3132;
                    }
                    _2796 = frontier_phi_74_pred;
                    _2794 = frontier_phi_74_pred_1;
                    _2792 = frontier_phi_74_pred_2;
                    _2802 = frontier_phi_74_pred_3;
                    _2800 = frontier_phi_74_pred_4;
                    _2798 = frontier_phi_74_pred_5;
                    uint _2937 = _2936 + 1u;
                    if (_2937 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2930 = _2792;
                        _2931 = _2794;
                        _2932 = _2796;
                        _2933 = _2798;
                        _2934 = _2800;
                        _2935 = _2802;
                        _2936 = _2937;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2800;
                frontier_phi_62_63_ladder_1 = _2798;
                frontier_phi_62_63_ladder_2 = _2796;
                frontier_phi_62_63_ladder_3 = _2802;
                frontier_phi_62_63_ladder_4 = _2794;
                frontier_phi_62_63_ladder_5 = _2792;
            }
            else
            {
                frontier_phi_62_63_ladder = _2687;
                frontier_phi_62_63_ladder_1 = _2685;
                frontier_phi_62_63_ladder_2 = _2683;
                frontier_phi_62_63_ladder_3 = _2689;
                frontier_phi_62_63_ladder_4 = _2681;
                frontier_phi_62_63_ladder_5 = _2679;
            }
            _2791 = frontier_phi_62_63_ladder_5;
            _2793 = frontier_phi_62_63_ladder_4;
            _2795 = frontier_phi_62_63_ladder_2;
            _2797 = frontier_phi_62_63_ladder_1;
            _2799 = frontier_phi_62_63_ladder;
            _2801 = frontier_phi_62_63_ladder_3;
        }
        float _2806 = isnan(1.0) ? _577 : (isnan(_577) ? 1.0 : min(_577, 1.0));
        _2612 = (_2806 * _2797) + _2125;
        _2614 = (_2806 * _2799) + _2127;
        _2616 = (_2806 * _2801) + _2129;
        _2618 = ((_2791 * _562) * _2806) + _2463;
        _2620 = ((_2793 * _564) * _2806) + _2465;
        _2622 = ((_2795 * _565) * _2806) + _2467;
    }
    else
    {
        _2612 = _2125;
        _2614 = _2127;
        _2616 = _2129;
        _2618 = _2463;
        _2620 = _2465;
        _2622 = _2467;
    }
    float _4509 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _4520 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _4531 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    uint _2642 = _536 + 6u;
    float _2650 = _495 / cbSceneParam._m0[86u].x;
    float _2651 = _496 / cbSceneParam._m0[86u].y;
    vec4 _2665 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2650, _2651, (log2((isnan(cbSceneParam._m0[77u].w) ? _429 : (isnan(_429) ? cbSceneParam._m0[77u].w : min(_429, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2667 = _2665.x;
    float _2668 = _2665.y;
    float _2669 = _2665.z;
    float _2670 = _2665.w;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    if (_429 > cbSceneParam._m0[78u].w)
    {
        float _2704 = isnan(_429) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _429 : min(cbSceneParam._m0[80u].w, _429));
        float _2705 = _2704 / _429;
        float _2716 = _2705 * _480;
        float _2717 = _481 * _2705;
        float _2718 = (-0.0) - _2717;
        float _2719 = _2705 * _482;
        float _2721 = (cbSceneParam._m0[77u].w * _2718) / _2704;
        float _2722 = _2721 + cbSceneParam._m0[79u].w;
        float _2723 = cbSceneParam._m0[79u].w - _2717;
        float _2729 = sqrt(((_2716 * _2716) + (_2717 * _2717)) + (_2719 * _2719));
        float _2732 = (1.0 - (cbSceneParam._m0[77u].w / _2704)) * _2729;
        float _2737 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2739 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2892;
        if (abs((_2718 - _2721) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2892 = ((((_2722 > 0.0) ? exp2(_2737 * _2722) : (2.0 - exp2(_2739 * _2722))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2732;
        }
        else
        {
            float _2852 = 1.0 / cbSceneParam._m0[80u].x;
            float _2853 = isnan(_2723) ? _2722 : (isnan(_2722) ? _2723 : max(_2722, _2723));
            float _2854 = isnan(_2723) ? _2722 : (isnan(_2722) ? _2723 : min(_2722, _2723));
            float _2863 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : min(_2853, 0.0));
            float _2864 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : min(_2854, 0.0));
            _2892 = ((abs(_2729 / _2718) * cbSceneParam._m0[80u].y) * ((((_2863 - _2864) * 2.0) - ((exp2(_2737 * (isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0)))) - exp2(_2737 * (isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0))))) * _2852)) - ((exp2(_2739 * _2863) - exp2(_2739 * _2864)) * _2852))) + (_2732 * cbSceneParam._m0[80u].z);
        }
        vec4 _2894 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2650, _2651, 1.0), 0.0);
        float _2903 = exp2((_2892 * (-1.44269502162933349609375)) * (1.0 - _2894.w));
        float _2904 = log2(_2903);
        float _2920 = log2(_2670);
        _2741 = (exp2(_2920 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].x)) * _2894.x) / cbSceneParam._m0[78u].x)) + _2667;
        _2743 = (exp2(_2920 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].y)) * _2894.y) / cbSceneParam._m0[78u].y)) + _2668;
        _2745 = (exp2(_2920 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].z)) * _2894.z) / cbSceneParam._m0[78u].z)) + _2669;
        _2747 = _2903 * _2670;
    }
    else
    {
        _2741 = _2667;
        _2743 = _2668;
        _2745 = _2669;
        _2747 = _2670;
    }
    float _2759 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2760 = _2759 == 3.0;
    float _2761 = log2(_2747);
    float _2768 = exp2(_2761 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2612 + ((isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))) * _577))) + ((_2618 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _1387)) * cbPerFrame._m0[3u].x));
    float _2769 = exp2(_2761 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2614 + ((isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))) * _577))) + ((_2620 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1387)) * cbPerFrame._m0[3u].x));
    float _2770 = exp2(_2761 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2616 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _577))) + ((_2622 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1387)) * cbPerFrame._m0[3u].x));
    float _2779 = (_2759 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2779 * (_2760 ? _2768 : (_2768 + (cbSceneParam._m0[72u].w * _2741)));
    SV_Target.y = _2779 * (_2760 ? _2769 : (_2769 + (cbSceneParam._m0[72u].w * _2743)));
    SV_Target.z = _2779 * (_2760 ? _2770 : (_2770 + (cbSceneParam._m0[72u].w * _2745)));
    SV_Target.w = cbInstanceData._m0[_2642].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2642].w;
}


