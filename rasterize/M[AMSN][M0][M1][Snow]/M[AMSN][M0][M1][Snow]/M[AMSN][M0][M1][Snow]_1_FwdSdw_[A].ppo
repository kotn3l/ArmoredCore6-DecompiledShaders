#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _960;
float _3611;
float _3612;
float _3613;
float _3614;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _241 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3623 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))));
    float _290 = fma(_287, _219, fma(_280, _212, _278 * _198));
    float _293 = fma(_287, _220, fma(_280, _213, _278 * _199));
    float _296 = fma(_287, _221, fma(_280, _214, _278 * _200));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _308 = cbMtdParam._m0[10u].x + dot(vec4(_300 * _290, _300 * _293, _300 * _296, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3634 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _309 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    vec4 _321 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _332 = ((_321.x - _247) * _309) + _247;
    float _333 = ((_321.y - _248) * _309) + _248;
    float _334 = ((_321.z - _249) * _309) + _249;
    vec4 _347 = texture(sampler2D(M_AMSN_M0_M1_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _354 = (_347.x * 2.0) + (-1.0);
    float _355 = (_347.y * 2.0) + (-1.0);
    float _356 = dot(vec2(_354, _355), vec2(_354, _355));
    float _3645 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _364 = ((_347.z - _274) * _309) + _274;
    float _373 = ((sqrt(1.0 - (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) - _287) * _309) + _287;
    float _377 = (((_354 - _278) * _309) + _278) + (cbMtdParam._m0[10u].y * _278);
    float _378 = (((_355 - _280) * _309) + _280) + (cbMtdParam._m0[10u].y * _280);
    float _381 = fma(_373, _219, fma(_378, _212, _377 * _198));
    float _384 = fma(_373, _220, fma(_378, _213, _377 * _199));
    float _387 = fma(_373, _221, fma(_378, _214, _377 * _200));
    float _391 = inversesqrt(dot(vec3(_381, _384, _387), vec3(_381, _384, _387)));
    float _392 = _391 * _381;
    float _393 = _391 * _384;
    float _394 = _391 * _387;
    float _3656 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _395 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _3667 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3678 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3689 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _414 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _455 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _465 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _455);
    float _466 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _455);
    float _467 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _455);
    float _471 = inversesqrt(dot(vec3(_465, _466, _467), vec3(_465, _466, _467)));
    float _472 = _465 * _471;
    float _473 = _466 * _471;
    float _474 = _467 * _471;
    vec4 _479 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _481 = _479.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _639 = sqrt(((_465 * _465) + (_466 * _466)) + (_467 * _467));
        float _645 = (cbMatDynParam._m0[5u].x * _639) + cbMatDynParam._m0[5u].y;
        float _3700 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _646 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _650 = (cbMatDynParam._m0[5u].z * _639) + cbMatDynParam._m0[5u].w;
        float _3711 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) - _646)) + _646) < ((_481 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _493 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _494 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _514 = fma(_394, cbSceneParam._m0[5u].z, fma(_393, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _392));
    float _517 = fma(_394, cbSceneParam._m0[6u].z, fma(_393, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _392));
    float _520 = fma(_394, cbSceneParam._m0[7u].z, fma(_393, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _392));
    uint _533 = uint(roundEven(NORMAL.w)) * 13u;
    uint _535 = _533 + 9u;
    uint _536 = _535 + uint(cbMatDynParam._m0[0u].w);
    float _542 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) * cbInstanceData._m0[_536].x;
    float _543 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * cbInstanceData._m0[_536].y;
    float _544 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) * cbInstanceData._m0[_536].z;
    float _3722 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _3744 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _547 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    vec4 _556 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _493, cbSceneParam._m0[86u].y * _494));
    float _559 = _556.x * TEXCOORD.z;
    float _560 = dot(vec3(_392, _393, _394), vec3(_472, _473, _474));
    float _563 = _560 * 2.0;
    float _567 = (_563 * _392) - _472;
    float _568 = (_563 * _393) - _473;
    float _569 = (_563 * _394) - _474;
    float _573 = abs(dot(vec3(_472, _473, _474), vec3(_392, _393, _394)));
    float _3755 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _575 = sqrt(_395);
    float _588 = exp2((_575 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_575 * 3.0));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _959;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _684 = fma(_628, cbModelParam._m0[26u].z, fma(_624, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _620));
        float _688 = fma(_628, cbModelParam._m0[27u].z, fma(_624, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _620));
        float _692 = fma(_628, cbModelParam._m0[28u].z, fma(_624, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _620));
        float _717 = _620 + _392;
        float _718 = _624 + _393;
        float _719 = _628 + _394;
        float _729 = fma(_719, cbModelParam._m0[26u].z, fma(_718, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _717)) - _684;
        float _730 = fma(_719, cbModelParam._m0[27u].z, fma(_718, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _717)) - _688;
        float _731 = fma(_719, cbModelParam._m0[28u].z, fma(_718, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _717)) - _692;
        float _735 = inversesqrt(dot(vec3(_729, _730, _731), vec3(_729, _730, _731)));
        float _748 = ((_735 * _729) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_684 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _749 = ((_735 * _730) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_688 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _750 = ((_735 * _731) / cbModelParam._m0[34u].z) + ((((((_692 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        float _787 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_753.x + (-0.5));
        float _789 = _787 * (_753.y + (-0.5));
        float _790 = _787 * (_753.z + (-0.5));
        float _797 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_760.x + (-0.5));
        float _799 = _797 * (_760.y + (-0.5));
        float _800 = _797 * (_760.z + (-0.5));
        float _807 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_767.x + (-0.5));
        float _809 = _807 * (_767.y + (-0.5));
        float _810 = _807 * (_767.z + (-0.5));
        float _817 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_774.x + (-0.5));
        float _819 = _817 * (_774.y + (-0.5));
        float _820 = _817 * (_774.z + (-0.5));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = _788 * 0.5;
        float _825 = _798 * 0.5;
        float _826 = _808 * 0.5;
        float _827 = dot(vec3(_824, _825, _826), vec3(_824, _825, _826));
        float _832 = (_827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_827);
        float _841 = (dot(vec3(_392, _393, _394), vec3(_832 * _824, _832 * _825, _832 * _826)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _851 = sqrt(((_825 * _825) + (_824 * _824)) + (_826 * _826)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _853 = _852 * 2.0;
        float _857 = (1.0 - _852) / (_852 + 1.0);
        float _3803 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _867 = ((((1.0 - _858) * (_853 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_853 + 1.0))) + _858) * _821;
        float _868 = _789 * 0.5;
        float _869 = _799 * 0.5;
        float _870 = _809 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _884 = (dot(vec3(_392, _393, _394), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _893 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_822 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3836 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_895 + 1.0))) + _900) * _822;
        float _910 = _790 * 0.5;
        float _911 = _800 * 0.5;
        float _912 = _810 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_392, _393, _394), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_823 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3869 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_937 + 1.0))) + _942) * _823;
        _959 = _790;
        _961 = _789;
        _962 = _788;
        _963 = _800;
        _964 = _799;
        _965 = _798;
        _966 = _810;
        _967 = _809;
        _968 = _808;
        _969 = _823;
        _970 = _822;
        _971 = _821;
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0)));
        _973 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
        _974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
    }
    else
    {
        _959 = _960;
        _961 = _960;
        _962 = _960;
        _963 = _960;
        _964 = _960;
        _965 = _960;
        _966 = _960;
        _967 = _960;
        _968 = _960;
        _969 = _960;
        _970 = _960;
        _971 = _960;
        _972 = 0.0;
        _973 = 0.0;
        _974 = 0.0;
    }
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1003 = fma(_628, cbModelParam._m0[30u].z, fma(_624, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _620));
        float _1007 = fma(_628, cbModelParam._m0[31u].z, fma(_624, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _620));
        float _1011 = fma(_628, cbModelParam._m0[32u].z, fma(_624, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _620));
        float _1034 = _620 + _392;
        float _1035 = _624 + _393;
        float _1036 = _628 + _394;
        float _1046 = fma(_1036, cbModelParam._m0[30u].z, fma(_1035, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1034)) - _1003;
        float _1047 = fma(_1036, cbModelParam._m0[31u].z, fma(_1035, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1034)) - _1007;
        float _1048 = fma(_1036, cbModelParam._m0[32u].z, fma(_1035, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1034)) - _1011;
        float _1052 = inversesqrt(dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048)));
        float _1065 = ((_1052 * _1046) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1003 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1052 * _1047) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1007 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1052 * _1048) / cbModelParam._m0[35u].z) + ((((((_1011 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        float _1102 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1069.x + (-0.5));
        float _1104 = _1102 * (_1069.y + (-0.5));
        float _1105 = _1102 * (_1069.z + (-0.5));
        float _1112 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1076.x + (-0.5));
        float _1114 = _1112 * (_1076.y + (-0.5));
        float _1115 = _1112 * (_1076.z + (-0.5));
        float _1122 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1083.x + (-0.5));
        float _1124 = _1122 * (_1083.y + (-0.5));
        float _1125 = _1122 * (_1083.z + (-0.5));
        float _1132 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1090.x + (-0.5));
        float _1134 = _1132 * (_1090.y + (-0.5));
        float _1135 = _1132 * (_1090.z + (-0.5));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = _1103 * 0.5;
        float _1140 = _1113 * 0.5;
        float _1141 = _1123 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_392, _393, _394), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3932 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1166 + 1.0))) + _1171) * _1136;
        float _1181 = _1104 * 0.5;
        float _1182 = _1114 * 0.5;
        float _1183 = _1124 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_392, _393, _394), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3965 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1208 + 1.0))) + _1213) * _1137;
        float _1223 = _1105 * 0.5;
        float _1224 = _1115 * 0.5;
        float _1225 = _1125 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_392, _393, _394), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3998 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1250 + 1.0))) + _1255) * _1138;
        _1272 = _1105;
        _1273 = _1104;
        _1274 = _1103;
        _1275 = _1115;
        _1276 = _1114;
        _1277 = _1113;
        _1278 = _1125;
        _1279 = _1124;
        _1280 = _1123;
        _1281 = _1138;
        _1282 = _1137;
        _1283 = _1136;
        _1284 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1285 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1286 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
    }
    else
    {
        _1272 = _960;
        _1273 = _960;
        _1274 = _960;
        _1275 = _960;
        _1276 = _960;
        _1277 = _960;
        _1278 = _960;
        _1279 = _960;
        _1280 = _960;
        _1281 = _960;
        _1282 = _960;
        _1283 = _960;
        _1284 = 0.0;
        _1285 = 0.0;
        _1286 = 0.0;
    }
    float _1296 = (cbModelParam._m0[1u].x * (_1284 - _972)) + _972;
    float _1297 = (cbModelParam._m0[1u].x * (_1285 - _973)) + _973;
    float _1298 = (cbModelParam._m0[1u].x * (_1286 - _974)) + _974;
    float _1319 = fma(_1298, cbSceneParam._m0[89u].z, fma(_1297, cbSceneParam._m0[89u].y, _1296 * cbSceneParam._m0[89u].x));
    float _1322 = fma(_1298, cbSceneParam._m0[90u].z, fma(_1297, cbSceneParam._m0[90u].y, _1296 * cbSceneParam._m0[90u].x));
    float _1325 = fma(_1298, cbSceneParam._m0[91u].z, fma(_1297, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1296));
    float _1340 = _567 * 0.5;
    float _1341 = _568 * 0.5;
    float _1342 = _569 * 0.5;
    float _1343 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_1274, _1277, _1280, _1283));
    float _1346 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_1273, _1276, _1279, _1282));
    float _1349 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_1272, _1275, _1278, _1281));
    float _1383;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1356 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_959, _963, _966, _969));
        float _1360 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_961, _964, _967, _970));
        float _1364 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_962, _965, _968, _971));
        float _1371 = dot(vec4(cbModelParam._m0[39u]), vec4(_1340, _1341, _1342, 1.0));
        _1383 = dot(vec3(isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1371) ? 0.0 : (isnan(0.0) ? _1371 : max(0.0, _1371))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1383 = 1.0;
    }
    float _1394;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1385 = dot(vec4(cbModelParam._m0[40u]), vec4(_1340, _1341, _1342, 1.0));
        _1394 = dot(vec3(isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1385) ? 0.0 : (isnan(0.0) ? _1385 : max(0.0, _1385))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1394 = 1.0;
    }
    float _1398 = (_1394 * cbModelParam._m0[1u].x) + (_1383 * (1.0 - cbModelParam._m0[1u].x));
    float _1408 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _395);
    float _1409 = isnan(_1408) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1408 : min(cbModelParam._m0[25u].z, _1408));
    float _1491;
    float _1493;
    float _1495;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1458 = fma(_628, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _620)) + cbModelParam._m0[13u].w;
        float _1462 = fma(_628, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _620)) + cbModelParam._m0[14u].w;
        float _1466 = fma(_628, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _620)) + cbModelParam._m0[15u].w;
        float _1469 = fma(_569, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _567));
        float _1472 = fma(_569, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _567));
        float _1475 = fma(_569, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _567));
        float _1503;
        if (_1469 > 0.0)
        {
            _1503 = abs((1.0 - _1458) / _1469);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1458 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1503 = frontier_phi_19_17_ladder;
        }
        float _1676;
        if (_1472 > 0.0)
        {
            _1676 = abs((1.0 - _1462) / _1472);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1462 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1676 = frontier_phi_28_24_ladder;
        }
        float _1971;
        if (_1475 > 0.0)
        {
            _1971 = abs((1.0 - _1466) / _1475);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1466 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1971 = frontier_phi_40_35_ladder;
        }
        float _1973 = isnan(_1676) ? _1503 : (isnan(_1503) ? _1676 : min(_1503, _1676));
        float _1974 = isnan(_1971) ? _1973 : (isnan(_1973) ? _1971 : min(_1973, _1971));
        float _1978 = (_1974 * _1469) + _1458;
        float _1979 = (_1974 * _1472) + _1462;
        float _1980 = (_1974 * _1475) + _1466;
        float _1981 = _1974 * 9.9999997473787516355514526367188e-05;
        float _1983 = (-1.0) - _1981;
        float _1985 = _1981 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1980 > _1985) || ((_1980 < _1983) || ((_1979 > _1985) || ((_1979 < _1983) || ((_1978 < _1983) || (_1978 > _1985))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2125 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1980, cbModelParam._m0[9u].z, fma(_1979, cbModelParam._m0[9u].y, _1978 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1980, cbModelParam._m0[10u].z, fma(_1979, cbModelParam._m0[10u].y, _1978 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1980, cbModelParam._m0[11u].z, fma(_1979, cbModelParam._m0[11u].y, _1978 * cbModelParam._m0[11u].x))), _1409);
            frontier_phi_18_40_ladder = _2125.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2125.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2125.x * cbModelParam._m0[1u].y;
        }
        _1491 = frontier_phi_18_40_ladder_2;
        _1493 = frontier_phi_18_40_ladder_1;
        _1495 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1479 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_567, _568, _569), _1409);
        _1491 = _1479.x * cbModelParam._m0[1u].y;
        _1493 = _1479.y * cbModelParam._m0[1u].y;
        _1495 = _1479.z * cbModelParam._m0[1u].y;
    }
    float _1499 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _395);
    float _1500 = isnan(_1499) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1499 : min(cbModelParam._m0[25u].w, _1499));
    float _1593;
    float _1595;
    float _1597;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1557 = fma(_628, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _620)) + cbModelParam._m0[21u].w;
        float _1561 = fma(_628, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _620)) + cbModelParam._m0[22u].w;
        float _1565 = fma(_628, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _620)) + cbModelParam._m0[23u].w;
        float _1568 = fma(_569, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _567));
        float _1571 = fma(_569, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _567));
        float _1574 = fma(_569, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _567));
        float _1681;
        if (_1568 > 0.0)
        {
            _1681 = abs((1.0 - _1557) / _1568);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1557 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1681 = frontier_phi_30_26_ladder;
        }
        float _1998;
        if (_1571 > 0.0)
        {
            _1998 = abs((1.0 - _1561) / _1571);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1561 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1998 = frontier_phi_42_37_ladder;
        }
        float _2325;
        if (_1574 > 0.0)
        {
            _2325 = abs((1.0 - _1565) / _1574);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1565 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2325 = frontier_phi_52_49_ladder;
        }
        float _2327 = isnan(_1998) ? _1681 : (isnan(_1681) ? _1998 : min(_1681, _1998));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1568) + _1557;
        float _2333 = (_2328 * _1571) + _1561;
        float _2334 = (_2328 * _1574) + _1565;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2336 = (-1.0) - _2335;
        float _2338 = _2335 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2334 > _2338) || ((_2334 < _2336) || ((_2333 > _2338) || ((_2333 < _2336) || ((_2332 < _2336) || (_2332 > _2338))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2452 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2334, cbModelParam._m0[17u].z, fma(_2333, cbModelParam._m0[17u].y, _2332 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2334, cbModelParam._m0[18u].z, fma(_2333, cbModelParam._m0[18u].y, _2332 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2334, cbModelParam._m0[19u].z, fma(_2333, cbModelParam._m0[19u].y, _2332 * cbModelParam._m0[19u].x))), _1500);
            frontier_phi_27_52_ladder = _2452.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2452.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2452.x * cbModelParam._m0[1u].z;
        }
        _1593 = frontier_phi_27_52_ladder_2;
        _1595 = frontier_phi_27_52_ladder_1;
        _1597 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1577 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_567, _568, _569), _1500);
        _1593 = _1577.x * cbModelParam._m0[1u].z;
        _1595 = _1577.y * cbModelParam._m0[1u].z;
        _1597 = _1577.z * cbModelParam._m0[1u].z;
    }
    float _1609 = ((((1.0 - _588) * ((_575 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_588 * _575)) * _559;
    float _1610 = _1609 * ((cbModelParam._m0[1u].w * (_1593 - _1491)) + _1491);
    float _1611 = _1609 * ((cbModelParam._m0[1u].w * (_1595 - _1493)) + _1493);
    float _1612 = _1609 * ((cbModelParam._m0[1u].w * (_1597 - _1495)) + _1495);
    float _1615 = fma(_1612, cbSceneParam._m0[89u].z, fma(_1611, cbSceneParam._m0[89u].y, _1610 * cbSceneParam._m0[89u].x));
    float _1618 = fma(_1612, cbSceneParam._m0[90u].z, fma(_1611, cbSceneParam._m0[90u].y, _1610 * cbSceneParam._m0[90u].x));
    float _1621 = fma(_1612, cbSceneParam._m0[91u].z, fma(_1611, cbSceneParam._m0[91u].y, _1610 * cbSceneParam._m0[91u].x));
    float _1655 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1659 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1663 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1667 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1668 = _1655 / _1667;
    float _1669 = _1659 / _1667;
    float _1670 = _1663 / _1667;
    float _1817;
    float _1818;
    float _1819;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1697 = ((uint(_1670 > cbSceneParam._m0[59u].y) + uint(_1670 > cbSceneParam._m0[59u].x)) + uint(_1670 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1698 = _1697 + 43u;
        uint _1706 = _1697 + 44u;
        uint _1714 = _1697 + 45u;
        uint _1722 = _1697 + 46u;
        float _1733 = fma(_1667, cbSceneParam._m0[_1698].w, fma(_1663, cbSceneParam._m0[_1698].z, fma(_1659, cbSceneParam._m0[_1698].y, _1655 * cbSceneParam._m0[_1698].x)));
        float _1737 = fma(_1667, cbSceneParam._m0[_1706].w, fma(_1663, cbSceneParam._m0[_1706].z, fma(_1659, cbSceneParam._m0[_1706].y, _1655 * cbSceneParam._m0[_1706].x)));
        float _1745 = fma(_1667, cbSceneParam._m0[_1722].w, fma(_1663, cbSceneParam._m0[_1722].z, fma(_1659, cbSceneParam._m0[_1722].y, _1655 * cbSceneParam._m0[_1722].x)));
        float _1750 = cbSceneParam._m0[33u].z * _1745;
        float _1752 = cbSceneParam._m0[33u].w * _1745;
        float _1755 = fma(_1667, cbSceneParam._m0[_1714].w, fma(_1663, cbSceneParam._m0[_1714].z, fma(_1659, cbSceneParam._m0[_1714].y, _1655 * cbSceneParam._m0[_1714].x))) / _1745;
        float _1803 = (cbSceneParam._m0[33u].x - sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670))) * cbSceneParam._m0[33u].y;
        float _4124 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1810 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1750 + _1733) / _1745, (_1752 + _1737) / _1745), _1755), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1752 + _1733) / _1745, (_1737 - _1750) / _1745), _1755), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1733 - _1750) / _1745, (_1737 - _1752) / _1745), _1755), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1733 - _1752) / _1745, (_1750 + _1737) / _1745), _1755), 0.0)).x), vec4(0.25)));
        _1817 = 1.0 - (_1810 * cbSceneParam._m0[34u].x);
        _1818 = 1.0 - (_1810 * cbSceneParam._m0[34u].y);
        _1819 = 1.0 - (_1810 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1817 = 1.0;
        _1818 = 1.0;
        _1819 = 1.0;
    }
    float _1883;
    float _1885;
    float _1887;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1871 = fma(_1667, cbSceneParam._m0[63u].w, fma(_1663, cbSceneParam._m0[63u].z, fma(_1659, cbSceneParam._m0[63u].y, _1655 * cbSceneParam._m0[63u].x)));
        float _1872 = fma(_1667, cbSceneParam._m0[60u].w, fma(_1663, cbSceneParam._m0[60u].z, fma(_1659, cbSceneParam._m0[60u].y, _1655 * cbSceneParam._m0[60u].x))) / _1871;
        float _1873 = fma(_1667, cbSceneParam._m0[61u].w, fma(_1663, cbSceneParam._m0[61u].z, fma(_1659, cbSceneParam._m0[61u].y, _1655 * cbSceneParam._m0[61u].x))) / _1871;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1872 >= cbSceneParam._m0[64u].x) && (_1873 >= cbSceneParam._m0[64u].y)) && (_1872 <= cbSceneParam._m0[64u].z)) && (_1873 <= cbSceneParam._m0[64u].w))
        {
            float _2011 = fma(_1667, cbSceneParam._m0[62u].w, fma(_1663, cbSceneParam._m0[62u].z, fma(_1659, cbSceneParam._m0[62u].y, _1655 * cbSceneParam._m0[62u].x))) / _1871;
            float _2015 = isnan(cbSceneParam._m0[41u].w) ? _2011 : (isnan(_2011) ? cbSceneParam._m0[41u].w : max(_2011, cbSceneParam._m0[41u].w));
            float _2058 = (cbSceneParam._m0[33u].x - sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670))) * cbSceneParam._m0[33u].y;
            float _4140 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
            float _2065 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1872, cbSceneParam._m0[33u].w + _1873), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1872, _1873 - cbSceneParam._m0[33u].z), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1872 - cbSceneParam._m0[33u].z, _1873 - cbSceneParam._m0[33u].w), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1872 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1873), _2015), 0.0)).x), vec4(0.25)));
            float _2069 = 1.0 - (_2065 * cbSceneParam._m0[34u].x);
            float _2070 = 1.0 - (_2065 * cbSceneParam._m0[34u].y);
            float _2071 = 1.0 - (_2065 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2070) ? _1818 : (isnan(_1818) ? _2070 : min(_1818, _2070));
            frontier_phi_39_38_ladder_1 = isnan(_2069) ? _1817 : (isnan(_1817) ? _2069 : min(_1817, _2069));
            frontier_phi_39_38_ladder_2 = isnan(_2071) ? _1819 : (isnan(_1819) ? _2071 : min(_1819, _2071));
        }
        else
        {
            frontier_phi_39_38_ladder = _1818;
            frontier_phi_39_38_ladder_1 = _1817;
            frontier_phi_39_38_ladder_2 = _1819;
        }
        _1883 = frontier_phi_39_38_ladder_1;
        _1885 = frontier_phi_39_38_ladder;
        _1887 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1883 = _1817;
        _1885 = _1818;
        _1887 = _1819;
    }
    uvec4 _1892 = floatBitsToUint(cbInstanceData._m0[_533 + 5u]);
    uint _1894 = _1892.x * 14u;
    uint _1895 = _1894 + 13u;
    float _1902 = _559 + (-1.0);
    float _1907 = (cbLight._m0[_1895].x * _1902) + 1.0;
    float _1908 = (cbLight._m0[_1895].y * _1902) + 1.0;
    float _1909 = (cbLight._m0[_1895].z * _1902) + 1.0;
    float _1910 = (cbLight._m0[_1895].w * _1902) + 1.0;
    uint _1911 = _1894 + 5u;
    float _1917 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
    uint _1921 = _1894 + 4u;
    float _1930 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1934 = _1894 | 1u;
    float _1945 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_392, _393, _394));
    float _1948 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_392, _393, _394));
    float _4176 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _4187 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1953 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * 0.3183098733425140380859375;
    float _1955 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _1962 = ((cbLight._m0[_1911].x * _1917) * _1955) + (((cbLight._m0[_1921].x * _1883) * _1930) * _1953);
    float _1963 = ((_1917 * cbLight._m0[_1911].y) * _1955) + (((cbLight._m0[_1921].y * _1885) * _1930) * _1953);
    float _1964 = ((_1917 * cbLight._m0[_1911].z) * _1955) + (((cbLight._m0[_1921].z * _1887) * _1930) * _1953);
    uvec4 _1968 = floatBitsToUint(cbLight._m0[_1894 + 12u]);
    bool _1970 = _1968.x == 0u;
    float _2072;
    float _2074;
    float _2076;
    if (_1970)
    {
        _2072 = _1962;
        _2074 = _1963;
        _2076 = _1964;
    }
    else
    {
        uint _2080 = _1894 + 6u;
        float _2096 = (dot(vec3(cbLight._m0[_1894 + 2u].xyz), vec3(_392, _393, _394)) * 0.5) + 0.5;
        float _2097 = _2096 * _2096;
        float _4198 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2099 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2072 = (((cbLight._m0[_2080].x * 0.3183098733425140380859375) * _2098) * _2099) + _1962;
        _2074 = (((cbLight._m0[_2080].y * 0.3183098733425140380859375) * _2098) * _2099) + _1963;
        _2076 = (((cbLight._m0[_2080].z * 0.3183098733425140380859375) * _2098) * _2099) + _1964;
    }
    bool _2079 = _1968.y == 0u;
    float _2134;
    float _2136;
    float _2138;
    if (_2079)
    {
        _2134 = _2072;
        _2136 = _2074;
        _2138 = _2076;
    }
    else
    {
        uint _2296 = _1894 + 7u;
        float _2312 = (dot(vec3(cbLight._m0[_1894 + 3u].xyz), vec3(_392, _393, _394)) * 0.5) + 0.5;
        float _2313 = _2312 * _2312;
        float _4214 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2314 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2315 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2134 = (((cbLight._m0[_2296].x * 0.3183098733425140380859375) * _2314) * _2315) + _2072;
        _2136 = (((cbLight._m0[_2296].y * 0.3183098733425140380859375) * _2314) * _2315) + _2074;
        _2138 = (((cbLight._m0[_2296].z * 0.3183098733425140380859375) * _2314) * _2315) + _2076;
    }
    uint _2141 = _1894 + 8u;
    float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _395) * 0.949999988079071044921875);
    float _2155 = _2154 * _2154;
    float _2156 = cbLight._m0[_1894].x + _472;
    float _2157 = cbLight._m0[_1894].y + _473;
    float _2158 = cbLight._m0[_1894].z + _474;
    float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
    float _2163 = _2162 * _2156;
    float _2164 = _2162 * _2157;
    float _2165 = _2162 * _2158;
    float _2166 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_1894].xyz));
    float _4230 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _4241 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _2170 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2171 = dot(vec3(_392, _393, _394), vec3(_2163, _2164, _2165));
    float _4252 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2175 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_2163, _2164, _2165));
    float _4263 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2179 = _2155 * _2155;
    float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
    float _2194 = (exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2195 = 1.0 - _2155;
    float _2206 = (0.5 / (((_2170 * ((_2169 * _2195) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2195) + _2155) * _2169))) * _2169;
    float _4274 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2208 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
    uint _2222 = _1894 + 9u;
    float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _395) * 0.949999988079071044921875);
    float _2234 = _2233 * _2233;
    float _2235 = cbLight._m0[_1934].x + _472;
    float _2236 = cbLight._m0[_1934].y + _473;
    float _2237 = cbLight._m0[_1934].z + _474;
    float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
    float _2242 = _2241 * _2235;
    float _2243 = _2241 * _2236;
    float _2244 = _2241 * _2237;
    float _2245 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_1934].xyz));
    float _4285 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2249 = dot(vec3(_392, _393, _394), vec3(_2242, _2243, _2244));
    float _4296 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2253 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_2242, _2243, _2244));
    float _4307 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2257 = _2234 * _2234;
    float _2261 = ((_2252 * _2252) * (_2257 + (-1.0))) + 1.0;
    float _2270 = (exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2271 = 1.0 - _2234;
    float _2281 = (0.5 / (((_2170 * ((_2248 * _2271) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2271) + _2234) * _2248))) * _2248;
    float _4318 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2283 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2257 / ((_2261 * _2261) * 3.141590118408203125));
    float _2293 = (((_2270 * cbLight._m0[_2222].x) * _2283) * _1917) + ((((cbLight._m0[_2141].x * _1883) * _2194) * _2208) * _1930);
    float _2294 = (((_2270 * cbLight._m0[_2222].y) * _2283) * _1917) + ((((cbLight._m0[_2141].y * _1885) * _2194) * _2208) * _1930);
    float _2295 = (((_2270 * cbLight._m0[_2222].z) * _2283) * _1917) + ((((cbLight._m0[_2141].z * _1887) * _2194) * _2208) * _1930);
    float _2351;
    float _2353;
    float _2355;
    if (_1970)
    {
        _2351 = _2293;
        _2353 = _2294;
        _2355 = _2295;
    }
    else
    {
        uint _2357 = _1894 + 2u;
        uint _2361 = _1894 + 10u;
        float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _395) * 0.949999988079071044921875);
        float _2376 = _2375 * _2375;
        float _2377 = cbLight._m0[_2357].x + _472;
        float _2378 = cbLight._m0[_2357].y + _473;
        float _2379 = cbLight._m0[_2357].z + _474;
        float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
        float _2384 = _2383 * _2377;
        float _2385 = _2383 * _2378;
        float _2386 = _2383 * _2379;
        float _2387 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_2357].xyz));
        float _4329 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2391 = dot(vec3(_392, _393, _394), vec3(_2384, _2385, _2386));
        float _4340 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2395 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2384, _2385, _2386));
        float _4351 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2399 = _2376 * _2376;
        float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
        float _2412 = (exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2413 = 1.0 - _2376;
        float _2423 = (0.5 / (((_2170 * ((_2390 * _2413) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2413) + _2376) * _2390))) * _2390;
        float _4362 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2425 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
        float _2426 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2351 = (((_2412 * cbLight._m0[_2361].x) * _2425) * _2426) + _2293;
        _2353 = (((_2412 * cbLight._m0[_2361].y) * _2425) * _2426) + _2294;
        _2355 = (((_2412 * cbLight._m0[_2361].z) * _2425) * _2426) + _2295;
    }
    float _2457;
    float _2459;
    float _2461;
    if (_2079)
    {
        _2457 = _2351;
        _2459 = _2353;
        _2461 = _2355;
    }
    else
    {
        uint _2468 = _1894 + 3u;
        uint _2472 = _1894 + 11u;
        float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _395) * 0.949999988079071044921875);
        float _2487 = _2486 * _2486;
        float _2488 = cbLight._m0[_2468].x + _472;
        float _2489 = cbLight._m0[_2468].y + _473;
        float _2490 = cbLight._m0[_2468].z + _474;
        float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
        float _2495 = _2494 * _2488;
        float _2496 = _2494 * _2489;
        float _2497 = _2494 * _2490;
        float _2498 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_2468].xyz));
        float _4378 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2502 = dot(vec3(_392, _393, _394), vec3(_2495, _2496, _2497));
        float _4389 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2506 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2495, _2496, _2497));
        float _4400 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2510 = _2487 * _2487;
        float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
        float _2523 = (exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2524 = 1.0 - _2487;
        float _2534 = (0.5 / (((_2170 * ((_2501 * _2524) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2524) + _2487) * _2501))) * _2501;
        float _4411 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2536 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
        float _2537 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2457 = (((_2523 * cbLight._m0[_2472].x) * _2536) * _2537) + _2351;
        _2459 = (((_2523 * cbLight._m0[_2472].y) * _2536) * _2537) + _2353;
        _2461 = (((_2523 * cbLight._m0[_2472].z) * _2536) * _2537) + _2355;
    }
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    if (_1892.y == 0u)
    {
        uvec4 _2558 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2559 = _2558.x;
        uint _2570 = uint((float(_2558.y) * floor(float(uint(cbSceneParam._m0[85u].y * _494) / _2559))) + floor(float(uint(cbSceneParam._m0[85u].x * _493) / _2559)));
        float _2580 = (log2(_1670 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2581 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        uint _2584 = uint(isnan(14.0) ? _2581 : (isnan(_2581) ? 14.0 : min(_2581, 14.0)));
        uvec4 _2589 = texelFetch(g_lightClusterGridBuffer, int(((_2584 << 2u) + (_2570 << 6u)) >> 2u));
        uint _2590 = _2589.x;
        uint _2591 = _2558.z;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        if (((((1u << ((_2591 >> 4u) & 15u)) + 4294967295u) & _2590) == 0u) || ((_2591 & 240u) == 0u))
        {
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
        }
        else
        {
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            uint _2827 = 0u;
            uint _2836;
            bool _2837;
            for (;;)
            {
                _2836 = texelFetch(g_lightClassification, int((((_2584 << 5u) + (_2570 << 9u)) + (_2827 << 2u)) >> 2u)).x;
                _2837 = _2836 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2837)
                {
                    frontier_phi_73_pred = _2826;
                    frontier_phi_73_pred_1 = _2825;
                    frontier_phi_73_pred_2 = _2824;
                    frontier_phi_73_pred_3 = _2823;
                    frontier_phi_73_pred_4 = _2822;
                    frontier_phi_73_pred_5 = _2821;
                }
                else
                {
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    uint _2972;
                    _2966 = _2821;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2824;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2836;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    for (;;)
                    {
                        uint _2976 = uint(findLSB(_2972)) + (_2827 << 5u);
                        uint _2973 = (_2972 + 4294967295u) & _2972;
                        uint _2978 = _2976 * 48u;
                        vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 3u)).x));
                        uint _2998 = (_2976 * 48u) + 4u;
                        vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 3u)).x));
                        uint _3017 = (_2976 * 48u) + 8u;
                        vec3 _3028 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x));
                        float _3032 = _2992.x - _1668;
                        float _3033 = _2992.y - _1669;
                        float _3034 = _2992.z - _1670;
                        float _3035 = dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034));
                        float _3038 = inversesqrt(_3035);
                        float _3039 = _3038 * _3032;
                        float _3040 = _3038 * _3033;
                        float _3041 = _3038 * _3034;
                        float _3042 = dot(vec3(_514, _517, _520), vec3(_3039, _3040, _3041));
                        float _3047 = 1.0 - (_3035 * _2992.w);
                        float _4437 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3048 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3049 = sqrt(_3035) * _3011.w;
                        float _3052 = 1.39999997615814208984375 / (_3049 + 1.39999997615814208984375);
                        float _3053 = _3052 * _3052;
                        float _3056 = ((1.0 - _3053) * _3042) + _3053;
                        float _3059 = _3049 * _3049;
                        float _3063 = ((isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))) * _3048) / ((_3059 * 0.699999988079071044921875) + 1.0);
                        float _3067 = (-0.0) - _1668;
                        float _3068 = (-0.0) - _1669;
                        float _3069 = (-0.0) - _1670;
                        float _3073 = inversesqrt(dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069)));
                        float _3074 = _3073 * _3067;
                        float _3075 = _3073 * _3068;
                        float _3076 = _3073 * _3069;
                        float _3083 = exp2(log2(1.0 / ((_3059 * 3.5) + 5.0)) * 0.25);
                        float _3084 = 1.0 - _575;
                        float _3091 = sqrt(1.0 - ((1.0 - (_3084 * _3084)) * (1.0 - (_3083 * _3083))));
                        float _3092 = _3091 * _3091;
                        float _3093 = _3092 * _3092;
                        float _3094 = _3074 + _3039;
                        float _3095 = _3075 + _3040;
                        float _3096 = _3076 + _3041;
                        float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
                        float _3104 = dot(vec3(_514, _517, _520), vec3(_3074, _3075, _3076));
                        float _4453 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3107 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3108 = dot(vec3(_514, _517, _520), vec3(_3100 * _3094, _3100 * _3095, _3100 * _3096));
                        float _4464 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3111 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3115 = ((_3111 * _3111) * (_3093 + (-1.0))) + 1.0;
                        float _3116 = _3052 * _3092;
                        float _3117 = _3116 * _3116;
                        float _3120 = ((1.0 - _3117) * _3042) + _3117;
                        float _4475 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3121 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3122 = 1.0 - _3092;
                        float _3132 = (0.5 / (((_3121 * ((_3107 * _3122) + _3092)) + 9.9999999392252902907785028219223e-09) + (((_3121 * _3122) + _3092) * _3107))) * _3121;
                        float _4486 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3143 = (((_3093 * 3.1415927410125732421875) * (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) / ((_3115 * _3115) * ((_3059 * 2.1991131305694580078125) + 3.141590118408203125))) * _3048;
                        _2896 = (_3063 * _3011.x) + _2969;
                        _2897 = (_3063 * _3011.y) + _2970;
                        _2898 = (_3063 * _3011.z) + _2971;
                        _2893 = (_3143 * _3028.x) + _2966;
                        _2894 = (_3143 * _3028.y) + _2967;
                        _2895 = (_3143 * _3028.z) + _2968;
                        if (_2973 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2966 = _2893;
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2896;
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2973;
                        }
                    }
                    frontier_phi_73_pred = _2898;
                    frontier_phi_73_pred_1 = _2897;
                    frontier_phi_73_pred_2 = _2896;
                    frontier_phi_73_pred_3 = _2895;
                    frontier_phi_73_pred_4 = _2894;
                    frontier_phi_73_pred_5 = _2893;
                }
                _2680 = frontier_phi_73_pred;
                _2678 = frontier_phi_73_pred_1;
                _2676 = frontier_phi_73_pred_2;
                _2674 = frontier_phi_73_pred_3;
                _2672 = frontier_phi_73_pred_4;
                _2670 = frontier_phi_73_pred_5;
                uint _2828 = _2827 + 1u;
                if (_2828 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2821 = _2670;
                    _2822 = _2672;
                    _2823 = _2674;
                    _2824 = _2676;
                    _2825 = _2678;
                    _2826 = _2680;
                    _2827 = _2828;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
        }
        uvec4 _2683 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2684 = _2683.z;
        uint _2686 = (_2684 >> 8u) & 15u;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        if (((4294967295u << _2686) & _2590) == 0u)
        {
            _2789 = _2669;
            _2791 = _2671;
            _2793 = _2673;
            _2795 = _2675;
            _2797 = _2677;
            _2799 = _2679;
        }
        else
        {
            float _2814 = inversesqrt(dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670)));
            float _2815 = _2814 * _1668;
            float _2816 = _2814 * _1669;
            float _2817 = _2814 * _1670;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2686 < ((_2684 >> 12u) & 15u))
            {
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2949 = _2669;
                float _2950 = _2671;
                float _2951 = _2673;
                float _2952 = _2675;
                float _2953 = _2677;
                float _2954 = _2679;
                uint _2955 = _2686;
                uint _2964;
                bool _2965;
                for (;;)
                {
                    _2964 = texelFetch(g_lightClassification, int((((_2584 << 5u) + (_2570 << 9u)) + (_2955 << 2u)) >> 2u)).x;
                    _2965 = _2964 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2965)
                    {
                        frontier_phi_84_pred = _2953;
                        frontier_phi_84_pred_1 = _2952;
                        frontier_phi_84_pred_2 = _2951;
                        frontier_phi_84_pred_3 = _2950;
                        frontier_phi_84_pred_4 = _2949;
                        frontier_phi_84_pred_5 = _2954;
                    }
                    else
                    {
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3170 = _2949;
                        float _3171 = _2950;
                        float _3172 = _2951;
                        float _3173 = _2952;
                        float _3174 = _2953;
                        float _3175 = _2954;
                        uint _3176 = _2964;
                        uint _3177;
                        vec4 _3202;
                        float _3203;
                        vec4 _3218;
                        vec3 _3230;
                        vec4 _3246;
                        vec4 _3262;
                        float _3309;
                        bool _3310;
                        for (;;)
                        {
                            uint _3187 = ((_2955 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3176));
                            _3177 = (_3176 + 4294967295u) & _3176;
                            uint _3189 = _3187 * 40u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            _3203 = _3202.w;
                            uint _3205 = (_3187 * 40u) + 4u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3220 = (_3187 * 40u) + 8u;
                            _3230 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x));
                            uint _3233 = (_3187 * 40u) + 16u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3249 = (_3187 * 40u) + 20u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3265 = (_3187 * 40u) + 24u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3284 = (_3187 * 40u) + 28u;
                            vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            _3309 = fma(_1670, _3297.z, fma(_1669, _3297.y, _3297.x * _1668)) + _3297.w;
                            _3310 = !((fma(_1670, _3278.z, fma(_1669, _3278.y, _3278.x * _1668)) + _3278.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3310)
                            {
                                float _3337 = _3202.x - _1668;
                                float _3338 = _3202.y - _1669;
                                float _3339 = _3202.z - _1670;
                                float _3340 = dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339));
                                float _3343 = inversesqrt(_3340);
                                float _3344 = _3343 * _3337;
                                float _3345 = _3343 * _3338;
                                float _3346 = _3343 * _3339;
                                float _3350 = 1.0 - (_3340 / (_3203 * _3203));
                                float _4497 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3355 = sqrt(_3340) * _3218.w;
                                float _3357 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                                float _3358 = _3357 * _3357;
                                float _3361 = ((1.0 - _3358) * dot(vec3(_3344, _3345, _3346), vec3(_514, _517, _520))) + _3358;
                                float _3364 = _3355 * _3355;
                                float _3368 = (fma(_1670, _3246.z, fma(_1669, _3246.y, _3246.x * _1668)) + _3246.w) / _3309;
                                float _3369 = (fma(_1670, _3262.z, fma(_1669, _3262.y, _3262.x * _1668)) + _3262.w) / _3309;
                                float _3373 = 1.0 - dot(vec2(_3368, _3369), vec2(_3368, _3369));
                                float _4513 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3375 = _3374 * (((isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0))) * _3351) / ((_3364 * 0.699999988079071044921875) + 1.0));
                                float _3387 = exp2(log2(1.0 / ((_3364 * 3.5) + 5.0)) * 0.25);
                                float _3388 = 1.0 - _575;
                                float _3395 = sqrt(1.0 - ((1.0 - (_3388 * _3388)) * (1.0 - (_3387 * _3387))));
                                float _3396 = _3395 * _3395;
                                float _3397 = _3396 * _3396;
                                float _3398 = _3344 - _2815;
                                float _3399 = _3345 - _2816;
                                float _3400 = _3346 - _2817;
                                float _3404 = inversesqrt(dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400)));
                                float _3408 = dot(vec3(_514, _517, _520), vec3((-0.0) - _2815, (-0.0) - _2816, (-0.0) - _2817));
                                float _4524 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3411 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3412 = dot(vec3(_514, _517, _520), vec3(_3404 * _3398, _3404 * _3399, _3404 * _3400));
                                float _4535 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3415 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3419 = ((_3415 * _3415) * (_3397 + (-1.0))) + 1.0;
                                float _3420 = _3357 * _3396;
                                float _3421 = _3420 * _3420;
                                float _3427 = ((1.0 - _3421) * dot(vec3(_514, _517, _520), vec3(_3344, _3345, _3346))) + _3421;
                                float _4546 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3429 = 1.0 - _3396;
                                float _3439 = (0.5 / (((_3428 * ((_3411 * _3429) + _3396)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3396) * _3411))) * _3428;
                                float _4557 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3449 = (_3374 * _3351) * (((_3397 * 3.1415927410125732421875) * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) / ((_3419 * _3419) * ((_3364 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3375 * _3218.y;
                                frontier_phi_90_pred_1 = _3375 * _3218.x;
                                frontier_phi_90_pred_2 = _3449 * _3230.z;
                                frontier_phi_90_pred_3 = _3449 * _3230.y;
                                frontier_phi_90_pred_4 = _3449 * _3230.x;
                                frontier_phi_90_pred_5 = _3375 * _3218.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3457 = frontier_phi_90_pred;
                            _3456 = frontier_phi_90_pred_1;
                            _3455 = frontier_phi_90_pred_2;
                            _3454 = frontier_phi_90_pred_3;
                            _3453 = frontier_phi_90_pred_4;
                            _3458 = frontier_phi_90_pred_5;
                            _3160 = _3456 + _3173;
                            _3161 = _3457 + _3174;
                            _3162 = _3458 + _3175;
                            _3157 = _3453 + _3170;
                            _3158 = _3454 + _3171;
                            _3159 = _3455 + _3172;
                            if (_3177 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3177;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3161;
                        frontier_phi_84_pred_1 = _3160;
                        frontier_phi_84_pred_2 = _3159;
                        frontier_phi_84_pred_3 = _3158;
                        frontier_phi_84_pred_4 = _3157;
                        frontier_phi_84_pred_5 = _3162;
                    }
                    _2798 = frontier_phi_84_pred;
                    _2796 = frontier_phi_84_pred_1;
                    _2794 = frontier_phi_84_pred_2;
                    _2792 = frontier_phi_84_pred_3;
                    _2790 = frontier_phi_84_pred_4;
                    _2800 = frontier_phi_84_pred_5;
                    uint _2956 = _2955 + 1u;
                    if (_2956 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2949 = _2790;
                        _2950 = _2792;
                        _2951 = _2794;
                        _2952 = _2796;
                        _2953 = _2798;
                        _2954 = _2800;
                        _2955 = _2956;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2800;
                frontier_phi_65_66_ladder_1 = _2796;
                frontier_phi_65_66_ladder_2 = _2798;
                frontier_phi_65_66_ladder_3 = _2792;
                frontier_phi_65_66_ladder_4 = _2790;
                frontier_phi_65_66_ladder_5 = _2794;
            }
            else
            {
                frontier_phi_65_66_ladder = _2679;
                frontier_phi_65_66_ladder_1 = _2675;
                frontier_phi_65_66_ladder_2 = _2677;
                frontier_phi_65_66_ladder_3 = _2671;
                frontier_phi_65_66_ladder_4 = _2669;
                frontier_phi_65_66_ladder_5 = _2673;
            }
            _2789 = frontier_phi_65_66_ladder_4;
            _2791 = frontier_phi_65_66_ladder_3;
            _2793 = frontier_phi_65_66_ladder_5;
            _2795 = frontier_phi_65_66_ladder_1;
            _2797 = frontier_phi_65_66_ladder_2;
            _2799 = frontier_phi_65_66_ladder;
        }
        float _2804 = isnan(1.0) ? _559 : (isnan(_559) ? 1.0 : min(_559, 1.0));
        _2602 = (_2804 * _2795) + _2134;
        _2604 = (_2804 * _2797) + _2136;
        _2606 = (_2804 * _2799) + _2138;
        _2608 = ((_2789 * 0.039999999105930328369140625) * _2804) + _2457;
        _2610 = ((_2791 * 0.039999999105930328369140625) * _2804) + _2459;
        _2612 = ((_2793 * 0.039999999105930328369140625) * _2804) + _2461;
    }
    else
    {
        _2602 = _2134;
        _2604 = _2136;
        _2606 = _2138;
        _2608 = _2457;
        _2610 = _2459;
        _2612 = _2461;
    }
    float _4573 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4584 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4595 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _2629 = ((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2602 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _559))) + ((_2608 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _1398)) * cbPerFrame._m0[3u].x);
    float _2630 = ((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2604 + ((isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))) * _559))) + ((_2610 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _1398)) * cbPerFrame._m0[3u].x);
    float _2631 = ((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2606 + ((isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))) * _559))) + ((_2612 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _1398)) * cbPerFrame._m0[3u].x);
    uint _2632 = _533 + 6u;
    float _2640 = _493 / cbSceneParam._m0[86u].x;
    float _2641 = _494 / cbSceneParam._m0[86u].y;
    vec4 _2655 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, (log2((isnan(cbSceneParam._m0[77u].w) ? _414 : (isnan(_414) ? cbSceneParam._m0[77u].w : min(_414, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2657 = _2655.x;
    float _2658 = _2655.y;
    float _2659 = _2655.z;
    float _2660 = _2655.w;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    if (_414 > cbSceneParam._m0[78u].w)
    {
        float _2694 = isnan(_414) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _414 : min(cbSceneParam._m0[80u].w, _414));
        float _2695 = _2694 / _414;
        float _2706 = _2695 * _465;
        float _2707 = _466 * _2695;
        float _2708 = (-0.0) - _2707;
        float _2709 = _2695 * _467;
        float _2711 = (cbSceneParam._m0[77u].w * _2708) / _2694;
        float _2712 = _2711 + cbSceneParam._m0[79u].w;
        float _2713 = cbSceneParam._m0[79u].w - _2707;
        float _2719 = sqrt(((_2706 * _2706) + (_2707 * _2707)) + (_2709 * _2709));
        float _2722 = (1.0 - (cbSceneParam._m0[77u].w / _2694)) * _2719;
        float _2727 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2729 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2906;
        if (abs((_2708 - _2711) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2906 = ((((_2712 > 0.0) ? exp2(_2727 * _2712) : (2.0 - exp2(_2729 * _2712))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2722;
        }
        else
        {
            float _2850 = 1.0 / cbSceneParam._m0[80u].x;
            float _2851 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : max(_2712, _2713));
            float _2852 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : min(_2712, _2713));
            float _2861 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : min(_2851, 0.0));
            float _2862 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : min(_2852, 0.0));
            _2906 = ((abs(_2719 / _2708) * cbSceneParam._m0[80u].y) * ((((_2861 - _2862) * 2.0) - ((exp2(_2727 * (isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0)))) - exp2(_2727 * (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0))))) * _2850)) - ((exp2(_2729 * _2861) - exp2(_2729 * _2862)) * _2850))) + (_2722 * cbSceneParam._m0[80u].z);
        }
        vec4 _2908 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, 1.0), 0.0);
        float _2917 = exp2((_2906 * (-1.44269502162933349609375)) * (1.0 - _2908.w));
        float _2918 = log2(_2917);
        float _2934 = log2(_2660);
        _2731 = (exp2(_2934 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].x)) * _2908.x) / cbSceneParam._m0[78u].x)) + _2657;
        _2733 = (exp2(_2934 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].y)) * _2908.y) / cbSceneParam._m0[78u].y)) + _2658;
        _2735 = (exp2(_2934 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].z)) * _2908.z) / cbSceneParam._m0[78u].z)) + _2659;
        _2737 = _2917 * _2660;
    }
    else
    {
        _2731 = _2657;
        _2733 = _2658;
        _2735 = _2659;
        _2737 = _2660;
    }
    bool _2944;
    vec4 _2747;
    vec4 _2769;
    float _2771;
    float _2775;
    float _2776;
    float _2777;
    float _2778;
    bool _2788;
    for (;;)
    {
        _2747 = cbMatDynParam._m0[0u];
        float _2749 = roundEven(_2747.y);
        bool _2750 = _2749 == 3.0;
        float _2751 = log2(_2737);
        float _2758 = exp2(_2751 * cbSceneParam._m0[78u].x) * _2629;
        float _2759 = exp2(_2751 * cbSceneParam._m0[78u].y) * _2630;
        float _2760 = exp2(_2751 * cbSceneParam._m0[78u].z) * _2631;
        float _2767 = _481 + (-0.5);
        _2769 = cbMtdParam._m0[1u];
        _2771 = _2769.y * _2767;
        float _2774 = (_2749 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2775 = _2774 * (_2750 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2731)));
        _2776 = _2774 * (_2750 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2733)));
        _2777 = _2774 * (_2750 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2735)));
        _2778 = _2767 * 0.999000012874603271484375;
        _2788 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2788)
        {
            if ((cbInstanceData._m0[_533 + 7u].x + _2778) < 0.5)
            {
                _2944 = true;
                break;
            }
        }
        uint _2885 = _535 + uint(_2747.w);
        if ((cbInstanceData._m0[_2885].w < 1.0) && ((cbInstanceData._m0[_2885].w + _2778) < 0.5))
        {
            _2944 = true;
            break;
        }
        if ((_2771 + 1.0) < _2769.x)
        {
            _2944 = true;
            break;
        }
        _2944 = false;
        break;
    }
    float _3148;
    if (_2944)
    {
        discard_state = true;
        _3148 = 0.0;
    }
    else
    {
        _3148 = cbInstanceData._m0[_2632].w;
    }
    SV_Target.x = _2775;
    SV_Target.y = _2776;
    SV_Target.z = _2777;
    SV_Target.w = _3148;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2632].w;
    discard_exit();
}


