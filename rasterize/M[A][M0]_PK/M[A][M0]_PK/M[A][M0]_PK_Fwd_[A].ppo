#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_PK_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _762;
float _2926;
float _2927;
float _2928;
float _2929;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    float _173;
    float _174;
    float _175;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
    }
    else
    {
        _173 = _166;
        _174 = _167;
        _175 = _168;
    }
    vec4 _195 = texture(sampler2D(M_A_M0_PK_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _201 = _195.x * cbMtdParam._m0[9u].x;
    float _202 = _195.y * cbMtdParam._m0[9u].y;
    float _203 = _195.z * cbMtdParam._m0[9u].z;
    float _208 = gl_FragCoord.x * 0.125;
    float _210 = gl_FragCoord.y * 0.125;
    float _222 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _223 = _222 * _173;
    float _224 = _222 * _174;
    float _225 = _222 * _175;
    float _2938 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _2949 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _2960 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    if (!(cbMtdParam._m0[10u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_208, _210)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _249 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _290 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _300 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _290);
    float _301 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _290);
    float _302 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _290);
    float _306 = inversesqrt(dot(vec3(_300, _301, _302), vec3(_300, _301, _302)));
    float _307 = _300 * _306;
    float _308 = _301 * _306;
    float _309 = _302 * _306;
    vec4 _311 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_208, _210));
    float _313 = _311.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _443 = sqrt(((_300 * _300) + (_301 * _301)) + (_302 * _302));
        float _449 = (cbMatDynParam._m0[5u].x * _443) + cbMatDynParam._m0[5u].y;
        float _2971 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
        float _450 = isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0));
        float _454 = (cbMatDynParam._m0[5u].z * _443) + cbMatDynParam._m0[5u].w;
        float _2982 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0))) - _450)) + _450) < ((_313 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _325 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _326 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _346 = fma(_225, cbSceneParam._m0[5u].z, fma(_224, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _223));
    float _349 = fma(_225, cbSceneParam._m0[6u].z, fma(_224, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _223));
    float _352 = fma(_225, cbSceneParam._m0[7u].z, fma(_224, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _223));
    uint _365 = uint(roundEven(NORMAL.w)) * 13u;
    uint _367 = _365 + 9u;
    uint _368 = _367 + uint(cbMatDynParam._m0[0u].w);
    float _374 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0)))) * cbInstanceData._m0[_368].x;
    float _375 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0)))) * cbInstanceData._m0[_368].y;
    float _376 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0)))) * cbInstanceData._m0[_368].z;
    float _2993 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _377 = isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0));
    float _3004 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _378 = isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0));
    float _3015 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _379 = isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0));
    vec4 _388 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _325, cbSceneParam._m0[86u].y * _326));
    float _391 = _388.x * TEXCOORD.z;
    float _392 = dot(vec3(_223, _224, _225), vec3(_307, _308, _309));
    float _395 = _392 * 2.0;
    float _400 = (_395 * _223) - _307;
    float _401 = (_395 * _224) - _308;
    float _402 = (_395 * _225) - _309;
    float _424 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _428 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _432 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _761;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _486 = fma(_432, cbModelParam._m0[26u].z, fma(_428, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _424));
        float _490 = fma(_432, cbModelParam._m0[27u].z, fma(_428, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _424));
        float _494 = fma(_432, cbModelParam._m0[28u].z, fma(_428, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _424));
        float _519 = _424 + _223;
        float _520 = _428 + _224;
        float _521 = _432 + _225;
        float _531 = fma(_521, cbModelParam._m0[26u].z, fma(_520, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _519)) - _486;
        float _532 = fma(_521, cbModelParam._m0[27u].z, fma(_520, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _519)) - _490;
        float _533 = fma(_521, cbModelParam._m0[28u].z, fma(_520, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _519)) - _494;
        float _537 = inversesqrt(dot(vec3(_531, _532, _533), vec3(_531, _532, _533)));
        float _550 = ((_537 * _531) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_486 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _551 = ((_537 * _532) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_490 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _552 = ((_537 * _533) / cbModelParam._m0[34u].z) + ((((((_494 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _555 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_550, _551, _552), 0.0);
        vec4 _562 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_550, _551, _552), 0.0);
        vec4 _569 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_550, _551, _552), 0.0);
        vec4 _576 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_550, _551, _552), 0.0);
        float _589 = exp2((_555.w + (-0.5)) * 20.0) * 2.0;
        float _590 = _589 * (_555.x + (-0.5));
        float _591 = _589 * (_555.y + (-0.5));
        float _592 = _589 * (_555.z + (-0.5));
        float _599 = exp2((_562.w + (-0.5)) * 20.0) * 2.0;
        float _600 = _599 * (_562.x + (-0.5));
        float _601 = _599 * (_562.y + (-0.5));
        float _602 = _599 * (_562.z + (-0.5));
        float _609 = exp2((_569.w + (-0.5)) * 20.0) * 2.0;
        float _610 = _609 * (_569.x + (-0.5));
        float _611 = _609 * (_569.y + (-0.5));
        float _612 = _609 * (_569.z + (-0.5));
        float _619 = exp2((_576.w + (-0.5)) * 20.0) * 2.0;
        float _620 = _619 * (_576.x + (-0.5));
        float _621 = _619 * (_576.y + (-0.5));
        float _622 = _619 * (_576.z + (-0.5));
        float _623 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        float _624 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _625 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        float _626 = _590 * 0.5;
        float _627 = _600 * 0.5;
        float _628 = _610 * 0.5;
        float _629 = dot(vec3(_626, _627, _628), vec3(_626, _627, _628));
        float _634 = (_629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_629);
        float _643 = (dot(vec3(_223, _224, _225), vec3(_634 * _626, _634 * _627, _634 * _628)) + 1.0) * 0.5;
        float _3041 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _653 = sqrt(((_627 * _627) + (_626 * _626)) + (_628 * _628)) / (_623 + 9.9999997473787516355514526367188e-06);
        float _3052 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _654 = isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0));
        float _655 = _654 * 2.0;
        float _659 = (1.0 - _654) / (_654 + 1.0);
        float _3063 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0));
        float _669 = ((((1.0 - _660) * (_655 + 2.0)) * exp2(log2(isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0))) * (_655 + 1.0))) + _660) * _623;
        float _670 = _591 * 0.5;
        float _671 = _601 * 0.5;
        float _672 = _611 * 0.5;
        float _673 = dot(vec3(_670, _671, _672), vec3(_670, _671, _672));
        float _678 = (_673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_673);
        float _686 = (dot(vec3(_223, _224, _225), vec3(_678 * _670, _678 * _671, _678 * _672)) + 1.0) * 0.5;
        float _3074 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _695 = sqrt(((_671 * _671) + (_670 * _670)) + (_672 * _672)) / (_624 + 9.9999997473787516355514526367188e-06);
        float _3085 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _696 = isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0));
        float _697 = _696 * 2.0;
        float _701 = (1.0 - _696) / (_696 + 1.0);
        float _3096 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0));
        float _711 = ((((1.0 - _702) * (_697 + 2.0)) * exp2(log2(isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0))) * (_697 + 1.0))) + _702) * _624;
        float _712 = _592 * 0.5;
        float _713 = _602 * 0.5;
        float _714 = _612 * 0.5;
        float _715 = dot(vec3(_712, _713, _714), vec3(_712, _713, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _728 = (dot(vec3(_223, _224, _225), vec3(_720 * _712, _720 * _713, _720 * _714)) + 1.0) * 0.5;
        float _3107 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _737 = sqrt(((_713 * _713) + (_712 * _712)) + (_714 * _714)) / (_625 + 9.9999997473787516355514526367188e-06);
        float _3118 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3129 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0))) * (_739 + 1.0))) + _744) * _625;
        _761 = _592;
        _763 = _591;
        _764 = _590;
        _765 = _602;
        _766 = _601;
        _767 = _600;
        _768 = _612;
        _769 = _611;
        _770 = _610;
        _771 = _625;
        _772 = _624;
        _773 = _623;
        _774 = cbModelParam._m0[36u].z * (isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0)));
        _775 = cbModelParam._m0[36u].z * (isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0)));
        _776 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
    }
    else
    {
        _761 = _762;
        _763 = _762;
        _764 = _762;
        _765 = _762;
        _766 = _762;
        _767 = _762;
        _768 = _762;
        _769 = _762;
        _770 = _762;
        _771 = _762;
        _772 = _762;
        _773 = _762;
        _774 = 0.0;
        _775 = 0.0;
        _776 = 0.0;
    }
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _802 = fma(_432, cbModelParam._m0[30u].z, fma(_428, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _424));
        float _806 = fma(_432, cbModelParam._m0[31u].z, fma(_428, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _424));
        float _810 = fma(_432, cbModelParam._m0[32u].z, fma(_428, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _424));
        float _833 = _424 + _223;
        float _834 = _428 + _224;
        float _835 = _432 + _225;
        float _845 = fma(_835, cbModelParam._m0[30u].z, fma(_834, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _833)) - _802;
        float _846 = fma(_835, cbModelParam._m0[31u].z, fma(_834, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _833)) - _806;
        float _847 = fma(_835, cbModelParam._m0[32u].z, fma(_834, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _833)) - _810;
        float _851 = inversesqrt(dot(vec3(_845, _846, _847), vec3(_845, _846, _847)));
        float _864 = ((_851 * _845) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_802 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_851 * _846) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_806 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _866 = ((_851 * _847) / cbModelParam._m0[35u].z) + ((((((_810 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        float _901 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_868.x + (-0.5));
        float _903 = _901 * (_868.y + (-0.5));
        float _904 = _901 * (_868.z + (-0.5));
        float _911 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_875.x + (-0.5));
        float _913 = _911 * (_875.y + (-0.5));
        float _914 = _911 * (_875.z + (-0.5));
        float _921 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_882.x + (-0.5));
        float _923 = _921 * (_882.y + (-0.5));
        float _924 = _921 * (_882.z + (-0.5));
        float _931 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_889.x + (-0.5));
        float _933 = _931 * (_889.y + (-0.5));
        float _934 = _931 * (_889.z + (-0.5));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = _902 * 0.5;
        float _939 = _912 * 0.5;
        float _940 = _922 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_223, _224, _225), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3170 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3181 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3192 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0))) * (_965 + 1.0))) + _970) * _935;
        float _980 = _903 * 0.5;
        float _981 = _913 * 0.5;
        float _982 = _923 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(_223, _224, _225), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3203 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3214 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3225 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0))) * (_1007 + 1.0))) + _1012) * _936;
        float _1022 = _904 * 0.5;
        float _1023 = _914 * 0.5;
        float _1024 = _924 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_223, _224, _225), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3236 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3247 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3258 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0))) * (_1049 + 1.0))) + _1054) * _937;
        _1071 = _904;
        _1072 = _903;
        _1073 = _902;
        _1074 = _914;
        _1075 = _913;
        _1076 = _912;
        _1077 = _924;
        _1078 = _923;
        _1079 = _922;
        _1080 = _937;
        _1081 = _936;
        _1082 = _935;
        _1083 = cbModelParam._m0[36u].w * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
        _1084 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
        _1085 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
    }
    else
    {
        _1071 = _762;
        _1072 = _762;
        _1073 = _762;
        _1074 = _762;
        _1075 = _762;
        _1076 = _762;
        _1077 = _762;
        _1078 = _762;
        _1079 = _762;
        _1080 = _762;
        _1081 = _762;
        _1082 = _762;
        _1083 = 0.0;
        _1084 = 0.0;
        _1085 = 0.0;
    }
    float _1095 = (cbModelParam._m0[1u].x * (_1083 - _774)) + _774;
    float _1096 = (cbModelParam._m0[1u].x * (_1084 - _775)) + _775;
    float _1097 = (cbModelParam._m0[1u].x * (_1085 - _776)) + _776;
    float _1118 = fma(_1097, cbSceneParam._m0[89u].z, fma(_1096, cbSceneParam._m0[89u].y, _1095 * cbSceneParam._m0[89u].x));
    float _1121 = fma(_1097, cbSceneParam._m0[90u].z, fma(_1096, cbSceneParam._m0[90u].y, _1095 * cbSceneParam._m0[90u].x));
    float _1124 = fma(_1097, cbSceneParam._m0[91u].z, fma(_1096, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1095));
    float _1139 = _400 * 0.5;
    float _1140 = _401 * 0.5;
    float _1141 = _402 * 0.5;
    float _1142 = dot(vec4(_1139, _1140, _1141, 1.0), vec4(_1073, _1076, _1079, _1082));
    float _1145 = dot(vec4(_1139, _1140, _1141, 1.0), vec4(_1072, _1075, _1078, _1081));
    float _1148 = dot(vec4(_1139, _1140, _1141, 1.0), vec4(_1071, _1074, _1077, _1080));
    float _1182;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1155 = dot(vec4(_1139, _1140, _1141, 1.0), vec4(_761, _765, _768, _771));
        float _1159 = dot(vec4(_1139, _1140, _1141, 1.0), vec4(_763, _766, _769, _772));
        float _1163 = dot(vec4(_1139, _1140, _1141, 1.0), vec4(_764, _767, _770, _773));
        float _1170 = dot(vec4(cbModelParam._m0[39u]), vec4(_1139, _1140, _1141, 1.0));
        _1182 = dot(vec3(isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)), isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)), isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1170) ? 0.0 : (isnan(0.0) ? _1170 : max(0.0, _1170))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1182 = 1.0;
    }
    float _1193;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1184 = dot(vec4(cbModelParam._m0[40u]), vec4(_1139, _1140, _1141, 1.0));
        _1193 = dot(vec3(isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)), isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)), isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1184) ? 0.0 : (isnan(0.0) ? _1184 : max(0.0, _1184))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1193 = 1.0;
    }
    float _1197 = (_1193 * cbModelParam._m0[1u].x) + (_1182 * (1.0 - cbModelParam._m0[1u].x));
    float _1206 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1288;
    float _1290;
    float _1292;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1255 = fma(_432, cbModelParam._m0[13u].z, fma(_428, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _424)) + cbModelParam._m0[13u].w;
        float _1259 = fma(_432, cbModelParam._m0[14u].z, fma(_428, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _424)) + cbModelParam._m0[14u].w;
        float _1263 = fma(_432, cbModelParam._m0[15u].z, fma(_428, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _424)) + cbModelParam._m0[15u].w;
        float _1266 = fma(_402, cbModelParam._m0[13u].z, fma(_401, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _400));
        float _1269 = fma(_402, cbModelParam._m0[14u].z, fma(_401, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _400));
        float _1272 = fma(_402, cbModelParam._m0[15u].z, fma(_401, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _400));
        float _1298;
        if (_1266 > 0.0)
        {
            _1298 = abs((1.0 - _1255) / _1266);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1266 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1255 + 1.0) / _1266);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1298 = frontier_phi_21_19_ladder;
        }
        float _1506;
        if (_1269 > 0.0)
        {
            _1506 = abs((1.0 - _1259) / _1269);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1269 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1259 + 1.0) / _1269);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1506 = frontier_phi_30_26_ladder;
        }
        float _1695;
        if (_1272 > 0.0)
        {
            _1695 = abs((1.0 - _1263) / _1272);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1272 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1263 + 1.0) / _1272);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1695 = frontier_phi_42_37_ladder;
        }
        float _1697 = isnan(_1506) ? _1298 : (isnan(_1298) ? _1506 : min(_1298, _1506));
        float _1698 = isnan(_1695) ? _1697 : (isnan(_1697) ? _1695 : min(_1697, _1695));
        float _1702 = (_1698 * _1266) + _1255;
        float _1703 = (_1698 * _1269) + _1259;
        float _1704 = (_1698 * _1272) + _1263;
        float _1705 = _1698 * 9.9999997473787516355514526367188e-05;
        float _1707 = (-1.0) - _1705;
        float _1709 = _1705 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_1704 > _1709) || ((_1704 < _1707) || ((_1703 > _1709) || ((_1703 < _1707) || ((_1702 < _1707) || (_1702 > _1709))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1801 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1704, cbModelParam._m0[9u].z, fma(_1703, cbModelParam._m0[9u].y, _1702 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1704, cbModelParam._m0[10u].z, fma(_1703, cbModelParam._m0[10u].y, _1702 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1704, cbModelParam._m0[11u].z, fma(_1703, cbModelParam._m0[11u].y, _1702 * cbModelParam._m0[11u].x))), _1206);
            frontier_phi_20_42_ladder = _1801.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _1801.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _1801.x * cbModelParam._m0[1u].y;
        }
        _1288 = frontier_phi_20_42_ladder_2;
        _1290 = frontier_phi_20_42_ladder_1;
        _1292 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1276 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_400, _401, _402), _1206);
        _1288 = _1276.x * cbModelParam._m0[1u].y;
        _1290 = _1276.y * cbModelParam._m0[1u].y;
        _1292 = _1276.z * cbModelParam._m0[1u].y;
    }
    float _1295 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1388;
    float _1390;
    float _1392;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1352 = fma(_432, cbModelParam._m0[21u].z, fma(_428, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _424)) + cbModelParam._m0[21u].w;
        float _1356 = fma(_432, cbModelParam._m0[22u].z, fma(_428, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _424)) + cbModelParam._m0[22u].w;
        float _1360 = fma(_432, cbModelParam._m0[23u].z, fma(_428, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _424)) + cbModelParam._m0[23u].w;
        float _1363 = fma(_402, cbModelParam._m0[21u].z, fma(_401, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _400));
        float _1366 = fma(_402, cbModelParam._m0[22u].z, fma(_401, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _400));
        float _1369 = fma(_402, cbModelParam._m0[23u].z, fma(_401, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _400));
        float _1511;
        if (_1363 > 0.0)
        {
            _1511 = abs((1.0 - _1352) / _1363);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1352 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1511 = frontier_phi_32_28_ladder;
        }
        float _1722;
        if (_1366 > 0.0)
        {
            _1722 = abs((1.0 - _1356) / _1366);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1356 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _1722 = frontier_phi_44_39_ladder;
        }
        float _1873;
        if (_1369 > 0.0)
        {
            _1873 = abs((1.0 - _1360) / _1369);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1360 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _1873 = frontier_phi_53_50_ladder;
        }
        float _1875 = isnan(_1722) ? _1511 : (isnan(_1511) ? _1722 : min(_1511, _1722));
        float _1876 = isnan(_1873) ? _1875 : (isnan(_1875) ? _1873 : min(_1875, _1873));
        float _1880 = (_1876 * _1363) + _1352;
        float _1881 = (_1876 * _1366) + _1356;
        float _1882 = (_1876 * _1369) + _1360;
        float _1883 = _1876 * 9.9999997473787516355514526367188e-05;
        float _1884 = (-1.0) - _1883;
        float _1886 = _1883 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_1882 > _1886) || ((_1882 < _1884) || ((_1881 > _1886) || ((_1881 < _1884) || ((_1880 < _1884) || (_1880 > _1886))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2080 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1882, cbModelParam._m0[17u].z, fma(_1881, cbModelParam._m0[17u].y, _1880 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1882, cbModelParam._m0[18u].z, fma(_1881, cbModelParam._m0[18u].y, _1880 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1882, cbModelParam._m0[19u].z, fma(_1881, cbModelParam._m0[19u].y, _1880 * cbModelParam._m0[19u].x))), _1295);
            frontier_phi_29_53_ladder = _2080.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2080.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2080.x * cbModelParam._m0[1u].z;
        }
        _1388 = frontier_phi_29_53_ladder_2;
        _1390 = frontier_phi_29_53_ladder_1;
        _1392 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1372 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_400, _401, _402), _1295);
        _1388 = _1372.x * cbModelParam._m0[1u].z;
        _1390 = _1372.y * cbModelParam._m0[1u].z;
        _1392 = _1372.z * cbModelParam._m0[1u].z;
    }
    float _1404 = _391 * 0.01200000010430812835693359375;
    float _1406 = _1404 * ((cbModelParam._m0[1u].w * (_1388 - _1288)) + _1288);
    float _1407 = _1404 * ((cbModelParam._m0[1u].w * (_1390 - _1290)) + _1290);
    float _1408 = _1404 * ((cbModelParam._m0[1u].w * (_1392 - _1292)) + _1292);
    float _1411 = fma(_1408, cbSceneParam._m0[89u].z, fma(_1407, cbSceneParam._m0[89u].y, _1406 * cbSceneParam._m0[89u].x));
    float _1414 = fma(_1408, cbSceneParam._m0[90u].z, fma(_1407, cbSceneParam._m0[90u].y, _1406 * cbSceneParam._m0[90u].x));
    float _1417 = fma(_1408, cbSceneParam._m0[91u].z, fma(_1407, cbSceneParam._m0[91u].y, _1406 * cbSceneParam._m0[91u].x));
    uvec4 _1427 = floatBitsToUint(cbInstanceData._m0[_365 + 5u]);
    uint _1429 = _1427.x * 14u;
    uint _1430 = _1429 + 13u;
    float _1437 = _391 + (-1.0);
    float _1443 = (cbLight._m0[_1430].x * _1437) + 1.0;
    float _1444 = (cbLight._m0[_1430].y * _1437) + 1.0;
    float _1445 = (cbLight._m0[_1430].z * _1437) + 1.0;
    float _1446 = (cbLight._m0[_1430].w * _1437) + 1.0;
    uint _1447 = _1429 + 5u;
    float _1453 = isnan(1.0) ? _1444 : (isnan(_1444) ? 1.0 : min(_1444, 1.0));
    uint _1457 = _1429 + 4u;
    float _1464 = isnan(1.0) ? _1443 : (isnan(_1443) ? 1.0 : min(_1443, 1.0));
    uint _1468 = _1429 | 1u;
    float _1479 = dot(vec3(cbLight._m0[_1429].xyz), vec3(_223, _224, _225));
    float _1482 = dot(vec3(cbLight._m0[_1468].xyz), vec3(_223, _224, _225));
    float _3394 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
    float _3405 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
    float _1487 = (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * 0.3183098733425140380859375;
    float _1489 = (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * 0.3183098733425140380859375;
    float _1496 = ((cbLight._m0[_1447].x * _1453) * _1489) + ((cbLight._m0[_1457].x * _1464) * _1487);
    float _1497 = ((_1453 * cbLight._m0[_1447].y) * _1489) + ((_1464 * cbLight._m0[_1457].y) * _1487);
    float _1498 = ((_1453 * cbLight._m0[_1447].z) * _1489) + ((_1464 * cbLight._m0[_1457].z) * _1487);
    uvec4 _1503 = floatBitsToUint(cbLight._m0[_1429 + 12u]);
    bool _1505 = _1503.x == 0u;
    float _1516;
    float _1518;
    float _1520;
    if (_1505)
    {
        _1516 = _1496;
        _1518 = _1497;
        _1520 = _1498;
    }
    else
    {
        uint _1524 = _1429 + 6u;
        float _1540 = (dot(vec3(cbLight._m0[_1429 + 2u].xyz), vec3(_223, _224, _225)) * 0.5) + 0.5;
        float _1541 = _1540 * _1540;
        float _3416 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _1543 = isnan(1.0) ? _1445 : (isnan(_1445) ? 1.0 : min(_1445, 1.0));
        _1516 = (((cbLight._m0[_1524].x * 0.3183098733425140380859375) * _1542) * _1543) + _1496;
        _1518 = (((cbLight._m0[_1524].y * 0.3183098733425140380859375) * _1542) * _1543) + _1497;
        _1520 = (((cbLight._m0[_1524].z * 0.3183098733425140380859375) * _1542) * _1543) + _1498;
    }
    bool _1523 = _1503.y == 0u;
    float _1561;
    float _1563;
    float _1565;
    if (_1523)
    {
        _1561 = _1516;
        _1563 = _1518;
        _1565 = _1520;
    }
    else
    {
        uint _1666 = _1429 + 7u;
        float _1682 = (dot(vec3(cbLight._m0[_1429 + 3u].xyz), vec3(_223, _224, _225)) * 0.5) + 0.5;
        float _1683 = _1682 * _1682;
        float _3432 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1685 = isnan(1.0) ? _1446 : (isnan(_1446) ? 1.0 : min(_1446, 1.0));
        _1561 = (((cbLight._m0[_1666].x * 0.3183098733425140380859375) * _1684) * _1685) + _1516;
        _1563 = (((cbLight._m0[_1666].y * 0.3183098733425140380859375) * _1684) * _1685) + _1518;
        _1565 = (((cbLight._m0[_1666].z * 0.3183098733425140380859375) * _1684) * _1685) + _1520;
    }
    uint _1567 = _1429 + 8u;
    float _1573 = cbLight._m0[_1429].x + _307;
    float _1574 = cbLight._m0[_1429].y + _308;
    float _1575 = cbLight._m0[_1429].z + _309;
    float _1579 = inversesqrt(dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575)));
    float _1583 = dot(vec3(_223, _224, _225), vec3(cbLight._m0[_1429].xyz));
    float _3448 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1586 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _3459 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _1587 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _1588 = dot(vec3(cbLight._m0[_1429].xyz), vec3(_1573 * _1579, _1574 * _1579, _1575 * _1579));
    float _3470 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _1599 = (exp2(log2(1.0 - (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1605 = (0.5 / ((_1586 + 9.9999999392252902907785028219223e-09) + _1587)) * _1586;
    float _3481 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _1607 = (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * 0.31831014156341552734375;
    uint _1618 = _1429 + 9u;
    float _1624 = cbLight._m0[_1468].x + _307;
    float _1625 = cbLight._m0[_1468].y + _308;
    float _1626 = cbLight._m0[_1468].z + _309;
    float _1630 = inversesqrt(dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626)));
    float _1634 = dot(vec3(_223, _224, _225), vec3(cbLight._m0[_1468].xyz));
    float _3492 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _1637 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _1638 = dot(vec3(cbLight._m0[_1468].xyz), vec3(_1624 * _1630, _1625 * _1630, _1626 * _1630));
    float _3503 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1647 = (exp2(log2(1.0 - (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1651 = (0.5 / ((_1637 + 9.9999999392252902907785028219223e-09) + _1587)) * _1637;
    float _3514 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _1653 = (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * 0.31831014156341552734375;
    float _1663 = (((_1647 * cbLight._m0[_1618].x) * _1653) * _1453) + (((_1599 * cbLight._m0[_1567].x) * _1607) * _1464);
    float _1664 = (((_1647 * cbLight._m0[_1618].y) * _1653) * _1453) + (((_1599 * cbLight._m0[_1567].y) * _1607) * _1464);
    float _1665 = (((_1647 * cbLight._m0[_1618].z) * _1653) * _1453) + (((_1599 * cbLight._m0[_1567].z) * _1607) * _1464);
    float _1727;
    float _1729;
    float _1731;
    if (_1505)
    {
        _1727 = _1663;
        _1729 = _1664;
        _1731 = _1665;
    }
    else
    {
        uint _1733 = _1429 + 10u;
        uint _1739 = _1429 + 2u;
        float _1745 = cbLight._m0[_1739].x + _307;
        float _1746 = cbLight._m0[_1739].y + _308;
        float _1747 = cbLight._m0[_1739].z + _309;
        float _1751 = inversesqrt(dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747)));
        float _1755 = dot(vec3(_223, _224, _225), vec3(cbLight._m0[_1739].xyz));
        float _3525 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1758 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1759 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_1745 * _1751, _1746 * _1751, _1747 * _1751));
        float _3536 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1768 = (exp2(log2(1.0 - (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1772 = (0.5 / ((_1758 + 9.9999999392252902907785028219223e-09) + _1587)) * _1758;
        float _3547 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1774 = (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * 0.31831014156341552734375;
        float _1775 = isnan(1.0) ? _1445 : (isnan(_1445) ? 1.0 : min(_1445, 1.0));
        _1727 = (((_1768 * cbLight._m0[_1733].x) * _1774) * _1775) + _1663;
        _1729 = (((_1768 * cbLight._m0[_1733].y) * _1774) * _1775) + _1664;
        _1731 = (((_1768 * cbLight._m0[_1733].z) * _1774) * _1775) + _1665;
    }
    float _1810;
    float _1812;
    float _1814;
    if (_1523)
    {
        _1810 = _1727;
        _1812 = _1729;
        _1814 = _1731;
    }
    else
    {
        uint _1821 = _1429 + 11u;
        uint _1827 = _1429 + 3u;
        float _1833 = cbLight._m0[_1827].x + _307;
        float _1834 = cbLight._m0[_1827].y + _308;
        float _1835 = cbLight._m0[_1827].z + _309;
        float _1839 = inversesqrt(dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835)));
        float _1843 = dot(vec3(_223, _224, _225), vec3(cbLight._m0[_1827].xyz));
        float _3563 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1846 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1847 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_1833 * _1839, _1834 * _1839, _1835 * _1839));
        float _3574 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1856 = (exp2(log2(1.0 - (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1860 = (0.5 / ((_1846 + 9.9999999392252902907785028219223e-09) + _1587)) * _1846;
        float _3585 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1862 = (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * 0.31831014156341552734375;
        float _1863 = isnan(1.0) ? _1446 : (isnan(_1446) ? 1.0 : min(_1446, 1.0));
        _1810 = (((_1856 * cbLight._m0[_1821].x) * _1862) * _1863) + _1727;
        _1812 = (((_1856 * cbLight._m0[_1821].y) * _1862) * _1863) + _1729;
        _1814 = (((_1856 * cbLight._m0[_1821].z) * _1862) * _1863) + _1731;
    }
    float _1997;
    float _1999;
    float _2001;
    float _2003;
    float _2005;
    float _2007;
    if (_1427.y == 0u)
    {
        float _1938 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1939 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1938;
        float _1940 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1938;
        float _1941 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1938;
        uvec4 _1953 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1954 = _1953.x;
        uint _1965 = uint((float(_1953.y) * floor(float(uint(cbSceneParam._m0[85u].y * _326) / _1954))) + floor(float(uint(cbSceneParam._m0[85u].x * _325) / _1954)));
        float _1975 = (log2(_1941 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1976 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        uint _1979 = uint(isnan(14.0) ? _1976 : (isnan(_1976) ? 14.0 : min(_1976, 14.0)));
        uvec4 _1984 = texelFetch(g_lightClusterGridBuffer, int(((_1979 << 2u) + (_1965 << 6u)) >> 2u));
        uint _1985 = _1984.x;
        uint _1986 = _1953.z;
        float _2085;
        float _2087;
        float _2089;
        float _2091;
        float _2093;
        float _2095;
        if (((((1u << ((_1986 >> 4u) & 15u)) + 4294967295u) & _1985) == 0u) || ((_1986 & 240u) == 0u))
        {
            _2085 = 0.0;
            _2087 = 0.0;
            _2089 = 0.0;
            _2091 = 0.0;
            _2093 = 0.0;
            _2095 = 0.0;
        }
        else
        {
            float _2086;
            float _2088;
            float _2090;
            float _2092;
            float _2094;
            float _2096;
            float _2236 = 0.0;
            float _2237 = 0.0;
            float _2238 = 0.0;
            float _2239 = 0.0;
            float _2240 = 0.0;
            float _2241 = 0.0;
            uint _2242 = 0u;
            uint _2251;
            bool _2252;
            for (;;)
            {
                _2251 = texelFetch(g_lightClassification, int((((_1979 << 5u) + (_1965 << 9u)) + (_2242 << 2u)) >> 2u)).x;
                _2252 = _2251 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2252)
                {
                    frontier_phi_70_pred = _2238;
                    frontier_phi_70_pred_1 = _2241;
                    frontier_phi_70_pred_2 = _2240;
                    frontier_phi_70_pred_3 = _2239;
                    frontier_phi_70_pred_4 = _2237;
                    frontier_phi_70_pred_5 = _2236;
                }
                else
                {
                    float _2381;
                    float _2382;
                    float _2383;
                    float _2384;
                    float _2385;
                    float _2386;
                    uint _2387;
                    _2381 = _2236;
                    _2382 = _2237;
                    _2383 = _2238;
                    _2384 = _2239;
                    _2385 = _2240;
                    _2386 = _2241;
                    _2387 = _2251;
                    float _2308;
                    float _2309;
                    float _2310;
                    float _2311;
                    float _2312;
                    float _2313;
                    for (;;)
                    {
                        uint _2391 = uint(findLSB(_2387)) + (_2242 << 5u);
                        uint _2388 = (_2387 + 4294967295u) & _2387;
                        uint _2393 = _2391 * 48u;
                        vec4 _2407 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2393)).x, texelFetch(g_PointLightRenderingBuffer, int(_2393 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2393 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2393 + 3u)).x));
                        uint _2413 = (_2391 * 48u) + 4u;
                        vec4 _2426 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2413)).x, texelFetch(g_PointLightRenderingBuffer, int(_2413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2413 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2413 + 3u)).x));
                        uint _2432 = (_2391 * 48u) + 8u;
                        vec3 _2443 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2432)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 2u)).x));
                        float _2447 = _2407.x - _1939;
                        float _2448 = _2407.y - _1940;
                        float _2449 = _2407.z - _1941;
                        float _2450 = dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449));
                        float _2453 = inversesqrt(_2450);
                        float _2462 = 1.0 - (_2450 * _2407.w);
                        float _3611 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
                        float _2463 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
                        float _2464 = sqrt(_2450) * _2426.w;
                        float _2467 = 1.39999997615814208984375 / (_2464 + 1.39999997615814208984375);
                        float _2468 = _2467 * _2467;
                        float _2471 = ((1.0 - _2468) * dot(vec3(_346, _349, _352), vec3(_2453 * _2447, _2453 * _2448, _2453 * _2449))) + _2468;
                        float _2474 = _2464 * _2464;
                        float _2478 = ((isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0))) * _2463) / ((_2474 * 0.699999988079071044921875) + 1.0);
                        float _2482 = (-0.0) - _1939;
                        float _2483 = (-0.0) - _1940;
                        float _2484 = (-0.0) - _1941;
                        float _2488 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
                        float _2492 = dot(vec3(_346, _349, _352), vec3(_2488 * _2482, _2488 * _2483, _2488 * _2484));
                        float _3627 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
                        float _3638 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
                        float _2496 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
                        float _2500 = (0.5 / (((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) + 9.9999999392252902907785028219223e-09) + _2496)) * _2496;
                        float _3649 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
                        float _2509 = (((isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * 3.1415927410125732421875) / ((_2474 * 2.1991131305694580078125) + 3.141590118408203125)) * _2463;
                        _2311 = (_2478 * _2426.x) + _2384;
                        _2312 = (_2478 * _2426.y) + _2385;
                        _2313 = (_2478 * _2426.z) + _2386;
                        _2308 = (_2509 * _2443.x) + _2381;
                        _2309 = (_2509 * _2443.y) + _2382;
                        _2310 = (_2509 * _2443.z) + _2383;
                        if (_2388 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2381 = _2308;
                            _2382 = _2309;
                            _2383 = _2310;
                            _2384 = _2311;
                            _2385 = _2312;
                            _2386 = _2313;
                            _2387 = _2388;
                        }
                    }
                    frontier_phi_70_pred = _2310;
                    frontier_phi_70_pred_1 = _2313;
                    frontier_phi_70_pred_2 = _2312;
                    frontier_phi_70_pred_3 = _2311;
                    frontier_phi_70_pred_4 = _2309;
                    frontier_phi_70_pred_5 = _2308;
                }
                _2090 = frontier_phi_70_pred;
                _2096 = frontier_phi_70_pred_1;
                _2094 = frontier_phi_70_pred_2;
                _2092 = frontier_phi_70_pred_3;
                _2088 = frontier_phi_70_pred_4;
                _2086 = frontier_phi_70_pred_5;
                uint _2243 = _2242 + 1u;
                if (_2243 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2236 = _2086;
                    _2237 = _2088;
                    _2238 = _2090;
                    _2239 = _2092;
                    _2240 = _2094;
                    _2241 = _2096;
                    _2242 = _2243;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2085 = _2086;
            _2087 = _2088;
            _2089 = _2090;
            _2091 = _2092;
            _2093 = _2094;
            _2095 = _2096;
        }
        uvec4 _2099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2100 = _2099.z;
        uint _2102 = (_2100 >> 8u) & 15u;
        float _2207;
        float _2209;
        float _2211;
        float _2213;
        float _2215;
        float _2217;
        if (((4294967295u << _2102) & _1985) == 0u)
        {
            _2207 = _2085;
            _2209 = _2087;
            _2211 = _2089;
            _2213 = _2091;
            _2215 = _2093;
            _2217 = _2095;
        }
        else
        {
            float _2232 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2102 < ((_2100 >> 12u) & 15u))
            {
                float _2208;
                float _2210;
                float _2212;
                float _2214;
                float _2216;
                float _2218;
                float _2364 = _2085;
                float _2365 = _2087;
                float _2366 = _2089;
                float _2367 = _2091;
                float _2368 = _2093;
                float _2369 = _2095;
                uint _2370 = _2102;
                uint _2379;
                bool _2380;
                for (;;)
                {
                    _2379 = texelFetch(g_lightClassification, int((((_1979 << 5u) + (_1965 << 9u)) + (_2370 << 2u)) >> 2u)).x;
                    _2380 = _2379 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2380)
                    {
                        frontier_phi_81_pred = _2369;
                        frontier_phi_81_pred_1 = _2368;
                        frontier_phi_81_pred_2 = _2367;
                        frontier_phi_81_pred_3 = _2366;
                        frontier_phi_81_pred_4 = _2365;
                        frontier_phi_81_pred_5 = _2364;
                    }
                    else
                    {
                        float _2523;
                        float _2524;
                        float _2525;
                        float _2526;
                        float _2527;
                        float _2528;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _2780;
                        float _2536 = _2364;
                        float _2537 = _2365;
                        float _2538 = _2366;
                        float _2539 = _2367;
                        float _2540 = _2368;
                        float _2541 = _2369;
                        uint _2542 = _2379;
                        uint _2543;
                        vec4 _2568;
                        float _2569;
                        vec4 _2584;
                        vec3 _2596;
                        vec4 _2612;
                        vec4 _2628;
                        float _2675;
                        bool _2676;
                        for (;;)
                        {
                            uint _2553 = ((_2370 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2542));
                            _2543 = (_2542 + 4294967295u) & _2542;
                            uint _2555 = _2553 * 40u;
                            _2568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 3u)).x));
                            _2569 = _2568.w;
                            uint _2571 = (_2553 * 40u) + 4u;
                            _2584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 3u)).x));
                            uint _2586 = (_2553 * 40u) + 8u;
                            _2596 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 2u)).x));
                            uint _2599 = (_2553 * 40u) + 16u;
                            _2612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2599 + 3u)).x));
                            uint _2615 = (_2553 * 40u) + 20u;
                            _2628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 3u)).x));
                            uint _2631 = (_2553 * 40u) + 24u;
                            vec4 _2644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 3u)).x));
                            uint _2650 = (_2553 * 40u) + 28u;
                            vec4 _2663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 3u)).x));
                            _2675 = fma(_1941, _2663.z, fma(_1940, _2663.y, _2663.x * _1939)) + _2663.w;
                            _2676 = !((fma(_1941, _2644.z, fma(_1940, _2644.y, _2644.x * _1939)) + _2644.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2676)
                            {
                                float _2703 = _2568.x - _1939;
                                float _2704 = _2568.y - _1940;
                                float _2705 = _2568.z - _1941;
                                float _2706 = dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705));
                                float _2709 = inversesqrt(_2706);
                                float _2710 = _2709 * _2703;
                                float _2711 = _2709 * _2704;
                                float _2712 = _2709 * _2705;
                                float _2716 = 1.0 - (_2706 / (_2569 * _2569));
                                float _3660 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
                                float _2717 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
                                float _2721 = sqrt(_2706) * _2584.w;
                                float _2723 = 1.39999997615814208984375 / (_2721 + 1.39999997615814208984375);
                                float _2724 = _2723 * _2723;
                                float _2725 = 1.0 - _2724;
                                float _2727 = (_2725 * dot(vec3(_2710, _2711, _2712), vec3(_346, _349, _352))) + _2724;
                                float _2730 = _2721 * _2721;
                                float _2734 = (fma(_1941, _2612.z, fma(_1940, _2612.y, _2612.x * _1939)) + _2612.w) / _2675;
                                float _2735 = (fma(_1941, _2628.z, fma(_1940, _2628.y, _2628.x * _1939)) + _2628.w) / _2675;
                                float _2739 = 1.0 - dot(vec2(_2734, _2735), vec2(_2734, _2735));
                                float _3676 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                                float _2740 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
                                float _2741 = _2740 * (((isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0))) * _2717) / ((_2730 * 0.699999988079071044921875) + 1.0));
                                float _2751 = dot(vec3(_346, _349, _352), vec3((-0.0) - (_1939 * _2232), (-0.0) - (_1940 * _2232), (-0.0) - (_1941 * _2232)));
                                float _3687 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                                float _2759 = (_2725 * dot(vec3(_346, _349, _352), vec3(_2710, _2711, _2712))) + _2724;
                                float _3698 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                                float _2760 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
                                float _2764 = (0.5 / (((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) + 9.9999999392252902907785028219223e-09) + _2760)) * _2760;
                                float _3709 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                                float _2771 = (_2740 * _2717) * (((isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * 3.1415927410125732421875) / ((_2730 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2741 * _2584.z;
                                frontier_phi_87_pred_1 = _2741 * _2584.y;
                                frontier_phi_87_pred_2 = _2741 * _2584.x;
                                frontier_phi_87_pred_3 = _2771 * _2596.z;
                                frontier_phi_87_pred_4 = _2771 * _2596.y;
                                frontier_phi_87_pred_5 = _2771 * _2596.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _2780 = frontier_phi_87_pred;
                            _2779 = frontier_phi_87_pred_1;
                            _2778 = frontier_phi_87_pred_2;
                            _2777 = frontier_phi_87_pred_3;
                            _2776 = frontier_phi_87_pred_4;
                            _2775 = frontier_phi_87_pred_5;
                            _2526 = _2778 + _2539;
                            _2527 = _2779 + _2540;
                            _2528 = _2780 + _2541;
                            _2523 = _2775 + _2536;
                            _2524 = _2776 + _2537;
                            _2525 = _2777 + _2538;
                            if (_2543 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2536 = _2523;
                                _2537 = _2524;
                                _2538 = _2525;
                                _2539 = _2526;
                                _2540 = _2527;
                                _2541 = _2528;
                                _2542 = _2543;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2528;
                        frontier_phi_81_pred_1 = _2527;
                        frontier_phi_81_pred_2 = _2526;
                        frontier_phi_81_pred_3 = _2525;
                        frontier_phi_81_pred_4 = _2524;
                        frontier_phi_81_pred_5 = _2523;
                    }
                    _2218 = frontier_phi_81_pred;
                    _2216 = frontier_phi_81_pred_1;
                    _2214 = frontier_phi_81_pred_2;
                    _2212 = frontier_phi_81_pred_3;
                    _2210 = frontier_phi_81_pred_4;
                    _2208 = frontier_phi_81_pred_5;
                    uint _2371 = _2370 + 1u;
                    if (_2371 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2364 = _2208;
                        _2365 = _2210;
                        _2366 = _2212;
                        _2367 = _2214;
                        _2368 = _2216;
                        _2369 = _2218;
                        _2370 = _2371;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2214;
                frontier_phi_62_63_ladder_1 = _2218;
                frontier_phi_62_63_ladder_2 = _2216;
                frontier_phi_62_63_ladder_3 = _2212;
                frontier_phi_62_63_ladder_4 = _2210;
                frontier_phi_62_63_ladder_5 = _2208;
            }
            else
            {
                frontier_phi_62_63_ladder = _2091;
                frontier_phi_62_63_ladder_1 = _2095;
                frontier_phi_62_63_ladder_2 = _2093;
                frontier_phi_62_63_ladder_3 = _2089;
                frontier_phi_62_63_ladder_4 = _2087;
                frontier_phi_62_63_ladder_5 = _2085;
            }
            _2207 = frontier_phi_62_63_ladder_5;
            _2209 = frontier_phi_62_63_ladder_4;
            _2211 = frontier_phi_62_63_ladder_3;
            _2213 = frontier_phi_62_63_ladder;
            _2215 = frontier_phi_62_63_ladder_2;
            _2217 = frontier_phi_62_63_ladder_1;
        }
        float _2222 = isnan(1.0) ? _391 : (isnan(_391) ? 1.0 : min(_391, 1.0));
        _1997 = (_2222 * _2213) + _1561;
        _1999 = (_2222 * _2215) + _1563;
        _2001 = (_2222 * _2217) + _1565;
        _2003 = ((_2207 * 0.039999999105930328369140625) * _2222) + _1810;
        _2005 = ((_2209 * 0.039999999105930328369140625) * _2222) + _1812;
        _2007 = ((_2211 * 0.039999999105930328369140625) * _2222) + _1814;
    }
    else
    {
        _1997 = _1561;
        _1999 = _1563;
        _2001 = _1565;
        _2003 = _1810;
        _2005 = _1812;
        _2007 = _1814;
    }
    float _3725 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3736 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3747 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _2024 = ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1997 + ((isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0))) * _391))) + ((_2003 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _1197)) * cbPerFrame._m0[3u].x);
    float _2025 = ((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1999 + ((isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0))) * _391))) + ((_2005 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _1197)) * cbPerFrame._m0[3u].x);
    float _2026 = ((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_2001 + ((isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0))) * _391))) + ((_2007 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _1197)) * cbPerFrame._m0[3u].x);
    uint _2027 = _365 + 6u;
    float _2035 = _325 / cbSceneParam._m0[86u].x;
    float _2036 = _326 / cbSceneParam._m0[86u].y;
    vec4 _2050 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2035, _2036, (log2((isnan(cbSceneParam._m0[77u].w) ? _249 : (isnan(_249) ? cbSceneParam._m0[77u].w : min(_249, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2052 = _2050.x;
    float _2053 = _2050.y;
    float _2054 = _2050.z;
    float _2055 = _2050.w;
    float _2147;
    float _2149;
    float _2151;
    float _2153;
    if (_249 > cbSceneParam._m0[78u].w)
    {
        float _2110 = isnan(_249) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _249 : min(cbSceneParam._m0[80u].w, _249));
        float _2111 = _2110 / _249;
        float _2122 = _2111 * _300;
        float _2123 = _301 * _2111;
        float _2124 = (-0.0) - _2123;
        float _2125 = _2111 * _302;
        float _2127 = (cbSceneParam._m0[77u].w * _2124) / _2110;
        float _2128 = _2127 + cbSceneParam._m0[79u].w;
        float _2129 = cbSceneParam._m0[79u].w - _2123;
        float _2135 = sqrt(((_2122 * _2122) + (_2123 * _2123)) + (_2125 * _2125));
        float _2138 = (1.0 - (cbSceneParam._m0[77u].w / _2110)) * _2135;
        float _2143 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2145 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2321;
        if (abs((_2124 - _2127) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2321 = ((((_2128 > 0.0) ? exp2(_2143 * _2128) : (2.0 - exp2(_2145 * _2128))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2138;
        }
        else
        {
            float _2265 = 1.0 / cbSceneParam._m0[80u].x;
            float _2266 = isnan(_2129) ? _2128 : (isnan(_2128) ? _2129 : max(_2128, _2129));
            float _2267 = isnan(_2129) ? _2128 : (isnan(_2128) ? _2129 : min(_2128, _2129));
            float _2276 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : min(_2266, 0.0));
            float _2277 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : min(_2267, 0.0));
            _2321 = ((abs(_2135 / _2124) * cbSceneParam._m0[80u].y) * ((((_2276 - _2277) * 2.0) - ((exp2(_2143 * (isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0)))) - exp2(_2143 * (isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0))))) * _2265)) - ((exp2(_2145 * _2276) - exp2(_2145 * _2277)) * _2265))) + (_2138 * cbSceneParam._m0[80u].z);
        }
        vec4 _2323 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2035, _2036, 1.0), 0.0);
        float _2332 = exp2((_2321 * (-1.44269502162933349609375)) * (1.0 - _2323.w));
        float _2333 = log2(_2332);
        float _2349 = log2(_2055);
        _2147 = (exp2(_2349 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2333 * cbSceneParam._m0[78u].x)) * _2323.x) / cbSceneParam._m0[78u].x)) + _2052;
        _2149 = (exp2(_2349 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2333 * cbSceneParam._m0[78u].y)) * _2323.y) / cbSceneParam._m0[78u].y)) + _2053;
        _2151 = (exp2(_2349 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2333 * cbSceneParam._m0[78u].z)) * _2323.z) / cbSceneParam._m0[78u].z)) + _2054;
        _2153 = _2332 * _2055;
    }
    else
    {
        _2147 = _2052;
        _2149 = _2053;
        _2151 = _2054;
        _2153 = _2055;
    }
    bool _2359;
    vec4 _2163;
    vec4 _2186;
    float _2188;
    float _2192;
    float _2193;
    float _2194;
    float _2195;
    bool _2206;
    for (;;)
    {
        _2163 = cbMatDynParam._m0[0u];
        float _2165 = roundEven(_2163.y);
        bool _2166 = _2165 == 3.0;
        float _2168 = log2(_2153);
        float _2175 = exp2(_2168 * cbSceneParam._m0[78u].x) * _2024;
        float _2176 = exp2(_2168 * cbSceneParam._m0[78u].y) * _2025;
        float _2177 = exp2(_2168 * cbSceneParam._m0[78u].z) * _2026;
        float _2184 = _313 + (-0.5);
        _2186 = cbMtdParam._m0[1u];
        _2188 = _2186.y * _2184;
        float _2191 = (_2165 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2192 = _2191 * (_2166 ? _2175 : (_2175 + (cbSceneParam._m0[72u].w * _2147)));
        _2193 = _2191 * (_2166 ? _2176 : (_2176 + (cbSceneParam._m0[72u].w * _2149)));
        _2194 = _2191 * (_2166 ? _2177 : (_2177 + (cbSceneParam._m0[72u].w * _2151)));
        _2195 = _2184 * 0.999000012874603271484375;
        _2206 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2206)
        {
            if ((cbInstanceData._m0[_365 + 7u].x + _2195) < 0.5)
            {
                _2359 = true;
                break;
            }
        }
        uint _2300 = _367 + uint(_2163.w);
        if ((cbInstanceData._m0[_2300].w < 1.0) && ((cbInstanceData._m0[_2300].w + _2195) < 0.5))
        {
            _2359 = true;
            break;
        }
        if ((_2188 + 1.0) < _2186.x)
        {
            _2359 = true;
            break;
        }
        _2359 = false;
        break;
    }
    float _2514;
    if (_2359)
    {
        discard_state = true;
        _2514 = 0.0;
    }
    else
    {
        _2514 = cbInstanceData._m0[_2027].w;
    }
    SV_Target.x = _2192;
    SV_Target.y = _2193;
    SV_Target.z = _2194;
    SV_Target.w = _2514;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2027].w;
    discard_exit();
}


