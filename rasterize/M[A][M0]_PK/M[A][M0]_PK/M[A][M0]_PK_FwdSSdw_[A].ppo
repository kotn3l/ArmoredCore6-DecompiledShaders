#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_PK_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _764;
float _2952;
float _2953;
float _2954;
float _2955;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _197 = texture(sampler2D(M_A_M0_PK_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _203 = _197.x * cbMtdParam._m0[9u].x;
    float _204 = _197.y * cbMtdParam._m0[9u].y;
    float _205 = _197.z * cbMtdParam._m0[9u].z;
    float _210 = gl_FragCoord.x * 0.125;
    float _212 = gl_FragCoord.y * 0.125;
    float _224 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _225 = _224 * _175;
    float _226 = _224 * _176;
    float _227 = _224 * _177;
    float _2964 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _2975 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _2986 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    if (!(cbMtdParam._m0[10u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_210, _212)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _251 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _292 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _302 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _292);
    float _303 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _292);
    float _304 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _292);
    float _308 = inversesqrt(dot(vec3(_302, _303, _304), vec3(_302, _303, _304)));
    float _309 = _302 * _308;
    float _310 = _303 * _308;
    float _311 = _304 * _308;
    vec4 _313 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_210, _212));
    float _315 = _313.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _445 = sqrt(((_302 * _302) + (_303 * _303)) + (_304 * _304));
        float _451 = (cbMatDynParam._m0[5u].x * _445) + cbMatDynParam._m0[5u].y;
        float _2997 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
        float _452 = isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0));
        float _456 = (cbMatDynParam._m0[5u].z * _445) + cbMatDynParam._m0[5u].w;
        float _3008 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0))) - _452)) + _452) < ((_315 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _327 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _328 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _348 = fma(_227, cbSceneParam._m0[5u].z, fma(_226, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _225));
    float _351 = fma(_227, cbSceneParam._m0[6u].z, fma(_226, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _225));
    float _354 = fma(_227, cbSceneParam._m0[7u].z, fma(_226, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _225));
    uint _367 = uint(roundEven(NORMAL.w)) * 13u;
    uint _369 = _367 + 9u;
    uint _370 = _369 + uint(cbMatDynParam._m0[0u].w);
    float _376 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2964 : (isnan(_2964) ? 1.0 : min(_2964, 1.0)))) * cbInstanceData._m0[_370].x;
    float _377 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0)))) * cbInstanceData._m0[_370].y;
    float _378 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0)))) * cbInstanceData._m0[_370].z;
    float _3019 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _379 = isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0));
    float _3030 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _380 = isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0));
    float _3041 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _381 = isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0));
    vec4 _390 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _327, cbSceneParam._m0[86u].y * _328));
    float _393 = _390.x * TEXCOORD.z;
    float _394 = dot(vec3(_225, _226, _227), vec3(_309, _310, _311));
    float _397 = _394 * 2.0;
    float _402 = (_397 * _225) - _309;
    float _403 = (_397 * _226) - _310;
    float _404 = (_397 * _227) - _311;
    float _426 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _430 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _434 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _763;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _488 = fma(_434, cbModelParam._m0[26u].z, fma(_430, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _426));
        float _492 = fma(_434, cbModelParam._m0[27u].z, fma(_430, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _426));
        float _496 = fma(_434, cbModelParam._m0[28u].z, fma(_430, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _426));
        float _521 = _426 + _225;
        float _522 = _430 + _226;
        float _523 = _434 + _227;
        float _533 = fma(_523, cbModelParam._m0[26u].z, fma(_522, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _521)) - _488;
        float _534 = fma(_523, cbModelParam._m0[27u].z, fma(_522, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _521)) - _492;
        float _535 = fma(_523, cbModelParam._m0[28u].z, fma(_522, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _521)) - _496;
        float _539 = inversesqrt(dot(vec3(_533, _534, _535), vec3(_533, _534, _535)));
        float _552 = ((_539 * _533) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_488 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _553 = ((_539 * _534) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_492 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _554 = ((_539 * _535) / cbModelParam._m0[34u].z) + ((((((_496 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _557 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_552, _553, _554), 0.0);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_552, _553, _554), 0.0);
        vec4 _571 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_552, _553, _554), 0.0);
        vec4 _578 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_552, _553, _554), 0.0);
        float _591 = exp2((_557.w + (-0.5)) * 20.0) * 2.0;
        float _592 = _591 * (_557.x + (-0.5));
        float _593 = _591 * (_557.y + (-0.5));
        float _594 = _591 * (_557.z + (-0.5));
        float _601 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _602 = _601 * (_564.x + (-0.5));
        float _603 = _601 * (_564.y + (-0.5));
        float _604 = _601 * (_564.z + (-0.5));
        float _611 = exp2((_571.w + (-0.5)) * 20.0) * 2.0;
        float _612 = _611 * (_571.x + (-0.5));
        float _613 = _611 * (_571.y + (-0.5));
        float _614 = _611 * (_571.z + (-0.5));
        float _621 = exp2((_578.w + (-0.5)) * 20.0) * 2.0;
        float _622 = _621 * (_578.x + (-0.5));
        float _623 = _621 * (_578.y + (-0.5));
        float _624 = _621 * (_578.z + (-0.5));
        float _625 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        float _626 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _627 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _628 = _592 * 0.5;
        float _629 = _602 * 0.5;
        float _630 = _612 * 0.5;
        float _631 = dot(vec3(_628, _629, _630), vec3(_628, _629, _630));
        float _636 = (_631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_631);
        float _645 = (dot(vec3(_225, _226, _227), vec3(_636 * _628, _636 * _629, _636 * _630)) + 1.0) * 0.5;
        float _3067 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _655 = sqrt(((_629 * _629) + (_628 * _628)) + (_630 * _630)) / (_625 + 9.9999997473787516355514526367188e-06);
        float _3078 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _656 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
        float _657 = _656 * 2.0;
        float _661 = (1.0 - _656) / (_656 + 1.0);
        float _3089 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _662 = isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0));
        float _671 = ((((1.0 - _662) * (_657 + 2.0)) * exp2(log2(isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0))) * (_657 + 1.0))) + _662) * _625;
        float _672 = _593 * 0.5;
        float _673 = _603 * 0.5;
        float _674 = _613 * 0.5;
        float _675 = dot(vec3(_672, _673, _674), vec3(_672, _673, _674));
        float _680 = (_675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_675);
        float _688 = (dot(vec3(_225, _226, _227), vec3(_680 * _672, _680 * _673, _680 * _674)) + 1.0) * 0.5;
        float _3100 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _697 = sqrt(((_673 * _673) + (_672 * _672)) + (_674 * _674)) / (_626 + 9.9999997473787516355514526367188e-06);
        float _3111 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _698 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _699 = _698 * 2.0;
        float _703 = (1.0 - _698) / (_698 + 1.0);
        float _3122 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
        float _713 = ((((1.0 - _704) * (_699 + 2.0)) * exp2(log2(isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0))) * (_699 + 1.0))) + _704) * _626;
        float _714 = _594 * 0.5;
        float _715 = _604 * 0.5;
        float _716 = _614 * 0.5;
        float _717 = dot(vec3(_714, _715, _716), vec3(_714, _715, _716));
        float _722 = (_717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_717);
        float _730 = (dot(vec3(_225, _226, _227), vec3(_722 * _714, _722 * _715, _722 * _716)) + 1.0) * 0.5;
        float _3133 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _739 = sqrt(((_715 * _715) + (_714 * _714)) + (_716 * _716)) / (_627 + 9.9999997473787516355514526367188e-06);
        float _3144 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _741 = _740 * 2.0;
        float _745 = (1.0 - _740) / (_740 + 1.0);
        float _3155 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
        float _755 = ((((1.0 - _746) * (_741 + 2.0)) * exp2(log2(isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0))) * (_741 + 1.0))) + _746) * _627;
        _763 = _594;
        _765 = _593;
        _766 = _592;
        _767 = _604;
        _768 = _603;
        _769 = _602;
        _770 = _614;
        _771 = _613;
        _772 = _612;
        _773 = _627;
        _774 = _626;
        _775 = _625;
        _776 = cbModelParam._m0[36u].z * (isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0)));
        _777 = cbModelParam._m0[36u].z * (isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0)));
        _778 = cbModelParam._m0[36u].z * (isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0)));
    }
    else
    {
        _763 = _764;
        _765 = _764;
        _766 = _764;
        _767 = _764;
        _768 = _764;
        _769 = _764;
        _770 = _764;
        _771 = _764;
        _772 = _764;
        _773 = _764;
        _774 = _764;
        _775 = _764;
        _776 = 0.0;
        _777 = 0.0;
        _778 = 0.0;
    }
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _804 = fma(_434, cbModelParam._m0[30u].z, fma(_430, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _426));
        float _808 = fma(_434, cbModelParam._m0[31u].z, fma(_430, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _426));
        float _812 = fma(_434, cbModelParam._m0[32u].z, fma(_430, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _426));
        float _835 = _426 + _225;
        float _836 = _430 + _226;
        float _837 = _434 + _227;
        float _847 = fma(_837, cbModelParam._m0[30u].z, fma(_836, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _835)) - _804;
        float _848 = fma(_837, cbModelParam._m0[31u].z, fma(_836, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _835)) - _808;
        float _849 = fma(_837, cbModelParam._m0[32u].z, fma(_836, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _835)) - _812;
        float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
        float _866 = ((_853 * _847) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_804 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_853 * _848) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_808 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_853 * _849) / cbModelParam._m0[35u].z) + ((((((_812 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        float _903 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_870.x + (-0.5));
        float _905 = _903 * (_870.y + (-0.5));
        float _906 = _903 * (_870.z + (-0.5));
        float _913 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_877.x + (-0.5));
        float _915 = _913 * (_877.y + (-0.5));
        float _916 = _913 * (_877.z + (-0.5));
        float _923 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_884.x + (-0.5));
        float _925 = _923 * (_884.y + (-0.5));
        float _926 = _923 * (_884.z + (-0.5));
        float _933 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_891.x + (-0.5));
        float _935 = _933 * (_891.y + (-0.5));
        float _936 = _933 * (_891.z + (-0.5));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = _904 * 0.5;
        float _941 = _914 * 0.5;
        float _942 = _924 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _956 = (dot(vec3(_225, _226, _227), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3196 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _965 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3207 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3218 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0))) * (_967 + 1.0))) + _972) * _937;
        float _982 = _905 * 0.5;
        float _983 = _915 * 0.5;
        float _984 = _925 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _998 = (dot(vec3(_225, _226, _227), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3229 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1007 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3240 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3251 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0))) * (_1009 + 1.0))) + _1014) * _938;
        float _1024 = _906 * 0.5;
        float _1025 = _916 * 0.5;
        float _1026 = _926 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_225, _226, _227), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3262 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3273 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3284 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0))) * (_1051 + 1.0))) + _1056) * _939;
        _1073 = _906;
        _1074 = _905;
        _1075 = _904;
        _1076 = _916;
        _1077 = _915;
        _1078 = _914;
        _1079 = _926;
        _1080 = _925;
        _1081 = _924;
        _1082 = _939;
        _1083 = _938;
        _1084 = _937;
        _1085 = cbModelParam._m0[36u].w * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
        _1086 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
        _1087 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
    }
    else
    {
        _1073 = _764;
        _1074 = _764;
        _1075 = _764;
        _1076 = _764;
        _1077 = _764;
        _1078 = _764;
        _1079 = _764;
        _1080 = _764;
        _1081 = _764;
        _1082 = _764;
        _1083 = _764;
        _1084 = _764;
        _1085 = 0.0;
        _1086 = 0.0;
        _1087 = 0.0;
    }
    float _1097 = (cbModelParam._m0[1u].x * (_1085 - _776)) + _776;
    float _1098 = (cbModelParam._m0[1u].x * (_1086 - _777)) + _777;
    float _1099 = (cbModelParam._m0[1u].x * (_1087 - _778)) + _778;
    float _1120 = fma(_1099, cbSceneParam._m0[89u].z, fma(_1098, cbSceneParam._m0[89u].y, _1097 * cbSceneParam._m0[89u].x));
    float _1123 = fma(_1099, cbSceneParam._m0[90u].z, fma(_1098, cbSceneParam._m0[90u].y, _1097 * cbSceneParam._m0[90u].x));
    float _1126 = fma(_1099, cbSceneParam._m0[91u].z, fma(_1098, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1097));
    float _1141 = _402 * 0.5;
    float _1142 = _403 * 0.5;
    float _1143 = _404 * 0.5;
    float _1144 = dot(vec4(_1141, _1142, _1143, 1.0), vec4(_1075, _1078, _1081, _1084));
    float _1147 = dot(vec4(_1141, _1142, _1143, 1.0), vec4(_1074, _1077, _1080, _1083));
    float _1150 = dot(vec4(_1141, _1142, _1143, 1.0), vec4(_1073, _1076, _1079, _1082));
    float _1184;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1157 = dot(vec4(_1141, _1142, _1143, 1.0), vec4(_763, _767, _770, _773));
        float _1161 = dot(vec4(_1141, _1142, _1143, 1.0), vec4(_765, _768, _771, _774));
        float _1165 = dot(vec4(_1141, _1142, _1143, 1.0), vec4(_766, _769, _772, _775));
        float _1172 = dot(vec4(cbModelParam._m0[39u]), vec4(_1141, _1142, _1143, 1.0));
        _1184 = dot(vec3(isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)), isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)), isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1172) ? 0.0 : (isnan(0.0) ? _1172 : max(0.0, _1172))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1184 = 1.0;
    }
    float _1195;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1186 = dot(vec4(cbModelParam._m0[40u]), vec4(_1141, _1142, _1143, 1.0));
        _1195 = dot(vec3(isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)), isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)), isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1186) ? 0.0 : (isnan(0.0) ? _1186 : max(0.0, _1186))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1195 = 1.0;
    }
    float _1199 = (_1195 * cbModelParam._m0[1u].x) + (_1184 * (1.0 - cbModelParam._m0[1u].x));
    float _1208 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1290;
    float _1292;
    float _1294;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1257 = fma(_434, cbModelParam._m0[13u].z, fma(_430, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _426)) + cbModelParam._m0[13u].w;
        float _1261 = fma(_434, cbModelParam._m0[14u].z, fma(_430, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _426)) + cbModelParam._m0[14u].w;
        float _1265 = fma(_434, cbModelParam._m0[15u].z, fma(_430, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _426)) + cbModelParam._m0[15u].w;
        float _1268 = fma(_404, cbModelParam._m0[13u].z, fma(_403, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _402));
        float _1271 = fma(_404, cbModelParam._m0[14u].z, fma(_403, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _402));
        float _1274 = fma(_404, cbModelParam._m0[15u].z, fma(_403, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _402));
        float _1300;
        if (_1268 > 0.0)
        {
            _1300 = abs((1.0 - _1257) / _1268);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1268 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1257 + 1.0) / _1268);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1300 = frontier_phi_21_19_ladder;
        }
        float _1529;
        if (_1271 > 0.0)
        {
            _1529 = abs((1.0 - _1261) / _1271);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1271 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1261 + 1.0) / _1271);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1529 = frontier_phi_30_26_ladder;
        }
        float _1721;
        if (_1274 > 0.0)
        {
            _1721 = abs((1.0 - _1265) / _1274);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1274 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1265 + 1.0) / _1274);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1721 = frontier_phi_42_37_ladder;
        }
        float _1723 = isnan(_1529) ? _1300 : (isnan(_1300) ? _1529 : min(_1300, _1529));
        float _1724 = isnan(_1721) ? _1723 : (isnan(_1723) ? _1721 : min(_1723, _1721));
        float _1728 = (_1724 * _1268) + _1257;
        float _1729 = (_1724 * _1271) + _1261;
        float _1730 = (_1724 * _1274) + _1265;
        float _1731 = _1724 * 9.9999997473787516355514526367188e-05;
        float _1733 = (-1.0) - _1731;
        float _1735 = _1731 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_1730 > _1735) || ((_1730 < _1733) || ((_1729 > _1735) || ((_1729 < _1733) || ((_1728 < _1733) || (_1728 > _1735))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1827 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1730, cbModelParam._m0[9u].z, fma(_1729, cbModelParam._m0[9u].y, _1728 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1730, cbModelParam._m0[10u].z, fma(_1729, cbModelParam._m0[10u].y, _1728 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1730, cbModelParam._m0[11u].z, fma(_1729, cbModelParam._m0[11u].y, _1728 * cbModelParam._m0[11u].x))), _1208);
            frontier_phi_20_42_ladder = _1827.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _1827.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _1827.x * cbModelParam._m0[1u].y;
        }
        _1290 = frontier_phi_20_42_ladder_2;
        _1292 = frontier_phi_20_42_ladder_1;
        _1294 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1278 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_402, _403, _404), _1208);
        _1290 = _1278.x * cbModelParam._m0[1u].y;
        _1292 = _1278.y * cbModelParam._m0[1u].y;
        _1294 = _1278.z * cbModelParam._m0[1u].y;
    }
    float _1297 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1390;
    float _1392;
    float _1394;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1354 = fma(_434, cbModelParam._m0[21u].z, fma(_430, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _426)) + cbModelParam._m0[21u].w;
        float _1358 = fma(_434, cbModelParam._m0[22u].z, fma(_430, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _426)) + cbModelParam._m0[22u].w;
        float _1362 = fma(_434, cbModelParam._m0[23u].z, fma(_430, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _426)) + cbModelParam._m0[23u].w;
        float _1365 = fma(_404, cbModelParam._m0[21u].z, fma(_403, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _402));
        float _1368 = fma(_404, cbModelParam._m0[22u].z, fma(_403, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _402));
        float _1371 = fma(_404, cbModelParam._m0[23u].z, fma(_403, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _402));
        float _1534;
        if (_1365 > 0.0)
        {
            _1534 = abs((1.0 - _1354) / _1365);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1354 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1534 = frontier_phi_32_28_ladder;
        }
        float _1748;
        if (_1368 > 0.0)
        {
            _1748 = abs((1.0 - _1358) / _1368);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1358 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _1748 = frontier_phi_44_39_ladder;
        }
        float _1899;
        if (_1371 > 0.0)
        {
            _1899 = abs((1.0 - _1362) / _1371);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1362 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _1899 = frontier_phi_53_50_ladder;
        }
        float _1901 = isnan(_1748) ? _1534 : (isnan(_1534) ? _1748 : min(_1534, _1748));
        float _1902 = isnan(_1899) ? _1901 : (isnan(_1901) ? _1899 : min(_1901, _1899));
        float _1906 = (_1902 * _1365) + _1354;
        float _1907 = (_1902 * _1368) + _1358;
        float _1908 = (_1902 * _1371) + _1362;
        float _1909 = _1902 * 9.9999997473787516355514526367188e-05;
        float _1910 = (-1.0) - _1909;
        float _1912 = _1909 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_1908 > _1912) || ((_1908 < _1910) || ((_1907 > _1912) || ((_1907 < _1910) || ((_1906 < _1910) || (_1906 > _1912))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2106 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1908, cbModelParam._m0[17u].z, fma(_1907, cbModelParam._m0[17u].y, _1906 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1908, cbModelParam._m0[18u].z, fma(_1907, cbModelParam._m0[18u].y, _1906 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1908, cbModelParam._m0[19u].z, fma(_1907, cbModelParam._m0[19u].y, _1906 * cbModelParam._m0[19u].x))), _1297);
            frontier_phi_29_53_ladder = _2106.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2106.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2106.x * cbModelParam._m0[1u].z;
        }
        _1390 = frontier_phi_29_53_ladder_2;
        _1392 = frontier_phi_29_53_ladder_1;
        _1394 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1374 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_402, _403, _404), _1297);
        _1390 = _1374.x * cbModelParam._m0[1u].z;
        _1392 = _1374.y * cbModelParam._m0[1u].z;
        _1394 = _1374.z * cbModelParam._m0[1u].z;
    }
    float _1406 = _393 * 0.01200000010430812835693359375;
    float _1408 = _1406 * ((cbModelParam._m0[1u].w * (_1390 - _1290)) + _1290);
    float _1409 = _1406 * ((cbModelParam._m0[1u].w * (_1392 - _1292)) + _1292);
    float _1410 = _1406 * ((cbModelParam._m0[1u].w * (_1394 - _1294)) + _1294);
    float _1413 = fma(_1410, cbSceneParam._m0[89u].z, fma(_1409, cbSceneParam._m0[89u].y, _1408 * cbSceneParam._m0[89u].x));
    float _1416 = fma(_1410, cbSceneParam._m0[90u].z, fma(_1409, cbSceneParam._m0[90u].y, _1408 * cbSceneParam._m0[90u].x));
    float _1419 = fma(_1410, cbSceneParam._m0[91u].z, fma(_1409, cbSceneParam._m0[91u].y, _1408 * cbSceneParam._m0[91u].x));
    vec4 _1427 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_327, _328));
    float _1429 = _1427.w;
    float _1441 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1429);
    float _1442 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1429);
    float _1443 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1429);
    uvec4 _1447 = floatBitsToUint(cbInstanceData._m0[_367 + 5u]);
    uint _1449 = _1447.x * 14u;
    uint _1450 = _1449 + 13u;
    float _1457 = _393 + (-1.0);
    float _1463 = (cbLight._m0[_1450].x * _1457) + 1.0;
    float _1464 = (cbLight._m0[_1450].y * _1457) + 1.0;
    float _1465 = (cbLight._m0[_1450].z * _1457) + 1.0;
    float _1466 = (cbLight._m0[_1450].w * _1457) + 1.0;
    uint _1467 = _1449 + 5u;
    float _1473 = isnan(1.0) ? _1464 : (isnan(_1464) ? 1.0 : min(_1464, 1.0));
    uint _1477 = _1449 + 4u;
    float _1487 = isnan(1.0) ? _1463 : (isnan(_1463) ? 1.0 : min(_1463, 1.0));
    uint _1491 = _1449 | 1u;
    float _1502 = dot(vec3(cbLight._m0[_1449].xyz), vec3(_225, _226, _227));
    float _1505 = dot(vec3(cbLight._m0[_1491].xyz), vec3(_225, _226, _227));
    float _3420 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
    float _3431 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
    float _1510 = (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * 0.3183098733425140380859375;
    float _1512 = (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * 0.3183098733425140380859375;
    float _1519 = ((cbLight._m0[_1467].x * _1473) * _1512) + (((cbLight._m0[_1477].x * _1441) * _1487) * _1510);
    float _1520 = ((_1473 * cbLight._m0[_1467].y) * _1512) + (((cbLight._m0[_1477].y * _1442) * _1487) * _1510);
    float _1521 = ((_1473 * cbLight._m0[_1467].z) * _1512) + (((cbLight._m0[_1477].z * _1443) * _1487) * _1510);
    uvec4 _1526 = floatBitsToUint(cbLight._m0[_1449 + 12u]);
    bool _1528 = _1526.x == 0u;
    float _1539;
    float _1541;
    float _1543;
    if (_1528)
    {
        _1539 = _1519;
        _1541 = _1520;
        _1543 = _1521;
    }
    else
    {
        uint _1547 = _1449 + 6u;
        float _1563 = (dot(vec3(cbLight._m0[_1449 + 2u].xyz), vec3(_225, _226, _227)) * 0.5) + 0.5;
        float _1564 = _1563 * _1563;
        float _3442 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _1566 = isnan(1.0) ? _1465 : (isnan(_1465) ? 1.0 : min(_1465, 1.0));
        _1539 = (((cbLight._m0[_1547].x * 0.3183098733425140380859375) * _1565) * _1566) + _1519;
        _1541 = (((cbLight._m0[_1547].y * 0.3183098733425140380859375) * _1565) * _1566) + _1520;
        _1543 = (((cbLight._m0[_1547].z * 0.3183098733425140380859375) * _1565) * _1566) + _1521;
    }
    bool _1546 = _1526.y == 0u;
    float _1584;
    float _1586;
    float _1588;
    if (_1546)
    {
        _1584 = _1539;
        _1586 = _1541;
        _1588 = _1543;
    }
    else
    {
        uint _1692 = _1449 + 7u;
        float _1708 = (dot(vec3(cbLight._m0[_1449 + 3u].xyz), vec3(_225, _226, _227)) * 0.5) + 0.5;
        float _1709 = _1708 * _1708;
        float _3458 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1711 = isnan(1.0) ? _1466 : (isnan(_1466) ? 1.0 : min(_1466, 1.0));
        _1584 = (((cbLight._m0[_1692].x * 0.3183098733425140380859375) * _1710) * _1711) + _1539;
        _1586 = (((cbLight._m0[_1692].y * 0.3183098733425140380859375) * _1710) * _1711) + _1541;
        _1588 = (((cbLight._m0[_1692].z * 0.3183098733425140380859375) * _1710) * _1711) + _1543;
    }
    uint _1590 = _1449 + 8u;
    float _1596 = cbLight._m0[_1449].x + _309;
    float _1597 = cbLight._m0[_1449].y + _310;
    float _1598 = cbLight._m0[_1449].z + _311;
    float _1602 = inversesqrt(dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598)));
    float _1606 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1449].xyz));
    float _3474 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
    float _1609 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _1610 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _1611 = dot(vec3(cbLight._m0[_1449].xyz), vec3(_1596 * _1602, _1597 * _1602, _1598 * _1602));
    float _3496 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1622 = (exp2(log2(1.0 - (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1628 = (0.5 / ((_1609 + 9.9999999392252902907785028219223e-09) + _1610)) * _1609;
    float _3507 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1630 = (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * 0.31831014156341552734375;
    uint _1644 = _1449 + 9u;
    float _1650 = cbLight._m0[_1491].x + _309;
    float _1651 = cbLight._m0[_1491].y + _310;
    float _1652 = cbLight._m0[_1491].z + _311;
    float _1656 = inversesqrt(dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652)));
    float _1660 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1491].xyz));
    float _3518 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1663 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _1664 = dot(vec3(cbLight._m0[_1491].xyz), vec3(_1650 * _1656, _1651 * _1656, _1652 * _1656));
    float _3529 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _1673 = (exp2(log2(1.0 - (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1677 = (0.5 / ((_1663 + 9.9999999392252902907785028219223e-09) + _1610)) * _1663;
    float _3540 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1679 = (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * 0.31831014156341552734375;
    float _1689 = (((_1673 * cbLight._m0[_1644].x) * _1679) * _1473) + ((((cbLight._m0[_1590].x * _1441) * _1622) * _1630) * _1487);
    float _1690 = (((_1673 * cbLight._m0[_1644].y) * _1679) * _1473) + ((((cbLight._m0[_1590].y * _1442) * _1622) * _1630) * _1487);
    float _1691 = (((_1673 * cbLight._m0[_1644].z) * _1679) * _1473) + ((((cbLight._m0[_1590].z * _1443) * _1622) * _1630) * _1487);
    float _1753;
    float _1755;
    float _1757;
    if (_1528)
    {
        _1753 = _1689;
        _1755 = _1690;
        _1757 = _1691;
    }
    else
    {
        uint _1759 = _1449 + 10u;
        uint _1765 = _1449 + 2u;
        float _1771 = cbLight._m0[_1765].x + _309;
        float _1772 = cbLight._m0[_1765].y + _310;
        float _1773 = cbLight._m0[_1765].z + _311;
        float _1777 = inversesqrt(dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773)));
        float _1781 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1765].xyz));
        float _3551 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1784 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1785 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1771 * _1777, _1772 * _1777, _1773 * _1777));
        float _3562 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1794 = (exp2(log2(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1798 = (0.5 / ((_1784 + 9.9999999392252902907785028219223e-09) + _1610)) * _1784;
        float _3573 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1800 = (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.31831014156341552734375;
        float _1801 = isnan(1.0) ? _1465 : (isnan(_1465) ? 1.0 : min(_1465, 1.0));
        _1753 = (((_1794 * cbLight._m0[_1759].x) * _1800) * _1801) + _1689;
        _1755 = (((_1794 * cbLight._m0[_1759].y) * _1800) * _1801) + _1690;
        _1757 = (((_1794 * cbLight._m0[_1759].z) * _1800) * _1801) + _1691;
    }
    float _1836;
    float _1838;
    float _1840;
    if (_1546)
    {
        _1836 = _1753;
        _1838 = _1755;
        _1840 = _1757;
    }
    else
    {
        uint _1847 = _1449 + 11u;
        uint _1853 = _1449 + 3u;
        float _1859 = cbLight._m0[_1853].x + _309;
        float _1860 = cbLight._m0[_1853].y + _310;
        float _1861 = cbLight._m0[_1853].z + _311;
        float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
        float _1869 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1853].xyz));
        float _3589 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1872 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1873 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_1859 * _1865, _1860 * _1865, _1861 * _1865));
        float _3600 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1882 = (exp2(log2(1.0 - (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1886 = (0.5 / ((_1872 + 9.9999999392252902907785028219223e-09) + _1610)) * _1872;
        float _3611 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1888 = (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * 0.31831014156341552734375;
        float _1889 = isnan(1.0) ? _1466 : (isnan(_1466) ? 1.0 : min(_1466, 1.0));
        _1836 = (((_1882 * cbLight._m0[_1847].x) * _1888) * _1889) + _1753;
        _1838 = (((_1882 * cbLight._m0[_1847].y) * _1888) * _1889) + _1755;
        _1840 = (((_1882 * cbLight._m0[_1847].z) * _1888) * _1889) + _1757;
    }
    float _2023;
    float _2025;
    float _2027;
    float _2029;
    float _2031;
    float _2033;
    if (_1447.y == 0u)
    {
        float _1964 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1965 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1964;
        float _1966 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1964;
        float _1967 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1964;
        uvec4 _1979 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1980 = _1979.x;
        uint _1991 = uint((float(_1979.y) * floor(float(uint(cbSceneParam._m0[85u].y * _328) / _1980))) + floor(float(uint(cbSceneParam._m0[85u].x * _327) / _1980)));
        float _2001 = (log2(_1967 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2002 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        uint _2005 = uint(isnan(14.0) ? _2002 : (isnan(_2002) ? 14.0 : min(_2002, 14.0)));
        uvec4 _2010 = texelFetch(g_lightClusterGridBuffer, int(((_2005 << 2u) + (_1991 << 6u)) >> 2u));
        uint _2011 = _2010.x;
        uint _2012 = _1979.z;
        float _2111;
        float _2113;
        float _2115;
        float _2117;
        float _2119;
        float _2121;
        if (((((1u << ((_2012 >> 4u) & 15u)) + 4294967295u) & _2011) == 0u) || ((_2012 & 240u) == 0u))
        {
            _2111 = 0.0;
            _2113 = 0.0;
            _2115 = 0.0;
            _2117 = 0.0;
            _2119 = 0.0;
            _2121 = 0.0;
        }
        else
        {
            float _2112;
            float _2114;
            float _2116;
            float _2118;
            float _2120;
            float _2122;
            float _2262 = 0.0;
            float _2263 = 0.0;
            float _2264 = 0.0;
            float _2265 = 0.0;
            float _2266 = 0.0;
            float _2267 = 0.0;
            uint _2268 = 0u;
            uint _2277;
            bool _2278;
            for (;;)
            {
                _2277 = texelFetch(g_lightClassification, int((((_2005 << 5u) + (_1991 << 9u)) + (_2268 << 2u)) >> 2u)).x;
                _2278 = _2277 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2278)
                {
                    frontier_phi_70_pred = _2264;
                    frontier_phi_70_pred_1 = _2267;
                    frontier_phi_70_pred_2 = _2266;
                    frontier_phi_70_pred_3 = _2265;
                    frontier_phi_70_pred_4 = _2263;
                    frontier_phi_70_pred_5 = _2262;
                }
                else
                {
                    float _2407;
                    float _2408;
                    float _2409;
                    float _2410;
                    float _2411;
                    float _2412;
                    uint _2413;
                    _2407 = _2262;
                    _2408 = _2263;
                    _2409 = _2264;
                    _2410 = _2265;
                    _2411 = _2266;
                    _2412 = _2267;
                    _2413 = _2277;
                    float _2334;
                    float _2335;
                    float _2336;
                    float _2337;
                    float _2338;
                    float _2339;
                    for (;;)
                    {
                        uint _2417 = uint(findLSB(_2413)) + (_2268 << 5u);
                        uint _2414 = (_2413 + 4294967295u) & _2413;
                        uint _2419 = _2417 * 48u;
                        vec4 _2433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2419)).x, texelFetch(g_PointLightRenderingBuffer, int(_2419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2419 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2419 + 3u)).x));
                        uint _2439 = (_2417 * 48u) + 4u;
                        vec4 _2452 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2439)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 3u)).x));
                        uint _2458 = (_2417 * 48u) + 8u;
                        vec3 _2469 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2458)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 2u)).x));
                        float _2473 = _2433.x - _1965;
                        float _2474 = _2433.y - _1966;
                        float _2475 = _2433.z - _1967;
                        float _2476 = dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475));
                        float _2479 = inversesqrt(_2476);
                        float _2488 = 1.0 - (_2476 * _2433.w);
                        float _3637 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
                        float _2489 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
                        float _2490 = sqrt(_2476) * _2452.w;
                        float _2493 = 1.39999997615814208984375 / (_2490 + 1.39999997615814208984375);
                        float _2494 = _2493 * _2493;
                        float _2497 = ((1.0 - _2494) * dot(vec3(_348, _351, _354), vec3(_2479 * _2473, _2479 * _2474, _2479 * _2475))) + _2494;
                        float _2500 = _2490 * _2490;
                        float _2504 = ((isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0))) * _2489) / ((_2500 * 0.699999988079071044921875) + 1.0);
                        float _2508 = (-0.0) - _1965;
                        float _2509 = (-0.0) - _1966;
                        float _2510 = (-0.0) - _1967;
                        float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
                        float _2518 = dot(vec3(_348, _351, _354), vec3(_2514 * _2508, _2514 * _2509, _2514 * _2510));
                        float _3653 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
                        float _3664 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
                        float _2522 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
                        float _2526 = (0.5 / (((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) + 9.9999999392252902907785028219223e-09) + _2522)) * _2522;
                        float _3675 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
                        float _2535 = (((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * 3.1415927410125732421875) / ((_2500 * 2.1991131305694580078125) + 3.141590118408203125)) * _2489;
                        _2337 = (_2504 * _2452.x) + _2410;
                        _2338 = (_2504 * _2452.y) + _2411;
                        _2339 = (_2504 * _2452.z) + _2412;
                        _2334 = (_2535 * _2469.x) + _2407;
                        _2335 = (_2535 * _2469.y) + _2408;
                        _2336 = (_2535 * _2469.z) + _2409;
                        if (_2414 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2407 = _2334;
                            _2408 = _2335;
                            _2409 = _2336;
                            _2410 = _2337;
                            _2411 = _2338;
                            _2412 = _2339;
                            _2413 = _2414;
                        }
                    }
                    frontier_phi_70_pred = _2336;
                    frontier_phi_70_pred_1 = _2339;
                    frontier_phi_70_pred_2 = _2338;
                    frontier_phi_70_pred_3 = _2337;
                    frontier_phi_70_pred_4 = _2335;
                    frontier_phi_70_pred_5 = _2334;
                }
                _2116 = frontier_phi_70_pred;
                _2122 = frontier_phi_70_pred_1;
                _2120 = frontier_phi_70_pred_2;
                _2118 = frontier_phi_70_pred_3;
                _2114 = frontier_phi_70_pred_4;
                _2112 = frontier_phi_70_pred_5;
                uint _2269 = _2268 + 1u;
                if (_2269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2262 = _2112;
                    _2263 = _2114;
                    _2264 = _2116;
                    _2265 = _2118;
                    _2266 = _2120;
                    _2267 = _2122;
                    _2268 = _2269;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2111 = _2112;
            _2113 = _2114;
            _2115 = _2116;
            _2117 = _2118;
            _2119 = _2120;
            _2121 = _2122;
        }
        uvec4 _2125 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2126 = _2125.z;
        uint _2128 = (_2126 >> 8u) & 15u;
        float _2233;
        float _2235;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        if (((4294967295u << _2128) & _2011) == 0u)
        {
            _2233 = _2111;
            _2235 = _2113;
            _2237 = _2115;
            _2239 = _2117;
            _2241 = _2119;
            _2243 = _2121;
        }
        else
        {
            float _2258 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2128 < ((_2126 >> 12u) & 15u))
            {
                float _2234;
                float _2236;
                float _2238;
                float _2240;
                float _2242;
                float _2244;
                float _2390 = _2111;
                float _2391 = _2113;
                float _2392 = _2115;
                float _2393 = _2117;
                float _2394 = _2119;
                float _2395 = _2121;
                uint _2396 = _2128;
                uint _2405;
                bool _2406;
                for (;;)
                {
                    _2405 = texelFetch(g_lightClassification, int((((_2005 << 5u) + (_1991 << 9u)) + (_2396 << 2u)) >> 2u)).x;
                    _2406 = _2405 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2406)
                    {
                        frontier_phi_81_pred = _2395;
                        frontier_phi_81_pred_1 = _2394;
                        frontier_phi_81_pred_2 = _2393;
                        frontier_phi_81_pred_3 = _2392;
                        frontier_phi_81_pred_4 = _2391;
                        frontier_phi_81_pred_5 = _2390;
                    }
                    else
                    {
                        float _2549;
                        float _2550;
                        float _2551;
                        float _2552;
                        float _2553;
                        float _2554;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2562 = _2390;
                        float _2563 = _2391;
                        float _2564 = _2392;
                        float _2565 = _2393;
                        float _2566 = _2394;
                        float _2567 = _2395;
                        uint _2568 = _2405;
                        uint _2569;
                        vec4 _2594;
                        float _2595;
                        vec4 _2610;
                        vec3 _2622;
                        vec4 _2638;
                        vec4 _2654;
                        float _2701;
                        bool _2702;
                        for (;;)
                        {
                            uint _2579 = ((_2396 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2568));
                            _2569 = (_2568 + 4294967295u) & _2568;
                            uint _2581 = _2579 * 40u;
                            _2594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 3u)).x));
                            _2595 = _2594.w;
                            uint _2597 = (_2579 * 40u) + 4u;
                            _2610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 3u)).x));
                            uint _2612 = (_2579 * 40u) + 8u;
                            _2622 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 2u)).x));
                            uint _2625 = (_2579 * 40u) + 16u;
                            _2638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 3u)).x));
                            uint _2641 = (_2579 * 40u) + 20u;
                            _2654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 3u)).x));
                            uint _2657 = (_2579 * 40u) + 24u;
                            vec4 _2670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 3u)).x));
                            uint _2676 = (_2579 * 40u) + 28u;
                            vec4 _2689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 3u)).x));
                            _2701 = fma(_1967, _2689.z, fma(_1966, _2689.y, _2689.x * _1965)) + _2689.w;
                            _2702 = !((fma(_1967, _2670.z, fma(_1966, _2670.y, _2670.x * _1965)) + _2670.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2702)
                            {
                                float _2729 = _2594.x - _1965;
                                float _2730 = _2594.y - _1966;
                                float _2731 = _2594.z - _1967;
                                float _2732 = dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731));
                                float _2735 = inversesqrt(_2732);
                                float _2736 = _2735 * _2729;
                                float _2737 = _2735 * _2730;
                                float _2738 = _2735 * _2731;
                                float _2742 = 1.0 - (_2732 / (_2595 * _2595));
                                float _3686 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                                float _2743 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
                                float _2747 = sqrt(_2732) * _2610.w;
                                float _2749 = 1.39999997615814208984375 / (_2747 + 1.39999997615814208984375);
                                float _2750 = _2749 * _2749;
                                float _2751 = 1.0 - _2750;
                                float _2753 = (_2751 * dot(vec3(_2736, _2737, _2738), vec3(_348, _351, _354))) + _2750;
                                float _2756 = _2747 * _2747;
                                float _2760 = (fma(_1967, _2638.z, fma(_1966, _2638.y, _2638.x * _1965)) + _2638.w) / _2701;
                                float _2761 = (fma(_1967, _2654.z, fma(_1966, _2654.y, _2654.x * _1965)) + _2654.w) / _2701;
                                float _2765 = 1.0 - dot(vec2(_2760, _2761), vec2(_2760, _2761));
                                float _3702 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                                float _2766 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
                                float _2767 = _2766 * (((isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0))) * _2743) / ((_2756 * 0.699999988079071044921875) + 1.0));
                                float _2777 = dot(vec3(_348, _351, _354), vec3((-0.0) - (_1965 * _2258), (-0.0) - (_1966 * _2258), (-0.0) - (_1967 * _2258)));
                                float _3713 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                                float _2785 = (_2751 * dot(vec3(_348, _351, _354), vec3(_2736, _2737, _2738))) + _2750;
                                float _3724 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                                float _2786 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
                                float _2790 = (0.5 / (((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) + 9.9999999392252902907785028219223e-09) + _2786)) * _2786;
                                float _3735 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                                float _2797 = (_2766 * _2743) * (((isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 3.1415927410125732421875) / ((_2756 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2767 * _2610.z;
                                frontier_phi_87_pred_1 = _2767 * _2610.y;
                                frontier_phi_87_pred_2 = _2767 * _2610.x;
                                frontier_phi_87_pred_3 = _2797 * _2622.z;
                                frontier_phi_87_pred_4 = _2797 * _2622.y;
                                frontier_phi_87_pred_5 = _2797 * _2622.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _2806 = frontier_phi_87_pred;
                            _2805 = frontier_phi_87_pred_1;
                            _2804 = frontier_phi_87_pred_2;
                            _2803 = frontier_phi_87_pred_3;
                            _2802 = frontier_phi_87_pred_4;
                            _2801 = frontier_phi_87_pred_5;
                            _2552 = _2804 + _2565;
                            _2553 = _2805 + _2566;
                            _2554 = _2806 + _2567;
                            _2549 = _2801 + _2562;
                            _2550 = _2802 + _2563;
                            _2551 = _2803 + _2564;
                            if (_2569 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2562 = _2549;
                                _2563 = _2550;
                                _2564 = _2551;
                                _2565 = _2552;
                                _2566 = _2553;
                                _2567 = _2554;
                                _2568 = _2569;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2554;
                        frontier_phi_81_pred_1 = _2553;
                        frontier_phi_81_pred_2 = _2552;
                        frontier_phi_81_pred_3 = _2551;
                        frontier_phi_81_pred_4 = _2550;
                        frontier_phi_81_pred_5 = _2549;
                    }
                    _2244 = frontier_phi_81_pred;
                    _2242 = frontier_phi_81_pred_1;
                    _2240 = frontier_phi_81_pred_2;
                    _2238 = frontier_phi_81_pred_3;
                    _2236 = frontier_phi_81_pred_4;
                    _2234 = frontier_phi_81_pred_5;
                    uint _2397 = _2396 + 1u;
                    if (_2397 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2390 = _2234;
                        _2391 = _2236;
                        _2392 = _2238;
                        _2393 = _2240;
                        _2394 = _2242;
                        _2395 = _2244;
                        _2396 = _2397;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2240;
                frontier_phi_62_63_ladder_1 = _2244;
                frontier_phi_62_63_ladder_2 = _2242;
                frontier_phi_62_63_ladder_3 = _2238;
                frontier_phi_62_63_ladder_4 = _2236;
                frontier_phi_62_63_ladder_5 = _2234;
            }
            else
            {
                frontier_phi_62_63_ladder = _2117;
                frontier_phi_62_63_ladder_1 = _2121;
                frontier_phi_62_63_ladder_2 = _2119;
                frontier_phi_62_63_ladder_3 = _2115;
                frontier_phi_62_63_ladder_4 = _2113;
                frontier_phi_62_63_ladder_5 = _2111;
            }
            _2233 = frontier_phi_62_63_ladder_5;
            _2235 = frontier_phi_62_63_ladder_4;
            _2237 = frontier_phi_62_63_ladder_3;
            _2239 = frontier_phi_62_63_ladder;
            _2241 = frontier_phi_62_63_ladder_2;
            _2243 = frontier_phi_62_63_ladder_1;
        }
        float _2248 = isnan(1.0) ? _393 : (isnan(_393) ? 1.0 : min(_393, 1.0));
        _2023 = (_2248 * _2239) + _1584;
        _2025 = (_2248 * _2241) + _1586;
        _2027 = (_2248 * _2243) + _1588;
        _2029 = ((_2233 * 0.039999999105930328369140625) * _2248) + _1836;
        _2031 = ((_2235 * 0.039999999105930328369140625) * _2248) + _1838;
        _2033 = ((_2237 * 0.039999999105930328369140625) * _2248) + _1840;
    }
    else
    {
        _2023 = _1584;
        _2025 = _1586;
        _2027 = _1588;
        _2029 = _1836;
        _2031 = _1838;
        _2033 = _1840;
    }
    float _3751 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3762 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3773 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _2050 = ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_2023 + ((isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0))) * _393))) + ((_2029 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _1199)) * cbPerFrame._m0[3u].x);
    float _2051 = ((isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_2025 + ((isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0))) * _393))) + ((_2031 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _1199)) * cbPerFrame._m0[3u].x);
    float _2052 = ((isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_2027 + ((isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0))) * _393))) + ((_2033 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _1199)) * cbPerFrame._m0[3u].x);
    uint _2053 = _367 + 6u;
    float _2061 = _327 / cbSceneParam._m0[86u].x;
    float _2062 = _328 / cbSceneParam._m0[86u].y;
    vec4 _2076 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2061, _2062, (log2((isnan(cbSceneParam._m0[77u].w) ? _251 : (isnan(_251) ? cbSceneParam._m0[77u].w : min(_251, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2078 = _2076.x;
    float _2079 = _2076.y;
    float _2080 = _2076.z;
    float _2081 = _2076.w;
    float _2173;
    float _2175;
    float _2177;
    float _2179;
    if (_251 > cbSceneParam._m0[78u].w)
    {
        float _2136 = isnan(_251) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _251 : min(cbSceneParam._m0[80u].w, _251));
        float _2137 = _2136 / _251;
        float _2148 = _2137 * _302;
        float _2149 = _303 * _2137;
        float _2150 = (-0.0) - _2149;
        float _2151 = _2137 * _304;
        float _2153 = (cbSceneParam._m0[77u].w * _2150) / _2136;
        float _2154 = _2153 + cbSceneParam._m0[79u].w;
        float _2155 = cbSceneParam._m0[79u].w - _2149;
        float _2161 = sqrt(((_2148 * _2148) + (_2149 * _2149)) + (_2151 * _2151));
        float _2164 = (1.0 - (cbSceneParam._m0[77u].w / _2136)) * _2161;
        float _2169 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2171 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2347;
        if (abs((_2150 - _2153) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2347 = ((((_2154 > 0.0) ? exp2(_2169 * _2154) : (2.0 - exp2(_2171 * _2154))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2164;
        }
        else
        {
            float _2291 = 1.0 / cbSceneParam._m0[80u].x;
            float _2292 = isnan(_2155) ? _2154 : (isnan(_2154) ? _2155 : max(_2154, _2155));
            float _2293 = isnan(_2155) ? _2154 : (isnan(_2154) ? _2155 : min(_2154, _2155));
            float _2302 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : min(_2292, 0.0));
            float _2303 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : min(_2293, 0.0));
            _2347 = ((abs(_2161 / _2150) * cbSceneParam._m0[80u].y) * ((((_2302 - _2303) * 2.0) - ((exp2(_2169 * (isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0)))) - exp2(_2169 * (isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0))))) * _2291)) - ((exp2(_2171 * _2302) - exp2(_2171 * _2303)) * _2291))) + (_2164 * cbSceneParam._m0[80u].z);
        }
        vec4 _2349 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2061, _2062, 1.0), 0.0);
        float _2358 = exp2((_2347 * (-1.44269502162933349609375)) * (1.0 - _2349.w));
        float _2359 = log2(_2358);
        float _2375 = log2(_2081);
        _2173 = (exp2(_2375 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2359 * cbSceneParam._m0[78u].x)) * _2349.x) / cbSceneParam._m0[78u].x)) + _2078;
        _2175 = (exp2(_2375 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2359 * cbSceneParam._m0[78u].y)) * _2349.y) / cbSceneParam._m0[78u].y)) + _2079;
        _2177 = (exp2(_2375 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2359 * cbSceneParam._m0[78u].z)) * _2349.z) / cbSceneParam._m0[78u].z)) + _2080;
        _2179 = _2358 * _2081;
    }
    else
    {
        _2173 = _2078;
        _2175 = _2079;
        _2177 = _2080;
        _2179 = _2081;
    }
    bool _2385;
    vec4 _2189;
    vec4 _2212;
    float _2214;
    float _2218;
    float _2219;
    float _2220;
    float _2221;
    bool _2232;
    for (;;)
    {
        _2189 = cbMatDynParam._m0[0u];
        float _2191 = roundEven(_2189.y);
        bool _2192 = _2191 == 3.0;
        float _2194 = log2(_2179);
        float _2201 = exp2(_2194 * cbSceneParam._m0[78u].x) * _2050;
        float _2202 = exp2(_2194 * cbSceneParam._m0[78u].y) * _2051;
        float _2203 = exp2(_2194 * cbSceneParam._m0[78u].z) * _2052;
        float _2210 = _315 + (-0.5);
        _2212 = cbMtdParam._m0[1u];
        _2214 = _2212.y * _2210;
        float _2217 = (_2191 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2218 = _2217 * (_2192 ? _2201 : (_2201 + (cbSceneParam._m0[72u].w * _2173)));
        _2219 = _2217 * (_2192 ? _2202 : (_2202 + (cbSceneParam._m0[72u].w * _2175)));
        _2220 = _2217 * (_2192 ? _2203 : (_2203 + (cbSceneParam._m0[72u].w * _2177)));
        _2221 = _2210 * 0.999000012874603271484375;
        _2232 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2232)
        {
            if ((cbInstanceData._m0[_367 + 7u].x + _2221) < 0.5)
            {
                _2385 = true;
                break;
            }
        }
        uint _2326 = _369 + uint(_2189.w);
        if ((cbInstanceData._m0[_2326].w < 1.0) && ((cbInstanceData._m0[_2326].w + _2221) < 0.5))
        {
            _2385 = true;
            break;
        }
        if ((_2214 + 1.0) < _2212.x)
        {
            _2385 = true;
            break;
        }
        _2385 = false;
        break;
    }
    float _2540;
    if (_2385)
    {
        discard_state = true;
        _2540 = 0.0;
    }
    else
    {
        _2540 = cbInstanceData._m0[_2053].w;
    }
    SV_Target.x = _2218;
    SV_Target.y = _2219;
    SV_Target.z = _2220;
    SV_Target.w = _2540;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2053].w;
    discard_exit();
}


