#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_PK_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _766;
float _3214;
float _3215;
float _3216;
float _3217;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _199 = texture(sampler2D(M_A_M0_PK_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _205 = _199.x * cbMtdParam._m0[9u].x;
    float _206 = _199.y * cbMtdParam._m0[9u].y;
    float _207 = _199.z * cbMtdParam._m0[9u].z;
    float _212 = gl_FragCoord.x * 0.125;
    float _214 = gl_FragCoord.y * 0.125;
    float _226 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _227 = _226 * _177;
    float _228 = _226 * _178;
    float _229 = _226 * _179;
    float _3226 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _3237 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _3248 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    if (!(cbMtdParam._m0[10u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_212, _214)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _253 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _294 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _304 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _294);
    float _305 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _294);
    float _306 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _294);
    float _310 = inversesqrt(dot(vec3(_304, _305, _306), vec3(_304, _305, _306)));
    float _311 = _304 * _310;
    float _312 = _305 * _310;
    float _313 = _306 * _310;
    vec4 _315 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_212, _214));
    float _317 = _315.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _447 = sqrt(((_304 * _304) + (_305 * _305)) + (_306 * _306));
        float _453 = (cbMatDynParam._m0[5u].x * _447) + cbMatDynParam._m0[5u].y;
        float _3259 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
        float _454 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
        float _458 = (cbMatDynParam._m0[5u].z * _447) + cbMatDynParam._m0[5u].w;
        float _3270 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0))) - _454)) + _454) < ((_317 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _329 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _330 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _350 = fma(_229, cbSceneParam._m0[5u].z, fma(_228, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _227));
    float _353 = fma(_229, cbSceneParam._m0[6u].z, fma(_228, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _227));
    float _356 = fma(_229, cbSceneParam._m0[7u].z, fma(_228, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _227));
    uint _369 = uint(roundEven(NORMAL.w)) * 13u;
    uint _371 = _369 + 9u;
    uint _372 = _371 + uint(cbMatDynParam._m0[0u].w);
    float _378 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0)))) * cbInstanceData._m0[_372].x;
    float _379 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0)))) * cbInstanceData._m0[_372].y;
    float _380 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0)))) * cbInstanceData._m0[_372].z;
    float _3281 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _381 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
    float _3292 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
    float _3303 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _383 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
    vec4 _392 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _329, cbSceneParam._m0[86u].y * _330));
    float _395 = _392.x * TEXCOORD.z;
    float _396 = dot(vec3(_227, _228, _229), vec3(_311, _312, _313));
    float _399 = _396 * 2.0;
    float _404 = (_399 * _227) - _311;
    float _405 = (_399 * _228) - _312;
    float _406 = (_399 * _229) - _313;
    float _428 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _432 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _436 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _765;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _490 = fma(_436, cbModelParam._m0[26u].z, fma(_432, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _428));
        float _494 = fma(_436, cbModelParam._m0[27u].z, fma(_432, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _428));
        float _498 = fma(_436, cbModelParam._m0[28u].z, fma(_432, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _428));
        float _523 = _428 + _227;
        float _524 = _432 + _228;
        float _525 = _436 + _229;
        float _535 = fma(_525, cbModelParam._m0[26u].z, fma(_524, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _523)) - _490;
        float _536 = fma(_525, cbModelParam._m0[27u].z, fma(_524, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _523)) - _494;
        float _537 = fma(_525, cbModelParam._m0[28u].z, fma(_524, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _523)) - _498;
        float _541 = inversesqrt(dot(vec3(_535, _536, _537), vec3(_535, _536, _537)));
        float _554 = ((_541 * _535) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_490 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _555 = ((_541 * _536) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_494 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _556 = ((_541 * _537) / cbModelParam._m0[34u].z) + ((((((_498 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _559 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_554, _555, _556), 0.0);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_554, _555, _556), 0.0);
        vec4 _573 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_554, _555, _556), 0.0);
        vec4 _580 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_554, _555, _556), 0.0);
        float _593 = exp2((_559.w + (-0.5)) * 20.0) * 2.0;
        float _594 = _593 * (_559.x + (-0.5));
        float _595 = _593 * (_559.y + (-0.5));
        float _596 = _593 * (_559.z + (-0.5));
        float _603 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _604 = _603 * (_566.x + (-0.5));
        float _605 = _603 * (_566.y + (-0.5));
        float _606 = _603 * (_566.z + (-0.5));
        float _613 = exp2((_573.w + (-0.5)) * 20.0) * 2.0;
        float _614 = _613 * (_573.x + (-0.5));
        float _615 = _613 * (_573.y + (-0.5));
        float _616 = _613 * (_573.z + (-0.5));
        float _623 = exp2((_580.w + (-0.5)) * 20.0) * 2.0;
        float _624 = _623 * (_580.x + (-0.5));
        float _625 = _623 * (_580.y + (-0.5));
        float _626 = _623 * (_580.z + (-0.5));
        float _627 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _628 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _629 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _630 = _594 * 0.5;
        float _631 = _604 * 0.5;
        float _632 = _614 * 0.5;
        float _633 = dot(vec3(_630, _631, _632), vec3(_630, _631, _632));
        float _638 = (_633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_633);
        float _647 = (dot(vec3(_227, _228, _229), vec3(_638 * _630, _638 * _631, _638 * _632)) + 1.0) * 0.5;
        float _3329 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _657 = sqrt(((_631 * _631) + (_630 * _630)) + (_632 * _632)) / (_627 + 9.9999997473787516355514526367188e-06);
        float _3340 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _658 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _659 = _658 * 2.0;
        float _663 = (1.0 - _658) / (_658 + 1.0);
        float _3351 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _664 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _673 = ((((1.0 - _664) * (_659 + 2.0)) * exp2(log2(isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0))) * (_659 + 1.0))) + _664) * _627;
        float _674 = _595 * 0.5;
        float _675 = _605 * 0.5;
        float _676 = _615 * 0.5;
        float _677 = dot(vec3(_674, _675, _676), vec3(_674, _675, _676));
        float _682 = (_677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_677);
        float _690 = (dot(vec3(_227, _228, _229), vec3(_682 * _674, _682 * _675, _682 * _676)) + 1.0) * 0.5;
        float _3362 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _699 = sqrt(((_675 * _675) + (_674 * _674)) + (_676 * _676)) / (_628 + 9.9999997473787516355514526367188e-06);
        float _3373 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _700 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _701 = _700 * 2.0;
        float _705 = (1.0 - _700) / (_700 + 1.0);
        float _3384 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _706 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _715 = ((((1.0 - _706) * (_701 + 2.0)) * exp2(log2(isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0))) * (_701 + 1.0))) + _706) * _628;
        float _716 = _596 * 0.5;
        float _717 = _606 * 0.5;
        float _718 = _616 * 0.5;
        float _719 = dot(vec3(_716, _717, _718), vec3(_716, _717, _718));
        float _724 = (_719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_719);
        float _732 = (dot(vec3(_227, _228, _229), vec3(_724 * _716, _724 * _717, _724 * _718)) + 1.0) * 0.5;
        float _3395 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _741 = sqrt(((_717 * _717) + (_716 * _716)) + (_718 * _718)) / (_629 + 9.9999997473787516355514526367188e-06);
        float _3406 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _743 = _742 * 2.0;
        float _747 = (1.0 - _742) / (_742 + 1.0);
        float _3417 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _757 = ((((1.0 - _748) * (_743 + 2.0)) * exp2(log2(isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))) * (_743 + 1.0))) + _748) * _629;
        _765 = _596;
        _767 = _595;
        _768 = _594;
        _769 = _606;
        _770 = _605;
        _771 = _604;
        _772 = _616;
        _773 = _615;
        _774 = _614;
        _775 = _629;
        _776 = _628;
        _777 = _627;
        _778 = cbModelParam._m0[36u].z * (isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0)));
        _779 = cbModelParam._m0[36u].z * (isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0)));
        _780 = cbModelParam._m0[36u].z * (isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0)));
    }
    else
    {
        _765 = _766;
        _767 = _766;
        _768 = _766;
        _769 = _766;
        _770 = _766;
        _771 = _766;
        _772 = _766;
        _773 = _766;
        _774 = _766;
        _775 = _766;
        _776 = _766;
        _777 = _766;
        _778 = 0.0;
        _779 = 0.0;
        _780 = 0.0;
    }
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _806 = fma(_436, cbModelParam._m0[30u].z, fma(_432, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _428));
        float _810 = fma(_436, cbModelParam._m0[31u].z, fma(_432, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _428));
        float _814 = fma(_436, cbModelParam._m0[32u].z, fma(_432, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _428));
        float _837 = _428 + _227;
        float _838 = _432 + _228;
        float _839 = _436 + _229;
        float _849 = fma(_839, cbModelParam._m0[30u].z, fma(_838, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _837)) - _806;
        float _850 = fma(_839, cbModelParam._m0[31u].z, fma(_838, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _837)) - _810;
        float _851 = fma(_839, cbModelParam._m0[32u].z, fma(_838, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _837)) - _814;
        float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
        float _868 = ((_855 * _849) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_806 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_855 * _850) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_810 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_855 * _851) / cbModelParam._m0[35u].z) + ((((((_814 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        float _905 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_872.x + (-0.5));
        float _907 = _905 * (_872.y + (-0.5));
        float _908 = _905 * (_872.z + (-0.5));
        float _915 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_879.x + (-0.5));
        float _917 = _915 * (_879.y + (-0.5));
        float _918 = _915 * (_879.z + (-0.5));
        float _925 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_886.x + (-0.5));
        float _927 = _925 * (_886.y + (-0.5));
        float _928 = _925 * (_886.z + (-0.5));
        float _935 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_893.x + (-0.5));
        float _937 = _935 * (_893.y + (-0.5));
        float _938 = _935 * (_893.z + (-0.5));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = _906 * 0.5;
        float _943 = _916 * 0.5;
        float _944 = _926 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_227, _228, _229), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3458 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3469 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3480 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * (_969 + 1.0))) + _974) * _939;
        float _984 = _907 * 0.5;
        float _985 = _917 * 0.5;
        float _986 = _927 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_227, _228, _229), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3491 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3502 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3513 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * (_1011 + 1.0))) + _1016) * _940;
        float _1026 = _908 * 0.5;
        float _1027 = _918 * 0.5;
        float _1028 = _928 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_227, _228, _229), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3524 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3535 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3546 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * (_1053 + 1.0))) + _1058) * _941;
        _1075 = _908;
        _1076 = _907;
        _1077 = _906;
        _1078 = _918;
        _1079 = _917;
        _1080 = _916;
        _1081 = _928;
        _1082 = _927;
        _1083 = _926;
        _1084 = _941;
        _1085 = _940;
        _1086 = _939;
        _1087 = cbModelParam._m0[36u].w * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1088 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1089 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
    }
    else
    {
        _1075 = _766;
        _1076 = _766;
        _1077 = _766;
        _1078 = _766;
        _1079 = _766;
        _1080 = _766;
        _1081 = _766;
        _1082 = _766;
        _1083 = _766;
        _1084 = _766;
        _1085 = _766;
        _1086 = _766;
        _1087 = 0.0;
        _1088 = 0.0;
        _1089 = 0.0;
    }
    float _1099 = (cbModelParam._m0[1u].x * (_1087 - _778)) + _778;
    float _1100 = (cbModelParam._m0[1u].x * (_1088 - _779)) + _779;
    float _1101 = (cbModelParam._m0[1u].x * (_1089 - _780)) + _780;
    float _1122 = fma(_1101, cbSceneParam._m0[89u].z, fma(_1100, cbSceneParam._m0[89u].y, _1099 * cbSceneParam._m0[89u].x));
    float _1125 = fma(_1101, cbSceneParam._m0[90u].z, fma(_1100, cbSceneParam._m0[90u].y, _1099 * cbSceneParam._m0[90u].x));
    float _1128 = fma(_1101, cbSceneParam._m0[91u].z, fma(_1100, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1099));
    float _1143 = _404 * 0.5;
    float _1144 = _405 * 0.5;
    float _1145 = _406 * 0.5;
    float _1146 = dot(vec4(_1143, _1144, _1145, 1.0), vec4(_1077, _1080, _1083, _1086));
    float _1149 = dot(vec4(_1143, _1144, _1145, 1.0), vec4(_1076, _1079, _1082, _1085));
    float _1152 = dot(vec4(_1143, _1144, _1145, 1.0), vec4(_1075, _1078, _1081, _1084));
    float _1186;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1159 = dot(vec4(_1143, _1144, _1145, 1.0), vec4(_765, _769, _772, _775));
        float _1163 = dot(vec4(_1143, _1144, _1145, 1.0), vec4(_767, _770, _773, _776));
        float _1167 = dot(vec4(_1143, _1144, _1145, 1.0), vec4(_768, _771, _774, _777));
        float _1174 = dot(vec4(cbModelParam._m0[39u]), vec4(_1143, _1144, _1145, 1.0));
        _1186 = dot(vec3(isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)), isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)), isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1174) ? 0.0 : (isnan(0.0) ? _1174 : max(0.0, _1174))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1186 = 1.0;
    }
    float _1197;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1188 = dot(vec4(cbModelParam._m0[40u]), vec4(_1143, _1144, _1145, 1.0));
        _1197 = dot(vec3(isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)), isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)), isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1188) ? 0.0 : (isnan(0.0) ? _1188 : max(0.0, _1188))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1197 = 1.0;
    }
    float _1201 = (_1197 * cbModelParam._m0[1u].x) + (_1186 * (1.0 - cbModelParam._m0[1u].x));
    float _1210 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1292;
    float _1294;
    float _1296;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1259 = fma(_436, cbModelParam._m0[13u].z, fma(_432, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _428)) + cbModelParam._m0[13u].w;
        float _1263 = fma(_436, cbModelParam._m0[14u].z, fma(_432, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _428)) + cbModelParam._m0[14u].w;
        float _1267 = fma(_436, cbModelParam._m0[15u].z, fma(_432, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _428)) + cbModelParam._m0[15u].w;
        float _1270 = fma(_406, cbModelParam._m0[13u].z, fma(_405, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _404));
        float _1273 = fma(_406, cbModelParam._m0[14u].z, fma(_405, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _404));
        float _1276 = fma(_406, cbModelParam._m0[15u].z, fma(_405, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _404));
        float _1302;
        if (_1270 > 0.0)
        {
            _1302 = abs((1.0 - _1259) / _1270);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1270 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1259 + 1.0) / _1270);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1302 = frontier_phi_21_19_ladder;
        }
        float _1477;
        if (_1273 > 0.0)
        {
            _1477 = abs((1.0 - _1263) / _1273);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1273 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1263 + 1.0) / _1273);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1477 = frontier_phi_30_26_ladder;
        }
        float _1774;
        if (_1276 > 0.0)
        {
            _1774 = abs((1.0 - _1267) / _1276);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1276 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1267 + 1.0) / _1276);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1774 = frontier_phi_42_37_ladder;
        }
        float _1776 = isnan(_1477) ? _1302 : (isnan(_1302) ? _1477 : min(_1302, _1477));
        float _1777 = isnan(_1774) ? _1776 : (isnan(_1776) ? _1774 : min(_1776, _1774));
        float _1781 = (_1777 * _1270) + _1259;
        float _1782 = (_1777 * _1273) + _1263;
        float _1783 = (_1777 * _1276) + _1267;
        float _1784 = _1777 * 9.9999997473787516355514526367188e-05;
        float _1786 = (-1.0) - _1784;
        float _1788 = _1784 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_1783 > _1788) || ((_1783 < _1786) || ((_1782 > _1788) || ((_1782 < _1786) || ((_1781 < _1786) || (_1781 > _1788))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1928 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1783, cbModelParam._m0[9u].z, fma(_1782, cbModelParam._m0[9u].y, _1781 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1783, cbModelParam._m0[10u].z, fma(_1782, cbModelParam._m0[10u].y, _1781 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1783, cbModelParam._m0[11u].z, fma(_1782, cbModelParam._m0[11u].y, _1781 * cbModelParam._m0[11u].x))), _1210);
            frontier_phi_20_42_ladder = _1928.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _1928.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _1928.x * cbModelParam._m0[1u].y;
        }
        _1292 = frontier_phi_20_42_ladder_2;
        _1294 = frontier_phi_20_42_ladder_1;
        _1296 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1280 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_404, _405, _406), _1210);
        _1292 = _1280.x * cbModelParam._m0[1u].y;
        _1294 = _1280.y * cbModelParam._m0[1u].y;
        _1296 = _1280.z * cbModelParam._m0[1u].y;
    }
    float _1299 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1392;
    float _1394;
    float _1396;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1356 = fma(_436, cbModelParam._m0[21u].z, fma(_432, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _428)) + cbModelParam._m0[21u].w;
        float _1360 = fma(_436, cbModelParam._m0[22u].z, fma(_432, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _428)) + cbModelParam._m0[22u].w;
        float _1364 = fma(_436, cbModelParam._m0[23u].z, fma(_432, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _428)) + cbModelParam._m0[23u].w;
        float _1367 = fma(_406, cbModelParam._m0[21u].z, fma(_405, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _404));
        float _1370 = fma(_406, cbModelParam._m0[22u].z, fma(_405, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _404));
        float _1373 = fma(_406, cbModelParam._m0[23u].z, fma(_405, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _404));
        float _1482;
        if (_1367 > 0.0)
        {
            _1482 = abs((1.0 - _1356) / _1367);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1356 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1482 = frontier_phi_32_28_ladder;
        }
        float _1801;
        if (_1370 > 0.0)
        {
            _1801 = abs((1.0 - _1360) / _1370);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1360 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _1801 = frontier_phi_44_39_ladder;
        }
        float _2074;
        if (_1373 > 0.0)
        {
            _2074 = abs((1.0 - _1364) / _1373);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1364 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2074 = frontier_phi_54_51_ladder;
        }
        float _2076 = isnan(_1801) ? _1482 : (isnan(_1482) ? _1801 : min(_1482, _1801));
        float _2077 = isnan(_2074) ? _2076 : (isnan(_2076) ? _2074 : min(_2076, _2074));
        float _2081 = (_2077 * _1367) + _1356;
        float _2082 = (_2077 * _1370) + _1360;
        float _2083 = (_2077 * _1373) + _1364;
        float _2084 = _2077 * 9.9999997473787516355514526367188e-05;
        float _2085 = (-1.0) - _2084;
        float _2087 = _2084 + 1.0;
        float frontier_phi_29_54_ladder;
        float frontier_phi_29_54_ladder_1;
        float frontier_phi_29_54_ladder_2;
        if ((_2083 > _2087) || ((_2083 < _2085) || ((_2082 > _2087) || ((_2082 < _2085) || ((_2081 < _2085) || (_2081 > _2087))))))
        {
            frontier_phi_29_54_ladder = 0.0;
            frontier_phi_29_54_ladder_1 = 0.0;
            frontier_phi_29_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2174 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2083, cbModelParam._m0[17u].z, fma(_2082, cbModelParam._m0[17u].y, _2081 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2083, cbModelParam._m0[18u].z, fma(_2082, cbModelParam._m0[18u].y, _2081 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2083, cbModelParam._m0[19u].z, fma(_2082, cbModelParam._m0[19u].y, _2081 * cbModelParam._m0[19u].x))), _1299);
            frontier_phi_29_54_ladder = _2174.z * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_1 = _2174.y * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_2 = _2174.x * cbModelParam._m0[1u].z;
        }
        _1392 = frontier_phi_29_54_ladder_2;
        _1394 = frontier_phi_29_54_ladder_1;
        _1396 = frontier_phi_29_54_ladder;
    }
    else
    {
        vec4 _1376 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_404, _405, _406), _1299);
        _1392 = _1376.x * cbModelParam._m0[1u].z;
        _1394 = _1376.y * cbModelParam._m0[1u].z;
        _1396 = _1376.z * cbModelParam._m0[1u].z;
    }
    float _1408 = _395 * 0.01200000010430812835693359375;
    float _1410 = _1408 * ((cbModelParam._m0[1u].w * (_1392 - _1292)) + _1292);
    float _1411 = _1408 * ((cbModelParam._m0[1u].w * (_1394 - _1294)) + _1294);
    float _1412 = _1408 * ((cbModelParam._m0[1u].w * (_1396 - _1296)) + _1296);
    float _1415 = fma(_1412, cbSceneParam._m0[89u].z, fma(_1411, cbSceneParam._m0[89u].y, _1410 * cbSceneParam._m0[89u].x));
    float _1418 = fma(_1412, cbSceneParam._m0[90u].z, fma(_1411, cbSceneParam._m0[90u].y, _1410 * cbSceneParam._m0[90u].x));
    float _1421 = fma(_1412, cbSceneParam._m0[91u].z, fma(_1411, cbSceneParam._m0[91u].y, _1410 * cbSceneParam._m0[91u].x));
    float _1456 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1460 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1464 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1468 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1469 = _1456 / _1468;
    float _1470 = _1460 / _1468;
    float _1471 = _1464 / _1468;
    float _1618;
    float _1619;
    float _1620;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1498 = ((uint(_1471 > cbSceneParam._m0[59u].y) + uint(_1471 > cbSceneParam._m0[59u].x)) + uint(_1471 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1499 = _1498 + 43u;
        uint _1507 = _1498 + 44u;
        uint _1515 = _1498 + 45u;
        uint _1523 = _1498 + 46u;
        float _1534 = fma(_1468, cbSceneParam._m0[_1499].w, fma(_1464, cbSceneParam._m0[_1499].z, fma(_1460, cbSceneParam._m0[_1499].y, _1456 * cbSceneParam._m0[_1499].x)));
        float _1538 = fma(_1468, cbSceneParam._m0[_1507].w, fma(_1464, cbSceneParam._m0[_1507].z, fma(_1460, cbSceneParam._m0[_1507].y, _1456 * cbSceneParam._m0[_1507].x)));
        float _1546 = fma(_1468, cbSceneParam._m0[_1523].w, fma(_1464, cbSceneParam._m0[_1523].z, fma(_1460, cbSceneParam._m0[_1523].y, _1456 * cbSceneParam._m0[_1523].x)));
        float _1551 = cbSceneParam._m0[33u].z * _1546;
        float _1553 = cbSceneParam._m0[33u].w * _1546;
        float _1556 = fma(_1468, cbSceneParam._m0[_1515].w, fma(_1464, cbSceneParam._m0[_1515].z, fma(_1460, cbSceneParam._m0[_1515].y, _1456 * cbSceneParam._m0[_1515].x))) / _1546;
        float _1604 = (cbSceneParam._m0[33u].x - sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471))) * cbSceneParam._m0[33u].y;
        float _3672 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1611 = (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1551 + _1534) / _1546, (_1553 + _1538) / _1546), _1556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1553 + _1534) / _1546, (_1538 - _1551) / _1546), _1556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1534 - _1551) / _1546, (_1538 - _1553) / _1546), _1556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1534 - _1553) / _1546, (_1551 + _1538) / _1546), _1556), 0.0)).x), vec4(0.25)));
        _1618 = 1.0 - (_1611 * cbSceneParam._m0[34u].x);
        _1619 = 1.0 - (_1611 * cbSceneParam._m0[34u].y);
        _1620 = 1.0 - (_1611 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1618 = 1.0;
        _1619 = 1.0;
        _1620 = 1.0;
    }
    float _1684;
    float _1686;
    float _1688;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1672 = fma(_1468, cbSceneParam._m0[63u].w, fma(_1464, cbSceneParam._m0[63u].z, fma(_1460, cbSceneParam._m0[63u].y, _1456 * cbSceneParam._m0[63u].x)));
        float _1673 = fma(_1468, cbSceneParam._m0[60u].w, fma(_1464, cbSceneParam._m0[60u].z, fma(_1460, cbSceneParam._m0[60u].y, _1456 * cbSceneParam._m0[60u].x))) / _1672;
        float _1674 = fma(_1468, cbSceneParam._m0[61u].w, fma(_1464, cbSceneParam._m0[61u].z, fma(_1460, cbSceneParam._m0[61u].y, _1456 * cbSceneParam._m0[61u].x))) / _1672;
        float frontier_phi_41_40_ladder;
        float frontier_phi_41_40_ladder_1;
        float frontier_phi_41_40_ladder_2;
        if ((((_1673 >= cbSceneParam._m0[64u].x) && (_1674 >= cbSceneParam._m0[64u].y)) && (_1673 <= cbSceneParam._m0[64u].z)) && (_1674 <= cbSceneParam._m0[64u].w))
        {
            float _1814 = fma(_1468, cbSceneParam._m0[62u].w, fma(_1464, cbSceneParam._m0[62u].z, fma(_1460, cbSceneParam._m0[62u].y, _1456 * cbSceneParam._m0[62u].x))) / _1672;
            float _1818 = isnan(cbSceneParam._m0[41u].w) ? _1814 : (isnan(_1814) ? cbSceneParam._m0[41u].w : max(_1814, cbSceneParam._m0[41u].w));
            float _1861 = (cbSceneParam._m0[33u].x - sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471))) * cbSceneParam._m0[33u].y;
            float _3688 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
            float _1868 = (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1673, cbSceneParam._m0[33u].w + _1674), _1818), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1673, _1674 - cbSceneParam._m0[33u].z), _1818), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1673 - cbSceneParam._m0[33u].z, _1674 - cbSceneParam._m0[33u].w), _1818), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1673 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1674), _1818), 0.0)).x), vec4(0.25)));
            float _1872 = 1.0 - (_1868 * cbSceneParam._m0[34u].x);
            float _1873 = 1.0 - (_1868 * cbSceneParam._m0[34u].y);
            float _1874 = 1.0 - (_1868 * cbSceneParam._m0[34u].z);
            frontier_phi_41_40_ladder = isnan(_1873) ? _1619 : (isnan(_1619) ? _1873 : min(_1619, _1873));
            frontier_phi_41_40_ladder_1 = isnan(_1872) ? _1618 : (isnan(_1618) ? _1872 : min(_1618, _1872));
            frontier_phi_41_40_ladder_2 = isnan(_1874) ? _1620 : (isnan(_1620) ? _1874 : min(_1620, _1874));
        }
        else
        {
            frontier_phi_41_40_ladder = _1619;
            frontier_phi_41_40_ladder_1 = _1618;
            frontier_phi_41_40_ladder_2 = _1620;
        }
        _1684 = frontier_phi_41_40_ladder_1;
        _1686 = frontier_phi_41_40_ladder;
        _1688 = frontier_phi_41_40_ladder_2;
    }
    else
    {
        _1684 = _1618;
        _1686 = _1619;
        _1688 = _1620;
    }
    uvec4 _1693 = floatBitsToUint(cbInstanceData._m0[_369 + 5u]);
    uint _1695 = _1693.x * 14u;
    uint _1696 = _1695 + 13u;
    float _1703 = _395 + (-1.0);
    float _1709 = (cbLight._m0[_1696].x * _1703) + 1.0;
    float _1710 = (cbLight._m0[_1696].y * _1703) + 1.0;
    float _1711 = (cbLight._m0[_1696].z * _1703) + 1.0;
    float _1712 = (cbLight._m0[_1696].w * _1703) + 1.0;
    uint _1713 = _1695 + 5u;
    float _1719 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
    uint _1723 = _1695 + 4u;
    float _1733 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
    uint _1737 = _1695 | 1u;
    float _1748 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_227, _228, _229));
    float _1751 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_227, _228, _229));
    float _3724 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _3735 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1756 = (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * 0.3183098733425140380859375;
    float _1758 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.3183098733425140380859375;
    float _1765 = ((cbLight._m0[_1713].x * _1719) * _1758) + (((cbLight._m0[_1723].x * _1684) * _1733) * _1756);
    float _1766 = ((_1719 * cbLight._m0[_1713].y) * _1758) + (((cbLight._m0[_1723].y * _1686) * _1733) * _1756);
    float _1767 = ((_1719 * cbLight._m0[_1713].z) * _1758) + (((cbLight._m0[_1723].z * _1688) * _1733) * _1756);
    uvec4 _1771 = floatBitsToUint(cbLight._m0[_1695 + 12u]);
    bool _1773 = _1771.x == 0u;
    float _1875;
    float _1877;
    float _1879;
    if (_1773)
    {
        _1875 = _1765;
        _1877 = _1766;
        _1879 = _1767;
    }
    else
    {
        uint _1883 = _1695 + 6u;
        float _1899 = (dot(vec3(cbLight._m0[_1695 + 2u].xyz), vec3(_227, _228, _229)) * 0.5) + 0.5;
        float _1900 = _1899 * _1899;
        float _3746 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1902 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
        _1875 = (((cbLight._m0[_1883].x * 0.3183098733425140380859375) * _1901) * _1902) + _1765;
        _1877 = (((cbLight._m0[_1883].y * 0.3183098733425140380859375) * _1901) * _1902) + _1766;
        _1879 = (((cbLight._m0[_1883].z * 0.3183098733425140380859375) * _1901) * _1902) + _1767;
    }
    bool _1882 = _1771.y == 0u;
    float _1937;
    float _1939;
    float _1941;
    if (_1882)
    {
        _1937 = _1875;
        _1939 = _1877;
        _1941 = _1879;
    }
    else
    {
        uint _2045 = _1695 + 7u;
        float _2061 = (dot(vec3(cbLight._m0[_1695 + 3u].xyz), vec3(_227, _228, _229)) * 0.5) + 0.5;
        float _2062 = _2061 * _2061;
        float _3762 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2063 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _2064 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
        _1937 = (((cbLight._m0[_2045].x * 0.3183098733425140380859375) * _2063) * _2064) + _1875;
        _1939 = (((cbLight._m0[_2045].y * 0.3183098733425140380859375) * _2063) * _2064) + _1877;
        _1941 = (((cbLight._m0[_2045].z * 0.3183098733425140380859375) * _2063) * _2064) + _1879;
    }
    uint _1943 = _1695 + 8u;
    float _1949 = cbLight._m0[_1695].x + _311;
    float _1950 = cbLight._m0[_1695].y + _312;
    float _1951 = cbLight._m0[_1695].z + _313;
    float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
    float _1959 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_1695].xyz));
    float _3778 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _1963 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1964 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_1949 * _1955, _1950 * _1955, _1951 * _1955));
    float _3800 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1975 = (exp2(log2(1.0 - (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1981 = (0.5 / ((_1962 + 9.9999999392252902907785028219223e-09) + _1963)) * _1962;
    float _3811 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1983 = (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * 0.31831014156341552734375;
    uint _1997 = _1695 + 9u;
    float _2003 = cbLight._m0[_1737].x + _311;
    float _2004 = cbLight._m0[_1737].y + _312;
    float _2005 = cbLight._m0[_1737].z + _313;
    float _2009 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
    float _2013 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_1737].xyz));
    float _3822 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _2017 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_2003 * _2009, _2004 * _2009, _2005 * _2009));
    float _3833 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2026 = (exp2(log2(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2030 = (0.5 / ((_2016 + 9.9999999392252902907785028219223e-09) + _1963)) * _2016;
    float _3844 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2032 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * 0.31831014156341552734375;
    float _2042 = (((_2026 * cbLight._m0[_1997].x) * _2032) * _1719) + ((((cbLight._m0[_1943].x * _1684) * _1975) * _1983) * _1733);
    float _2043 = (((_2026 * cbLight._m0[_1997].y) * _2032) * _1719) + ((((cbLight._m0[_1943].y * _1686) * _1975) * _1983) * _1733);
    float _2044 = (((_2026 * cbLight._m0[_1997].z) * _2032) * _1719) + ((((cbLight._m0[_1943].z * _1688) * _1975) * _1983) * _1733);
    float _2100;
    float _2102;
    float _2104;
    if (_1773)
    {
        _2100 = _2042;
        _2102 = _2043;
        _2104 = _2044;
    }
    else
    {
        uint _2106 = _1695 + 10u;
        uint _2112 = _1695 + 2u;
        float _2118 = cbLight._m0[_2112].x + _311;
        float _2119 = cbLight._m0[_2112].y + _312;
        float _2120 = cbLight._m0[_2112].z + _313;
        float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
        float _2128 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_2112].xyz));
        float _3855 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _2132 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2118 * _2124, _2119 * _2124, _2120 * _2124));
        float _3866 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2141 = (exp2(log2(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2145 = (0.5 / ((_2131 + 9.9999999392252902907785028219223e-09) + _1963)) * _2131;
        float _3877 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2147 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.31831014156341552734375;
        float _2148 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
        _2100 = (((_2141 * cbLight._m0[_2106].x) * _2147) * _2148) + _2042;
        _2102 = (((_2141 * cbLight._m0[_2106].y) * _2147) * _2148) + _2043;
        _2104 = (((_2141 * cbLight._m0[_2106].z) * _2147) * _2148) + _2044;
    }
    float _2179;
    float _2181;
    float _2183;
    if (_1882)
    {
        _2179 = _2100;
        _2181 = _2102;
        _2183 = _2104;
    }
    else
    {
        uint _2190 = _1695 + 11u;
        uint _2196 = _1695 + 3u;
        float _2202 = cbLight._m0[_2196].x + _311;
        float _2203 = cbLight._m0[_2196].y + _312;
        float _2204 = cbLight._m0[_2196].z + _313;
        float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
        float _2212 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_2196].xyz));
        float _3893 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _2216 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2202 * _2208, _2203 * _2208, _2204 * _2208));
        float _3904 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2225 = (exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2229 = (0.5 / ((_2215 + 9.9999999392252902907785028219223e-09) + _1963)) * _2215;
        float _3915 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2231 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 0.31831014156341552734375;
        float _2232 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
        _2179 = (((_2225 * cbLight._m0[_2190].x) * _2231) * _2232) + _2100;
        _2181 = (((_2225 * cbLight._m0[_2190].y) * _2231) * _2232) + _2102;
        _2183 = (((_2225 * cbLight._m0[_2190].z) * _2231) * _2232) + _2104;
    }
    float _2297;
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    if (_1693.y == 0u)
    {
        uvec4 _2253 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2254 = _2253.x;
        uint _2265 = uint((float(_2253.y) * floor(float(uint(cbSceneParam._m0[85u].y * _330) / _2254))) + floor(float(uint(cbSceneParam._m0[85u].x * _329) / _2254)));
        float _2275 = (log2(_1471 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2276 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        uint _2279 = uint(isnan(14.0) ? _2276 : (isnan(_2276) ? 14.0 : min(_2276, 14.0)));
        uvec4 _2284 = texelFetch(g_lightClusterGridBuffer, int(((_2279 << 2u) + (_2265 << 6u)) >> 2u));
        uint _2285 = _2284.x;
        uint _2286 = _2253.z;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        if (((((1u << ((_2286 >> 4u) & 15u)) + 4294967295u) & _2285) == 0u) || ((_2286 & 240u) == 0u))
        {
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
        }
        else
        {
            float _2365;
            float _2367;
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            uint _2521 = 0u;
            uint _2530;
            bool _2531;
            for (;;)
            {
                _2530 = texelFetch(g_lightClassification, int((((_2279 << 5u) + (_2265 << 9u)) + (_2521 << 2u)) >> 2u)).x;
                _2531 = _2530 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2531)
                {
                    frontier_phi_75_pred = _2520;
                    frontier_phi_75_pred_1 = _2519;
                    frontier_phi_75_pred_2 = _2518;
                    frontier_phi_75_pred_3 = _2517;
                    frontier_phi_75_pred_4 = _2516;
                    frontier_phi_75_pred_5 = _2515;
                }
                else
                {
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    uint _2666;
                    _2660 = _2515;
                    _2661 = _2516;
                    _2662 = _2517;
                    _2663 = _2518;
                    _2664 = _2519;
                    _2665 = _2520;
                    _2666 = _2530;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    for (;;)
                    {
                        uint _2670 = uint(findLSB(_2666)) + (_2521 << 5u);
                        uint _2667 = (_2666 + 4294967295u) & _2666;
                        uint _2672 = _2670 * 48u;
                        vec4 _2686 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2672)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 3u)).x));
                        uint _2692 = (_2670 * 48u) + 4u;
                        vec4 _2705 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2692)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 3u)).x));
                        uint _2711 = (_2670 * 48u) + 8u;
                        vec3 _2722 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2711)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 2u)).x));
                        float _2726 = _2686.x - _1469;
                        float _2727 = _2686.y - _1470;
                        float _2728 = _2686.z - _1471;
                        float _2729 = dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728));
                        float _2732 = inversesqrt(_2729);
                        float _2741 = 1.0 - (_2729 * _2686.w);
                        float _3941 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2742 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                        float _2743 = sqrt(_2729) * _2705.w;
                        float _2746 = 1.39999997615814208984375 / (_2743 + 1.39999997615814208984375);
                        float _2747 = _2746 * _2746;
                        float _2750 = ((1.0 - _2747) * dot(vec3(_350, _353, _356), vec3(_2732 * _2726, _2732 * _2727, _2732 * _2728))) + _2747;
                        float _2753 = _2743 * _2743;
                        float _2757 = ((isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0))) * _2742) / ((_2753 * 0.699999988079071044921875) + 1.0);
                        float _2761 = (-0.0) - _1469;
                        float _2762 = (-0.0) - _1470;
                        float _2763 = (-0.0) - _1471;
                        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
                        float _2771 = dot(vec3(_350, _353, _356), vec3(_2767 * _2761, _2767 * _2762, _2767 * _2763));
                        float _3957 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _3968 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2775 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
                        float _2779 = (0.5 / (((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) + 9.9999999392252902907785028219223e-09) + _2775)) * _2775;
                        float _3979 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2788 = (((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * 3.1415927410125732421875) / ((_2753 * 2.1991131305694580078125) + 3.141590118408203125)) * _2742;
                        _2590 = (_2757 * _2705.x) + _2663;
                        _2591 = (_2757 * _2705.y) + _2664;
                        _2592 = (_2757 * _2705.z) + _2665;
                        _2587 = (_2788 * _2722.x) + _2660;
                        _2588 = (_2788 * _2722.y) + _2661;
                        _2589 = (_2788 * _2722.z) + _2662;
                        if (_2667 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2660 = _2587;
                            _2661 = _2588;
                            _2662 = _2589;
                            _2663 = _2590;
                            _2664 = _2591;
                            _2665 = _2592;
                            _2666 = _2667;
                        }
                    }
                    frontier_phi_75_pred = _2592;
                    frontier_phi_75_pred_1 = _2591;
                    frontier_phi_75_pred_2 = _2590;
                    frontier_phi_75_pred_3 = _2589;
                    frontier_phi_75_pred_4 = _2588;
                    frontier_phi_75_pred_5 = _2587;
                }
                _2375 = frontier_phi_75_pred;
                _2373 = frontier_phi_75_pred_1;
                _2371 = frontier_phi_75_pred_2;
                _2369 = frontier_phi_75_pred_3;
                _2367 = frontier_phi_75_pred_4;
                _2365 = frontier_phi_75_pred_5;
                uint _2522 = _2521 + 1u;
                if (_2522 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2515 = _2365;
                    _2516 = _2367;
                    _2517 = _2369;
                    _2518 = _2371;
                    _2519 = _2373;
                    _2520 = _2375;
                    _2521 = _2522;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
        }
        uvec4 _2378 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2379 = _2378.z;
        uint _2381 = (_2379 >> 8u) & 15u;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        if (((4294967295u << _2381) & _2285) == 0u)
        {
            _2486 = _2364;
            _2488 = _2366;
            _2490 = _2368;
            _2492 = _2370;
            _2494 = _2372;
            _2496 = _2374;
        }
        else
        {
            float _2511 = inversesqrt(dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471)));
            float frontier_phi_67_68_ladder;
            float frontier_phi_67_68_ladder_1;
            float frontier_phi_67_68_ladder_2;
            float frontier_phi_67_68_ladder_3;
            float frontier_phi_67_68_ladder_4;
            float frontier_phi_67_68_ladder_5;
            if (_2381 < ((_2379 >> 12u) & 15u))
            {
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2497;
                float _2643 = _2364;
                float _2644 = _2366;
                float _2645 = _2368;
                float _2646 = _2370;
                float _2647 = _2372;
                float _2648 = _2374;
                uint _2649 = _2381;
                uint _2658;
                bool _2659;
                for (;;)
                {
                    _2658 = texelFetch(g_lightClassification, int((((_2279 << 5u) + (_2265 << 9u)) + (_2649 << 2u)) >> 2u)).x;
                    _2659 = _2658 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_2659)
                    {
                        frontier_phi_86_pred = _2647;
                        frontier_phi_86_pred_1 = _2646;
                        frontier_phi_86_pred_2 = _2645;
                        frontier_phi_86_pred_3 = _2644;
                        frontier_phi_86_pred_4 = _2643;
                        frontier_phi_86_pred_5 = _2648;
                    }
                    else
                    {
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _2815 = _2643;
                        float _2816 = _2644;
                        float _2817 = _2645;
                        float _2818 = _2646;
                        float _2819 = _2647;
                        float _2820 = _2648;
                        uint _2821 = _2658;
                        uint _2822;
                        vec4 _2847;
                        float _2848;
                        vec4 _2863;
                        vec3 _2875;
                        vec4 _2891;
                        vec4 _2907;
                        float _2954;
                        bool _2955;
                        for (;;)
                        {
                            uint _2832 = ((_2649 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2821));
                            _2822 = (_2821 + 4294967295u) & _2821;
                            uint _2834 = _2832 * 40u;
                            _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            _2848 = _2847.w;
                            uint _2850 = (_2832 * 40u) + 4u;
                            _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            uint _2865 = (_2832 * 40u) + 8u;
                            _2875 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x));
                            uint _2878 = (_2832 * 40u) + 16u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2894 = (_2832 * 40u) + 20u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2910 = (_2832 * 40u) + 24u;
                            vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2929 = (_2832 * 40u) + 28u;
                            vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            _2954 = fma(_1471, _2942.z, fma(_1470, _2942.y, _2942.x * _1469)) + _2942.w;
                            _2955 = !((fma(_1471, _2923.z, fma(_1470, _2923.y, _2923.x * _1469)) + _2923.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_2955)
                            {
                                float _2982 = _2847.x - _1469;
                                float _2983 = _2847.y - _1470;
                                float _2984 = _2847.z - _1471;
                                float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                                float _2988 = inversesqrt(_2985);
                                float _2989 = _2988 * _2982;
                                float _2990 = _2988 * _2983;
                                float _2991 = _2988 * _2984;
                                float _2995 = 1.0 - (_2985 / (_2848 * _2848));
                                float _3990 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
                                float _3000 = sqrt(_2985) * _2863.w;
                                float _3002 = 1.39999997615814208984375 / (_3000 + 1.39999997615814208984375);
                                float _3003 = _3002 * _3002;
                                float _3004 = 1.0 - _3003;
                                float _3006 = (_3004 * dot(vec3(_2989, _2990, _2991), vec3(_350, _353, _356))) + _3003;
                                float _3009 = _3000 * _3000;
                                float _3013 = (fma(_1471, _2891.z, fma(_1470, _2891.y, _2891.x * _1469)) + _2891.w) / _2954;
                                float _3014 = (fma(_1471, _2907.z, fma(_1470, _2907.y, _2907.x * _1469)) + _2907.w) / _2954;
                                float _3018 = 1.0 - dot(vec2(_3013, _3014), vec2(_3013, _3014));
                                float _4006 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3019 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                                float _3020 = _3019 * (((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2996) / ((_3009 * 0.699999988079071044921875) + 1.0));
                                float _3030 = dot(vec3(_350, _353, _356), vec3((-0.0) - (_1469 * _2511), (-0.0) - (_1470 * _2511), (-0.0) - (_1471 * _2511)));
                                float _4017 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3038 = (_3004 * dot(vec3(_350, _353, _356), vec3(_2989, _2990, _2991))) + _3003;
                                float _4028 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                                float _3043 = (0.5 / (((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) + 9.9999999392252902907785028219223e-09) + _3039)) * _3039;
                                float _4039 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3050 = (_3019 * _2996) * (((isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * 3.1415927410125732421875) / ((_3009 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_92_pred = _3020 * _2863.y;
                                frontier_phi_92_pred_1 = _3020 * _2863.x;
                                frontier_phi_92_pred_2 = _3050 * _2875.z;
                                frontier_phi_92_pred_3 = _3050 * _2875.y;
                                frontier_phi_92_pred_4 = _3050 * _2875.x;
                                frontier_phi_92_pred_5 = _3020 * _2863.z;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3058 = frontier_phi_92_pred;
                            _3057 = frontier_phi_92_pred_1;
                            _3056 = frontier_phi_92_pred_2;
                            _3055 = frontier_phi_92_pred_3;
                            _3054 = frontier_phi_92_pred_4;
                            _3059 = frontier_phi_92_pred_5;
                            _2805 = _3057 + _2818;
                            _2806 = _3058 + _2819;
                            _2807 = _3059 + _2820;
                            _2802 = _3054 + _2815;
                            _2803 = _3055 + _2816;
                            _2804 = _3056 + _2817;
                            if (_2822 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2822;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _2806;
                        frontier_phi_86_pred_1 = _2805;
                        frontier_phi_86_pred_2 = _2804;
                        frontier_phi_86_pred_3 = _2803;
                        frontier_phi_86_pred_4 = _2802;
                        frontier_phi_86_pred_5 = _2807;
                    }
                    _2495 = frontier_phi_86_pred;
                    _2493 = frontier_phi_86_pred_1;
                    _2491 = frontier_phi_86_pred_2;
                    _2489 = frontier_phi_86_pred_3;
                    _2487 = frontier_phi_86_pred_4;
                    _2497 = frontier_phi_86_pred_5;
                    uint _2650 = _2649 + 1u;
                    if (_2650 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2643 = _2487;
                        _2644 = _2489;
                        _2645 = _2491;
                        _2646 = _2493;
                        _2647 = _2495;
                        _2648 = _2497;
                        _2649 = _2650;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_67_68_ladder = _2497;
                frontier_phi_67_68_ladder_1 = _2493;
                frontier_phi_67_68_ladder_2 = _2495;
                frontier_phi_67_68_ladder_3 = _2489;
                frontier_phi_67_68_ladder_4 = _2487;
                frontier_phi_67_68_ladder_5 = _2491;
            }
            else
            {
                frontier_phi_67_68_ladder = _2374;
                frontier_phi_67_68_ladder_1 = _2370;
                frontier_phi_67_68_ladder_2 = _2372;
                frontier_phi_67_68_ladder_3 = _2366;
                frontier_phi_67_68_ladder_4 = _2364;
                frontier_phi_67_68_ladder_5 = _2368;
            }
            _2486 = frontier_phi_67_68_ladder_4;
            _2488 = frontier_phi_67_68_ladder_3;
            _2490 = frontier_phi_67_68_ladder_5;
            _2492 = frontier_phi_67_68_ladder_1;
            _2494 = frontier_phi_67_68_ladder_2;
            _2496 = frontier_phi_67_68_ladder;
        }
        float _2501 = isnan(1.0) ? _395 : (isnan(_395) ? 1.0 : min(_395, 1.0));
        _2297 = (_2501 * _2492) + _1937;
        _2299 = (_2501 * _2494) + _1939;
        _2301 = (_2501 * _2496) + _1941;
        _2303 = ((_2486 * 0.039999999105930328369140625) * _2501) + _2179;
        _2305 = ((_2488 * 0.039999999105930328369140625) * _2501) + _2181;
        _2307 = ((_2490 * 0.039999999105930328369140625) * _2501) + _2183;
    }
    else
    {
        _2297 = _1937;
        _2299 = _1939;
        _2301 = _1941;
        _2303 = _2179;
        _2305 = _2181;
        _2307 = _2183;
    }
    float _4055 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _4066 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _4077 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _2324 = ((isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2297 + ((isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0))) * _395))) + ((_2303 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _1201)) * cbPerFrame._m0[3u].x);
    float _2325 = ((isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_2299 + ((isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0))) * _395))) + ((_2305 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _1201)) * cbPerFrame._m0[3u].x);
    float _2326 = ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_2301 + ((isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0))) * _395))) + ((_2307 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _1201)) * cbPerFrame._m0[3u].x);
    uint _2327 = _369 + 6u;
    float _2335 = _329 / cbSceneParam._m0[86u].x;
    float _2336 = _330 / cbSceneParam._m0[86u].y;
    vec4 _2350 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, (log2((isnan(cbSceneParam._m0[77u].w) ? _253 : (isnan(_253) ? cbSceneParam._m0[77u].w : min(_253, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2352 = _2350.x;
    float _2353 = _2350.y;
    float _2354 = _2350.z;
    float _2355 = _2350.w;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    if (_253 > cbSceneParam._m0[78u].w)
    {
        float _2389 = isnan(_253) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _253 : min(cbSceneParam._m0[80u].w, _253));
        float _2390 = _2389 / _253;
        float _2401 = _2390 * _304;
        float _2402 = _305 * _2390;
        float _2403 = (-0.0) - _2402;
        float _2404 = _2390 * _306;
        float _2406 = (cbSceneParam._m0[77u].w * _2403) / _2389;
        float _2407 = _2406 + cbSceneParam._m0[79u].w;
        float _2408 = cbSceneParam._m0[79u].w - _2402;
        float _2414 = sqrt(((_2401 * _2401) + (_2402 * _2402)) + (_2404 * _2404));
        float _2417 = (1.0 - (cbSceneParam._m0[77u].w / _2389)) * _2414;
        float _2422 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2424 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2600;
        if (abs((_2403 - _2406) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2600 = ((((_2407 > 0.0) ? exp2(_2422 * _2407) : (2.0 - exp2(_2424 * _2407))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2417;
        }
        else
        {
            float _2544 = 1.0 / cbSceneParam._m0[80u].x;
            float _2545 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : max(_2407, _2408));
            float _2546 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : min(_2407, _2408));
            float _2555 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : min(_2545, 0.0));
            float _2556 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : min(_2546, 0.0));
            _2600 = ((abs(_2414 / _2403) * cbSceneParam._m0[80u].y) * ((((_2555 - _2556) * 2.0) - ((exp2(_2422 * (isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0)))) - exp2(_2422 * (isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0))))) * _2544)) - ((exp2(_2424 * _2555) - exp2(_2424 * _2556)) * _2544))) + (_2417 * cbSceneParam._m0[80u].z);
        }
        vec4 _2602 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, 1.0), 0.0);
        float _2611 = exp2((_2600 * (-1.44269502162933349609375)) * (1.0 - _2602.w));
        float _2612 = log2(_2611);
        float _2628 = log2(_2355);
        _2426 = (exp2(_2628 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2612 * cbSceneParam._m0[78u].x)) * _2602.x) / cbSceneParam._m0[78u].x)) + _2352;
        _2428 = (exp2(_2628 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2612 * cbSceneParam._m0[78u].y)) * _2602.y) / cbSceneParam._m0[78u].y)) + _2353;
        _2430 = (exp2(_2628 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2612 * cbSceneParam._m0[78u].z)) * _2602.z) / cbSceneParam._m0[78u].z)) + _2354;
        _2432 = _2611 * _2355;
    }
    else
    {
        _2426 = _2352;
        _2428 = _2353;
        _2430 = _2354;
        _2432 = _2355;
    }
    bool _2638;
    vec4 _2442;
    vec4 _2465;
    float _2467;
    float _2471;
    float _2472;
    float _2473;
    float _2474;
    bool _2485;
    for (;;)
    {
        _2442 = cbMatDynParam._m0[0u];
        float _2444 = roundEven(_2442.y);
        bool _2445 = _2444 == 3.0;
        float _2447 = log2(_2432);
        float _2454 = exp2(_2447 * cbSceneParam._m0[78u].x) * _2324;
        float _2455 = exp2(_2447 * cbSceneParam._m0[78u].y) * _2325;
        float _2456 = exp2(_2447 * cbSceneParam._m0[78u].z) * _2326;
        float _2463 = _317 + (-0.5);
        _2465 = cbMtdParam._m0[1u];
        _2467 = _2465.y * _2463;
        float _2470 = (_2444 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2471 = _2470 * (_2445 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2426)));
        _2472 = _2470 * (_2445 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2428)));
        _2473 = _2470 * (_2445 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2430)));
        _2474 = _2463 * 0.999000012874603271484375;
        _2485 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2485)
        {
            if ((cbInstanceData._m0[_369 + 7u].x + _2474) < 0.5)
            {
                _2638 = true;
                break;
            }
        }
        uint _2579 = _371 + uint(_2442.w);
        if ((cbInstanceData._m0[_2579].w < 1.0) && ((cbInstanceData._m0[_2579].w + _2474) < 0.5))
        {
            _2638 = true;
            break;
        }
        if ((_2467 + 1.0) < _2465.x)
        {
            _2638 = true;
            break;
        }
        _2638 = false;
        break;
    }
    float _2793;
    if (_2638)
    {
        discard_state = true;
        _2793 = 0.0;
    }
    else
    {
        _2793 = cbInstanceData._m0[_2327].w;
    }
    SV_Target.x = _2471;
    SV_Target.y = _2472;
    SV_Target.z = _2473;
    SV_Target.w = _2793;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2327].w;
    discard_exit();
}


