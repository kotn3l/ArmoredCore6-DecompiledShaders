#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1393;
float _4056;
float _4057;
float _4058;
float _4059;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    vec4 _270 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _284 = exp2(log2(_270.w * cbMtdParam._m0[22u].y) * cbMtdParam._m0[20u].y);
    float _285 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _286 = isnan(1.0) ? _285 : (isnan(_285) ? 1.0 : min(_285, 1.0));
    vec4 _300 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _304 = _300.z;
    float _305 = _300.w;
    float _313 = exp2(log2(_304 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _314 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _315 = isnan(1.0) ? _314 : (isnan(_314) ? 1.0 : min(_314, 1.0));
    vec4 _328 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _351 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _353 = _351.x;
    float _354 = _351.y;
    float _378 = ((cbMtdParam._m0[19u].w * _351.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _353)) + _353;
    bool _414 = _378 >= 0.25;
    bool _419 = _378 >= 0.3499999940395355224609375;
    bool _424 = _378 >= 0.5;
    bool _429 = _378 >= 0.64999997615814208984375;
    bool _434 = _378 >= 0.75;
    vec4 _462 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _473 = cbMtdParam._m0[9u].x * _462.x;
    float _474 = cbMtdParam._m0[9u].y * _462.y;
    float _475 = cbMtdParam._m0[9u].z * _462.z;
    float _482 = (((((((_434 ? cbMtdParam._m0[13u].x : (_429 ? cbMtdParam._m0[18u].x : (_424 ? cbMtdParam._m0[17u].x : (_419 ? cbMtdParam._m0[16u].x : (_414 ? cbMtdParam._m0[15u].x : cbMtdParam._m0[14u].x))))) - cbMtdParam._m0[10u].x) * _354) + cbMtdParam._m0[10u].x) * _328.x) - _473) * _315) + _473;
    float _483 = (((((((_434 ? cbMtdParam._m0[13u].y : (_429 ? cbMtdParam._m0[18u].y : (_424 ? cbMtdParam._m0[17u].y : (_419 ? cbMtdParam._m0[16u].y : (_414 ? cbMtdParam._m0[15u].y : cbMtdParam._m0[14u].y))))) - cbMtdParam._m0[10u].y) * _354) + cbMtdParam._m0[10u].y) * _328.y) - _474) * _315) + _474;
    float _484 = (((((((_434 ? cbMtdParam._m0[13u].z : (_429 ? cbMtdParam._m0[18u].z : (_424 ? cbMtdParam._m0[17u].z : (_419 ? cbMtdParam._m0[16u].z : (_414 ? cbMtdParam._m0[15u].z : cbMtdParam._m0[14u].z))))) - cbMtdParam._m0[10u].z) * _354) + cbMtdParam._m0[10u].z) * _328.z) - _475) * _315) + _475;
    float _491 = exp2(log2(_305) * cbMtdParam._m0[21u].y);
    vec4 _504 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _524 = (((cbMtdParam._m0[11u].x * _504.x) - _482) * _491) + _482;
    float _525 = (((cbMtdParam._m0[11u].y * _504.y) - _483) * _491) + _483;
    float _526 = (((cbMtdParam._m0[11u].z * _504.z) - _484) * _491) + _484;
    vec4 _538 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _562 = (_270.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _538.x) - _524) * _286) + _524);
    float _564 = (_270.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _538.y) - _525) * _286) + _525);
    float _566 = (_270.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _538.z) - _526) * _286) + _526);
    float _571 = exp2(log2(1.0 - _305) * 0.00999999977648258209228515625);
    float _589 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _571) + cbMtdParam._m0[21u].z;
    float _608 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _589) + cbMtdParam._m0[20u].z) * _491) + _589;
    float _628 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _608) + cbMtdParam._m0[22u].z) * _286) + _608;
    vec4 _640 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _658 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _660 = _658.x;
    float _661 = _658.y;
    float _664 = cbMtdParam._m0[19u].x + _658.z;
    float _667 = (((cbMtdParam._m0[20u].x + _640.z) - _664) * _571) + _664;
    vec4 _679 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _691 = (_304 * 2.0) * ((((_679.z - _667) + cbMtdParam._m0[22u].x) * _491) + _667);
    vec4 _703 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _712 = (((_703.z - _691) + cbMtdParam._m0[21u].x) * _286) + _691;
    float _723 = ((_640.x - _660) * _571) + _660;
    float _724 = ((_640.y - _661) * _571) + _661;
    float _729 = ((_679.x - _723) * _491) + _723;
    float _730 = ((_679.y - _724) * _491) + _724;
    float _739 = ((((_703.x - _729) * _286) + _729) * 2.0) + (-1.0);
    float _740 = ((((_703.y - _730) * _286) + _730) * 2.0) + (-1.0);
    float _741 = dot(vec2(_739, _740), vec2(_739, _740));
    float _4088 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _746 = sqrt(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))));
    float _749 = _739 + (cbMtdParam._m0[21u].w * ((_300.x * 2.0) + (-1.0)));
    float _750 = _740 + (cbMtdParam._m0[21u].w * ((_300.y * 2.0) + (-1.0)));
    float _753 = fma(_746, _249, fma(_750, _241 * TANGENT.x, (_227 * _219) * _749));
    float _756 = fma(_746, _250, fma(_750, _241 * TANGENT.y, (_227 * _220) * _749));
    float _759 = fma(_746, _251, fma(_750, _241 * TANGENT.z, (_227 * _221) * _749));
    float _763 = inversesqrt(dot(vec3(_753, _756, _759), vec3(_753, _756, _759)));
    float _764 = _763 * _753;
    float _765 = _763 * _756;
    float _766 = _763 * _759;
    float _4099 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _767 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4121 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4132 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4143 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _771 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _787 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _837 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _827);
    float _838 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _827);
    float _839 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _827);
    float _843 = inversesqrt(dot(vec3(_837, _838, _839), vec3(_837, _838, _839)));
    float _844 = _837 * _843;
    float _845 = _838 * _843;
    float _846 = _839 * _843;
    vec4 _851 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _853 = _851.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1074 = sqrt(((_837 * _837) + (_838 * _838)) + (_839 * _839));
        float _1080 = (cbMatDynParam._m0[5u].x * _1074) + cbMatDynParam._m0[5u].y;
        float _4154 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1085 = (cbMatDynParam._m0[5u].z * _1074) + cbMatDynParam._m0[5u].w;
        float _4165 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) - _1081)) + _1081) < ((_853 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _864 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _865 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _867 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _869 = _867.w;
    float _887 = fma(_766, cbSceneParam._m0[5u].z, fma(_765, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _764));
    float _890 = fma(_766, cbSceneParam._m0[6u].z, fma(_765, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _764));
    float _893 = fma(_766, cbSceneParam._m0[7u].z, fma(_765, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _764));
    vec4 _895 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _906 = (((_895.y - _767) + (_895.w * _767)) * cbMtdParam._m0[3u].x) + _767;
    uint _919 = uint(roundEven(NORMAL.w)) * 13u;
    uint _920 = _919 + 9u;
    uint _921 = _920 + uint(cbMatDynParam._m0[0u].w);
    float _927 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * cbInstanceData._m0[_921].x;
    float _928 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * cbInstanceData._m0[_921].y;
    float _929 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * cbInstanceData._m0[_921].z;
    float _4176 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _4198 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    vec4 _933 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _938 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _949 = (((_938.x - _771) + (_938.w * _771)) * cbMtdParam._m0[3u].x) + _771;
    float _962 = (cbMtdParam._m0[3u].x * (((_930 * _869) - _930) + _933.x)) + _930;
    float _963 = (cbMtdParam._m0[3u].x * (((_931 * _869) - _931) + _933.y)) + _931;
    float _964 = (cbMtdParam._m0[3u].x * (((_932 * _869) - _932) + _933.z)) + _932;
    float _965 = 1.0 - _949;
    float _966 = _965 * _962;
    float _967 = _965 * _963;
    float _968 = _965 * _964;
    float _973 = (_962 + (-0.039999999105930328369140625)) * _949;
    float _974 = (_963 + (-0.039999999105930328369140625)) * _949;
    float _975 = (_964 + (-0.039999999105930328369140625)) * _949;
    float _976 = _973 + 0.039999999105930328369140625;
    float _978 = _974 + 0.039999999105930328369140625;
    float _979 = _975 + 0.039999999105930328369140625;
    vec4 _988 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _864, cbSceneParam._m0[86u].y * _865));
    float _991 = _988.x * TEXCOORD_4;
    float _992 = dot(vec3(_764, _765, _766), vec3(_844, _845, _846));
    float _995 = _992 * 2.0;
    float _999 = (_995 * _764) - _844;
    float _1000 = (_995 * _765) - _845;
    float _1001 = (_995 * _766) - _846;
    float _1005 = abs(dot(vec3(_844, _845, _846), vec3(_764, _765, _766)));
    float _4209 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1007 = sqrt(_906);
    float _1020 = exp2((_1007 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1007 * 3.0));
    float _1026 = (1.0 - _1020) * ((_1007 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1027 = _1020 * _1007;
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1392;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1118 = fma(_1063, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1055));
        float _1122 = fma(_1063, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1055));
        float _1126 = fma(_1063, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1055));
        float _1150 = _1055 + _764;
        float _1151 = _1059 + _765;
        float _1152 = _1063 + _766;
        float _1162 = fma(_1152, cbModelParam._m0[26u].z, fma(_1151, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1150)) - _1118;
        float _1163 = fma(_1152, cbModelParam._m0[27u].z, fma(_1151, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1150)) - _1122;
        float _1164 = fma(_1152, cbModelParam._m0[28u].z, fma(_1151, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1150)) - _1126;
        float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
        float _1181 = ((_1168 * _1162) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1118 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1168 * _1163) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1122 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1168 * _1164) / cbModelParam._m0[34u].z) + ((((((_1126 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        float _1220 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1186.x + (-0.5));
        float _1222 = _1220 * (_1186.y + (-0.5));
        float _1223 = _1220 * (_1186.z + (-0.5));
        float _1230 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1193.x + (-0.5));
        float _1232 = _1230 * (_1193.y + (-0.5));
        float _1233 = _1230 * (_1193.z + (-0.5));
        float _1240 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1200.x + (-0.5));
        float _1242 = _1240 * (_1200.y + (-0.5));
        float _1243 = _1240 * (_1200.z + (-0.5));
        float _1250 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1207.x + (-0.5));
        float _1252 = _1250 * (_1207.y + (-0.5));
        float _1253 = _1250 * (_1207.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1274 = (dot(vec3(_764, _765, _766), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1284 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4257 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1286 + 1.0))) + _1291) * _1254;
        float _1301 = _1222 * 0.5;
        float _1302 = _1232 * 0.5;
        float _1303 = _1242 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_764, _765, _766), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4290 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1328 + 1.0))) + _1333) * _1255;
        float _1343 = _1223 * 0.5;
        float _1344 = _1233 * 0.5;
        float _1345 = _1243 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_764, _765, _766), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4323 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1370 + 1.0))) + _1375) * _1256;
        _1392 = _1223;
        _1394 = _1222;
        _1395 = _1221;
        _1396 = _1233;
        _1397 = _1232;
        _1398 = _1231;
        _1399 = _1243;
        _1400 = _1242;
        _1401 = _1241;
        _1402 = _1256;
        _1403 = _1255;
        _1404 = _1254;
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1393;
        _1394 = _1393;
        _1395 = _1393;
        _1396 = _1393;
        _1397 = _1393;
        _1398 = _1393;
        _1399 = _1393;
        _1400 = _1393;
        _1401 = _1393;
        _1402 = _1393;
        _1403 = _1393;
        _1404 = _1393;
        _1405 = 0.0;
        _1406 = 0.0;
        _1407 = 0.0;
    }
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1436 = fma(_1063, cbModelParam._m0[30u].z, fma(_1059, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1055));
        float _1440 = fma(_1063, cbModelParam._m0[31u].z, fma(_1059, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1055));
        float _1444 = fma(_1063, cbModelParam._m0[32u].z, fma(_1059, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1055));
        float _1467 = _1055 + _764;
        float _1468 = _1059 + _765;
        float _1469 = _1063 + _766;
        float _1479 = fma(_1469, cbModelParam._m0[30u].z, fma(_1468, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1467)) - _1436;
        float _1480 = fma(_1469, cbModelParam._m0[31u].z, fma(_1468, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1467)) - _1440;
        float _1481 = fma(_1469, cbModelParam._m0[32u].z, fma(_1468, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1467)) - _1444;
        float _1485 = inversesqrt(dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481)));
        float _1498 = ((_1485 * _1479) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1436 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1499 = ((_1485 * _1480) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1440 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1500 = ((_1485 * _1481) / cbModelParam._m0[35u].z) + ((((((_1444 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        float _1535 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1502.x + (-0.5));
        float _1537 = _1535 * (_1502.y + (-0.5));
        float _1538 = _1535 * (_1502.z + (-0.5));
        float _1545 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1509.x + (-0.5));
        float _1547 = _1545 * (_1509.y + (-0.5));
        float _1548 = _1545 * (_1509.z + (-0.5));
        float _1555 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1516.x + (-0.5));
        float _1557 = _1555 * (_1516.y + (-0.5));
        float _1558 = _1555 * (_1516.z + (-0.5));
        float _1565 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1523.x + (-0.5));
        float _1567 = _1565 * (_1523.y + (-0.5));
        float _1568 = _1565 * (_1523.z + (-0.5));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = _1536 * 0.5;
        float _1573 = _1546 * 0.5;
        float _1574 = _1556 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_764, _765, _766), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4386 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1599 + 1.0))) + _1604) * _1569;
        float _1614 = _1537 * 0.5;
        float _1615 = _1547 * 0.5;
        float _1616 = _1557 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_764, _765, _766), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4419 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1641 + 1.0))) + _1646) * _1570;
        float _1656 = _1538 * 0.5;
        float _1657 = _1548 * 0.5;
        float _1658 = _1558 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_764, _765, _766), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4452 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1683 + 1.0))) + _1688) * _1571;
        _1705 = _1538;
        _1706 = _1537;
        _1707 = _1536;
        _1708 = _1548;
        _1709 = _1547;
        _1710 = _1546;
        _1711 = _1558;
        _1712 = _1557;
        _1713 = _1556;
        _1714 = _1571;
        _1715 = _1570;
        _1716 = _1569;
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
    }
    else
    {
        _1705 = _1393;
        _1706 = _1393;
        _1707 = _1393;
        _1708 = _1393;
        _1709 = _1393;
        _1710 = _1393;
        _1711 = _1393;
        _1712 = _1393;
        _1713 = _1393;
        _1714 = _1393;
        _1715 = _1393;
        _1716 = _1393;
        _1717 = 0.0;
        _1718 = 0.0;
        _1719 = 0.0;
    }
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1405)) + _1405;
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1406)) + _1406;
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1407)) + _1407;
    float _1752 = fma(_1731, cbSceneParam._m0[89u].z, fma(_1730, cbSceneParam._m0[89u].y, _1729 * cbSceneParam._m0[89u].x));
    float _1755 = fma(_1731, cbSceneParam._m0[90u].z, fma(_1730, cbSceneParam._m0[90u].y, _1729 * cbSceneParam._m0[90u].x));
    float _1758 = fma(_1731, cbSceneParam._m0[91u].z, fma(_1730, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1729));
    float _1773 = _999 * 0.5;
    float _1774 = _1000 * 0.5;
    float _1775 = _1001 * 0.5;
    float _1776 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1779 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1782 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1816;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1789 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1392, _1396, _1399, _1402));
        float _1793 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1394, _1397, _1400, _1403));
        float _1797 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1395, _1398, _1401, _1404));
        float _1804 = dot(vec4(cbModelParam._m0[39u]), vec4(_1773, _1774, _1775, 1.0));
        _1816 = dot(vec3(isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1816 = 1.0;
    }
    float _1827;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1818 = dot(vec4(cbModelParam._m0[40u]), vec4(_1773, _1774, _1775, 1.0));
        _1827 = dot(vec3(isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1818) ? 0.0 : (isnan(0.0) ? _1818 : max(0.0, _1818))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1827 = 1.0;
    }
    float _1831 = (_1827 * cbModelParam._m0[1u].x) + (_1816 * (1.0 - cbModelParam._m0[1u].x));
    float _1841 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _906);
    float _1842 = isnan(_1841) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1841 : min(cbModelParam._m0[25u].z, _1841));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1889 = fma(_1063, cbModelParam._m0[13u].z, fma(_1059, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1055)) + cbModelParam._m0[13u].w;
        float _1893 = fma(_1063, cbModelParam._m0[14u].z, fma(_1059, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1055)) + cbModelParam._m0[14u].w;
        float _1897 = fma(_1063, cbModelParam._m0[15u].z, fma(_1059, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1055)) + cbModelParam._m0[15u].w;
        float _1900 = fma(_1001, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _999));
        float _1903 = fma(_1001, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _999));
        float _1906 = fma(_1001, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _999));
        float _1934;
        if (_1900 > 0.0)
        {
            _1934 = abs((1.0 - _1889) / _1900);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1889 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1934 = frontier_phi_19_17_ladder;
        }
        float _2105;
        if (_1903 > 0.0)
        {
            _2105 = abs((1.0 - _1893) / _1903);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1893 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2105 = frontier_phi_28_24_ladder;
        }
        float _2399;
        if (_1906 > 0.0)
        {
            _2399 = abs((1.0 - _1897) / _1906);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1897 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2399 = frontier_phi_40_35_ladder;
        }
        float _2401 = isnan(_2105) ? _1934 : (isnan(_1934) ? _2105 : min(_1934, _2105));
        float _2402 = isnan(_2399) ? _2401 : (isnan(_2401) ? _2399 : min(_2401, _2399));
        float _2406 = (_2402 * _1900) + _1889;
        float _2407 = (_2402 * _1903) + _1893;
        float _2408 = (_2402 * _1906) + _1897;
        float _2409 = _2402 * 9.9999997473787516355514526367188e-05;
        float _2411 = (-1.0) - _2409;
        float _2413 = _2409 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2408 > _2413) || ((_2408 < _2411) || ((_2407 > _2413) || ((_2407 < _2411) || ((_2406 < _2411) || (_2406 > _2413))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2553 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2408, cbModelParam._m0[9u].z, fma(_2407, cbModelParam._m0[9u].y, _2406 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2408, cbModelParam._m0[10u].z, fma(_2407, cbModelParam._m0[10u].y, _2406 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2408, cbModelParam._m0[11u].z, fma(_2407, cbModelParam._m0[11u].y, _2406 * cbModelParam._m0[11u].x))), _1842);
            frontier_phi_18_40_ladder = _2553.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2553.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2553.x * cbModelParam._m0[1u].y;
        }
        _1922 = frontier_phi_18_40_ladder_2;
        _1924 = frontier_phi_18_40_ladder_1;
        _1926 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1910 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_999, _1000, _1001), _1842);
        _1922 = _1910.x * cbModelParam._m0[1u].y;
        _1924 = _1910.y * cbModelParam._m0[1u].y;
        _1926 = _1910.z * cbModelParam._m0[1u].y;
    }
    float _1930 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _906);
    float _1931 = isnan(_1930) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1930 : min(cbModelParam._m0[25u].w, _1930));
    float _2020;
    float _2022;
    float _2024;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1984 = fma(_1063, cbModelParam._m0[21u].z, fma(_1059, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1055)) + cbModelParam._m0[21u].w;
        float _1988 = fma(_1063, cbModelParam._m0[22u].z, fma(_1059, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1055)) + cbModelParam._m0[22u].w;
        float _1992 = fma(_1063, cbModelParam._m0[23u].z, fma(_1059, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1055)) + cbModelParam._m0[23u].w;
        float _1995 = fma(_1001, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _999));
        float _1998 = fma(_1001, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _999));
        float _2001 = fma(_1001, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _999));
        float _2110;
        if (_1995 > 0.0)
        {
            _2110 = abs((1.0 - _1984) / _1995);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1984 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2110 = frontier_phi_30_26_ladder;
        }
        float _2426;
        if (_1998 > 0.0)
        {
            _2426 = abs((1.0 - _1988) / _1998);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1988 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2426 = frontier_phi_42_37_ladder;
        }
        float _2764;
        if (_2001 > 0.0)
        {
            _2764 = abs((1.0 - _1992) / _2001);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1992 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2764 = frontier_phi_52_49_ladder;
        }
        float _2766 = isnan(_2426) ? _2110 : (isnan(_2110) ? _2426 : min(_2110, _2426));
        float _2767 = isnan(_2764) ? _2766 : (isnan(_2766) ? _2764 : min(_2766, _2764));
        float _2771 = (_2767 * _1995) + _1984;
        float _2772 = (_2767 * _1998) + _1988;
        float _2773 = (_2767 * _2001) + _1992;
        float _2774 = _2767 * 9.9999997473787516355514526367188e-05;
        float _2775 = (-1.0) - _2774;
        float _2777 = _2774 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2773 > _2777) || ((_2773 < _2775) || ((_2772 > _2777) || ((_2772 < _2775) || ((_2771 < _2775) || (_2771 > _2777))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2773, cbModelParam._m0[17u].z, fma(_2772, cbModelParam._m0[17u].y, _2771 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2773, cbModelParam._m0[18u].z, fma(_2772, cbModelParam._m0[18u].y, _2771 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2773, cbModelParam._m0[19u].z, fma(_2772, cbModelParam._m0[19u].y, _2771 * cbModelParam._m0[19u].x))), _1931);
            frontier_phi_27_52_ladder = _2895.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2895.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2895.x * cbModelParam._m0[1u].z;
        }
        _2020 = frontier_phi_27_52_ladder_2;
        _2022 = frontier_phi_27_52_ladder_1;
        _2024 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2004 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_999, _1000, _1001), _1931);
        _2020 = _2004.x * cbModelParam._m0[1u].z;
        _2022 = _2004.y * cbModelParam._m0[1u].z;
        _2024 = _2004.z * cbModelParam._m0[1u].z;
    }
    float _2037 = (((_1026 * _976) + _1027) * _991) * ((cbModelParam._m0[1u].w * (_2020 - _1922)) + _1922);
    float _2039 = (((_1026 * _978) + _1027) * _991) * ((cbModelParam._m0[1u].w * (_2022 - _1924)) + _1924);
    float _2041 = (((_1026 * _979) + _1027) * _991) * ((cbModelParam._m0[1u].w * (_2024 - _1926)) + _1926);
    float _2044 = fma(_2041, cbSceneParam._m0[89u].z, fma(_2039, cbSceneParam._m0[89u].y, _2037 * cbSceneParam._m0[89u].x));
    float _2047 = fma(_2041, cbSceneParam._m0[90u].z, fma(_2039, cbSceneParam._m0[90u].y, _2037 * cbSceneParam._m0[90u].x));
    float _2050 = fma(_2041, cbSceneParam._m0[91u].z, fma(_2039, cbSceneParam._m0[91u].y, _2037 * cbSceneParam._m0[91u].x));
    float _2084 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2088 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2092 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2096 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2097 = _2084 / _2096;
    float _2098 = _2088 / _2096;
    float _2099 = _2092 / _2096;
    float _2245;
    float _2246;
    float _2247;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2126 = ((uint(_2099 > cbSceneParam._m0[59u].y) + uint(_2099 > cbSceneParam._m0[59u].x)) + uint(_2099 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2127 = _2126 + 43u;
        uint _2135 = _2126 + 44u;
        uint _2143 = _2126 + 45u;
        uint _2151 = _2126 + 46u;
        float _2162 = fma(_2096, cbSceneParam._m0[_2127].w, fma(_2092, cbSceneParam._m0[_2127].z, fma(_2088, cbSceneParam._m0[_2127].y, _2084 * cbSceneParam._m0[_2127].x)));
        float _2166 = fma(_2096, cbSceneParam._m0[_2135].w, fma(_2092, cbSceneParam._m0[_2135].z, fma(_2088, cbSceneParam._m0[_2135].y, _2084 * cbSceneParam._m0[_2135].x)));
        float _2174 = fma(_2096, cbSceneParam._m0[_2151].w, fma(_2092, cbSceneParam._m0[_2151].z, fma(_2088, cbSceneParam._m0[_2151].y, _2084 * cbSceneParam._m0[_2151].x)));
        float _2179 = cbSceneParam._m0[33u].z * _2174;
        float _2181 = cbSceneParam._m0[33u].w * _2174;
        float _2184 = fma(_2096, cbSceneParam._m0[_2143].w, fma(_2092, cbSceneParam._m0[_2143].z, fma(_2088, cbSceneParam._m0[_2143].y, _2084 * cbSceneParam._m0[_2143].x))) / _2174;
        float _2231 = (cbSceneParam._m0[33u].x - sqrt(((_2098 * _2098) + (_2097 * _2097)) + (_2099 * _2099))) * cbSceneParam._m0[33u].y;
        float _4578 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2238 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2179 + _2162) / _2174, (_2181 + _2166) / _2174), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2181 + _2162) / _2174, (_2166 - _2179) / _2174), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2162 - _2179) / _2174, (_2166 - _2181) / _2174), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2162 - _2181) / _2174, (_2179 + _2166) / _2174), _2184), 0.0)).x), vec4(0.25)));
        _2245 = 1.0 - (_2238 * cbSceneParam._m0[34u].x);
        _2246 = 1.0 - (_2238 * cbSceneParam._m0[34u].y);
        _2247 = 1.0 - (_2238 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2245 = 1.0;
        _2246 = 1.0;
        _2247 = 1.0;
    }
    float _2311;
    float _2313;
    float _2315;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2299 = fma(_2096, cbSceneParam._m0[63u].w, fma(_2092, cbSceneParam._m0[63u].z, fma(_2088, cbSceneParam._m0[63u].y, _2084 * cbSceneParam._m0[63u].x)));
        float _2300 = fma(_2096, cbSceneParam._m0[60u].w, fma(_2092, cbSceneParam._m0[60u].z, fma(_2088, cbSceneParam._m0[60u].y, _2084 * cbSceneParam._m0[60u].x))) / _2299;
        float _2301 = fma(_2096, cbSceneParam._m0[61u].w, fma(_2092, cbSceneParam._m0[61u].z, fma(_2088, cbSceneParam._m0[61u].y, _2084 * cbSceneParam._m0[61u].x))) / _2299;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2300 >= cbSceneParam._m0[64u].x) && (_2301 >= cbSceneParam._m0[64u].y)) && (_2300 <= cbSceneParam._m0[64u].z)) && (_2301 <= cbSceneParam._m0[64u].w))
        {
            float _2439 = fma(_2096, cbSceneParam._m0[62u].w, fma(_2092, cbSceneParam._m0[62u].z, fma(_2088, cbSceneParam._m0[62u].y, _2084 * cbSceneParam._m0[62u].x))) / _2299;
            float _2443 = isnan(cbSceneParam._m0[41u].w) ? _2439 : (isnan(_2439) ? cbSceneParam._m0[41u].w : max(_2439, cbSceneParam._m0[41u].w));
            float _2486 = (cbSceneParam._m0[33u].x - sqrt(((_2098 * _2098) + (_2097 * _2097)) + (_2099 * _2099))) * cbSceneParam._m0[33u].y;
            float _4594 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
            float _2493 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2300, cbSceneParam._m0[33u].w + _2301), _2443), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2300, _2301 - cbSceneParam._m0[33u].z), _2443), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2300 - cbSceneParam._m0[33u].z, _2301 - cbSceneParam._m0[33u].w), _2443), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2300 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2301), _2443), 0.0)).x), vec4(0.25)));
            float _2497 = 1.0 - (_2493 * cbSceneParam._m0[34u].x);
            float _2498 = 1.0 - (_2493 * cbSceneParam._m0[34u].y);
            float _2499 = 1.0 - (_2493 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2498) ? _2246 : (isnan(_2246) ? _2498 : min(_2246, _2498));
            frontier_phi_39_38_ladder_1 = isnan(_2497) ? _2245 : (isnan(_2245) ? _2497 : min(_2245, _2497));
            frontier_phi_39_38_ladder_2 = isnan(_2499) ? _2247 : (isnan(_2247) ? _2499 : min(_2247, _2499));
        }
        else
        {
            frontier_phi_39_38_ladder = _2246;
            frontier_phi_39_38_ladder_1 = _2245;
            frontier_phi_39_38_ladder_2 = _2247;
        }
        _2311 = frontier_phi_39_38_ladder_1;
        _2313 = frontier_phi_39_38_ladder;
        _2315 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2311 = _2245;
        _2313 = _2246;
        _2315 = _2247;
    }
    uvec4 _2320 = floatBitsToUint(cbInstanceData._m0[_919 + 5u]);
    uint _2322 = _2320.x * 14u;
    uint _2323 = _2322 + 13u;
    float _2330 = _991 + (-1.0);
    float _2335 = (cbLight._m0[_2323].x * _2330) + 1.0;
    float _2336 = (cbLight._m0[_2323].y * _2330) + 1.0;
    float _2337 = (cbLight._m0[_2323].z * _2330) + 1.0;
    float _2338 = (cbLight._m0[_2323].w * _2330) + 1.0;
    uint _2339 = _2322 + 5u;
    float _2345 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
    uint _2349 = _2322 + 4u;
    float _2358 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
    uint _2362 = _2322 | 1u;
    float _2373 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_764, _765, _766));
    float _2376 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_764, _765, _766));
    float _4630 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _4641 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2381 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * 0.3183098733425140380859375;
    float _2383 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * 0.3183098733425140380859375;
    float _2390 = ((cbLight._m0[_2339].x * _2345) * _2383) + (((cbLight._m0[_2349].x * _2311) * _2358) * _2381);
    float _2391 = ((_2345 * cbLight._m0[_2339].y) * _2383) + (((cbLight._m0[_2349].y * _2313) * _2358) * _2381);
    float _2392 = ((_2345 * cbLight._m0[_2339].z) * _2383) + (((cbLight._m0[_2349].z * _2315) * _2358) * _2381);
    uvec4 _2396 = floatBitsToUint(cbLight._m0[_2322 + 12u]);
    bool _2398 = _2396.x == 0u;
    float _2500;
    float _2502;
    float _2504;
    if (_2398)
    {
        _2500 = _2390;
        _2502 = _2391;
        _2504 = _2392;
    }
    else
    {
        uint _2508 = _2322 + 6u;
        float _2524 = (dot(vec3(cbLight._m0[_2322 + 2u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2525 = _2524 * _2524;
        float _4652 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2526 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2527 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
        _2500 = (((cbLight._m0[_2508].x * 0.3183098733425140380859375) * _2526) * _2527) + _2390;
        _2502 = (((cbLight._m0[_2508].y * 0.3183098733425140380859375) * _2526) * _2527) + _2391;
        _2504 = (((cbLight._m0[_2508].z * 0.3183098733425140380859375) * _2526) * _2527) + _2392;
    }
    bool _2507 = _2396.y == 0u;
    float _2562;
    float _2564;
    float _2566;
    if (_2507)
    {
        _2562 = _2500;
        _2564 = _2502;
        _2566 = _2504;
    }
    else
    {
        uint _2735 = _2322 + 7u;
        float _2751 = (dot(vec3(cbLight._m0[_2322 + 3u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2752 = _2751 * _2751;
        float _4668 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2753 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2754 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2562 = (((cbLight._m0[_2735].x * 0.3183098733425140380859375) * _2753) * _2754) + _2500;
        _2564 = (((cbLight._m0[_2735].y * 0.3183098733425140380859375) * _2753) * _2754) + _2502;
        _2566 = (((cbLight._m0[_2735].z * 0.3183098733425140380859375) * _2753) * _2754) + _2504;
    }
    uint _2569 = _2322 + 8u;
    float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _906) * 0.949999988079071044921875);
    float _2583 = _2582 * _2582;
    float _2584 = cbLight._m0[_2322].x + _844;
    float _2585 = cbLight._m0[_2322].y + _845;
    float _2586 = cbLight._m0[_2322].z + _846;
    float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
    float _2591 = _2590 * _2584;
    float _2592 = _2590 * _2585;
    float _2593 = _2590 * _2586;
    float _2594 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2322].xyz));
    float _4684 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2597 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _4695 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _2598 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2599 = dot(vec3(_764, _765, _766), vec3(_2591, _2592, _2593));
    float _4706 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2602 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _2603 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2591, _2592, _2593));
    float _4717 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2607 = _2583 * _2583;
    float _2611 = ((_2602 * _2602) * (_2607 + (-1.0))) + 1.0;
    float _2619 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
    float _2620 = 0.959999978542327880859375 - _973;
    float _2622 = 0.959999978542327880859375 - _974;
    float _2623 = 0.959999978542327880859375 - _975;
    float _2630 = 1.0 - _2583;
    float _2641 = (0.5 / (((_2598 * ((_2597 * _2630) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2630) + _2583) * _2597))) * _2597;
    float _4728 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2643 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2607 / ((_2611 * _2611) * 3.141590118408203125));
    uint _2657 = _2322 + 9u;
    float _2668 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _906) * 0.949999988079071044921875);
    float _2669 = _2668 * _2668;
    float _2670 = cbLight._m0[_2362].x + _844;
    float _2671 = cbLight._m0[_2362].y + _845;
    float _2672 = cbLight._m0[_2362].z + _846;
    float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
    float _2677 = _2676 * _2670;
    float _2678 = _2676 * _2671;
    float _2679 = _2676 * _2672;
    float _2680 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2362].xyz));
    float _4739 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2683 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2684 = dot(vec3(_764, _765, _766), vec3(_2677, _2678, _2679));
    float _4750 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2687 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2688 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2677, _2678, _2679));
    float _4761 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2692 = _2669 * _2669;
    float _2696 = ((_2687 * _2687) * (_2692 + (-1.0))) + 1.0;
    float _2703 = exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0);
    float _2710 = 1.0 - _2669;
    float _2720 = (0.5 / (((_2598 * ((_2683 * _2710) + _2669)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2710) + _2669) * _2683))) * _2683;
    float _4772 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2722 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2692 / ((_2696 * _2696) * 3.141590118408203125));
    float _2732 = (((((_2703 * _2620) + _976) * cbLight._m0[_2657].x) * _2722) * _2345) + ((((cbLight._m0[_2569].x * _2311) * ((_2619 * _2620) + _976)) * _2643) * _2358);
    float _2733 = (((((_2703 * _2622) + _978) * cbLight._m0[_2657].y) * _2722) * _2345) + ((((cbLight._m0[_2569].y * _2313) * ((_2619 * _2622) + _978)) * _2643) * _2358);
    float _2734 = (((((_2703 * _2623) + _979) * cbLight._m0[_2657].z) * _2722) * _2345) + ((((cbLight._m0[_2569].z * _2315) * ((_2619 * _2623) + _979)) * _2643) * _2358);
    float _2790;
    float _2792;
    float _2794;
    if (_2398)
    {
        _2790 = _2732;
        _2792 = _2733;
        _2794 = _2734;
    }
    else
    {
        uint _2796 = _2322 + 2u;
        uint _2800 = _2322 + 10u;
        float _2814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2796].w)) * _906) * 0.949999988079071044921875);
        float _2815 = _2814 * _2814;
        float _2816 = cbLight._m0[_2796].x + _844;
        float _2817 = cbLight._m0[_2796].y + _845;
        float _2818 = cbLight._m0[_2796].z + _846;
        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
        float _2823 = _2822 * _2816;
        float _2824 = _2822 * _2817;
        float _2825 = _2822 * _2818;
        float _2826 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2796].xyz));
        float _4783 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2829 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2830 = dot(vec3(_764, _765, _766), vec3(_2823, _2824, _2825));
        float _4794 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2833 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _2834 = dot(vec3(cbLight._m0[_2796].xyz), vec3(_2823, _2824, _2825));
        float _4805 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2838 = _2815 * _2815;
        float _2842 = ((_2833 * _2833) * (_2838 + (-1.0))) + 1.0;
        float _2849 = exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0);
        float _2856 = 1.0 - _2815;
        float _2866 = (0.5 / (((_2598 * ((_2829 * _2856) + _2815)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2856) + _2815) * _2829))) * _2829;
        float _4816 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2868 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2838 / ((_2842 * _2842) * 3.141590118408203125));
        float _2869 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
        _2790 = (((((_2849 * _2620) + _976) * cbLight._m0[_2800].x) * _2868) * _2869) + _2732;
        _2792 = (((((_2849 * _2622) + _978) * cbLight._m0[_2800].y) * _2868) * _2869) + _2733;
        _2794 = (((((_2849 * _2623) + _979) * cbLight._m0[_2800].z) * _2868) * _2869) + _2734;
    }
    float _2900;
    float _2902;
    float _2904;
    if (_2507)
    {
        _2900 = _2790;
        _2902 = _2792;
        _2904 = _2794;
    }
    else
    {
        uint _2911 = _2322 + 3u;
        uint _2915 = _2322 + 11u;
        float _2929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2911].w)) * _906) * 0.949999988079071044921875);
        float _2930 = _2929 * _2929;
        float _2931 = cbLight._m0[_2911].x + _844;
        float _2932 = cbLight._m0[_2911].y + _845;
        float _2933 = cbLight._m0[_2911].z + _846;
        float _2937 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
        float _2938 = _2937 * _2931;
        float _2939 = _2937 * _2932;
        float _2940 = _2937 * _2933;
        float _2941 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2911].xyz));
        float _4832 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2944 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2945 = dot(vec3(_764, _765, _766), vec3(_2938, _2939, _2940));
        float _4843 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2948 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2949 = dot(vec3(cbLight._m0[_2911].xyz), vec3(_2938, _2939, _2940));
        float _4854 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2953 = _2930 * _2930;
        float _2957 = ((_2948 * _2948) * (_2953 + (-1.0))) + 1.0;
        float _2964 = exp2(log2(1.0 - (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) * 5.0);
        float _2971 = 1.0 - _2930;
        float _2981 = (0.5 / (((_2598 * ((_2944 * _2971) + _2930)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2971) + _2930) * _2944))) * _2944;
        float _4865 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        float _2983 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2953 / ((_2957 * _2957) * 3.141590118408203125));
        float _2984 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2900 = (((((_2964 * _2620) + _976) * cbLight._m0[_2915].x) * _2983) * _2984) + _2790;
        _2902 = (((((_2964 * _2622) + _978) * cbLight._m0[_2915].y) * _2983) * _2984) + _2792;
        _2904 = (((((_2964 * _2623) + _979) * cbLight._m0[_2915].z) * _2983) * _2984) + _2794;
    }
    float _3049;
    float _3051;
    float _3053;
    float _3055;
    float _3057;
    float _3059;
    if (_2320.y == 0u)
    {
        uvec4 _3005 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3006 = _3005.x;
        uint _3017 = uint((float(_3005.y) * floor(float(uint(cbSceneParam._m0[85u].y * _865) / _3006))) + floor(float(uint(cbSceneParam._m0[85u].x * _864) / _3006)));
        float _3027 = (log2(_2099 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3028 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        uint _3031 = uint(isnan(14.0) ? _3028 : (isnan(_3028) ? 14.0 : min(_3028, 14.0)));
        uvec4 _3036 = texelFetch(g_lightClusterGridBuffer, int(((_3031 << 2u) + (_3017 << 6u)) >> 2u));
        uint _3037 = _3036.x;
        uint _3038 = _3005.z;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        if (((((1u << ((_3038 >> 4u) & 15u)) + 4294967295u) & _3037) == 0u) || ((_3038 & 240u) == 0u))
        {
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
            _3122 = 0.0;
            _3124 = 0.0;
            _3126 = 0.0;
        }
        else
        {
            float _3117;
            float _3119;
            float _3121;
            float _3123;
            float _3125;
            float _3127;
            float _3268 = 0.0;
            float _3269 = 0.0;
            float _3270 = 0.0;
            float _3271 = 0.0;
            float _3272 = 0.0;
            float _3273 = 0.0;
            uint _3274 = 0u;
            uint _3283;
            bool _3284;
            for (;;)
            {
                _3283 = texelFetch(g_lightClassification, int((((_3031 << 5u) + (_3017 << 9u)) + (_3274 << 2u)) >> 2u)).x;
                _3284 = _3283 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3284)
                {
                    frontier_phi_73_pred = _3273;
                    frontier_phi_73_pred_1 = _3272;
                    frontier_phi_73_pred_2 = _3271;
                    frontier_phi_73_pred_3 = _3270;
                    frontier_phi_73_pred_4 = _3269;
                    frontier_phi_73_pred_5 = _3268;
                }
                else
                {
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    float _3418;
                    uint _3419;
                    _3413 = _3268;
                    _3414 = _3269;
                    _3415 = _3270;
                    _3416 = _3271;
                    _3417 = _3272;
                    _3418 = _3273;
                    _3419 = _3283;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    for (;;)
                    {
                        uint _3423 = uint(findLSB(_3419)) + (_3274 << 5u);
                        uint _3420 = (_3419 + 4294967295u) & _3419;
                        uint _3425 = _3423 * 48u;
                        vec4 _3439 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3425)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 3u)).x));
                        uint _3445 = (_3423 * 48u) + 4u;
                        vec4 _3458 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3445)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 3u)).x));
                        uint _3464 = (_3423 * 48u) + 8u;
                        vec3 _3475 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3464)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 2u)).x));
                        float _3479 = _3439.x - _2097;
                        float _3480 = _3439.y - _2098;
                        float _3481 = _3439.z - _2099;
                        float _3482 = dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481));
                        float _3485 = inversesqrt(_3482);
                        float _3486 = _3485 * _3479;
                        float _3487 = _3485 * _3480;
                        float _3488 = _3485 * _3481;
                        float _3489 = dot(vec3(_887, _890, _893), vec3(_3486, _3487, _3488));
                        float _3494 = 1.0 - (_3482 * _3439.w);
                        float _4891 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3495 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3496 = sqrt(_3482) * _3458.w;
                        float _3499 = 1.39999997615814208984375 / (_3496 + 1.39999997615814208984375);
                        float _3500 = _3499 * _3499;
                        float _3503 = ((1.0 - _3500) * _3489) + _3500;
                        float _3506 = _3496 * _3496;
                        float _3510 = ((isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0))) * _3495) / ((_3506 * 0.699999988079071044921875) + 1.0);
                        float _3514 = (-0.0) - _2097;
                        float _3515 = (-0.0) - _2098;
                        float _3516 = (-0.0) - _2099;
                        float _3520 = inversesqrt(dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516)));
                        float _3521 = _3520 * _3514;
                        float _3522 = _3520 * _3515;
                        float _3523 = _3520 * _3516;
                        float _3530 = exp2(log2(1.0 / ((_3506 * 3.5) + 5.0)) * 0.25);
                        float _3531 = 1.0 - _1007;
                        float _3538 = sqrt(1.0 - ((1.0 - (_3531 * _3531)) * (1.0 - (_3530 * _3530))));
                        float _3539 = _3538 * _3538;
                        float _3540 = _3539 * _3539;
                        float _3541 = _3521 + _3486;
                        float _3542 = _3522 + _3487;
                        float _3543 = _3523 + _3488;
                        float _3547 = inversesqrt(dot(vec3(_3541, _3542, _3543), vec3(_3541, _3542, _3543)));
                        float _3551 = dot(vec3(_887, _890, _893), vec3(_3521, _3522, _3523));
                        float _4907 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3554 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                        float _3555 = dot(vec3(_887, _890, _893), vec3(_3547 * _3541, _3547 * _3542, _3547 * _3543));
                        float _4918 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                        float _3558 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                        float _3562 = ((_3558 * _3558) * (_3540 + (-1.0))) + 1.0;
                        float _3563 = _3499 * _3539;
                        float _3564 = _3563 * _3563;
                        float _3567 = ((1.0 - _3564) * _3489) + _3564;
                        float _4929 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                        float _3568 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                        float _3569 = 1.0 - _3539;
                        float _3579 = (0.5 / (((_3568 * ((_3554 * _3569) + _3539)) + 9.9999999392252902907785028219223e-09) + (((_3568 * _3569) + _3539) * _3554))) * _3568;
                        float _4940 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                        float _3590 = (((_3540 * 3.1415927410125732421875) * (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) / ((_3562 * _3562) * ((_3506 * 2.1991131305694580078125) + 3.141590118408203125))) * _3495;
                        _3343 = (_3510 * _3458.x) + _3416;
                        _3344 = (_3510 * _3458.y) + _3417;
                        _3345 = (_3510 * _3458.z) + _3418;
                        _3340 = (_3590 * _3475.x) + _3413;
                        _3341 = (_3590 * _3475.y) + _3414;
                        _3342 = (_3590 * _3475.z) + _3415;
                        if (_3420 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3413 = _3340;
                            _3414 = _3341;
                            _3415 = _3342;
                            _3416 = _3343;
                            _3417 = _3344;
                            _3418 = _3345;
                            _3419 = _3420;
                        }
                    }
                    frontier_phi_73_pred = _3345;
                    frontier_phi_73_pred_1 = _3344;
                    frontier_phi_73_pred_2 = _3343;
                    frontier_phi_73_pred_3 = _3342;
                    frontier_phi_73_pred_4 = _3341;
                    frontier_phi_73_pred_5 = _3340;
                }
                _3127 = frontier_phi_73_pred;
                _3125 = frontier_phi_73_pred_1;
                _3123 = frontier_phi_73_pred_2;
                _3121 = frontier_phi_73_pred_3;
                _3119 = frontier_phi_73_pred_4;
                _3117 = frontier_phi_73_pred_5;
                uint _3275 = _3274 + 1u;
                if (_3275 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3268 = _3117;
                    _3269 = _3119;
                    _3270 = _3121;
                    _3271 = _3123;
                    _3272 = _3125;
                    _3273 = _3127;
                    _3274 = _3275;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
            _3122 = _3123;
            _3124 = _3125;
            _3126 = _3127;
        }
        uvec4 _3130 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3131 = _3130.z;
        uint _3133 = (_3131 >> 8u) & 15u;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        float _3244;
        float _3246;
        if (((4294967295u << _3133) & _3037) == 0u)
        {
            _3236 = _3116;
            _3238 = _3118;
            _3240 = _3120;
            _3242 = _3122;
            _3244 = _3124;
            _3246 = _3126;
        }
        else
        {
            float _3261 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
            float _3262 = _3261 * _2097;
            float _3263 = _3261 * _2098;
            float _3264 = _3261 * _2099;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3133 < ((_3131 >> 12u) & 15u))
            {
                float _3237;
                float _3239;
                float _3241;
                float _3243;
                float _3245;
                float _3247;
                float _3396 = _3116;
                float _3397 = _3118;
                float _3398 = _3120;
                float _3399 = _3122;
                float _3400 = _3124;
                float _3401 = _3126;
                uint _3402 = _3133;
                uint _3411;
                bool _3412;
                for (;;)
                {
                    _3411 = texelFetch(g_lightClassification, int((((_3031 << 5u) + (_3017 << 9u)) + (_3402 << 2u)) >> 2u)).x;
                    _3412 = _3411 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3412)
                    {
                        frontier_phi_84_pred = _3400;
                        frontier_phi_84_pred_1 = _3399;
                        frontier_phi_84_pred_2 = _3398;
                        frontier_phi_84_pred_3 = _3397;
                        frontier_phi_84_pred_4 = _3396;
                        frontier_phi_84_pred_5 = _3401;
                    }
                    else
                    {
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3898;
                        float _3899;
                        float _3900;
                        float _3901;
                        float _3902;
                        float _3903;
                        float _3617 = _3396;
                        float _3618 = _3397;
                        float _3619 = _3398;
                        float _3620 = _3399;
                        float _3621 = _3400;
                        float _3622 = _3401;
                        uint _3623 = _3411;
                        uint _3624;
                        vec4 _3649;
                        float _3650;
                        vec4 _3665;
                        vec3 _3677;
                        vec4 _3692;
                        vec4 _3707;
                        float _3754;
                        bool _3755;
                        for (;;)
                        {
                            uint _3634 = ((_3402 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3623));
                            _3624 = (_3623 + 4294967295u) & _3623;
                            uint _3636 = _3634 * 40u;
                            _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            _3650 = _3649.w;
                            uint _3652 = (_3634 * 40u) + 4u;
                            _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            uint _3667 = (_3634 * 40u) + 8u;
                            _3677 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x));
                            uint _3679 = (_3634 * 40u) + 16u;
                            _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            uint _3694 = (_3634 * 40u) + 20u;
                            _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            uint _3710 = (_3634 * 40u) + 24u;
                            vec4 _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            uint _3729 = (_3634 * 40u) + 28u;
                            vec4 _3742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 3u)).x));
                            _3754 = fma(_2099, _3742.z, fma(_2098, _3742.y, _3742.x * _2097)) + _3742.w;
                            _3755 = !((fma(_2099, _3723.z, fma(_2098, _3723.y, _3723.x * _2097)) + _3723.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3755)
                            {
                                float _3782 = _3649.x - _2097;
                                float _3783 = _3649.y - _2098;
                                float _3784 = _3649.z - _2099;
                                float _3785 = dot(vec3(_3782, _3783, _3784), vec3(_3782, _3783, _3784));
                                float _3788 = inversesqrt(_3785);
                                float _3789 = _3788 * _3782;
                                float _3790 = _3788 * _3783;
                                float _3791 = _3788 * _3784;
                                float _3795 = 1.0 - (_3785 / (_3650 * _3650));
                                float _4951 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3800 = sqrt(_3785) * _3665.w;
                                float _3802 = 1.39999997615814208984375 / (_3800 + 1.39999997615814208984375);
                                float _3803 = _3802 * _3802;
                                float _3806 = ((1.0 - _3803) * dot(vec3(_3789, _3790, _3791), vec3(_887, _890, _893))) + _3803;
                                float _3809 = _3800 * _3800;
                                float _3813 = (fma(_2099, _3692.z, fma(_2098, _3692.y, _3692.x * _2097)) + _3692.w) / _3754;
                                float _3814 = (fma(_2099, _3707.z, fma(_2098, _3707.y, _3707.x * _2097)) + _3707.w) / _3754;
                                float _3818 = 1.0 - dot(vec2(_3813, _3814), vec2(_3813, _3814));
                                float _4967 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3819 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3820 = _3819 * (((isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0))) * _3796) / ((_3809 * 0.699999988079071044921875) + 1.0));
                                float _3832 = exp2(log2(1.0 / ((_3809 * 3.5) + 5.0)) * 0.25);
                                float _3833 = 1.0 - _1007;
                                float _3840 = sqrt(1.0 - ((1.0 - (_3833 * _3833)) * (1.0 - (_3832 * _3832))));
                                float _3841 = _3840 * _3840;
                                float _3842 = _3841 * _3841;
                                float _3843 = _3789 - _3262;
                                float _3844 = _3790 - _3263;
                                float _3845 = _3791 - _3264;
                                float _3849 = inversesqrt(dot(vec3(_3843, _3844, _3845), vec3(_3843, _3844, _3845)));
                                float _3853 = dot(vec3(_887, _890, _893), vec3((-0.0) - _3262, (-0.0) - _3263, (-0.0) - _3264));
                                float _4978 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3856 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3857 = dot(vec3(_887, _890, _893), vec3(_3849 * _3843, _3849 * _3844, _3849 * _3845));
                                float _4989 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3860 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3864 = ((_3860 * _3860) * (_3842 + (-1.0))) + 1.0;
                                float _3865 = _3802 * _3841;
                                float _3866 = _3865 * _3865;
                                float _3872 = ((1.0 - _3866) * dot(vec3(_887, _890, _893), vec3(_3789, _3790, _3791))) + _3866;
                                float _5000 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3873 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3874 = 1.0 - _3841;
                                float _3884 = (0.5 / (((_3873 * ((_3856 * _3874) + _3841)) + 9.9999999392252902907785028219223e-09) + (((_3873 * _3874) + _3841) * _3856))) * _3873;
                                float _5011 = isnan(0.0) ? _3884 : (isnan(_3884) ? 0.0 : max(_3884, 0.0));
                                float _3894 = (_3819 * _3796) * (((_3842 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3864 * _3864) * ((_3809 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3820 * _3665.y;
                                frontier_phi_90_pred_1 = _3820 * _3665.x;
                                frontier_phi_90_pred_2 = _3894 * _3677.z;
                                frontier_phi_90_pred_3 = _3894 * _3677.y;
                                frontier_phi_90_pred_4 = _3894 * _3677.x;
                                frontier_phi_90_pred_5 = _3820 * _3665.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3902 = frontier_phi_90_pred;
                            _3901 = frontier_phi_90_pred_1;
                            _3900 = frontier_phi_90_pred_2;
                            _3899 = frontier_phi_90_pred_3;
                            _3898 = frontier_phi_90_pred_4;
                            _3903 = frontier_phi_90_pred_5;
                            _3607 = _3901 + _3620;
                            _3608 = _3902 + _3621;
                            _3609 = _3903 + _3622;
                            _3604 = _3898 + _3617;
                            _3605 = _3899 + _3618;
                            _3606 = _3900 + _3619;
                            if (_3624 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3617 = _3604;
                                _3618 = _3605;
                                _3619 = _3606;
                                _3620 = _3607;
                                _3621 = _3608;
                                _3622 = _3609;
                                _3623 = _3624;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3608;
                        frontier_phi_84_pred_1 = _3607;
                        frontier_phi_84_pred_2 = _3606;
                        frontier_phi_84_pred_3 = _3605;
                        frontier_phi_84_pred_4 = _3604;
                        frontier_phi_84_pred_5 = _3609;
                    }
                    _3245 = frontier_phi_84_pred;
                    _3243 = frontier_phi_84_pred_1;
                    _3241 = frontier_phi_84_pred_2;
                    _3239 = frontier_phi_84_pred_3;
                    _3237 = frontier_phi_84_pred_4;
                    _3247 = frontier_phi_84_pred_5;
                    uint _3403 = _3402 + 1u;
                    if (_3403 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3396 = _3237;
                        _3397 = _3239;
                        _3398 = _3241;
                        _3399 = _3243;
                        _3400 = _3245;
                        _3401 = _3247;
                        _3402 = _3403;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3247;
                frontier_phi_65_66_ladder_1 = _3243;
                frontier_phi_65_66_ladder_2 = _3245;
                frontier_phi_65_66_ladder_3 = _3239;
                frontier_phi_65_66_ladder_4 = _3237;
                frontier_phi_65_66_ladder_5 = _3241;
            }
            else
            {
                frontier_phi_65_66_ladder = _3126;
                frontier_phi_65_66_ladder_1 = _3122;
                frontier_phi_65_66_ladder_2 = _3124;
                frontier_phi_65_66_ladder_3 = _3118;
                frontier_phi_65_66_ladder_4 = _3116;
                frontier_phi_65_66_ladder_5 = _3120;
            }
            _3236 = frontier_phi_65_66_ladder_4;
            _3238 = frontier_phi_65_66_ladder_3;
            _3240 = frontier_phi_65_66_ladder_5;
            _3242 = frontier_phi_65_66_ladder_1;
            _3244 = frontier_phi_65_66_ladder_2;
            _3246 = frontier_phi_65_66_ladder;
        }
        float _3251 = isnan(1.0) ? _991 : (isnan(_991) ? 1.0 : min(_991, 1.0));
        _3049 = (_3251 * _3242) + _2562;
        _3051 = (_3251 * _3244) + _2564;
        _3053 = (_3251 * _3246) + _2566;
        _3055 = ((_3236 * _976) * _3251) + _2900;
        _3057 = ((_3238 * _978) * _3251) + _2902;
        _3059 = ((_3240 * _979) * _3251) + _2904;
    }
    else
    {
        _3049 = _2562;
        _3051 = _2564;
        _3053 = _2566;
        _3055 = _2900;
        _3057 = _2902;
        _3059 = _2904;
    }
    float _5027 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _5038 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _5049 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _3076 = ((isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_3049 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _991))) + ((_3055 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1831)) * cbPerFrame._m0[3u].x);
    float _3077 = ((isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0))) * (_3051 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _991))) + ((_3057 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1831)) * cbPerFrame._m0[3u].x);
    float _3078 = ((isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_3053 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _991))) + ((_3059 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1831)) * cbPerFrame._m0[3u].x);
    uint _3079 = _919 + 6u;
    float _3087 = _864 / cbSceneParam._m0[86u].x;
    float _3088 = _865 / cbSceneParam._m0[86u].y;
    vec4 _3102 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3087, _3088, (log2((isnan(cbSceneParam._m0[77u].w) ? _787 : (isnan(_787) ? cbSceneParam._m0[77u].w : min(_787, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3104 = _3102.x;
    float _3105 = _3102.y;
    float _3106 = _3102.z;
    float _3107 = _3102.w;
    float _3178;
    float _3180;
    float _3182;
    float _3184;
    if (_787 > cbSceneParam._m0[78u].w)
    {
        float _3141 = isnan(_787) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _787 : min(cbSceneParam._m0[80u].w, _787));
        float _3142 = _3141 / _787;
        float _3153 = _3142 * _837;
        float _3154 = _838 * _3142;
        float _3155 = (-0.0) - _3154;
        float _3156 = _3142 * _839;
        float _3158 = (cbSceneParam._m0[77u].w * _3155) / _3141;
        float _3159 = _3158 + cbSceneParam._m0[79u].w;
        float _3160 = cbSceneParam._m0[79u].w - _3154;
        float _3166 = sqrt(((_3153 * _3153) + (_3154 * _3154)) + (_3156 * _3156));
        float _3169 = (1.0 - (cbSceneParam._m0[77u].w / _3141)) * _3166;
        float _3174 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3176 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3353;
        if (abs((_3155 - _3158) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3353 = ((((_3159 > 0.0) ? exp2(_3174 * _3159) : (2.0 - exp2(_3176 * _3159))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3169;
        }
        else
        {
            float _3297 = 1.0 / cbSceneParam._m0[80u].x;
            float _3298 = isnan(_3160) ? _3159 : (isnan(_3159) ? _3160 : max(_3159, _3160));
            float _3299 = isnan(_3160) ? _3159 : (isnan(_3159) ? _3160 : min(_3159, _3160));
            float _3308 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : min(_3298, 0.0));
            float _3309 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : min(_3299, 0.0));
            _3353 = ((abs(_3166 / _3155) * cbSceneParam._m0[80u].y) * ((((_3308 - _3309) * 2.0) - ((exp2(_3174 * (isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0)))) - exp2(_3174 * (isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0))))) * _3297)) - ((exp2(_3176 * _3308) - exp2(_3176 * _3309)) * _3297))) + (_3169 * cbSceneParam._m0[80u].z);
        }
        vec4 _3355 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3087, _3088, 1.0), 0.0);
        float _3364 = exp2((_3353 * (-1.44269502162933349609375)) * (1.0 - _3355.w));
        float _3365 = log2(_3364);
        float _3381 = log2(_3107);
        _3178 = (exp2(_3381 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3365 * cbSceneParam._m0[78u].x)) * _3355.x) / cbSceneParam._m0[78u].x)) + _3104;
        _3180 = (exp2(_3381 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3365 * cbSceneParam._m0[78u].y)) * _3355.y) / cbSceneParam._m0[78u].y)) + _3105;
        _3182 = (exp2(_3381 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3365 * cbSceneParam._m0[78u].z)) * _3355.z) / cbSceneParam._m0[78u].z)) + _3106;
        _3184 = _3364 * _3107;
    }
    else
    {
        _3178 = _3104;
        _3180 = _3105;
        _3182 = _3106;
        _3184 = _3107;
    }
    bool _3391;
    vec4 _3194;
    vec4 _3216;
    float _3218;
    float _3222;
    float _3223;
    float _3224;
    float _3225;
    bool _3235;
    for (;;)
    {
        _3194 = cbMatDynParam._m0[0u];
        float _3196 = roundEven(_3194.y);
        bool _3197 = _3196 == 3.0;
        float _3198 = log2(_3184);
        float _3205 = exp2(_3198 * cbSceneParam._m0[78u].x) * _3076;
        float _3206 = exp2(_3198 * cbSceneParam._m0[78u].y) * _3077;
        float _3207 = exp2(_3198 * cbSceneParam._m0[78u].z) * _3078;
        float _3214 = _853 + (-0.5);
        _3216 = cbMtdParam._m0[1u];
        _3218 = _3216.y * _3214;
        float _3221 = (_3196 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3222 = _3221 * (_3197 ? _3205 : (_3205 + (cbSceneParam._m0[72u].w * _3178)));
        _3223 = _3221 * (_3197 ? _3206 : (_3206 + (cbSceneParam._m0[72u].w * _3180)));
        _3224 = _3221 * (_3197 ? _3207 : (_3207 + (cbSceneParam._m0[72u].w * _3182)));
        _3225 = _3214 * 0.999000012874603271484375;
        _3235 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3235)
        {
            if ((cbInstanceData._m0[_919 + 7u].x + _3225) < 0.5)
            {
                _3391 = true;
                break;
            }
        }
        uint _3332 = _920 + uint(_3194.w);
        if ((cbInstanceData._m0[_3332].w < 1.0) && ((cbInstanceData._m0[_3332].w + _3225) < 0.5))
        {
            _3391 = true;
            break;
        }
        if ((_3218 + 1.0) < _3216.x)
        {
            _3391 = true;
            break;
        }
        _3391 = false;
        break;
    }
    float _3595;
    if (_3391)
    {
        discard_state = true;
        _3595 = 0.0;
    }
    else
    {
        _3595 = cbInstanceData._m0[_3079].w;
    }
    SV_Target.x = _3222;
    SV_Target.y = _3223;
    SV_Target.z = _3224;
    SV_Target.w = _3595;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3079].w;
    discard_exit();
}


