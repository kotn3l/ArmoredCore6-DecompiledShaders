#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1342;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    vec4 _258 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _268 = log2(0.0);
    float _270 = exp2(_268 * cbMtdParam._m0[20u].y);
    float _271 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _272 = isnan(1.0) ? _271 : (isnan(_271) ? 1.0 : min(_271, 1.0));
    vec4 _286 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _286.z;
    float _291 = _286.w;
    float _299 = exp2(log2(_290 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _301 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    vec4 _314 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _337 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _339 = _337.x;
    float _340 = _337.y;
    float _364 = ((cbMtdParam._m0[19u].w * _337.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _339)) + _339;
    bool _400 = _364 >= 0.25;
    bool _405 = _364 >= 0.3499999940395355224609375;
    bool _410 = _364 >= 0.5;
    bool _415 = _364 >= 0.64999997615814208984375;
    bool _420 = _364 >= 0.75;
    vec4 _448 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _459 = cbMtdParam._m0[9u].x * _448.x;
    float _460 = cbMtdParam._m0[9u].y * _448.y;
    float _461 = cbMtdParam._m0[9u].z * _448.z;
    float _468 = (((((((_420 ? cbMtdParam._m0[13u].x : (_415 ? cbMtdParam._m0[18u].x : (_410 ? cbMtdParam._m0[17u].x : (_405 ? cbMtdParam._m0[16u].x : (_400 ? cbMtdParam._m0[15u].x : cbMtdParam._m0[14u].x))))) - cbMtdParam._m0[10u].x) * _340) + cbMtdParam._m0[10u].x) * _314.x) - _459) * _301) + _459;
    float _469 = (((((((_420 ? cbMtdParam._m0[13u].y : (_415 ? cbMtdParam._m0[18u].y : (_410 ? cbMtdParam._m0[17u].y : (_405 ? cbMtdParam._m0[16u].y : (_400 ? cbMtdParam._m0[15u].y : cbMtdParam._m0[14u].y))))) - cbMtdParam._m0[10u].y) * _340) + cbMtdParam._m0[10u].y) * _314.y) - _460) * _301) + _460;
    float _470 = (((((((_420 ? cbMtdParam._m0[13u].z : (_415 ? cbMtdParam._m0[18u].z : (_410 ? cbMtdParam._m0[17u].z : (_405 ? cbMtdParam._m0[16u].z : (_400 ? cbMtdParam._m0[15u].z : cbMtdParam._m0[14u].z))))) - cbMtdParam._m0[10u].z) * _340) + cbMtdParam._m0[10u].z) * _314.z) - _461) * _301) + _461;
    float _477 = exp2(log2(_291) * cbMtdParam._m0[21u].y);
    vec4 _490 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _510 = (((cbMtdParam._m0[11u].x * _490.x) - _468) * _477) + _468;
    float _511 = (((cbMtdParam._m0[11u].y * _490.y) - _469) * _477) + _469;
    float _512 = (((cbMtdParam._m0[11u].z * _490.z) - _470) * _477) + _470;
    vec4 _524 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _548 = (_258.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _524.x) - _510) * _272) + _510);
    float _550 = (_258.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _524.y) - _511) * _272) + _511);
    float _552 = (_258.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _524.z) - _512) * _272) + _512);
    float _557 = exp2(log2(1.0 - _291) * 0.00999999977648258209228515625);
    float _575 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _557) + cbMtdParam._m0[21u].z;
    float _594 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _575) + cbMtdParam._m0[20u].z) * _477) + _575;
    float _617 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _594) + cbMtdParam._m0[22u].z) * _272) + _594;
    vec4 _629 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _647 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _649 = _647.x;
    float _650 = _647.y;
    float _653 = cbMtdParam._m0[19u].x + _647.z;
    float _656 = (((cbMtdParam._m0[20u].x + _629.z) - _653) * _557) + _653;
    vec4 _668 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _680 = (_290 * 2.0) * ((((_668.z - _656) + cbMtdParam._m0[22u].x) * _477) + _656);
    vec4 _692 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _701 = (((_692.z - _680) + cbMtdParam._m0[21u].x) * _272) + _680;
    float _712 = ((_629.x - _649) * _557) + _649;
    float _713 = ((_629.y - _650) * _557) + _650;
    float _718 = ((_668.x - _712) * _477) + _712;
    float _719 = ((_668.y - _713) * _477) + _713;
    float _728 = ((((_692.x - _718) * _272) + _718) * 2.0) + (-1.0);
    float _729 = ((((_692.y - _719) * _272) + _719) * 2.0) + (-1.0);
    float _730 = dot(vec2(_728, _729), vec2(_728, _729));
    float _3688 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _735 = sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))));
    float _738 = _728 + (cbMtdParam._m0[21u].w * ((_286.x * 2.0) + (-1.0)));
    float _739 = _729 + (cbMtdParam._m0[21u].w * ((_286.y * 2.0) + (-1.0)));
    float _742 = fma(_735, _241, fma(_739, _233 * TANGENT.x, (_219 * _211) * _738));
    float _745 = fma(_735, _242, fma(_739, _233 * TANGENT.y, (_219 * _212) * _738));
    float _748 = fma(_735, _243, fma(_739, _233 * TANGENT.z, (_219 * _213) * _738));
    float _752 = inversesqrt(dot(vec3(_742, _745, _748), vec3(_742, _745, _748)));
    float _753 = _752 * _742;
    float _754 = _752 * _745;
    float _755 = _752 * _748;
    float _3699 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _756 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3721 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3732 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3743 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _760 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _776 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _826 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _816);
    float _827 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _816);
    float _828 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _816);
    float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
    float _833 = _826 * _832;
    float _834 = _827 * _832;
    float _835 = _828 * _832;
    float _841 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _842 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _844 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _846 = _844.w;
    float _864 = fma(_755, cbSceneParam._m0[5u].z, fma(_754, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _753));
    float _867 = fma(_755, cbSceneParam._m0[6u].z, fma(_754, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _753));
    float _870 = fma(_755, cbSceneParam._m0[7u].z, fma(_754, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _753));
    vec4 _872 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _883 = (((_872.y - _756) + (_872.w * _756)) * cbMtdParam._m0[3u].x) + _756;
    uint _896 = uint(roundEven(NORMAL.w)) * 13u;
    uint _898 = (_896 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _904 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * cbInstanceData._m0[_898].x;
    float _905 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_898].y;
    float _906 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_898].z;
    float _3754 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    vec4 _910 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _915 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _926 = (((_915.x - _760) + (_915.w * _760)) * cbMtdParam._m0[3u].x) + _760;
    float _939 = (cbMtdParam._m0[3u].x * (((_907 * _846) - _907) + _910.x)) + _907;
    float _940 = (cbMtdParam._m0[3u].x * (((_908 * _846) - _908) + _910.y)) + _908;
    float _941 = (cbMtdParam._m0[3u].x * (((_909 * _846) - _909) + _910.z)) + _909;
    float _942 = 1.0 - _926;
    float _943 = _942 * _939;
    float _944 = _942 * _940;
    float _945 = _942 * _941;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _926;
    float _951 = (_940 + (-0.039999999105930328369140625)) * _926;
    float _952 = (_941 + (-0.039999999105930328369140625)) * _926;
    float _953 = _950 + 0.039999999105930328369140625;
    float _955 = _951 + 0.039999999105930328369140625;
    float _956 = _952 + 0.039999999105930328369140625;
    vec4 _965 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _841, cbSceneParam._m0[86u].y * _842));
    float _968 = _965.x * TEXCOORD_4;
    float _969 = dot(vec3(_753, _754, _755), vec3(_833, _834, _835));
    float _972 = _969 * 2.0;
    float _976 = (_972 * _753) - _833;
    float _977 = (_972 * _754) - _834;
    float _978 = (_972 * _755) - _835;
    float _982 = abs(dot(vec3(_833, _834, _835), vec3(_753, _754, _755)));
    float _3787 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _984 = sqrt(_883);
    float _997 = exp2((_984 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_984 * 3.0));
    float _1003 = (1.0 - _997) * ((_984 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1004 = _997 * _984;
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1341;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1067 = fma(_1040, cbModelParam._m0[26u].z, fma(_1036, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1032));
        float _1071 = fma(_1040, cbModelParam._m0[27u].z, fma(_1036, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1032));
        float _1075 = fma(_1040, cbModelParam._m0[28u].z, fma(_1036, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1032));
        float _1099 = _1032 + _753;
        float _1100 = _1036 + _754;
        float _1101 = _1040 + _755;
        float _1111 = fma(_1101, cbModelParam._m0[26u].z, fma(_1100, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1099)) - _1067;
        float _1112 = fma(_1101, cbModelParam._m0[27u].z, fma(_1100, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1099)) - _1071;
        float _1113 = fma(_1101, cbModelParam._m0[28u].z, fma(_1100, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1099)) - _1075;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1067 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1071 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[34u].z) + ((((((_1075 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1169 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1135.x + (-0.5));
        float _1171 = _1169 * (_1135.y + (-0.5));
        float _1172 = _1169 * (_1135.z + (-0.5));
        float _1179 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1142.x + (-0.5));
        float _1181 = _1179 * (_1142.y + (-0.5));
        float _1182 = _1179 * (_1142.z + (-0.5));
        float _1189 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1149.x + (-0.5));
        float _1191 = _1189 * (_1149.y + (-0.5));
        float _1192 = _1189 * (_1149.z + (-0.5));
        float _1199 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1156.x + (-0.5));
        float _1201 = _1199 * (_1156.y + (-0.5));
        float _1202 = _1199 * (_1156.z + (-0.5));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = _1170 * 0.5;
        float _1207 = _1180 * 0.5;
        float _1208 = _1190 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1223 = (dot(vec3(_753, _754, _755), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1233 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3835 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1235 + 1.0))) + _1240) * _1203;
        float _1250 = _1171 * 0.5;
        float _1251 = _1181 * 0.5;
        float _1252 = _1191 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_753, _754, _755), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3868 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1277 + 1.0))) + _1282) * _1204;
        float _1292 = _1172 * 0.5;
        float _1293 = _1182 * 0.5;
        float _1294 = _1192 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_753, _754, _755), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3901 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1319 + 1.0))) + _1324) * _1205;
        _1341 = _1172;
        _1343 = _1171;
        _1344 = _1170;
        _1345 = _1182;
        _1346 = _1181;
        _1347 = _1180;
        _1348 = _1192;
        _1349 = _1191;
        _1350 = _1190;
        _1351 = _1205;
        _1352 = _1204;
        _1353 = _1203;
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
    }
    else
    {
        _1341 = _1342;
        _1343 = _1342;
        _1344 = _1342;
        _1345 = _1342;
        _1346 = _1342;
        _1347 = _1342;
        _1348 = _1342;
        _1349 = _1342;
        _1350 = _1342;
        _1351 = _1342;
        _1352 = _1342;
        _1353 = _1342;
        _1354 = 0.0;
        _1355 = 0.0;
        _1356 = 0.0;
    }
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1382 = fma(_1040, cbModelParam._m0[30u].z, fma(_1036, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032));
        float _1386 = fma(_1040, cbModelParam._m0[31u].z, fma(_1036, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032));
        float _1390 = fma(_1040, cbModelParam._m0[32u].z, fma(_1036, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032));
        float _1413 = _1032 + _753;
        float _1414 = _1036 + _754;
        float _1415 = _1040 + _755;
        float _1425 = fma(_1415, cbModelParam._m0[30u].z, fma(_1414, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1413)) - _1382;
        float _1426 = fma(_1415, cbModelParam._m0[31u].z, fma(_1414, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1413)) - _1386;
        float _1427 = fma(_1415, cbModelParam._m0[32u].z, fma(_1414, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1413)) - _1390;
        float _1431 = inversesqrt(dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427)));
        float _1444 = ((_1431 * _1425) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1382 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1445 = ((_1431 * _1426) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1386 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1446 = ((_1431 * _1427) / cbModelParam._m0[35u].z) + ((((((_1390 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        float _1481 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1448.x + (-0.5));
        float _1483 = _1481 * (_1448.y + (-0.5));
        float _1484 = _1481 * (_1448.z + (-0.5));
        float _1491 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1455.x + (-0.5));
        float _1493 = _1491 * (_1455.y + (-0.5));
        float _1494 = _1491 * (_1455.z + (-0.5));
        float _1501 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1462.x + (-0.5));
        float _1503 = _1501 * (_1462.y + (-0.5));
        float _1504 = _1501 * (_1462.z + (-0.5));
        float _1511 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1469.x + (-0.5));
        float _1513 = _1511 * (_1469.y + (-0.5));
        float _1514 = _1511 * (_1469.z + (-0.5));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = _1482 * 0.5;
        float _1519 = _1492 * 0.5;
        float _1520 = _1502 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_753, _754, _755), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _3964 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1545 + 1.0))) + _1550) * _1515;
        float _1560 = _1483 * 0.5;
        float _1561 = _1493 * 0.5;
        float _1562 = _1503 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_753, _754, _755), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _3997 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1587 + 1.0))) + _1592) * _1516;
        float _1602 = _1484 * 0.5;
        float _1603 = _1494 * 0.5;
        float _1604 = _1504 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_753, _754, _755), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4030 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1629 + 1.0))) + _1634) * _1517;
        _1651 = _1484;
        _1652 = _1483;
        _1653 = _1482;
        _1654 = _1494;
        _1655 = _1493;
        _1656 = _1492;
        _1657 = _1504;
        _1658 = _1503;
        _1659 = _1502;
        _1660 = _1517;
        _1661 = _1516;
        _1662 = _1515;
        _1663 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
        _1664 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
    }
    else
    {
        _1651 = _1342;
        _1652 = _1342;
        _1653 = _1342;
        _1654 = _1342;
        _1655 = _1342;
        _1656 = _1342;
        _1657 = _1342;
        _1658 = _1342;
        _1659 = _1342;
        _1660 = _1342;
        _1661 = _1342;
        _1662 = _1342;
        _1663 = 0.0;
        _1664 = 0.0;
        _1665 = 0.0;
    }
    float _1675 = (cbModelParam._m0[1u].x * (_1663 - _1354)) + _1354;
    float _1676 = (cbModelParam._m0[1u].x * (_1664 - _1355)) + _1355;
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1356)) + _1356;
    float _1698 = fma(_1677, cbSceneParam._m0[89u].z, fma(_1676, cbSceneParam._m0[89u].y, _1675 * cbSceneParam._m0[89u].x));
    float _1701 = fma(_1677, cbSceneParam._m0[90u].z, fma(_1676, cbSceneParam._m0[90u].y, _1675 * cbSceneParam._m0[90u].x));
    float _1704 = fma(_1677, cbSceneParam._m0[91u].z, fma(_1676, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1675));
    float _1719 = _976 * 0.5;
    float _1720 = _977 * 0.5;
    float _1721 = _978 * 0.5;
    float _1722 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1725 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1652, _1655, _1658, _1661));
    float _1728 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1651, _1654, _1657, _1660));
    float _1762;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1735 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1341, _1345, _1348, _1351));
        float _1739 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1743 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1344, _1347, _1350, _1353));
        float _1750 = dot(vec4(cbModelParam._m0[39u]), vec4(_1719, _1720, _1721, 1.0));
        _1762 = dot(vec3(isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1750) ? 0.0 : (isnan(0.0) ? _1750 : max(0.0, _1750))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1762 = 1.0;
    }
    float _1773;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1764 = dot(vec4(cbModelParam._m0[40u]), vec4(_1719, _1720, _1721, 1.0));
        _1773 = dot(vec3(isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1764) ? 0.0 : (isnan(0.0) ? _1764 : max(0.0, _1764))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1773 = 1.0;
    }
    float _1777 = (_1773 * cbModelParam._m0[1u].x) + (_1762 * (1.0 - cbModelParam._m0[1u].x));
    float _1787 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _883);
    float _1788 = isnan(_1787) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1787 : min(cbModelParam._m0[25u].z, _1787));
    float _1868;
    float _1870;
    float _1872;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1835 = fma(_1040, cbModelParam._m0[13u].z, fma(_1036, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032)) + cbModelParam._m0[13u].w;
        float _1839 = fma(_1040, cbModelParam._m0[14u].z, fma(_1036, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032)) + cbModelParam._m0[14u].w;
        float _1843 = fma(_1040, cbModelParam._m0[15u].z, fma(_1036, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032)) + cbModelParam._m0[15u].w;
        float _1846 = fma(_978, cbModelParam._m0[13u].z, fma(_977, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976));
        float _1849 = fma(_978, cbModelParam._m0[14u].z, fma(_977, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976));
        float _1852 = fma(_978, cbModelParam._m0[15u].z, fma(_977, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976));
        float _1880;
        if (_1846 > 0.0)
        {
            _1880 = abs((1.0 - _1835) / _1846);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1835 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1880 = frontier_phi_16_14_ladder;
        }
        float _2082;
        if (_1849 > 0.0)
        {
            _2082 = abs((1.0 - _1839) / _1849);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1839 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2082 = frontier_phi_25_21_ladder;
        }
        float _2336;
        if (_1852 > 0.0)
        {
            _2336 = abs((1.0 - _1843) / _1852);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1843 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2336 = frontier_phi_37_32_ladder;
        }
        float _2338 = isnan(_2082) ? _1880 : (isnan(_1880) ? _2082 : min(_1880, _2082));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1846) + _1835;
        float _2344 = (_2339 * _1849) + _1839;
        float _2345 = (_2339 * _1852) + _1843;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2346;
        float _2350 = _2346 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 > _2350) || ((_2344 < _2348) || ((_2343 < _2348) || (_2343 > _2350))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2473 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2345, cbModelParam._m0[9u].z, fma(_2344, cbModelParam._m0[9u].y, _2343 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2345, cbModelParam._m0[10u].z, fma(_2344, cbModelParam._m0[10u].y, _2343 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2345, cbModelParam._m0[11u].z, fma(_2344, cbModelParam._m0[11u].y, _2343 * cbModelParam._m0[11u].x))), _1788);
            frontier_phi_15_37_ladder = _2473.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2473.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2473.x * cbModelParam._m0[1u].y;
        }
        _1868 = frontier_phi_15_37_ladder_2;
        _1870 = frontier_phi_15_37_ladder_1;
        _1872 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1856 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_976, _977, _978), _1788);
        _1868 = _1856.x * cbModelParam._m0[1u].y;
        _1870 = _1856.y * cbModelParam._m0[1u].y;
        _1872 = _1856.z * cbModelParam._m0[1u].y;
    }
    float _1876 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _883);
    float _1877 = isnan(_1876) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1876 : min(cbModelParam._m0[25u].w, _1876));
    float _1966;
    float _1968;
    float _1970;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1930 = fma(_1040, cbModelParam._m0[21u].z, fma(_1036, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032)) + cbModelParam._m0[21u].w;
        float _1934 = fma(_1040, cbModelParam._m0[22u].z, fma(_1036, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032)) + cbModelParam._m0[22u].w;
        float _1938 = fma(_1040, cbModelParam._m0[23u].z, fma(_1036, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032)) + cbModelParam._m0[23u].w;
        float _1941 = fma(_978, cbModelParam._m0[21u].z, fma(_977, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976));
        float _1944 = fma(_978, cbModelParam._m0[22u].z, fma(_977, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976));
        float _1947 = fma(_978, cbModelParam._m0[23u].z, fma(_977, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976));
        float _2087;
        if (_1941 > 0.0)
        {
            _2087 = abs((1.0 - _1930) / _1941);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1930 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2087 = frontier_phi_27_23_ladder;
        }
        float _2363;
        if (_1944 > 0.0)
        {
            _2363 = abs((1.0 - _1934) / _1944);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1934 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2363 = frontier_phi_39_34_ladder;
        }
        float _2576;
        if (_1947 > 0.0)
        {
            _2576 = abs((1.0 - _1938) / _1947);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1938 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2576 = frontier_phi_48_45_ladder;
        }
        float _2578 = isnan(_2363) ? _2087 : (isnan(_2087) ? _2363 : min(_2087, _2363));
        float _2579 = isnan(_2576) ? _2578 : (isnan(_2578) ? _2576 : min(_2578, _2576));
        float _2583 = (_2579 * _1941) + _1930;
        float _2584 = (_2579 * _1944) + _1934;
        float _2585 = (_2579 * _1947) + _1938;
        float _2586 = _2579 * 9.9999997473787516355514526367188e-05;
        float _2587 = (-1.0) - _2586;
        float _2589 = _2586 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2585 > _2589) || ((_2585 < _2587) || ((_2584 > _2589) || ((_2584 < _2587) || ((_2583 < _2587) || (_2583 > _2589))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2585, cbModelParam._m0[17u].z, fma(_2584, cbModelParam._m0[17u].y, _2583 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2585, cbModelParam._m0[18u].z, fma(_2584, cbModelParam._m0[18u].y, _2583 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2585, cbModelParam._m0[19u].z, fma(_2584, cbModelParam._m0[19u].y, _2583 * cbModelParam._m0[19u].x))), _1877);
            frontier_phi_24_48_ladder = _2783.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2783.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2783.x * cbModelParam._m0[1u].z;
        }
        _1966 = frontier_phi_24_48_ladder_2;
        _1968 = frontier_phi_24_48_ladder_1;
        _1970 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_976, _977, _978), _1877);
        _1966 = _1950.x * cbModelParam._m0[1u].z;
        _1968 = _1950.y * cbModelParam._m0[1u].z;
        _1970 = _1950.z * cbModelParam._m0[1u].z;
    }
    float _1983 = (((_1003 * _953) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_1966 - _1868)) + _1868);
    float _1985 = (((_1003 * _955) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_1968 - _1870)) + _1870);
    float _1987 = (((_1003 * _956) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_1970 - _1872)) + _1872);
    float _1990 = fma(_1987, cbSceneParam._m0[89u].z, fma(_1985, cbSceneParam._m0[89u].y, _1983 * cbSceneParam._m0[89u].x));
    float _1993 = fma(_1987, cbSceneParam._m0[90u].z, fma(_1985, cbSceneParam._m0[90u].y, _1983 * cbSceneParam._m0[90u].x));
    float _1996 = fma(_1987, cbSceneParam._m0[91u].z, fma(_1985, cbSceneParam._m0[91u].y, _1983 * cbSceneParam._m0[91u].x));
    uvec4 _2006 = floatBitsToUint(cbInstanceData._m0[_896 + 5u]);
    uint _2008 = _2006.x * 14u;
    uint _2009 = _2008 + 13u;
    float _2016 = _968 + (-1.0);
    float _2021 = (cbLight._m0[_2009].x * _2016) + 1.0;
    float _2022 = (cbLight._m0[_2009].y * _2016) + 1.0;
    float _2023 = (cbLight._m0[_2009].z * _2016) + 1.0;
    float _2024 = (cbLight._m0[_2009].w * _2016) + 1.0;
    uint _2025 = _2008 + 5u;
    float _2031 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
    uint _2035 = _2008 + 4u;
    float _2041 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
    uint _2045 = _2008 | 1u;
    float _2056 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_753, _754, _755));
    float _2059 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_753, _754, _755));
    float _4166 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _4177 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2064 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * 0.3183098733425140380859375;
    float _2066 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * 0.3183098733425140380859375;
    float _2073 = ((cbLight._m0[_2025].x * _2031) * _2066) + ((cbLight._m0[_2035].x * _2041) * _2064);
    float _2074 = ((_2031 * cbLight._m0[_2025].y) * _2066) + ((_2041 * cbLight._m0[_2035].y) * _2064);
    float _2075 = ((_2031 * cbLight._m0[_2025].z) * _2066) + ((_2041 * cbLight._m0[_2035].z) * _2064);
    uvec4 _2079 = floatBitsToUint(cbLight._m0[_2008 + 12u]);
    bool _2081 = _2079.x == 0u;
    float _2092;
    float _2094;
    float _2096;
    if (_2081)
    {
        _2092 = _2073;
        _2094 = _2074;
        _2096 = _2075;
    }
    else
    {
        uint _2100 = _2008 + 6u;
        float _2116 = (dot(vec3(cbLight._m0[_2008 + 2u].xyz), vec3(_753, _754, _755)) * 0.5) + 0.5;
        float _2117 = _2116 * _2116;
        float _4188 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2118 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2119 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2092 = (((cbLight._m0[_2100].x * 0.3183098733425140380859375) * _2118) * _2119) + _2073;
        _2094 = (((cbLight._m0[_2100].y * 0.3183098733425140380859375) * _2118) * _2119) + _2074;
        _2096 = (((cbLight._m0[_2100].z * 0.3183098733425140380859375) * _2118) * _2119) + _2075;
    }
    bool _2099 = _2079.y == 0u;
    float _2137;
    float _2139;
    float _2141;
    if (_2099)
    {
        _2137 = _2092;
        _2139 = _2094;
        _2141 = _2096;
    }
    else
    {
        uint _2307 = _2008 + 7u;
        float _2323 = (dot(vec3(cbLight._m0[_2008 + 3u].xyz), vec3(_753, _754, _755)) * 0.5) + 0.5;
        float _2324 = _2323 * _2323;
        float _4204 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2325 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2326 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2137 = (((cbLight._m0[_2307].x * 0.3183098733425140380859375) * _2325) * _2326) + _2092;
        _2139 = (((cbLight._m0[_2307].y * 0.3183098733425140380859375) * _2325) * _2326) + _2094;
        _2141 = (((cbLight._m0[_2307].z * 0.3183098733425140380859375) * _2325) * _2326) + _2096;
    }
    uint _2144 = _2008 + 8u;
    float _2157 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2008].w)) * _883) * 0.949999988079071044921875);
    float _2158 = _2157 * _2157;
    float _2159 = cbLight._m0[_2008].x + _833;
    float _2160 = cbLight._m0[_2008].y + _834;
    float _2161 = cbLight._m0[_2008].z + _835;
    float _2165 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
    float _2166 = _2165 * _2159;
    float _2167 = _2165 * _2160;
    float _2168 = _2165 * _2161;
    float _2169 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2008].xyz));
    float _4220 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2172 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _2173 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2174 = dot(vec3(_753, _754, _755), vec3(_2166, _2167, _2168));
    float _4242 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _2178 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_2166, _2167, _2168));
    float _4253 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2182 = _2158 * _2158;
    float _2186 = ((_2177 * _2177) * (_2182 + (-1.0))) + 1.0;
    float _2194 = exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0);
    float _2195 = 0.959999978542327880859375 - _950;
    float _2197 = 0.959999978542327880859375 - _951;
    float _2198 = 0.959999978542327880859375 - _952;
    float _2205 = 1.0 - _2158;
    float _2216 = (0.5 / (((_2173 * ((_2172 * _2205) + _2158)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2205) + _2158) * _2172))) * _2172;
    float _4264 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2218 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2182 / ((_2186 * _2186) * 3.141590118408203125));
    uint _2229 = _2008 + 9u;
    float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _883) * 0.949999988079071044921875);
    float _2241 = _2240 * _2240;
    float _2242 = cbLight._m0[_2045].x + _833;
    float _2243 = cbLight._m0[_2045].y + _834;
    float _2244 = cbLight._m0[_2045].z + _835;
    float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
    float _2249 = _2248 * _2242;
    float _2250 = _2248 * _2243;
    float _2251 = _2248 * _2244;
    float _2252 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2045].xyz));
    float _4275 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2256 = dot(vec3(_753, _754, _755), vec3(_2249, _2250, _2251));
    float _4286 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2249, _2250, _2251));
    float _4297 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2241 * _2241;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2275 = exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0);
    float _2282 = 1.0 - _2241;
    float _2292 = (0.5 / (((_2173 * ((_2255 * _2282) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2282) + _2241) * _2255))) * _2255;
    float _4308 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    float _2304 = (((((_2275 * _2195) + _953) * cbLight._m0[_2229].x) * _2294) * _2031) + (((((_2194 * _2195) + _953) * cbLight._m0[_2144].x) * _2218) * _2041);
    float _2305 = (((((_2275 * _2197) + _955) * cbLight._m0[_2229].y) * _2294) * _2031) + (((((_2194 * _2197) + _955) * cbLight._m0[_2144].y) * _2218) * _2041);
    float _2306 = (((((_2275 * _2198) + _956) * cbLight._m0[_2229].z) * _2294) * _2031) + (((((_2194 * _2198) + _956) * cbLight._m0[_2144].z) * _2218) * _2041);
    float _2368;
    float _2370;
    float _2372;
    if (_2081)
    {
        _2368 = _2304;
        _2370 = _2305;
        _2372 = _2306;
    }
    else
    {
        uint _2374 = _2008 + 2u;
        uint _2378 = _2008 + 10u;
        float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2374].w)) * _883) * 0.949999988079071044921875);
        float _2393 = _2392 * _2392;
        float _2394 = cbLight._m0[_2374].x + _833;
        float _2395 = cbLight._m0[_2374].y + _834;
        float _2396 = cbLight._m0[_2374].z + _835;
        float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
        float _2401 = _2400 * _2394;
        float _2402 = _2400 * _2395;
        float _2403 = _2400 * _2396;
        float _2404 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2374].xyz));
        float _4319 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2407 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2408 = dot(vec3(_753, _754, _755), vec3(_2401, _2402, _2403));
        float _4330 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2412 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_2401, _2402, _2403));
        float _4341 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2416 = _2393 * _2393;
        float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
        float _2427 = exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0);
        float _2434 = 1.0 - _2393;
        float _2444 = (0.5 / (((_2173 * ((_2407 * _2434) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2434) + _2393) * _2407))) * _2407;
        float _4352 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2446 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
        float _2447 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2368 = (((((_2427 * _2195) + _953) * cbLight._m0[_2378].x) * _2446) * _2447) + _2304;
        _2370 = (((((_2427 * _2197) + _955) * cbLight._m0[_2378].y) * _2446) * _2447) + _2305;
        _2372 = (((((_2427 * _2198) + _956) * cbLight._m0[_2378].z) * _2446) * _2447) + _2306;
    }
    float _2482;
    float _2484;
    float _2486;
    if (_2099)
    {
        _2482 = _2368;
        _2484 = _2370;
        _2486 = _2372;
    }
    else
    {
        uint _2493 = _2008 + 3u;
        uint _2497 = _2008 + 11u;
        float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2493].w)) * _883) * 0.949999988079071044921875);
        float _2512 = _2511 * _2511;
        float _2513 = cbLight._m0[_2493].x + _833;
        float _2514 = cbLight._m0[_2493].y + _834;
        float _2515 = cbLight._m0[_2493].z + _835;
        float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
        float _2520 = _2519 * _2513;
        float _2521 = _2519 * _2514;
        float _2522 = _2519 * _2515;
        float _2523 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2493].xyz));
        float _4368 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2527 = dot(vec3(_753, _754, _755), vec3(_2520, _2521, _2522));
        float _4379 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2531 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_2520, _2521, _2522));
        float _4390 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2535 = _2512 * _2512;
        float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
        float _2546 = exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0);
        float _2553 = 1.0 - _2512;
        float _2563 = (0.5 / (((_2173 * ((_2526 * _2553) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2173 * _2553) + _2512) * _2526))) * _2526;
        float _4401 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2565 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
        float _2566 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2482 = (((((_2546 * _2195) + _953) * cbLight._m0[_2497].x) * _2565) * _2566) + _2368;
        _2484 = (((((_2546 * _2197) + _955) * cbLight._m0[_2497].y) * _2565) * _2566) + _2370;
        _2486 = (((((_2546 * _2198) + _956) * cbLight._m0[_2497].z) * _2565) * _2566) + _2372;
    }
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    if (_2006.y == 0u)
    {
        float _2641 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2642 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2641;
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2641;
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2641;
        uvec4 _2656 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2657 = _2656.x;
        uint _2668 = uint((float(_2656.y) * floor(float(uint(cbSceneParam._m0[85u].y * _842) / _2657))) + floor(float(uint(cbSceneParam._m0[85u].x * _841) / _2657)));
        float _2678 = (log2(_2644 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2679 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        uint _2682 = uint(isnan(14.0) ? _2679 : (isnan(_2679) ? 14.0 : min(_2679, 14.0)));
        uvec4 _2687 = texelFetch(g_lightClusterGridBuffer, int(((_2682 << 2u) + (_2668 << 6u)) >> 2u));
        uint _2688 = _2687.x;
        uint _2689 = _2656.z;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        if (((((1u << ((_2689 >> 4u) & 15u)) + 4294967295u) & _2688) == 0u) || ((_2689 & 240u) == 0u))
        {
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
        }
        else
        {
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2799;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            uint _2938 = 0u;
            uint _2947;
            bool _2948;
            for (;;)
            {
                _2947 = texelFetch(g_lightClassification, int((((_2682 << 5u) + (_2668 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                _2948 = _2947 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2948)
                {
                    frontier_phi_63_pred = _2937;
                    frontier_phi_63_pred_1 = _2936;
                    frontier_phi_63_pred_2 = _2935;
                    frontier_phi_63_pred_3 = _2934;
                    frontier_phi_63_pred_4 = _2933;
                    frontier_phi_63_pred_5 = _2932;
                }
                else
                {
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    uint _3062;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2947;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    for (;;)
                    {
                        uint _3066 = uint(findLSB(_3062)) + (_2938 << 5u);
                        uint _3063 = (_3062 + 4294967295u) & _3062;
                        uint _3068 = _3066 * 48u;
                        vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 3u)).x));
                        uint _3088 = (_3066 * 48u) + 4u;
                        vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3088)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 3u)).x));
                        uint _3107 = (_3066 * 48u) + 8u;
                        vec3 _3118 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x));
                        float _3122 = _3082.x - _2642;
                        float _3123 = _3082.y - _2643;
                        float _3124 = _3082.z - _2644;
                        float _3125 = dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124));
                        float _3128 = inversesqrt(_3125);
                        float _3129 = _3128 * _3122;
                        float _3130 = _3128 * _3123;
                        float _3131 = _3128 * _3124;
                        float _3132 = dot(vec3(_864, _867, _870), vec3(_3129, _3130, _3131));
                        float _3137 = 1.0 - (_3125 * _3082.w);
                        float _4427 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3138 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3139 = sqrt(_3125) * _3101.w;
                        float _3142 = 1.39999997615814208984375 / (_3139 + 1.39999997615814208984375);
                        float _3143 = _3142 * _3142;
                        float _3146 = ((1.0 - _3143) * _3132) + _3143;
                        float _3149 = _3139 * _3139;
                        float _3153 = ((isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0))) * _3138) / ((_3149 * 0.699999988079071044921875) + 1.0);
                        float _3157 = (-0.0) - _2642;
                        float _3158 = (-0.0) - _2643;
                        float _3159 = (-0.0) - _2644;
                        float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                        float _3164 = _3163 * _3157;
                        float _3165 = _3163 * _3158;
                        float _3166 = _3163 * _3159;
                        float _3173 = exp2(log2(1.0 / ((_3149 * 3.5) + 5.0)) * 0.25);
                        float _3174 = 1.0 - _984;
                        float _3181 = sqrt(1.0 - ((1.0 - (_3174 * _3174)) * (1.0 - (_3173 * _3173))));
                        float _3182 = _3181 * _3181;
                        float _3183 = _3182 * _3182;
                        float _3184 = _3164 + _3129;
                        float _3185 = _3165 + _3130;
                        float _3186 = _3166 + _3131;
                        float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                        float _3194 = dot(vec3(_864, _867, _870), vec3(_3164, _3165, _3166));
                        float _4443 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3198 = dot(vec3(_864, _867, _870), vec3(_3190 * _3184, _3190 * _3185, _3190 * _3186));
                        float _4454 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3201 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                        float _3205 = ((_3201 * _3201) * (_3183 + (-1.0))) + 1.0;
                        float _3206 = _3142 * _3182;
                        float _3207 = _3206 * _3206;
                        float _3210 = ((1.0 - _3207) * _3132) + _3207;
                        float _4465 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                        float _3212 = 1.0 - _3182;
                        float _3222 = (0.5 / (((_3211 * ((_3197 * _3212) + _3182)) + 9.9999999392252902907785028219223e-09) + (((_3211 * _3212) + _3182) * _3197))) * _3211;
                        float _4476 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3233 = (((_3183 * 3.1415927410125732421875) * (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) / ((_3205 * _3205) * ((_3149 * 2.1991131305694580078125) + 3.141590118408203125))) * _3138;
                        _2991 = (_3153 * _3101.x) + _3059;
                        _2992 = (_3153 * _3101.y) + _3060;
                        _2993 = (_3153 * _3101.z) + _3061;
                        _2988 = (_3233 * _3118.x) + _3056;
                        _2989 = (_3233 * _3118.y) + _3057;
                        _2990 = (_3233 * _3118.z) + _3058;
                        if (_3063 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _3063;
                        }
                    }
                    frontier_phi_63_pred = _2993;
                    frontier_phi_63_pred_1 = _2992;
                    frontier_phi_63_pred_2 = _2991;
                    frontier_phi_63_pred_3 = _2990;
                    frontier_phi_63_pred_4 = _2989;
                    frontier_phi_63_pred_5 = _2988;
                }
                _2799 = frontier_phi_63_pred;
                _2797 = frontier_phi_63_pred_1;
                _2795 = frontier_phi_63_pred_2;
                _2793 = frontier_phi_63_pred_3;
                _2791 = frontier_phi_63_pred_4;
                _2789 = frontier_phi_63_pred_5;
                uint _2939 = _2938 + 1u;
                if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2932 = _2789;
                    _2933 = _2791;
                    _2934 = _2793;
                    _2935 = _2795;
                    _2936 = _2797;
                    _2937 = _2799;
                    _2938 = _2939;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
        }
        uvec4 _2802 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2803 = _2802.z;
        uint _2805 = (_2803 >> 8u) & 15u;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((4294967295u << _2805) & _2688) == 0u)
        {
            _2900 = _2788;
            _2902 = _2790;
            _2904 = _2792;
            _2906 = _2794;
            _2908 = _2796;
            _2910 = _2798;
        }
        else
        {
            float _2925 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
            float _2926 = _2925 * _2642;
            float _2927 = _2925 * _2643;
            float _2928 = _2925 * _2644;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2805 < ((_2803 >> 12u) & 15u))
            {
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _3039 = _2788;
                float _3040 = _2790;
                float _3041 = _2792;
                float _3042 = _2794;
                float _3043 = _2796;
                float _3044 = _2798;
                uint _3045 = _2805;
                uint _3054;
                bool _3055;
                for (;;)
                {
                    _3054 = texelFetch(g_lightClassification, int((((_2682 << 5u) + (_2668 << 9u)) + (_3045 << 2u)) >> 2u)).x;
                    _3055 = _3054 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3055)
                    {
                        frontier_phi_69_pred = _3044;
                        frontier_phi_69_pred_1 = _3043;
                        frontier_phi_69_pred_2 = _3042;
                        frontier_phi_69_pred_3 = _3041;
                        frontier_phi_69_pred_4 = _3040;
                        frontier_phi_69_pred_5 = _3039;
                    }
                    else
                    {
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3251 = _3039;
                        float _3252 = _3040;
                        float _3253 = _3041;
                        float _3254 = _3042;
                        float _3255 = _3043;
                        float _3256 = _3044;
                        uint _3257 = _3054;
                        uint _3258;
                        vec4 _3283;
                        float _3284;
                        vec4 _3299;
                        vec3 _3311;
                        vec4 _3326;
                        vec4 _3341;
                        float _3388;
                        bool _3389;
                        for (;;)
                        {
                            uint _3268 = ((_3045 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3257));
                            _3258 = (_3257 + 4294967295u) & _3257;
                            uint _3270 = _3268 * 40u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            _3284 = _3283.w;
                            uint _3286 = (_3268 * 40u) + 4u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3301 = (_3268 * 40u) + 8u;
                            _3311 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x));
                            uint _3313 = (_3268 * 40u) + 16u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3268 * 40u) + 20u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3344 = (_3268 * 40u) + 24u;
                            vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3363 = (_3268 * 40u) + 28u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3388 = fma(_2644, _3376.z, fma(_2643, _3376.y, _3376.x * _2642)) + _3376.w;
                            _3389 = !((fma(_2644, _3357.z, fma(_2643, _3357.y, _3357.x * _2642)) + _3357.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3389)
                            {
                                float _3416 = _3283.x - _2642;
                                float _3417 = _3283.y - _2643;
                                float _3418 = _3283.z - _2644;
                                float _3419 = dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418));
                                float _3422 = inversesqrt(_3419);
                                float _3423 = _3422 * _3416;
                                float _3424 = _3422 * _3417;
                                float _3425 = _3422 * _3418;
                                float _3429 = 1.0 - (_3419 / (_3284 * _3284));
                                float _4487 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3434 = sqrt(_3419) * _3299.w;
                                float _3436 = 1.39999997615814208984375 / (_3434 + 1.39999997615814208984375);
                                float _3437 = _3436 * _3436;
                                float _3440 = ((1.0 - _3437) * dot(vec3(_3423, _3424, _3425), vec3(_864, _867, _870))) + _3437;
                                float _3443 = _3434 * _3434;
                                float _3447 = (fma(_2644, _3326.z, fma(_2643, _3326.y, _3326.x * _2642)) + _3326.w) / _3388;
                                float _3448 = (fma(_2644, _3341.z, fma(_2643, _3341.y, _3341.x * _2642)) + _3341.w) / _3388;
                                float _3452 = 1.0 - dot(vec2(_3447, _3448), vec2(_3447, _3448));
                                float _4503 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3454 = _3453 * (((isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))) * _3430) / ((_3443 * 0.699999988079071044921875) + 1.0));
                                float _3466 = exp2(log2(1.0 / ((_3443 * 3.5) + 5.0)) * 0.25);
                                float _3467 = 1.0 - _984;
                                float _3474 = sqrt(1.0 - ((1.0 - (_3467 * _3467)) * (1.0 - (_3466 * _3466))));
                                float _3475 = _3474 * _3474;
                                float _3476 = _3475 * _3475;
                                float _3477 = _3423 - _2926;
                                float _3478 = _3424 - _2927;
                                float _3479 = _3425 - _2928;
                                float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                                float _3487 = dot(vec3(_864, _867, _870), vec3((-0.0) - _2926, (-0.0) - _2927, (-0.0) - _2928));
                                float _4514 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                                float _3491 = dot(vec3(_864, _867, _870), vec3(_3483 * _3477, _3483 * _3478, _3483 * _3479));
                                float _4525 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3498 = ((_3494 * _3494) * (_3476 + (-1.0))) + 1.0;
                                float _3499 = _3436 * _3475;
                                float _3500 = _3499 * _3499;
                                float _3506 = ((1.0 - _3500) * dot(vec3(_864, _867, _870), vec3(_3423, _3424, _3425))) + _3500;
                                float _4536 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3508 = 1.0 - _3475;
                                float _3518 = (0.5 / (((_3507 * ((_3490 * _3508) + _3475)) + 9.9999999392252902907785028219223e-09) + (((_3507 * _3508) + _3475) * _3490))) * _3507;
                                float _4547 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3528 = (_3453 * _3430) * (((_3476 * 3.1415927410125732421875) * (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) / ((_3498 * _3498) * ((_3443 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3454 * _3299.z;
                                frontier_phi_75_pred_1 = _3454 * _3299.y;
                                frontier_phi_75_pred_2 = _3454 * _3299.x;
                                frontier_phi_75_pred_3 = _3528 * _3311.z;
                                frontier_phi_75_pred_4 = _3528 * _3311.y;
                                frontier_phi_75_pred_5 = _3528 * _3311.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3537 = frontier_phi_75_pred;
                            _3536 = frontier_phi_75_pred_1;
                            _3535 = frontier_phi_75_pred_2;
                            _3534 = frontier_phi_75_pred_3;
                            _3533 = frontier_phi_75_pred_4;
                            _3532 = frontier_phi_75_pred_5;
                            _3241 = _3535 + _3254;
                            _3242 = _3536 + _3255;
                            _3243 = _3537 + _3256;
                            _3238 = _3532 + _3251;
                            _3239 = _3533 + _3252;
                            _3240 = _3534 + _3253;
                            if (_3258 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3258;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3243;
                        frontier_phi_69_pred_1 = _3242;
                        frontier_phi_69_pred_2 = _3241;
                        frontier_phi_69_pred_3 = _3240;
                        frontier_phi_69_pred_4 = _3239;
                        frontier_phi_69_pred_5 = _3238;
                    }
                    _2911 = frontier_phi_69_pred;
                    _2909 = frontier_phi_69_pred_1;
                    _2907 = frontier_phi_69_pred_2;
                    _2905 = frontier_phi_69_pred_3;
                    _2903 = frontier_phi_69_pred_4;
                    _2901 = frontier_phi_69_pred_5;
                    uint _3046 = _3045 + 1u;
                    if (_3046 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3039 = _2901;
                        _3040 = _2903;
                        _3041 = _2905;
                        _3042 = _2907;
                        _3043 = _2909;
                        _3044 = _2911;
                        _3045 = _3046;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2911;
                frontier_phi_57_58_ladder_1 = _2909;
                frontier_phi_57_58_ladder_2 = _2907;
                frontier_phi_57_58_ladder_3 = _2905;
                frontier_phi_57_58_ladder_4 = _2903;
                frontier_phi_57_58_ladder_5 = _2901;
            }
            else
            {
                frontier_phi_57_58_ladder = _2798;
                frontier_phi_57_58_ladder_1 = _2796;
                frontier_phi_57_58_ladder_2 = _2794;
                frontier_phi_57_58_ladder_3 = _2792;
                frontier_phi_57_58_ladder_4 = _2790;
                frontier_phi_57_58_ladder_5 = _2788;
            }
            _2900 = frontier_phi_57_58_ladder_5;
            _2902 = frontier_phi_57_58_ladder_4;
            _2904 = frontier_phi_57_58_ladder_3;
            _2906 = frontier_phi_57_58_ladder_2;
            _2908 = frontier_phi_57_58_ladder_1;
            _2910 = frontier_phi_57_58_ladder;
        }
        float _2915 = isnan(1.0) ? _968 : (isnan(_968) ? 1.0 : min(_968, 1.0));
        _2700 = (_2915 * _2906) + _2137;
        _2702 = (_2915 * _2908) + _2139;
        _2704 = (_2915 * _2910) + _2141;
        _2706 = ((_2900 * _953) * _2915) + _2482;
        _2708 = ((_2902 * _955) * _2915) + _2484;
        _2710 = ((_2904 * _956) * _2915) + _2486;
    }
    else
    {
        _2700 = _2137;
        _2702 = _2139;
        _2704 = _2141;
        _2706 = _2482;
        _2708 = _2484;
        _2710 = _2486;
    }
    float _4563 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4574 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4585 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    uint _2730 = _896 + 6u;
    float _2738 = _841 / cbSceneParam._m0[86u].x;
    float _2739 = _842 / cbSceneParam._m0[86u].y;
    vec4 _2753 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2738, _2739, (log2((isnan(cbSceneParam._m0[77u].w) ? _776 : (isnan(_776) ? cbSceneParam._m0[77u].w : min(_776, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2755 = _2753.x;
    float _2756 = _2753.y;
    float _2757 = _2753.z;
    float _2758 = _2753.w;
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    if (_776 > cbSceneParam._m0[78u].w)
    {
        float _2813 = isnan(_776) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _776 : min(cbSceneParam._m0[80u].w, _776));
        float _2814 = _2813 / _776;
        float _2825 = _2814 * _826;
        float _2826 = _827 * _2814;
        float _2827 = (-0.0) - _2826;
        float _2828 = _2814 * _828;
        float _2830 = (cbSceneParam._m0[77u].w * _2827) / _2813;
        float _2831 = _2830 + cbSceneParam._m0[79u].w;
        float _2832 = cbSceneParam._m0[79u].w - _2826;
        float _2838 = sqrt(((_2825 * _2825) + (_2826 * _2826)) + (_2828 * _2828));
        float _2841 = (1.0 - (cbSceneParam._m0[77u].w / _2813)) * _2838;
        float _2846 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2848 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3001;
        if (abs((_2827 - _2830) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3001 = ((((_2831 > 0.0) ? exp2(_2846 * _2831) : (2.0 - exp2(_2848 * _2831))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2841;
        }
        else
        {
            float _2961 = 1.0 / cbSceneParam._m0[80u].x;
            float _2962 = isnan(_2832) ? _2831 : (isnan(_2831) ? _2832 : max(_2831, _2832));
            float _2963 = isnan(_2832) ? _2831 : (isnan(_2831) ? _2832 : min(_2831, _2832));
            float _2972 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : min(_2962, 0.0));
            float _2973 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : min(_2963, 0.0));
            _3001 = ((abs(_2838 / _2827) * cbSceneParam._m0[80u].y) * ((((_2972 - _2973) * 2.0) - ((exp2(_2846 * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0)))) - exp2(_2846 * (isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))))) * _2961)) - ((exp2(_2848 * _2972) - exp2(_2848 * _2973)) * _2961))) + (_2841 * cbSceneParam._m0[80u].z);
        }
        vec4 _3003 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2738, _2739, 1.0), 0.0);
        float _3012 = exp2((_3001 * (-1.44269502162933349609375)) * (1.0 - _3003.w));
        float _3013 = log2(_3012);
        float _3029 = log2(_2758);
        _2850 = (exp2(_3029 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3013 * cbSceneParam._m0[78u].x)) * _3003.x) / cbSceneParam._m0[78u].x)) + _2755;
        _2852 = (exp2(_3029 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3013 * cbSceneParam._m0[78u].y)) * _3003.y) / cbSceneParam._m0[78u].y)) + _2756;
        _2854 = (exp2(_3029 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3013 * cbSceneParam._m0[78u].z)) * _3003.z) / cbSceneParam._m0[78u].z)) + _2757;
        _2856 = _3012 * _2758;
    }
    else
    {
        _2850 = _2755;
        _2852 = _2756;
        _2854 = _2757;
        _2856 = _2758;
    }
    float _2868 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2869 = _2868 == 3.0;
    float _2870 = log2(_2856);
    float _2877 = exp2(_2870 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2700 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _968))) + ((_2706 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1777)) * cbPerFrame._m0[3u].x));
    float _2878 = exp2(_2870 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2702 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _968))) + ((_2708 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1777)) * cbPerFrame._m0[3u].x));
    float _2879 = exp2(_2870 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2704 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _968))) + ((_2710 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1777)) * cbPerFrame._m0[3u].x));
    float _2888 = (_2868 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2888 * (_2869 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2850)));
    SV_Target.y = _2888 * (_2869 ? _2878 : (_2878 + (cbSceneParam._m0[72u].w * _2852)));
    SV_Target.z = _2888 * (_2869 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2854)));
    SV_Target.w = cbInstanceData._m0[_2730].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2730].w;
}


