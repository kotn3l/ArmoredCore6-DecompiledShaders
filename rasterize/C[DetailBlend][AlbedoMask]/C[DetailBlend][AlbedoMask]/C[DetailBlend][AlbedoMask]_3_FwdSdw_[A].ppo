#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1285;
float _3952;
float _3953;
float _3954;
float _3955;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    vec4 _266 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _280 = exp2(log2(_266.w * cbMtdParam._m0[22u].y) * cbMtdParam._m0[20u].y);
    float _281 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _282 = isnan(1.0) ? _281 : (isnan(_281) ? 1.0 : min(_281, 1.0));
    vec4 _296 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _300 = _296.z;
    float _301 = _296.w;
    float _309 = exp2(log2(_300 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _310 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _311 = isnan(1.0) ? _310 : (isnan(_310) ? 1.0 : min(_310, 1.0));
    vec4 _324 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _349 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _360 = cbMtdParam._m0[9u].x * _349.x;
    float _361 = cbMtdParam._m0[9u].y * _349.y;
    float _362 = cbMtdParam._m0[9u].z * _349.z;
    float _369 = (((cbMtdParam._m0[10u].x * _324.x) - _360) * _311) + _360;
    float _370 = (((cbMtdParam._m0[10u].y * _324.y) - _361) * _311) + _361;
    float _371 = (((cbMtdParam._m0[10u].z * _324.z) - _362) * _311) + _362;
    float _378 = exp2(log2(_301) * cbMtdParam._m0[21u].y);
    vec4 _391 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _411 = (((cbMtdParam._m0[11u].x * _391.x) - _369) * _378) + _369;
    float _412 = (((cbMtdParam._m0[11u].y * _391.y) - _370) * _378) + _370;
    float _413 = (((cbMtdParam._m0[11u].z * _391.z) - _371) * _378) + _371;
    vec4 _425 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _449 = (_266.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _425.x) - _411) * _282) + _411);
    float _451 = (_266.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _425.y) - _412) * _282) + _412);
    float _453 = (_266.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _425.z) - _413) * _282) + _413);
    float _458 = exp2(log2(1.0 - _301) * 0.00999999977648258209228515625);
    float _476 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _458) + cbMtdParam._m0[21u].z;
    float _495 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _476) + cbMtdParam._m0[20u].z) * _378) + _476;
    float _515 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _495) + cbMtdParam._m0[22u].z) * _282) + _495;
    vec4 _527 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _545 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _551 = cbMtdParam._m0[19u].x + _545.z;
    float _554 = (((cbMtdParam._m0[20u].x + _527.z) - _551) * _458) + _551;
    vec4 _567 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _579 = (_300 * 2.0) * ((((_567.z - _554) + cbMtdParam._m0[22u].x) * _378) + _554);
    vec4 _592 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _601 = (((_592.z - _579) + cbMtdParam._m0[21u].x) * _282) + _579;
    float _612 = ((_527.x - _547) * _458) + _547;
    float _613 = ((_527.y - _548) * _458) + _548;
    float _618 = ((_567.x - _612) * _378) + _612;
    float _619 = ((_567.y - _613) * _378) + _613;
    float _628 = ((((_592.x - _618) * _282) + _618) * 2.0) + (-1.0);
    float _629 = ((((_592.y - _619) * _282) + _619) * 2.0) + (-1.0);
    float _630 = dot(vec2(_628, _629), vec2(_628, _629));
    float _3984 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _635 = sqrt(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))));
    float _638 = _628 + (cbMtdParam._m0[21u].w * ((_296.x * 2.0) + (-1.0)));
    float _639 = _629 + (cbMtdParam._m0[21u].w * ((_296.y * 2.0) + (-1.0)));
    float _642 = fma(_635, _245, fma(_639, _237 * TANGENT.x, (_223 * _215) * _638));
    float _645 = fma(_635, _246, fma(_639, _237 * TANGENT.y, (_223 * _216) * _638));
    float _648 = fma(_635, _247, fma(_639, _237 * TANGENT.z, (_223 * _217) * _638));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    float _653 = _652 * _642;
    float _654 = _652 * _645;
    float _655 = _652 * _648;
    float _3995 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _656 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _4006 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4017 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4028 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4039 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _660 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _676 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _726 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _716);
    float _727 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _716);
    float _728 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _716);
    float _732 = inversesqrt(dot(vec3(_726, _727, _728), vec3(_726, _727, _728)));
    float _733 = _726 * _732;
    float _734 = _727 * _732;
    float _735 = _728 * _732;
    vec4 _740 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _742 = _740.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _965 = sqrt(((_726 * _726) + (_727 * _727)) + (_728 * _728));
        float _971 = (cbMatDynParam._m0[5u].x * _965) + cbMatDynParam._m0[5u].y;
        float _4050 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _976 = (cbMatDynParam._m0[5u].z * _965) + cbMatDynParam._m0[5u].w;
        float _4061 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) - _972)) + _972) < ((_742 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _754 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _755 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _757 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _759 = _757.w;
    float _778 = fma(_655, cbSceneParam._m0[5u].z, fma(_654, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _653));
    float _781 = fma(_655, cbSceneParam._m0[6u].z, fma(_654, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _653));
    float _784 = fma(_655, cbSceneParam._m0[7u].z, fma(_654, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _653));
    vec4 _786 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _797 = (((_786.y - _656) + (_786.w * _656)) * cbMtdParam._m0[3u].x) + _656;
    uint _810 = uint(roundEven(NORMAL.w)) * 13u;
    uint _811 = _810 + 9u;
    uint _812 = _811 + uint(cbMatDynParam._m0[0u].w);
    float _818 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_812].x;
    float _819 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_812].y;
    float _820 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_812].z;
    float _4072 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    vec4 _824 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _829 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _840 = (((_829.x - _660) + (_829.w * _660)) * cbMtdParam._m0[3u].x) + _660;
    float _853 = (cbMtdParam._m0[3u].x * (((_821 * _759) - _821) + _824.x)) + _821;
    float _854 = (cbMtdParam._m0[3u].x * (((_822 * _759) - _822) + _824.y)) + _822;
    float _855 = (cbMtdParam._m0[3u].x * (((_823 * _759) - _823) + _824.z)) + _823;
    float _856 = 1.0 - _840;
    float _857 = _856 * _853;
    float _858 = _856 * _854;
    float _859 = _856 * _855;
    float _864 = (_853 + (-0.039999999105930328369140625)) * _840;
    float _865 = (_854 + (-0.039999999105930328369140625)) * _840;
    float _866 = (_855 + (-0.039999999105930328369140625)) * _840;
    float _867 = _864 + 0.039999999105930328369140625;
    float _869 = _865 + 0.039999999105930328369140625;
    float _870 = _866 + 0.039999999105930328369140625;
    vec4 _879 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _754, cbSceneParam._m0[86u].y * _755));
    float _882 = _879.x * TEXCOORD_4;
    float _883 = dot(vec3(_653, _654, _655), vec3(_733, _734, _735));
    float _886 = _883 * 2.0;
    float _890 = (_886 * _653) - _733;
    float _891 = (_886 * _654) - _734;
    float _892 = (_886 * _655) - _735;
    float _896 = abs(dot(vec3(_733, _734, _735), vec3(_653, _654, _655)));
    float _4105 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _898 = sqrt(_797);
    float _911 = exp2((_898 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_898 * 3.0));
    float _917 = (1.0 - _911) * ((_898 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _918 = _911 * _898;
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1284;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1009 = fma(_954, cbModelParam._m0[26u].z, fma(_950, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _946));
        float _1013 = fma(_954, cbModelParam._m0[27u].z, fma(_950, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _946));
        float _1017 = fma(_954, cbModelParam._m0[28u].z, fma(_950, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _946));
        float _1042 = _946 + _653;
        float _1043 = _950 + _654;
        float _1044 = _954 + _655;
        float _1054 = fma(_1044, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1042)) - _1009;
        float _1055 = fma(_1044, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1042)) - _1013;
        float _1056 = fma(_1044, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1042)) - _1017;
        float _1060 = inversesqrt(dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056)));
        float _1073 = ((_1060 * _1054) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1009 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1060 * _1055) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1013 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1060 * _1056) / cbModelParam._m0[34u].z) + ((((((_1017 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        float _1112 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1078.x + (-0.5));
        float _1114 = _1112 * (_1078.y + (-0.5));
        float _1115 = _1112 * (_1078.z + (-0.5));
        float _1122 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1085.x + (-0.5));
        float _1124 = _1122 * (_1085.y + (-0.5));
        float _1125 = _1122 * (_1085.z + (-0.5));
        float _1132 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1092.x + (-0.5));
        float _1134 = _1132 * (_1092.y + (-0.5));
        float _1135 = _1132 * (_1092.z + (-0.5));
        float _1142 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1099.x + (-0.5));
        float _1144 = _1142 * (_1099.y + (-0.5));
        float _1145 = _1142 * (_1099.z + (-0.5));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = _1113 * 0.5;
        float _1150 = _1123 * 0.5;
        float _1151 = _1133 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1166 = (dot(vec3(_653, _654, _655), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1176 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _4153 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1178 + 1.0))) + _1183) * _1146;
        float _1193 = _1114 * 0.5;
        float _1194 = _1124 * 0.5;
        float _1195 = _1134 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_653, _654, _655), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4186 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1220 + 1.0))) + _1225) * _1147;
        float _1235 = _1115 * 0.5;
        float _1236 = _1125 * 0.5;
        float _1237 = _1135 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_653, _654, _655), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4219 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1262 + 1.0))) + _1267) * _1148;
        _1284 = _1115;
        _1286 = _1114;
        _1287 = _1113;
        _1288 = _1125;
        _1289 = _1124;
        _1290 = _1123;
        _1291 = _1135;
        _1292 = _1134;
        _1293 = _1133;
        _1294 = _1148;
        _1295 = _1147;
        _1296 = _1146;
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
    }
    else
    {
        _1284 = _1285;
        _1286 = _1285;
        _1287 = _1285;
        _1288 = _1285;
        _1289 = _1285;
        _1290 = _1285;
        _1291 = _1285;
        _1292 = _1285;
        _1293 = _1285;
        _1294 = _1285;
        _1295 = _1285;
        _1296 = _1285;
        _1297 = 0.0;
        _1298 = 0.0;
        _1299 = 0.0;
    }
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1328 = fma(_954, cbModelParam._m0[30u].z, fma(_950, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _946));
        float _1332 = fma(_954, cbModelParam._m0[31u].z, fma(_950, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _946));
        float _1336 = fma(_954, cbModelParam._m0[32u].z, fma(_950, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _946));
        float _1359 = _946 + _653;
        float _1360 = _950 + _654;
        float _1361 = _954 + _655;
        float _1371 = fma(_1361, cbModelParam._m0[30u].z, fma(_1360, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1359)) - _1328;
        float _1372 = fma(_1361, cbModelParam._m0[31u].z, fma(_1360, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1359)) - _1332;
        float _1373 = fma(_1361, cbModelParam._m0[32u].z, fma(_1360, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1359)) - _1336;
        float _1377 = inversesqrt(dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373)));
        float _1390 = ((_1377 * _1371) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1328 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1377 * _1372) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1332 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1377 * _1373) / cbModelParam._m0[35u].z) + ((((((_1336 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        float _1427 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1394.x + (-0.5));
        float _1429 = _1427 * (_1394.y + (-0.5));
        float _1430 = _1427 * (_1394.z + (-0.5));
        float _1437 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1401.x + (-0.5));
        float _1439 = _1437 * (_1401.y + (-0.5));
        float _1440 = _1437 * (_1401.z + (-0.5));
        float _1447 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1408.x + (-0.5));
        float _1449 = _1447 * (_1408.y + (-0.5));
        float _1450 = _1447 * (_1408.z + (-0.5));
        float _1457 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1415.x + (-0.5));
        float _1459 = _1457 * (_1415.y + (-0.5));
        float _1460 = _1457 * (_1415.z + (-0.5));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = _1428 * 0.5;
        float _1465 = _1438 * 0.5;
        float _1466 = _1448 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_653, _654, _655), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4282 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1491 + 1.0))) + _1496) * _1461;
        float _1506 = _1429 * 0.5;
        float _1507 = _1439 * 0.5;
        float _1508 = _1449 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_653, _654, _655), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4315 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1533 + 1.0))) + _1538) * _1462;
        float _1548 = _1430 * 0.5;
        float _1549 = _1440 * 0.5;
        float _1550 = _1450 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_653, _654, _655), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4348 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1575 + 1.0))) + _1580) * _1463;
        _1597 = _1430;
        _1598 = _1429;
        _1599 = _1428;
        _1600 = _1440;
        _1601 = _1439;
        _1602 = _1438;
        _1603 = _1450;
        _1604 = _1449;
        _1605 = _1448;
        _1606 = _1463;
        _1607 = _1462;
        _1608 = _1461;
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
    }
    else
    {
        _1597 = _1285;
        _1598 = _1285;
        _1599 = _1285;
        _1600 = _1285;
        _1601 = _1285;
        _1602 = _1285;
        _1603 = _1285;
        _1604 = _1285;
        _1605 = _1285;
        _1606 = _1285;
        _1607 = _1285;
        _1608 = _1285;
        _1609 = 0.0;
        _1610 = 0.0;
        _1611 = 0.0;
    }
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1297)) + _1297;
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1298)) + _1298;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1299)) + _1299;
    float _1644 = fma(_1623, cbSceneParam._m0[89u].z, fma(_1622, cbSceneParam._m0[89u].y, _1621 * cbSceneParam._m0[89u].x));
    float _1647 = fma(_1623, cbSceneParam._m0[90u].z, fma(_1622, cbSceneParam._m0[90u].y, _1621 * cbSceneParam._m0[90u].x));
    float _1650 = fma(_1623, cbSceneParam._m0[91u].z, fma(_1622, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1621));
    float _1665 = _890 * 0.5;
    float _1666 = _891 * 0.5;
    float _1667 = _892 * 0.5;
    float _1668 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1671 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1674 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1708;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1681 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1284, _1288, _1291, _1294));
        float _1685 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1689 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1696 = dot(vec4(cbModelParam._m0[39u]), vec4(_1665, _1666, _1667, 1.0));
        _1708 = dot(vec3(isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1696) ? 0.0 : (isnan(0.0) ? _1696 : max(0.0, _1696))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1708 = 1.0;
    }
    float _1719;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1710 = dot(vec4(cbModelParam._m0[40u]), vec4(_1665, _1666, _1667, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1723 = (_1719 * cbModelParam._m0[1u].x) + (_1708 * (1.0 - cbModelParam._m0[1u].x));
    float _1733 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _797);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1733 : min(cbModelParam._m0[25u].z, _1733));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1782 = fma(_954, cbModelParam._m0[13u].z, fma(_950, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _946)) + cbModelParam._m0[13u].w;
        float _1786 = fma(_954, cbModelParam._m0[14u].z, fma(_950, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _946)) + cbModelParam._m0[14u].w;
        float _1790 = fma(_954, cbModelParam._m0[15u].z, fma(_950, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _946)) + cbModelParam._m0[15u].w;
        float _1793 = fma(_892, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890));
        float _1796 = fma(_892, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890));
        float _1799 = fma(_892, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890));
        float _1827;
        if (_1793 > 0.0)
        {
            _1827 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1827 = frontier_phi_19_17_ladder;
        }
        float _1999;
        if (_1796 > 0.0)
        {
            _1999 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1999 = frontier_phi_28_24_ladder;
        }
        float _2294;
        if (_1799 > 0.0)
        {
            _2294 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2294 = frontier_phi_40_35_ladder;
        }
        float _2296 = isnan(_1999) ? _1827 : (isnan(_1827) ? _1999 : min(_1827, _1999));
        float _2297 = isnan(_2294) ? _2296 : (isnan(_2296) ? _2294 : min(_2296, _2294));
        float _2301 = (_2297 * _1793) + _1782;
        float _2302 = (_2297 * _1796) + _1786;
        float _2303 = (_2297 * _1799) + _1790;
        float _2304 = _2297 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2304;
        float _2308 = _2304 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 > _2308) || ((_2302 < _2306) || ((_2301 < _2306) || (_2301 > _2308))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2303, cbModelParam._m0[9u].z, fma(_2302, cbModelParam._m0[9u].y, _2301 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2303, cbModelParam._m0[10u].z, fma(_2302, cbModelParam._m0[10u].y, _2301 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2303, cbModelParam._m0[11u].z, fma(_2302, cbModelParam._m0[11u].y, _2301 * cbModelParam._m0[11u].x))), _1734);
            frontier_phi_18_40_ladder = _2448.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2448.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2448.x * cbModelParam._m0[1u].y;
        }
        _1815 = frontier_phi_18_40_ladder_2;
        _1817 = frontier_phi_18_40_ladder_1;
        _1819 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1803 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_890, _891, _892), _1734);
        _1815 = _1803.x * cbModelParam._m0[1u].y;
        _1817 = _1803.y * cbModelParam._m0[1u].y;
        _1819 = _1803.z * cbModelParam._m0[1u].y;
    }
    float _1823 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _797);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1823 : min(cbModelParam._m0[25u].w, _1823));
    float _1914;
    float _1916;
    float _1918;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1878 = fma(_954, cbModelParam._m0[21u].z, fma(_950, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _946)) + cbModelParam._m0[21u].w;
        float _1882 = fma(_954, cbModelParam._m0[22u].z, fma(_950, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _946)) + cbModelParam._m0[22u].w;
        float _1886 = fma(_954, cbModelParam._m0[23u].z, fma(_950, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _946)) + cbModelParam._m0[23u].w;
        float _1889 = fma(_892, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890));
        float _1892 = fma(_892, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890));
        float _1895 = fma(_892, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890));
        float _2004;
        if (_1889 > 0.0)
        {
            _2004 = abs((1.0 - _1878) / _1889);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1878 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2004 = frontier_phi_30_26_ladder;
        }
        float _2321;
        if (_1892 > 0.0)
        {
            _2321 = abs((1.0 - _1882) / _1892);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1882 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2321 = frontier_phi_42_37_ladder;
        }
        float _2659;
        if (_1895 > 0.0)
        {
            _2659 = abs((1.0 - _1886) / _1895);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1886 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2659 = frontier_phi_52_49_ladder;
        }
        float _2661 = isnan(_2321) ? _2004 : (isnan(_2004) ? _2321 : min(_2004, _2321));
        float _2662 = isnan(_2659) ? _2661 : (isnan(_2661) ? _2659 : min(_2661, _2659));
        float _2666 = (_2662 * _1889) + _1878;
        float _2667 = (_2662 * _1892) + _1882;
        float _2668 = (_2662 * _1895) + _1886;
        float _2669 = _2662 * 9.9999997473787516355514526367188e-05;
        float _2670 = (-1.0) - _2669;
        float _2672 = _2669 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2668 > _2672) || ((_2668 < _2670) || ((_2667 > _2672) || ((_2667 < _2670) || ((_2666 < _2670) || (_2666 > _2672))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2668, cbModelParam._m0[17u].z, fma(_2667, cbModelParam._m0[17u].y, _2666 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2668, cbModelParam._m0[18u].z, fma(_2667, cbModelParam._m0[18u].y, _2666 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2668, cbModelParam._m0[19u].z, fma(_2667, cbModelParam._m0[19u].y, _2666 * cbModelParam._m0[19u].x))), _1824);
            frontier_phi_27_52_ladder = _2790.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2790.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2790.x * cbModelParam._m0[1u].z;
        }
        _1914 = frontier_phi_27_52_ladder_2;
        _1916 = frontier_phi_27_52_ladder_1;
        _1918 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_890, _891, _892), _1824);
        _1914 = _1898.x * cbModelParam._m0[1u].z;
        _1916 = _1898.y * cbModelParam._m0[1u].z;
        _1918 = _1898.z * cbModelParam._m0[1u].z;
    }
    float _1931 = (((_917 * _867) + _918) * _882) * ((cbModelParam._m0[1u].w * (_1914 - _1815)) + _1815);
    float _1933 = (((_917 * _869) + _918) * _882) * ((cbModelParam._m0[1u].w * (_1916 - _1817)) + _1817);
    float _1935 = (((_917 * _870) + _918) * _882) * ((cbModelParam._m0[1u].w * (_1918 - _1819)) + _1819);
    float _1938 = fma(_1935, cbSceneParam._m0[89u].z, fma(_1933, cbSceneParam._m0[89u].y, _1931 * cbSceneParam._m0[89u].x));
    float _1941 = fma(_1935, cbSceneParam._m0[90u].z, fma(_1933, cbSceneParam._m0[90u].y, _1931 * cbSceneParam._m0[90u].x));
    float _1944 = fma(_1935, cbSceneParam._m0[91u].z, fma(_1933, cbSceneParam._m0[91u].y, _1931 * cbSceneParam._m0[91u].x));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1991 = _1978 / _1990;
    float _1992 = _1982 / _1990;
    float _1993 = _1986 / _1990;
    float _2140;
    float _2141;
    float _2142;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2020 = ((uint(_1993 > cbSceneParam._m0[59u].y) + uint(_1993 > cbSceneParam._m0[59u].x)) + uint(_1993 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2021 = _2020 + 43u;
        uint _2029 = _2020 + 44u;
        uint _2037 = _2020 + 45u;
        uint _2045 = _2020 + 46u;
        float _2056 = fma(_1990, cbSceneParam._m0[_2021].w, fma(_1986, cbSceneParam._m0[_2021].z, fma(_1982, cbSceneParam._m0[_2021].y, _1978 * cbSceneParam._m0[_2021].x)));
        float _2060 = fma(_1990, cbSceneParam._m0[_2029].w, fma(_1986, cbSceneParam._m0[_2029].z, fma(_1982, cbSceneParam._m0[_2029].y, _1978 * cbSceneParam._m0[_2029].x)));
        float _2068 = fma(_1990, cbSceneParam._m0[_2045].w, fma(_1986, cbSceneParam._m0[_2045].z, fma(_1982, cbSceneParam._m0[_2045].y, _1978 * cbSceneParam._m0[_2045].x)));
        float _2073 = cbSceneParam._m0[33u].z * _2068;
        float _2075 = cbSceneParam._m0[33u].w * _2068;
        float _2078 = fma(_1990, cbSceneParam._m0[_2037].w, fma(_1986, cbSceneParam._m0[_2037].z, fma(_1982, cbSceneParam._m0[_2037].y, _1978 * cbSceneParam._m0[_2037].x))) / _2068;
        float _2126 = (cbSceneParam._m0[33u].x - sqrt(((_1992 * _1992) + (_1991 * _1991)) + (_1993 * _1993))) * cbSceneParam._m0[33u].y;
        float _4474 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2133 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2073 + _2056) / _2068, (_2075 + _2060) / _2068), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2075 + _2056) / _2068, (_2060 - _2073) / _2068), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2056 - _2073) / _2068, (_2060 - _2075) / _2068), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2056 - _2075) / _2068, (_2073 + _2060) / _2068), _2078), 0.0)).x), vec4(0.25)));
        _2140 = 1.0 - (_2133 * cbSceneParam._m0[34u].x);
        _2141 = 1.0 - (_2133 * cbSceneParam._m0[34u].y);
        _2142 = 1.0 - (_2133 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2140 = 1.0;
        _2141 = 1.0;
        _2142 = 1.0;
    }
    float _2206;
    float _2208;
    float _2210;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2194 = fma(_1990, cbSceneParam._m0[63u].w, fma(_1986, cbSceneParam._m0[63u].z, fma(_1982, cbSceneParam._m0[63u].y, _1978 * cbSceneParam._m0[63u].x)));
        float _2195 = fma(_1990, cbSceneParam._m0[60u].w, fma(_1986, cbSceneParam._m0[60u].z, fma(_1982, cbSceneParam._m0[60u].y, _1978 * cbSceneParam._m0[60u].x))) / _2194;
        float _2196 = fma(_1990, cbSceneParam._m0[61u].w, fma(_1986, cbSceneParam._m0[61u].z, fma(_1982, cbSceneParam._m0[61u].y, _1978 * cbSceneParam._m0[61u].x))) / _2194;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2195 >= cbSceneParam._m0[64u].x) && (_2196 >= cbSceneParam._m0[64u].y)) && (_2195 <= cbSceneParam._m0[64u].z)) && (_2196 <= cbSceneParam._m0[64u].w))
        {
            float _2334 = fma(_1990, cbSceneParam._m0[62u].w, fma(_1986, cbSceneParam._m0[62u].z, fma(_1982, cbSceneParam._m0[62u].y, _1978 * cbSceneParam._m0[62u].x))) / _2194;
            float _2338 = isnan(cbSceneParam._m0[41u].w) ? _2334 : (isnan(_2334) ? cbSceneParam._m0[41u].w : max(_2334, cbSceneParam._m0[41u].w));
            float _2381 = (cbSceneParam._m0[33u].x - sqrt(((_1992 * _1992) + (_1991 * _1991)) + (_1993 * _1993))) * cbSceneParam._m0[33u].y;
            float _4490 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
            float _2388 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2195, cbSceneParam._m0[33u].w + _2196), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2195, _2196 - cbSceneParam._m0[33u].z), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2195 - cbSceneParam._m0[33u].z, _2196 - cbSceneParam._m0[33u].w), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2195 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2196), _2338), 0.0)).x), vec4(0.25)));
            float _2392 = 1.0 - (_2388 * cbSceneParam._m0[34u].x);
            float _2393 = 1.0 - (_2388 * cbSceneParam._m0[34u].y);
            float _2394 = 1.0 - (_2388 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2393) ? _2141 : (isnan(_2141) ? _2393 : min(_2141, _2393));
            frontier_phi_39_38_ladder_1 = isnan(_2392) ? _2140 : (isnan(_2140) ? _2392 : min(_2140, _2392));
            frontier_phi_39_38_ladder_2 = isnan(_2394) ? _2142 : (isnan(_2142) ? _2394 : min(_2142, _2394));
        }
        else
        {
            frontier_phi_39_38_ladder = _2141;
            frontier_phi_39_38_ladder_1 = _2140;
            frontier_phi_39_38_ladder_2 = _2142;
        }
        _2206 = frontier_phi_39_38_ladder_1;
        _2208 = frontier_phi_39_38_ladder;
        _2210 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2206 = _2140;
        _2208 = _2141;
        _2210 = _2142;
    }
    uvec4 _2215 = floatBitsToUint(cbInstanceData._m0[_810 + 5u]);
    uint _2217 = _2215.x * 14u;
    uint _2218 = _2217 + 13u;
    float _2225 = _882 + (-1.0);
    float _2230 = (cbLight._m0[_2218].x * _2225) + 1.0;
    float _2231 = (cbLight._m0[_2218].y * _2225) + 1.0;
    float _2232 = (cbLight._m0[_2218].z * _2225) + 1.0;
    float _2233 = (cbLight._m0[_2218].w * _2225) + 1.0;
    uint _2234 = _2217 + 5u;
    float _2240 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
    uint _2244 = _2217 + 4u;
    float _2253 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2257 = _2217 | 1u;
    float _2268 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_653, _654, _655));
    float _2271 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_653, _654, _655));
    float _4526 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _4537 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2276 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * 0.3183098733425140380859375;
    float _2278 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * 0.3183098733425140380859375;
    float _2285 = ((cbLight._m0[_2234].x * _2240) * _2278) + (((cbLight._m0[_2244].x * _2206) * _2253) * _2276);
    float _2286 = ((_2240 * cbLight._m0[_2234].y) * _2278) + (((cbLight._m0[_2244].y * _2208) * _2253) * _2276);
    float _2287 = ((_2240 * cbLight._m0[_2234].z) * _2278) + (((cbLight._m0[_2244].z * _2210) * _2253) * _2276);
    uvec4 _2291 = floatBitsToUint(cbLight._m0[_2217 + 12u]);
    bool _2293 = _2291.x == 0u;
    float _2395;
    float _2397;
    float _2399;
    if (_2293)
    {
        _2395 = _2285;
        _2397 = _2286;
        _2399 = _2287;
    }
    else
    {
        uint _2403 = _2217 + 6u;
        float _2419 = (dot(vec3(cbLight._m0[_2217 + 2u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2420 = _2419 * _2419;
        float _4548 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2421 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2422 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2395 = (((cbLight._m0[_2403].x * 0.3183098733425140380859375) * _2421) * _2422) + _2285;
        _2397 = (((cbLight._m0[_2403].y * 0.3183098733425140380859375) * _2421) * _2422) + _2286;
        _2399 = (((cbLight._m0[_2403].z * 0.3183098733425140380859375) * _2421) * _2422) + _2287;
    }
    bool _2402 = _2291.y == 0u;
    float _2457;
    float _2459;
    float _2461;
    if (_2402)
    {
        _2457 = _2395;
        _2459 = _2397;
        _2461 = _2399;
    }
    else
    {
        uint _2630 = _2217 + 7u;
        float _2646 = (dot(vec3(cbLight._m0[_2217 + 3u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2647 = _2646 * _2646;
        float _4564 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2648 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2649 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2457 = (((cbLight._m0[_2630].x * 0.3183098733425140380859375) * _2648) * _2649) + _2395;
        _2459 = (((cbLight._m0[_2630].y * 0.3183098733425140380859375) * _2648) * _2649) + _2397;
        _2461 = (((cbLight._m0[_2630].z * 0.3183098733425140380859375) * _2648) * _2649) + _2399;
    }
    uint _2464 = _2217 + 8u;
    float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2217].w)) * _797) * 0.949999988079071044921875);
    float _2478 = _2477 * _2477;
    float _2479 = cbLight._m0[_2217].x + _733;
    float _2480 = cbLight._m0[_2217].y + _734;
    float _2481 = cbLight._m0[_2217].z + _735;
    float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
    float _2486 = _2485 * _2479;
    float _2487 = _2485 * _2480;
    float _2488 = _2485 * _2481;
    float _2489 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2217].xyz));
    float _4580 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _4591 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _2493 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2494 = dot(vec3(_653, _654, _655), vec3(_2486, _2487, _2488));
    float _4602 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2498 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2486, _2487, _2488));
    float _4613 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2502 = _2478 * _2478;
    float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
    float _2514 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
    float _2515 = 0.959999978542327880859375 - _864;
    float _2517 = 0.959999978542327880859375 - _865;
    float _2518 = 0.959999978542327880859375 - _866;
    float _2525 = 1.0 - _2478;
    float _2536 = (0.5 / (((_2493 * ((_2492 * _2525) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2525) + _2478) * _2492))) * _2492;
    float _4624 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2538 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
    uint _2552 = _2217 + 9u;
    float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _797) * 0.949999988079071044921875);
    float _2564 = _2563 * _2563;
    float _2565 = cbLight._m0[_2257].x + _733;
    float _2566 = cbLight._m0[_2257].y + _734;
    float _2567 = cbLight._m0[_2257].z + _735;
    float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
    float _2572 = _2571 * _2565;
    float _2573 = _2571 * _2566;
    float _2574 = _2571 * _2567;
    float _2575 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2257].xyz));
    float _4635 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _2579 = dot(vec3(_653, _654, _655), vec3(_2572, _2573, _2574));
    float _4646 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
    float _2583 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2572, _2573, _2574));
    float _4657 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2587 = _2564 * _2564;
    float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
    float _2598 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
    float _2605 = 1.0 - _2564;
    float _2615 = (0.5 / (((_2493 * ((_2578 * _2605) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2605) + _2564) * _2578))) * _2578;
    float _4668 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2617 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
    float _2627 = (((((_2598 * _2515) + _867) * cbLight._m0[_2552].x) * _2617) * _2240) + ((((cbLight._m0[_2464].x * _2206) * ((_2514 * _2515) + _867)) * _2538) * _2253);
    float _2628 = (((((_2598 * _2517) + _869) * cbLight._m0[_2552].y) * _2617) * _2240) + ((((cbLight._m0[_2464].y * _2208) * ((_2514 * _2517) + _869)) * _2538) * _2253);
    float _2629 = (((((_2598 * _2518) + _870) * cbLight._m0[_2552].z) * _2617) * _2240) + ((((cbLight._m0[_2464].z * _2210) * ((_2514 * _2518) + _870)) * _2538) * _2253);
    float _2685;
    float _2687;
    float _2689;
    if (_2293)
    {
        _2685 = _2627;
        _2687 = _2628;
        _2689 = _2629;
    }
    else
    {
        uint _2691 = _2217 + 2u;
        uint _2695 = _2217 + 10u;
        float _2709 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2691].w)) * _797) * 0.949999988079071044921875);
        float _2710 = _2709 * _2709;
        float _2711 = cbLight._m0[_2691].x + _733;
        float _2712 = cbLight._m0[_2691].y + _734;
        float _2713 = cbLight._m0[_2691].z + _735;
        float _2717 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
        float _2718 = _2717 * _2711;
        float _2719 = _2717 * _2712;
        float _2720 = _2717 * _2713;
        float _2721 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2691].xyz));
        float _4679 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2725 = dot(vec3(_653, _654, _655), vec3(_2718, _2719, _2720));
        float _4690 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2729 = dot(vec3(cbLight._m0[_2691].xyz), vec3(_2718, _2719, _2720));
        float _4701 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2733 = _2710 * _2710;
        float _2737 = ((_2728 * _2728) * (_2733 + (-1.0))) + 1.0;
        float _2744 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
        float _2751 = 1.0 - _2710;
        float _2761 = (0.5 / (((_2493 * ((_2724 * _2751) + _2710)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2751) + _2710) * _2724))) * _2724;
        float _4712 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2763 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2733 / ((_2737 * _2737) * 3.141590118408203125));
        float _2764 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2685 = (((((_2744 * _2515) + _867) * cbLight._m0[_2695].x) * _2763) * _2764) + _2627;
        _2687 = (((((_2744 * _2517) + _869) * cbLight._m0[_2695].y) * _2763) * _2764) + _2628;
        _2689 = (((((_2744 * _2518) + _870) * cbLight._m0[_2695].z) * _2763) * _2764) + _2629;
    }
    float _2795;
    float _2797;
    float _2799;
    if (_2402)
    {
        _2795 = _2685;
        _2797 = _2687;
        _2799 = _2689;
    }
    else
    {
        uint _2806 = _2217 + 3u;
        uint _2810 = _2217 + 11u;
        float _2824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2806].w)) * _797) * 0.949999988079071044921875);
        float _2825 = _2824 * _2824;
        float _2826 = cbLight._m0[_2806].x + _733;
        float _2827 = cbLight._m0[_2806].y + _734;
        float _2828 = cbLight._m0[_2806].z + _735;
        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
        float _2833 = _2832 * _2826;
        float _2834 = _2832 * _2827;
        float _2835 = _2832 * _2828;
        float _2836 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2806].xyz));
        float _4728 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2840 = dot(vec3(_653, _654, _655), vec3(_2833, _2834, _2835));
        float _4739 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2844 = dot(vec3(cbLight._m0[_2806].xyz), vec3(_2833, _2834, _2835));
        float _4750 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2848 = _2825 * _2825;
        float _2852 = ((_2843 * _2843) * (_2848 + (-1.0))) + 1.0;
        float _2859 = exp2(log2(1.0 - (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) * 5.0);
        float _2866 = 1.0 - _2825;
        float _2876 = (0.5 / (((_2493 * ((_2839 * _2866) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2866) + _2825) * _2839))) * _2839;
        float _4761 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2878 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2848 / ((_2852 * _2852) * 3.141590118408203125));
        float _2879 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2795 = (((((_2859 * _2515) + _867) * cbLight._m0[_2810].x) * _2878) * _2879) + _2685;
        _2797 = (((((_2859 * _2517) + _869) * cbLight._m0[_2810].y) * _2878) * _2879) + _2687;
        _2799 = (((((_2859 * _2518) + _870) * cbLight._m0[_2810].z) * _2878) * _2879) + _2689;
    }
    float _2944;
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_2215.y == 0u)
    {
        uvec4 _2900 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2901 = _2900.x;
        uint _2912 = uint((float(_2900.y) * floor(float(uint(cbSceneParam._m0[85u].y * _755) / _2901))) + floor(float(uint(cbSceneParam._m0[85u].x * _754) / _2901)));
        float _2922 = (log2(_1993 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2923 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        uint _2926 = uint(isnan(14.0) ? _2923 : (isnan(_2923) ? 14.0 : min(_2923, 14.0)));
        uvec4 _2931 = texelFetch(g_lightClusterGridBuffer, int(((_2926 << 2u) + (_2912 << 6u)) >> 2u));
        uint _2932 = _2931.x;
        uint _2933 = _2900.z;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        if (((((1u << ((_2933 >> 4u) & 15u)) + 4294967295u) & _2932) == 0u) || ((_2933 & 240u) == 0u))
        {
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
        }
        else
        {
            float _3012;
            float _3014;
            float _3016;
            float _3018;
            float _3020;
            float _3022;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            uint _3169 = 0u;
            uint _3178;
            bool _3179;
            for (;;)
            {
                _3178 = texelFetch(g_lightClassification, int((((_2926 << 5u) + (_2912 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                _3179 = _3178 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3179)
                {
                    frontier_phi_73_pred = _3168;
                    frontier_phi_73_pred_1 = _3167;
                    frontier_phi_73_pred_2 = _3166;
                    frontier_phi_73_pred_3 = _3165;
                    frontier_phi_73_pred_4 = _3164;
                    frontier_phi_73_pred_5 = _3163;
                }
                else
                {
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    uint _3314;
                    _3308 = _3163;
                    _3309 = _3164;
                    _3310 = _3165;
                    _3311 = _3166;
                    _3312 = _3167;
                    _3313 = _3168;
                    _3314 = _3178;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    for (;;)
                    {
                        uint _3318 = uint(findLSB(_3314)) + (_3169 << 5u);
                        uint _3315 = (_3314 + 4294967295u) & _3314;
                        uint _3320 = _3318 * 48u;
                        vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3340 = (_3318 * 48u) + 4u;
                        vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 3u)).x));
                        uint _3359 = (_3318 * 48u) + 8u;
                        vec3 _3370 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x));
                        float _3374 = _3334.x - _1991;
                        float _3375 = _3334.y - _1992;
                        float _3376 = _3334.z - _1993;
                        float _3377 = dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376));
                        float _3380 = inversesqrt(_3377);
                        float _3381 = _3380 * _3374;
                        float _3382 = _3380 * _3375;
                        float _3383 = _3380 * _3376;
                        float _3384 = dot(vec3(_778, _781, _784), vec3(_3381, _3382, _3383));
                        float _3389 = 1.0 - (_3377 * _3334.w);
                        float _4787 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3390 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3391 = sqrt(_3377) * _3353.w;
                        float _3394 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                        float _3395 = _3394 * _3394;
                        float _3398 = ((1.0 - _3395) * _3384) + _3395;
                        float _3401 = _3391 * _3391;
                        float _3405 = ((isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))) * _3390) / ((_3401 * 0.699999988079071044921875) + 1.0);
                        float _3409 = (-0.0) - _1991;
                        float _3410 = (-0.0) - _1992;
                        float _3411 = (-0.0) - _1993;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3425 = exp2(log2(1.0 / ((_3401 * 3.5) + 5.0)) * 0.25);
                        float _3426 = 1.0 - _898;
                        float _3433 = sqrt(1.0 - ((1.0 - (_3426 * _3426)) * (1.0 - (_3425 * _3425))));
                        float _3434 = _3433 * _3433;
                        float _3435 = _3434 * _3434;
                        float _3436 = _3416 + _3381;
                        float _3437 = _3417 + _3382;
                        float _3438 = _3418 + _3383;
                        float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                        float _3446 = dot(vec3(_778, _781, _784), vec3(_3416, _3417, _3418));
                        float _4803 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3449 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3450 = dot(vec3(_778, _781, _784), vec3(_3442 * _3436, _3442 * _3437, _3442 * _3438));
                        float _4814 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3453 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3457 = ((_3453 * _3453) * (_3435 + (-1.0))) + 1.0;
                        float _3458 = _3394 * _3434;
                        float _3459 = _3458 * _3458;
                        float _3462 = ((1.0 - _3459) * _3384) + _3459;
                        float _4825 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3463 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                        float _3464 = 1.0 - _3434;
                        float _3474 = (0.5 / (((_3463 * ((_3449 * _3464) + _3434)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3434) * _3449))) * _3463;
                        float _4836 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3485 = (((_3435 * 3.1415927410125732421875) * (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) / ((_3457 * _3457) * ((_3401 * 2.1991131305694580078125) + 3.141590118408203125))) * _3390;
                        _3238 = (_3405 * _3353.x) + _3311;
                        _3239 = (_3405 * _3353.y) + _3312;
                        _3240 = (_3405 * _3353.z) + _3313;
                        _3235 = (_3485 * _3370.x) + _3308;
                        _3236 = (_3485 * _3370.y) + _3309;
                        _3237 = (_3485 * _3370.z) + _3310;
                        if (_3315 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3308 = _3235;
                            _3309 = _3236;
                            _3310 = _3237;
                            _3311 = _3238;
                            _3312 = _3239;
                            _3313 = _3240;
                            _3314 = _3315;
                        }
                    }
                    frontier_phi_73_pred = _3240;
                    frontier_phi_73_pred_1 = _3239;
                    frontier_phi_73_pred_2 = _3238;
                    frontier_phi_73_pred_3 = _3237;
                    frontier_phi_73_pred_4 = _3236;
                    frontier_phi_73_pred_5 = _3235;
                }
                _3022 = frontier_phi_73_pred;
                _3020 = frontier_phi_73_pred_1;
                _3018 = frontier_phi_73_pred_2;
                _3016 = frontier_phi_73_pred_3;
                _3014 = frontier_phi_73_pred_4;
                _3012 = frontier_phi_73_pred_5;
                uint _3170 = _3169 + 1u;
                if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3163 = _3012;
                    _3164 = _3014;
                    _3165 = _3016;
                    _3166 = _3018;
                    _3167 = _3020;
                    _3168 = _3022;
                    _3169 = _3170;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
        }
        uvec4 _3025 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3026 = _3025.z;
        uint _3028 = (_3026 >> 8u) & 15u;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        if (((4294967295u << _3028) & _2932) == 0u)
        {
            _3131 = _3011;
            _3133 = _3013;
            _3135 = _3015;
            _3137 = _3017;
            _3139 = _3019;
            _3141 = _3021;
        }
        else
        {
            float _3156 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
            float _3157 = _3156 * _1991;
            float _3158 = _3156 * _1992;
            float _3159 = _3156 * _1993;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3028 < ((_3026 >> 12u) & 15u))
            {
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3291 = _3011;
                float _3292 = _3013;
                float _3293 = _3015;
                float _3294 = _3017;
                float _3295 = _3019;
                float _3296 = _3021;
                uint _3297 = _3028;
                uint _3306;
                bool _3307;
                for (;;)
                {
                    _3306 = texelFetch(g_lightClassification, int((((_2926 << 5u) + (_2912 << 9u)) + (_3297 << 2u)) >> 2u)).x;
                    _3307 = _3306 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3307)
                    {
                        frontier_phi_84_pred = _3295;
                        frontier_phi_84_pred_1 = _3294;
                        frontier_phi_84_pred_2 = _3293;
                        frontier_phi_84_pred_3 = _3292;
                        frontier_phi_84_pred_4 = _3291;
                        frontier_phi_84_pred_5 = _3296;
                    }
                    else
                    {
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3512 = _3291;
                        float _3513 = _3292;
                        float _3514 = _3293;
                        float _3515 = _3294;
                        float _3516 = _3295;
                        float _3517 = _3296;
                        uint _3518 = _3306;
                        uint _3519;
                        vec4 _3544;
                        float _3545;
                        vec4 _3560;
                        vec3 _3572;
                        vec4 _3588;
                        vec4 _3603;
                        float _3650;
                        bool _3651;
                        for (;;)
                        {
                            uint _3529 = ((_3297 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3518));
                            _3519 = (_3518 + 4294967295u) & _3518;
                            uint _3531 = _3529 * 40u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            _3545 = _3544.w;
                            uint _3547 = (_3529 * 40u) + 4u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3529 * 40u) + 8u;
                            _3572 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x));
                            uint _3575 = (_3529 * 40u) + 16u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3590 = (_3529 * 40u) + 20u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3606 = (_3529 * 40u) + 24u;
                            vec4 _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3625 = (_3529 * 40u) + 28u;
                            vec4 _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            _3650 = fma(_1993, _3638.z, fma(_1992, _3638.y, _3638.x * _1991)) + _3638.w;
                            _3651 = !((fma(_1993, _3619.z, fma(_1992, _3619.y, _3619.x * _1991)) + _3619.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3651)
                            {
                                float _3678 = _3544.x - _1991;
                                float _3679 = _3544.y - _1992;
                                float _3680 = _3544.z - _1993;
                                float _3681 = dot(vec3(_3678, _3679, _3680), vec3(_3678, _3679, _3680));
                                float _3684 = inversesqrt(_3681);
                                float _3685 = _3684 * _3678;
                                float _3686 = _3684 * _3679;
                                float _3687 = _3684 * _3680;
                                float _3691 = 1.0 - (_3681 / (_3545 * _3545));
                                float _4847 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3696 = sqrt(_3681) * _3560.w;
                                float _3698 = 1.39999997615814208984375 / (_3696 + 1.39999997615814208984375);
                                float _3699 = _3698 * _3698;
                                float _3702 = ((1.0 - _3699) * dot(vec3(_3685, _3686, _3687), vec3(_778, _781, _784))) + _3699;
                                float _3705 = _3696 * _3696;
                                float _3709 = (fma(_1993, _3588.z, fma(_1992, _3588.y, _3588.x * _1991)) + _3588.w) / _3650;
                                float _3710 = (fma(_1993, _3603.z, fma(_1992, _3603.y, _3603.x * _1991)) + _3603.w) / _3650;
                                float _3714 = 1.0 - dot(vec2(_3709, _3710), vec2(_3709, _3710));
                                float _4863 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3716 = _3715 * (((isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0))) * _3692) / ((_3705 * 0.699999988079071044921875) + 1.0));
                                float _3728 = exp2(log2(1.0 / ((_3705 * 3.5) + 5.0)) * 0.25);
                                float _3729 = 1.0 - _898;
                                float _3736 = sqrt(1.0 - ((1.0 - (_3729 * _3729)) * (1.0 - (_3728 * _3728))));
                                float _3737 = _3736 * _3736;
                                float _3738 = _3737 * _3737;
                                float _3739 = _3685 - _3157;
                                float _3740 = _3686 - _3158;
                                float _3741 = _3687 - _3159;
                                float _3745 = inversesqrt(dot(vec3(_3739, _3740, _3741), vec3(_3739, _3740, _3741)));
                                float _3749 = dot(vec3(_778, _781, _784), vec3((-0.0) - _3157, (-0.0) - _3158, (-0.0) - _3159));
                                float _4874 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3752 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3753 = dot(vec3(_778, _781, _784), vec3(_3745 * _3739, _3745 * _3740, _3745 * _3741));
                                float _4885 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3756 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3760 = ((_3756 * _3756) * (_3738 + (-1.0))) + 1.0;
                                float _3761 = _3698 * _3737;
                                float _3762 = _3761 * _3761;
                                float _3768 = ((1.0 - _3762) * dot(vec3(_778, _781, _784), vec3(_3685, _3686, _3687))) + _3762;
                                float _4896 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3769 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3770 = 1.0 - _3737;
                                float _3780 = (0.5 / (((_3769 * ((_3752 * _3770) + _3737)) + 9.9999999392252902907785028219223e-09) + (((_3769 * _3770) + _3737) * _3752))) * _3769;
                                float _4907 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3790 = (_3715 * _3692) * (((_3738 * 3.1415927410125732421875) * (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0)))) / ((_3760 * _3760) * ((_3705 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3716 * _3560.y;
                                frontier_phi_90_pred_1 = _3716 * _3560.x;
                                frontier_phi_90_pred_2 = _3790 * _3572.z;
                                frontier_phi_90_pred_3 = _3790 * _3572.y;
                                frontier_phi_90_pred_4 = _3790 * _3572.x;
                                frontier_phi_90_pred_5 = _3716 * _3560.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3798 = frontier_phi_90_pred;
                            _3797 = frontier_phi_90_pred_1;
                            _3796 = frontier_phi_90_pred_2;
                            _3795 = frontier_phi_90_pred_3;
                            _3794 = frontier_phi_90_pred_4;
                            _3799 = frontier_phi_90_pred_5;
                            _3502 = _3797 + _3515;
                            _3503 = _3798 + _3516;
                            _3504 = _3799 + _3517;
                            _3499 = _3794 + _3512;
                            _3500 = _3795 + _3513;
                            _3501 = _3796 + _3514;
                            if (_3519 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3519;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3503;
                        frontier_phi_84_pred_1 = _3502;
                        frontier_phi_84_pred_2 = _3501;
                        frontier_phi_84_pred_3 = _3500;
                        frontier_phi_84_pred_4 = _3499;
                        frontier_phi_84_pred_5 = _3504;
                    }
                    _3140 = frontier_phi_84_pred;
                    _3138 = frontier_phi_84_pred_1;
                    _3136 = frontier_phi_84_pred_2;
                    _3134 = frontier_phi_84_pred_3;
                    _3132 = frontier_phi_84_pred_4;
                    _3142 = frontier_phi_84_pred_5;
                    uint _3298 = _3297 + 1u;
                    if (_3298 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3291 = _3132;
                        _3292 = _3134;
                        _3293 = _3136;
                        _3294 = _3138;
                        _3295 = _3140;
                        _3296 = _3142;
                        _3297 = _3298;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3142;
                frontier_phi_65_66_ladder_1 = _3138;
                frontier_phi_65_66_ladder_2 = _3140;
                frontier_phi_65_66_ladder_3 = _3134;
                frontier_phi_65_66_ladder_4 = _3132;
                frontier_phi_65_66_ladder_5 = _3136;
            }
            else
            {
                frontier_phi_65_66_ladder = _3021;
                frontier_phi_65_66_ladder_1 = _3017;
                frontier_phi_65_66_ladder_2 = _3019;
                frontier_phi_65_66_ladder_3 = _3013;
                frontier_phi_65_66_ladder_4 = _3011;
                frontier_phi_65_66_ladder_5 = _3015;
            }
            _3131 = frontier_phi_65_66_ladder_4;
            _3133 = frontier_phi_65_66_ladder_3;
            _3135 = frontier_phi_65_66_ladder_5;
            _3137 = frontier_phi_65_66_ladder_1;
            _3139 = frontier_phi_65_66_ladder_2;
            _3141 = frontier_phi_65_66_ladder;
        }
        float _3146 = isnan(1.0) ? _882 : (isnan(_882) ? 1.0 : min(_882, 1.0));
        _2944 = (_3146 * _3137) + _2457;
        _2946 = (_3146 * _3139) + _2459;
        _2948 = (_3146 * _3141) + _2461;
        _2950 = ((_3131 * _867) * _3146) + _2795;
        _2952 = ((_3133 * _869) * _3146) + _2797;
        _2954 = ((_3135 * _870) * _3146) + _2799;
    }
    else
    {
        _2944 = _2457;
        _2946 = _2459;
        _2948 = _2461;
        _2950 = _2795;
        _2952 = _2797;
        _2954 = _2799;
    }
    float _4923 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4934 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4945 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _2971 = ((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2944 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _882))) + ((_2950 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1723)) * cbPerFrame._m0[3u].x);
    float _2972 = ((isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_2946 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _882))) + ((_2952 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1723)) * cbPerFrame._m0[3u].x);
    float _2973 = ((isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2948 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _882))) + ((_2954 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1723)) * cbPerFrame._m0[3u].x);
    uint _2974 = _810 + 6u;
    float _2982 = _754 / cbSceneParam._m0[86u].x;
    float _2983 = _755 / cbSceneParam._m0[86u].y;
    vec4 _2997 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2982, _2983, (log2((isnan(cbSceneParam._m0[77u].w) ? _676 : (isnan(_676) ? cbSceneParam._m0[77u].w : min(_676, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2999 = _2997.x;
    float _3000 = _2997.y;
    float _3001 = _2997.z;
    float _3002 = _2997.w;
    float _3073;
    float _3075;
    float _3077;
    float _3079;
    if (_676 > cbSceneParam._m0[78u].w)
    {
        float _3036 = isnan(_676) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _676 : min(cbSceneParam._m0[80u].w, _676));
        float _3037 = _3036 / _676;
        float _3048 = _3037 * _726;
        float _3049 = _727 * _3037;
        float _3050 = (-0.0) - _3049;
        float _3051 = _3037 * _728;
        float _3053 = (cbSceneParam._m0[77u].w * _3050) / _3036;
        float _3054 = _3053 + cbSceneParam._m0[79u].w;
        float _3055 = cbSceneParam._m0[79u].w - _3049;
        float _3061 = sqrt(((_3048 * _3048) + (_3049 * _3049)) + (_3051 * _3051));
        float _3064 = (1.0 - (cbSceneParam._m0[77u].w / _3036)) * _3061;
        float _3069 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3071 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3248;
        if (abs((_3050 - _3053) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3248 = ((((_3054 > 0.0) ? exp2(_3069 * _3054) : (2.0 - exp2(_3071 * _3054))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3064;
        }
        else
        {
            float _3192 = 1.0 / cbSceneParam._m0[80u].x;
            float _3193 = isnan(_3055) ? _3054 : (isnan(_3054) ? _3055 : max(_3054, _3055));
            float _3194 = isnan(_3055) ? _3054 : (isnan(_3054) ? _3055 : min(_3054, _3055));
            float _3203 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : min(_3193, 0.0));
            float _3204 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : min(_3194, 0.0));
            _3248 = ((abs(_3061 / _3050) * cbSceneParam._m0[80u].y) * ((((_3203 - _3204) * 2.0) - ((exp2(_3069 * (isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0)))) - exp2(_3069 * (isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))))) * _3192)) - ((exp2(_3071 * _3203) - exp2(_3071 * _3204)) * _3192))) + (_3064 * cbSceneParam._m0[80u].z);
        }
        vec4 _3250 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2982, _2983, 1.0), 0.0);
        float _3259 = exp2((_3248 * (-1.44269502162933349609375)) * (1.0 - _3250.w));
        float _3260 = log2(_3259);
        float _3276 = log2(_3002);
        _3073 = (exp2(_3276 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].x)) * _3250.x) / cbSceneParam._m0[78u].x)) + _2999;
        _3075 = (exp2(_3276 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].y)) * _3250.y) / cbSceneParam._m0[78u].y)) + _3000;
        _3077 = (exp2(_3276 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].z)) * _3250.z) / cbSceneParam._m0[78u].z)) + _3001;
        _3079 = _3259 * _3002;
    }
    else
    {
        _3073 = _2999;
        _3075 = _3000;
        _3077 = _3001;
        _3079 = _3002;
    }
    bool _3286;
    vec4 _3089;
    vec4 _3111;
    float _3113;
    float _3117;
    float _3118;
    float _3119;
    float _3120;
    bool _3130;
    for (;;)
    {
        _3089 = cbMatDynParam._m0[0u];
        float _3091 = roundEven(_3089.y);
        bool _3092 = _3091 == 3.0;
        float _3093 = log2(_3079);
        float _3100 = exp2(_3093 * cbSceneParam._m0[78u].x) * _2971;
        float _3101 = exp2(_3093 * cbSceneParam._m0[78u].y) * _2972;
        float _3102 = exp2(_3093 * cbSceneParam._m0[78u].z) * _2973;
        float _3109 = _742 + (-0.5);
        _3111 = cbMtdParam._m0[1u];
        _3113 = _3111.y * _3109;
        float _3116 = (_3091 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3117 = _3116 * (_3092 ? _3100 : (_3100 + (cbSceneParam._m0[72u].w * _3073)));
        _3118 = _3116 * (_3092 ? _3101 : (_3101 + (cbSceneParam._m0[72u].w * _3075)));
        _3119 = _3116 * (_3092 ? _3102 : (_3102 + (cbSceneParam._m0[72u].w * _3077)));
        _3120 = _3109 * 0.999000012874603271484375;
        _3130 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3130)
        {
            if ((cbInstanceData._m0[_810 + 7u].x + _3120) < 0.5)
            {
                _3286 = true;
                break;
            }
        }
        uint _3227 = _811 + uint(_3089.w);
        if ((cbInstanceData._m0[_3227].w < 1.0) && ((cbInstanceData._m0[_3227].w + _3120) < 0.5))
        {
            _3286 = true;
            break;
        }
        if ((_3113 + 1.0) < _3111.x)
        {
            _3286 = true;
            break;
        }
        _3286 = false;
        break;
    }
    float _3490;
    if (_3286)
    {
        discard_state = true;
        _3490 = 0.0;
    }
    else
    {
        _3490 = cbInstanceData._m0[_2974].w;
    }
    SV_Target.x = _3117;
    SV_Target.y = _3118;
    SV_Target.z = _3119;
    SV_Target.w = _3490;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2974].w;
    discard_exit();
}


