#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1346;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    vec4 _262 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _272 = log2(0.0);
    float _274 = exp2(_272 * cbMtdParam._m0[20u].y);
    float _275 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _276 = isnan(1.0) ? _275 : (isnan(_275) ? 1.0 : min(_275, 1.0));
    vec4 _290 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _290.z;
    float _295 = _290.w;
    float _303 = exp2(log2(_294 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _318 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _341 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _343 = _341.x;
    float _344 = _341.y;
    float _368 = ((cbMtdParam._m0[19u].w * _341.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _343)) + _343;
    bool _404 = _368 >= 0.25;
    bool _409 = _368 >= 0.3499999940395355224609375;
    bool _414 = _368 >= 0.5;
    bool _419 = _368 >= 0.64999997615814208984375;
    bool _424 = _368 >= 0.75;
    vec4 _452 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _463 = cbMtdParam._m0[9u].x * _452.x;
    float _464 = cbMtdParam._m0[9u].y * _452.y;
    float _465 = cbMtdParam._m0[9u].z * _452.z;
    float _472 = (((((((_424 ? cbMtdParam._m0[13u].x : (_419 ? cbMtdParam._m0[18u].x : (_414 ? cbMtdParam._m0[17u].x : (_409 ? cbMtdParam._m0[16u].x : (_404 ? cbMtdParam._m0[15u].x : cbMtdParam._m0[14u].x))))) - cbMtdParam._m0[10u].x) * _344) + cbMtdParam._m0[10u].x) * _318.x) - _463) * _305) + _463;
    float _473 = (((((((_424 ? cbMtdParam._m0[13u].y : (_419 ? cbMtdParam._m0[18u].y : (_414 ? cbMtdParam._m0[17u].y : (_409 ? cbMtdParam._m0[16u].y : (_404 ? cbMtdParam._m0[15u].y : cbMtdParam._m0[14u].y))))) - cbMtdParam._m0[10u].y) * _344) + cbMtdParam._m0[10u].y) * _318.y) - _464) * _305) + _464;
    float _474 = (((((((_424 ? cbMtdParam._m0[13u].z : (_419 ? cbMtdParam._m0[18u].z : (_414 ? cbMtdParam._m0[17u].z : (_409 ? cbMtdParam._m0[16u].z : (_404 ? cbMtdParam._m0[15u].z : cbMtdParam._m0[14u].z))))) - cbMtdParam._m0[10u].z) * _344) + cbMtdParam._m0[10u].z) * _318.z) - _465) * _305) + _465;
    float _481 = exp2(log2(_295) * cbMtdParam._m0[21u].y);
    vec4 _494 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _514 = (((cbMtdParam._m0[11u].x * _494.x) - _472) * _481) + _472;
    float _515 = (((cbMtdParam._m0[11u].y * _494.y) - _473) * _481) + _473;
    float _516 = (((cbMtdParam._m0[11u].z * _494.z) - _474) * _481) + _474;
    vec4 _528 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _552 = (_262.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _528.x) - _514) * _276) + _514);
    float _554 = (_262.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _528.y) - _515) * _276) + _515);
    float _556 = (_262.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _528.z) - _516) * _276) + _516);
    float _561 = exp2(log2(1.0 - _295) * 0.00999999977648258209228515625);
    float _579 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _561) + cbMtdParam._m0[21u].z;
    float _598 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _579) + cbMtdParam._m0[20u].z) * _481) + _579;
    float _621 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _598) + cbMtdParam._m0[22u].z) * _276) + _598;
    vec4 _633 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _651 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _653 = _651.x;
    float _654 = _651.y;
    float _657 = cbMtdParam._m0[19u].x + _651.z;
    float _660 = (((cbMtdParam._m0[20u].x + _633.z) - _657) * _561) + _657;
    vec4 _672 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _684 = (_294 * 2.0) * ((((_672.z - _660) + cbMtdParam._m0[22u].x) * _481) + _660);
    vec4 _696 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _705 = (((_696.z - _684) + cbMtdParam._m0[21u].x) * _276) + _684;
    float _716 = ((_633.x - _653) * _561) + _653;
    float _717 = ((_633.y - _654) * _561) + _654;
    float _722 = ((_672.x - _716) * _481) + _716;
    float _723 = ((_672.y - _717) * _481) + _717;
    float _732 = ((((_696.x - _722) * _276) + _722) * 2.0) + (-1.0);
    float _733 = ((((_696.y - _723) * _276) + _723) * 2.0) + (-1.0);
    float _734 = dot(vec2(_732, _733), vec2(_732, _733));
    float _3975 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _739 = sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))));
    float _742 = _732 + (cbMtdParam._m0[21u].w * ((_290.x * 2.0) + (-1.0)));
    float _743 = _733 + (cbMtdParam._m0[21u].w * ((_290.y * 2.0) + (-1.0)));
    float _746 = fma(_739, _245, fma(_743, _237 * TANGENT.x, (_223 * _215) * _742));
    float _749 = fma(_739, _246, fma(_743, _237 * TANGENT.y, (_223 * _216) * _742));
    float _752 = fma(_739, _247, fma(_743, _237 * TANGENT.z, (_223 * _217) * _742));
    float _756 = inversesqrt(dot(vec3(_746, _749, _752), vec3(_746, _749, _752)));
    float _757 = _756 * _746;
    float _758 = _756 * _749;
    float _759 = _756 * _752;
    float _3986 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _760 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _4008 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _4019 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4030 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _764 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _780 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _830 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _820);
    float _831 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _820);
    float _832 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _820);
    float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
    float _837 = _830 * _836;
    float _838 = _831 * _836;
    float _839 = _832 * _836;
    float _845 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _846 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _848 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _850 = _848.w;
    float _868 = fma(_759, cbSceneParam._m0[5u].z, fma(_758, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _757));
    float _871 = fma(_759, cbSceneParam._m0[6u].z, fma(_758, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _757));
    float _874 = fma(_759, cbSceneParam._m0[7u].z, fma(_758, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _757));
    vec4 _876 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _887 = (((_876.y - _760) + (_876.w * _760)) * cbMtdParam._m0[3u].x) + _760;
    uint _900 = uint(roundEven(NORMAL.w)) * 13u;
    uint _902 = (_900 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _908 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_902].x;
    float _909 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_902].y;
    float _910 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_902].z;
    float _4041 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    vec4 _914 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _919 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _930 = (((_919.x - _764) + (_919.w * _764)) * cbMtdParam._m0[3u].x) + _764;
    float _943 = (cbMtdParam._m0[3u].x * (((_911 * _850) - _911) + _914.x)) + _911;
    float _944 = (cbMtdParam._m0[3u].x * (((_912 * _850) - _912) + _914.y)) + _912;
    float _945 = (cbMtdParam._m0[3u].x * (((_913 * _850) - _913) + _914.z)) + _913;
    float _946 = 1.0 - _930;
    float _947 = _946 * _943;
    float _948 = _946 * _944;
    float _949 = _946 * _945;
    float _954 = (_943 + (-0.039999999105930328369140625)) * _930;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _930;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _930;
    float _957 = _954 + 0.039999999105930328369140625;
    float _959 = _955 + 0.039999999105930328369140625;
    float _960 = _956 + 0.039999999105930328369140625;
    vec4 _969 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _845, cbSceneParam._m0[86u].y * _846));
    float _972 = _969.x * TEXCOORD_4;
    float _973 = dot(vec3(_757, _758, _759), vec3(_837, _838, _839));
    float _976 = _973 * 2.0;
    float _980 = (_976 * _757) - _837;
    float _981 = (_976 * _758) - _838;
    float _982 = (_976 * _759) - _839;
    float _986 = abs(dot(vec3(_837, _838, _839), vec3(_757, _758, _759)));
    float _4074 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _988 = sqrt(_887);
    float _1001 = exp2((_988 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_988 * 3.0));
    float _1007 = (1.0 - _1001) * ((_988 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1008 = _1001 * _988;
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1345;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1071 = fma(_1044, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1036));
        float _1075 = fma(_1044, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1036));
        float _1079 = fma(_1044, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1036));
        float _1103 = _1036 + _757;
        float _1104 = _1040 + _758;
        float _1105 = _1044 + _759;
        float _1115 = fma(_1105, cbModelParam._m0[26u].z, fma(_1104, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1103)) - _1071;
        float _1116 = fma(_1105, cbModelParam._m0[27u].z, fma(_1104, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1103)) - _1075;
        float _1117 = fma(_1105, cbModelParam._m0[28u].z, fma(_1104, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1103)) - _1079;
        float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
        float _1134 = ((_1121 * _1115) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1071 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1121 * _1116) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1075 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1121 * _1117) / cbModelParam._m0[34u].z) + ((((((_1079 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        float _1173 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1139.x + (-0.5));
        float _1175 = _1173 * (_1139.y + (-0.5));
        float _1176 = _1173 * (_1139.z + (-0.5));
        float _1183 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1146.x + (-0.5));
        float _1185 = _1183 * (_1146.y + (-0.5));
        float _1186 = _1183 * (_1146.z + (-0.5));
        float _1193 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1153.x + (-0.5));
        float _1195 = _1193 * (_1153.y + (-0.5));
        float _1196 = _1193 * (_1153.z + (-0.5));
        float _1203 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1160.x + (-0.5));
        float _1205 = _1203 * (_1160.y + (-0.5));
        float _1206 = _1203 * (_1160.z + (-0.5));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = _1174 * 0.5;
        float _1211 = _1184 * 0.5;
        float _1212 = _1194 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1227 = (dot(vec3(_757, _758, _759), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1237 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _4122 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1239 + 1.0))) + _1244) * _1207;
        float _1254 = _1175 * 0.5;
        float _1255 = _1185 * 0.5;
        float _1256 = _1195 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_757, _758, _759), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _4155 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1281 + 1.0))) + _1286) * _1208;
        float _1296 = _1176 * 0.5;
        float _1297 = _1186 * 0.5;
        float _1298 = _1196 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_757, _758, _759), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4188 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1323 + 1.0))) + _1328) * _1209;
        _1345 = _1176;
        _1347 = _1175;
        _1348 = _1174;
        _1349 = _1186;
        _1350 = _1185;
        _1351 = _1184;
        _1352 = _1196;
        _1353 = _1195;
        _1354 = _1194;
        _1355 = _1209;
        _1356 = _1208;
        _1357 = _1207;
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
    }
    else
    {
        _1345 = _1346;
        _1347 = _1346;
        _1348 = _1346;
        _1349 = _1346;
        _1350 = _1346;
        _1351 = _1346;
        _1352 = _1346;
        _1353 = _1346;
        _1354 = _1346;
        _1355 = _1346;
        _1356 = _1346;
        _1357 = _1346;
        _1358 = 0.0;
        _1359 = 0.0;
        _1360 = 0.0;
    }
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1386 = fma(_1044, cbModelParam._m0[30u].z, fma(_1040, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1036));
        float _1390 = fma(_1044, cbModelParam._m0[31u].z, fma(_1040, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1036));
        float _1394 = fma(_1044, cbModelParam._m0[32u].z, fma(_1040, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1036));
        float _1417 = _1036 + _757;
        float _1418 = _1040 + _758;
        float _1419 = _1044 + _759;
        float _1429 = fma(_1419, cbModelParam._m0[30u].z, fma(_1418, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1417)) - _1386;
        float _1430 = fma(_1419, cbModelParam._m0[31u].z, fma(_1418, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1417)) - _1390;
        float _1431 = fma(_1419, cbModelParam._m0[32u].z, fma(_1418, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1417)) - _1394;
        float _1435 = inversesqrt(dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431)));
        float _1448 = ((_1435 * _1429) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1386 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1435 * _1430) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1390 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1435 * _1431) / cbModelParam._m0[35u].z) + ((((((_1394 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        float _1485 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1452.x + (-0.5));
        float _1487 = _1485 * (_1452.y + (-0.5));
        float _1488 = _1485 * (_1452.z + (-0.5));
        float _1495 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1459.x + (-0.5));
        float _1497 = _1495 * (_1459.y + (-0.5));
        float _1498 = _1495 * (_1459.z + (-0.5));
        float _1505 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1466.x + (-0.5));
        float _1507 = _1505 * (_1466.y + (-0.5));
        float _1508 = _1505 * (_1466.z + (-0.5));
        float _1515 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1473.x + (-0.5));
        float _1517 = _1515 * (_1473.y + (-0.5));
        float _1518 = _1515 * (_1473.z + (-0.5));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = _1486 * 0.5;
        float _1523 = _1496 * 0.5;
        float _1524 = _1506 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_757, _758, _759), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4251 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1549 + 1.0))) + _1554) * _1519;
        float _1564 = _1487 * 0.5;
        float _1565 = _1497 * 0.5;
        float _1566 = _1507 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_757, _758, _759), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4284 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1591 + 1.0))) + _1596) * _1520;
        float _1606 = _1488 * 0.5;
        float _1607 = _1498 * 0.5;
        float _1608 = _1508 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_757, _758, _759), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4317 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1633 + 1.0))) + _1638) * _1521;
        _1655 = _1488;
        _1656 = _1487;
        _1657 = _1486;
        _1658 = _1498;
        _1659 = _1497;
        _1660 = _1496;
        _1661 = _1508;
        _1662 = _1507;
        _1663 = _1506;
        _1664 = _1521;
        _1665 = _1520;
        _1666 = _1519;
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
    }
    else
    {
        _1655 = _1346;
        _1656 = _1346;
        _1657 = _1346;
        _1658 = _1346;
        _1659 = _1346;
        _1660 = _1346;
        _1661 = _1346;
        _1662 = _1346;
        _1663 = _1346;
        _1664 = _1346;
        _1665 = _1346;
        _1666 = _1346;
        _1667 = 0.0;
        _1668 = 0.0;
        _1669 = 0.0;
    }
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1358)) + _1358;
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1359)) + _1359;
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1360)) + _1360;
    float _1702 = fma(_1681, cbSceneParam._m0[89u].z, fma(_1680, cbSceneParam._m0[89u].y, _1679 * cbSceneParam._m0[89u].x));
    float _1705 = fma(_1681, cbSceneParam._m0[90u].z, fma(_1680, cbSceneParam._m0[90u].y, _1679 * cbSceneParam._m0[90u].x));
    float _1708 = fma(_1681, cbSceneParam._m0[91u].z, fma(_1680, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1679));
    float _1723 = _980 * 0.5;
    float _1724 = _981 * 0.5;
    float _1725 = _982 * 0.5;
    float _1726 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1729 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1732 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1766;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1739 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1345, _1349, _1352, _1355));
        float _1743 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1347, _1350, _1353, _1356));
        float _1747 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1348, _1351, _1354, _1357));
        float _1754 = dot(vec4(cbModelParam._m0[39u]), vec4(_1723, _1724, _1725, 1.0));
        _1766 = dot(vec3(isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1754) ? 0.0 : (isnan(0.0) ? _1754 : max(0.0, _1754))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1766 = 1.0;
    }
    float _1777;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1768 = dot(vec4(cbModelParam._m0[40u]), vec4(_1723, _1724, _1725, 1.0));
        _1777 = dot(vec3(isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1768) ? 0.0 : (isnan(0.0) ? _1768 : max(0.0, _1768))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1777 = 1.0;
    }
    float _1781 = (_1777 * cbModelParam._m0[1u].x) + (_1766 * (1.0 - cbModelParam._m0[1u].x));
    float _1791 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _887);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1791 : min(cbModelParam._m0[25u].z, _1791));
    float _1872;
    float _1874;
    float _1876;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1839 = fma(_1044, cbModelParam._m0[13u].z, fma(_1040, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1036)) + cbModelParam._m0[13u].w;
        float _1843 = fma(_1044, cbModelParam._m0[14u].z, fma(_1040, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1036)) + cbModelParam._m0[14u].w;
        float _1847 = fma(_1044, cbModelParam._m0[15u].z, fma(_1040, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1036)) + cbModelParam._m0[15u].w;
        float _1850 = fma(_982, cbModelParam._m0[13u].z, fma(_981, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980));
        float _1853 = fma(_982, cbModelParam._m0[14u].z, fma(_981, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980));
        float _1856 = fma(_982, cbModelParam._m0[15u].z, fma(_981, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980));
        float _1884;
        if (_1850 > 0.0)
        {
            _1884 = abs((1.0 - _1839) / _1850);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1839 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1884 = frontier_phi_16_14_ladder;
        }
        float _2055;
        if (_1853 > 0.0)
        {
            _2055 = abs((1.0 - _1843) / _1853);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1843 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2055 = frontier_phi_25_21_ladder;
        }
        float _2349;
        if (_1856 > 0.0)
        {
            _2349 = abs((1.0 - _1847) / _1856);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1847 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2349 = frontier_phi_37_32_ladder;
        }
        float _2351 = isnan(_2055) ? _1884 : (isnan(_1884) ? _2055 : min(_1884, _2055));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1850) + _1839;
        float _2357 = (_2352 * _1853) + _1843;
        float _2358 = (_2352 * _1856) + _1847;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2359;
        float _2363 = _2359 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 > _2363) || ((_2357 < _2361) || ((_2356 < _2361) || (_2356 > _2363))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2503 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2358, cbModelParam._m0[9u].z, fma(_2357, cbModelParam._m0[9u].y, _2356 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2358, cbModelParam._m0[10u].z, fma(_2357, cbModelParam._m0[10u].y, _2356 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2358, cbModelParam._m0[11u].z, fma(_2357, cbModelParam._m0[11u].y, _2356 * cbModelParam._m0[11u].x))), _1792);
            frontier_phi_15_37_ladder = _2503.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2503.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2503.z * cbModelParam._m0[1u].y;
        }
        _1872 = frontier_phi_15_37_ladder_1;
        _1874 = frontier_phi_15_37_ladder;
        _1876 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1860 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_980, _981, _982), _1792);
        _1872 = _1860.x * cbModelParam._m0[1u].y;
        _1874 = _1860.y * cbModelParam._m0[1u].y;
        _1876 = _1860.z * cbModelParam._m0[1u].y;
    }
    float _1880 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _887);
    float _1881 = isnan(_1880) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1880 : min(cbModelParam._m0[25u].w, _1880));
    float _1970;
    float _1972;
    float _1974;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1934 = fma(_1044, cbModelParam._m0[21u].z, fma(_1040, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1036)) + cbModelParam._m0[21u].w;
        float _1938 = fma(_1044, cbModelParam._m0[22u].z, fma(_1040, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1036)) + cbModelParam._m0[22u].w;
        float _1942 = fma(_1044, cbModelParam._m0[23u].z, fma(_1040, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1036)) + cbModelParam._m0[23u].w;
        float _1945 = fma(_982, cbModelParam._m0[21u].z, fma(_981, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980));
        float _1948 = fma(_982, cbModelParam._m0[22u].z, fma(_981, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980));
        float _1951 = fma(_982, cbModelParam._m0[23u].z, fma(_981, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980));
        float _2060;
        if (_1945 > 0.0)
        {
            _2060 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2060 = frontier_phi_27_23_ladder;
        }
        float _2376;
        if (_1948 > 0.0)
        {
            _2376 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2376 = frontier_phi_39_34_ladder;
        }
        float _2714;
        if (_1951 > 0.0)
        {
            _2714 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2714 = frontier_phi_49_46_ladder;
        }
        float _2716 = isnan(_2376) ? _2060 : (isnan(_2060) ? _2376 : min(_2060, _2376));
        float _2717 = isnan(_2714) ? _2716 : (isnan(_2716) ? _2714 : min(_2716, _2714));
        float _2721 = (_2717 * _1945) + _1934;
        float _2722 = (_2717 * _1948) + _1938;
        float _2723 = (_2717 * _1951) + _1942;
        float _2724 = _2717 * 9.9999997473787516355514526367188e-05;
        float _2725 = (-1.0) - _2724;
        float _2727 = _2724 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2723 > _2727) || ((_2723 < _2725) || ((_2722 > _2727) || ((_2722 < _2725) || ((_2721 < _2725) || (_2721 > _2727))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2723, cbModelParam._m0[17u].z, fma(_2722, cbModelParam._m0[17u].y, _2721 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2723, cbModelParam._m0[18u].z, fma(_2722, cbModelParam._m0[18u].y, _2721 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2723, cbModelParam._m0[19u].z, fma(_2722, cbModelParam._m0[19u].y, _2721 * cbModelParam._m0[19u].x))), _1881);
            frontier_phi_24_49_ladder = _2845.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2845.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2845.x * cbModelParam._m0[1u].z;
        }
        _1970 = frontier_phi_24_49_ladder_2;
        _1972 = frontier_phi_24_49_ladder_1;
        _1974 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1954 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_980, _981, _982), _1881);
        _1970 = _1954.x * cbModelParam._m0[1u].z;
        _1972 = _1954.y * cbModelParam._m0[1u].z;
        _1974 = _1954.z * cbModelParam._m0[1u].z;
    }
    float _1987 = (((_1007 * _957) + _1008) * _972) * ((cbModelParam._m0[1u].w * (_1970 - _1872)) + _1872);
    float _1989 = (((_1007 * _959) + _1008) * _972) * ((cbModelParam._m0[1u].w * (_1972 - _1874)) + _1874);
    float _1991 = (((_1007 * _960) + _1008) * _972) * ((cbModelParam._m0[1u].w * (_1974 - _1876)) + _1876);
    float _1994 = fma(_1991, cbSceneParam._m0[89u].z, fma(_1989, cbSceneParam._m0[89u].y, _1987 * cbSceneParam._m0[89u].x));
    float _1997 = fma(_1991, cbSceneParam._m0[90u].z, fma(_1989, cbSceneParam._m0[90u].y, _1987 * cbSceneParam._m0[90u].x));
    float _2000 = fma(_1991, cbSceneParam._m0[91u].z, fma(_1989, cbSceneParam._m0[91u].y, _1987 * cbSceneParam._m0[91u].x));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2038 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2042 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2046 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2047 = _2034 / _2046;
    float _2048 = _2038 / _2046;
    float _2049 = _2042 / _2046;
    float _2195;
    float _2196;
    float _2197;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2076 = ((uint(_2049 > cbSceneParam._m0[59u].y) + uint(_2049 > cbSceneParam._m0[59u].x)) + uint(_2049 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2077 = _2076 + 43u;
        uint _2085 = _2076 + 44u;
        uint _2093 = _2076 + 45u;
        uint _2101 = _2076 + 46u;
        float _2112 = fma(_2046, cbSceneParam._m0[_2077].w, fma(_2042, cbSceneParam._m0[_2077].z, fma(_2038, cbSceneParam._m0[_2077].y, _2034 * cbSceneParam._m0[_2077].x)));
        float _2116 = fma(_2046, cbSceneParam._m0[_2085].w, fma(_2042, cbSceneParam._m0[_2085].z, fma(_2038, cbSceneParam._m0[_2085].y, _2034 * cbSceneParam._m0[_2085].x)));
        float _2124 = fma(_2046, cbSceneParam._m0[_2101].w, fma(_2042, cbSceneParam._m0[_2101].z, fma(_2038, cbSceneParam._m0[_2101].y, _2034 * cbSceneParam._m0[_2101].x)));
        float _2129 = cbSceneParam._m0[33u].z * _2124;
        float _2131 = cbSceneParam._m0[33u].w * _2124;
        float _2134 = fma(_2046, cbSceneParam._m0[_2093].w, fma(_2042, cbSceneParam._m0[_2093].z, fma(_2038, cbSceneParam._m0[_2093].y, _2034 * cbSceneParam._m0[_2093].x))) / _2124;
        float _2181 = (cbSceneParam._m0[33u].x - sqrt(((_2048 * _2048) + (_2047 * _2047)) + (_2049 * _2049))) * cbSceneParam._m0[33u].y;
        float _4443 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2188 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 + _2112) / _2124, (_2131 + _2116) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 + _2112) / _2124, (_2116 - _2129) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 - _2129) / _2124, (_2116 - _2131) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 - _2131) / _2124, (_2129 + _2116) / _2124), _2134), 0.0)).x), vec4(0.25)));
        _2195 = 1.0 - (_2188 * cbSceneParam._m0[34u].x);
        _2196 = 1.0 - (_2188 * cbSceneParam._m0[34u].y);
        _2197 = 1.0 - (_2188 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2195 = 1.0;
        _2196 = 1.0;
        _2197 = 1.0;
    }
    float _2261;
    float _2263;
    float _2265;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2249 = fma(_2046, cbSceneParam._m0[63u].w, fma(_2042, cbSceneParam._m0[63u].z, fma(_2038, cbSceneParam._m0[63u].y, _2034 * cbSceneParam._m0[63u].x)));
        float _2250 = fma(_2046, cbSceneParam._m0[60u].w, fma(_2042, cbSceneParam._m0[60u].z, fma(_2038, cbSceneParam._m0[60u].y, _2034 * cbSceneParam._m0[60u].x))) / _2249;
        float _2251 = fma(_2046, cbSceneParam._m0[61u].w, fma(_2042, cbSceneParam._m0[61u].z, fma(_2038, cbSceneParam._m0[61u].y, _2034 * cbSceneParam._m0[61u].x))) / _2249;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2250 >= cbSceneParam._m0[64u].x) && (_2251 >= cbSceneParam._m0[64u].y)) && (_2250 <= cbSceneParam._m0[64u].z)) && (_2251 <= cbSceneParam._m0[64u].w))
        {
            float _2389 = fma(_2046, cbSceneParam._m0[62u].w, fma(_2042, cbSceneParam._m0[62u].z, fma(_2038, cbSceneParam._m0[62u].y, _2034 * cbSceneParam._m0[62u].x))) / _2249;
            float _2393 = isnan(cbSceneParam._m0[41u].w) ? _2389 : (isnan(_2389) ? cbSceneParam._m0[41u].w : max(_2389, cbSceneParam._m0[41u].w));
            float _2436 = (cbSceneParam._m0[33u].x - sqrt(((_2048 * _2048) + (_2047 * _2047)) + (_2049 * _2049))) * cbSceneParam._m0[33u].y;
            float _4459 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
            float _2443 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2250, cbSceneParam._m0[33u].w + _2251), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2250, _2251 - cbSceneParam._m0[33u].z), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2250 - cbSceneParam._m0[33u].z, _2251 - cbSceneParam._m0[33u].w), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2250 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2251), _2393), 0.0)).x), vec4(0.25)));
            float _2447 = 1.0 - (_2443 * cbSceneParam._m0[34u].x);
            float _2448 = 1.0 - (_2443 * cbSceneParam._m0[34u].y);
            float _2449 = 1.0 - (_2443 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2448) ? _2196 : (isnan(_2196) ? _2448 : min(_2196, _2448));
            frontier_phi_36_35_ladder_1 = isnan(_2449) ? _2197 : (isnan(_2197) ? _2449 : min(_2197, _2449));
            frontier_phi_36_35_ladder_2 = isnan(_2447) ? _2195 : (isnan(_2195) ? _2447 : min(_2195, _2447));
        }
        else
        {
            frontier_phi_36_35_ladder = _2196;
            frontier_phi_36_35_ladder_1 = _2197;
            frontier_phi_36_35_ladder_2 = _2195;
        }
        _2261 = frontier_phi_36_35_ladder_2;
        _2263 = frontier_phi_36_35_ladder;
        _2265 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2261 = _2195;
        _2263 = _2196;
        _2265 = _2197;
    }
    uvec4 _2270 = floatBitsToUint(cbInstanceData._m0[_900 + 5u]);
    uint _2272 = _2270.x * 14u;
    uint _2273 = _2272 + 13u;
    float _2280 = _972 + (-1.0);
    float _2285 = (cbLight._m0[_2273].x * _2280) + 1.0;
    float _2286 = (cbLight._m0[_2273].y * _2280) + 1.0;
    float _2287 = (cbLight._m0[_2273].z * _2280) + 1.0;
    float _2288 = (cbLight._m0[_2273].w * _2280) + 1.0;
    uint _2289 = _2272 + 5u;
    float _2295 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
    uint _2299 = _2272 + 4u;
    float _2308 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
    uint _2312 = _2272 | 1u;
    float _2323 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_757, _758, _759));
    float _2326 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_757, _758, _759));
    float _4495 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _4506 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2331 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2333 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2340 = ((cbLight._m0[_2289].x * _2295) * _2333) + (((cbLight._m0[_2299].x * _2261) * _2308) * _2331);
    float _2341 = ((_2295 * cbLight._m0[_2289].y) * _2333) + (((cbLight._m0[_2299].y * _2263) * _2308) * _2331);
    float _2342 = ((_2295 * cbLight._m0[_2289].z) * _2333) + (((cbLight._m0[_2299].z * _2265) * _2308) * _2331);
    uvec4 _2346 = floatBitsToUint(cbLight._m0[_2272 + 12u]);
    bool _2348 = _2346.x == 0u;
    float _2450;
    float _2452;
    float _2454;
    if (_2348)
    {
        _2450 = _2340;
        _2452 = _2341;
        _2454 = _2342;
    }
    else
    {
        uint _2458 = _2272 + 6u;
        float _2474 = (dot(vec3(cbLight._m0[_2272 + 2u].xyz), vec3(_757, _758, _759)) * 0.5) + 0.5;
        float _2475 = _2474 * _2474;
        float _4517 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2476 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2477 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2450 = (((cbLight._m0[_2458].x * 0.3183098733425140380859375) * _2476) * _2477) + _2340;
        _2452 = (((cbLight._m0[_2458].y * 0.3183098733425140380859375) * _2476) * _2477) + _2341;
        _2454 = (((cbLight._m0[_2458].z * 0.3183098733425140380859375) * _2476) * _2477) + _2342;
    }
    bool _2457 = _2346.y == 0u;
    float _2512;
    float _2514;
    float _2516;
    if (_2457)
    {
        _2512 = _2450;
        _2514 = _2452;
        _2516 = _2454;
    }
    else
    {
        uint _2685 = _2272 + 7u;
        float _2701 = (dot(vec3(cbLight._m0[_2272 + 3u].xyz), vec3(_757, _758, _759)) * 0.5) + 0.5;
        float _2702 = _2701 * _2701;
        float _4533 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2703 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2704 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2512 = (((cbLight._m0[_2685].x * 0.3183098733425140380859375) * _2703) * _2704) + _2450;
        _2514 = (((cbLight._m0[_2685].y * 0.3183098733425140380859375) * _2703) * _2704) + _2452;
        _2516 = (((cbLight._m0[_2685].z * 0.3183098733425140380859375) * _2703) * _2704) + _2454;
    }
    uint _2519 = _2272 + 8u;
    float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _887) * 0.949999988079071044921875);
    float _2533 = _2532 * _2532;
    float _2534 = cbLight._m0[_2272].x + _837;
    float _2535 = cbLight._m0[_2272].y + _838;
    float _2536 = cbLight._m0[_2272].z + _839;
    float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
    float _2541 = _2540 * _2534;
    float _2542 = _2540 * _2535;
    float _2543 = _2540 * _2536;
    float _2544 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2272].xyz));
    float _4549 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _4560 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _2548 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2549 = dot(vec3(_757, _758, _759), vec3(_2541, _2542, _2543));
    float _4571 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2552 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2553 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2541, _2542, _2543));
    float _4582 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2557 = _2533 * _2533;
    float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
    float _2569 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
    float _2570 = 0.959999978542327880859375 - _954;
    float _2572 = 0.959999978542327880859375 - _955;
    float _2573 = 0.959999978542327880859375 - _956;
    float _2580 = 1.0 - _2533;
    float _2591 = (0.5 / (((_2548 * ((_2547 * _2580) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2580) + _2533) * _2547))) * _2547;
    float _4593 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2593 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
    uint _2607 = _2272 + 9u;
    float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _887) * 0.949999988079071044921875);
    float _2619 = _2618 * _2618;
    float _2620 = cbLight._m0[_2312].x + _837;
    float _2621 = cbLight._m0[_2312].y + _838;
    float _2622 = cbLight._m0[_2312].z + _839;
    float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
    float _2627 = _2626 * _2620;
    float _2628 = _2626 * _2621;
    float _2629 = _2626 * _2622;
    float _2630 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2312].xyz));
    float _4604 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2633 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2634 = dot(vec3(_757, _758, _759), vec3(_2627, _2628, _2629));
    float _4615 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2638 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2627, _2628, _2629));
    float _4626 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2642 = _2619 * _2619;
    float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
    float _2653 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
    float _2660 = 1.0 - _2619;
    float _2670 = (0.5 / (((_2548 * ((_2633 * _2660) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2660) + _2619) * _2633))) * _2633;
    float _4637 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2672 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
    float _2682 = (((((_2653 * _2570) + _957) * cbLight._m0[_2607].x) * _2672) * _2295) + ((((cbLight._m0[_2519].x * _2261) * ((_2569 * _2570) + _957)) * _2593) * _2308);
    float _2683 = (((((_2653 * _2572) + _959) * cbLight._m0[_2607].y) * _2672) * _2295) + ((((cbLight._m0[_2519].y * _2263) * ((_2569 * _2572) + _959)) * _2593) * _2308);
    float _2684 = (((((_2653 * _2573) + _960) * cbLight._m0[_2607].z) * _2672) * _2295) + ((((cbLight._m0[_2519].z * _2265) * ((_2569 * _2573) + _960)) * _2593) * _2308);
    float _2740;
    float _2742;
    float _2744;
    if (_2348)
    {
        _2740 = _2682;
        _2742 = _2683;
        _2744 = _2684;
    }
    else
    {
        uint _2746 = _2272 + 2u;
        uint _2750 = _2272 + 10u;
        float _2764 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2746].w)) * _887) * 0.949999988079071044921875);
        float _2765 = _2764 * _2764;
        float _2766 = cbLight._m0[_2746].x + _837;
        float _2767 = cbLight._m0[_2746].y + _838;
        float _2768 = cbLight._m0[_2746].z + _839;
        float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
        float _2773 = _2772 * _2766;
        float _2774 = _2772 * _2767;
        float _2775 = _2772 * _2768;
        float _2776 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2746].xyz));
        float _4648 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2779 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2780 = dot(vec3(_757, _758, _759), vec3(_2773, _2774, _2775));
        float _4659 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2783 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2784 = dot(vec3(cbLight._m0[_2746].xyz), vec3(_2773, _2774, _2775));
        float _4670 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2788 = _2765 * _2765;
        float _2792 = ((_2783 * _2783) * (_2788 + (-1.0))) + 1.0;
        float _2799 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
        float _2806 = 1.0 - _2765;
        float _2816 = (0.5 / (((_2548 * ((_2779 * _2806) + _2765)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2806) + _2765) * _2779))) * _2779;
        float _4681 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2818 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2788 / ((_2792 * _2792) * 3.141590118408203125));
        float _2819 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2740 = (((((_2799 * _2570) + _957) * cbLight._m0[_2750].x) * _2818) * _2819) + _2682;
        _2742 = (((((_2799 * _2572) + _959) * cbLight._m0[_2750].y) * _2818) * _2819) + _2683;
        _2744 = (((((_2799 * _2573) + _960) * cbLight._m0[_2750].z) * _2818) * _2819) + _2684;
    }
    float _2850;
    float _2852;
    float _2854;
    if (_2457)
    {
        _2850 = _2740;
        _2852 = _2742;
        _2854 = _2744;
    }
    else
    {
        uint _2861 = _2272 + 3u;
        uint _2865 = _2272 + 11u;
        float _2879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2861].w)) * _887) * 0.949999988079071044921875);
        float _2880 = _2879 * _2879;
        float _2881 = cbLight._m0[_2861].x + _837;
        float _2882 = cbLight._m0[_2861].y + _838;
        float _2883 = cbLight._m0[_2861].z + _839;
        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
        float _2888 = _2887 * _2881;
        float _2889 = _2887 * _2882;
        float _2890 = _2887 * _2883;
        float _2891 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2861].xyz));
        float _4697 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2894 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2895 = dot(vec3(_757, _758, _759), vec3(_2888, _2889, _2890));
        float _4708 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2898 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2899 = dot(vec3(cbLight._m0[_2861].xyz), vec3(_2888, _2889, _2890));
        float _4719 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2903 = _2880 * _2880;
        float _2907 = ((_2898 * _2898) * (_2903 + (-1.0))) + 1.0;
        float _2914 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
        float _2921 = 1.0 - _2880;
        float _2931 = (0.5 / (((_2548 * ((_2894 * _2921) + _2880)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2921) + _2880) * _2894))) * _2894;
        float _4730 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2933 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2903 / ((_2907 * _2907) * 3.141590118408203125));
        float _2934 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2850 = (((((_2914 * _2570) + _957) * cbLight._m0[_2865].x) * _2933) * _2934) + _2740;
        _2852 = (((((_2914 * _2572) + _959) * cbLight._m0[_2865].y) * _2933) * _2934) + _2742;
        _2854 = (((((_2914 * _2573) + _960) * cbLight._m0[_2865].z) * _2933) * _2934) + _2744;
    }
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    if (_2270.y == 0u)
    {
        uvec4 _2955 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2956 = _2955.x;
        uint _2967 = uint((float(_2955.y) * floor(float(uint(cbSceneParam._m0[85u].y * _846) / _2956))) + floor(float(uint(cbSceneParam._m0[85u].x * _845) / _2956)));
        float _2977 = (log2(_2049 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2978 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
        uint _2981 = uint(isnan(14.0) ? _2978 : (isnan(_2978) ? 14.0 : min(_2978, 14.0)));
        uvec4 _2986 = texelFetch(g_lightClusterGridBuffer, int(((_2981 << 2u) + (_2967 << 6u)) >> 2u));
        uint _2987 = _2986.x;
        uint _2988 = _2955.z;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        if (((((1u << ((_2988 >> 4u) & 15u)) + 4294967295u) & _2987) == 0u) || ((_2988 & 240u) == 0u))
        {
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
        }
        else
        {
            float _3067;
            float _3069;
            float _3071;
            float _3073;
            float _3075;
            float _3077;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            uint _3216 = 0u;
            uint _3225;
            bool _3226;
            for (;;)
            {
                _3225 = texelFetch(g_lightClassification, int((((_2981 << 5u) + (_2967 << 9u)) + (_3216 << 2u)) >> 2u)).x;
                _3226 = _3225 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3226)
                {
                    frontier_phi_68_pred = _3215;
                    frontier_phi_68_pred_1 = _3214;
                    frontier_phi_68_pred_2 = _3213;
                    frontier_phi_68_pred_3 = _3211;
                    frontier_phi_68_pred_4 = _3210;
                    frontier_phi_68_pred_5 = _3212;
                }
                else
                {
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    uint _3340;
                    _3334 = _3210;
                    _3335 = _3211;
                    _3336 = _3212;
                    _3337 = _3213;
                    _3338 = _3214;
                    _3339 = _3215;
                    _3340 = _3225;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    for (;;)
                    {
                        uint _3344 = uint(findLSB(_3340)) + (_3216 << 5u);
                        uint _3341 = (_3340 + 4294967295u) & _3340;
                        uint _3346 = _3344 * 48u;
                        vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3346)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 3u)).x));
                        uint _3366 = (_3344 * 48u) + 4u;
                        vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3366)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 3u)).x));
                        uint _3385 = (_3344 * 48u) + 8u;
                        vec3 _3396 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3385)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 2u)).x));
                        float _3400 = _3360.x - _2047;
                        float _3401 = _3360.y - _2048;
                        float _3402 = _3360.z - _2049;
                        float _3403 = dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402));
                        float _3406 = inversesqrt(_3403);
                        float _3407 = _3406 * _3400;
                        float _3408 = _3406 * _3401;
                        float _3409 = _3406 * _3402;
                        float _3410 = dot(vec3(_868, _871, _874), vec3(_3407, _3408, _3409));
                        float _3415 = 1.0 - (_3403 * _3360.w);
                        float _4756 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3416 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3417 = sqrt(_3403) * _3379.w;
                        float _3420 = 1.39999997615814208984375 / (_3417 + 1.39999997615814208984375);
                        float _3421 = _3420 * _3420;
                        float _3424 = ((1.0 - _3421) * _3410) + _3421;
                        float _3427 = _3417 * _3417;
                        float _3431 = ((isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0))) * _3416) / ((_3427 * 0.699999988079071044921875) + 1.0);
                        float _3435 = (-0.0) - _2047;
                        float _3436 = (-0.0) - _2048;
                        float _3437 = (-0.0) - _2049;
                        float _3441 = inversesqrt(dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437)));
                        float _3442 = _3441 * _3435;
                        float _3443 = _3441 * _3436;
                        float _3444 = _3441 * _3437;
                        float _3451 = exp2(log2(1.0 / ((_3427 * 3.5) + 5.0)) * 0.25);
                        float _3452 = 1.0 - _988;
                        float _3459 = sqrt(1.0 - ((1.0 - (_3452 * _3452)) * (1.0 - (_3451 * _3451))));
                        float _3460 = _3459 * _3459;
                        float _3461 = _3460 * _3460;
                        float _3462 = _3442 + _3407;
                        float _3463 = _3443 + _3408;
                        float _3464 = _3444 + _3409;
                        float _3468 = inversesqrt(dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464)));
                        float _3472 = dot(vec3(_868, _871, _874), vec3(_3442, _3443, _3444));
                        float _4772 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3475 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3476 = dot(vec3(_868, _871, _874), vec3(_3468 * _3462, _3468 * _3463, _3468 * _3464));
                        float _4783 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3479 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3483 = ((_3479 * _3479) * (_3461 + (-1.0))) + 1.0;
                        float _3484 = _3420 * _3460;
                        float _3485 = _3484 * _3484;
                        float _3488 = ((1.0 - _3485) * _3410) + _3485;
                        float _4794 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3489 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3490 = 1.0 - _3460;
                        float _3500 = (0.5 / (((_3489 * ((_3475 * _3490) + _3460)) + 9.9999999392252902907785028219223e-09) + (((_3489 * _3490) + _3460) * _3475))) * _3489;
                        float _4805 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                        float _3511 = (((_3461 * 3.1415927410125732421875) * (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) / ((_3483 * _3483) * ((_3427 * 2.1991131305694580078125) + 3.141590118408203125))) * _3416;
                        _3269 = (_3431 * _3379.x) + _3337;
                        _3270 = (_3431 * _3379.y) + _3338;
                        _3271 = (_3431 * _3379.z) + _3339;
                        _3266 = (_3511 * _3396.x) + _3334;
                        _3267 = (_3511 * _3396.y) + _3335;
                        _3268 = (_3511 * _3396.z) + _3336;
                        if (_3341 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3334 = _3266;
                            _3335 = _3267;
                            _3336 = _3268;
                            _3337 = _3269;
                            _3338 = _3270;
                            _3339 = _3271;
                            _3340 = _3341;
                        }
                    }
                    frontier_phi_68_pred = _3271;
                    frontier_phi_68_pred_1 = _3270;
                    frontier_phi_68_pred_2 = _3269;
                    frontier_phi_68_pred_3 = _3267;
                    frontier_phi_68_pred_4 = _3266;
                    frontier_phi_68_pred_5 = _3268;
                }
                _3077 = frontier_phi_68_pred;
                _3075 = frontier_phi_68_pred_1;
                _3073 = frontier_phi_68_pred_2;
                _3069 = frontier_phi_68_pred_3;
                _3067 = frontier_phi_68_pred_4;
                _3071 = frontier_phi_68_pred_5;
                uint _3217 = _3216 + 1u;
                if (_3217 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3210 = _3067;
                    _3211 = _3069;
                    _3212 = _3071;
                    _3213 = _3073;
                    _3214 = _3075;
                    _3215 = _3077;
                    _3216 = _3217;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
        }
        uvec4 _3080 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3081 = _3080.z;
        uint _3083 = (_3081 >> 8u) & 15u;
        float _3178;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        if (((4294967295u << _3083) & _2987) == 0u)
        {
            _3178 = _3066;
            _3180 = _3068;
            _3182 = _3070;
            _3184 = _3072;
            _3186 = _3074;
            _3188 = _3076;
        }
        else
        {
            float _3203 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
            float _3204 = _3203 * _2047;
            float _3205 = _3203 * _2048;
            float _3206 = _3203 * _2049;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3083 < ((_3081 >> 12u) & 15u))
            {
                float _3179;
                float _3181;
                float _3183;
                float _3185;
                float _3187;
                float _3189;
                float _3317 = _3066;
                float _3318 = _3068;
                float _3319 = _3070;
                float _3320 = _3072;
                float _3321 = _3074;
                float _3322 = _3076;
                uint _3323 = _3083;
                uint _3332;
                bool _3333;
                for (;;)
                {
                    _3332 = texelFetch(g_lightClassification, int((((_2981 << 5u) + (_2967 << 9u)) + (_3323 << 2u)) >> 2u)).x;
                    _3333 = _3332 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3333)
                    {
                        frontier_phi_74_pred = _3319;
                        frontier_phi_74_pred_1 = _3318;
                        frontier_phi_74_pred_2 = _3317;
                        frontier_phi_74_pred_3 = _3322;
                        frontier_phi_74_pred_4 = _3321;
                        frontier_phi_74_pred_5 = _3320;
                    }
                    else
                    {
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3529 = _3317;
                        float _3530 = _3318;
                        float _3531 = _3319;
                        float _3532 = _3320;
                        float _3533 = _3321;
                        float _3534 = _3322;
                        uint _3535 = _3332;
                        uint _3536;
                        vec4 _3561;
                        float _3562;
                        vec4 _3577;
                        vec3 _3589;
                        vec4 _3604;
                        vec4 _3619;
                        float _3666;
                        bool _3667;
                        for (;;)
                        {
                            uint _3546 = ((_3323 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3535));
                            _3536 = (_3535 + 4294967295u) & _3535;
                            uint _3548 = _3546 * 40u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            _3562 = _3561.w;
                            uint _3564 = (_3546 * 40u) + 4u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3579 = (_3546 * 40u) + 8u;
                            _3589 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x));
                            uint _3591 = (_3546 * 40u) + 16u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3606 = (_3546 * 40u) + 20u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3622 = (_3546 * 40u) + 24u;
                            vec4 _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3641 = (_3546 * 40u) + 28u;
                            vec4 _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            _3666 = fma(_2049, _3654.z, fma(_2048, _3654.y, _3654.x * _2047)) + _3654.w;
                            _3667 = !((fma(_2049, _3635.z, fma(_2048, _3635.y, _3635.x * _2047)) + _3635.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3667)
                            {
                                float _3694 = _3561.x - _2047;
                                float _3695 = _3561.y - _2048;
                                float _3696 = _3561.z - _2049;
                                float _3697 = dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696));
                                float _3700 = inversesqrt(_3697);
                                float _3701 = _3700 * _3694;
                                float _3702 = _3700 * _3695;
                                float _3703 = _3700 * _3696;
                                float _3707 = 1.0 - (_3697 / (_3562 * _3562));
                                float _4816 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3712 = sqrt(_3697) * _3577.w;
                                float _3714 = 1.39999997615814208984375 / (_3712 + 1.39999997615814208984375);
                                float _3715 = _3714 * _3714;
                                float _3718 = ((1.0 - _3715) * dot(vec3(_3701, _3702, _3703), vec3(_868, _871, _874))) + _3715;
                                float _3721 = _3712 * _3712;
                                float _3725 = (fma(_2049, _3604.z, fma(_2048, _3604.y, _3604.x * _2047)) + _3604.w) / _3666;
                                float _3726 = (fma(_2049, _3619.z, fma(_2048, _3619.y, _3619.x * _2047)) + _3619.w) / _3666;
                                float _3730 = 1.0 - dot(vec2(_3725, _3726), vec2(_3725, _3726));
                                float _4832 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3731 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3732 = _3731 * (((isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0))) * _3708) / ((_3721 * 0.699999988079071044921875) + 1.0));
                                float _3744 = exp2(log2(1.0 / ((_3721 * 3.5) + 5.0)) * 0.25);
                                float _3745 = 1.0 - _988;
                                float _3752 = sqrt(1.0 - ((1.0 - (_3745 * _3745)) * (1.0 - (_3744 * _3744))));
                                float _3753 = _3752 * _3752;
                                float _3754 = _3753 * _3753;
                                float _3755 = _3701 - _3204;
                                float _3756 = _3702 - _3205;
                                float _3757 = _3703 - _3206;
                                float _3761 = inversesqrt(dot(vec3(_3755, _3756, _3757), vec3(_3755, _3756, _3757)));
                                float _3765 = dot(vec3(_868, _871, _874), vec3((-0.0) - _3204, (-0.0) - _3205, (-0.0) - _3206));
                                float _4843 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3768 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3769 = dot(vec3(_868, _871, _874), vec3(_3761 * _3755, _3761 * _3756, _3761 * _3757));
                                float _4854 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3772 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3776 = ((_3772 * _3772) * (_3754 + (-1.0))) + 1.0;
                                float _3777 = _3714 * _3753;
                                float _3778 = _3777 * _3777;
                                float _3784 = ((1.0 - _3778) * dot(vec3(_868, _871, _874), vec3(_3701, _3702, _3703))) + _3778;
                                float _4865 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3786 = 1.0 - _3753;
                                float _3796 = (0.5 / (((_3785 * ((_3768 * _3786) + _3753)) + 9.9999999392252902907785028219223e-09) + (((_3785 * _3786) + _3753) * _3768))) * _3785;
                                float _4876 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3806 = (_3731 * _3708) * (((_3754 * 3.1415927410125732421875) * (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) / ((_3776 * _3776) * ((_3721 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3806 * _3589.z;
                                frontier_phi_80_pred_1 = _3806 * _3589.y;
                                frontier_phi_80_pred_2 = _3806 * _3589.x;
                                frontier_phi_80_pred_3 = _3732 * _3577.z;
                                frontier_phi_80_pred_4 = _3732 * _3577.y;
                                frontier_phi_80_pred_5 = _3732 * _3577.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3812 = frontier_phi_80_pred;
                            _3811 = frontier_phi_80_pred_1;
                            _3810 = frontier_phi_80_pred_2;
                            _3815 = frontier_phi_80_pred_3;
                            _3814 = frontier_phi_80_pred_4;
                            _3813 = frontier_phi_80_pred_5;
                            _3519 = _3813 + _3532;
                            _3520 = _3814 + _3533;
                            _3521 = _3815 + _3534;
                            _3516 = _3810 + _3529;
                            _3517 = _3811 + _3530;
                            _3518 = _3812 + _3531;
                            if (_3536 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3536;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3518;
                        frontier_phi_74_pred_1 = _3517;
                        frontier_phi_74_pred_2 = _3516;
                        frontier_phi_74_pred_3 = _3521;
                        frontier_phi_74_pred_4 = _3520;
                        frontier_phi_74_pred_5 = _3519;
                    }
                    _3183 = frontier_phi_74_pred;
                    _3181 = frontier_phi_74_pred_1;
                    _3179 = frontier_phi_74_pred_2;
                    _3189 = frontier_phi_74_pred_3;
                    _3187 = frontier_phi_74_pred_4;
                    _3185 = frontier_phi_74_pred_5;
                    uint _3324 = _3323 + 1u;
                    if (_3324 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3317 = _3179;
                        _3318 = _3181;
                        _3319 = _3183;
                        _3320 = _3185;
                        _3321 = _3187;
                        _3322 = _3189;
                        _3323 = _3324;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3187;
                frontier_phi_62_63_ladder_1 = _3185;
                frontier_phi_62_63_ladder_2 = _3183;
                frontier_phi_62_63_ladder_3 = _3189;
                frontier_phi_62_63_ladder_4 = _3181;
                frontier_phi_62_63_ladder_5 = _3179;
            }
            else
            {
                frontier_phi_62_63_ladder = _3074;
                frontier_phi_62_63_ladder_1 = _3072;
                frontier_phi_62_63_ladder_2 = _3070;
                frontier_phi_62_63_ladder_3 = _3076;
                frontier_phi_62_63_ladder_4 = _3068;
                frontier_phi_62_63_ladder_5 = _3066;
            }
            _3178 = frontier_phi_62_63_ladder_5;
            _3180 = frontier_phi_62_63_ladder_4;
            _3182 = frontier_phi_62_63_ladder_2;
            _3184 = frontier_phi_62_63_ladder_1;
            _3186 = frontier_phi_62_63_ladder;
            _3188 = frontier_phi_62_63_ladder_3;
        }
        float _3193 = isnan(1.0) ? _972 : (isnan(_972) ? 1.0 : min(_972, 1.0));
        _2999 = (_3193 * _3184) + _2512;
        _3001 = (_3193 * _3186) + _2514;
        _3003 = (_3193 * _3188) + _2516;
        _3005 = ((_3178 * _957) * _3193) + _2850;
        _3007 = ((_3180 * _959) * _3193) + _2852;
        _3009 = ((_3182 * _960) * _3193) + _2854;
    }
    else
    {
        _2999 = _2512;
        _3001 = _2514;
        _3003 = _2516;
        _3005 = _2850;
        _3007 = _2852;
        _3009 = _2854;
    }
    float _4892 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4903 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4914 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    uint _3029 = _900 + 6u;
    float _3037 = _845 / cbSceneParam._m0[86u].x;
    float _3038 = _846 / cbSceneParam._m0[86u].y;
    vec4 _3052 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3037, _3038, (log2((isnan(cbSceneParam._m0[77u].w) ? _780 : (isnan(_780) ? cbSceneParam._m0[77u].w : min(_780, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3054 = _3052.x;
    float _3055 = _3052.y;
    float _3056 = _3052.z;
    float _3057 = _3052.w;
    float _3128;
    float _3130;
    float _3132;
    float _3134;
    if (_780 > cbSceneParam._m0[78u].w)
    {
        float _3091 = isnan(_780) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _780 : min(cbSceneParam._m0[80u].w, _780));
        float _3092 = _3091 / _780;
        float _3103 = _3092 * _830;
        float _3104 = _831 * _3092;
        float _3105 = (-0.0) - _3104;
        float _3106 = _3092 * _832;
        float _3108 = (cbSceneParam._m0[77u].w * _3105) / _3091;
        float _3109 = _3108 + cbSceneParam._m0[79u].w;
        float _3110 = cbSceneParam._m0[79u].w - _3104;
        float _3116 = sqrt(((_3103 * _3103) + (_3104 * _3104)) + (_3106 * _3106));
        float _3119 = (1.0 - (cbSceneParam._m0[77u].w / _3091)) * _3116;
        float _3124 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3126 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3279;
        if (abs((_3105 - _3108) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3279 = ((((_3109 > 0.0) ? exp2(_3124 * _3109) : (2.0 - exp2(_3126 * _3109))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3119;
        }
        else
        {
            float _3239 = 1.0 / cbSceneParam._m0[80u].x;
            float _3240 = isnan(_3110) ? _3109 : (isnan(_3109) ? _3110 : max(_3109, _3110));
            float _3241 = isnan(_3110) ? _3109 : (isnan(_3109) ? _3110 : min(_3109, _3110));
            float _3250 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : min(_3240, 0.0));
            float _3251 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : min(_3241, 0.0));
            _3279 = ((abs(_3116 / _3105) * cbSceneParam._m0[80u].y) * ((((_3250 - _3251) * 2.0) - ((exp2(_3124 * (isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0)))) - exp2(_3124 * (isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))))) * _3239)) - ((exp2(_3126 * _3250) - exp2(_3126 * _3251)) * _3239))) + (_3119 * cbSceneParam._m0[80u].z);
        }
        vec4 _3281 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3037, _3038, 1.0), 0.0);
        float _3290 = exp2((_3279 * (-1.44269502162933349609375)) * (1.0 - _3281.w));
        float _3291 = log2(_3290);
        float _3307 = log2(_3057);
        _3128 = (exp2(_3307 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3291 * cbSceneParam._m0[78u].x)) * _3281.x) / cbSceneParam._m0[78u].x)) + _3054;
        _3130 = (exp2(_3307 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3291 * cbSceneParam._m0[78u].y)) * _3281.y) / cbSceneParam._m0[78u].y)) + _3055;
        _3132 = (exp2(_3307 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3291 * cbSceneParam._m0[78u].z)) * _3281.z) / cbSceneParam._m0[78u].z)) + _3056;
        _3134 = _3290 * _3057;
    }
    else
    {
        _3128 = _3054;
        _3130 = _3055;
        _3132 = _3056;
        _3134 = _3057;
    }
    float _3146 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3147 = _3146 == 3.0;
    float _3148 = log2(_3134);
    float _3155 = exp2(_3148 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2999 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _972))) + ((_3005 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1781)) * cbPerFrame._m0[3u].x));
    float _3156 = exp2(_3148 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_3001 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _972))) + ((_3007 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1781)) * cbPerFrame._m0[3u].x));
    float _3157 = exp2(_3148 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_3003 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _972))) + ((_3009 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1781)) * cbPerFrame._m0[3u].x));
    float _3166 = (_3146 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3166 * (_3147 ? _3155 : (_3155 + (cbSceneParam._m0[72u].w * _3128)));
    SV_Target.y = _3166 * (_3147 ? _3156 : (_3156 + (cbSceneParam._m0[72u].w * _3130)));
    SV_Target.z = _3166 * (_3147 ? _3157 : (_3157 + (cbSceneParam._m0[72u].w * _3132)));
    SV_Target.w = cbInstanceData._m0[_3029].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3029].w;
}


