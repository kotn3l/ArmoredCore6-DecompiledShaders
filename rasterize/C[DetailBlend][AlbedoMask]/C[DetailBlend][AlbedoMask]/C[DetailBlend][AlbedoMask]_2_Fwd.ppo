#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1322;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    vec4 _256 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _266 = log2(0.0);
    float _268 = exp2(_266 * cbMtdParam._m0[20u].y);
    float _269 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _270 = isnan(1.0) ? _269 : (isnan(_269) ? 1.0 : min(_269, 1.0));
    vec4 _284 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _284.z;
    float _289 = _284.w;
    float _297 = exp2(log2(_288 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _312 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _335 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _337 = _335.x;
    float _338 = _335.y;
    float _343 = _337 - ((_337 * _335.z) * cbMtdParam._m0[19u].w);
    bool _379 = _343 >= 0.25;
    bool _384 = _343 >= 0.3499999940395355224609375;
    bool _389 = _343 >= 0.5;
    bool _394 = _343 >= 0.64999997615814208984375;
    bool _399 = _343 >= 0.75;
    vec4 _427 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _438 = cbMtdParam._m0[9u].x * _427.x;
    float _439 = cbMtdParam._m0[9u].y * _427.y;
    float _440 = cbMtdParam._m0[9u].z * _427.z;
    float _447 = (((((((_399 ? cbMtdParam._m0[13u].x : (_394 ? cbMtdParam._m0[18u].x : (_389 ? cbMtdParam._m0[17u].x : (_384 ? cbMtdParam._m0[16u].x : (_379 ? cbMtdParam._m0[15u].x : cbMtdParam._m0[14u].x))))) - cbMtdParam._m0[10u].x) * _338) + cbMtdParam._m0[10u].x) * _312.x) - _438) * _299) + _438;
    float _448 = (((((((_399 ? cbMtdParam._m0[13u].y : (_394 ? cbMtdParam._m0[18u].y : (_389 ? cbMtdParam._m0[17u].y : (_384 ? cbMtdParam._m0[16u].y : (_379 ? cbMtdParam._m0[15u].y : cbMtdParam._m0[14u].y))))) - cbMtdParam._m0[10u].y) * _338) + cbMtdParam._m0[10u].y) * _312.y) - _439) * _299) + _439;
    float _449 = (((((((_399 ? cbMtdParam._m0[13u].z : (_394 ? cbMtdParam._m0[18u].z : (_389 ? cbMtdParam._m0[17u].z : (_384 ? cbMtdParam._m0[16u].z : (_379 ? cbMtdParam._m0[15u].z : cbMtdParam._m0[14u].z))))) - cbMtdParam._m0[10u].z) * _338) + cbMtdParam._m0[10u].z) * _312.z) - _440) * _299) + _440;
    float _456 = exp2(log2(_289) * cbMtdParam._m0[21u].y);
    vec4 _469 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _489 = (((cbMtdParam._m0[11u].x * _469.x) - _447) * _456) + _447;
    float _490 = (((cbMtdParam._m0[11u].y * _469.y) - _448) * _456) + _448;
    float _491 = (((cbMtdParam._m0[11u].z * _469.z) - _449) * _456) + _449;
    vec4 _503 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _527 = (_256.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _503.x) - _489) * _270) + _489);
    float _529 = (_256.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _503.y) - _490) * _270) + _490);
    float _531 = (_256.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _503.z) - _491) * _270) + _491);
    float _536 = exp2(log2(1.0 - _289) * 0.00999999977648258209228515625);
    float _554 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _536) + cbMtdParam._m0[21u].z;
    float _573 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _554) + cbMtdParam._m0[20u].z) * _456) + _554;
    float _596 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _573) + cbMtdParam._m0[22u].z) * _270) + _573;
    vec4 _608 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _626 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _628 = _626.x;
    float _629 = _626.y;
    float _632 = cbMtdParam._m0[19u].x + _626.z;
    float _635 = (((cbMtdParam._m0[20u].x + _608.z) - _632) * _536) + _632;
    vec4 _647 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _659 = (_288 * 2.0) * ((((_647.z - _635) + cbMtdParam._m0[22u].x) * _456) + _635);
    vec4 _671 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _680 = (((_671.z - _659) + cbMtdParam._m0[21u].x) * _270) + _659;
    float _691 = ((_608.x - _628) * _536) + _628;
    float _692 = ((_608.y - _629) * _536) + _629;
    float _697 = ((_647.x - _691) * _456) + _691;
    float _698 = ((_647.y - _692) * _456) + _692;
    float _707 = ((((_671.x - _697) * _270) + _697) * 2.0) + (-1.0);
    float _708 = ((((_671.y - _698) * _270) + _698) * 2.0) + (-1.0);
    float _709 = dot(vec2(_707, _708), vec2(_707, _708));
    float _3668 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _714 = sqrt(1.0 - (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))));
    float _717 = _707 + (cbMtdParam._m0[21u].w * ((_284.x * 2.0) + (-1.0)));
    float _718 = _708 + (cbMtdParam._m0[21u].w * ((_284.y * 2.0) + (-1.0)));
    float _721 = fma(_714, _239, fma(_718, _231 * TANGENT.x, (_217 * _209) * _717));
    float _724 = fma(_714, _240, fma(_718, _231 * TANGENT.y, (_217 * _210) * _717));
    float _727 = fma(_714, _241, fma(_718, _231 * TANGENT.z, (_217 * _211) * _717));
    float _731 = inversesqrt(dot(vec3(_721, _724, _727), vec3(_721, _724, _727)));
    float _732 = _731 * _721;
    float _733 = _731 * _724;
    float _734 = _731 * _727;
    float _3679 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _735 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _3690 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _3701 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _3712 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _3723 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _739 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _755 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _805 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _795);
    float _806 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _795);
    float _807 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _795);
    float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
    float _812 = _805 * _811;
    float _813 = _806 * _811;
    float _814 = _807 * _811;
    float _820 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _821 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _823 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _825 = _823.w;
    float _844 = fma(_734, cbSceneParam._m0[5u].z, fma(_733, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _732));
    float _847 = fma(_734, cbSceneParam._m0[6u].z, fma(_733, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _732));
    float _850 = fma(_734, cbSceneParam._m0[7u].z, fma(_733, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _732));
    vec4 _852 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _863 = (((_852.y - _735) + (_852.w * _735)) * cbMtdParam._m0[3u].x) + _735;
    uint _876 = uint(roundEven(NORMAL.w)) * 13u;
    uint _878 = (_876 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _884 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) * cbInstanceData._m0[_878].x;
    float _885 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * cbInstanceData._m0[_878].y;
    float _886 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_878].z;
    float _3734 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    vec4 _890 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _895 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _906 = (((_895.x - _739) + (_895.w * _739)) * cbMtdParam._m0[3u].x) + _739;
    float _919 = (cbMtdParam._m0[3u].x * (((_887 * _825) - _887) + _890.x)) + _887;
    float _920 = (cbMtdParam._m0[3u].x * (((_888 * _825) - _888) + _890.y)) + _888;
    float _921 = (cbMtdParam._m0[3u].x * (((_889 * _825) - _889) + _890.z)) + _889;
    float _922 = 1.0 - _906;
    float _923 = _922 * _919;
    float _924 = _922 * _920;
    float _925 = _922 * _921;
    float _930 = (_919 + (-0.039999999105930328369140625)) * _906;
    float _931 = (_920 + (-0.039999999105930328369140625)) * _906;
    float _932 = (_921 + (-0.039999999105930328369140625)) * _906;
    float _933 = _930 + 0.039999999105930328369140625;
    float _935 = _931 + 0.039999999105930328369140625;
    float _936 = _932 + 0.039999999105930328369140625;
    vec4 _945 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _820, cbSceneParam._m0[86u].y * _821));
    float _948 = _945.x * TEXCOORD_4;
    float _949 = dot(vec3(_732, _733, _734), vec3(_812, _813, _814));
    float _952 = _949 * 2.0;
    float _956 = (_952 * _732) - _812;
    float _957 = (_952 * _733) - _813;
    float _958 = (_952 * _734) - _814;
    float _962 = abs(dot(vec3(_812, _813, _814), vec3(_732, _733, _734)));
    float _3767 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _964 = sqrt(_863);
    float _977 = exp2((_964 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_964 * 3.0));
    float _983 = (1.0 - _977) * ((_964 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _984 = _977 * _964;
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1321;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1047 = fma(_1020, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1012));
        float _1051 = fma(_1020, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1012));
        float _1055 = fma(_1020, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1012));
        float _1079 = _1012 + _732;
        float _1080 = _1016 + _733;
        float _1081 = _1020 + _734;
        float _1091 = fma(_1081, cbModelParam._m0[26u].z, fma(_1080, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1079)) - _1047;
        float _1092 = fma(_1081, cbModelParam._m0[27u].z, fma(_1080, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1079)) - _1051;
        float _1093 = fma(_1081, cbModelParam._m0[28u].z, fma(_1080, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1079)) - _1055;
        float _1097 = inversesqrt(dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093)));
        float _1110 = ((_1097 * _1091) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1047 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1097 * _1092) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1051 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1097 * _1093) / cbModelParam._m0[34u].z) + ((((((_1055 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        float _1149 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1115.x + (-0.5));
        float _1151 = _1149 * (_1115.y + (-0.5));
        float _1152 = _1149 * (_1115.z + (-0.5));
        float _1159 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1122.x + (-0.5));
        float _1161 = _1159 * (_1122.y + (-0.5));
        float _1162 = _1159 * (_1122.z + (-0.5));
        float _1169 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1129.x + (-0.5));
        float _1171 = _1169 * (_1129.y + (-0.5));
        float _1172 = _1169 * (_1129.z + (-0.5));
        float _1179 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1136.x + (-0.5));
        float _1181 = _1179 * (_1136.y + (-0.5));
        float _1182 = _1179 * (_1136.z + (-0.5));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = _1150 * 0.5;
        float _1187 = _1160 * 0.5;
        float _1188 = _1170 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1203 = (dot(vec3(_732, _733, _734), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1213 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3815 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1215 + 1.0))) + _1220) * _1183;
        float _1230 = _1151 * 0.5;
        float _1231 = _1161 * 0.5;
        float _1232 = _1171 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_732, _733, _734), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3848 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1257 + 1.0))) + _1262) * _1184;
        float _1272 = _1152 * 0.5;
        float _1273 = _1162 * 0.5;
        float _1274 = _1172 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_732, _733, _734), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3881 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1299 + 1.0))) + _1304) * _1185;
        _1321 = _1152;
        _1323 = _1151;
        _1324 = _1150;
        _1325 = _1162;
        _1326 = _1161;
        _1327 = _1160;
        _1328 = _1172;
        _1329 = _1171;
        _1330 = _1170;
        _1331 = _1185;
        _1332 = _1184;
        _1333 = _1183;
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
    }
    else
    {
        _1321 = _1322;
        _1323 = _1322;
        _1324 = _1322;
        _1325 = _1322;
        _1326 = _1322;
        _1327 = _1322;
        _1328 = _1322;
        _1329 = _1322;
        _1330 = _1322;
        _1331 = _1322;
        _1332 = _1322;
        _1333 = _1322;
        _1334 = 0.0;
        _1335 = 0.0;
        _1336 = 0.0;
    }
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1362 = fma(_1020, cbModelParam._m0[30u].z, fma(_1016, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1012));
        float _1366 = fma(_1020, cbModelParam._m0[31u].z, fma(_1016, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1012));
        float _1370 = fma(_1020, cbModelParam._m0[32u].z, fma(_1016, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1012));
        float _1393 = _1012 + _732;
        float _1394 = _1016 + _733;
        float _1395 = _1020 + _734;
        float _1405 = fma(_1395, cbModelParam._m0[30u].z, fma(_1394, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1393)) - _1362;
        float _1406 = fma(_1395, cbModelParam._m0[31u].z, fma(_1394, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1393)) - _1366;
        float _1407 = fma(_1395, cbModelParam._m0[32u].z, fma(_1394, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1393)) - _1370;
        float _1411 = inversesqrt(dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407)));
        float _1424 = ((_1411 * _1405) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1362 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1411 * _1406) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1366 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1426 = ((_1411 * _1407) / cbModelParam._m0[35u].z) + ((((((_1370 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        float _1461 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1428.x + (-0.5));
        float _1463 = _1461 * (_1428.y + (-0.5));
        float _1464 = _1461 * (_1428.z + (-0.5));
        float _1471 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1435.x + (-0.5));
        float _1473 = _1471 * (_1435.y + (-0.5));
        float _1474 = _1471 * (_1435.z + (-0.5));
        float _1481 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1442.x + (-0.5));
        float _1483 = _1481 * (_1442.y + (-0.5));
        float _1484 = _1481 * (_1442.z + (-0.5));
        float _1491 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1449.x + (-0.5));
        float _1493 = _1491 * (_1449.y + (-0.5));
        float _1494 = _1491 * (_1449.z + (-0.5));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = _1462 * 0.5;
        float _1499 = _1472 * 0.5;
        float _1500 = _1482 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_732, _733, _734), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _3944 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1525 + 1.0))) + _1530) * _1495;
        float _1540 = _1463 * 0.5;
        float _1541 = _1473 * 0.5;
        float _1542 = _1483 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_732, _733, _734), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _3977 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1567 + 1.0))) + _1572) * _1496;
        float _1582 = _1464 * 0.5;
        float _1583 = _1474 * 0.5;
        float _1584 = _1484 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_732, _733, _734), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4010 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1609 + 1.0))) + _1614) * _1497;
        _1631 = _1464;
        _1632 = _1463;
        _1633 = _1462;
        _1634 = _1474;
        _1635 = _1473;
        _1636 = _1472;
        _1637 = _1484;
        _1638 = _1483;
        _1639 = _1482;
        _1640 = _1497;
        _1641 = _1496;
        _1642 = _1495;
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
    }
    else
    {
        _1631 = _1322;
        _1632 = _1322;
        _1633 = _1322;
        _1634 = _1322;
        _1635 = _1322;
        _1636 = _1322;
        _1637 = _1322;
        _1638 = _1322;
        _1639 = _1322;
        _1640 = _1322;
        _1641 = _1322;
        _1642 = _1322;
        _1643 = 0.0;
        _1644 = 0.0;
        _1645 = 0.0;
    }
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1334)) + _1334;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1335)) + _1335;
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1336)) + _1336;
    float _1678 = fma(_1657, cbSceneParam._m0[89u].z, fma(_1656, cbSceneParam._m0[89u].y, _1655 * cbSceneParam._m0[89u].x));
    float _1681 = fma(_1657, cbSceneParam._m0[90u].z, fma(_1656, cbSceneParam._m0[90u].y, _1655 * cbSceneParam._m0[90u].x));
    float _1684 = fma(_1657, cbSceneParam._m0[91u].z, fma(_1656, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1655));
    float _1699 = _956 * 0.5;
    float _1700 = _957 * 0.5;
    float _1701 = _958 * 0.5;
    float _1702 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1705 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1708 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1742;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1715 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1321, _1325, _1328, _1331));
        float _1719 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1323, _1326, _1329, _1332));
        float _1723 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1324, _1327, _1330, _1333));
        float _1730 = dot(vec4(cbModelParam._m0[39u]), vec4(_1699, _1700, _1701, 1.0));
        _1742 = dot(vec3(isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1730) ? 0.0 : (isnan(0.0) ? _1730 : max(0.0, _1730))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1742 = 1.0;
    }
    float _1753;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1744 = dot(vec4(cbModelParam._m0[40u]), vec4(_1699, _1700, _1701, 1.0));
        _1753 = dot(vec3(isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1753 = 1.0;
    }
    float _1757 = (_1753 * cbModelParam._m0[1u].x) + (_1742 * (1.0 - cbModelParam._m0[1u].x));
    float _1767 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _863);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1767 : min(cbModelParam._m0[25u].z, _1767));
    float _1848;
    float _1850;
    float _1852;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1815 = fma(_1020, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1012)) + cbModelParam._m0[13u].w;
        float _1819 = fma(_1020, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1012)) + cbModelParam._m0[14u].w;
        float _1823 = fma(_1020, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1012)) + cbModelParam._m0[15u].w;
        float _1826 = fma(_958, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _956));
        float _1829 = fma(_958, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _956));
        float _1832 = fma(_958, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _956));
        float _1860;
        if (_1826 > 0.0)
        {
            _1860 = abs((1.0 - _1815) / _1826);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1815 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1860 = frontier_phi_16_14_ladder;
        }
        float _2062;
        if (_1829 > 0.0)
        {
            _2062 = abs((1.0 - _1819) / _1829);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1819 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2062 = frontier_phi_25_21_ladder;
        }
        float _2316;
        if (_1832 > 0.0)
        {
            _2316 = abs((1.0 - _1823) / _1832);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1823 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2316 = frontier_phi_37_32_ladder;
        }
        float _2318 = isnan(_2062) ? _1860 : (isnan(_1860) ? _2062 : min(_1860, _2062));
        float _2319 = isnan(_2316) ? _2318 : (isnan(_2318) ? _2316 : min(_2318, _2316));
        float _2323 = (_2319 * _1826) + _1815;
        float _2324 = (_2319 * _1829) + _1819;
        float _2325 = (_2319 * _1832) + _1823;
        float _2326 = _2319 * 9.9999997473787516355514526367188e-05;
        float _2328 = (-1.0) - _2326;
        float _2330 = _2326 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2325 > _2330) || ((_2325 < _2328) || ((_2324 > _2330) || ((_2324 < _2328) || ((_2323 < _2328) || (_2323 > _2330))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2325, cbModelParam._m0[9u].z, fma(_2324, cbModelParam._m0[9u].y, _2323 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2325, cbModelParam._m0[10u].z, fma(_2324, cbModelParam._m0[10u].y, _2323 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2325, cbModelParam._m0[11u].z, fma(_2324, cbModelParam._m0[11u].y, _2323 * cbModelParam._m0[11u].x))), _1768);
            frontier_phi_15_37_ladder = _2453.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2453.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2453.x * cbModelParam._m0[1u].y;
        }
        _1848 = frontier_phi_15_37_ladder_2;
        _1850 = frontier_phi_15_37_ladder_1;
        _1852 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1836 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_956, _957, _958), _1768);
        _1848 = _1836.x * cbModelParam._m0[1u].y;
        _1850 = _1836.y * cbModelParam._m0[1u].y;
        _1852 = _1836.z * cbModelParam._m0[1u].y;
    }
    float _1856 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _863);
    float _1857 = isnan(_1856) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1856 : min(cbModelParam._m0[25u].w, _1856));
    float _1946;
    float _1948;
    float _1950;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1910 = fma(_1020, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1012)) + cbModelParam._m0[21u].w;
        float _1914 = fma(_1020, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1012)) + cbModelParam._m0[22u].w;
        float _1918 = fma(_1020, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1012)) + cbModelParam._m0[23u].w;
        float _1921 = fma(_958, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _956));
        float _1924 = fma(_958, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _956));
        float _1927 = fma(_958, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _956));
        float _2067;
        if (_1921 > 0.0)
        {
            _2067 = abs((1.0 - _1910) / _1921);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1910 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2067 = frontier_phi_27_23_ladder;
        }
        float _2343;
        if (_1924 > 0.0)
        {
            _2343 = abs((1.0 - _1914) / _1924);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1914 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2343 = frontier_phi_39_34_ladder;
        }
        float _2556;
        if (_1927 > 0.0)
        {
            _2556 = abs((1.0 - _1918) / _1927);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1918 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2556 = frontier_phi_48_45_ladder;
        }
        float _2558 = isnan(_2343) ? _2067 : (isnan(_2067) ? _2343 : min(_2067, _2343));
        float _2559 = isnan(_2556) ? _2558 : (isnan(_2558) ? _2556 : min(_2558, _2556));
        float _2563 = (_2559 * _1921) + _1910;
        float _2564 = (_2559 * _1924) + _1914;
        float _2565 = (_2559 * _1927) + _1918;
        float _2566 = _2559 * 9.9999997473787516355514526367188e-05;
        float _2567 = (-1.0) - _2566;
        float _2569 = _2566 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2565 > _2569) || ((_2565 < _2567) || ((_2564 > _2569) || ((_2564 < _2567) || ((_2563 < _2567) || (_2563 > _2569))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2763 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2565, cbModelParam._m0[17u].z, fma(_2564, cbModelParam._m0[17u].y, _2563 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2565, cbModelParam._m0[18u].z, fma(_2564, cbModelParam._m0[18u].y, _2563 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2565, cbModelParam._m0[19u].z, fma(_2564, cbModelParam._m0[19u].y, _2563 * cbModelParam._m0[19u].x))), _1857);
            frontier_phi_24_48_ladder = _2763.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2763.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2763.x * cbModelParam._m0[1u].z;
        }
        _1946 = frontier_phi_24_48_ladder_2;
        _1948 = frontier_phi_24_48_ladder_1;
        _1950 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1930 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_956, _957, _958), _1857);
        _1946 = _1930.x * cbModelParam._m0[1u].z;
        _1948 = _1930.y * cbModelParam._m0[1u].z;
        _1950 = _1930.z * cbModelParam._m0[1u].z;
    }
    float _1963 = (((_983 * _933) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1946 - _1848)) + _1848);
    float _1965 = (((_983 * _935) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1948 - _1850)) + _1850);
    float _1967 = (((_983 * _936) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1950 - _1852)) + _1852);
    float _1970 = fma(_1967, cbSceneParam._m0[89u].z, fma(_1965, cbSceneParam._m0[89u].y, _1963 * cbSceneParam._m0[89u].x));
    float _1973 = fma(_1967, cbSceneParam._m0[90u].z, fma(_1965, cbSceneParam._m0[90u].y, _1963 * cbSceneParam._m0[90u].x));
    float _1976 = fma(_1967, cbSceneParam._m0[91u].z, fma(_1965, cbSceneParam._m0[91u].y, _1963 * cbSceneParam._m0[91u].x));
    uvec4 _1986 = floatBitsToUint(cbInstanceData._m0[_876 + 5u]);
    uint _1988 = _1986.x * 14u;
    uint _1989 = _1988 + 13u;
    float _1996 = _948 + (-1.0);
    float _2001 = (cbLight._m0[_1989].x * _1996) + 1.0;
    float _2002 = (cbLight._m0[_1989].y * _1996) + 1.0;
    float _2003 = (cbLight._m0[_1989].z * _1996) + 1.0;
    float _2004 = (cbLight._m0[_1989].w * _1996) + 1.0;
    uint _2005 = _1988 + 5u;
    float _2011 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2015 = _1988 + 4u;
    float _2021 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
    uint _2025 = _1988 | 1u;
    float _2036 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_732, _733, _734));
    float _2039 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_732, _733, _734));
    float _4146 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _4157 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2044 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 0.3183098733425140380859375;
    float _2046 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.3183098733425140380859375;
    float _2053 = ((cbLight._m0[_2005].x * _2011) * _2046) + ((cbLight._m0[_2015].x * _2021) * _2044);
    float _2054 = ((_2011 * cbLight._m0[_2005].y) * _2046) + ((_2021 * cbLight._m0[_2015].y) * _2044);
    float _2055 = ((_2011 * cbLight._m0[_2005].z) * _2046) + ((_2021 * cbLight._m0[_2015].z) * _2044);
    uvec4 _2059 = floatBitsToUint(cbLight._m0[_1988 + 12u]);
    bool _2061 = _2059.x == 0u;
    float _2072;
    float _2074;
    float _2076;
    if (_2061)
    {
        _2072 = _2053;
        _2074 = _2054;
        _2076 = _2055;
    }
    else
    {
        uint _2080 = _1988 + 6u;
        float _2096 = (dot(vec3(cbLight._m0[_1988 + 2u].xyz), vec3(_732, _733, _734)) * 0.5) + 0.5;
        float _2097 = _2096 * _2096;
        float _4168 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2099 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2072 = (((cbLight._m0[_2080].x * 0.3183098733425140380859375) * _2098) * _2099) + _2053;
        _2074 = (((cbLight._m0[_2080].y * 0.3183098733425140380859375) * _2098) * _2099) + _2054;
        _2076 = (((cbLight._m0[_2080].z * 0.3183098733425140380859375) * _2098) * _2099) + _2055;
    }
    bool _2079 = _2059.y == 0u;
    float _2117;
    float _2119;
    float _2121;
    if (_2079)
    {
        _2117 = _2072;
        _2119 = _2074;
        _2121 = _2076;
    }
    else
    {
        uint _2287 = _1988 + 7u;
        float _2303 = (dot(vec3(cbLight._m0[_1988 + 3u].xyz), vec3(_732, _733, _734)) * 0.5) + 0.5;
        float _2304 = _2303 * _2303;
        float _4184 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2305 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2306 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2117 = (((cbLight._m0[_2287].x * 0.3183098733425140380859375) * _2305) * _2306) + _2072;
        _2119 = (((cbLight._m0[_2287].y * 0.3183098733425140380859375) * _2305) * _2306) + _2074;
        _2121 = (((cbLight._m0[_2287].z * 0.3183098733425140380859375) * _2305) * _2306) + _2076;
    }
    uint _2124 = _1988 + 8u;
    float _2137 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _863) * 0.949999988079071044921875);
    float _2138 = _2137 * _2137;
    float _2139 = cbLight._m0[_1988].x + _812;
    float _2140 = cbLight._m0[_1988].y + _813;
    float _2141 = cbLight._m0[_1988].z + _814;
    float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
    float _2146 = _2145 * _2139;
    float _2147 = _2145 * _2140;
    float _2148 = _2145 * _2141;
    float _2149 = dot(vec3(_732, _733, _734), vec3(cbLight._m0[_1988].xyz));
    float _4200 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _4211 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _2153 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _2154 = dot(vec3(_732, _733, _734), vec3(_2146, _2147, _2148));
    float _4222 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2158 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2146, _2147, _2148));
    float _4233 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2162 = _2138 * _2138;
    float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
    float _2174 = exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0);
    float _2175 = 0.959999978542327880859375 - _930;
    float _2177 = 0.959999978542327880859375 - _931;
    float _2178 = 0.959999978542327880859375 - _932;
    float _2185 = 1.0 - _2138;
    float _2196 = (0.5 / (((_2153 * ((_2152 * _2185) + _2138)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2185) + _2138) * _2152))) * _2152;
    float _4244 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2198 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
    uint _2209 = _1988 + 9u;
    float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _863) * 0.949999988079071044921875);
    float _2221 = _2220 * _2220;
    float _2222 = cbLight._m0[_2025].x + _812;
    float _2223 = cbLight._m0[_2025].y + _813;
    float _2224 = cbLight._m0[_2025].z + _814;
    float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
    float _2229 = _2228 * _2222;
    float _2230 = _2228 * _2223;
    float _2231 = _2228 * _2224;
    float _2232 = dot(vec3(_732, _733, _734), vec3(cbLight._m0[_2025].xyz));
    float _4255 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2236 = dot(vec3(_732, _733, _734), vec3(_2229, _2230, _2231));
    float _4266 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2229, _2230, _2231));
    float _4277 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2221 * _2221;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2255 = exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0);
    float _2262 = 1.0 - _2221;
    float _2272 = (0.5 / (((_2153 * ((_2235 * _2262) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2262) + _2221) * _2235))) * _2235;
    float _4288 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2274 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    float _2284 = (((((_2255 * _2175) + _933) * cbLight._m0[_2209].x) * _2274) * _2011) + (((((_2174 * _2175) + _933) * cbLight._m0[_2124].x) * _2198) * _2021);
    float _2285 = (((((_2255 * _2177) + _935) * cbLight._m0[_2209].y) * _2274) * _2011) + (((((_2174 * _2177) + _935) * cbLight._m0[_2124].y) * _2198) * _2021);
    float _2286 = (((((_2255 * _2178) + _936) * cbLight._m0[_2209].z) * _2274) * _2011) + (((((_2174 * _2178) + _936) * cbLight._m0[_2124].z) * _2198) * _2021);
    float _2348;
    float _2350;
    float _2352;
    if (_2061)
    {
        _2348 = _2284;
        _2350 = _2285;
        _2352 = _2286;
    }
    else
    {
        uint _2354 = _1988 + 2u;
        uint _2358 = _1988 + 10u;
        float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _863) * 0.949999988079071044921875);
        float _2373 = _2372 * _2372;
        float _2374 = cbLight._m0[_2354].x + _812;
        float _2375 = cbLight._m0[_2354].y + _813;
        float _2376 = cbLight._m0[_2354].z + _814;
        float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
        float _2381 = _2380 * _2374;
        float _2382 = _2380 * _2375;
        float _2383 = _2380 * _2376;
        float _2384 = dot(vec3(_732, _733, _734), vec3(cbLight._m0[_2354].xyz));
        float _4299 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2388 = dot(vec3(_732, _733, _734), vec3(_2381, _2382, _2383));
        float _4310 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2392 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2381, _2382, _2383));
        float _4321 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2396 = _2373 * _2373;
        float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
        float _2407 = exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0);
        float _2414 = 1.0 - _2373;
        float _2424 = (0.5 / (((_2153 * ((_2387 * _2414) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2414) + _2373) * _2387))) * _2387;
        float _4332 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2426 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
        float _2427 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2348 = (((((_2407 * _2175) + _933) * cbLight._m0[_2358].x) * _2426) * _2427) + _2284;
        _2350 = (((((_2407 * _2177) + _935) * cbLight._m0[_2358].y) * _2426) * _2427) + _2285;
        _2352 = (((((_2407 * _2178) + _936) * cbLight._m0[_2358].z) * _2426) * _2427) + _2286;
    }
    float _2462;
    float _2464;
    float _2466;
    if (_2079)
    {
        _2462 = _2348;
        _2464 = _2350;
        _2466 = _2352;
    }
    else
    {
        uint _2473 = _1988 + 3u;
        uint _2477 = _1988 + 11u;
        float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2473].w)) * _863) * 0.949999988079071044921875);
        float _2492 = _2491 * _2491;
        float _2493 = cbLight._m0[_2473].x + _812;
        float _2494 = cbLight._m0[_2473].y + _813;
        float _2495 = cbLight._m0[_2473].z + _814;
        float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
        float _2500 = _2499 * _2493;
        float _2501 = _2499 * _2494;
        float _2502 = _2499 * _2495;
        float _2503 = dot(vec3(_732, _733, _734), vec3(cbLight._m0[_2473].xyz));
        float _4348 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2507 = dot(vec3(_732, _733, _734), vec3(_2500, _2501, _2502));
        float _4359 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2511 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_2500, _2501, _2502));
        float _4370 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2515 = _2492 * _2492;
        float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
        float _2526 = exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0);
        float _2533 = 1.0 - _2492;
        float _2543 = (0.5 / (((_2153 * ((_2506 * _2533) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2533) + _2492) * _2506))) * _2506;
        float _4381 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2545 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
        float _2546 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2462 = (((((_2526 * _2175) + _933) * cbLight._m0[_2477].x) * _2545) * _2546) + _2348;
        _2464 = (((((_2526 * _2177) + _935) * cbLight._m0[_2477].y) * _2545) * _2546) + _2350;
        _2466 = (((((_2526 * _2178) + _936) * cbLight._m0[_2477].z) * _2545) * _2546) + _2352;
    }
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    if (_1986.y == 0u)
    {
        float _2621 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2621;
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2621;
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2621;
        uvec4 _2636 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2637 = _2636.x;
        uint _2648 = uint((float(_2636.y) * floor(float(uint(cbSceneParam._m0[85u].y * _821) / _2637))) + floor(float(uint(cbSceneParam._m0[85u].x * _820) / _2637)));
        float _2658 = (log2(_2624 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2659 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        uint _2662 = uint(isnan(14.0) ? _2659 : (isnan(_2659) ? 14.0 : min(_2659, 14.0)));
        uvec4 _2667 = texelFetch(g_lightClusterGridBuffer, int(((_2662 << 2u) + (_2648 << 6u)) >> 2u));
        uint _2668 = _2667.x;
        uint _2669 = _2636.z;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        if (((((1u << ((_2669 >> 4u) & 15u)) + 4294967295u) & _2668) == 0u) || ((_2669 & 240u) == 0u))
        {
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
        }
        else
        {
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2777;
            float _2779;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            uint _2918 = 0u;
            uint _2927;
            bool _2928;
            for (;;)
            {
                _2927 = texelFetch(g_lightClassification, int((((_2662 << 5u) + (_2648 << 9u)) + (_2918 << 2u)) >> 2u)).x;
                _2928 = _2927 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2928)
                {
                    frontier_phi_63_pred = _2917;
                    frontier_phi_63_pred_1 = _2916;
                    frontier_phi_63_pred_2 = _2915;
                    frontier_phi_63_pred_3 = _2914;
                    frontier_phi_63_pred_4 = _2913;
                    frontier_phi_63_pred_5 = _2912;
                }
                else
                {
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    uint _3042;
                    _3036 = _2912;
                    _3037 = _2913;
                    _3038 = _2914;
                    _3039 = _2915;
                    _3040 = _2916;
                    _3041 = _2917;
                    _3042 = _2927;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    for (;;)
                    {
                        uint _3046 = uint(findLSB(_3042)) + (_2918 << 5u);
                        uint _3043 = (_3042 + 4294967295u) & _3042;
                        uint _3048 = _3046 * 48u;
                        vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 3u)).x));
                        uint _3068 = (_3046 * 48u) + 4u;
                        vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 3u)).x));
                        uint _3087 = (_3046 * 48u) + 8u;
                        vec3 _3098 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x));
                        float _3102 = _3062.x - _2622;
                        float _3103 = _3062.y - _2623;
                        float _3104 = _3062.z - _2624;
                        float _3105 = dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104));
                        float _3108 = inversesqrt(_3105);
                        float _3109 = _3108 * _3102;
                        float _3110 = _3108 * _3103;
                        float _3111 = _3108 * _3104;
                        float _3112 = dot(vec3(_844, _847, _850), vec3(_3109, _3110, _3111));
                        float _3117 = 1.0 - (_3105 * _3062.w);
                        float _4407 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3118 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3119 = sqrt(_3105) * _3081.w;
                        float _3122 = 1.39999997615814208984375 / (_3119 + 1.39999997615814208984375);
                        float _3123 = _3122 * _3122;
                        float _3126 = ((1.0 - _3123) * _3112) + _3123;
                        float _3129 = _3119 * _3119;
                        float _3133 = ((isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))) * _3118) / ((_3129 * 0.699999988079071044921875) + 1.0);
                        float _3137 = (-0.0) - _2622;
                        float _3138 = (-0.0) - _2623;
                        float _3139 = (-0.0) - _2624;
                        float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                        float _3144 = _3143 * _3137;
                        float _3145 = _3143 * _3138;
                        float _3146 = _3143 * _3139;
                        float _3153 = exp2(log2(1.0 / ((_3129 * 3.5) + 5.0)) * 0.25);
                        float _3154 = 1.0 - _964;
                        float _3161 = sqrt(1.0 - ((1.0 - (_3154 * _3154)) * (1.0 - (_3153 * _3153))));
                        float _3162 = _3161 * _3161;
                        float _3163 = _3162 * _3162;
                        float _3164 = _3144 + _3109;
                        float _3165 = _3145 + _3110;
                        float _3166 = _3146 + _3111;
                        float _3170 = inversesqrt(dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166)));
                        float _3174 = dot(vec3(_844, _847, _850), vec3(_3144, _3145, _3146));
                        float _4423 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3177 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3178 = dot(vec3(_844, _847, _850), vec3(_3170 * _3164, _3170 * _3165, _3170 * _3166));
                        float _4434 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3181 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3185 = ((_3181 * _3181) * (_3163 + (-1.0))) + 1.0;
                        float _3186 = _3122 * _3162;
                        float _3187 = _3186 * _3186;
                        float _3190 = ((1.0 - _3187) * _3112) + _3187;
                        float _4445 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3191 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3192 = 1.0 - _3162;
                        float _3202 = (0.5 / (((_3191 * ((_3177 * _3192) + _3162)) + 9.9999999392252902907785028219223e-09) + (((_3191 * _3192) + _3162) * _3177))) * _3191;
                        float _4456 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3213 = (((_3163 * 3.1415927410125732421875) * (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) / ((_3185 * _3185) * ((_3129 * 2.1991131305694580078125) + 3.141590118408203125))) * _3118;
                        _2971 = (_3133 * _3081.x) + _3039;
                        _2972 = (_3133 * _3081.y) + _3040;
                        _2973 = (_3133 * _3081.z) + _3041;
                        _2968 = (_3213 * _3098.x) + _3036;
                        _2969 = (_3213 * _3098.y) + _3037;
                        _2970 = (_3213 * _3098.z) + _3038;
                        if (_3043 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3036 = _2968;
                            _3037 = _2969;
                            _3038 = _2970;
                            _3039 = _2971;
                            _3040 = _2972;
                            _3041 = _2973;
                            _3042 = _3043;
                        }
                    }
                    frontier_phi_63_pred = _2973;
                    frontier_phi_63_pred_1 = _2972;
                    frontier_phi_63_pred_2 = _2971;
                    frontier_phi_63_pred_3 = _2970;
                    frontier_phi_63_pred_4 = _2969;
                    frontier_phi_63_pred_5 = _2968;
                }
                _2779 = frontier_phi_63_pred;
                _2777 = frontier_phi_63_pred_1;
                _2775 = frontier_phi_63_pred_2;
                _2773 = frontier_phi_63_pred_3;
                _2771 = frontier_phi_63_pred_4;
                _2769 = frontier_phi_63_pred_5;
                uint _2919 = _2918 + 1u;
                if (_2919 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2912 = _2769;
                    _2913 = _2771;
                    _2914 = _2773;
                    _2915 = _2775;
                    _2916 = _2777;
                    _2917 = _2779;
                    _2918 = _2919;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
        }
        uvec4 _2782 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2783 = _2782.z;
        uint _2785 = (_2783 >> 8u) & 15u;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        if (((4294967295u << _2785) & _2668) == 0u)
        {
            _2880 = _2768;
            _2882 = _2770;
            _2884 = _2772;
            _2886 = _2774;
            _2888 = _2776;
            _2890 = _2778;
        }
        else
        {
            float _2905 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
            float _2906 = _2905 * _2622;
            float _2907 = _2905 * _2623;
            float _2908 = _2905 * _2624;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2785 < ((_2783 >> 12u) & 15u))
            {
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _2891;
                float _3019 = _2768;
                float _3020 = _2770;
                float _3021 = _2772;
                float _3022 = _2774;
                float _3023 = _2776;
                float _3024 = _2778;
                uint _3025 = _2785;
                uint _3034;
                bool _3035;
                for (;;)
                {
                    _3034 = texelFetch(g_lightClassification, int((((_2662 << 5u) + (_2648 << 9u)) + (_3025 << 2u)) >> 2u)).x;
                    _3035 = _3034 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3035)
                    {
                        frontier_phi_69_pred = _3024;
                        frontier_phi_69_pred_1 = _3023;
                        frontier_phi_69_pred_2 = _3022;
                        frontier_phi_69_pred_3 = _3021;
                        frontier_phi_69_pred_4 = _3020;
                        frontier_phi_69_pred_5 = _3019;
                    }
                    else
                    {
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3231 = _3019;
                        float _3232 = _3020;
                        float _3233 = _3021;
                        float _3234 = _3022;
                        float _3235 = _3023;
                        float _3236 = _3024;
                        uint _3237 = _3034;
                        uint _3238;
                        vec4 _3263;
                        float _3264;
                        vec4 _3279;
                        vec3 _3291;
                        vec4 _3306;
                        vec4 _3321;
                        float _3368;
                        bool _3369;
                        for (;;)
                        {
                            uint _3248 = ((_3025 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3237));
                            _3238 = (_3237 + 4294967295u) & _3237;
                            uint _3250 = _3248 * 40u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            _3264 = _3263.w;
                            uint _3266 = (_3248 * 40u) + 4u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3281 = (_3248 * 40u) + 8u;
                            _3291 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x));
                            uint _3293 = (_3248 * 40u) + 16u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3308 = (_3248 * 40u) + 20u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3324 = (_3248 * 40u) + 24u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3343 = (_3248 * 40u) + 28u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3368 = fma(_2624, _3356.z, fma(_2623, _3356.y, _3356.x * _2622)) + _3356.w;
                            _3369 = !((fma(_2624, _3337.z, fma(_2623, _3337.y, _3337.x * _2622)) + _3337.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3369)
                            {
                                float _3396 = _3263.x - _2622;
                                float _3397 = _3263.y - _2623;
                                float _3398 = _3263.z - _2624;
                                float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                                float _3402 = inversesqrt(_3399);
                                float _3403 = _3402 * _3396;
                                float _3404 = _3402 * _3397;
                                float _3405 = _3402 * _3398;
                                float _3409 = 1.0 - (_3399 / (_3264 * _3264));
                                float _4467 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3414 = sqrt(_3399) * _3279.w;
                                float _3416 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                                float _3417 = _3416 * _3416;
                                float _3420 = ((1.0 - _3417) * dot(vec3(_3403, _3404, _3405), vec3(_844, _847, _850))) + _3417;
                                float _3423 = _3414 * _3414;
                                float _3427 = (fma(_2624, _3306.z, fma(_2623, _3306.y, _3306.x * _2622)) + _3306.w) / _3368;
                                float _3428 = (fma(_2624, _3321.z, fma(_2623, _3321.y, _3321.x * _2622)) + _3321.w) / _3368;
                                float _3432 = 1.0 - dot(vec2(_3427, _3428), vec2(_3427, _3428));
                                float _4483 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3434 = _3433 * (((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3410) / ((_3423 * 0.699999988079071044921875) + 1.0));
                                float _3446 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                                float _3447 = 1.0 - _964;
                                float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                                float _3455 = _3454 * _3454;
                                float _3456 = _3455 * _3455;
                                float _3457 = _3403 - _2906;
                                float _3458 = _3404 - _2907;
                                float _3459 = _3405 - _2908;
                                float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                                float _3467 = dot(vec3(_844, _847, _850), vec3((-0.0) - _2906, (-0.0) - _2907, (-0.0) - _2908));
                                float _4494 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3471 = dot(vec3(_844, _847, _850), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                                float _4505 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                                float _3479 = _3416 * _3455;
                                float _3480 = _3479 * _3479;
                                float _3486 = ((1.0 - _3480) * dot(vec3(_844, _847, _850), vec3(_3403, _3404, _3405))) + _3480;
                                float _4516 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3488 = 1.0 - _3455;
                                float _3498 = (0.5 / (((_3487 * ((_3470 * _3488) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3487 * _3488) + _3455) * _3470))) * _3487;
                                float _4527 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3508 = (_3433 * _3410) * (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) / ((_3478 * _3478) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3434 * _3279.z;
                                frontier_phi_75_pred_1 = _3434 * _3279.y;
                                frontier_phi_75_pred_2 = _3434 * _3279.x;
                                frontier_phi_75_pred_3 = _3508 * _3291.z;
                                frontier_phi_75_pred_4 = _3508 * _3291.y;
                                frontier_phi_75_pred_5 = _3508 * _3291.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3517 = frontier_phi_75_pred;
                            _3516 = frontier_phi_75_pred_1;
                            _3515 = frontier_phi_75_pred_2;
                            _3514 = frontier_phi_75_pred_3;
                            _3513 = frontier_phi_75_pred_4;
                            _3512 = frontier_phi_75_pred_5;
                            _3221 = _3515 + _3234;
                            _3222 = _3516 + _3235;
                            _3223 = _3517 + _3236;
                            _3218 = _3512 + _3231;
                            _3219 = _3513 + _3232;
                            _3220 = _3514 + _3233;
                            if (_3238 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3238;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3223;
                        frontier_phi_69_pred_1 = _3222;
                        frontier_phi_69_pred_2 = _3221;
                        frontier_phi_69_pred_3 = _3220;
                        frontier_phi_69_pred_4 = _3219;
                        frontier_phi_69_pred_5 = _3218;
                    }
                    _2891 = frontier_phi_69_pred;
                    _2889 = frontier_phi_69_pred_1;
                    _2887 = frontier_phi_69_pred_2;
                    _2885 = frontier_phi_69_pred_3;
                    _2883 = frontier_phi_69_pred_4;
                    _2881 = frontier_phi_69_pred_5;
                    uint _3026 = _3025 + 1u;
                    if (_3026 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3019 = _2881;
                        _3020 = _2883;
                        _3021 = _2885;
                        _3022 = _2887;
                        _3023 = _2889;
                        _3024 = _2891;
                        _3025 = _3026;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2891;
                frontier_phi_57_58_ladder_1 = _2889;
                frontier_phi_57_58_ladder_2 = _2887;
                frontier_phi_57_58_ladder_3 = _2885;
                frontier_phi_57_58_ladder_4 = _2883;
                frontier_phi_57_58_ladder_5 = _2881;
            }
            else
            {
                frontier_phi_57_58_ladder = _2778;
                frontier_phi_57_58_ladder_1 = _2776;
                frontier_phi_57_58_ladder_2 = _2774;
                frontier_phi_57_58_ladder_3 = _2772;
                frontier_phi_57_58_ladder_4 = _2770;
                frontier_phi_57_58_ladder_5 = _2768;
            }
            _2880 = frontier_phi_57_58_ladder_5;
            _2882 = frontier_phi_57_58_ladder_4;
            _2884 = frontier_phi_57_58_ladder_3;
            _2886 = frontier_phi_57_58_ladder_2;
            _2888 = frontier_phi_57_58_ladder_1;
            _2890 = frontier_phi_57_58_ladder;
        }
        float _2895 = isnan(1.0) ? _948 : (isnan(_948) ? 1.0 : min(_948, 1.0));
        _2680 = (_2895 * _2886) + _2117;
        _2682 = (_2895 * _2888) + _2119;
        _2684 = (_2895 * _2890) + _2121;
        _2686 = ((_2880 * _933) * _2895) + _2462;
        _2688 = ((_2882 * _935) * _2895) + _2464;
        _2690 = ((_2884 * _936) * _2895) + _2466;
    }
    else
    {
        _2680 = _2117;
        _2682 = _2119;
        _2684 = _2121;
        _2686 = _2462;
        _2688 = _2464;
        _2690 = _2466;
    }
    float _4543 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _4554 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _4565 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    uint _2710 = _876 + 6u;
    float _2718 = _820 / cbSceneParam._m0[86u].x;
    float _2719 = _821 / cbSceneParam._m0[86u].y;
    vec4 _2733 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2718, _2719, (log2((isnan(cbSceneParam._m0[77u].w) ? _755 : (isnan(_755) ? cbSceneParam._m0[77u].w : min(_755, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2735 = _2733.x;
    float _2736 = _2733.y;
    float _2737 = _2733.z;
    float _2738 = _2733.w;
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    if (_755 > cbSceneParam._m0[78u].w)
    {
        float _2793 = isnan(_755) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _755 : min(cbSceneParam._m0[80u].w, _755));
        float _2794 = _2793 / _755;
        float _2805 = _2794 * _805;
        float _2806 = _806 * _2794;
        float _2807 = (-0.0) - _2806;
        float _2808 = _2794 * _807;
        float _2810 = (cbSceneParam._m0[77u].w * _2807) / _2793;
        float _2811 = _2810 + cbSceneParam._m0[79u].w;
        float _2812 = cbSceneParam._m0[79u].w - _2806;
        float _2818 = sqrt(((_2805 * _2805) + (_2806 * _2806)) + (_2808 * _2808));
        float _2821 = (1.0 - (cbSceneParam._m0[77u].w / _2793)) * _2818;
        float _2826 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2828 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2981;
        if (abs((_2807 - _2810) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2981 = ((((_2811 > 0.0) ? exp2(_2826 * _2811) : (2.0 - exp2(_2828 * _2811))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2821;
        }
        else
        {
            float _2941 = 1.0 / cbSceneParam._m0[80u].x;
            float _2942 = isnan(_2812) ? _2811 : (isnan(_2811) ? _2812 : max(_2811, _2812));
            float _2943 = isnan(_2812) ? _2811 : (isnan(_2811) ? _2812 : min(_2811, _2812));
            float _2952 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : min(_2942, 0.0));
            float _2953 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : min(_2943, 0.0));
            _2981 = ((abs(_2818 / _2807) * cbSceneParam._m0[80u].y) * ((((_2952 - _2953) * 2.0) - ((exp2(_2826 * (isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0)))) - exp2(_2826 * (isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0))))) * _2941)) - ((exp2(_2828 * _2952) - exp2(_2828 * _2953)) * _2941))) + (_2821 * cbSceneParam._m0[80u].z);
        }
        vec4 _2983 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2718, _2719, 1.0), 0.0);
        float _2992 = exp2((_2981 * (-1.44269502162933349609375)) * (1.0 - _2983.w));
        float _2993 = log2(_2992);
        float _3009 = log2(_2738);
        _2830 = (exp2(_3009 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2993 * cbSceneParam._m0[78u].x)) * _2983.x) / cbSceneParam._m0[78u].x)) + _2735;
        _2832 = (exp2(_3009 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2993 * cbSceneParam._m0[78u].y)) * _2983.y) / cbSceneParam._m0[78u].y)) + _2736;
        _2834 = (exp2(_3009 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2993 * cbSceneParam._m0[78u].z)) * _2983.z) / cbSceneParam._m0[78u].z)) + _2737;
        _2836 = _2992 * _2738;
    }
    else
    {
        _2830 = _2735;
        _2832 = _2736;
        _2834 = _2737;
        _2836 = _2738;
    }
    float _2848 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2849 = _2848 == 3.0;
    float _2850 = log2(_2836);
    float _2857 = exp2(_2850 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2680 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _948))) + ((_2686 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1757)) * cbPerFrame._m0[3u].x));
    float _2858 = exp2(_2850 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2682 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _948))) + ((_2688 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1757)) * cbPerFrame._m0[3u].x));
    float _2859 = exp2(_2850 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2684 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _948))) + ((_2690 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1757)) * cbPerFrame._m0[3u].x));
    float _2868 = (_2848 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2868 * (_2849 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2830)));
    SV_Target.y = _2868 * (_2849 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2832)));
    SV_Target.z = _2868 * (_2849 ? _2859 : (_2859 + (cbSceneParam._m0[72u].w * _2834)));
    SV_Target.w = cbInstanceData._m0[_2710].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2710].w;
}


