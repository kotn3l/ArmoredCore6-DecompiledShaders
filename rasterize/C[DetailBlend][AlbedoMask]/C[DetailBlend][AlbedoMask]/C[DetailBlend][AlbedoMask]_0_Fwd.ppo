#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1345;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    vec4 _262 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _276 = exp2(log2(_262.w * cbMtdParam._m0[22u].y) * cbMtdParam._m0[20u].y);
    float _277 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _278 = isnan(1.0) ? _277 : (isnan(_277) ? 1.0 : min(_277, 1.0));
    vec4 _292 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _296 = _292.z;
    float _297 = _292.w;
    float _305 = exp2(log2(_296 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _306 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _320 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _343 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _345 = _343.x;
    float _346 = _343.y;
    float _370 = ((cbMtdParam._m0[19u].w * _343.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _345)) + _345;
    bool _406 = _370 >= 0.25;
    bool _411 = _370 >= 0.3499999940395355224609375;
    bool _416 = _370 >= 0.5;
    bool _421 = _370 >= 0.64999997615814208984375;
    bool _426 = _370 >= 0.75;
    vec4 _454 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _465 = cbMtdParam._m0[9u].x * _454.x;
    float _466 = cbMtdParam._m0[9u].y * _454.y;
    float _467 = cbMtdParam._m0[9u].z * _454.z;
    float _474 = (((((((_426 ? cbMtdParam._m0[13u].x : (_421 ? cbMtdParam._m0[18u].x : (_416 ? cbMtdParam._m0[17u].x : (_411 ? cbMtdParam._m0[16u].x : (_406 ? cbMtdParam._m0[15u].x : cbMtdParam._m0[14u].x))))) - cbMtdParam._m0[10u].x) * _346) + cbMtdParam._m0[10u].x) * _320.x) - _465) * _307) + _465;
    float _475 = (((((((_426 ? cbMtdParam._m0[13u].y : (_421 ? cbMtdParam._m0[18u].y : (_416 ? cbMtdParam._m0[17u].y : (_411 ? cbMtdParam._m0[16u].y : (_406 ? cbMtdParam._m0[15u].y : cbMtdParam._m0[14u].y))))) - cbMtdParam._m0[10u].y) * _346) + cbMtdParam._m0[10u].y) * _320.y) - _466) * _307) + _466;
    float _476 = (((((((_426 ? cbMtdParam._m0[13u].z : (_421 ? cbMtdParam._m0[18u].z : (_416 ? cbMtdParam._m0[17u].z : (_411 ? cbMtdParam._m0[16u].z : (_406 ? cbMtdParam._m0[15u].z : cbMtdParam._m0[14u].z))))) - cbMtdParam._m0[10u].z) * _346) + cbMtdParam._m0[10u].z) * _320.z) - _467) * _307) + _467;
    float _483 = exp2(log2(_297) * cbMtdParam._m0[21u].y);
    vec4 _496 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _516 = (((cbMtdParam._m0[11u].x * _496.x) - _474) * _483) + _474;
    float _517 = (((cbMtdParam._m0[11u].y * _496.y) - _475) * _483) + _475;
    float _518 = (((cbMtdParam._m0[11u].z * _496.z) - _476) * _483) + _476;
    vec4 _530 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _554 = (_262.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _530.x) - _516) * _278) + _516);
    float _556 = (_262.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _530.y) - _517) * _278) + _517);
    float _558 = (_262.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _530.z) - _518) * _278) + _518);
    float _563 = exp2(log2(1.0 - _297) * 0.00999999977648258209228515625);
    float _581 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _563) + cbMtdParam._m0[21u].z;
    float _600 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _581) + cbMtdParam._m0[20u].z) * _483) + _581;
    float _620 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _600) + cbMtdParam._m0[22u].z) * _278) + _600;
    vec4 _632 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _650 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _652 = _650.x;
    float _653 = _650.y;
    float _656 = cbMtdParam._m0[19u].x + _650.z;
    float _659 = (((cbMtdParam._m0[20u].x + _632.z) - _656) * _563) + _656;
    vec4 _671 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _683 = (_296 * 2.0) * ((((_671.z - _659) + cbMtdParam._m0[22u].x) * _483) + _659);
    vec4 _695 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _704 = (((_695.z - _683) + cbMtdParam._m0[21u].x) * _278) + _683;
    float _715 = ((_632.x - _652) * _563) + _652;
    float _716 = ((_632.y - _653) * _563) + _653;
    float _721 = ((_671.x - _715) * _483) + _715;
    float _722 = ((_671.y - _716) * _483) + _716;
    float _731 = ((((_695.x - _721) * _278) + _721) * 2.0) + (-1.0);
    float _732 = ((((_695.y - _722) * _278) + _722) * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _3691 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _738 = sqrt(1.0 - (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))));
    float _741 = _731 + (cbMtdParam._m0[21u].w * ((_292.x * 2.0) + (-1.0)));
    float _742 = _732 + (cbMtdParam._m0[21u].w * ((_292.y * 2.0) + (-1.0)));
    float _745 = fma(_738, _241, fma(_742, _233 * TANGENT.x, (_219 * _211) * _741));
    float _748 = fma(_738, _242, fma(_742, _233 * TANGENT.y, (_219 * _212) * _741));
    float _751 = fma(_738, _243, fma(_742, _233 * TANGENT.z, (_219 * _213) * _741));
    float _755 = inversesqrt(dot(vec3(_745, _748, _751), vec3(_745, _748, _751)));
    float _756 = _755 * _745;
    float _757 = _755 * _748;
    float _758 = _755 * _751;
    float _3702 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _759 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3724 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3735 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3746 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _763 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _779 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _829 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _819);
    float _830 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _819);
    float _831 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _819);
    float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
    float _836 = _829 * _835;
    float _837 = _830 * _835;
    float _838 = _831 * _835;
    float _844 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _845 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _847 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _849 = _847.w;
    float _867 = fma(_758, cbSceneParam._m0[5u].z, fma(_757, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _756));
    float _870 = fma(_758, cbSceneParam._m0[6u].z, fma(_757, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _756));
    float _873 = fma(_758, cbSceneParam._m0[7u].z, fma(_757, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _756));
    vec4 _875 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _886 = (((_875.y - _759) + (_875.w * _759)) * cbMtdParam._m0[3u].x) + _759;
    uint _899 = uint(roundEven(NORMAL.w)) * 13u;
    uint _901 = (_899 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _907 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) * cbInstanceData._m0[_901].x;
    float _908 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * cbInstanceData._m0[_901].y;
    float _909 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * cbInstanceData._m0[_901].z;
    float _3757 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    vec4 _913 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _918 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _929 = (((_918.x - _763) + (_918.w * _763)) * cbMtdParam._m0[3u].x) + _763;
    float _942 = (cbMtdParam._m0[3u].x * (((_910 * _849) - _910) + _913.x)) + _910;
    float _943 = (cbMtdParam._m0[3u].x * (((_911 * _849) - _911) + _913.y)) + _911;
    float _944 = (cbMtdParam._m0[3u].x * (((_912 * _849) - _912) + _913.z)) + _912;
    float _945 = 1.0 - _929;
    float _946 = _945 * _942;
    float _947 = _945 * _943;
    float _948 = _945 * _944;
    float _953 = (_942 + (-0.039999999105930328369140625)) * _929;
    float _954 = (_943 + (-0.039999999105930328369140625)) * _929;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _929;
    float _956 = _953 + 0.039999999105930328369140625;
    float _958 = _954 + 0.039999999105930328369140625;
    float _959 = _955 + 0.039999999105930328369140625;
    vec4 _968 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _844, cbSceneParam._m0[86u].y * _845));
    float _971 = _968.x * TEXCOORD_4;
    float _972 = dot(vec3(_756, _757, _758), vec3(_836, _837, _838));
    float _975 = _972 * 2.0;
    float _979 = (_975 * _756) - _836;
    float _980 = (_975 * _757) - _837;
    float _981 = (_975 * _758) - _838;
    float _985 = abs(dot(vec3(_836, _837, _838), vec3(_756, _757, _758)));
    float _3790 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _987 = sqrt(_886);
    float _1000 = exp2((_987 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_987 * 3.0));
    float _1006 = (1.0 - _1000) * ((_987 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1007 = _1000 * _987;
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1344;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1070 = fma(_1043, cbModelParam._m0[26u].z, fma(_1039, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1035));
        float _1074 = fma(_1043, cbModelParam._m0[27u].z, fma(_1039, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1035));
        float _1078 = fma(_1043, cbModelParam._m0[28u].z, fma(_1039, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1035));
        float _1102 = _1035 + _756;
        float _1103 = _1039 + _757;
        float _1104 = _1043 + _758;
        float _1114 = fma(_1104, cbModelParam._m0[26u].z, fma(_1103, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1102)) - _1070;
        float _1115 = fma(_1104, cbModelParam._m0[27u].z, fma(_1103, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1102)) - _1074;
        float _1116 = fma(_1104, cbModelParam._m0[28u].z, fma(_1103, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1102)) - _1078;
        float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
        float _1133 = ((_1120 * _1114) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1070 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1120 * _1115) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1074 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1120 * _1116) / cbModelParam._m0[34u].z) + ((((((_1078 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        float _1172 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1138.x + (-0.5));
        float _1174 = _1172 * (_1138.y + (-0.5));
        float _1175 = _1172 * (_1138.z + (-0.5));
        float _1182 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1145.x + (-0.5));
        float _1184 = _1182 * (_1145.y + (-0.5));
        float _1185 = _1182 * (_1145.z + (-0.5));
        float _1192 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1152.x + (-0.5));
        float _1194 = _1192 * (_1152.y + (-0.5));
        float _1195 = _1192 * (_1152.z + (-0.5));
        float _1202 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1159.x + (-0.5));
        float _1204 = _1202 * (_1159.y + (-0.5));
        float _1205 = _1202 * (_1159.z + (-0.5));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = _1173 * 0.5;
        float _1210 = _1183 * 0.5;
        float _1211 = _1193 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1226 = (dot(vec3(_756, _757, _758), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1236 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3838 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1238 + 1.0))) + _1243) * _1206;
        float _1253 = _1174 * 0.5;
        float _1254 = _1184 * 0.5;
        float _1255 = _1194 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_756, _757, _758), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _3871 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1280 + 1.0))) + _1285) * _1207;
        float _1295 = _1175 * 0.5;
        float _1296 = _1185 * 0.5;
        float _1297 = _1195 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_756, _757, _758), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3904 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1322 + 1.0))) + _1327) * _1208;
        _1344 = _1175;
        _1346 = _1174;
        _1347 = _1173;
        _1348 = _1185;
        _1349 = _1184;
        _1350 = _1183;
        _1351 = _1195;
        _1352 = _1194;
        _1353 = _1193;
        _1354 = _1208;
        _1355 = _1207;
        _1356 = _1206;
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
    }
    else
    {
        _1344 = _1345;
        _1346 = _1345;
        _1347 = _1345;
        _1348 = _1345;
        _1349 = _1345;
        _1350 = _1345;
        _1351 = _1345;
        _1352 = _1345;
        _1353 = _1345;
        _1354 = _1345;
        _1355 = _1345;
        _1356 = _1345;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1385 = fma(_1043, cbModelParam._m0[30u].z, fma(_1039, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1035));
        float _1389 = fma(_1043, cbModelParam._m0[31u].z, fma(_1039, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1035));
        float _1393 = fma(_1043, cbModelParam._m0[32u].z, fma(_1039, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1035));
        float _1416 = _1035 + _756;
        float _1417 = _1039 + _757;
        float _1418 = _1043 + _758;
        float _1428 = fma(_1418, cbModelParam._m0[30u].z, fma(_1417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1416)) - _1385;
        float _1429 = fma(_1418, cbModelParam._m0[31u].z, fma(_1417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1416)) - _1389;
        float _1430 = fma(_1418, cbModelParam._m0[32u].z, fma(_1417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1416)) - _1393;
        float _1434 = inversesqrt(dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430)));
        float _1447 = ((_1434 * _1428) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1385 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1434 * _1429) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1389 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1434 * _1430) / cbModelParam._m0[35u].z) + ((((((_1393 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        float _1484 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1451.x + (-0.5));
        float _1486 = _1484 * (_1451.y + (-0.5));
        float _1487 = _1484 * (_1451.z + (-0.5));
        float _1494 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1458.x + (-0.5));
        float _1496 = _1494 * (_1458.y + (-0.5));
        float _1497 = _1494 * (_1458.z + (-0.5));
        float _1504 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1465.x + (-0.5));
        float _1506 = _1504 * (_1465.y + (-0.5));
        float _1507 = _1504 * (_1465.z + (-0.5));
        float _1514 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1472.x + (-0.5));
        float _1516 = _1514 * (_1472.y + (-0.5));
        float _1517 = _1514 * (_1472.z + (-0.5));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = _1485 * 0.5;
        float _1522 = _1495 * 0.5;
        float _1523 = _1505 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_756, _757, _758), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _3967 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1548 + 1.0))) + _1553) * _1518;
        float _1563 = _1486 * 0.5;
        float _1564 = _1496 * 0.5;
        float _1565 = _1506 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_756, _757, _758), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4000 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1590 + 1.0))) + _1595) * _1519;
        float _1605 = _1487 * 0.5;
        float _1606 = _1497 * 0.5;
        float _1607 = _1507 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_756, _757, _758), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4033 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1632 + 1.0))) + _1637) * _1520;
        _1654 = _1487;
        _1655 = _1486;
        _1656 = _1485;
        _1657 = _1497;
        _1658 = _1496;
        _1659 = _1495;
        _1660 = _1507;
        _1661 = _1506;
        _1662 = _1505;
        _1663 = _1520;
        _1664 = _1519;
        _1665 = _1518;
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
    }
    else
    {
        _1654 = _1345;
        _1655 = _1345;
        _1656 = _1345;
        _1657 = _1345;
        _1658 = _1345;
        _1659 = _1345;
        _1660 = _1345;
        _1661 = _1345;
        _1662 = _1345;
        _1663 = _1345;
        _1664 = _1345;
        _1665 = _1345;
        _1666 = 0.0;
        _1667 = 0.0;
        _1668 = 0.0;
    }
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1357)) + _1357;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1358)) + _1358;
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1359)) + _1359;
    float _1701 = fma(_1680, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1678 * cbSceneParam._m0[89u].x));
    float _1704 = fma(_1680, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1678 * cbSceneParam._m0[90u].x));
    float _1707 = fma(_1680, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1678));
    float _1722 = _979 * 0.5;
    float _1723 = _980 * 0.5;
    float _1724 = _981 * 0.5;
    float _1725 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1728 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1731 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1765;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1738 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1344, _1348, _1351, _1354));
        float _1742 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1346, _1349, _1352, _1355));
        float _1746 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1347, _1350, _1353, _1356));
        float _1753 = dot(vec4(cbModelParam._m0[39u]), vec4(_1722, _1723, _1724, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1753) ? 0.0 : (isnan(0.0) ? _1753 : max(0.0, _1753))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1776;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1767 = dot(vec4(cbModelParam._m0[40u]), vec4(_1722, _1723, _1724, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1780 = (_1776 * cbModelParam._m0[1u].x) + (_1765 * (1.0 - cbModelParam._m0[1u].x));
    float _1790 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _886);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1790 : min(cbModelParam._m0[25u].z, _1790));
    float _1871;
    float _1873;
    float _1875;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1838 = fma(_1043, cbModelParam._m0[13u].z, fma(_1039, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1035)) + cbModelParam._m0[13u].w;
        float _1842 = fma(_1043, cbModelParam._m0[14u].z, fma(_1039, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1035)) + cbModelParam._m0[14u].w;
        float _1846 = fma(_1043, cbModelParam._m0[15u].z, fma(_1039, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1035)) + cbModelParam._m0[15u].w;
        float _1849 = fma(_981, cbModelParam._m0[13u].z, fma(_980, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979));
        float _1852 = fma(_981, cbModelParam._m0[14u].z, fma(_980, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979));
        float _1855 = fma(_981, cbModelParam._m0[15u].z, fma(_980, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979));
        float _1883;
        if (_1849 > 0.0)
        {
            _1883 = abs((1.0 - _1838) / _1849);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1838 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1883 = frontier_phi_16_14_ladder;
        }
        float _2085;
        if (_1852 > 0.0)
        {
            _2085 = abs((1.0 - _1842) / _1852);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1842 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2085 = frontier_phi_25_21_ladder;
        }
        float _2339;
        if (_1855 > 0.0)
        {
            _2339 = abs((1.0 - _1846) / _1855);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1846 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2339 = frontier_phi_37_32_ladder;
        }
        float _2341 = isnan(_2085) ? _1883 : (isnan(_1883) ? _2085 : min(_1883, _2085));
        float _2342 = isnan(_2339) ? _2341 : (isnan(_2341) ? _2339 : min(_2341, _2339));
        float _2346 = (_2342 * _1849) + _1838;
        float _2347 = (_2342 * _1852) + _1842;
        float _2348 = (_2342 * _1855) + _1846;
        float _2349 = _2342 * 9.9999997473787516355514526367188e-05;
        float _2351 = (-1.0) - _2349;
        float _2353 = _2349 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2348 > _2353) || ((_2348 < _2351) || ((_2347 > _2353) || ((_2347 < _2351) || ((_2346 < _2351) || (_2346 > _2353))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2476 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2348, cbModelParam._m0[9u].z, fma(_2347, cbModelParam._m0[9u].y, _2346 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2348, cbModelParam._m0[10u].z, fma(_2347, cbModelParam._m0[10u].y, _2346 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2348, cbModelParam._m0[11u].z, fma(_2347, cbModelParam._m0[11u].y, _2346 * cbModelParam._m0[11u].x))), _1791);
            frontier_phi_15_37_ladder = _2476.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2476.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2476.x * cbModelParam._m0[1u].y;
        }
        _1871 = frontier_phi_15_37_ladder_2;
        _1873 = frontier_phi_15_37_ladder_1;
        _1875 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1859 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_979, _980, _981), _1791);
        _1871 = _1859.x * cbModelParam._m0[1u].y;
        _1873 = _1859.y * cbModelParam._m0[1u].y;
        _1875 = _1859.z * cbModelParam._m0[1u].y;
    }
    float _1879 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _886);
    float _1880 = isnan(_1879) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1879 : min(cbModelParam._m0[25u].w, _1879));
    float _1969;
    float _1971;
    float _1973;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1933 = fma(_1043, cbModelParam._m0[21u].z, fma(_1039, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1035)) + cbModelParam._m0[21u].w;
        float _1937 = fma(_1043, cbModelParam._m0[22u].z, fma(_1039, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1035)) + cbModelParam._m0[22u].w;
        float _1941 = fma(_1043, cbModelParam._m0[23u].z, fma(_1039, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1035)) + cbModelParam._m0[23u].w;
        float _1944 = fma(_981, cbModelParam._m0[21u].z, fma(_980, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979));
        float _1947 = fma(_981, cbModelParam._m0[22u].z, fma(_980, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979));
        float _1950 = fma(_981, cbModelParam._m0[23u].z, fma(_980, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979));
        float _2090;
        if (_1944 > 0.0)
        {
            _2090 = abs((1.0 - _1933) / _1944);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1933 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2090 = frontier_phi_27_23_ladder;
        }
        float _2366;
        if (_1947 > 0.0)
        {
            _2366 = abs((1.0 - _1937) / _1947);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1937 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2366 = frontier_phi_39_34_ladder;
        }
        float _2579;
        if (_1950 > 0.0)
        {
            _2579 = abs((1.0 - _1941) / _1950);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1941 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2579 = frontier_phi_48_45_ladder;
        }
        float _2581 = isnan(_2366) ? _2090 : (isnan(_2090) ? _2366 : min(_2090, _2366));
        float _2582 = isnan(_2579) ? _2581 : (isnan(_2581) ? _2579 : min(_2581, _2579));
        float _2586 = (_2582 * _1944) + _1933;
        float _2587 = (_2582 * _1947) + _1937;
        float _2588 = (_2582 * _1950) + _1941;
        float _2589 = _2582 * 9.9999997473787516355514526367188e-05;
        float _2590 = (-1.0) - _2589;
        float _2592 = _2589 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2588 > _2592) || ((_2588 < _2590) || ((_2587 > _2592) || ((_2587 < _2590) || ((_2586 < _2590) || (_2586 > _2592))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2588, cbModelParam._m0[17u].z, fma(_2587, cbModelParam._m0[17u].y, _2586 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2588, cbModelParam._m0[18u].z, fma(_2587, cbModelParam._m0[18u].y, _2586 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2588, cbModelParam._m0[19u].z, fma(_2587, cbModelParam._m0[19u].y, _2586 * cbModelParam._m0[19u].x))), _1880);
            frontier_phi_24_48_ladder = _2786.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2786.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2786.x * cbModelParam._m0[1u].z;
        }
        _1969 = frontier_phi_24_48_ladder_2;
        _1971 = frontier_phi_24_48_ladder_1;
        _1973 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_979, _980, _981), _1880);
        _1969 = _1953.x * cbModelParam._m0[1u].z;
        _1971 = _1953.y * cbModelParam._m0[1u].z;
        _1973 = _1953.z * cbModelParam._m0[1u].z;
    }
    float _1986 = (((_1006 * _956) + _1007) * _971) * ((cbModelParam._m0[1u].w * (_1969 - _1871)) + _1871);
    float _1988 = (((_1006 * _958) + _1007) * _971) * ((cbModelParam._m0[1u].w * (_1971 - _1873)) + _1873);
    float _1990 = (((_1006 * _959) + _1007) * _971) * ((cbModelParam._m0[1u].w * (_1973 - _1875)) + _1875);
    float _1993 = fma(_1990, cbSceneParam._m0[89u].z, fma(_1988, cbSceneParam._m0[89u].y, _1986 * cbSceneParam._m0[89u].x));
    float _1996 = fma(_1990, cbSceneParam._m0[90u].z, fma(_1988, cbSceneParam._m0[90u].y, _1986 * cbSceneParam._m0[90u].x));
    float _1999 = fma(_1990, cbSceneParam._m0[91u].z, fma(_1988, cbSceneParam._m0[91u].y, _1986 * cbSceneParam._m0[91u].x));
    uvec4 _2009 = floatBitsToUint(cbInstanceData._m0[_899 + 5u]);
    uint _2011 = _2009.x * 14u;
    uint _2012 = _2011 + 13u;
    float _2019 = _971 + (-1.0);
    float _2024 = (cbLight._m0[_2012].x * _2019) + 1.0;
    float _2025 = (cbLight._m0[_2012].y * _2019) + 1.0;
    float _2026 = (cbLight._m0[_2012].z * _2019) + 1.0;
    float _2027 = (cbLight._m0[_2012].w * _2019) + 1.0;
    uint _2028 = _2011 + 5u;
    float _2034 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
    uint _2038 = _2011 + 4u;
    float _2044 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
    uint _2048 = _2011 | 1u;
    float _2059 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_756, _757, _758));
    float _2062 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_756, _757, _758));
    float _4169 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _4180 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2067 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.3183098733425140380859375;
    float _2069 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * 0.3183098733425140380859375;
    float _2076 = ((cbLight._m0[_2028].x * _2034) * _2069) + ((cbLight._m0[_2038].x * _2044) * _2067);
    float _2077 = ((_2034 * cbLight._m0[_2028].y) * _2069) + ((_2044 * cbLight._m0[_2038].y) * _2067);
    float _2078 = ((_2034 * cbLight._m0[_2028].z) * _2069) + ((_2044 * cbLight._m0[_2038].z) * _2067);
    uvec4 _2082 = floatBitsToUint(cbLight._m0[_2011 + 12u]);
    bool _2084 = _2082.x == 0u;
    float _2095;
    float _2097;
    float _2099;
    if (_2084)
    {
        _2095 = _2076;
        _2097 = _2077;
        _2099 = _2078;
    }
    else
    {
        uint _2103 = _2011 + 6u;
        float _2119 = (dot(vec3(cbLight._m0[_2011 + 2u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2120 = _2119 * _2119;
        float _4191 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2121 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2122 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2095 = (((cbLight._m0[_2103].x * 0.3183098733425140380859375) * _2121) * _2122) + _2076;
        _2097 = (((cbLight._m0[_2103].y * 0.3183098733425140380859375) * _2121) * _2122) + _2077;
        _2099 = (((cbLight._m0[_2103].z * 0.3183098733425140380859375) * _2121) * _2122) + _2078;
    }
    bool _2102 = _2082.y == 0u;
    float _2140;
    float _2142;
    float _2144;
    if (_2102)
    {
        _2140 = _2095;
        _2142 = _2097;
        _2144 = _2099;
    }
    else
    {
        uint _2310 = _2011 + 7u;
        float _2326 = (dot(vec3(cbLight._m0[_2011 + 3u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2327 = _2326 * _2326;
        float _4207 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2328 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2329 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
        _2140 = (((cbLight._m0[_2310].x * 0.3183098733425140380859375) * _2328) * _2329) + _2095;
        _2142 = (((cbLight._m0[_2310].y * 0.3183098733425140380859375) * _2328) * _2329) + _2097;
        _2144 = (((cbLight._m0[_2310].z * 0.3183098733425140380859375) * _2328) * _2329) + _2099;
    }
    uint _2147 = _2011 + 8u;
    float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _886) * 0.949999988079071044921875);
    float _2161 = _2160 * _2160;
    float _2162 = cbLight._m0[_2011].x + _836;
    float _2163 = cbLight._m0[_2011].y + _837;
    float _2164 = cbLight._m0[_2011].z + _838;
    float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
    float _2169 = _2168 * _2162;
    float _2170 = _2168 * _2163;
    float _2171 = _2168 * _2164;
    float _2172 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2011].xyz));
    float _4223 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _2176 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2177 = dot(vec3(_756, _757, _758), vec3(_2169, _2170, _2171));
    float _4245 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2181 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2169, _2170, _2171));
    float _4256 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2185 = _2161 * _2161;
    float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
    float _2197 = exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0);
    float _2198 = 0.959999978542327880859375 - _953;
    float _2200 = 0.959999978542327880859375 - _954;
    float _2201 = 0.959999978542327880859375 - _955;
    float _2208 = 1.0 - _2161;
    float _2219 = (0.5 / (((_2176 * ((_2175 * _2208) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2208) + _2161) * _2175))) * _2175;
    float _4267 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2221 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
    uint _2232 = _2011 + 9u;
    float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _886) * 0.949999988079071044921875);
    float _2244 = _2243 * _2243;
    float _2245 = cbLight._m0[_2048].x + _836;
    float _2246 = cbLight._m0[_2048].y + _837;
    float _2247 = cbLight._m0[_2048].z + _838;
    float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
    float _2252 = _2251 * _2245;
    float _2253 = _2251 * _2246;
    float _2254 = _2251 * _2247;
    float _2255 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2048].xyz));
    float _4278 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2259 = dot(vec3(_756, _757, _758), vec3(_2252, _2253, _2254));
    float _4289 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2263 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2252, _2253, _2254));
    float _4300 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2267 = _2244 * _2244;
    float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
    float _2278 = exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0);
    float _2285 = 1.0 - _2244;
    float _2295 = (0.5 / (((_2176 * ((_2258 * _2285) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2285) + _2244) * _2258))) * _2258;
    float _4311 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2297 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
    float _2307 = (((((_2278 * _2198) + _956) * cbLight._m0[_2232].x) * _2297) * _2034) + (((((_2197 * _2198) + _956) * cbLight._m0[_2147].x) * _2221) * _2044);
    float _2308 = (((((_2278 * _2200) + _958) * cbLight._m0[_2232].y) * _2297) * _2034) + (((((_2197 * _2200) + _958) * cbLight._m0[_2147].y) * _2221) * _2044);
    float _2309 = (((((_2278 * _2201) + _959) * cbLight._m0[_2232].z) * _2297) * _2034) + (((((_2197 * _2201) + _959) * cbLight._m0[_2147].z) * _2221) * _2044);
    float _2371;
    float _2373;
    float _2375;
    if (_2084)
    {
        _2371 = _2307;
        _2373 = _2308;
        _2375 = _2309;
    }
    else
    {
        uint _2377 = _2011 + 2u;
        uint _2381 = _2011 + 10u;
        float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _886) * 0.949999988079071044921875);
        float _2396 = _2395 * _2395;
        float _2397 = cbLight._m0[_2377].x + _836;
        float _2398 = cbLight._m0[_2377].y + _837;
        float _2399 = cbLight._m0[_2377].z + _838;
        float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
        float _2404 = _2403 * _2397;
        float _2405 = _2403 * _2398;
        float _2406 = _2403 * _2399;
        float _2407 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2377].xyz));
        float _4322 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2411 = dot(vec3(_756, _757, _758), vec3(_2404, _2405, _2406));
        float _4333 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2414 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2415 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2404, _2405, _2406));
        float _4344 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2419 = _2396 * _2396;
        float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
        float _2430 = exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0);
        float _2437 = 1.0 - _2396;
        float _2447 = (0.5 / (((_2176 * ((_2410 * _2437) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2437) + _2396) * _2410))) * _2410;
        float _4355 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2449 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
        float _2450 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2371 = (((((_2430 * _2198) + _956) * cbLight._m0[_2381].x) * _2449) * _2450) + _2307;
        _2373 = (((((_2430 * _2200) + _958) * cbLight._m0[_2381].y) * _2449) * _2450) + _2308;
        _2375 = (((((_2430 * _2201) + _959) * cbLight._m0[_2381].z) * _2449) * _2450) + _2309;
    }
    float _2485;
    float _2487;
    float _2489;
    if (_2102)
    {
        _2485 = _2371;
        _2487 = _2373;
        _2489 = _2375;
    }
    else
    {
        uint _2496 = _2011 + 3u;
        uint _2500 = _2011 + 11u;
        float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2496].w)) * _886) * 0.949999988079071044921875);
        float _2515 = _2514 * _2514;
        float _2516 = cbLight._m0[_2496].x + _836;
        float _2517 = cbLight._m0[_2496].y + _837;
        float _2518 = cbLight._m0[_2496].z + _838;
        float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
        float _2523 = _2522 * _2516;
        float _2524 = _2522 * _2517;
        float _2525 = _2522 * _2518;
        float _2526 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2496].xyz));
        float _4371 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2530 = dot(vec3(_756, _757, _758), vec3(_2523, _2524, _2525));
        float _4382 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2534 = dot(vec3(cbLight._m0[_2496].xyz), vec3(_2523, _2524, _2525));
        float _4393 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2538 = _2515 * _2515;
        float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
        float _2549 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
        float _2556 = 1.0 - _2515;
        float _2566 = (0.5 / (((_2176 * ((_2529 * _2556) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2556) + _2515) * _2529))) * _2529;
        float _4404 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2568 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
        float _2569 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
        _2485 = (((((_2549 * _2198) + _956) * cbLight._m0[_2500].x) * _2568) * _2569) + _2371;
        _2487 = (((((_2549 * _2200) + _958) * cbLight._m0[_2500].y) * _2568) * _2569) + _2373;
        _2489 = (((((_2549 * _2201) + _959) * cbLight._m0[_2500].z) * _2568) * _2569) + _2375;
    }
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    if (_2009.y == 0u)
    {
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2644;
        float _2646 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2644;
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2644;
        uvec4 _2659 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2660 = _2659.x;
        uint _2671 = uint((float(_2659.y) * floor(float(uint(cbSceneParam._m0[85u].y * _845) / _2660))) + floor(float(uint(cbSceneParam._m0[85u].x * _844) / _2660)));
        float _2681 = (log2(_2647 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2682 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        uint _2685 = uint(isnan(14.0) ? _2682 : (isnan(_2682) ? 14.0 : min(_2682, 14.0)));
        uvec4 _2690 = texelFetch(g_lightClusterGridBuffer, int(((_2685 << 2u) + (_2671 << 6u)) >> 2u));
        uint _2691 = _2690.x;
        uint _2692 = _2659.z;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        if (((((1u << ((_2692 >> 4u) & 15u)) + 4294967295u) & _2691) == 0u) || ((_2692 & 240u) == 0u))
        {
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
        }
        else
        {
            float _2792;
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            uint _2941 = 0u;
            uint _2950;
            bool _2951;
            for (;;)
            {
                _2950 = texelFetch(g_lightClassification, int((((_2685 << 5u) + (_2671 << 9u)) + (_2941 << 2u)) >> 2u)).x;
                _2951 = _2950 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2951)
                {
                    frontier_phi_63_pred = _2940;
                    frontier_phi_63_pred_1 = _2939;
                    frontier_phi_63_pred_2 = _2938;
                    frontier_phi_63_pred_3 = _2937;
                    frontier_phi_63_pred_4 = _2936;
                    frontier_phi_63_pred_5 = _2935;
                }
                else
                {
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    uint _3065;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2950;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    for (;;)
                    {
                        uint _3069 = uint(findLSB(_3065)) + (_2941 << 5u);
                        uint _3066 = (_3065 + 4294967295u) & _3065;
                        uint _3071 = _3069 * 48u;
                        vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 3u)).x));
                        uint _3091 = (_3069 * 48u) + 4u;
                        vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 3u)).x));
                        uint _3110 = (_3069 * 48u) + 8u;
                        vec3 _3121 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x));
                        float _3125 = _3085.x - _2645;
                        float _3126 = _3085.y - _2646;
                        float _3127 = _3085.z - _2647;
                        float _3128 = dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127));
                        float _3131 = inversesqrt(_3128);
                        float _3132 = _3131 * _3125;
                        float _3133 = _3131 * _3126;
                        float _3134 = _3131 * _3127;
                        float _3135 = dot(vec3(_867, _870, _873), vec3(_3132, _3133, _3134));
                        float _3140 = 1.0 - (_3128 * _3085.w);
                        float _4430 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3141 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3142 = sqrt(_3128) * _3104.w;
                        float _3145 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * _3135) + _3146;
                        float _3152 = _3142 * _3142;
                        float _3156 = ((isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))) * _3141) / ((_3152 * 0.699999988079071044921875) + 1.0);
                        float _3160 = (-0.0) - _2645;
                        float _3161 = (-0.0) - _2646;
                        float _3162 = (-0.0) - _2647;
                        float _3166 = inversesqrt(dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162)));
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3176 = exp2(log2(1.0 / ((_3152 * 3.5) + 5.0)) * 0.25);
                        float _3177 = 1.0 - _987;
                        float _3184 = sqrt(1.0 - ((1.0 - (_3177 * _3177)) * (1.0 - (_3176 * _3176))));
                        float _3185 = _3184 * _3184;
                        float _3186 = _3185 * _3185;
                        float _3187 = _3167 + _3132;
                        float _3188 = _3168 + _3133;
                        float _3189 = _3169 + _3134;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3197 = dot(vec3(_867, _870, _873), vec3(_3167, _3168, _3169));
                        float _4446 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3200 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3201 = dot(vec3(_867, _870, _873), vec3(_3193 * _3187, _3193 * _3188, _3193 * _3189));
                        float _4457 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3208 = ((_3204 * _3204) * (_3186 + (-1.0))) + 1.0;
                        float _3209 = _3145 * _3185;
                        float _3210 = _3209 * _3209;
                        float _3213 = ((1.0 - _3210) * _3135) + _3210;
                        float _4468 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3215 = 1.0 - _3185;
                        float _3225 = (0.5 / (((_3214 * ((_3200 * _3215) + _3185)) + 9.9999999392252902907785028219223e-09) + (((_3214 * _3215) + _3185) * _3200))) * _3214;
                        float _4479 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3236 = (((_3186 * 3.1415927410125732421875) * (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) / ((_3208 * _3208) * ((_3152 * 2.1991131305694580078125) + 3.141590118408203125))) * _3141;
                        _2994 = (_3156 * _3104.x) + _3062;
                        _2995 = (_3156 * _3104.y) + _3063;
                        _2996 = (_3156 * _3104.z) + _3064;
                        _2991 = (_3236 * _3121.x) + _3059;
                        _2992 = (_3236 * _3121.y) + _3060;
                        _2993 = (_3236 * _3121.z) + _3061;
                        if (_3066 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _3066;
                        }
                    }
                    frontier_phi_63_pred = _2996;
                    frontier_phi_63_pred_1 = _2995;
                    frontier_phi_63_pred_2 = _2994;
                    frontier_phi_63_pred_3 = _2993;
                    frontier_phi_63_pred_4 = _2992;
                    frontier_phi_63_pred_5 = _2991;
                }
                _2802 = frontier_phi_63_pred;
                _2800 = frontier_phi_63_pred_1;
                _2798 = frontier_phi_63_pred_2;
                _2796 = frontier_phi_63_pred_3;
                _2794 = frontier_phi_63_pred_4;
                _2792 = frontier_phi_63_pred_5;
                uint _2942 = _2941 + 1u;
                if (_2942 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2935 = _2792;
                    _2936 = _2794;
                    _2937 = _2796;
                    _2938 = _2798;
                    _2939 = _2800;
                    _2940 = _2802;
                    _2941 = _2942;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
        }
        uvec4 _2805 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2806 = _2805.z;
        uint _2808 = (_2806 >> 8u) & 15u;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        if (((4294967295u << _2808) & _2691) == 0u)
        {
            _2903 = _2791;
            _2905 = _2793;
            _2907 = _2795;
            _2909 = _2797;
            _2911 = _2799;
            _2913 = _2801;
        }
        else
        {
            float _2928 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
            float _2929 = _2928 * _2645;
            float _2930 = _2928 * _2646;
            float _2931 = _2928 * _2647;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2808 < ((_2806 >> 12u) & 15u))
            {
                float _2904;
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _3042 = _2791;
                float _3043 = _2793;
                float _3044 = _2795;
                float _3045 = _2797;
                float _3046 = _2799;
                float _3047 = _2801;
                uint _3048 = _2808;
                uint _3057;
                bool _3058;
                for (;;)
                {
                    _3057 = texelFetch(g_lightClassification, int((((_2685 << 5u) + (_2671 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                    _3058 = _3057 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3058)
                    {
                        frontier_phi_69_pred = _3047;
                        frontier_phi_69_pred_1 = _3046;
                        frontier_phi_69_pred_2 = _3045;
                        frontier_phi_69_pred_3 = _3044;
                        frontier_phi_69_pred_4 = _3043;
                        frontier_phi_69_pred_5 = _3042;
                    }
                    else
                    {
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3254 = _3042;
                        float _3255 = _3043;
                        float _3256 = _3044;
                        float _3257 = _3045;
                        float _3258 = _3046;
                        float _3259 = _3047;
                        uint _3260 = _3057;
                        uint _3261;
                        vec4 _3286;
                        float _3287;
                        vec4 _3302;
                        vec3 _3314;
                        vec4 _3329;
                        vec4 _3344;
                        float _3391;
                        bool _3392;
                        for (;;)
                        {
                            uint _3271 = ((_3048 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3260));
                            _3261 = (_3260 + 4294967295u) & _3260;
                            uint _3273 = _3271 * 40u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            _3287 = _3286.w;
                            uint _3289 = (_3271 * 40u) + 4u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3304 = (_3271 * 40u) + 8u;
                            _3314 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x));
                            uint _3316 = (_3271 * 40u) + 16u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3331 = (_3271 * 40u) + 20u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3347 = (_3271 * 40u) + 24u;
                            vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3366 = (_3271 * 40u) + 28u;
                            vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3391 = fma(_2647, _3379.z, fma(_2646, _3379.y, _3379.x * _2645)) + _3379.w;
                            _3392 = !((fma(_2647, _3360.z, fma(_2646, _3360.y, _3360.x * _2645)) + _3360.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3392)
                            {
                                float _3419 = _3286.x - _2645;
                                float _3420 = _3286.y - _2646;
                                float _3421 = _3286.z - _2647;
                                float _3422 = dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421));
                                float _3425 = inversesqrt(_3422);
                                float _3426 = _3425 * _3419;
                                float _3427 = _3425 * _3420;
                                float _3428 = _3425 * _3421;
                                float _3432 = 1.0 - (_3422 / (_3287 * _3287));
                                float _4490 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3437 = sqrt(_3422) * _3302.w;
                                float _3439 = 1.39999997615814208984375 / (_3437 + 1.39999997615814208984375);
                                float _3440 = _3439 * _3439;
                                float _3443 = ((1.0 - _3440) * dot(vec3(_3426, _3427, _3428), vec3(_867, _870, _873))) + _3440;
                                float _3446 = _3437 * _3437;
                                float _3450 = (fma(_2647, _3329.z, fma(_2646, _3329.y, _3329.x * _2645)) + _3329.w) / _3391;
                                float _3451 = (fma(_2647, _3344.z, fma(_2646, _3344.y, _3344.x * _2645)) + _3344.w) / _3391;
                                float _3455 = 1.0 - dot(vec2(_3450, _3451), vec2(_3450, _3451));
                                float _4506 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3457 = _3456 * (((isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0))) * _3433) / ((_3446 * 0.699999988079071044921875) + 1.0));
                                float _3469 = exp2(log2(1.0 / ((_3446 * 3.5) + 5.0)) * 0.25);
                                float _3470 = 1.0 - _987;
                                float _3477 = sqrt(1.0 - ((1.0 - (_3470 * _3470)) * (1.0 - (_3469 * _3469))));
                                float _3478 = _3477 * _3477;
                                float _3479 = _3478 * _3478;
                                float _3480 = _3426 - _2929;
                                float _3481 = _3427 - _2930;
                                float _3482 = _3428 - _2931;
                                float _3486 = inversesqrt(dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482)));
                                float _3490 = dot(vec3(_867, _870, _873), vec3((-0.0) - _2929, (-0.0) - _2930, (-0.0) - _2931));
                                float _4517 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3494 = dot(vec3(_867, _870, _873), vec3(_3486 * _3480, _3486 * _3481, _3486 * _3482));
                                float _4528 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3497 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3501 = ((_3497 * _3497) * (_3479 + (-1.0))) + 1.0;
                                float _3502 = _3439 * _3478;
                                float _3503 = _3502 * _3502;
                                float _3509 = ((1.0 - _3503) * dot(vec3(_867, _870, _873), vec3(_3426, _3427, _3428))) + _3503;
                                float _4539 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3511 = 1.0 - _3478;
                                float _3521 = (0.5 / (((_3510 * ((_3493 * _3511) + _3478)) + 9.9999999392252902907785028219223e-09) + (((_3510 * _3511) + _3478) * _3493))) * _3510;
                                float _4550 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3531 = (_3456 * _3433) * (((_3479 * 3.1415927410125732421875) * (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) / ((_3501 * _3501) * ((_3446 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3457 * _3302.z;
                                frontier_phi_75_pred_1 = _3457 * _3302.y;
                                frontier_phi_75_pred_2 = _3457 * _3302.x;
                                frontier_phi_75_pred_3 = _3531 * _3314.z;
                                frontier_phi_75_pred_4 = _3531 * _3314.y;
                                frontier_phi_75_pred_5 = _3531 * _3314.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3540 = frontier_phi_75_pred;
                            _3539 = frontier_phi_75_pred_1;
                            _3538 = frontier_phi_75_pred_2;
                            _3537 = frontier_phi_75_pred_3;
                            _3536 = frontier_phi_75_pred_4;
                            _3535 = frontier_phi_75_pred_5;
                            _3244 = _3538 + _3257;
                            _3245 = _3539 + _3258;
                            _3246 = _3540 + _3259;
                            _3241 = _3535 + _3254;
                            _3242 = _3536 + _3255;
                            _3243 = _3537 + _3256;
                            if (_3261 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3261;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3246;
                        frontier_phi_69_pred_1 = _3245;
                        frontier_phi_69_pred_2 = _3244;
                        frontier_phi_69_pred_3 = _3243;
                        frontier_phi_69_pred_4 = _3242;
                        frontier_phi_69_pred_5 = _3241;
                    }
                    _2914 = frontier_phi_69_pred;
                    _2912 = frontier_phi_69_pred_1;
                    _2910 = frontier_phi_69_pred_2;
                    _2908 = frontier_phi_69_pred_3;
                    _2906 = frontier_phi_69_pred_4;
                    _2904 = frontier_phi_69_pred_5;
                    uint _3049 = _3048 + 1u;
                    if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3042 = _2904;
                        _3043 = _2906;
                        _3044 = _2908;
                        _3045 = _2910;
                        _3046 = _2912;
                        _3047 = _2914;
                        _3048 = _3049;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2914;
                frontier_phi_57_58_ladder_1 = _2912;
                frontier_phi_57_58_ladder_2 = _2910;
                frontier_phi_57_58_ladder_3 = _2908;
                frontier_phi_57_58_ladder_4 = _2906;
                frontier_phi_57_58_ladder_5 = _2904;
            }
            else
            {
                frontier_phi_57_58_ladder = _2801;
                frontier_phi_57_58_ladder_1 = _2799;
                frontier_phi_57_58_ladder_2 = _2797;
                frontier_phi_57_58_ladder_3 = _2795;
                frontier_phi_57_58_ladder_4 = _2793;
                frontier_phi_57_58_ladder_5 = _2791;
            }
            _2903 = frontier_phi_57_58_ladder_5;
            _2905 = frontier_phi_57_58_ladder_4;
            _2907 = frontier_phi_57_58_ladder_3;
            _2909 = frontier_phi_57_58_ladder_2;
            _2911 = frontier_phi_57_58_ladder_1;
            _2913 = frontier_phi_57_58_ladder;
        }
        float _2918 = isnan(1.0) ? _971 : (isnan(_971) ? 1.0 : min(_971, 1.0));
        _2703 = (_2918 * _2909) + _2140;
        _2705 = (_2918 * _2911) + _2142;
        _2707 = (_2918 * _2913) + _2144;
        _2709 = ((_2903 * _956) * _2918) + _2485;
        _2711 = ((_2905 * _958) * _2918) + _2487;
        _2713 = ((_2907 * _959) * _2918) + _2489;
    }
    else
    {
        _2703 = _2140;
        _2705 = _2142;
        _2707 = _2144;
        _2709 = _2485;
        _2711 = _2487;
        _2713 = _2489;
    }
    float _4566 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4577 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4588 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    uint _2733 = _899 + 6u;
    float _2741 = _844 / cbSceneParam._m0[86u].x;
    float _2742 = _845 / cbSceneParam._m0[86u].y;
    vec4 _2756 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2741, _2742, (log2((isnan(cbSceneParam._m0[77u].w) ? _779 : (isnan(_779) ? cbSceneParam._m0[77u].w : min(_779, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2758 = _2756.x;
    float _2759 = _2756.y;
    float _2760 = _2756.z;
    float _2761 = _2756.w;
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    if (_779 > cbSceneParam._m0[78u].w)
    {
        float _2816 = isnan(_779) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _779 : min(cbSceneParam._m0[80u].w, _779));
        float _2817 = _2816 / _779;
        float _2828 = _2817 * _829;
        float _2829 = _830 * _2817;
        float _2830 = (-0.0) - _2829;
        float _2831 = _2817 * _831;
        float _2833 = (cbSceneParam._m0[77u].w * _2830) / _2816;
        float _2834 = _2833 + cbSceneParam._m0[79u].w;
        float _2835 = cbSceneParam._m0[79u].w - _2829;
        float _2841 = sqrt(((_2828 * _2828) + (_2829 * _2829)) + (_2831 * _2831));
        float _2844 = (1.0 - (cbSceneParam._m0[77u].w / _2816)) * _2841;
        float _2849 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2851 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3004;
        if (abs((_2830 - _2833) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3004 = ((((_2834 > 0.0) ? exp2(_2849 * _2834) : (2.0 - exp2(_2851 * _2834))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2844;
        }
        else
        {
            float _2964 = 1.0 / cbSceneParam._m0[80u].x;
            float _2965 = isnan(_2835) ? _2834 : (isnan(_2834) ? _2835 : max(_2834, _2835));
            float _2966 = isnan(_2835) ? _2834 : (isnan(_2834) ? _2835 : min(_2834, _2835));
            float _2975 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : min(_2965, 0.0));
            float _2976 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : min(_2966, 0.0));
            _3004 = ((abs(_2841 / _2830) * cbSceneParam._m0[80u].y) * ((((_2975 - _2976) * 2.0) - ((exp2(_2849 * (isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0)))) - exp2(_2849 * (isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))))) * _2964)) - ((exp2(_2851 * _2975) - exp2(_2851 * _2976)) * _2964))) + (_2844 * cbSceneParam._m0[80u].z);
        }
        vec4 _3006 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2741, _2742, 1.0), 0.0);
        float _3015 = exp2((_3004 * (-1.44269502162933349609375)) * (1.0 - _3006.w));
        float _3016 = log2(_3015);
        float _3032 = log2(_2761);
        _2853 = (exp2(_3032 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].x)) * _3006.x) / cbSceneParam._m0[78u].x)) + _2758;
        _2855 = (exp2(_3032 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].y)) * _3006.y) / cbSceneParam._m0[78u].y)) + _2759;
        _2857 = (exp2(_3032 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].z)) * _3006.z) / cbSceneParam._m0[78u].z)) + _2760;
        _2859 = _3015 * _2761;
    }
    else
    {
        _2853 = _2758;
        _2855 = _2759;
        _2857 = _2760;
        _2859 = _2761;
    }
    float _2871 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2872 = _2871 == 3.0;
    float _2873 = log2(_2859);
    float _2880 = exp2(_2873 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2703 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _971))) + ((_2709 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1780)) * cbPerFrame._m0[3u].x));
    float _2881 = exp2(_2873 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2705 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _971))) + ((_2711 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1780)) * cbPerFrame._m0[3u].x));
    float _2882 = exp2(_2873 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2707 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _971))) + ((_2713 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1780)) * cbPerFrame._m0[3u].x));
    float _2891 = (_2871 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2891 * (_2872 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2853)));
    SV_Target.y = _2891 * (_2872 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2855)));
    SV_Target.z = _2891 * (_2872 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2857)));
    SV_Target.w = cbInstanceData._m0[_2733].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2733].w;
}


