#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1390;
float _4053;
float _4054;
float _4055;
float _4056;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    vec4 _266 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _276 = log2(0.0);
    float _278 = exp2(_276 * cbMtdParam._m0[20u].y);
    float _279 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _280 = isnan(1.0) ? _279 : (isnan(_279) ? 1.0 : min(_279, 1.0));
    vec4 _294 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _298 = _294.z;
    float _299 = _294.w;
    float _307 = exp2(log2(_298 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(1.0) ? _308 : (isnan(_308) ? 1.0 : min(_308, 1.0));
    vec4 _322 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _345 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _347 = _345.x;
    float _348 = _345.y;
    float _372 = ((cbMtdParam._m0[19u].w * _345.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _347)) + _347;
    bool _408 = _372 >= 0.25;
    bool _413 = _372 >= 0.3499999940395355224609375;
    bool _418 = _372 >= 0.5;
    bool _423 = _372 >= 0.64999997615814208984375;
    bool _428 = _372 >= 0.75;
    vec4 _456 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _467 = cbMtdParam._m0[9u].x * _456.x;
    float _468 = cbMtdParam._m0[9u].y * _456.y;
    float _469 = cbMtdParam._m0[9u].z * _456.z;
    float _476 = (((((((_428 ? cbMtdParam._m0[13u].x : (_423 ? cbMtdParam._m0[18u].x : (_418 ? cbMtdParam._m0[17u].x : (_413 ? cbMtdParam._m0[16u].x : (_408 ? cbMtdParam._m0[15u].x : cbMtdParam._m0[14u].x))))) - cbMtdParam._m0[10u].x) * _348) + cbMtdParam._m0[10u].x) * _322.x) - _467) * _309) + _467;
    float _477 = (((((((_428 ? cbMtdParam._m0[13u].y : (_423 ? cbMtdParam._m0[18u].y : (_418 ? cbMtdParam._m0[17u].y : (_413 ? cbMtdParam._m0[16u].y : (_408 ? cbMtdParam._m0[15u].y : cbMtdParam._m0[14u].y))))) - cbMtdParam._m0[10u].y) * _348) + cbMtdParam._m0[10u].y) * _322.y) - _468) * _309) + _468;
    float _478 = (((((((_428 ? cbMtdParam._m0[13u].z : (_423 ? cbMtdParam._m0[18u].z : (_418 ? cbMtdParam._m0[17u].z : (_413 ? cbMtdParam._m0[16u].z : (_408 ? cbMtdParam._m0[15u].z : cbMtdParam._m0[14u].z))))) - cbMtdParam._m0[10u].z) * _348) + cbMtdParam._m0[10u].z) * _322.z) - _469) * _309) + _469;
    float _485 = exp2(log2(_299) * cbMtdParam._m0[21u].y);
    vec4 _498 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _518 = (((cbMtdParam._m0[11u].x * _498.x) - _476) * _485) + _476;
    float _519 = (((cbMtdParam._m0[11u].y * _498.y) - _477) * _485) + _477;
    float _520 = (((cbMtdParam._m0[11u].z * _498.z) - _478) * _485) + _478;
    vec4 _532 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _556 = (_266.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _532.x) - _518) * _280) + _518);
    float _558 = (_266.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _532.y) - _519) * _280) + _519);
    float _560 = (_266.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _532.z) - _520) * _280) + _520);
    float _565 = exp2(log2(1.0 - _299) * 0.00999999977648258209228515625);
    float _583 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _565) + cbMtdParam._m0[21u].z;
    float _602 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _583) + cbMtdParam._m0[20u].z) * _485) + _583;
    float _625 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _602) + cbMtdParam._m0[22u].z) * _280) + _602;
    vec4 _637 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _655 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _657 = _655.x;
    float _658 = _655.y;
    float _661 = cbMtdParam._m0[19u].x + _655.z;
    float _664 = (((cbMtdParam._m0[20u].x + _637.z) - _661) * _565) + _661;
    vec4 _676 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _688 = (_298 * 2.0) * ((((_676.z - _664) + cbMtdParam._m0[22u].x) * _485) + _664);
    vec4 _700 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _709 = (((_700.z - _688) + cbMtdParam._m0[21u].x) * _280) + _688;
    float _720 = ((_637.x - _657) * _565) + _657;
    float _721 = ((_637.y - _658) * _565) + _658;
    float _726 = ((_676.x - _720) * _485) + _720;
    float _727 = ((_676.y - _721) * _485) + _721;
    float _736 = ((((_700.x - _726) * _280) + _726) * 2.0) + (-1.0);
    float _737 = ((((_700.y - _727) * _280) + _727) * 2.0) + (-1.0);
    float _738 = dot(vec2(_736, _737), vec2(_736, _737));
    float _4085 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _743 = sqrt(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))));
    float _746 = _736 + (cbMtdParam._m0[21u].w * ((_294.x * 2.0) + (-1.0)));
    float _747 = _737 + (cbMtdParam._m0[21u].w * ((_294.y * 2.0) + (-1.0)));
    float _750 = fma(_743, _249, fma(_747, _241 * TANGENT.x, (_227 * _219) * _746));
    float _753 = fma(_743, _250, fma(_747, _241 * TANGENT.y, (_227 * _220) * _746));
    float _756 = fma(_743, _251, fma(_747, _241 * TANGENT.z, (_227 * _221) * _746));
    float _760 = inversesqrt(dot(vec3(_750, _753, _756), vec3(_750, _753, _756)));
    float _761 = _760 * _750;
    float _762 = _760 * _753;
    float _763 = _760 * _756;
    float _4096 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _764 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4118 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _4129 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _4140 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _768 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _784 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _834 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _824);
    float _835 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _824);
    float _836 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _824);
    float _840 = inversesqrt(dot(vec3(_834, _835, _836), vec3(_834, _835, _836)));
    float _841 = _834 * _840;
    float _842 = _835 * _840;
    float _843 = _836 * _840;
    vec4 _848 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _850 = _848.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1071 = sqrt(((_834 * _834) + (_835 * _835)) + (_836 * _836));
        float _1077 = (cbMatDynParam._m0[5u].x * _1071) + cbMatDynParam._m0[5u].y;
        float _4151 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1082 = (cbMatDynParam._m0[5u].z * _1071) + cbMatDynParam._m0[5u].w;
        float _4162 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) - _1078)) + _1078) < ((_850 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _861 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _862 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _864 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _866 = _864.w;
    float _884 = fma(_763, cbSceneParam._m0[5u].z, fma(_762, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _761));
    float _887 = fma(_763, cbSceneParam._m0[6u].z, fma(_762, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _761));
    float _890 = fma(_763, cbSceneParam._m0[7u].z, fma(_762, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _761));
    vec4 _892 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _903 = (((_892.y - _764) + (_892.w * _764)) * cbMtdParam._m0[3u].x) + _764;
    uint _916 = uint(roundEven(NORMAL.w)) * 13u;
    uint _917 = _916 + 9u;
    uint _918 = _917 + uint(cbMatDynParam._m0[0u].w);
    float _924 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * cbInstanceData._m0[_918].x;
    float _925 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * cbInstanceData._m0[_918].y;
    float _926 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * cbInstanceData._m0[_918].z;
    float _4173 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    vec4 _930 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _935 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _946 = (((_935.x - _768) + (_935.w * _768)) * cbMtdParam._m0[3u].x) + _768;
    float _959 = (cbMtdParam._m0[3u].x * (((_927 * _866) - _927) + _930.x)) + _927;
    float _960 = (cbMtdParam._m0[3u].x * (((_928 * _866) - _928) + _930.y)) + _928;
    float _961 = (cbMtdParam._m0[3u].x * (((_929 * _866) - _929) + _930.z)) + _929;
    float _962 = 1.0 - _946;
    float _963 = _962 * _959;
    float _964 = _962 * _960;
    float _965 = _962 * _961;
    float _970 = (_959 + (-0.039999999105930328369140625)) * _946;
    float _971 = (_960 + (-0.039999999105930328369140625)) * _946;
    float _972 = (_961 + (-0.039999999105930328369140625)) * _946;
    float _973 = _970 + 0.039999999105930328369140625;
    float _975 = _971 + 0.039999999105930328369140625;
    float _976 = _972 + 0.039999999105930328369140625;
    vec4 _985 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _861, cbSceneParam._m0[86u].y * _862));
    float _988 = _985.x * TEXCOORD_4;
    float _989 = dot(vec3(_761, _762, _763), vec3(_841, _842, _843));
    float _992 = _989 * 2.0;
    float _996 = (_992 * _761) - _841;
    float _997 = (_992 * _762) - _842;
    float _998 = (_992 * _763) - _843;
    float _1002 = abs(dot(vec3(_841, _842, _843), vec3(_761, _762, _763)));
    float _4206 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1004 = sqrt(_903);
    float _1017 = exp2((_1004 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1004 * 3.0));
    float _1023 = (1.0 - _1017) * ((_1004 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1024 = _1017 * _1004;
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1389;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1115 = fma(_1060, cbModelParam._m0[26u].z, fma(_1056, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1052));
        float _1119 = fma(_1060, cbModelParam._m0[27u].z, fma(_1056, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1052));
        float _1123 = fma(_1060, cbModelParam._m0[28u].z, fma(_1056, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1052));
        float _1147 = _1052 + _761;
        float _1148 = _1056 + _762;
        float _1149 = _1060 + _763;
        float _1159 = fma(_1149, cbModelParam._m0[26u].z, fma(_1148, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1147)) - _1115;
        float _1160 = fma(_1149, cbModelParam._m0[27u].z, fma(_1148, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1147)) - _1119;
        float _1161 = fma(_1149, cbModelParam._m0[28u].z, fma(_1148, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1147)) - _1123;
        float _1165 = inversesqrt(dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161)));
        float _1178 = ((_1165 * _1159) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1115 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1165 * _1160) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1119 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1165 * _1161) / cbModelParam._m0[34u].z) + ((((((_1123 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        float _1217 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1183.x + (-0.5));
        float _1219 = _1217 * (_1183.y + (-0.5));
        float _1220 = _1217 * (_1183.z + (-0.5));
        float _1227 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1190.x + (-0.5));
        float _1229 = _1227 * (_1190.y + (-0.5));
        float _1230 = _1227 * (_1190.z + (-0.5));
        float _1237 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1197.x + (-0.5));
        float _1239 = _1237 * (_1197.y + (-0.5));
        float _1240 = _1237 * (_1197.z + (-0.5));
        float _1247 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1204.x + (-0.5));
        float _1249 = _1247 * (_1204.y + (-0.5));
        float _1250 = _1247 * (_1204.z + (-0.5));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = _1218 * 0.5;
        float _1255 = _1228 * 0.5;
        float _1256 = _1238 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1271 = (dot(vec3(_761, _762, _763), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1281 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _4254 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1283 + 1.0))) + _1288) * _1251;
        float _1298 = _1219 * 0.5;
        float _1299 = _1229 * 0.5;
        float _1300 = _1239 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_761, _762, _763), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4287 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1325 + 1.0))) + _1330) * _1252;
        float _1340 = _1220 * 0.5;
        float _1341 = _1230 * 0.5;
        float _1342 = _1240 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_761, _762, _763), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4320 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1367 + 1.0))) + _1372) * _1253;
        _1389 = _1220;
        _1391 = _1219;
        _1392 = _1218;
        _1393 = _1230;
        _1394 = _1229;
        _1395 = _1228;
        _1396 = _1240;
        _1397 = _1239;
        _1398 = _1238;
        _1399 = _1253;
        _1400 = _1252;
        _1401 = _1251;
        _1402 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
    }
    else
    {
        _1389 = _1390;
        _1391 = _1390;
        _1392 = _1390;
        _1393 = _1390;
        _1394 = _1390;
        _1395 = _1390;
        _1396 = _1390;
        _1397 = _1390;
        _1398 = _1390;
        _1399 = _1390;
        _1400 = _1390;
        _1401 = _1390;
        _1402 = 0.0;
        _1403 = 0.0;
        _1404 = 0.0;
    }
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1433 = fma(_1060, cbModelParam._m0[30u].z, fma(_1056, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1052));
        float _1437 = fma(_1060, cbModelParam._m0[31u].z, fma(_1056, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1052));
        float _1441 = fma(_1060, cbModelParam._m0[32u].z, fma(_1056, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1052));
        float _1464 = _1052 + _761;
        float _1465 = _1056 + _762;
        float _1466 = _1060 + _763;
        float _1476 = fma(_1466, cbModelParam._m0[30u].z, fma(_1465, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1464)) - _1433;
        float _1477 = fma(_1466, cbModelParam._m0[31u].z, fma(_1465, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1464)) - _1437;
        float _1478 = fma(_1466, cbModelParam._m0[32u].z, fma(_1465, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1464)) - _1441;
        float _1482 = inversesqrt(dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478)));
        float _1495 = ((_1482 * _1476) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1433 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1496 = ((_1482 * _1477) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1437 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1497 = ((_1482 * _1478) / cbModelParam._m0[35u].z) + ((((((_1441 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        float _1532 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1499.x + (-0.5));
        float _1534 = _1532 * (_1499.y + (-0.5));
        float _1535 = _1532 * (_1499.z + (-0.5));
        float _1542 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1506.x + (-0.5));
        float _1544 = _1542 * (_1506.y + (-0.5));
        float _1545 = _1542 * (_1506.z + (-0.5));
        float _1552 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1513.x + (-0.5));
        float _1554 = _1552 * (_1513.y + (-0.5));
        float _1555 = _1552 * (_1513.z + (-0.5));
        float _1562 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1520.x + (-0.5));
        float _1564 = _1562 * (_1520.y + (-0.5));
        float _1565 = _1562 * (_1520.z + (-0.5));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = _1533 * 0.5;
        float _1570 = _1543 * 0.5;
        float _1571 = _1553 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_761, _762, _763), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4383 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1596 + 1.0))) + _1601) * _1566;
        float _1611 = _1534 * 0.5;
        float _1612 = _1544 * 0.5;
        float _1613 = _1554 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_761, _762, _763), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4416 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1638 + 1.0))) + _1643) * _1567;
        float _1653 = _1535 * 0.5;
        float _1654 = _1545 * 0.5;
        float _1655 = _1555 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_761, _762, _763), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4427 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4438 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4449 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_1680 + 1.0))) + _1685) * _1568;
        _1702 = _1535;
        _1703 = _1534;
        _1704 = _1533;
        _1705 = _1545;
        _1706 = _1544;
        _1707 = _1543;
        _1708 = _1555;
        _1709 = _1554;
        _1710 = _1553;
        _1711 = _1568;
        _1712 = _1567;
        _1713 = _1566;
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
        _1715 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
    }
    else
    {
        _1702 = _1390;
        _1703 = _1390;
        _1704 = _1390;
        _1705 = _1390;
        _1706 = _1390;
        _1707 = _1390;
        _1708 = _1390;
        _1709 = _1390;
        _1710 = _1390;
        _1711 = _1390;
        _1712 = _1390;
        _1713 = _1390;
        _1714 = 0.0;
        _1715 = 0.0;
        _1716 = 0.0;
    }
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1402)) + _1402;
    float _1727 = (cbModelParam._m0[1u].x * (_1715 - _1403)) + _1403;
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1404)) + _1404;
    float _1749 = fma(_1728, cbSceneParam._m0[89u].z, fma(_1727, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1752 = fma(_1728, cbSceneParam._m0[90u].z, fma(_1727, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1755 = fma(_1728, cbSceneParam._m0[91u].z, fma(_1727, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1726));
    float _1770 = _996 * 0.5;
    float _1771 = _997 * 0.5;
    float _1772 = _998 * 0.5;
    float _1773 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1776 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1703, _1706, _1709, _1712));
    float _1779 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1813;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1786 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1389, _1393, _1396, _1399));
        float _1790 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1391, _1394, _1397, _1400));
        float _1794 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1392, _1395, _1398, _1401));
        float _1801 = dot(vec4(cbModelParam._m0[39u]), vec4(_1770, _1771, _1772, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1824;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1815 = dot(vec4(cbModelParam._m0[40u]), vec4(_1770, _1771, _1772, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1815) ? 0.0 : (isnan(0.0) ? _1815 : max(0.0, _1815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1828 = (_1824 * cbModelParam._m0[1u].x) + (_1813 * (1.0 - cbModelParam._m0[1u].x));
    float _1838 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _903);
    float _1839 = isnan(_1838) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1838 : min(cbModelParam._m0[25u].z, _1838));
    float _1919;
    float _1921;
    float _1923;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1886 = fma(_1060, cbModelParam._m0[13u].z, fma(_1056, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1052)) + cbModelParam._m0[13u].w;
        float _1890 = fma(_1060, cbModelParam._m0[14u].z, fma(_1056, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1052)) + cbModelParam._m0[14u].w;
        float _1894 = fma(_1060, cbModelParam._m0[15u].z, fma(_1056, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1052)) + cbModelParam._m0[15u].w;
        float _1897 = fma(_998, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996));
        float _1900 = fma(_998, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996));
        float _1903 = fma(_998, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996));
        float _1931;
        if (_1897 > 0.0)
        {
            _1931 = abs((1.0 - _1886) / _1897);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1886 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1931 = frontier_phi_19_17_ladder;
        }
        float _2102;
        if (_1900 > 0.0)
        {
            _2102 = abs((1.0 - _1890) / _1900);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1890 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2102 = frontier_phi_28_24_ladder;
        }
        float _2396;
        if (_1903 > 0.0)
        {
            _2396 = abs((1.0 - _1894) / _1903);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1894 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2396 = frontier_phi_40_35_ladder;
        }
        float _2398 = isnan(_2102) ? _1931 : (isnan(_1931) ? _2102 : min(_1931, _2102));
        float _2399 = isnan(_2396) ? _2398 : (isnan(_2398) ? _2396 : min(_2398, _2396));
        float _2403 = (_2399 * _1897) + _1886;
        float _2404 = (_2399 * _1900) + _1890;
        float _2405 = (_2399 * _1903) + _1894;
        float _2406 = _2399 * 9.9999997473787516355514526367188e-05;
        float _2408 = (-1.0) - _2406;
        float _2410 = _2406 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2405 > _2410) || ((_2405 < _2408) || ((_2404 > _2410) || ((_2404 < _2408) || ((_2403 < _2408) || (_2403 > _2410))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2405, cbModelParam._m0[9u].z, fma(_2404, cbModelParam._m0[9u].y, _2403 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2405, cbModelParam._m0[10u].z, fma(_2404, cbModelParam._m0[10u].y, _2403 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2405, cbModelParam._m0[11u].z, fma(_2404, cbModelParam._m0[11u].y, _2403 * cbModelParam._m0[11u].x))), _1839);
            frontier_phi_18_40_ladder = _2550.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2550.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2550.x * cbModelParam._m0[1u].y;
        }
        _1919 = frontier_phi_18_40_ladder_2;
        _1921 = frontier_phi_18_40_ladder_1;
        _1923 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1907 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_996, _997, _998), _1839);
        _1919 = _1907.x * cbModelParam._m0[1u].y;
        _1921 = _1907.y * cbModelParam._m0[1u].y;
        _1923 = _1907.z * cbModelParam._m0[1u].y;
    }
    float _1927 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _903);
    float _1928 = isnan(_1927) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1927 : min(cbModelParam._m0[25u].w, _1927));
    float _2017;
    float _2019;
    float _2021;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1981 = fma(_1060, cbModelParam._m0[21u].z, fma(_1056, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1052)) + cbModelParam._m0[21u].w;
        float _1985 = fma(_1060, cbModelParam._m0[22u].z, fma(_1056, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1052)) + cbModelParam._m0[22u].w;
        float _1989 = fma(_1060, cbModelParam._m0[23u].z, fma(_1056, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1052)) + cbModelParam._m0[23u].w;
        float _1992 = fma(_998, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996));
        float _1995 = fma(_998, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996));
        float _1998 = fma(_998, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996));
        float _2107;
        if (_1992 > 0.0)
        {
            _2107 = abs((1.0 - _1981) / _1992);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1981 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2107 = frontier_phi_30_26_ladder;
        }
        float _2423;
        if (_1995 > 0.0)
        {
            _2423 = abs((1.0 - _1985) / _1995);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1985 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2423 = frontier_phi_42_37_ladder;
        }
        float _2761;
        if (_1998 > 0.0)
        {
            _2761 = abs((1.0 - _1989) / _1998);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1989 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2761 = frontier_phi_52_49_ladder;
        }
        float _2763 = isnan(_2423) ? _2107 : (isnan(_2107) ? _2423 : min(_2107, _2423));
        float _2764 = isnan(_2761) ? _2763 : (isnan(_2763) ? _2761 : min(_2763, _2761));
        float _2768 = (_2764 * _1992) + _1981;
        float _2769 = (_2764 * _1995) + _1985;
        float _2770 = (_2764 * _1998) + _1989;
        float _2771 = _2764 * 9.9999997473787516355514526367188e-05;
        float _2772 = (-1.0) - _2771;
        float _2774 = _2771 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2770 > _2774) || ((_2770 < _2772) || ((_2769 > _2774) || ((_2769 < _2772) || ((_2768 < _2772) || (_2768 > _2774))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2770, cbModelParam._m0[17u].z, fma(_2769, cbModelParam._m0[17u].y, _2768 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2770, cbModelParam._m0[18u].z, fma(_2769, cbModelParam._m0[18u].y, _2768 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2770, cbModelParam._m0[19u].z, fma(_2769, cbModelParam._m0[19u].y, _2768 * cbModelParam._m0[19u].x))), _1928);
            frontier_phi_27_52_ladder = _2892.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2892.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2892.x * cbModelParam._m0[1u].z;
        }
        _2017 = frontier_phi_27_52_ladder_2;
        _2019 = frontier_phi_27_52_ladder_1;
        _2021 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2001 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_996, _997, _998), _1928);
        _2017 = _2001.x * cbModelParam._m0[1u].z;
        _2019 = _2001.y * cbModelParam._m0[1u].z;
        _2021 = _2001.z * cbModelParam._m0[1u].z;
    }
    float _2034 = (((_1023 * _973) + _1024) * _988) * ((cbModelParam._m0[1u].w * (_2017 - _1919)) + _1919);
    float _2036 = (((_1023 * _975) + _1024) * _988) * ((cbModelParam._m0[1u].w * (_2019 - _1921)) + _1921);
    float _2038 = (((_1023 * _976) + _1024) * _988) * ((cbModelParam._m0[1u].w * (_2021 - _1923)) + _1923);
    float _2041 = fma(_2038, cbSceneParam._m0[89u].z, fma(_2036, cbSceneParam._m0[89u].y, _2034 * cbSceneParam._m0[89u].x));
    float _2044 = fma(_2038, cbSceneParam._m0[90u].z, fma(_2036, cbSceneParam._m0[90u].y, _2034 * cbSceneParam._m0[90u].x));
    float _2047 = fma(_2038, cbSceneParam._m0[91u].z, fma(_2036, cbSceneParam._m0[91u].y, _2034 * cbSceneParam._m0[91u].x));
    float _2081 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2085 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2089 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2093 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2094 = _2081 / _2093;
    float _2095 = _2085 / _2093;
    float _2096 = _2089 / _2093;
    float _2242;
    float _2243;
    float _2244;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2123 = ((uint(_2096 > cbSceneParam._m0[59u].y) + uint(_2096 > cbSceneParam._m0[59u].x)) + uint(_2096 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2124 = _2123 + 43u;
        uint _2132 = _2123 + 44u;
        uint _2140 = _2123 + 45u;
        uint _2148 = _2123 + 46u;
        float _2159 = fma(_2093, cbSceneParam._m0[_2124].w, fma(_2089, cbSceneParam._m0[_2124].z, fma(_2085, cbSceneParam._m0[_2124].y, _2081 * cbSceneParam._m0[_2124].x)));
        float _2163 = fma(_2093, cbSceneParam._m0[_2132].w, fma(_2089, cbSceneParam._m0[_2132].z, fma(_2085, cbSceneParam._m0[_2132].y, _2081 * cbSceneParam._m0[_2132].x)));
        float _2171 = fma(_2093, cbSceneParam._m0[_2148].w, fma(_2089, cbSceneParam._m0[_2148].z, fma(_2085, cbSceneParam._m0[_2148].y, _2081 * cbSceneParam._m0[_2148].x)));
        float _2176 = cbSceneParam._m0[33u].z * _2171;
        float _2178 = cbSceneParam._m0[33u].w * _2171;
        float _2181 = fma(_2093, cbSceneParam._m0[_2140].w, fma(_2089, cbSceneParam._m0[_2140].z, fma(_2085, cbSceneParam._m0[_2140].y, _2081 * cbSceneParam._m0[_2140].x))) / _2171;
        float _2228 = (cbSceneParam._m0[33u].x - sqrt(((_2095 * _2095) + (_2094 * _2094)) + (_2096 * _2096))) * cbSceneParam._m0[33u].y;
        float _4575 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2235 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 + _2159) / _2171, (_2178 + _2163) / _2171), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2178 + _2159) / _2171, (_2163 - _2176) / _2171), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 - _2176) / _2171, (_2163 - _2178) / _2171), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 - _2178) / _2171, (_2176 + _2163) / _2171), _2181), 0.0)).x), vec4(0.25)));
        _2242 = 1.0 - (_2235 * cbSceneParam._m0[34u].x);
        _2243 = 1.0 - (_2235 * cbSceneParam._m0[34u].y);
        _2244 = 1.0 - (_2235 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2242 = 1.0;
        _2243 = 1.0;
        _2244 = 1.0;
    }
    float _2308;
    float _2310;
    float _2312;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2296 = fma(_2093, cbSceneParam._m0[63u].w, fma(_2089, cbSceneParam._m0[63u].z, fma(_2085, cbSceneParam._m0[63u].y, _2081 * cbSceneParam._m0[63u].x)));
        float _2297 = fma(_2093, cbSceneParam._m0[60u].w, fma(_2089, cbSceneParam._m0[60u].z, fma(_2085, cbSceneParam._m0[60u].y, _2081 * cbSceneParam._m0[60u].x))) / _2296;
        float _2298 = fma(_2093, cbSceneParam._m0[61u].w, fma(_2089, cbSceneParam._m0[61u].z, fma(_2085, cbSceneParam._m0[61u].y, _2081 * cbSceneParam._m0[61u].x))) / _2296;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2297 >= cbSceneParam._m0[64u].x) && (_2298 >= cbSceneParam._m0[64u].y)) && (_2297 <= cbSceneParam._m0[64u].z)) && (_2298 <= cbSceneParam._m0[64u].w))
        {
            float _2436 = fma(_2093, cbSceneParam._m0[62u].w, fma(_2089, cbSceneParam._m0[62u].z, fma(_2085, cbSceneParam._m0[62u].y, _2081 * cbSceneParam._m0[62u].x))) / _2296;
            float _2440 = isnan(cbSceneParam._m0[41u].w) ? _2436 : (isnan(_2436) ? cbSceneParam._m0[41u].w : max(_2436, cbSceneParam._m0[41u].w));
            float _2483 = (cbSceneParam._m0[33u].x - sqrt(((_2095 * _2095) + (_2094 * _2094)) + (_2096 * _2096))) * cbSceneParam._m0[33u].y;
            float _4591 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
            float _2490 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2297, cbSceneParam._m0[33u].w + _2298), _2440), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2297, _2298 - cbSceneParam._m0[33u].z), _2440), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2297 - cbSceneParam._m0[33u].z, _2298 - cbSceneParam._m0[33u].w), _2440), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2297 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2298), _2440), 0.0)).x), vec4(0.25)));
            float _2494 = 1.0 - (_2490 * cbSceneParam._m0[34u].x);
            float _2495 = 1.0 - (_2490 * cbSceneParam._m0[34u].y);
            float _2496 = 1.0 - (_2490 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2495) ? _2243 : (isnan(_2243) ? _2495 : min(_2243, _2495));
            frontier_phi_39_38_ladder_1 = isnan(_2494) ? _2242 : (isnan(_2242) ? _2494 : min(_2242, _2494));
            frontier_phi_39_38_ladder_2 = isnan(_2496) ? _2244 : (isnan(_2244) ? _2496 : min(_2244, _2496));
        }
        else
        {
            frontier_phi_39_38_ladder = _2243;
            frontier_phi_39_38_ladder_1 = _2242;
            frontier_phi_39_38_ladder_2 = _2244;
        }
        _2308 = frontier_phi_39_38_ladder_1;
        _2310 = frontier_phi_39_38_ladder;
        _2312 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2308 = _2242;
        _2310 = _2243;
        _2312 = _2244;
    }
    uvec4 _2317 = floatBitsToUint(cbInstanceData._m0[_916 + 5u]);
    uint _2319 = _2317.x * 14u;
    uint _2320 = _2319 + 13u;
    float _2327 = _988 + (-1.0);
    float _2332 = (cbLight._m0[_2320].x * _2327) + 1.0;
    float _2333 = (cbLight._m0[_2320].y * _2327) + 1.0;
    float _2334 = (cbLight._m0[_2320].z * _2327) + 1.0;
    float _2335 = (cbLight._m0[_2320].w * _2327) + 1.0;
    uint _2336 = _2319 + 5u;
    float _2342 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
    uint _2346 = _2319 + 4u;
    float _2355 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
    uint _2359 = _2319 | 1u;
    float _2370 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_761, _762, _763));
    float _2373 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_761, _762, _763));
    float _4627 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _4638 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2378 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * 0.3183098733425140380859375;
    float _2380 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * 0.3183098733425140380859375;
    float _2387 = ((cbLight._m0[_2336].x * _2342) * _2380) + (((cbLight._m0[_2346].x * _2308) * _2355) * _2378);
    float _2388 = ((_2342 * cbLight._m0[_2336].y) * _2380) + (((cbLight._m0[_2346].y * _2310) * _2355) * _2378);
    float _2389 = ((_2342 * cbLight._m0[_2336].z) * _2380) + (((cbLight._m0[_2346].z * _2312) * _2355) * _2378);
    uvec4 _2393 = floatBitsToUint(cbLight._m0[_2319 + 12u]);
    bool _2395 = _2393.x == 0u;
    float _2497;
    float _2499;
    float _2501;
    if (_2395)
    {
        _2497 = _2387;
        _2499 = _2388;
        _2501 = _2389;
    }
    else
    {
        uint _2505 = _2319 + 6u;
        float _2521 = (dot(vec3(cbLight._m0[_2319 + 2u].xyz), vec3(_761, _762, _763)) * 0.5) + 0.5;
        float _2522 = _2521 * _2521;
        float _4649 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2523 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2524 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
        _2497 = (((cbLight._m0[_2505].x * 0.3183098733425140380859375) * _2523) * _2524) + _2387;
        _2499 = (((cbLight._m0[_2505].y * 0.3183098733425140380859375) * _2523) * _2524) + _2388;
        _2501 = (((cbLight._m0[_2505].z * 0.3183098733425140380859375) * _2523) * _2524) + _2389;
    }
    bool _2504 = _2393.y == 0u;
    float _2559;
    float _2561;
    float _2563;
    if (_2504)
    {
        _2559 = _2497;
        _2561 = _2499;
        _2563 = _2501;
    }
    else
    {
        uint _2732 = _2319 + 7u;
        float _2748 = (dot(vec3(cbLight._m0[_2319 + 3u].xyz), vec3(_761, _762, _763)) * 0.5) + 0.5;
        float _2749 = _2748 * _2748;
        float _4665 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2750 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2751 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
        _2559 = (((cbLight._m0[_2732].x * 0.3183098733425140380859375) * _2750) * _2751) + _2497;
        _2561 = (((cbLight._m0[_2732].y * 0.3183098733425140380859375) * _2750) * _2751) + _2499;
        _2563 = (((cbLight._m0[_2732].z * 0.3183098733425140380859375) * _2750) * _2751) + _2501;
    }
    uint _2566 = _2319 + 8u;
    float _2579 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _903) * 0.949999988079071044921875);
    float _2580 = _2579 * _2579;
    float _2581 = cbLight._m0[_2319].x + _841;
    float _2582 = cbLight._m0[_2319].y + _842;
    float _2583 = cbLight._m0[_2319].z + _843;
    float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
    float _2588 = _2587 * _2581;
    float _2589 = _2587 * _2582;
    float _2590 = _2587 * _2583;
    float _2591 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2319].xyz));
    float _4681 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2594 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _4692 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _2595 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2596 = dot(vec3(_761, _762, _763), vec3(_2588, _2589, _2590));
    float _4703 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2599 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
    float _2600 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2588, _2589, _2590));
    float _4714 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2604 = _2580 * _2580;
    float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
    float _2616 = exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0);
    float _2617 = 0.959999978542327880859375 - _970;
    float _2619 = 0.959999978542327880859375 - _971;
    float _2620 = 0.959999978542327880859375 - _972;
    float _2627 = 1.0 - _2580;
    float _2638 = (0.5 / (((_2595 * ((_2594 * _2627) + _2580)) + 9.9999999392252902907785028219223e-09) + (((_2595 * _2627) + _2580) * _2594))) * _2594;
    float _4725 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2640 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
    uint _2654 = _2319 + 9u;
    float _2665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _903) * 0.949999988079071044921875);
    float _2666 = _2665 * _2665;
    float _2667 = cbLight._m0[_2359].x + _841;
    float _2668 = cbLight._m0[_2359].y + _842;
    float _2669 = cbLight._m0[_2359].z + _843;
    float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
    float _2674 = _2673 * _2667;
    float _2675 = _2673 * _2668;
    float _2676 = _2673 * _2669;
    float _2677 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2359].xyz));
    float _4736 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2680 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2681 = dot(vec3(_761, _762, _763), vec3(_2674, _2675, _2676));
    float _4747 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2685 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2674, _2675, _2676));
    float _4758 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2689 = _2666 * _2666;
    float _2693 = ((_2684 * _2684) * (_2689 + (-1.0))) + 1.0;
    float _2700 = exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0);
    float _2707 = 1.0 - _2666;
    float _2717 = (0.5 / (((_2595 * ((_2680 * _2707) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2595 * _2707) + _2666) * _2680))) * _2680;
    float _4769 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2719 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2689 / ((_2693 * _2693) * 3.141590118408203125));
    float _2729 = (((((_2700 * _2617) + _973) * cbLight._m0[_2654].x) * _2719) * _2342) + ((((cbLight._m0[_2566].x * _2308) * ((_2616 * _2617) + _973)) * _2640) * _2355);
    float _2730 = (((((_2700 * _2619) + _975) * cbLight._m0[_2654].y) * _2719) * _2342) + ((((cbLight._m0[_2566].y * _2310) * ((_2616 * _2619) + _975)) * _2640) * _2355);
    float _2731 = (((((_2700 * _2620) + _976) * cbLight._m0[_2654].z) * _2719) * _2342) + ((((cbLight._m0[_2566].z * _2312) * ((_2616 * _2620) + _976)) * _2640) * _2355);
    float _2787;
    float _2789;
    float _2791;
    if (_2395)
    {
        _2787 = _2729;
        _2789 = _2730;
        _2791 = _2731;
    }
    else
    {
        uint _2793 = _2319 + 2u;
        uint _2797 = _2319 + 10u;
        float _2811 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2793].w)) * _903) * 0.949999988079071044921875);
        float _2812 = _2811 * _2811;
        float _2813 = cbLight._m0[_2793].x + _841;
        float _2814 = cbLight._m0[_2793].y + _842;
        float _2815 = cbLight._m0[_2793].z + _843;
        float _2819 = inversesqrt(dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815)));
        float _2820 = _2819 * _2813;
        float _2821 = _2819 * _2814;
        float _2822 = _2819 * _2815;
        float _2823 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2793].xyz));
        float _4780 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2826 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2827 = dot(vec3(_761, _762, _763), vec3(_2820, _2821, _2822));
        float _4791 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2830 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2831 = dot(vec3(cbLight._m0[_2793].xyz), vec3(_2820, _2821, _2822));
        float _4802 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2835 = _2812 * _2812;
        float _2839 = ((_2830 * _2830) * (_2835 + (-1.0))) + 1.0;
        float _2846 = exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0);
        float _2853 = 1.0 - _2812;
        float _2863 = (0.5 / (((_2595 * ((_2826 * _2853) + _2812)) + 9.9999999392252902907785028219223e-09) + (((_2595 * _2853) + _2812) * _2826))) * _2826;
        float _4813 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2865 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2835 / ((_2839 * _2839) * 3.141590118408203125));
        float _2866 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
        _2787 = (((((_2846 * _2617) + _973) * cbLight._m0[_2797].x) * _2865) * _2866) + _2729;
        _2789 = (((((_2846 * _2619) + _975) * cbLight._m0[_2797].y) * _2865) * _2866) + _2730;
        _2791 = (((((_2846 * _2620) + _976) * cbLight._m0[_2797].z) * _2865) * _2866) + _2731;
    }
    float _2897;
    float _2899;
    float _2901;
    if (_2504)
    {
        _2897 = _2787;
        _2899 = _2789;
        _2901 = _2791;
    }
    else
    {
        uint _2908 = _2319 + 3u;
        uint _2912 = _2319 + 11u;
        float _2926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2908].w)) * _903) * 0.949999988079071044921875);
        float _2927 = _2926 * _2926;
        float _2928 = cbLight._m0[_2908].x + _841;
        float _2929 = cbLight._m0[_2908].y + _842;
        float _2930 = cbLight._m0[_2908].z + _843;
        float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
        float _2935 = _2934 * _2928;
        float _2936 = _2934 * _2929;
        float _2937 = _2934 * _2930;
        float _2938 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2908].xyz));
        float _4829 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2941 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2942 = dot(vec3(_761, _762, _763), vec3(_2935, _2936, _2937));
        float _4840 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2945 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2946 = dot(vec3(cbLight._m0[_2908].xyz), vec3(_2935, _2936, _2937));
        float _4851 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2950 = _2927 * _2927;
        float _2954 = ((_2945 * _2945) * (_2950 + (-1.0))) + 1.0;
        float _2961 = exp2(log2(1.0 - (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) * 5.0);
        float _2968 = 1.0 - _2927;
        float _2978 = (0.5 / (((_2595 * ((_2941 * _2968) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2595 * _2968) + _2927) * _2941))) * _2941;
        float _4862 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2980 = (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2950 / ((_2954 * _2954) * 3.141590118408203125));
        float _2981 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
        _2897 = (((((_2961 * _2617) + _973) * cbLight._m0[_2912].x) * _2980) * _2981) + _2787;
        _2899 = (((((_2961 * _2619) + _975) * cbLight._m0[_2912].y) * _2980) * _2981) + _2789;
        _2901 = (((((_2961 * _2620) + _976) * cbLight._m0[_2912].z) * _2980) * _2981) + _2791;
    }
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    if (_2317.y == 0u)
    {
        uvec4 _3002 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3003 = _3002.x;
        uint _3014 = uint((float(_3002.y) * floor(float(uint(cbSceneParam._m0[85u].y * _862) / _3003))) + floor(float(uint(cbSceneParam._m0[85u].x * _861) / _3003)));
        float _3024 = (log2(_2096 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3025 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
        uint _3028 = uint(isnan(14.0) ? _3025 : (isnan(_3025) ? 14.0 : min(_3025, 14.0)));
        uvec4 _3033 = texelFetch(g_lightClusterGridBuffer, int(((_3028 << 2u) + (_3014 << 6u)) >> 2u));
        uint _3034 = _3033.x;
        uint _3035 = _3002.z;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        if (((((1u << ((_3035 >> 4u) & 15u)) + 4294967295u) & _3034) == 0u) || ((_3035 & 240u) == 0u))
        {
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
            _3123 = 0.0;
        }
        else
        {
            float _3114;
            float _3116;
            float _3118;
            float _3120;
            float _3122;
            float _3124;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            float _3269 = 0.0;
            float _3270 = 0.0;
            uint _3271 = 0u;
            uint _3280;
            bool _3281;
            for (;;)
            {
                _3280 = texelFetch(g_lightClassification, int((((_3028 << 5u) + (_3014 << 9u)) + (_3271 << 2u)) >> 2u)).x;
                _3281 = _3280 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3281)
                {
                    frontier_phi_73_pred = _3270;
                    frontier_phi_73_pred_1 = _3269;
                    frontier_phi_73_pred_2 = _3268;
                    frontier_phi_73_pred_3 = _3267;
                    frontier_phi_73_pred_4 = _3266;
                    frontier_phi_73_pred_5 = _3265;
                }
                else
                {
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    uint _3416;
                    _3410 = _3265;
                    _3411 = _3266;
                    _3412 = _3267;
                    _3413 = _3268;
                    _3414 = _3269;
                    _3415 = _3270;
                    _3416 = _3280;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    for (;;)
                    {
                        uint _3420 = uint(findLSB(_3416)) + (_3271 << 5u);
                        uint _3417 = (_3416 + 4294967295u) & _3416;
                        uint _3422 = _3420 * 48u;
                        vec4 _3436 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3422)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 3u)).x));
                        uint _3442 = (_3420 * 48u) + 4u;
                        vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3442)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 3u)).x));
                        uint _3461 = (_3420 * 48u) + 8u;
                        vec3 _3472 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3461)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 2u)).x));
                        float _3476 = _3436.x - _2094;
                        float _3477 = _3436.y - _2095;
                        float _3478 = _3436.z - _2096;
                        float _3479 = dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478));
                        float _3482 = inversesqrt(_3479);
                        float _3483 = _3482 * _3476;
                        float _3484 = _3482 * _3477;
                        float _3485 = _3482 * _3478;
                        float _3486 = dot(vec3(_884, _887, _890), vec3(_3483, _3484, _3485));
                        float _3491 = 1.0 - (_3479 * _3436.w);
                        float _4888 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3492 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3493 = sqrt(_3479) * _3455.w;
                        float _3496 = 1.39999997615814208984375 / (_3493 + 1.39999997615814208984375);
                        float _3497 = _3496 * _3496;
                        float _3500 = ((1.0 - _3497) * _3486) + _3497;
                        float _3503 = _3493 * _3493;
                        float _3507 = ((isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0))) * _3492) / ((_3503 * 0.699999988079071044921875) + 1.0);
                        float _3511 = (-0.0) - _2094;
                        float _3512 = (-0.0) - _2095;
                        float _3513 = (-0.0) - _2096;
                        float _3517 = inversesqrt(dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513)));
                        float _3518 = _3517 * _3511;
                        float _3519 = _3517 * _3512;
                        float _3520 = _3517 * _3513;
                        float _3527 = exp2(log2(1.0 / ((_3503 * 3.5) + 5.0)) * 0.25);
                        float _3528 = 1.0 - _1004;
                        float _3535 = sqrt(1.0 - ((1.0 - (_3528 * _3528)) * (1.0 - (_3527 * _3527))));
                        float _3536 = _3535 * _3535;
                        float _3537 = _3536 * _3536;
                        float _3538 = _3518 + _3483;
                        float _3539 = _3519 + _3484;
                        float _3540 = _3520 + _3485;
                        float _3544 = inversesqrt(dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540)));
                        float _3548 = dot(vec3(_884, _887, _890), vec3(_3518, _3519, _3520));
                        float _4904 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3551 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                        float _3552 = dot(vec3(_884, _887, _890), vec3(_3544 * _3538, _3544 * _3539, _3544 * _3540));
                        float _4915 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3555 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                        float _3559 = ((_3555 * _3555) * (_3537 + (-1.0))) + 1.0;
                        float _3560 = _3496 * _3536;
                        float _3561 = _3560 * _3560;
                        float _3564 = ((1.0 - _3561) * _3486) + _3561;
                        float _4926 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3565 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                        float _3566 = 1.0 - _3536;
                        float _3576 = (0.5 / (((_3565 * ((_3551 * _3566) + _3536)) + 9.9999999392252902907785028219223e-09) + (((_3565 * _3566) + _3536) * _3551))) * _3565;
                        float _4937 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                        float _3587 = (((_3537 * 3.1415927410125732421875) * (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) / ((_3559 * _3559) * ((_3503 * 2.1991131305694580078125) + 3.141590118408203125))) * _3492;
                        _3340 = (_3507 * _3455.x) + _3413;
                        _3341 = (_3507 * _3455.y) + _3414;
                        _3342 = (_3507 * _3455.z) + _3415;
                        _3337 = (_3587 * _3472.x) + _3410;
                        _3338 = (_3587 * _3472.y) + _3411;
                        _3339 = (_3587 * _3472.z) + _3412;
                        if (_3417 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3410 = _3337;
                            _3411 = _3338;
                            _3412 = _3339;
                            _3413 = _3340;
                            _3414 = _3341;
                            _3415 = _3342;
                            _3416 = _3417;
                        }
                    }
                    frontier_phi_73_pred = _3342;
                    frontier_phi_73_pred_1 = _3341;
                    frontier_phi_73_pred_2 = _3340;
                    frontier_phi_73_pred_3 = _3339;
                    frontier_phi_73_pred_4 = _3338;
                    frontier_phi_73_pred_5 = _3337;
                }
                _3124 = frontier_phi_73_pred;
                _3122 = frontier_phi_73_pred_1;
                _3120 = frontier_phi_73_pred_2;
                _3118 = frontier_phi_73_pred_3;
                _3116 = frontier_phi_73_pred_4;
                _3114 = frontier_phi_73_pred_5;
                uint _3272 = _3271 + 1u;
                if (_3272 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3265 = _3114;
                    _3266 = _3116;
                    _3267 = _3118;
                    _3268 = _3120;
                    _3269 = _3122;
                    _3270 = _3124;
                    _3271 = _3272;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
            _3123 = _3124;
        }
        uvec4 _3127 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3128 = _3127.z;
        uint _3130 = (_3128 >> 8u) & 15u;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        float _3241;
        float _3243;
        if (((4294967295u << _3130) & _3034) == 0u)
        {
            _3233 = _3113;
            _3235 = _3115;
            _3237 = _3117;
            _3239 = _3119;
            _3241 = _3121;
            _3243 = _3123;
        }
        else
        {
            float _3258 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
            float _3259 = _3258 * _2094;
            float _3260 = _3258 * _2095;
            float _3261 = _3258 * _2096;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3130 < ((_3128 >> 12u) & 15u))
            {
                float _3234;
                float _3236;
                float _3238;
                float _3240;
                float _3242;
                float _3244;
                float _3393 = _3113;
                float _3394 = _3115;
                float _3395 = _3117;
                float _3396 = _3119;
                float _3397 = _3121;
                float _3398 = _3123;
                uint _3399 = _3130;
                uint _3408;
                bool _3409;
                for (;;)
                {
                    _3408 = texelFetch(g_lightClassification, int((((_3028 << 5u) + (_3014 << 9u)) + (_3399 << 2u)) >> 2u)).x;
                    _3409 = _3408 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3409)
                    {
                        frontier_phi_84_pred = _3397;
                        frontier_phi_84_pred_1 = _3396;
                        frontier_phi_84_pred_2 = _3395;
                        frontier_phi_84_pred_3 = _3394;
                        frontier_phi_84_pred_4 = _3393;
                        frontier_phi_84_pred_5 = _3398;
                    }
                    else
                    {
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3898;
                        float _3899;
                        float _3900;
                        float _3614 = _3393;
                        float _3615 = _3394;
                        float _3616 = _3395;
                        float _3617 = _3396;
                        float _3618 = _3397;
                        float _3619 = _3398;
                        uint _3620 = _3408;
                        uint _3621;
                        vec4 _3646;
                        float _3647;
                        vec4 _3662;
                        vec3 _3674;
                        vec4 _3689;
                        vec4 _3704;
                        float _3751;
                        bool _3752;
                        for (;;)
                        {
                            uint _3631 = ((_3399 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3620));
                            _3621 = (_3620 + 4294967295u) & _3620;
                            uint _3633 = _3631 * 40u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            _3647 = _3646.w;
                            uint _3649 = (_3631 * 40u) + 4u;
                            _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            uint _3664 = (_3631 * 40u) + 8u;
                            _3674 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x));
                            uint _3676 = (_3631 * 40u) + 16u;
                            _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3691 = (_3631 * 40u) + 20u;
                            _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            uint _3707 = (_3631 * 40u) + 24u;
                            vec4 _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            uint _3726 = (_3631 * 40u) + 28u;
                            vec4 _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            _3751 = fma(_2096, _3739.z, fma(_2095, _3739.y, _3739.x * _2094)) + _3739.w;
                            _3752 = !((fma(_2096, _3720.z, fma(_2095, _3720.y, _3720.x * _2094)) + _3720.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3752)
                            {
                                float _3779 = _3646.x - _2094;
                                float _3780 = _3646.y - _2095;
                                float _3781 = _3646.z - _2096;
                                float _3782 = dot(vec3(_3779, _3780, _3781), vec3(_3779, _3780, _3781));
                                float _3785 = inversesqrt(_3782);
                                float _3786 = _3785 * _3779;
                                float _3787 = _3785 * _3780;
                                float _3788 = _3785 * _3781;
                                float _3792 = 1.0 - (_3782 / (_3647 * _3647));
                                float _4948 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3793 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3797 = sqrt(_3782) * _3662.w;
                                float _3799 = 1.39999997615814208984375 / (_3797 + 1.39999997615814208984375);
                                float _3800 = _3799 * _3799;
                                float _3803 = ((1.0 - _3800) * dot(vec3(_3786, _3787, _3788), vec3(_884, _887, _890))) + _3800;
                                float _3806 = _3797 * _3797;
                                float _3810 = (fma(_2096, _3689.z, fma(_2095, _3689.y, _3689.x * _2094)) + _3689.w) / _3751;
                                float _3811 = (fma(_2096, _3704.z, fma(_2095, _3704.y, _3704.x * _2094)) + _3704.w) / _3751;
                                float _3815 = 1.0 - dot(vec2(_3810, _3811), vec2(_3810, _3811));
                                float _4964 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3816 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                                float _3817 = _3816 * (((isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0))) * _3793) / ((_3806 * 0.699999988079071044921875) + 1.0));
                                float _3829 = exp2(log2(1.0 / ((_3806 * 3.5) + 5.0)) * 0.25);
                                float _3830 = 1.0 - _1004;
                                float _3837 = sqrt(1.0 - ((1.0 - (_3830 * _3830)) * (1.0 - (_3829 * _3829))));
                                float _3838 = _3837 * _3837;
                                float _3839 = _3838 * _3838;
                                float _3840 = _3786 - _3259;
                                float _3841 = _3787 - _3260;
                                float _3842 = _3788 - _3261;
                                float _3846 = inversesqrt(dot(vec3(_3840, _3841, _3842), vec3(_3840, _3841, _3842)));
                                float _3850 = dot(vec3(_884, _887, _890), vec3((-0.0) - _3259, (-0.0) - _3260, (-0.0) - _3261));
                                float _4975 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3853 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3854 = dot(vec3(_884, _887, _890), vec3(_3846 * _3840, _3846 * _3841, _3846 * _3842));
                                float _4986 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3857 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3861 = ((_3857 * _3857) * (_3839 + (-1.0))) + 1.0;
                                float _3862 = _3799 * _3838;
                                float _3863 = _3862 * _3862;
                                float _3869 = ((1.0 - _3863) * dot(vec3(_884, _887, _890), vec3(_3786, _3787, _3788))) + _3863;
                                float _4997 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3870 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3871 = 1.0 - _3838;
                                float _3881 = (0.5 / (((_3870 * ((_3853 * _3871) + _3838)) + 9.9999999392252902907785028219223e-09) + (((_3870 * _3871) + _3838) * _3853))) * _3870;
                                float _5008 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3891 = (_3816 * _3793) * (((_3839 * 3.1415927410125732421875) * (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0)))) / ((_3861 * _3861) * ((_3806 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3817 * _3662.y;
                                frontier_phi_90_pred_1 = _3817 * _3662.x;
                                frontier_phi_90_pred_2 = _3891 * _3674.z;
                                frontier_phi_90_pred_3 = _3891 * _3674.y;
                                frontier_phi_90_pred_4 = _3891 * _3674.x;
                                frontier_phi_90_pred_5 = _3817 * _3662.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3899 = frontier_phi_90_pred;
                            _3898 = frontier_phi_90_pred_1;
                            _3897 = frontier_phi_90_pred_2;
                            _3896 = frontier_phi_90_pred_3;
                            _3895 = frontier_phi_90_pred_4;
                            _3900 = frontier_phi_90_pred_5;
                            _3604 = _3898 + _3617;
                            _3605 = _3899 + _3618;
                            _3606 = _3900 + _3619;
                            _3601 = _3895 + _3614;
                            _3602 = _3896 + _3615;
                            _3603 = _3897 + _3616;
                            if (_3621 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3605;
                                _3619 = _3606;
                                _3620 = _3621;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3605;
                        frontier_phi_84_pred_1 = _3604;
                        frontier_phi_84_pred_2 = _3603;
                        frontier_phi_84_pred_3 = _3602;
                        frontier_phi_84_pred_4 = _3601;
                        frontier_phi_84_pred_5 = _3606;
                    }
                    _3242 = frontier_phi_84_pred;
                    _3240 = frontier_phi_84_pred_1;
                    _3238 = frontier_phi_84_pred_2;
                    _3236 = frontier_phi_84_pred_3;
                    _3234 = frontier_phi_84_pred_4;
                    _3244 = frontier_phi_84_pred_5;
                    uint _3400 = _3399 + 1u;
                    if (_3400 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3393 = _3234;
                        _3394 = _3236;
                        _3395 = _3238;
                        _3396 = _3240;
                        _3397 = _3242;
                        _3398 = _3244;
                        _3399 = _3400;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3244;
                frontier_phi_65_66_ladder_1 = _3240;
                frontier_phi_65_66_ladder_2 = _3242;
                frontier_phi_65_66_ladder_3 = _3236;
                frontier_phi_65_66_ladder_4 = _3234;
                frontier_phi_65_66_ladder_5 = _3238;
            }
            else
            {
                frontier_phi_65_66_ladder = _3123;
                frontier_phi_65_66_ladder_1 = _3119;
                frontier_phi_65_66_ladder_2 = _3121;
                frontier_phi_65_66_ladder_3 = _3115;
                frontier_phi_65_66_ladder_4 = _3113;
                frontier_phi_65_66_ladder_5 = _3117;
            }
            _3233 = frontier_phi_65_66_ladder_4;
            _3235 = frontier_phi_65_66_ladder_3;
            _3237 = frontier_phi_65_66_ladder_5;
            _3239 = frontier_phi_65_66_ladder_1;
            _3241 = frontier_phi_65_66_ladder_2;
            _3243 = frontier_phi_65_66_ladder;
        }
        float _3248 = isnan(1.0) ? _988 : (isnan(_988) ? 1.0 : min(_988, 1.0));
        _3046 = (_3248 * _3239) + _2559;
        _3048 = (_3248 * _3241) + _2561;
        _3050 = (_3248 * _3243) + _2563;
        _3052 = ((_3233 * _973) * _3248) + _2897;
        _3054 = ((_3235 * _975) * _3248) + _2899;
        _3056 = ((_3237 * _976) * _3248) + _2901;
    }
    else
    {
        _3046 = _2559;
        _3048 = _2561;
        _3050 = _2563;
        _3052 = _2897;
        _3054 = _2899;
        _3056 = _2901;
    }
    float _5024 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _5035 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _5046 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _3073 = ((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_3046 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _988))) + ((_3052 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1828)) * cbPerFrame._m0[3u].x);
    float _3074 = ((isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_3048 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _988))) + ((_3054 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1828)) * cbPerFrame._m0[3u].x);
    float _3075 = ((isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3050 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _988))) + ((_3056 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1828)) * cbPerFrame._m0[3u].x);
    uint _3076 = _916 + 6u;
    float _3084 = _861 / cbSceneParam._m0[86u].x;
    float _3085 = _862 / cbSceneParam._m0[86u].y;
    vec4 _3099 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3084, _3085, (log2((isnan(cbSceneParam._m0[77u].w) ? _784 : (isnan(_784) ? cbSceneParam._m0[77u].w : min(_784, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3101 = _3099.x;
    float _3102 = _3099.y;
    float _3103 = _3099.z;
    float _3104 = _3099.w;
    float _3175;
    float _3177;
    float _3179;
    float _3181;
    if (_784 > cbSceneParam._m0[78u].w)
    {
        float _3138 = isnan(_784) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _784 : min(cbSceneParam._m0[80u].w, _784));
        float _3139 = _3138 / _784;
        float _3150 = _3139 * _834;
        float _3151 = _835 * _3139;
        float _3152 = (-0.0) - _3151;
        float _3153 = _3139 * _836;
        float _3155 = (cbSceneParam._m0[77u].w * _3152) / _3138;
        float _3156 = _3155 + cbSceneParam._m0[79u].w;
        float _3157 = cbSceneParam._m0[79u].w - _3151;
        float _3163 = sqrt(((_3150 * _3150) + (_3151 * _3151)) + (_3153 * _3153));
        float _3166 = (1.0 - (cbSceneParam._m0[77u].w / _3138)) * _3163;
        float _3171 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3173 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3350;
        if (abs((_3152 - _3155) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3350 = ((((_3156 > 0.0) ? exp2(_3171 * _3156) : (2.0 - exp2(_3173 * _3156))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3166;
        }
        else
        {
            float _3294 = 1.0 / cbSceneParam._m0[80u].x;
            float _3295 = isnan(_3157) ? _3156 : (isnan(_3156) ? _3157 : max(_3156, _3157));
            float _3296 = isnan(_3157) ? _3156 : (isnan(_3156) ? _3157 : min(_3156, _3157));
            float _3305 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : min(_3295, 0.0));
            float _3306 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : min(_3296, 0.0));
            _3350 = ((abs(_3163 / _3152) * cbSceneParam._m0[80u].y) * ((((_3305 - _3306) * 2.0) - ((exp2(_3171 * (isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0)))) - exp2(_3171 * (isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0))))) * _3294)) - ((exp2(_3173 * _3305) - exp2(_3173 * _3306)) * _3294))) + (_3166 * cbSceneParam._m0[80u].z);
        }
        vec4 _3352 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3084, _3085, 1.0), 0.0);
        float _3361 = exp2((_3350 * (-1.44269502162933349609375)) * (1.0 - _3352.w));
        float _3362 = log2(_3361);
        float _3378 = log2(_3104);
        _3175 = (exp2(_3378 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3362 * cbSceneParam._m0[78u].x)) * _3352.x) / cbSceneParam._m0[78u].x)) + _3101;
        _3177 = (exp2(_3378 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3362 * cbSceneParam._m0[78u].y)) * _3352.y) / cbSceneParam._m0[78u].y)) + _3102;
        _3179 = (exp2(_3378 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3362 * cbSceneParam._m0[78u].z)) * _3352.z) / cbSceneParam._m0[78u].z)) + _3103;
        _3181 = _3361 * _3104;
    }
    else
    {
        _3175 = _3101;
        _3177 = _3102;
        _3179 = _3103;
        _3181 = _3104;
    }
    bool _3388;
    vec4 _3191;
    vec4 _3213;
    float _3215;
    float _3219;
    float _3220;
    float _3221;
    float _3222;
    bool _3232;
    for (;;)
    {
        _3191 = cbMatDynParam._m0[0u];
        float _3193 = roundEven(_3191.y);
        bool _3194 = _3193 == 3.0;
        float _3195 = log2(_3181);
        float _3202 = exp2(_3195 * cbSceneParam._m0[78u].x) * _3073;
        float _3203 = exp2(_3195 * cbSceneParam._m0[78u].y) * _3074;
        float _3204 = exp2(_3195 * cbSceneParam._m0[78u].z) * _3075;
        float _3211 = _850 + (-0.5);
        _3213 = cbMtdParam._m0[1u];
        _3215 = _3213.y * _3211;
        float _3218 = (_3193 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3219 = _3218 * (_3194 ? _3202 : (_3202 + (cbSceneParam._m0[72u].w * _3175)));
        _3220 = _3218 * (_3194 ? _3203 : (_3203 + (cbSceneParam._m0[72u].w * _3177)));
        _3221 = _3218 * (_3194 ? _3204 : (_3204 + (cbSceneParam._m0[72u].w * _3179)));
        _3222 = _3211 * 0.999000012874603271484375;
        _3232 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3232)
        {
            if ((cbInstanceData._m0[_916 + 7u].x + _3222) < 0.5)
            {
                _3388 = true;
                break;
            }
        }
        uint _3329 = _917 + uint(_3191.w);
        if ((cbInstanceData._m0[_3329].w < 1.0) && ((cbInstanceData._m0[_3329].w + _3222) < 0.5))
        {
            _3388 = true;
            break;
        }
        if ((_3215 + 1.0) < _3213.x)
        {
            _3388 = true;
            break;
        }
        _3388 = false;
        break;
    }
    float _3592;
    if (_3388)
    {
        discard_state = true;
        _3592 = 0.0;
    }
    else
    {
        _3592 = cbInstanceData._m0[_3076].w;
    }
    SV_Target.x = _3219;
    SV_Target.y = _3220;
    SV_Target.z = _3221;
    SV_Target.w = _3592;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3076].w;
    discard_exit();
}


