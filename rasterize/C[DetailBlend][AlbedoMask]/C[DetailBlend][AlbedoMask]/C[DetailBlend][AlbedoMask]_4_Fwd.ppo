#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1234;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    vec4 _254 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _264 = log2(0.0);
    float _266 = exp2(_264 * cbMtdParam._m0[20u].y);
    float _267 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _268 = isnan(1.0) ? _267 : (isnan(_267) ? 1.0 : min(_267, 1.0));
    vec4 _282 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _282.z;
    float _287 = _282.w;
    float _295 = exp2(log2(_286 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _296 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _297 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    vec4 _310 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _335 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _346 = cbMtdParam._m0[9u].x * _335.x;
    float _347 = cbMtdParam._m0[9u].y * _335.y;
    float _348 = cbMtdParam._m0[9u].z * _335.z;
    float _355 = (((cbMtdParam._m0[10u].x * _310.x) - _346) * _297) + _346;
    float _356 = (((cbMtdParam._m0[10u].y * _310.y) - _347) * _297) + _347;
    float _357 = (((cbMtdParam._m0[10u].z * _310.z) - _348) * _297) + _348;
    float _364 = exp2(log2(_287) * cbMtdParam._m0[21u].y);
    vec4 _377 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _397 = (((cbMtdParam._m0[11u].x * _377.x) - _355) * _364) + _355;
    float _398 = (((cbMtdParam._m0[11u].y * _377.y) - _356) * _364) + _356;
    float _399 = (((cbMtdParam._m0[11u].z * _377.z) - _357) * _364) + _357;
    vec4 _411 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _435 = (_254.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _411.x) - _397) * _268) + _397);
    float _437 = (_254.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _411.y) - _398) * _268) + _398);
    float _439 = (_254.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _411.z) - _399) * _268) + _399);
    float _444 = exp2(log2(1.0 - _287) * 0.00999999977648258209228515625);
    float _462 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _444) + cbMtdParam._m0[21u].z;
    float _481 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _462) + cbMtdParam._m0[20u].z) * _364) + _462;
    float _504 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _481) + cbMtdParam._m0[22u].z) * _268) + _481;
    vec4 _516 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _534 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _540 = cbMtdParam._m0[19u].x + _534.z;
    float _543 = (((cbMtdParam._m0[20u].x + _516.z) - _540) * _444) + _540;
    vec4 _556 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _568 = (_286 * 2.0) * ((((_556.z - _543) + cbMtdParam._m0[22u].x) * _364) + _543);
    vec4 _581 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _590 = (((_581.z - _568) + cbMtdParam._m0[21u].x) * _268) + _568;
    float _601 = ((_516.x - _536) * _444) + _536;
    float _602 = ((_516.y - _537) * _444) + _537;
    float _607 = ((_556.x - _601) * _364) + _601;
    float _608 = ((_556.y - _602) * _364) + _602;
    float _617 = ((((_581.x - _607) * _268) + _607) * 2.0) + (-1.0);
    float _618 = ((((_581.y - _608) * _268) + _608) * 2.0) + (-1.0);
    float _619 = dot(vec2(_617, _618), vec2(_617, _618));
    float _3584 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _624 = sqrt(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))));
    float _627 = _617 + (cbMtdParam._m0[21u].w * ((_282.x * 2.0) + (-1.0)));
    float _628 = _618 + (cbMtdParam._m0[21u].w * ((_282.y * 2.0) + (-1.0)));
    float _631 = fma(_624, _237, fma(_628, _229 * TANGENT.x, (_215 * _207) * _627));
    float _634 = fma(_624, _238, fma(_628, _229 * TANGENT.y, (_215 * _208) * _627));
    float _637 = fma(_624, _239, fma(_628, _229 * TANGENT.z, (_215 * _209) * _627));
    float _641 = inversesqrt(dot(vec3(_631, _634, _637), vec3(_631, _634, _637)));
    float _642 = _641 * _631;
    float _643 = _641 * _634;
    float _644 = _641 * _637;
    float _3595 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _645 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3617 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3628 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3639 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _649 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _665 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _715 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _705);
    float _716 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _705);
    float _717 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _705);
    float _721 = inversesqrt(dot(vec3(_715, _716, _717), vec3(_715, _716, _717)));
    float _722 = _715 * _721;
    float _723 = _716 * _721;
    float _724 = _717 * _721;
    float _730 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _731 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _733 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _735 = _733.w;
    float _755 = fma(_644, cbSceneParam._m0[5u].z, fma(_643, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _642));
    float _758 = fma(_644, cbSceneParam._m0[6u].z, fma(_643, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _642));
    float _761 = fma(_644, cbSceneParam._m0[7u].z, fma(_643, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _642));
    vec4 _763 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _774 = (((_763.y - _645) + (_763.w * _645)) * cbMtdParam._m0[3u].x) + _645;
    uint _787 = uint(roundEven(NORMAL.w)) * 13u;
    uint _789 = (_787 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _795 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) * cbInstanceData._m0[_789].x;
    float _796 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_789].y;
    float _797 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_789].z;
    float _3650 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    vec4 _801 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _806 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _817 = (((_806.x - _649) + (_806.w * _649)) * cbMtdParam._m0[3u].x) + _649;
    float _830 = (cbMtdParam._m0[3u].x * (((_798 * _735) - _798) + _801.x)) + _798;
    float _831 = (cbMtdParam._m0[3u].x * (((_799 * _735) - _799) + _801.y)) + _799;
    float _832 = (cbMtdParam._m0[3u].x * (((_800 * _735) - _800) + _801.z)) + _800;
    float _833 = 1.0 - _817;
    float _834 = _833 * _830;
    float _835 = _833 * _831;
    float _836 = _833 * _832;
    float _841 = (_830 + (-0.039999999105930328369140625)) * _817;
    float _842 = (_831 + (-0.039999999105930328369140625)) * _817;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _817;
    float _844 = _841 + 0.039999999105930328369140625;
    float _846 = _842 + 0.039999999105930328369140625;
    float _847 = _843 + 0.039999999105930328369140625;
    vec4 _856 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _730, cbSceneParam._m0[86u].y * _731));
    float _859 = _856.x * TEXCOORD_4;
    float _860 = dot(vec3(_642, _643, _644), vec3(_722, _723, _724));
    float _863 = _860 * 2.0;
    float _867 = (_863 * _642) - _722;
    float _868 = (_863 * _643) - _723;
    float _869 = (_863 * _644) - _724;
    float _873 = abs(dot(vec3(_722, _723, _724), vec3(_642, _643, _644)));
    float _3683 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _875 = sqrt(_774);
    float _888 = exp2((_875 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_875 * 3.0));
    float _894 = (1.0 - _888) * ((_875 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _895 = _888 * _875;
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1233;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _958 = fma(_931, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923));
        float _962 = fma(_931, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923));
        float _966 = fma(_931, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923));
        float _991 = _923 + _642;
        float _992 = _927 + _643;
        float _993 = _931 + _644;
        float _1003 = fma(_993, cbModelParam._m0[26u].z, fma(_992, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _991)) - _958;
        float _1004 = fma(_993, cbModelParam._m0[27u].z, fma(_992, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _991)) - _962;
        float _1005 = fma(_993, cbModelParam._m0[28u].z, fma(_992, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _991)) - _966;
        float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
        float _1022 = ((_1009 * _1003) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_958 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1009 * _1004) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_962 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1009 * _1005) / cbModelParam._m0[34u].z) + ((((((_966 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        float _1061 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1027.x + (-0.5));
        float _1063 = _1061 * (_1027.y + (-0.5));
        float _1064 = _1061 * (_1027.z + (-0.5));
        float _1071 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1034.x + (-0.5));
        float _1073 = _1071 * (_1034.y + (-0.5));
        float _1074 = _1071 * (_1034.z + (-0.5));
        float _1081 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1041.x + (-0.5));
        float _1083 = _1081 * (_1041.y + (-0.5));
        float _1084 = _1081 * (_1041.z + (-0.5));
        float _1091 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1048.x + (-0.5));
        float _1093 = _1091 * (_1048.y + (-0.5));
        float _1094 = _1091 * (_1048.z + (-0.5));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = _1062 * 0.5;
        float _1099 = _1072 * 0.5;
        float _1100 = _1082 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1115 = (dot(vec3(_642, _643, _644), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1125 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3731 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1127 + 1.0))) + _1132) * _1095;
        float _1142 = _1063 * 0.5;
        float _1143 = _1073 * 0.5;
        float _1144 = _1083 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_642, _643, _644), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3764 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1169 + 1.0))) + _1174) * _1096;
        float _1184 = _1064 * 0.5;
        float _1185 = _1074 * 0.5;
        float _1186 = _1084 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_642, _643, _644), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3797 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1211 + 1.0))) + _1216) * _1097;
        _1233 = _1064;
        _1235 = _1063;
        _1236 = _1062;
        _1237 = _1074;
        _1238 = _1073;
        _1239 = _1072;
        _1240 = _1084;
        _1241 = _1083;
        _1242 = _1082;
        _1243 = _1097;
        _1244 = _1096;
        _1245 = _1095;
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
    }
    else
    {
        _1233 = _1234;
        _1235 = _1234;
        _1236 = _1234;
        _1237 = _1234;
        _1238 = _1234;
        _1239 = _1234;
        _1240 = _1234;
        _1241 = _1234;
        _1242 = _1234;
        _1243 = _1234;
        _1244 = _1234;
        _1245 = _1234;
        _1246 = 0.0;
        _1247 = 0.0;
        _1248 = 0.0;
    }
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1274 = fma(_931, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923));
        float _1278 = fma(_931, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923));
        float _1282 = fma(_931, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923));
        float _1305 = _923 + _642;
        float _1306 = _927 + _643;
        float _1307 = _931 + _644;
        float _1317 = fma(_1307, cbModelParam._m0[30u].z, fma(_1306, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1305)) - _1274;
        float _1318 = fma(_1307, cbModelParam._m0[31u].z, fma(_1306, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1305)) - _1278;
        float _1319 = fma(_1307, cbModelParam._m0[32u].z, fma(_1306, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1305)) - _1282;
        float _1323 = inversesqrt(dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319)));
        float _1336 = ((_1323 * _1317) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1274 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1323 * _1318) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1278 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1338 = ((_1323 * _1319) / cbModelParam._m0[35u].z) + ((((((_1282 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        float _1373 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1340.x + (-0.5));
        float _1375 = _1373 * (_1340.y + (-0.5));
        float _1376 = _1373 * (_1340.z + (-0.5));
        float _1383 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1347.x + (-0.5));
        float _1385 = _1383 * (_1347.y + (-0.5));
        float _1386 = _1383 * (_1347.z + (-0.5));
        float _1393 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1354.x + (-0.5));
        float _1395 = _1393 * (_1354.y + (-0.5));
        float _1396 = _1393 * (_1354.z + (-0.5));
        float _1403 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1361.x + (-0.5));
        float _1405 = _1403 * (_1361.y + (-0.5));
        float _1406 = _1403 * (_1361.z + (-0.5));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = _1374 * 0.5;
        float _1411 = _1384 * 0.5;
        float _1412 = _1394 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_642, _643, _644), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _3860 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1437 + 1.0))) + _1442) * _1407;
        float _1452 = _1375 * 0.5;
        float _1453 = _1385 * 0.5;
        float _1454 = _1395 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_642, _643, _644), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _3893 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1479 + 1.0))) + _1484) * _1408;
        float _1494 = _1376 * 0.5;
        float _1495 = _1386 * 0.5;
        float _1496 = _1396 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_642, _643, _644), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _3926 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1521 + 1.0))) + _1526) * _1409;
        _1543 = _1376;
        _1544 = _1375;
        _1545 = _1374;
        _1546 = _1386;
        _1547 = _1385;
        _1548 = _1384;
        _1549 = _1396;
        _1550 = _1395;
        _1551 = _1394;
        _1552 = _1409;
        _1553 = _1408;
        _1554 = _1407;
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
    }
    else
    {
        _1543 = _1234;
        _1544 = _1234;
        _1545 = _1234;
        _1546 = _1234;
        _1547 = _1234;
        _1548 = _1234;
        _1549 = _1234;
        _1550 = _1234;
        _1551 = _1234;
        _1552 = _1234;
        _1553 = _1234;
        _1554 = _1234;
        _1555 = 0.0;
        _1556 = 0.0;
        _1557 = 0.0;
    }
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1246)) + _1246;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1247)) + _1247;
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1248)) + _1248;
    float _1590 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1593 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1596 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1567));
    float _1611 = _867 * 0.5;
    float _1612 = _868 * 0.5;
    float _1613 = _869 * 0.5;
    float _1614 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1617 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1620 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1654;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1627 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1233, _1237, _1240, _1243));
        float _1631 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1235, _1238, _1241, _1244));
        float _1635 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1642 = dot(vec4(cbModelParam._m0[39u]), vec4(_1611, _1612, _1613, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1665;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1656 = dot(vec4(cbModelParam._m0[40u]), vec4(_1611, _1612, _1613, 1.0));
        _1665 = dot(vec3(isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1656) ? 0.0 : (isnan(0.0) ? _1656 : max(0.0, _1656))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1665 = 1.0;
    }
    float _1669 = (_1665 * cbModelParam._m0[1u].x) + (_1654 * (1.0 - cbModelParam._m0[1u].x));
    float _1679 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _774);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1679 : min(cbModelParam._m0[25u].z, _1679));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1728 = fma(_931, cbModelParam._m0[13u].z, fma(_927, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923)) + cbModelParam._m0[13u].w;
        float _1732 = fma(_931, cbModelParam._m0[14u].z, fma(_927, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923)) + cbModelParam._m0[14u].w;
        float _1736 = fma(_931, cbModelParam._m0[15u].z, fma(_927, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923)) + cbModelParam._m0[15u].w;
        float _1739 = fma(_869, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _867));
        float _1742 = fma(_869, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _867));
        float _1745 = fma(_869, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _867));
        float _1773;
        if (_1739 > 0.0)
        {
            _1773 = abs((1.0 - _1728) / _1739);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1728 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1773 = frontier_phi_16_14_ladder;
        }
        float _1976;
        if (_1742 > 0.0)
        {
            _1976 = abs((1.0 - _1732) / _1742);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1732 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1976 = frontier_phi_25_21_ladder;
        }
        float _2230;
        if (_1745 > 0.0)
        {
            _2230 = abs((1.0 - _1736) / _1745);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1736 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2230 = frontier_phi_37_32_ladder;
        }
        float _2232 = isnan(_1976) ? _1773 : (isnan(_1773) ? _1976 : min(_1773, _1976));
        float _2233 = isnan(_2230) ? _2232 : (isnan(_2232) ? _2230 : min(_2232, _2230));
        float _2237 = (_2233 * _1739) + _1728;
        float _2238 = (_2233 * _1742) + _1732;
        float _2239 = (_2233 * _1745) + _1736;
        float _2240 = _2233 * 9.9999997473787516355514526367188e-05;
        float _2242 = (-1.0) - _2240;
        float _2244 = _2240 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2239 > _2244) || ((_2239 < _2242) || ((_2238 > _2244) || ((_2238 < _2242) || ((_2237 < _2242) || (_2237 > _2244))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2367 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2239, cbModelParam._m0[9u].z, fma(_2238, cbModelParam._m0[9u].y, _2237 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2239, cbModelParam._m0[10u].z, fma(_2238, cbModelParam._m0[10u].y, _2237 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2239, cbModelParam._m0[11u].z, fma(_2238, cbModelParam._m0[11u].y, _2237 * cbModelParam._m0[11u].x))), _1680);
            frontier_phi_15_37_ladder = _2367.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2367.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2367.x * cbModelParam._m0[1u].y;
        }
        _1761 = frontier_phi_15_37_ladder_2;
        _1763 = frontier_phi_15_37_ladder_1;
        _1765 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1749 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_867, _868, _869), _1680);
        _1761 = _1749.x * cbModelParam._m0[1u].y;
        _1763 = _1749.y * cbModelParam._m0[1u].y;
        _1765 = _1749.z * cbModelParam._m0[1u].y;
    }
    float _1769 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _774);
    float _1770 = isnan(_1769) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1769 : min(cbModelParam._m0[25u].w, _1769));
    float _1860;
    float _1862;
    float _1864;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1824 = fma(_931, cbModelParam._m0[21u].z, fma(_927, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923)) + cbModelParam._m0[21u].w;
        float _1828 = fma(_931, cbModelParam._m0[22u].z, fma(_927, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923)) + cbModelParam._m0[22u].w;
        float _1832 = fma(_931, cbModelParam._m0[23u].z, fma(_927, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923)) + cbModelParam._m0[23u].w;
        float _1835 = fma(_869, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _867));
        float _1838 = fma(_869, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _867));
        float _1841 = fma(_869, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _867));
        float _1981;
        if (_1835 > 0.0)
        {
            _1981 = abs((1.0 - _1824) / _1835);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1824 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1981 = frontier_phi_27_23_ladder;
        }
        float _2257;
        if (_1838 > 0.0)
        {
            _2257 = abs((1.0 - _1828) / _1838);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1828 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2257 = frontier_phi_39_34_ladder;
        }
        float _2470;
        if (_1841 > 0.0)
        {
            _2470 = abs((1.0 - _1832) / _1841);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1832 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2470 = frontier_phi_48_45_ladder;
        }
        float _2472 = isnan(_2257) ? _1981 : (isnan(_1981) ? _2257 : min(_1981, _2257));
        float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
        float _2477 = (_2473 * _1835) + _1824;
        float _2478 = (_2473 * _1838) + _1828;
        float _2479 = (_2473 * _1841) + _1832;
        float _2480 = _2473 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2480;
        float _2483 = _2480 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2479 > _2483) || ((_2479 < _2481) || ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 < _2481) || (_2477 > _2483))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2677 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2479, cbModelParam._m0[17u].z, fma(_2478, cbModelParam._m0[17u].y, _2477 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2479, cbModelParam._m0[18u].z, fma(_2478, cbModelParam._m0[18u].y, _2477 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2479, cbModelParam._m0[19u].z, fma(_2478, cbModelParam._m0[19u].y, _2477 * cbModelParam._m0[19u].x))), _1770);
            frontier_phi_24_48_ladder = _2677.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2677.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2677.x * cbModelParam._m0[1u].z;
        }
        _1860 = frontier_phi_24_48_ladder_2;
        _1862 = frontier_phi_24_48_ladder_1;
        _1864 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1844 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_867, _868, _869), _1770);
        _1860 = _1844.x * cbModelParam._m0[1u].z;
        _1862 = _1844.y * cbModelParam._m0[1u].z;
        _1864 = _1844.z * cbModelParam._m0[1u].z;
    }
    float _1877 = (((_894 * _844) + _895) * _859) * ((cbModelParam._m0[1u].w * (_1860 - _1761)) + _1761);
    float _1879 = (((_894 * _846) + _895) * _859) * ((cbModelParam._m0[1u].w * (_1862 - _1763)) + _1763);
    float _1881 = (((_894 * _847) + _895) * _859) * ((cbModelParam._m0[1u].w * (_1864 - _1765)) + _1765);
    float _1884 = fma(_1881, cbSceneParam._m0[89u].z, fma(_1879, cbSceneParam._m0[89u].y, _1877 * cbSceneParam._m0[89u].x));
    float _1887 = fma(_1881, cbSceneParam._m0[90u].z, fma(_1879, cbSceneParam._m0[90u].y, _1877 * cbSceneParam._m0[90u].x));
    float _1890 = fma(_1881, cbSceneParam._m0[91u].z, fma(_1879, cbSceneParam._m0[91u].y, _1877 * cbSceneParam._m0[91u].x));
    uvec4 _1900 = floatBitsToUint(cbInstanceData._m0[_787 + 5u]);
    uint _1902 = _1900.x * 14u;
    uint _1903 = _1902 + 13u;
    float _1910 = _859 + (-1.0);
    float _1915 = (cbLight._m0[_1903].x * _1910) + 1.0;
    float _1916 = (cbLight._m0[_1903].y * _1910) + 1.0;
    float _1917 = (cbLight._m0[_1903].z * _1910) + 1.0;
    float _1918 = (cbLight._m0[_1903].w * _1910) + 1.0;
    uint _1919 = _1902 + 5u;
    float _1925 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1929 = _1902 + 4u;
    float _1935 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
    uint _1939 = _1902 | 1u;
    float _1950 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_642, _643, _644));
    float _1953 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_642, _643, _644));
    float _4062 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _4073 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1958 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.3183098733425140380859375;
    float _1960 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _1967 = ((cbLight._m0[_1919].x * _1925) * _1960) + ((cbLight._m0[_1929].x * _1935) * _1958);
    float _1968 = ((_1925 * cbLight._m0[_1919].y) * _1960) + ((_1935 * cbLight._m0[_1929].y) * _1958);
    float _1969 = ((_1925 * cbLight._m0[_1919].z) * _1960) + ((_1935 * cbLight._m0[_1929].z) * _1958);
    uvec4 _1973 = floatBitsToUint(cbLight._m0[_1902 + 12u]);
    bool _1975 = _1973.x == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1975)
    {
        _1986 = _1967;
        _1988 = _1968;
        _1990 = _1969;
    }
    else
    {
        uint _1994 = _1902 + 6u;
        float _2010 = (dot(vec3(cbLight._m0[_1902 + 2u].xyz), vec3(_642, _643, _644)) * 0.5) + 0.5;
        float _2011 = _2010 * _2010;
        float _4084 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2012 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2013 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _1986 = (((cbLight._m0[_1994].x * 0.3183098733425140380859375) * _2012) * _2013) + _1967;
        _1988 = (((cbLight._m0[_1994].y * 0.3183098733425140380859375) * _2012) * _2013) + _1968;
        _1990 = (((cbLight._m0[_1994].z * 0.3183098733425140380859375) * _2012) * _2013) + _1969;
    }
    bool _1993 = _1973.y == 0u;
    float _2031;
    float _2033;
    float _2035;
    if (_1993)
    {
        _2031 = _1986;
        _2033 = _1988;
        _2035 = _1990;
    }
    else
    {
        uint _2201 = _1902 + 7u;
        float _2217 = (dot(vec3(cbLight._m0[_1902 + 3u].xyz), vec3(_642, _643, _644)) * 0.5) + 0.5;
        float _2218 = _2217 * _2217;
        float _4100 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2219 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2220 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2031 = (((cbLight._m0[_2201].x * 0.3183098733425140380859375) * _2219) * _2220) + _1986;
        _2033 = (((cbLight._m0[_2201].y * 0.3183098733425140380859375) * _2219) * _2220) + _1988;
        _2035 = (((cbLight._m0[_2201].z * 0.3183098733425140380859375) * _2219) * _2220) + _1990;
    }
    uint _2038 = _1902 + 8u;
    float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _774) * 0.949999988079071044921875);
    float _2052 = _2051 * _2051;
    float _2053 = cbLight._m0[_1902].x + _722;
    float _2054 = cbLight._m0[_1902].y + _723;
    float _2055 = cbLight._m0[_1902].z + _724;
    float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
    float _2060 = _2059 * _2053;
    float _2061 = _2059 * _2054;
    float _2062 = _2059 * _2055;
    float _2063 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_1902].xyz));
    float _4116 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _2067 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _2068 = dot(vec3(_642, _643, _644), vec3(_2060, _2061, _2062));
    float _4138 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2072 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_2060, _2061, _2062));
    float _4149 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2076 = _2052 * _2052;
    float _2080 = ((_2071 * _2071) * (_2076 + (-1.0))) + 1.0;
    float _2088 = exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0);
    float _2089 = 0.959999978542327880859375 - _841;
    float _2091 = 0.959999978542327880859375 - _842;
    float _2092 = 0.959999978542327880859375 - _843;
    float _2099 = 1.0 - _2052;
    float _2110 = (0.5 / (((_2067 * ((_2066 * _2099) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2099) + _2052) * _2066))) * _2066;
    float _4160 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2112 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2076 / ((_2080 * _2080) * 3.141590118408203125));
    uint _2123 = _1902 + 9u;
    float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _774) * 0.949999988079071044921875);
    float _2135 = _2134 * _2134;
    float _2136 = cbLight._m0[_1939].x + _722;
    float _2137 = cbLight._m0[_1939].y + _723;
    float _2138 = cbLight._m0[_1939].z + _724;
    float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
    float _2143 = _2142 * _2136;
    float _2144 = _2142 * _2137;
    float _2145 = _2142 * _2138;
    float _2146 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_1939].xyz));
    float _4171 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2150 = dot(vec3(_642, _643, _644), vec3(_2143, _2144, _2145));
    float _4182 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2154 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_2143, _2144, _2145));
    float _4193 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2158 = _2135 * _2135;
    float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
    float _2169 = exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0);
    float _2176 = 1.0 - _2135;
    float _2186 = (0.5 / (((_2067 * ((_2149 * _2176) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2176) + _2135) * _2149))) * _2149;
    float _4204 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2188 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
    float _2198 = (((((_2169 * _2089) + _844) * cbLight._m0[_2123].x) * _2188) * _1925) + (((((_2088 * _2089) + _844) * cbLight._m0[_2038].x) * _2112) * _1935);
    float _2199 = (((((_2169 * _2091) + _846) * cbLight._m0[_2123].y) * _2188) * _1925) + (((((_2088 * _2091) + _846) * cbLight._m0[_2038].y) * _2112) * _1935);
    float _2200 = (((((_2169 * _2092) + _847) * cbLight._m0[_2123].z) * _2188) * _1925) + (((((_2088 * _2092) + _847) * cbLight._m0[_2038].z) * _2112) * _1935);
    float _2262;
    float _2264;
    float _2266;
    if (_1975)
    {
        _2262 = _2198;
        _2264 = _2199;
        _2266 = _2200;
    }
    else
    {
        uint _2268 = _1902 + 2u;
        uint _2272 = _1902 + 10u;
        float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _774) * 0.949999988079071044921875);
        float _2287 = _2286 * _2286;
        float _2288 = cbLight._m0[_2268].x + _722;
        float _2289 = cbLight._m0[_2268].y + _723;
        float _2290 = cbLight._m0[_2268].z + _724;
        float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
        float _2295 = _2294 * _2288;
        float _2296 = _2294 * _2289;
        float _2297 = _2294 * _2290;
        float _2298 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2268].xyz));
        float _4215 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2302 = dot(vec3(_642, _643, _644), vec3(_2295, _2296, _2297));
        float _4226 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2306 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2295, _2296, _2297));
        float _4237 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2310 = _2287 * _2287;
        float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
        float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0);
        float _2328 = 1.0 - _2287;
        float _2338 = (0.5 / (((_2067 * ((_2301 * _2328) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2328) + _2287) * _2301))) * _2301;
        float _4248 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2340 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
        float _2341 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2262 = (((((_2321 * _2089) + _844) * cbLight._m0[_2272].x) * _2340) * _2341) + _2198;
        _2264 = (((((_2321 * _2091) + _846) * cbLight._m0[_2272].y) * _2340) * _2341) + _2199;
        _2266 = (((((_2321 * _2092) + _847) * cbLight._m0[_2272].z) * _2340) * _2341) + _2200;
    }
    float _2376;
    float _2378;
    float _2380;
    if (_1993)
    {
        _2376 = _2262;
        _2378 = _2264;
        _2380 = _2266;
    }
    else
    {
        uint _2387 = _1902 + 3u;
        uint _2391 = _1902 + 11u;
        float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _774) * 0.949999988079071044921875);
        float _2406 = _2405 * _2405;
        float _2407 = cbLight._m0[_2387].x + _722;
        float _2408 = cbLight._m0[_2387].y + _723;
        float _2409 = cbLight._m0[_2387].z + _724;
        float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
        float _2414 = _2413 * _2407;
        float _2415 = _2413 * _2408;
        float _2416 = _2413 * _2409;
        float _2417 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2387].xyz));
        float _4264 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2421 = dot(vec3(_642, _643, _644), vec3(_2414, _2415, _2416));
        float _4275 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2425 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2414, _2415, _2416));
        float _4286 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2429 = _2406 * _2406;
        float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
        float _2440 = exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0);
        float _2447 = 1.0 - _2406;
        float _2457 = (0.5 / (((_2067 * ((_2420 * _2447) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2447) + _2406) * _2420))) * _2420;
        float _4297 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2459 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
        float _2460 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2376 = (((((_2440 * _2089) + _844) * cbLight._m0[_2391].x) * _2459) * _2460) + _2262;
        _2378 = (((((_2440 * _2091) + _846) * cbLight._m0[_2391].y) * _2459) * _2460) + _2264;
        _2380 = (((((_2440 * _2092) + _847) * cbLight._m0[_2391].z) * _2459) * _2460) + _2266;
    }
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    if (_1900.y == 0u)
    {
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2535;
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2535;
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2535;
        uvec4 _2550 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2551 = _2550.x;
        uint _2562 = uint((float(_2550.y) * floor(float(uint(cbSceneParam._m0[85u].y * _731) / _2551))) + floor(float(uint(cbSceneParam._m0[85u].x * _730) / _2551)));
        float _2572 = (log2(_2538 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2573 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        uint _2576 = uint(isnan(14.0) ? _2573 : (isnan(_2573) ? 14.0 : min(_2573, 14.0)));
        uvec4 _2581 = texelFetch(g_lightClusterGridBuffer, int(((_2576 << 2u) + (_2562 << 6u)) >> 2u));
        uint _2582 = _2581.x;
        uint _2583 = _2550.z;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        if (((((1u << ((_2583 >> 4u) & 15u)) + 4294967295u) & _2582) == 0u) || ((_2583 & 240u) == 0u))
        {
            _2682 = 0.0;
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
        }
        else
        {
            float _2683;
            float _2685;
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            uint _2832 = 0u;
            uint _2841;
            bool _2842;
            for (;;)
            {
                _2841 = texelFetch(g_lightClassification, int((((_2576 << 5u) + (_2562 << 9u)) + (_2832 << 2u)) >> 2u)).x;
                _2842 = _2841 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2842)
                {
                    frontier_phi_63_pred = _2831;
                    frontier_phi_63_pred_1 = _2830;
                    frontier_phi_63_pred_2 = _2829;
                    frontier_phi_63_pred_3 = _2828;
                    frontier_phi_63_pred_4 = _2827;
                    frontier_phi_63_pred_5 = _2826;
                }
                else
                {
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    uint _2956;
                    _2950 = _2826;
                    _2951 = _2827;
                    _2952 = _2828;
                    _2953 = _2829;
                    _2954 = _2830;
                    _2955 = _2831;
                    _2956 = _2841;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    for (;;)
                    {
                        uint _2960 = uint(findLSB(_2956)) + (_2832 << 5u);
                        uint _2957 = (_2956 + 4294967295u) & _2956;
                        uint _2962 = _2960 * 48u;
                        vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 3u)).x));
                        uint _2982 = (_2960 * 48u) + 4u;
                        vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 3u)).x));
                        uint _3001 = (_2960 * 48u) + 8u;
                        vec3 _3012 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x));
                        float _3016 = _2976.x - _2536;
                        float _3017 = _2976.y - _2537;
                        float _3018 = _2976.z - _2538;
                        float _3019 = dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018));
                        float _3022 = inversesqrt(_3019);
                        float _3023 = _3022 * _3016;
                        float _3024 = _3022 * _3017;
                        float _3025 = _3022 * _3018;
                        float _3026 = dot(vec3(_755, _758, _761), vec3(_3023, _3024, _3025));
                        float _3031 = 1.0 - (_3019 * _2976.w);
                        float _4323 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3032 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3033 = sqrt(_3019) * _2995.w;
                        float _3036 = 1.39999997615814208984375 / (_3033 + 1.39999997615814208984375);
                        float _3037 = _3036 * _3036;
                        float _3040 = ((1.0 - _3037) * _3026) + _3037;
                        float _3043 = _3033 * _3033;
                        float _3047 = ((isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))) * _3032) / ((_3043 * 0.699999988079071044921875) + 1.0);
                        float _3051 = (-0.0) - _2536;
                        float _3052 = (-0.0) - _2537;
                        float _3053 = (-0.0) - _2538;
                        float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
                        float _3058 = _3057 * _3051;
                        float _3059 = _3057 * _3052;
                        float _3060 = _3057 * _3053;
                        float _3068 = exp2(log2(1.0 / ((_3043 * 3.5) + 5.0)) * 0.25);
                        float _3069 = 1.0 - _875;
                        float _3076 = sqrt(1.0 - ((1.0 - (_3069 * _3069)) * (1.0 - (_3068 * _3068))));
                        float _3077 = _3076 * _3076;
                        float _3078 = _3077 * _3077;
                        float _3079 = _3058 + _3023;
                        float _3080 = _3059 + _3024;
                        float _3081 = _3060 + _3025;
                        float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
                        float _3089 = dot(vec3(_755, _758, _761), vec3(_3058, _3059, _3060));
                        float _4339 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3092 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3093 = dot(vec3(_755, _758, _761), vec3(_3085 * _3079, _3085 * _3080, _3085 * _3081));
                        float _4350 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3096 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3100 = ((_3096 * _3096) * (_3078 + (-1.0))) + 1.0;
                        float _3101 = _3036 * _3077;
                        float _3102 = _3101 * _3101;
                        float _3105 = ((1.0 - _3102) * _3026) + _3102;
                        float _4361 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3106 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3107 = 1.0 - _3077;
                        float _3117 = (0.5 / (((_3106 * ((_3092 * _3107) + _3077)) + 9.9999999392252902907785028219223e-09) + (((_3106 * _3107) + _3077) * _3092))) * _3106;
                        float _4372 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3128 = (((_3078 * 3.1415927410125732421875) * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) / ((_3100 * _3100) * ((_3043 * 2.1991131305694580078125) + 3.141590118408203125))) * _3032;
                        _2885 = (_3047 * _2995.x) + _2953;
                        _2886 = (_3047 * _2995.y) + _2954;
                        _2887 = (_3047 * _2995.z) + _2955;
                        _2882 = (_3128 * _3012.x) + _2950;
                        _2883 = (_3128 * _3012.y) + _2951;
                        _2884 = (_3128 * _3012.z) + _2952;
                        if (_2957 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2950 = _2882;
                            _2951 = _2883;
                            _2952 = _2884;
                            _2953 = _2885;
                            _2954 = _2886;
                            _2955 = _2887;
                            _2956 = _2957;
                        }
                    }
                    frontier_phi_63_pred = _2887;
                    frontier_phi_63_pred_1 = _2886;
                    frontier_phi_63_pred_2 = _2885;
                    frontier_phi_63_pred_3 = _2884;
                    frontier_phi_63_pred_4 = _2883;
                    frontier_phi_63_pred_5 = _2882;
                }
                _2693 = frontier_phi_63_pred;
                _2691 = frontier_phi_63_pred_1;
                _2689 = frontier_phi_63_pred_2;
                _2687 = frontier_phi_63_pred_3;
                _2685 = frontier_phi_63_pred_4;
                _2683 = frontier_phi_63_pred_5;
                uint _2833 = _2832 + 1u;
                if (_2833 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2826 = _2683;
                    _2827 = _2685;
                    _2828 = _2687;
                    _2829 = _2689;
                    _2830 = _2691;
                    _2831 = _2693;
                    _2832 = _2833;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2682 = _2683;
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
        }
        uvec4 _2696 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2697 = _2696.z;
        uint _2699 = (_2697 >> 8u) & 15u;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        if (((4294967295u << _2699) & _2582) == 0u)
        {
            _2794 = _2682;
            _2796 = _2684;
            _2798 = _2686;
            _2800 = _2688;
            _2802 = _2690;
            _2804 = _2692;
        }
        else
        {
            float _2819 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
            float _2820 = _2819 * _2536;
            float _2821 = _2819 * _2537;
            float _2822 = _2819 * _2538;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2699 < ((_2697 >> 12u) & 15u))
            {
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2933 = _2682;
                float _2934 = _2684;
                float _2935 = _2686;
                float _2936 = _2688;
                float _2937 = _2690;
                float _2938 = _2692;
                uint _2939 = _2699;
                uint _2948;
                bool _2949;
                for (;;)
                {
                    _2948 = texelFetch(g_lightClassification, int((((_2576 << 5u) + (_2562 << 9u)) + (_2939 << 2u)) >> 2u)).x;
                    _2949 = _2948 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2949)
                    {
                        frontier_phi_69_pred = _2938;
                        frontier_phi_69_pred_1 = _2937;
                        frontier_phi_69_pred_2 = _2936;
                        frontier_phi_69_pred_3 = _2935;
                        frontier_phi_69_pred_4 = _2934;
                        frontier_phi_69_pred_5 = _2933;
                    }
                    else
                    {
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3146 = _2933;
                        float _3147 = _2934;
                        float _3148 = _2935;
                        float _3149 = _2936;
                        float _3150 = _2937;
                        float _3151 = _2938;
                        uint _3152 = _2948;
                        uint _3153;
                        vec4 _3178;
                        float _3179;
                        vec4 _3194;
                        vec3 _3206;
                        vec4 _3222;
                        vec4 _3237;
                        float _3284;
                        bool _3285;
                        for (;;)
                        {
                            uint _3163 = ((_2939 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3152));
                            _3153 = (_3152 + 4294967295u) & _3152;
                            uint _3165 = _3163 * 40u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            _3179 = _3178.w;
                            uint _3181 = (_3163 * 40u) + 4u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3196 = (_3163 * 40u) + 8u;
                            _3206 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x));
                            uint _3209 = (_3163 * 40u) + 16u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3224 = (_3163 * 40u) + 20u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3240 = (_3163 * 40u) + 24u;
                            vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3259 = (_3163 * 40u) + 28u;
                            vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            _3284 = fma(_2538, _3272.z, fma(_2537, _3272.y, _3272.x * _2536)) + _3272.w;
                            _3285 = !((fma(_2538, _3253.z, fma(_2537, _3253.y, _3253.x * _2536)) + _3253.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3285)
                            {
                                float _3312 = _3178.x - _2536;
                                float _3313 = _3178.y - _2537;
                                float _3314 = _3178.z - _2538;
                                float _3315 = dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314));
                                float _3318 = inversesqrt(_3315);
                                float _3319 = _3318 * _3312;
                                float _3320 = _3318 * _3313;
                                float _3321 = _3318 * _3314;
                                float _3325 = 1.0 - (_3315 / (_3179 * _3179));
                                float _4383 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3330 = sqrt(_3315) * _3194.w;
                                float _3332 = 1.39999997615814208984375 / (_3330 + 1.39999997615814208984375);
                                float _3333 = _3332 * _3332;
                                float _3336 = ((1.0 - _3333) * dot(vec3(_3319, _3320, _3321), vec3(_755, _758, _761))) + _3333;
                                float _3339 = _3330 * _3330;
                                float _3343 = (fma(_2538, _3222.z, fma(_2537, _3222.y, _3222.x * _2536)) + _3222.w) / _3284;
                                float _3344 = (fma(_2538, _3237.z, fma(_2537, _3237.y, _3237.x * _2536)) + _3237.w) / _3284;
                                float _3348 = 1.0 - dot(vec2(_3343, _3344), vec2(_3343, _3344));
                                float _4399 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3349 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3350 = _3349 * (((isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0))) * _3326) / ((_3339 * 0.699999988079071044921875) + 1.0));
                                float _3362 = exp2(log2(1.0 / ((_3339 * 3.5) + 5.0)) * 0.25);
                                float _3363 = 1.0 - _875;
                                float _3370 = sqrt(1.0 - ((1.0 - (_3363 * _3363)) * (1.0 - (_3362 * _3362))));
                                float _3371 = _3370 * _3370;
                                float _3372 = _3371 * _3371;
                                float _3373 = _3319 - _2820;
                                float _3374 = _3320 - _2821;
                                float _3375 = _3321 - _2822;
                                float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                                float _3383 = dot(vec3(_755, _758, _761), vec3((-0.0) - _2820, (-0.0) - _2821, (-0.0) - _2822));
                                float _4410 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3386 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3387 = dot(vec3(_755, _758, _761), vec3(_3379 * _3373, _3379 * _3374, _3379 * _3375));
                                float _4421 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3390 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3394 = ((_3390 * _3390) * (_3372 + (-1.0))) + 1.0;
                                float _3395 = _3332 * _3371;
                                float _3396 = _3395 * _3395;
                                float _3402 = ((1.0 - _3396) * dot(vec3(_755, _758, _761), vec3(_3319, _3320, _3321))) + _3396;
                                float _4432 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3403 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3404 = 1.0 - _3371;
                                float _3414 = (0.5 / (((_3403 * ((_3386 * _3404) + _3371)) + 9.9999999392252902907785028219223e-09) + (((_3403 * _3404) + _3371) * _3386))) * _3403;
                                float _4443 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3424 = (_3349 * _3326) * (((_3372 * 3.1415927410125732421875) * (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) / ((_3394 * _3394) * ((_3339 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3350 * _3194.z;
                                frontier_phi_75_pred_1 = _3350 * _3194.y;
                                frontier_phi_75_pred_2 = _3350 * _3194.x;
                                frontier_phi_75_pred_3 = _3424 * _3206.z;
                                frontier_phi_75_pred_4 = _3424 * _3206.y;
                                frontier_phi_75_pred_5 = _3424 * _3206.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3433 = frontier_phi_75_pred;
                            _3432 = frontier_phi_75_pred_1;
                            _3431 = frontier_phi_75_pred_2;
                            _3430 = frontier_phi_75_pred_3;
                            _3429 = frontier_phi_75_pred_4;
                            _3428 = frontier_phi_75_pred_5;
                            _3136 = _3431 + _3149;
                            _3137 = _3432 + _3150;
                            _3138 = _3433 + _3151;
                            _3133 = _3428 + _3146;
                            _3134 = _3429 + _3147;
                            _3135 = _3430 + _3148;
                            if (_3153 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3153;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3138;
                        frontier_phi_69_pred_1 = _3137;
                        frontier_phi_69_pred_2 = _3136;
                        frontier_phi_69_pred_3 = _3135;
                        frontier_phi_69_pred_4 = _3134;
                        frontier_phi_69_pred_5 = _3133;
                    }
                    _2805 = frontier_phi_69_pred;
                    _2803 = frontier_phi_69_pred_1;
                    _2801 = frontier_phi_69_pred_2;
                    _2799 = frontier_phi_69_pred_3;
                    _2797 = frontier_phi_69_pred_4;
                    _2795 = frontier_phi_69_pred_5;
                    uint _2940 = _2939 + 1u;
                    if (_2940 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2933 = _2795;
                        _2934 = _2797;
                        _2935 = _2799;
                        _2936 = _2801;
                        _2937 = _2803;
                        _2938 = _2805;
                        _2939 = _2940;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2805;
                frontier_phi_57_58_ladder_1 = _2803;
                frontier_phi_57_58_ladder_2 = _2801;
                frontier_phi_57_58_ladder_3 = _2799;
                frontier_phi_57_58_ladder_4 = _2797;
                frontier_phi_57_58_ladder_5 = _2795;
            }
            else
            {
                frontier_phi_57_58_ladder = _2692;
                frontier_phi_57_58_ladder_1 = _2690;
                frontier_phi_57_58_ladder_2 = _2688;
                frontier_phi_57_58_ladder_3 = _2686;
                frontier_phi_57_58_ladder_4 = _2684;
                frontier_phi_57_58_ladder_5 = _2682;
            }
            _2794 = frontier_phi_57_58_ladder_5;
            _2796 = frontier_phi_57_58_ladder_4;
            _2798 = frontier_phi_57_58_ladder_3;
            _2800 = frontier_phi_57_58_ladder_2;
            _2802 = frontier_phi_57_58_ladder_1;
            _2804 = frontier_phi_57_58_ladder;
        }
        float _2809 = isnan(1.0) ? _859 : (isnan(_859) ? 1.0 : min(_859, 1.0));
        _2594 = (_2809 * _2800) + _2031;
        _2596 = (_2809 * _2802) + _2033;
        _2598 = (_2809 * _2804) + _2035;
        _2600 = ((_2794 * _844) * _2809) + _2376;
        _2602 = ((_2796 * _846) * _2809) + _2378;
        _2604 = ((_2798 * _847) * _2809) + _2380;
    }
    else
    {
        _2594 = _2031;
        _2596 = _2033;
        _2598 = _2035;
        _2600 = _2376;
        _2602 = _2378;
        _2604 = _2380;
    }
    float _4459 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4470 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4481 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    uint _2624 = _787 + 6u;
    float _2632 = _730 / cbSceneParam._m0[86u].x;
    float _2633 = _731 / cbSceneParam._m0[86u].y;
    vec4 _2647 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2632, _2633, (log2((isnan(cbSceneParam._m0[77u].w) ? _665 : (isnan(_665) ? cbSceneParam._m0[77u].w : min(_665, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2649 = _2647.x;
    float _2650 = _2647.y;
    float _2651 = _2647.z;
    float _2652 = _2647.w;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    if (_665 > cbSceneParam._m0[78u].w)
    {
        float _2707 = isnan(_665) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _665 : min(cbSceneParam._m0[80u].w, _665));
        float _2708 = _2707 / _665;
        float _2719 = _2708 * _715;
        float _2720 = _716 * _2708;
        float _2721 = (-0.0) - _2720;
        float _2722 = _2708 * _717;
        float _2724 = (cbSceneParam._m0[77u].w * _2721) / _2707;
        float _2725 = _2724 + cbSceneParam._m0[79u].w;
        float _2726 = cbSceneParam._m0[79u].w - _2720;
        float _2732 = sqrt(((_2719 * _2719) + (_2720 * _2720)) + (_2722 * _2722));
        float _2735 = (1.0 - (cbSceneParam._m0[77u].w / _2707)) * _2732;
        float _2740 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2742 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2895;
        if (abs((_2721 - _2724) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2895 = ((((_2725 > 0.0) ? exp2(_2740 * _2725) : (2.0 - exp2(_2742 * _2725))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2735;
        }
        else
        {
            float _2855 = 1.0 / cbSceneParam._m0[80u].x;
            float _2856 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : max(_2725, _2726));
            float _2857 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : min(_2725, _2726));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            float _2867 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : min(_2857, 0.0));
            _2895 = ((abs(_2732 / _2721) * cbSceneParam._m0[80u].y) * ((((_2866 - _2867) * 2.0) - ((exp2(_2740 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0)))) - exp2(_2740 * (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))))) * _2855)) - ((exp2(_2742 * _2866) - exp2(_2742 * _2867)) * _2855))) + (_2735 * cbSceneParam._m0[80u].z);
        }
        vec4 _2897 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2632, _2633, 1.0), 0.0);
        float _2906 = exp2((_2895 * (-1.44269502162933349609375)) * (1.0 - _2897.w));
        float _2907 = log2(_2906);
        float _2923 = log2(_2652);
        _2744 = (exp2(_2923 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].x)) * _2897.x) / cbSceneParam._m0[78u].x)) + _2649;
        _2746 = (exp2(_2923 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].y)) * _2897.y) / cbSceneParam._m0[78u].y)) + _2650;
        _2748 = (exp2(_2923 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].z)) * _2897.z) / cbSceneParam._m0[78u].z)) + _2651;
        _2750 = _2906 * _2652;
    }
    else
    {
        _2744 = _2649;
        _2746 = _2650;
        _2748 = _2651;
        _2750 = _2652;
    }
    float _2762 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2763 = _2762 == 3.0;
    float _2764 = log2(_2750);
    float _2771 = exp2(_2764 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2594 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _859))) + ((_2600 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1669)) * cbPerFrame._m0[3u].x));
    float _2772 = exp2(_2764 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2596 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _859))) + ((_2602 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1669)) * cbPerFrame._m0[3u].x));
    float _2773 = exp2(_2764 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2598 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _859))) + ((_2604 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1669)) * cbPerFrame._m0[3u].x));
    float _2782 = (_2762 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2782 * (_2763 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2744)));
    SV_Target.y = _2782 * (_2763 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2746)));
    SV_Target.z = _2782 * (_2763 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2748)));
    SV_Target.w = cbInstanceData._m0[_2624].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2624].w;
}


