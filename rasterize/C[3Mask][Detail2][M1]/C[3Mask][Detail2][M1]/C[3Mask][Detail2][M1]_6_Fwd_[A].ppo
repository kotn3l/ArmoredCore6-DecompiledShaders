#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1271;
float _3654;
float _3655;
float _3656;
float _3657;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _250.x * cbMtdParam._m0[10u].x;
    float _257 = _250.y * cbMtdParam._m0[10u].y;
    float _258 = _250.z * cbMtdParam._m0[10u].z;
    vec4 _276 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _326 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _336 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _326)) + 1.0;
    float _3666 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _337 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _344 = (_337 * ((_276.x * cbMtdParam._m0[11u].x) - _256)) + _256;
    float _345 = (_337 * ((_276.y * cbMtdParam._m0[11u].y) - _257)) + _257;
    float _346 = (_337 * ((_276.z * cbMtdParam._m0[11u].z) - _258)) + _258;
    vec4 _364 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _395 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _326)) + 1.0;
    float _3677 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _403 = (_396 * ((_364.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _404 = (_396 * ((_364.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _405 = (_396 * ((_364.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _423 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _448 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _326)) + 1.0;
    float _3688 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    vec4 _477 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _485 = ((((_449 * ((_423.x * cbMtdParam._m0[13u].x) - _403)) + _403) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _477.x;
    float _488 = ((((_449 * ((_423.y * cbMtdParam._m0[13u].y) - _404)) + _404) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _477.y;
    float _491 = ((((_449 * ((_423.z * cbMtdParam._m0[13u].z) - _405)) + _405) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _477.z;
    vec4 _504 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _506 = _504.x;
    float _524 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _506) * _337) + _506;
    float _541 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _524) * _396) + _524;
    float _558 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _541) * _449) + _541;
    vec4 _570 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _572 = _570.x;
    float _573 = _570.y;
    float _579 = cbMtdParam._m0[18u].y * _570.z;
    vec4 _591 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _600 = (((cbMtdParam._m0[18u].x * _591.z) - _579) * _337) + _579;
    vec4 _613 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _624 = (((cbMtdParam._m0[17u].w * _613.z) - _600) * _396) + _600;
    vec4 _637 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _646 = (((cbMtdParam._m0[17u].z * _637.z) - _624) * _449) + _624;
    float _651 = ((_591.x - _572) * _337) + _572;
    float _652 = ((_591.y - _573) * _337) + _573;
    float _657 = ((_613.x - _651) * _396) + _651;
    float _658 = ((_613.y - _652) * _396) + _652;
    float _667 = ((((_637.x - _657) * _449) + _657) * 2.0) + (-1.0);
    float _669 = ((((_637.y - _658) * _449) + _658) * 2.0) + (-1.0);
    float _670 = dot(vec2(_667, _669), vec2(_667, _669));
    float _3699 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _675 = sqrt(1.0 - (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))));
    float _678 = fma(_675, _220 * NORMAL.x, fma(_669, _227 * TANGENT.x, (_213 * _205) * _667));
    float _681 = fma(_675, _220 * NORMAL.y, fma(_669, _227 * TANGENT.y, (_213 * _206) * _667));
    float _684 = fma(_675, _220 * NORMAL.z, fma(_669, _227 * TANGENT.z, (_213 * _207) * _667));
    float _688 = inversesqrt(dot(vec3(_678, _681, _684), vec3(_678, _681, _684)));
    float _689 = _688 * _678;
    float _690 = _688 * _681;
    float _691 = _688 * _684;
    float _3710 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _692 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3732 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3743 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3754 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _696 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _712 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _762 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _752);
    float _763 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _752);
    float _764 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _752);
    float _768 = inversesqrt(dot(vec3(_762, _763, _764), vec3(_762, _763, _764)));
    float _769 = _762 * _768;
    float _770 = _763 * _768;
    float _771 = _764 * _768;
    vec4 _776 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _778 = _776.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _950 = sqrt(((_762 * _762) + (_763 * _763)) + (_764 * _764));
        float _956 = (cbMatDynParam._m0[5u].x * _950) + cbMatDynParam._m0[5u].y;
        float _3765 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _961 = (cbMatDynParam._m0[5u].z * _950) + cbMatDynParam._m0[5u].w;
        float _3776 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) - _957)) + _957) < ((_778 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _789 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _790 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _808 = fma(_691, cbSceneParam._m0[5u].z, fma(_690, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _689));
    float _811 = fma(_691, cbSceneParam._m0[6u].z, fma(_690, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _689));
    float _814 = fma(_691, cbSceneParam._m0[7u].z, fma(_690, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _689));
    uint _827 = uint(roundEven(NORMAL.w)) * 13u;
    uint _828 = _827 + 9u;
    uint _829 = _828 + uint(cbMatDynParam._m0[0u].w);
    float _835 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_829].x;
    float _836 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_829].y;
    float _837 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_829].z;
    float _3787 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _841 = 1.0 - _696;
    float _842 = _838 * _841;
    float _843 = _839 * _841;
    float _844 = _840 * _841;
    float _849 = (_838 + (-0.039999999105930328369140625)) * _696;
    float _850 = (_839 + (-0.039999999105930328369140625)) * _696;
    float _851 = (_840 + (-0.039999999105930328369140625)) * _696;
    float _852 = _849 + 0.039999999105930328369140625;
    float _854 = _850 + 0.039999999105930328369140625;
    float _855 = _851 + 0.039999999105930328369140625;
    vec4 _864 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _789, cbSceneParam._m0[86u].y * _790));
    float _867 = _864.x * TEXCOORD_5.w;
    float _868 = dot(vec3(_689, _690, _691), vec3(_769, _770, _771));
    float _871 = _868 * 2.0;
    float _875 = (_871 * _689) - _769;
    float _876 = (_871 * _690) - _770;
    float _877 = (_871 * _691) - _771;
    float _881 = abs(dot(vec3(_769, _770, _771), vec3(_689, _690, _691)));
    float _3820 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _883 = sqrt(_692);
    float _896 = exp2((_883 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_883 * 3.0));
    float _902 = (1.0 - _896) * ((_883 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _903 = _896 * _883;
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1270;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _995 = fma(_939, cbModelParam._m0[26u].z, fma(_935, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931));
        float _999 = fma(_939, cbModelParam._m0[27u].z, fma(_935, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931));
        float _1003 = fma(_939, cbModelParam._m0[28u].z, fma(_935, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931));
        float _1028 = _931 + _689;
        float _1029 = _935 + _690;
        float _1030 = _939 + _691;
        float _1040 = fma(_1030, cbModelParam._m0[26u].z, fma(_1029, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028)) - _995;
        float _1041 = fma(_1030, cbModelParam._m0[27u].z, fma(_1029, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028)) - _999;
        float _1042 = fma(_1030, cbModelParam._m0[28u].z, fma(_1029, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028)) - _1003;
        float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
        float _1059 = ((_1046 * _1040) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_995 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1046 * _1041) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_999 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1046 * _1042) / cbModelParam._m0[34u].z) + ((((((_1003 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1098 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1064.x + (-0.5));
        float _1100 = _1098 * (_1064.y + (-0.5));
        float _1101 = _1098 * (_1064.z + (-0.5));
        float _1108 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1071.x + (-0.5));
        float _1110 = _1108 * (_1071.y + (-0.5));
        float _1111 = _1108 * (_1071.z + (-0.5));
        float _1118 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1078.x + (-0.5));
        float _1120 = _1118 * (_1078.y + (-0.5));
        float _1121 = _1118 * (_1078.z + (-0.5));
        float _1128 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1085.x + (-0.5));
        float _1130 = _1128 * (_1085.y + (-0.5));
        float _1131 = _1128 * (_1085.z + (-0.5));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = _1099 * 0.5;
        float _1136 = _1109 * 0.5;
        float _1137 = _1119 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1152 = (dot(vec3(_689, _690, _691), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1162 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3868 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1164 + 1.0))) + _1169) * _1132;
        float _1179 = _1100 * 0.5;
        float _1180 = _1110 * 0.5;
        float _1181 = _1120 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_689, _690, _691), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3901 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1206 + 1.0))) + _1211) * _1133;
        float _1221 = _1101 * 0.5;
        float _1222 = _1111 * 0.5;
        float _1223 = _1121 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_689, _690, _691), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3934 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1248 + 1.0))) + _1253) * _1134;
        _1270 = _1101;
        _1272 = _1100;
        _1273 = _1099;
        _1274 = _1111;
        _1275 = _1110;
        _1276 = _1109;
        _1277 = _1121;
        _1278 = _1120;
        _1279 = _1119;
        _1280 = _1134;
        _1281 = _1133;
        _1282 = _1132;
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
    }
    else
    {
        _1270 = _1271;
        _1272 = _1271;
        _1273 = _1271;
        _1274 = _1271;
        _1275 = _1271;
        _1276 = _1271;
        _1277 = _1271;
        _1278 = _1271;
        _1279 = _1271;
        _1280 = _1271;
        _1281 = _1271;
        _1282 = _1271;
        _1283 = 0.0;
        _1284 = 0.0;
        _1285 = 0.0;
    }
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1314 = fma(_939, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931));
        float _1318 = fma(_939, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931));
        float _1322 = fma(_939, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931));
        float _1345 = _931 + _689;
        float _1346 = _935 + _690;
        float _1347 = _939 + _691;
        float _1357 = fma(_1347, cbModelParam._m0[30u].z, fma(_1346, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1345)) - _1314;
        float _1358 = fma(_1347, cbModelParam._m0[31u].z, fma(_1346, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1345)) - _1318;
        float _1359 = fma(_1347, cbModelParam._m0[32u].z, fma(_1346, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1345)) - _1322;
        float _1363 = inversesqrt(dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359)));
        float _1376 = ((_1363 * _1357) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1314 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1377 = ((_1363 * _1358) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1318 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1378 = ((_1363 * _1359) / cbModelParam._m0[35u].z) + ((((((_1322 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        float _1413 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1380.x + (-0.5));
        float _1415 = _1413 * (_1380.y + (-0.5));
        float _1416 = _1413 * (_1380.z + (-0.5));
        float _1423 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1387.x + (-0.5));
        float _1425 = _1423 * (_1387.y + (-0.5));
        float _1426 = _1423 * (_1387.z + (-0.5));
        float _1433 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1394.x + (-0.5));
        float _1435 = _1433 * (_1394.y + (-0.5));
        float _1436 = _1433 * (_1394.z + (-0.5));
        float _1443 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1401.x + (-0.5));
        float _1445 = _1443 * (_1401.y + (-0.5));
        float _1446 = _1443 * (_1401.z + (-0.5));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = _1414 * 0.5;
        float _1451 = _1424 * 0.5;
        float _1452 = _1434 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_689, _690, _691), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _3997 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1477 + 1.0))) + _1482) * _1447;
        float _1492 = _1415 * 0.5;
        float _1493 = _1425 * 0.5;
        float _1494 = _1435 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_689, _690, _691), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4030 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1519 + 1.0))) + _1524) * _1448;
        float _1534 = _1416 * 0.5;
        float _1535 = _1426 * 0.5;
        float _1536 = _1436 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_689, _690, _691), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4063 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1561 + 1.0))) + _1566) * _1449;
        _1583 = _1416;
        _1584 = _1415;
        _1585 = _1414;
        _1586 = _1426;
        _1587 = _1425;
        _1588 = _1424;
        _1589 = _1436;
        _1590 = _1435;
        _1591 = _1434;
        _1592 = _1449;
        _1593 = _1448;
        _1594 = _1447;
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
    }
    else
    {
        _1583 = _1271;
        _1584 = _1271;
        _1585 = _1271;
        _1586 = _1271;
        _1587 = _1271;
        _1588 = _1271;
        _1589 = _1271;
        _1590 = _1271;
        _1591 = _1271;
        _1592 = _1271;
        _1593 = _1271;
        _1594 = _1271;
        _1595 = 0.0;
        _1596 = 0.0;
        _1597 = 0.0;
    }
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1283)) + _1283;
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1284)) + _1284;
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1285)) + _1285;
    float _1630 = fma(_1609, cbSceneParam._m0[89u].z, fma(_1608, cbSceneParam._m0[89u].y, _1607 * cbSceneParam._m0[89u].x));
    float _1633 = fma(_1609, cbSceneParam._m0[90u].z, fma(_1608, cbSceneParam._m0[90u].y, _1607 * cbSceneParam._m0[90u].x));
    float _1636 = fma(_1609, cbSceneParam._m0[91u].z, fma(_1608, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1607));
    float _1651 = _875 * 0.5;
    float _1652 = _876 * 0.5;
    float _1653 = _877 * 0.5;
    float _1654 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1657 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1660 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1694;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1667 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1270, _1274, _1277, _1280));
        float _1671 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1272, _1275, _1278, _1281));
        float _1675 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1273, _1276, _1279, _1282));
        float _1682 = dot(vec4(cbModelParam._m0[39u]), vec4(_1651, _1652, _1653, 1.0));
        _1694 = dot(vec3(isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1682) ? 0.0 : (isnan(0.0) ? _1682 : max(0.0, _1682))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1694 = 1.0;
    }
    float _1705;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1696 = dot(vec4(cbModelParam._m0[40u]), vec4(_1651, _1652, _1653, 1.0));
        _1705 = dot(vec3(isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1696) ? 0.0 : (isnan(0.0) ? _1696 : max(0.0, _1696))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1705 = 1.0;
    }
    float _1709 = (_1705 * cbModelParam._m0[1u].x) + (_1694 * (1.0 - cbModelParam._m0[1u].x));
    float _1719 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _692);
    float _1720 = isnan(_1719) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1719 : min(cbModelParam._m0[25u].z, _1719));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1769 = fma(_939, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _931)) + cbModelParam._m0[13u].w;
        float _1773 = fma(_939, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _931)) + cbModelParam._m0[14u].w;
        float _1777 = fma(_939, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _931)) + cbModelParam._m0[15u].w;
        float _1780 = fma(_877, cbModelParam._m0[13u].z, fma(_876, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _875));
        float _1783 = fma(_877, cbModelParam._m0[14u].z, fma(_876, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _875));
        float _1786 = fma(_877, cbModelParam._m0[15u].z, fma(_876, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _875));
        float _1814;
        if (_1780 > 0.0)
        {
            _1814 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1814 = frontier_phi_17_15_ladder;
        }
        float _2016;
        if (_1783 > 0.0)
        {
            _2016 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2016 = frontier_phi_26_22_ladder;
        }
        float _2270;
        if (_1786 > 0.0)
        {
            _2270 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2270 = frontier_phi_38_33_ladder;
        }
        float _2272 = isnan(_2016) ? _1814 : (isnan(_1814) ? _2016 : min(_1814, _2016));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1780) + _1769;
        float _2278 = (_2273 * _1783) + _1773;
        float _2279 = (_2273 * _1786) + _1777;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2280;
        float _2284 = _2280 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 > _2284) || ((_2278 < _2282) || ((_2277 < _2282) || (_2277 > _2284))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2279, cbModelParam._m0[9u].z, fma(_2278, cbModelParam._m0[9u].y, _2277 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2279, cbModelParam._m0[10u].z, fma(_2278, cbModelParam._m0[10u].y, _2277 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2279, cbModelParam._m0[11u].z, fma(_2278, cbModelParam._m0[11u].y, _2277 * cbModelParam._m0[11u].x))), _1720);
            frontier_phi_16_38_ladder = _2407.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2407.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2407.x * cbModelParam._m0[1u].y;
        }
        _1802 = frontier_phi_16_38_ladder_2;
        _1804 = frontier_phi_16_38_ladder_1;
        _1806 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_875, _876, _877), _1720);
        _1802 = _1790.x * cbModelParam._m0[1u].y;
        _1804 = _1790.y * cbModelParam._m0[1u].y;
        _1806 = _1790.z * cbModelParam._m0[1u].y;
    }
    float _1810 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _692);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1810 : min(cbModelParam._m0[25u].w, _1810));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1864 = fma(_939, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _931)) + cbModelParam._m0[21u].w;
        float _1868 = fma(_939, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _931)) + cbModelParam._m0[22u].w;
        float _1872 = fma(_939, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _931)) + cbModelParam._m0[23u].w;
        float _1875 = fma(_877, cbModelParam._m0[21u].z, fma(_876, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _875));
        float _1878 = fma(_877, cbModelParam._m0[22u].z, fma(_876, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _875));
        float _1881 = fma(_877, cbModelParam._m0[23u].z, fma(_876, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _875));
        float _2021;
        if (_1875 > 0.0)
        {
            _2021 = abs((1.0 - _1864) / _1875);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1864 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2021 = frontier_phi_28_24_ladder;
        }
        float _2297;
        if (_1878 > 0.0)
        {
            _2297 = abs((1.0 - _1868) / _1878);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1868 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2297 = frontier_phi_40_35_ladder;
        }
        float _2510;
        if (_1881 > 0.0)
        {
            _2510 = abs((1.0 - _1872) / _1881);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1872 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2510 = frontier_phi_49_46_ladder;
        }
        float _2512 = isnan(_2297) ? _2021 : (isnan(_2021) ? _2297 : min(_2021, _2297));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _1875) + _1864;
        float _2518 = (_2513 * _1878) + _1868;
        float _2519 = (_2513 * _1881) + _1872;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2521 = (-1.0) - _2520;
        float _2523 = _2520 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2519 > _2523) || ((_2519 < _2521) || ((_2518 > _2523) || ((_2518 < _2521) || ((_2517 < _2521) || (_2517 > _2523))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2718 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2519, cbModelParam._m0[17u].z, fma(_2518, cbModelParam._m0[17u].y, _2517 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2519, cbModelParam._m0[18u].z, fma(_2518, cbModelParam._m0[18u].y, _2517 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2519, cbModelParam._m0[19u].z, fma(_2518, cbModelParam._m0[19u].y, _2517 * cbModelParam._m0[19u].x))), _1811);
            frontier_phi_25_49_ladder = _2718.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2718.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2718.x * cbModelParam._m0[1u].z;
        }
        _1900 = frontier_phi_25_49_ladder_2;
        _1902 = frontier_phi_25_49_ladder_1;
        _1904 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_875, _876, _877), _1811);
        _1900 = _1884.x * cbModelParam._m0[1u].z;
        _1902 = _1884.y * cbModelParam._m0[1u].z;
        _1904 = _1884.z * cbModelParam._m0[1u].z;
    }
    float _1917 = (((_902 * _852) + _903) * _867) * ((cbModelParam._m0[1u].w * (_1900 - _1802)) + _1802);
    float _1919 = (((_902 * _854) + _903) * _867) * ((cbModelParam._m0[1u].w * (_1902 - _1804)) + _1804);
    float _1921 = (((_902 * _855) + _903) * _867) * ((cbModelParam._m0[1u].w * (_1904 - _1806)) + _1806);
    float _1924 = fma(_1921, cbSceneParam._m0[89u].z, fma(_1919, cbSceneParam._m0[89u].y, _1917 * cbSceneParam._m0[89u].x));
    float _1927 = fma(_1921, cbSceneParam._m0[90u].z, fma(_1919, cbSceneParam._m0[90u].y, _1917 * cbSceneParam._m0[90u].x));
    float _1930 = fma(_1921, cbSceneParam._m0[91u].z, fma(_1919, cbSceneParam._m0[91u].y, _1917 * cbSceneParam._m0[91u].x));
    uvec4 _1940 = floatBitsToUint(cbInstanceData._m0[_827 + 5u]);
    uint _1942 = _1940.x * 14u;
    uint _1943 = _1942 + 13u;
    float _1950 = _867 + (-1.0);
    float _1955 = (cbLight._m0[_1943].x * _1950) + 1.0;
    float _1956 = (cbLight._m0[_1943].y * _1950) + 1.0;
    float _1957 = (cbLight._m0[_1943].z * _1950) + 1.0;
    float _1958 = (cbLight._m0[_1943].w * _1950) + 1.0;
    uint _1959 = _1942 + 5u;
    float _1965 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
    uint _1969 = _1942 + 4u;
    float _1975 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
    uint _1979 = _1942 | 1u;
    float _1990 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_689, _690, _691));
    float _1993 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_689, _690, _691));
    float _4199 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _4210 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1998 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * 0.3183098733425140380859375;
    float _2000 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.3183098733425140380859375;
    float _2007 = ((cbLight._m0[_1959].x * _1965) * _2000) + ((cbLight._m0[_1969].x * _1975) * _1998);
    float _2008 = ((_1965 * cbLight._m0[_1959].y) * _2000) + ((_1975 * cbLight._m0[_1969].y) * _1998);
    float _2009 = ((_1965 * cbLight._m0[_1959].z) * _2000) + ((_1975 * cbLight._m0[_1969].z) * _1998);
    uvec4 _2013 = floatBitsToUint(cbLight._m0[_1942 + 12u]);
    bool _2015 = _2013.x == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_2015)
    {
        _2026 = _2007;
        _2028 = _2008;
        _2030 = _2009;
    }
    else
    {
        uint _2034 = _1942 + 6u;
        float _2050 = (dot(vec3(cbLight._m0[_1942 + 2u].xyz), vec3(_689, _690, _691)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _4221 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2053 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2026 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _2007;
        _2028 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _2008;
        _2030 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _2009;
    }
    bool _2033 = _2013.y == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_2033)
    {
        _2071 = _2026;
        _2073 = _2028;
        _2075 = _2030;
    }
    else
    {
        uint _2241 = _1942 + 7u;
        float _2257 = (dot(vec3(cbLight._m0[_1942 + 3u].xyz), vec3(_689, _690, _691)) * 0.5) + 0.5;
        float _2258 = _2257 * _2257;
        float _4237 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2259 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2260 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2071 = (((cbLight._m0[_2241].x * 0.3183098733425140380859375) * _2259) * _2260) + _2026;
        _2073 = (((cbLight._m0[_2241].y * 0.3183098733425140380859375) * _2259) * _2260) + _2028;
        _2075 = (((cbLight._m0[_2241].z * 0.3183098733425140380859375) * _2259) * _2260) + _2030;
    }
    uint _2078 = _1942 + 8u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _692) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1942].x + _769;
    float _2094 = cbLight._m0[_1942].y + _770;
    float _2095 = cbLight._m0[_1942].z + _771;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_1942].xyz));
    float _4253 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _4264 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _2107 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2108 = dot(vec3(_689, _690, _691), vec3(_2100, _2101, _2102));
    float _4275 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2100, _2101, _2102));
    float _4286 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2092 * _2092;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2128 = exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0);
    float _2129 = 0.959999978542327880859375 - _849;
    float _2131 = 0.959999978542327880859375 - _850;
    float _2132 = 0.959999978542327880859375 - _851;
    float _2139 = 1.0 - _2092;
    float _2150 = (0.5 / (((_2107 * ((_2106 * _2139) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2139) + _2092) * _2106))) * _2106;
    float _4297 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    uint _2163 = _1942 + 9u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _692) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_1979].x + _769;
    float _2177 = cbLight._m0[_1979].y + _770;
    float _2178 = cbLight._m0[_1979].z + _771;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_1979].xyz));
    float _4308 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2190 = dot(vec3(_689, _690, _691), vec3(_2183, _2184, _2185));
    float _4319 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2194 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2183, _2184, _2185));
    float _4330 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2198 = _2175 * _2175;
    float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
    float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0);
    float _2216 = 1.0 - _2175;
    float _2226 = (0.5 / (((_2107 * ((_2189 * _2216) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2216) + _2175) * _2189))) * _2189;
    float _4341 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2228 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
    float _2238 = (((((_2209 * _2129) + _852) * cbLight._m0[_2163].x) * _2228) * _1965) + (((((_2128 * _2129) + _852) * cbLight._m0[_2078].x) * _2152) * _1975);
    float _2239 = (((((_2209 * _2131) + _854) * cbLight._m0[_2163].y) * _2228) * _1965) + (((((_2128 * _2131) + _854) * cbLight._m0[_2078].y) * _2152) * _1975);
    float _2240 = (((((_2209 * _2132) + _855) * cbLight._m0[_2163].z) * _2228) * _1965) + (((((_2128 * _2132) + _855) * cbLight._m0[_2078].z) * _2152) * _1975);
    float _2302;
    float _2304;
    float _2306;
    if (_2015)
    {
        _2302 = _2238;
        _2304 = _2239;
        _2306 = _2240;
    }
    else
    {
        uint _2308 = _1942 + 2u;
        uint _2312 = _1942 + 10u;
        float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _692) * 0.949999988079071044921875);
        float _2327 = _2326 * _2326;
        float _2328 = cbLight._m0[_2308].x + _769;
        float _2329 = cbLight._m0[_2308].y + _770;
        float _2330 = cbLight._m0[_2308].z + _771;
        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
        float _2335 = _2334 * _2328;
        float _2336 = _2334 * _2329;
        float _2337 = _2334 * _2330;
        float _2338 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_2308].xyz));
        float _4352 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2342 = dot(vec3(_689, _690, _691), vec3(_2335, _2336, _2337));
        float _4363 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2346 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2335, _2336, _2337));
        float _4374 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2350 = _2327 * _2327;
        float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
        float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0);
        float _2368 = 1.0 - _2327;
        float _2378 = (0.5 / (((_2107 * ((_2341 * _2368) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2368) + _2327) * _2341))) * _2341;
        float _4385 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2380 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
        float _2381 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2302 = (((((_2361 * _2129) + _852) * cbLight._m0[_2312].x) * _2380) * _2381) + _2238;
        _2304 = (((((_2361 * _2131) + _854) * cbLight._m0[_2312].y) * _2380) * _2381) + _2239;
        _2306 = (((((_2361 * _2132) + _855) * cbLight._m0[_2312].z) * _2380) * _2381) + _2240;
    }
    float _2416;
    float _2418;
    float _2420;
    if (_2033)
    {
        _2416 = _2302;
        _2418 = _2304;
        _2420 = _2306;
    }
    else
    {
        uint _2427 = _1942 + 3u;
        uint _2431 = _1942 + 11u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _692) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _769;
        float _2448 = cbLight._m0[_2427].y + _770;
        float _2449 = cbLight._m0[_2427].z + _771;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_2427].xyz));
        float _4401 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2461 = dot(vec3(_689, _690, _691), vec3(_2454, _2455, _2456));
        float _4412 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4423 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) * 5.0);
        float _2487 = 1.0 - _2446;
        float _2497 = (0.5 / (((_2107 * ((_2460 * _2487) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2487) + _2446) * _2460))) * _2460;
        float _4434 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2499 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2500 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2416 = (((((_2480 * _2129) + _852) * cbLight._m0[_2431].x) * _2499) * _2500) + _2302;
        _2418 = (((((_2480 * _2131) + _854) * cbLight._m0[_2431].y) * _2499) * _2500) + _2304;
        _2420 = (((((_2480 * _2132) + _855) * cbLight._m0[_2431].z) * _2499) * _2500) + _2306;
    }
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    if (_1940.y == 0u)
    {
        float _2575 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2576 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2575;
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2575;
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2575;
        uvec4 _2590 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2591 = _2590.x;
        uint _2602 = uint((float(_2590.y) * floor(float(uint(cbSceneParam._m0[85u].y * _790) / _2591))) + floor(float(uint(cbSceneParam._m0[85u].x * _789) / _2591)));
        float _2612 = (log2(_2578 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2613 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        uint _2616 = uint(isnan(14.0) ? _2613 : (isnan(_2613) ? 14.0 : min(_2613, 14.0)));
        uvec4 _2621 = texelFetch(g_lightClusterGridBuffer, int(((_2616 << 2u) + (_2602 << 6u)) >> 2u));
        uint _2622 = _2621.x;
        uint _2623 = _2590.z;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        if (((((1u << ((_2623 >> 4u) & 15u)) + 4294967295u) & _2622) == 0u) || ((_2623 & 240u) == 0u))
        {
            _2723 = 0.0;
            _2725 = 0.0;
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
        }
        else
        {
            float _2724;
            float _2726;
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            uint _2882 = 0u;
            uint _2891;
            bool _2892;
            for (;;)
            {
                _2891 = texelFetch(g_lightClassification, int((((_2616 << 5u) + (_2602 << 9u)) + (_2882 << 2u)) >> 2u)).x;
                _2892 = _2891 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2892)
                {
                    frontier_phi_66_pred = _2876;
                    frontier_phi_66_pred_1 = _2881;
                    frontier_phi_66_pred_2 = _2880;
                    frontier_phi_66_pred_3 = _2879;
                    frontier_phi_66_pred_4 = _2878;
                    frontier_phi_66_pred_5 = _2877;
                }
                else
                {
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    uint _3027;
                    _3021 = _2876;
                    _3022 = _2877;
                    _3023 = _2878;
                    _3024 = _2879;
                    _3025 = _2880;
                    _3026 = _2881;
                    _3027 = _2891;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    for (;;)
                    {
                        uint _3031 = uint(findLSB(_3027)) + (_2882 << 5u);
                        uint _3028 = (_3027 + 4294967295u) & _3027;
                        uint _3033 = _3031 * 48u;
                        vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 3u)).x));
                        uint _3053 = (_3031 * 48u) + 4u;
                        vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3053)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 3u)).x));
                        uint _3072 = (_3031 * 48u) + 8u;
                        vec3 _3083 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3072)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 2u)).x));
                        float _3087 = _3047.x - _2576;
                        float _3088 = _3047.y - _2577;
                        float _3089 = _3047.z - _2578;
                        float _3090 = dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089));
                        float _3093 = inversesqrt(_3090);
                        float _3094 = _3093 * _3087;
                        float _3095 = _3093 * _3088;
                        float _3096 = _3093 * _3089;
                        float _3097 = dot(vec3(_808, _811, _814), vec3(_3094, _3095, _3096));
                        float _3102 = 1.0 - (_3090 * _3047.w);
                        float _4460 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3103 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                        float _3104 = sqrt(_3090) * _3066.w;
                        float _3107 = 1.39999997615814208984375 / (_3104 + 1.39999997615814208984375);
                        float _3108 = _3107 * _3107;
                        float _3111 = ((1.0 - _3108) * _3097) + _3108;
                        float _3114 = _3104 * _3104;
                        float _3118 = ((isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0))) * _3103) / ((_3114 * 0.699999988079071044921875) + 1.0);
                        float _3122 = (-0.0) - _2576;
                        float _3123 = (-0.0) - _2577;
                        float _3124 = (-0.0) - _2578;
                        float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                        float _3129 = _3128 * _3122;
                        float _3130 = _3128 * _3123;
                        float _3131 = _3128 * _3124;
                        float _3139 = exp2(log2(1.0 / ((_3114 * 3.5) + 5.0)) * 0.25);
                        float _3140 = 1.0 - _883;
                        float _3147 = sqrt(1.0 - ((1.0 - (_3140 * _3140)) * (1.0 - (_3139 * _3139))));
                        float _3148 = _3147 * _3147;
                        float _3149 = _3148 * _3148;
                        float _3150 = _3129 + _3094;
                        float _3151 = _3130 + _3095;
                        float _3152 = _3131 + _3096;
                        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                        float _3160 = dot(vec3(_808, _811, _814), vec3(_3129, _3130, _3131));
                        float _4476 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3163 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3164 = dot(vec3(_808, _811, _814), vec3(_3156 * _3150, _3156 * _3151, _3156 * _3152));
                        float _4487 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3167 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3171 = ((_3167 * _3167) * (_3149 + (-1.0))) + 1.0;
                        float _3172 = _3107 * _3148;
                        float _3173 = _3172 * _3172;
                        float _3176 = ((1.0 - _3173) * _3097) + _3173;
                        float _4498 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3177 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3178 = 1.0 - _3148;
                        float _3188 = (0.5 / (((_3177 * ((_3163 * _3178) + _3148)) + 9.9999999392252902907785028219223e-09) + (((_3177 * _3178) + _3148) * _3163))) * _3177;
                        float _4509 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3199 = (((_3149 * 3.1415927410125732421875) * (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) / ((_3171 * _3171) * ((_3114 * 2.1991131305694580078125) + 3.141590118408203125))) * _3103;
                        _2951 = (_3118 * _3066.x) + _3024;
                        _2952 = (_3118 * _3066.y) + _3025;
                        _2953 = (_3118 * _3066.z) + _3026;
                        _2948 = (_3199 * _3083.x) + _3021;
                        _2949 = (_3199 * _3083.y) + _3022;
                        _2950 = (_3199 * _3083.z) + _3023;
                        if (_3028 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3021 = _2948;
                            _3022 = _2949;
                            _3023 = _2950;
                            _3024 = _2951;
                            _3025 = _2952;
                            _3026 = _2953;
                            _3027 = _3028;
                        }
                    }
                    frontier_phi_66_pred = _2948;
                    frontier_phi_66_pred_1 = _2953;
                    frontier_phi_66_pred_2 = _2952;
                    frontier_phi_66_pred_3 = _2951;
                    frontier_phi_66_pred_4 = _2950;
                    frontier_phi_66_pred_5 = _2949;
                }
                _2724 = frontier_phi_66_pred;
                _2734 = frontier_phi_66_pred_1;
                _2732 = frontier_phi_66_pred_2;
                _2730 = frontier_phi_66_pred_3;
                _2728 = frontier_phi_66_pred_4;
                _2726 = frontier_phi_66_pred_5;
                uint _2883 = _2882 + 1u;
                if (_2883 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2876 = _2724;
                    _2877 = _2726;
                    _2878 = _2728;
                    _2879 = _2730;
                    _2880 = _2732;
                    _2881 = _2734;
                    _2882 = _2883;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2723 = _2724;
            _2725 = _2726;
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
        }
        uvec4 _2737 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2738 = _2737.z;
        uint _2740 = (_2738 >> 8u) & 15u;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        if (((4294967295u << _2740) & _2622) == 0u)
        {
            _2844 = _2723;
            _2846 = _2725;
            _2848 = _2727;
            _2850 = _2729;
            _2852 = _2731;
            _2854 = _2733;
        }
        else
        {
            float _2869 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
            float _2870 = _2869 * _2576;
            float _2871 = _2869 * _2577;
            float _2872 = _2869 * _2578;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2740 < ((_2738 >> 12u) & 15u))
            {
                float _2845;
                float _2847;
                float _2849;
                float _2851;
                float _2853;
                float _2855;
                float _3004 = _2723;
                float _3005 = _2725;
                float _3006 = _2727;
                float _3007 = _2729;
                float _3008 = _2731;
                float _3009 = _2733;
                uint _3010 = _2740;
                uint _3019;
                bool _3020;
                for (;;)
                {
                    _3019 = texelFetch(g_lightClassification, int((((_2616 << 5u) + (_2602 << 9u)) + (_3010 << 2u)) >> 2u)).x;
                    _3020 = _3019 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3020)
                    {
                        frontier_phi_77_pred = _3009;
                        frontier_phi_77_pred_1 = _3008;
                        frontier_phi_77_pred_2 = _3007;
                        frontier_phi_77_pred_3 = _3006;
                        frontier_phi_77_pred_4 = _3005;
                        frontier_phi_77_pred_5 = _3004;
                    }
                    else
                    {
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3226 = _3004;
                        float _3227 = _3005;
                        float _3228 = _3006;
                        float _3229 = _3007;
                        float _3230 = _3008;
                        float _3231 = _3009;
                        uint _3232 = _3019;
                        uint _3233;
                        vec4 _3258;
                        float _3259;
                        vec4 _3274;
                        vec3 _3286;
                        vec4 _3301;
                        vec4 _3316;
                        float _3363;
                        bool _3364;
                        for (;;)
                        {
                            uint _3243 = ((_3010 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3232));
                            _3233 = (_3232 + 4294967295u) & _3232;
                            uint _3245 = _3243 * 40u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            _3259 = _3258.w;
                            uint _3261 = (_3243 * 40u) + 4u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3276 = (_3243 * 40u) + 8u;
                            _3286 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x));
                            uint _3288 = (_3243 * 40u) + 16u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3243 * 40u) + 20u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3319 = (_3243 * 40u) + 24u;
                            vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3338 = (_3243 * 40u) + 28u;
                            vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            _3363 = fma(_2578, _3351.z, fma(_2577, _3351.y, _3351.x * _2576)) + _3351.w;
                            _3364 = !((fma(_2578, _3332.z, fma(_2577, _3332.y, _3332.x * _2576)) + _3332.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3364)
                            {
                                float _3391 = _3258.x - _2576;
                                float _3392 = _3258.y - _2577;
                                float _3393 = _3258.z - _2578;
                                float _3394 = dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393));
                                float _3397 = inversesqrt(_3394);
                                float _3398 = _3397 * _3391;
                                float _3399 = _3397 * _3392;
                                float _3400 = _3397 * _3393;
                                float _3404 = 1.0 - (_3394 / (_3259 * _3259));
                                float _4520 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3405 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3409 = sqrt(_3394) * _3274.w;
                                float _3411 = 1.39999997615814208984375 / (_3409 + 1.39999997615814208984375);
                                float _3412 = _3411 * _3411;
                                float _3415 = ((1.0 - _3412) * dot(vec3(_3398, _3399, _3400), vec3(_808, _811, _814))) + _3412;
                                float _3418 = _3409 * _3409;
                                float _3422 = (fma(_2578, _3301.z, fma(_2577, _3301.y, _3301.x * _2576)) + _3301.w) / _3363;
                                float _3423 = (fma(_2578, _3316.z, fma(_2577, _3316.y, _3316.x * _2576)) + _3316.w) / _3363;
                                float _3427 = 1.0 - dot(vec2(_3422, _3423), vec2(_3422, _3423));
                                float _4536 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3429 = _3428 * (((isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0))) * _3405) / ((_3418 * 0.699999988079071044921875) + 1.0));
                                float _3441 = exp2(log2(1.0 / ((_3418 * 3.5) + 5.0)) * 0.25);
                                float _3442 = 1.0 - _883;
                                float _3449 = sqrt(1.0 - ((1.0 - (_3442 * _3442)) * (1.0 - (_3441 * _3441))));
                                float _3450 = _3449 * _3449;
                                float _3451 = _3450 * _3450;
                                float _3452 = _3398 - _2870;
                                float _3453 = _3399 - _2871;
                                float _3454 = _3400 - _2872;
                                float _3458 = inversesqrt(dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454)));
                                float _3462 = dot(vec3(_808, _811, _814), vec3((-0.0) - _2870, (-0.0) - _2871, (-0.0) - _2872));
                                float _4547 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3465 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3466 = dot(vec3(_808, _811, _814), vec3(_3458 * _3452, _3458 * _3453, _3458 * _3454));
                                float _4558 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3469 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3473 = ((_3469 * _3469) * (_3451 + (-1.0))) + 1.0;
                                float _3474 = _3411 * _3450;
                                float _3475 = _3474 * _3474;
                                float _3481 = ((1.0 - _3475) * dot(vec3(_808, _811, _814), vec3(_3398, _3399, _3400))) + _3475;
                                float _4569 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3482 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3483 = 1.0 - _3450;
                                float _3493 = (0.5 / (((_3482 * ((_3465 * _3483) + _3450)) + 9.9999999392252902907785028219223e-09) + (((_3482 * _3483) + _3450) * _3465))) * _3482;
                                float _4580 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3503 = (_3428 * _3405) * (((_3451 * 3.1415927410125732421875) * (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) / ((_3473 * _3473) * ((_3418 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3429 * _3274.y;
                                frontier_phi_83_pred_1 = _3429 * _3274.x;
                                frontier_phi_83_pred_2 = _3503 * _3286.z;
                                frontier_phi_83_pred_3 = _3503 * _3286.y;
                                frontier_phi_83_pred_4 = _3503 * _3286.x;
                                frontier_phi_83_pred_5 = _3429 * _3274.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3511 = frontier_phi_83_pred;
                            _3510 = frontier_phi_83_pred_1;
                            _3509 = frontier_phi_83_pred_2;
                            _3508 = frontier_phi_83_pred_3;
                            _3507 = frontier_phi_83_pred_4;
                            _3512 = frontier_phi_83_pred_5;
                            _3216 = _3510 + _3229;
                            _3217 = _3511 + _3230;
                            _3218 = _3512 + _3231;
                            _3213 = _3507 + _3226;
                            _3214 = _3508 + _3227;
                            _3215 = _3509 + _3228;
                            if (_3233 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3233;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3218;
                        frontier_phi_77_pred_1 = _3217;
                        frontier_phi_77_pred_2 = _3216;
                        frontier_phi_77_pred_3 = _3215;
                        frontier_phi_77_pred_4 = _3214;
                        frontier_phi_77_pred_5 = _3213;
                    }
                    _2855 = frontier_phi_77_pred;
                    _2853 = frontier_phi_77_pred_1;
                    _2851 = frontier_phi_77_pred_2;
                    _2849 = frontier_phi_77_pred_3;
                    _2847 = frontier_phi_77_pred_4;
                    _2845 = frontier_phi_77_pred_5;
                    uint _3011 = _3010 + 1u;
                    if (_3011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3004 = _2845;
                        _3005 = _2847;
                        _3006 = _2849;
                        _3007 = _2851;
                        _3008 = _2853;
                        _3009 = _2855;
                        _3010 = _3011;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2849;
                frontier_phi_58_59_ladder_1 = _2855;
                frontier_phi_58_59_ladder_2 = _2853;
                frontier_phi_58_59_ladder_3 = _2851;
                frontier_phi_58_59_ladder_4 = _2847;
                frontier_phi_58_59_ladder_5 = _2845;
            }
            else
            {
                frontier_phi_58_59_ladder = _2727;
                frontier_phi_58_59_ladder_1 = _2733;
                frontier_phi_58_59_ladder_2 = _2731;
                frontier_phi_58_59_ladder_3 = _2729;
                frontier_phi_58_59_ladder_4 = _2725;
                frontier_phi_58_59_ladder_5 = _2723;
            }
            _2844 = frontier_phi_58_59_ladder_5;
            _2846 = frontier_phi_58_59_ladder_4;
            _2848 = frontier_phi_58_59_ladder;
            _2850 = frontier_phi_58_59_ladder_3;
            _2852 = frontier_phi_58_59_ladder_2;
            _2854 = frontier_phi_58_59_ladder_1;
        }
        float _2859 = isnan(1.0) ? _867 : (isnan(_867) ? 1.0 : min(_867, 1.0));
        _2635 = (_2859 * _2850) + _2071;
        _2637 = (_2859 * _2852) + _2073;
        _2639 = (_2859 * _2854) + _2075;
        _2641 = ((_2844 * _852) * _2859) + _2416;
        _2643 = ((_2846 * _854) * _2859) + _2418;
        _2645 = ((_2848 * _855) * _2859) + _2420;
    }
    else
    {
        _2635 = _2071;
        _2637 = _2073;
        _2639 = _2075;
        _2641 = _2416;
        _2643 = _2418;
        _2645 = _2420;
    }
    float _4596 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4607 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4618 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _2662 = ((isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2635 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _867))) + ((_2641 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1709)) * cbPerFrame._m0[3u].x);
    float _2663 = ((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2637 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _867))) + ((_2643 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1709)) * cbPerFrame._m0[3u].x);
    float _2664 = ((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2639 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _867))) + ((_2645 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1709)) * cbPerFrame._m0[3u].x);
    uint _2665 = _827 + 6u;
    float _2673 = _789 / cbSceneParam._m0[86u].x;
    float _2674 = _790 / cbSceneParam._m0[86u].y;
    vec4 _2688 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2673, _2674, (log2((isnan(cbSceneParam._m0[77u].w) ? _712 : (isnan(_712) ? cbSceneParam._m0[77u].w : min(_712, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2690 = _2688.x;
    float _2691 = _2688.y;
    float _2692 = _2688.z;
    float _2693 = _2688.w;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    if (_712 > cbSceneParam._m0[78u].w)
    {
        float _2748 = isnan(_712) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _712 : min(cbSceneParam._m0[80u].w, _712));
        float _2749 = _2748 / _712;
        float _2760 = _2749 * _762;
        float _2761 = _763 * _2749;
        float _2762 = (-0.0) - _2761;
        float _2764 = _2749 * _764;
        float _2766 = (cbSceneParam._m0[77u].w * _2762) / _2748;
        float _2767 = _2766 + cbSceneParam._m0[79u].w;
        float _2768 = cbSceneParam._m0[79u].w - _2761;
        float _2774 = sqrt(((_2760 * _2760) + (_2761 * _2761)) + (_2764 * _2764));
        float _2777 = (1.0 - (cbSceneParam._m0[77u].w / _2748)) * _2774;
        float _2782 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2784 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2961;
        if (abs((_2762 - _2766) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2961 = ((((_2767 > 0.0) ? exp2(_2782 * _2767) : (2.0 - exp2(_2784 * _2767))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2777;
        }
        else
        {
            float _2905 = 1.0 / cbSceneParam._m0[80u].x;
            float _2906 = isnan(_2768) ? _2767 : (isnan(_2767) ? _2768 : max(_2767, _2768));
            float _2907 = isnan(_2768) ? _2767 : (isnan(_2767) ? _2768 : min(_2767, _2768));
            float _2916 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : min(_2906, 0.0));
            float _2917 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : min(_2907, 0.0));
            _2961 = ((abs(_2774 / _2762) * cbSceneParam._m0[80u].y) * ((((_2916 - _2917) * 2.0) - ((exp2(_2782 * (isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0)))) - exp2(_2782 * (isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0))))) * _2905)) - ((exp2(_2784 * _2916) - exp2(_2784 * _2917)) * _2905))) + (_2777 * cbSceneParam._m0[80u].z);
        }
        vec4 _2963 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2673, _2674, 1.0), 0.0);
        float _2972 = exp2((_2961 * (-1.44269502162933349609375)) * (1.0 - _2963.w));
        float _2973 = log2(_2972);
        float _2989 = log2(_2693);
        _2786 = (exp2(_2989 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].x)) * _2963.x) / cbSceneParam._m0[78u].x)) + _2690;
        _2788 = (exp2(_2989 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].y)) * _2963.y) / cbSceneParam._m0[78u].y)) + _2691;
        _2790 = (exp2(_2989 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].z)) * _2963.z) / cbSceneParam._m0[78u].z)) + _2692;
        _2792 = _2972 * _2693;
    }
    else
    {
        _2786 = _2690;
        _2788 = _2691;
        _2790 = _2692;
        _2792 = _2693;
    }
    bool _2999;
    vec4 _2802;
    vec4 _2824;
    float _2826;
    float _2830;
    float _2831;
    float _2832;
    float _2833;
    bool _2843;
    for (;;)
    {
        _2802 = cbMatDynParam._m0[0u];
        float _2804 = roundEven(_2802.y);
        bool _2805 = _2804 == 3.0;
        float _2806 = log2(_2792);
        float _2813 = exp2(_2806 * cbSceneParam._m0[78u].x) * _2662;
        float _2814 = exp2(_2806 * cbSceneParam._m0[78u].y) * _2663;
        float _2815 = exp2(_2806 * cbSceneParam._m0[78u].z) * _2664;
        float _2822 = _778 + (-0.5);
        _2824 = cbMtdParam._m0[1u];
        _2826 = _2824.y * _2822;
        float _2829 = (_2804 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2830 = _2829 * (_2805 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2786)));
        _2831 = _2829 * (_2805 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2788)));
        _2832 = _2829 * (_2805 ? _2815 : (_2815 + (cbSceneParam._m0[72u].w * _2790)));
        _2833 = _2822 * 0.999000012874603271484375;
        _2843 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2843)
        {
            if ((cbInstanceData._m0[_827 + 7u].x + _2833) < 0.5)
            {
                _2999 = true;
                break;
            }
        }
        uint _2940 = _828 + uint(_2802.w);
        if ((cbInstanceData._m0[_2940].w < 1.0) && ((cbInstanceData._m0[_2940].w + _2833) < 0.5))
        {
            _2999 = true;
            break;
        }
        if ((_2826 + 1.0) < _2824.x)
        {
            _2999 = true;
            break;
        }
        _2999 = false;
        break;
    }
    float _3204;
    if (_2999)
    {
        discard_state = true;
        _3204 = 0.0;
    }
    else
    {
        _3204 = cbInstanceData._m0[_2665].w;
    }
    SV_Target.x = _2830;
    SV_Target.y = _2831;
    SV_Target.z = _2832;
    SV_Target.w = _3204;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2665].w;
    discard_exit();
}


