#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1349;
float _4015;
float _4016;
float _4017;
float _4018;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _266.x * cbMtdParam._m0[10u].x;
    float _273 = _266.y * cbMtdParam._m0[10u].y;
    float _274 = _266.z * cbMtdParam._m0[10u].z;
    vec4 _292 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _342 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _352 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _342)) + 1.0;
    float _4027 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _353 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _360 = (_353 * ((_292.x * cbMtdParam._m0[11u].x) - _272)) + _272;
    float _361 = (_353 * ((_292.y * cbMtdParam._m0[11u].y) - _273)) + _273;
    float _362 = (_353 * ((_292.z * cbMtdParam._m0[11u].z) - _274)) + _274;
    vec4 _380 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _411 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _342)) + 1.0;
    float _4038 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _419 = (_412 * ((_380.x * cbMtdParam._m0[12u].x) - _360)) + _360;
    float _420 = (_412 * ((_380.y * cbMtdParam._m0[12u].y) - _361)) + _361;
    float _421 = (_412 * ((_380.z * cbMtdParam._m0[12u].z) - _362)) + _362;
    vec4 _439 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _464 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _342)) + 1.0;
    float _4049 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _472 = (_465 * ((_439.x * cbMtdParam._m0[13u].x) - _419)) + _419;
    float _473 = (_465 * ((_439.y * cbMtdParam._m0[13u].y) - _420)) + _420;
    float _474 = (_465 * ((_439.z * cbMtdParam._m0[13u].z) - _421)) + _421;
    vec4 _494 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _523 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _4060 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _524 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _531 = (_524 * ((_494.x * cbMtdParam._m0[14u].x) - _472)) + _472;
    float _532 = (_524 * ((_494.y * cbMtdParam._m0[14u].y) - _473)) + _473;
    float _533 = (_524 * ((_494.z * cbMtdParam._m0[14u].z) - _474)) + _474;
    vec4 _546 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _548 = _546.x;
    float _566 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _548) * _353) + _548;
    float _584 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _566) * _412) + _566;
    float _601 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _584) * _465) + _584;
    float _603 = _601 - (_601 * TEXCOORD_5.x);
    vec4 _619 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _641 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _643 = _641.x;
    float _644 = _641.y;
    float _647 = cbMtdParam._m0[18u].y * _641.z;
    vec4 _659 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _668 = (((cbMtdParam._m0[18u].x * _659.z) - _647) * _353) + _647;
    vec4 _681 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _692 = (((cbMtdParam._m0[17u].w * _681.z) - _668) * _412) + _668;
    vec4 _705 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _714 = (((cbMtdParam._m0[17u].z * _705.z) - _692) * _465) + _692;
    float _719 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_619.z * cbMtdParam._m0[18u].z) - _714)) + _714;
    float _724 = ((_659.x - _643) * _353) + _643;
    float _725 = ((_659.y - _644) * _353) + _644;
    float _730 = ((_681.x - _724) * _412) + _724;
    float _731 = ((_681.y - _725) * _412) + _725;
    float _740 = ((((_705.x - _730) * _465) + _730) * 2.0) + (-1.0);
    float _741 = ((((_705.y - _731) * _465) + _731) * 2.0) + (-1.0);
    float _742 = dot(vec2(_740, _741), vec2(_740, _741));
    float _4071 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _747 = sqrt(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))));
    float _753 = ((((_619.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _740;
    float _754 = ((((_619.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _741;
    float _757 = fma(_747, _236 * NORMAL.x, fma(_754, _243 * TANGENT.x, (_229 * _221) * _753));
    float _760 = fma(_747, _236 * NORMAL.y, fma(_754, _243 * TANGENT.y, (_229 * _222) * _753));
    float _763 = fma(_747, _236 * NORMAL.z, fma(_754, _243 * TANGENT.z, (_229 * _223) * _753));
    float _767 = inversesqrt(dot(vec3(_757, _760, _763), vec3(_757, _760, _763)));
    float _768 = _767 * _757;
    float _769 = _767 * _760;
    float _770 = _767 * _763;
    float _4082 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _771 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _4104 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _4115 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _4126 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _775 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _791 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _841 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _831);
    float _842 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _831);
    float _843 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _831);
    float _847 = inversesqrt(dot(vec3(_841, _842, _843), vec3(_841, _842, _843)));
    float _848 = _841 * _847;
    float _849 = _842 * _847;
    float _850 = _843 * _847;
    vec4 _855 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _857 = _855.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1029 = sqrt(((_841 * _841) + (_842 * _842)) + (_843 * _843));
        float _1035 = (cbMatDynParam._m0[5u].x * _1029) + cbMatDynParam._m0[5u].y;
        float _4137 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1040 = (cbMatDynParam._m0[5u].z * _1029) + cbMatDynParam._m0[5u].w;
        float _4148 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) - _1036)) + _1036) < ((_857 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _868 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _869 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _887 = fma(_770, cbSceneParam._m0[5u].z, fma(_769, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _768));
    float _890 = fma(_770, cbSceneParam._m0[6u].z, fma(_769, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _768));
    float _893 = fma(_770, cbSceneParam._m0[7u].z, fma(_769, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _768));
    uint _906 = uint(roundEven(NORMAL.w)) * 13u;
    uint _907 = _906 + 9u;
    uint _908 = _907 + uint(cbMatDynParam._m0[0u].w);
    float _914 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * cbInstanceData._m0[_908].x;
    float _915 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * cbInstanceData._m0[_908].y;
    float _916 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * cbInstanceData._m0[_908].z;
    float _4159 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _4170 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _920 = 1.0 - _775;
    float _921 = _917 * _920;
    float _922 = _918 * _920;
    float _923 = _919 * _920;
    float _928 = (_917 + (-0.039999999105930328369140625)) * _775;
    float _929 = (_918 + (-0.039999999105930328369140625)) * _775;
    float _930 = (_919 + (-0.039999999105930328369140625)) * _775;
    float _931 = _928 + 0.039999999105930328369140625;
    float _933 = _929 + 0.039999999105930328369140625;
    float _934 = _930 + 0.039999999105930328369140625;
    vec4 _943 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _868, cbSceneParam._m0[86u].y * _869));
    float _946 = _943.x * TEXCOORD_5.w;
    float _947 = dot(vec3(_768, _769, _770), vec3(_848, _849, _850));
    float _950 = _947 * 2.0;
    float _954 = (_950 * _768) - _848;
    float _955 = (_950 * _769) - _849;
    float _956 = (_950 * _770) - _850;
    float _960 = abs(dot(vec3(_848, _849, _850), vec3(_768, _769, _770)));
    float _4192 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _962 = sqrt(_771);
    float _975 = exp2((_962 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_962 * 3.0));
    float _981 = (1.0 - _975) * ((_962 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _982 = _975 * _962;
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1348;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1073 = fma(_1018, cbModelParam._m0[26u].z, fma(_1014, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1010));
        float _1077 = fma(_1018, cbModelParam._m0[27u].z, fma(_1014, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1010));
        float _1081 = fma(_1018, cbModelParam._m0[28u].z, fma(_1014, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1010));
        float _1106 = _1010 + _768;
        float _1107 = _1014 + _769;
        float _1108 = _1018 + _770;
        float _1118 = fma(_1108, cbModelParam._m0[26u].z, fma(_1107, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1106)) - _1073;
        float _1119 = fma(_1108, cbModelParam._m0[27u].z, fma(_1107, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1106)) - _1077;
        float _1120 = fma(_1108, cbModelParam._m0[28u].z, fma(_1107, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1106)) - _1081;
        float _1124 = inversesqrt(dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120)));
        float _1137 = ((_1124 * _1118) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1073 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1124 * _1119) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1077 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1124 * _1120) / cbModelParam._m0[34u].z) + ((((((_1081 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        float _1176 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1142.x + (-0.5));
        float _1178 = _1176 * (_1142.y + (-0.5));
        float _1179 = _1176 * (_1142.z + (-0.5));
        float _1186 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1149.x + (-0.5));
        float _1188 = _1186 * (_1149.y + (-0.5));
        float _1189 = _1186 * (_1149.z + (-0.5));
        float _1196 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1156.x + (-0.5));
        float _1198 = _1196 * (_1156.y + (-0.5));
        float _1199 = _1196 * (_1156.z + (-0.5));
        float _1206 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1163.x + (-0.5));
        float _1208 = _1206 * (_1163.y + (-0.5));
        float _1209 = _1206 * (_1163.z + (-0.5));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = _1177 * 0.5;
        float _1214 = _1187 * 0.5;
        float _1215 = _1197 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1230 = (dot(vec3(_768, _769, _770), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1240 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _4240 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1242 + 1.0))) + _1247) * _1210;
        float _1257 = _1178 * 0.5;
        float _1258 = _1188 * 0.5;
        float _1259 = _1198 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_768, _769, _770), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4273 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1284 + 1.0))) + _1289) * _1211;
        float _1299 = _1179 * 0.5;
        float _1300 = _1189 * 0.5;
        float _1301 = _1199 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_768, _769, _770), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4306 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1326 + 1.0))) + _1331) * _1212;
        _1348 = _1179;
        _1350 = _1178;
        _1351 = _1177;
        _1352 = _1189;
        _1353 = _1188;
        _1354 = _1187;
        _1355 = _1199;
        _1356 = _1198;
        _1357 = _1197;
        _1358 = _1212;
        _1359 = _1211;
        _1360 = _1210;
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
    }
    else
    {
        _1348 = _1349;
        _1350 = _1349;
        _1351 = _1349;
        _1352 = _1349;
        _1353 = _1349;
        _1354 = _1349;
        _1355 = _1349;
        _1356 = _1349;
        _1357 = _1349;
        _1358 = _1349;
        _1359 = _1349;
        _1360 = _1349;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1392 = fma(_1018, cbModelParam._m0[30u].z, fma(_1014, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1010));
        float _1396 = fma(_1018, cbModelParam._m0[31u].z, fma(_1014, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1010));
        float _1400 = fma(_1018, cbModelParam._m0[32u].z, fma(_1014, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1010));
        float _1423 = _1010 + _768;
        float _1424 = _1014 + _769;
        float _1425 = _1018 + _770;
        float _1435 = fma(_1425, cbModelParam._m0[30u].z, fma(_1424, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1423)) - _1392;
        float _1436 = fma(_1425, cbModelParam._m0[31u].z, fma(_1424, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1423)) - _1396;
        float _1437 = fma(_1425, cbModelParam._m0[32u].z, fma(_1424, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1423)) - _1400;
        float _1441 = inversesqrt(dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437)));
        float _1454 = ((_1441 * _1435) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1392 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1455 = ((_1441 * _1436) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1396 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1441 * _1437) / cbModelParam._m0[35u].z) + ((((((_1400 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        float _1491 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1458.x + (-0.5));
        float _1493 = _1491 * (_1458.y + (-0.5));
        float _1494 = _1491 * (_1458.z + (-0.5));
        float _1501 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1465.x + (-0.5));
        float _1503 = _1501 * (_1465.y + (-0.5));
        float _1504 = _1501 * (_1465.z + (-0.5));
        float _1511 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1472.x + (-0.5));
        float _1513 = _1511 * (_1472.y + (-0.5));
        float _1514 = _1511 * (_1472.z + (-0.5));
        float _1521 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1479.x + (-0.5));
        float _1523 = _1521 * (_1479.y + (-0.5));
        float _1524 = _1521 * (_1479.z + (-0.5));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = _1492 * 0.5;
        float _1529 = _1502 * 0.5;
        float _1530 = _1512 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_768, _769, _770), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4369 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1555 + 1.0))) + _1560) * _1525;
        float _1570 = _1493 * 0.5;
        float _1571 = _1503 * 0.5;
        float _1572 = _1513 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_768, _769, _770), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4380 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4391 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4402 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_1597 + 1.0))) + _1602) * _1526;
        float _1612 = _1494 * 0.5;
        float _1613 = _1504 * 0.5;
        float _1614 = _1514 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_768, _769, _770), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4413 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4424 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4435 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_1639 + 1.0))) + _1644) * _1527;
        _1661 = _1494;
        _1662 = _1493;
        _1663 = _1492;
        _1664 = _1504;
        _1665 = _1503;
        _1666 = _1502;
        _1667 = _1514;
        _1668 = _1513;
        _1669 = _1512;
        _1670 = _1527;
        _1671 = _1526;
        _1672 = _1525;
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
    }
    else
    {
        _1661 = _1349;
        _1662 = _1349;
        _1663 = _1349;
        _1664 = _1349;
        _1665 = _1349;
        _1666 = _1349;
        _1667 = _1349;
        _1668 = _1349;
        _1669 = _1349;
        _1670 = _1349;
        _1671 = _1349;
        _1672 = _1349;
        _1673 = 0.0;
        _1674 = 0.0;
        _1675 = 0.0;
    }
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1361)) + _1361;
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1362)) + _1362;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1363)) + _1363;
    float _1708 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1686, cbSceneParam._m0[89u].y, _1685 * cbSceneParam._m0[89u].x));
    float _1711 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1686, cbSceneParam._m0[90u].y, _1685 * cbSceneParam._m0[90u].x));
    float _1714 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1686, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1685));
    float _1729 = _954 * 0.5;
    float _1730 = _955 * 0.5;
    float _1731 = _956 * 0.5;
    float _1732 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1735 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1738 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1772;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1745 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1348, _1352, _1355, _1358));
        float _1749 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1350, _1353, _1356, _1359));
        float _1753 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1351, _1354, _1357, _1360));
        float _1760 = dot(vec4(cbModelParam._m0[39u]), vec4(_1729, _1730, _1731, 1.0));
        _1772 = dot(vec3(isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1760) ? 0.0 : (isnan(0.0) ? _1760 : max(0.0, _1760))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1772 = 1.0;
    }
    float _1783;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1774 = dot(vec4(cbModelParam._m0[40u]), vec4(_1729, _1730, _1731, 1.0));
        _1783 = dot(vec3(isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1783 = 1.0;
    }
    float _1787 = (_1783 * cbModelParam._m0[1u].x) + (_1772 * (1.0 - cbModelParam._m0[1u].x));
    float _1797 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _771);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1797 : min(cbModelParam._m0[25u].z, _1797));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1846 = fma(_1018, cbModelParam._m0[13u].z, fma(_1014, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1010)) + cbModelParam._m0[13u].w;
        float _1850 = fma(_1018, cbModelParam._m0[14u].z, fma(_1014, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1010)) + cbModelParam._m0[14u].w;
        float _1854 = fma(_1018, cbModelParam._m0[15u].z, fma(_1014, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1010)) + cbModelParam._m0[15u].w;
        float _1857 = fma(_956, cbModelParam._m0[13u].z, fma(_955, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _954));
        float _1860 = fma(_956, cbModelParam._m0[14u].z, fma(_955, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _954));
        float _1863 = fma(_956, cbModelParam._m0[15u].z, fma(_955, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _954));
        float _1891;
        if (_1857 > 0.0)
        {
            _1891 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1891 = frontier_phi_17_15_ladder;
        }
        float _2062;
        if (_1860 > 0.0)
        {
            _2062 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2062 = frontier_phi_26_22_ladder;
        }
        float _2358;
        if (_1863 > 0.0)
        {
            _2358 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2358 = frontier_phi_38_33_ladder;
        }
        float _2360 = isnan(_2062) ? _1891 : (isnan(_1891) ? _2062 : min(_1891, _2062));
        float _2361 = isnan(_2358) ? _2360 : (isnan(_2360) ? _2358 : min(_2360, _2358));
        float _2365 = (_2361 * _1857) + _1846;
        float _2366 = (_2361 * _1860) + _1850;
        float _2367 = (_2361 * _1863) + _1854;
        float _2368 = _2361 * 9.9999997473787516355514526367188e-05;
        float _2370 = (-1.0) - _2368;
        float _2372 = _2368 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2367 > _2372) || ((_2367 < _2370) || ((_2366 > _2372) || ((_2366 < _2370) || ((_2365 < _2370) || (_2365 > _2372))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2367, cbModelParam._m0[9u].z, fma(_2366, cbModelParam._m0[9u].y, _2365 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2367, cbModelParam._m0[10u].z, fma(_2366, cbModelParam._m0[10u].y, _2365 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2367, cbModelParam._m0[11u].z, fma(_2366, cbModelParam._m0[11u].y, _2365 * cbModelParam._m0[11u].x))), _1798);
            frontier_phi_16_38_ladder = _2512.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2512.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2512.x * cbModelParam._m0[1u].y;
        }
        _1879 = frontier_phi_16_38_ladder_2;
        _1881 = frontier_phi_16_38_ladder_1;
        _1883 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_954, _955, _956), _1798);
        _1879 = _1867.x * cbModelParam._m0[1u].y;
        _1881 = _1867.y * cbModelParam._m0[1u].y;
        _1883 = _1867.z * cbModelParam._m0[1u].y;
    }
    float _1887 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _771);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1887 : min(cbModelParam._m0[25u].w, _1887));
    float _1977;
    float _1979;
    float _1981;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1941 = fma(_1018, cbModelParam._m0[21u].z, fma(_1014, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1010)) + cbModelParam._m0[21u].w;
        float _1945 = fma(_1018, cbModelParam._m0[22u].z, fma(_1014, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1010)) + cbModelParam._m0[22u].w;
        float _1949 = fma(_1018, cbModelParam._m0[23u].z, fma(_1014, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1010)) + cbModelParam._m0[23u].w;
        float _1952 = fma(_956, cbModelParam._m0[21u].z, fma(_955, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _954));
        float _1955 = fma(_956, cbModelParam._m0[22u].z, fma(_955, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _954));
        float _1958 = fma(_956, cbModelParam._m0[23u].z, fma(_955, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _954));
        float _2067;
        if (_1952 > 0.0)
        {
            _2067 = abs((1.0 - _1941) / _1952);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1941 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2067 = frontier_phi_28_24_ladder;
        }
        float _2385;
        if (_1955 > 0.0)
        {
            _2385 = abs((1.0 - _1945) / _1955);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1945 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2385 = frontier_phi_40_35_ladder;
        }
        float _2723;
        if (_1958 > 0.0)
        {
            _2723 = abs((1.0 - _1949) / _1958);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1949 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2723 = frontier_phi_50_47_ladder;
        }
        float _2725 = isnan(_2385) ? _2067 : (isnan(_2067) ? _2385 : min(_2067, _2385));
        float _2726 = isnan(_2723) ? _2725 : (isnan(_2725) ? _2723 : min(_2725, _2723));
        float _2730 = (_2726 * _1952) + _1941;
        float _2731 = (_2726 * _1955) + _1945;
        float _2732 = (_2726 * _1958) + _1949;
        float _2733 = _2726 * 9.9999997473787516355514526367188e-05;
        float _2734 = (-1.0) - _2733;
        float _2736 = _2733 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2732 > _2736) || ((_2732 < _2734) || ((_2731 > _2736) || ((_2731 < _2734) || ((_2730 < _2734) || (_2730 > _2736))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2732, cbModelParam._m0[17u].z, fma(_2731, cbModelParam._m0[17u].y, _2730 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2732, cbModelParam._m0[18u].z, fma(_2731, cbModelParam._m0[18u].y, _2730 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2732, cbModelParam._m0[19u].z, fma(_2731, cbModelParam._m0[19u].y, _2730 * cbModelParam._m0[19u].x))), _1888);
            frontier_phi_25_50_ladder = _2854.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2854.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2854.x * cbModelParam._m0[1u].z;
        }
        _1977 = frontier_phi_25_50_ladder_2;
        _1979 = frontier_phi_25_50_ladder_1;
        _1981 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1961 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_954, _955, _956), _1888);
        _1977 = _1961.x * cbModelParam._m0[1u].z;
        _1979 = _1961.y * cbModelParam._m0[1u].z;
        _1981 = _1961.z * cbModelParam._m0[1u].z;
    }
    float _1994 = (((_981 * _931) + _982) * _946) * ((cbModelParam._m0[1u].w * (_1977 - _1879)) + _1879);
    float _1996 = (((_981 * _933) + _982) * _946) * ((cbModelParam._m0[1u].w * (_1979 - _1881)) + _1881);
    float _1998 = (((_981 * _934) + _982) * _946) * ((cbModelParam._m0[1u].w * (_1981 - _1883)) + _1883);
    float _2001 = fma(_1998, cbSceneParam._m0[89u].z, fma(_1996, cbSceneParam._m0[89u].y, _1994 * cbSceneParam._m0[89u].x));
    float _2004 = fma(_1998, cbSceneParam._m0[90u].z, fma(_1996, cbSceneParam._m0[90u].y, _1994 * cbSceneParam._m0[90u].x));
    float _2007 = fma(_1998, cbSceneParam._m0[91u].z, fma(_1996, cbSceneParam._m0[91u].y, _1994 * cbSceneParam._m0[91u].x));
    float _2041 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2045 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2054 = _2041 / _2053;
    float _2055 = _2045 / _2053;
    float _2056 = _2049 / _2053;
    float _2203;
    float _2204;
    float _2205;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2083 = ((uint(_2056 > cbSceneParam._m0[59u].y) + uint(_2056 > cbSceneParam._m0[59u].x)) + uint(_2056 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2084 = _2083 + 43u;
        uint _2092 = _2083 + 44u;
        uint _2100 = _2083 + 45u;
        uint _2108 = _2083 + 46u;
        float _2119 = fma(_2053, cbSceneParam._m0[_2084].w, fma(_2049, cbSceneParam._m0[_2084].z, fma(_2045, cbSceneParam._m0[_2084].y, _2041 * cbSceneParam._m0[_2084].x)));
        float _2123 = fma(_2053, cbSceneParam._m0[_2092].w, fma(_2049, cbSceneParam._m0[_2092].z, fma(_2045, cbSceneParam._m0[_2092].y, _2041 * cbSceneParam._m0[_2092].x)));
        float _2131 = fma(_2053, cbSceneParam._m0[_2108].w, fma(_2049, cbSceneParam._m0[_2108].z, fma(_2045, cbSceneParam._m0[_2108].y, _2041 * cbSceneParam._m0[_2108].x)));
        float _2136 = cbSceneParam._m0[33u].z * _2131;
        float _2138 = cbSceneParam._m0[33u].w * _2131;
        float _2141 = fma(_2053, cbSceneParam._m0[_2100].w, fma(_2049, cbSceneParam._m0[_2100].z, fma(_2045, cbSceneParam._m0[_2100].y, _2041 * cbSceneParam._m0[_2100].x))) / _2131;
        float _2189 = (cbSceneParam._m0[33u].x - sqrt(((_2055 * _2055) + (_2054 * _2054)) + (_2056 * _2056))) * cbSceneParam._m0[33u].y;
        float _4561 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2196 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2136 + _2119) / _2131, (_2138 + _2123) / _2131), _2141), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 + _2119) / _2131, (_2123 - _2136) / _2131), _2141), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2119 - _2136) / _2131, (_2123 - _2138) / _2131), _2141), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2119 - _2138) / _2131, (_2136 + _2123) / _2131), _2141), 0.0)).x), vec4(0.25)));
        _2203 = 1.0 - (_2196 * cbSceneParam._m0[34u].x);
        _2204 = 1.0 - (_2196 * cbSceneParam._m0[34u].y);
        _2205 = 1.0 - (_2196 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2203 = 1.0;
        _2204 = 1.0;
        _2205 = 1.0;
    }
    float _2269;
    float _2271;
    float _2273;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2257 = fma(_2053, cbSceneParam._m0[63u].w, fma(_2049, cbSceneParam._m0[63u].z, fma(_2045, cbSceneParam._m0[63u].y, _2041 * cbSceneParam._m0[63u].x)));
        float _2258 = fma(_2053, cbSceneParam._m0[60u].w, fma(_2049, cbSceneParam._m0[60u].z, fma(_2045, cbSceneParam._m0[60u].y, _2041 * cbSceneParam._m0[60u].x))) / _2257;
        float _2259 = fma(_2053, cbSceneParam._m0[61u].w, fma(_2049, cbSceneParam._m0[61u].z, fma(_2045, cbSceneParam._m0[61u].y, _2041 * cbSceneParam._m0[61u].x))) / _2257;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2258 >= cbSceneParam._m0[64u].x) && (_2259 >= cbSceneParam._m0[64u].y)) && (_2258 <= cbSceneParam._m0[64u].z)) && (_2259 <= cbSceneParam._m0[64u].w))
        {
            float _2398 = fma(_2053, cbSceneParam._m0[62u].w, fma(_2049, cbSceneParam._m0[62u].z, fma(_2045, cbSceneParam._m0[62u].y, _2041 * cbSceneParam._m0[62u].x))) / _2257;
            float _2402 = isnan(cbSceneParam._m0[41u].w) ? _2398 : (isnan(_2398) ? cbSceneParam._m0[41u].w : max(_2398, cbSceneParam._m0[41u].w));
            float _2445 = (cbSceneParam._m0[33u].x - sqrt(((_2055 * _2055) + (_2054 * _2054)) + (_2056 * _2056))) * cbSceneParam._m0[33u].y;
            float _4577 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
            float _2452 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2258, cbSceneParam._m0[33u].w + _2259), _2402), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2258, _2259 - cbSceneParam._m0[33u].z), _2402), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2258 - cbSceneParam._m0[33u].z, _2259 - cbSceneParam._m0[33u].w), _2402), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2258 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2259), _2402), 0.0)).x), vec4(0.25)));
            float _2456 = 1.0 - (_2452 * cbSceneParam._m0[34u].x);
            float _2457 = 1.0 - (_2452 * cbSceneParam._m0[34u].y);
            float _2458 = 1.0 - (_2452 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2458) ? _2205 : (isnan(_2205) ? _2458 : min(_2205, _2458));
            frontier_phi_37_36_ladder_1 = isnan(_2457) ? _2204 : (isnan(_2204) ? _2457 : min(_2204, _2457));
            frontier_phi_37_36_ladder_2 = isnan(_2456) ? _2203 : (isnan(_2203) ? _2456 : min(_2203, _2456));
        }
        else
        {
            frontier_phi_37_36_ladder = _2205;
            frontier_phi_37_36_ladder_1 = _2204;
            frontier_phi_37_36_ladder_2 = _2203;
        }
        _2269 = frontier_phi_37_36_ladder_2;
        _2271 = frontier_phi_37_36_ladder_1;
        _2273 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2269 = _2203;
        _2271 = _2204;
        _2273 = _2205;
    }
    uvec4 _2278 = floatBitsToUint(cbInstanceData._m0[_906 + 5u]);
    uint _2280 = _2278.x * 14u;
    uint _2281 = _2280 + 13u;
    float _2288 = _946 + (-1.0);
    float _2293 = (cbLight._m0[_2281].x * _2288) + 1.0;
    float _2294 = (cbLight._m0[_2281].y * _2288) + 1.0;
    float _2295 = (cbLight._m0[_2281].z * _2288) + 1.0;
    float _2296 = (cbLight._m0[_2281].w * _2288) + 1.0;
    uint _2297 = _2280 + 5u;
    float _2303 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
    uint _2307 = _2280 + 4u;
    float _2317 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
    uint _2321 = _2280 | 1u;
    float _2332 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_768, _769, _770));
    float _2335 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_768, _769, _770));
    float _4613 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _4624 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2340 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * 0.3183098733425140380859375;
    float _2342 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * 0.3183098733425140380859375;
    float _2349 = ((cbLight._m0[_2297].x * _2303) * _2342) + (((cbLight._m0[_2307].x * _2269) * _2317) * _2340);
    float _2350 = ((_2303 * cbLight._m0[_2297].y) * _2342) + (((cbLight._m0[_2307].y * _2271) * _2317) * _2340);
    float _2351 = ((_2303 * cbLight._m0[_2297].z) * _2342) + (((cbLight._m0[_2307].z * _2273) * _2317) * _2340);
    uvec4 _2355 = floatBitsToUint(cbLight._m0[_2280 + 12u]);
    bool _2357 = _2355.x == 0u;
    float _2459;
    float _2461;
    float _2463;
    if (_2357)
    {
        _2459 = _2349;
        _2461 = _2350;
        _2463 = _2351;
    }
    else
    {
        uint _2467 = _2280 + 6u;
        float _2483 = (dot(vec3(cbLight._m0[_2280 + 2u].xyz), vec3(_768, _769, _770)) * 0.5) + 0.5;
        float _2484 = _2483 * _2483;
        float _4635 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2485 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2486 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2459 = (((cbLight._m0[_2467].x * 0.3183098733425140380859375) * _2485) * _2486) + _2349;
        _2461 = (((cbLight._m0[_2467].y * 0.3183098733425140380859375) * _2485) * _2486) + _2350;
        _2463 = (((cbLight._m0[_2467].z * 0.3183098733425140380859375) * _2485) * _2486) + _2351;
    }
    bool _2466 = _2355.y == 0u;
    float _2521;
    float _2523;
    float _2525;
    if (_2466)
    {
        _2521 = _2459;
        _2523 = _2461;
        _2525 = _2463;
    }
    else
    {
        uint _2694 = _2280 + 7u;
        float _2710 = (dot(vec3(cbLight._m0[_2280 + 3u].xyz), vec3(_768, _769, _770)) * 0.5) + 0.5;
        float _2711 = _2710 * _2710;
        float _4651 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2712 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2713 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2521 = (((cbLight._m0[_2694].x * 0.3183098733425140380859375) * _2712) * _2713) + _2459;
        _2523 = (((cbLight._m0[_2694].y * 0.3183098733425140380859375) * _2712) * _2713) + _2461;
        _2525 = (((cbLight._m0[_2694].z * 0.3183098733425140380859375) * _2712) * _2713) + _2463;
    }
    uint _2528 = _2280 + 8u;
    float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2280].w)) * _771) * 0.949999988079071044921875);
    float _2542 = _2541 * _2541;
    float _2543 = cbLight._m0[_2280].x + _848;
    float _2544 = cbLight._m0[_2280].y + _849;
    float _2545 = cbLight._m0[_2280].z + _850;
    float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
    float _2550 = _2549 * _2543;
    float _2551 = _2549 * _2544;
    float _2552 = _2549 * _2545;
    float _2553 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2280].xyz));
    float _4667 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _4678 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _2557 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _2558 = dot(vec3(_768, _769, _770), vec3(_2550, _2551, _2552));
    float _4689 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2561 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _2562 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_2550, _2551, _2552));
    float _4700 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2566 = _2542 * _2542;
    float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
    float _2578 = exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0);
    float _2579 = 0.959999978542327880859375 - _928;
    float _2581 = 0.959999978542327880859375 - _929;
    float _2582 = 0.959999978542327880859375 - _930;
    float _2589 = 1.0 - _2542;
    float _2600 = (0.5 / (((_2557 * ((_2556 * _2589) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2557 * _2589) + _2542) * _2556))) * _2556;
    float _4711 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2602 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
    uint _2616 = _2280 + 9u;
    float _2627 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _771) * 0.949999988079071044921875);
    float _2628 = _2627 * _2627;
    float _2629 = cbLight._m0[_2321].x + _848;
    float _2630 = cbLight._m0[_2321].y + _849;
    float _2631 = cbLight._m0[_2321].z + _850;
    float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
    float _2636 = _2635 * _2629;
    float _2637 = _2635 * _2630;
    float _2638 = _2635 * _2631;
    float _2639 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2321].xyz));
    float _4722 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
    float _2643 = dot(vec3(_768, _769, _770), vec3(_2636, _2637, _2638));
    float _4733 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2646 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    float _2647 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2636, _2637, _2638));
    float _4744 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2651 = _2628 * _2628;
    float _2655 = ((_2646 * _2646) * (_2651 + (-1.0))) + 1.0;
    float _2662 = exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0);
    float _2669 = 1.0 - _2628;
    float _2679 = (0.5 / (((_2557 * ((_2642 * _2669) + _2628)) + 9.9999999392252902907785028219223e-09) + (((_2557 * _2669) + _2628) * _2642))) * _2642;
    float _4755 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2681 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2651 / ((_2655 * _2655) * 3.141590118408203125));
    float _2691 = (((((_2662 * _2579) + _931) * cbLight._m0[_2616].x) * _2681) * _2303) + ((((cbLight._m0[_2528].x * _2269) * ((_2578 * _2579) + _931)) * _2602) * _2317);
    float _2692 = (((((_2662 * _2581) + _933) * cbLight._m0[_2616].y) * _2681) * _2303) + ((((cbLight._m0[_2528].y * _2271) * ((_2578 * _2581) + _933)) * _2602) * _2317);
    float _2693 = (((((_2662 * _2582) + _934) * cbLight._m0[_2616].z) * _2681) * _2303) + ((((cbLight._m0[_2528].z * _2273) * ((_2578 * _2582) + _934)) * _2602) * _2317);
    float _2749;
    float _2751;
    float _2753;
    if (_2357)
    {
        _2749 = _2691;
        _2751 = _2692;
        _2753 = _2693;
    }
    else
    {
        uint _2755 = _2280 + 2u;
        uint _2759 = _2280 + 10u;
        float _2773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2755].w)) * _771) * 0.949999988079071044921875);
        float _2774 = _2773 * _2773;
        float _2775 = cbLight._m0[_2755].x + _848;
        float _2776 = cbLight._m0[_2755].y + _849;
        float _2777 = cbLight._m0[_2755].z + _850;
        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
        float _2782 = _2781 * _2775;
        float _2783 = _2781 * _2776;
        float _2784 = _2781 * _2777;
        float _2785 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2755].xyz));
        float _4766 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2788 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _2789 = dot(vec3(_768, _769, _770), vec3(_2782, _2783, _2784));
        float _4777 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2793 = dot(vec3(cbLight._m0[_2755].xyz), vec3(_2782, _2783, _2784));
        float _4788 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2797 = _2774 * _2774;
        float _2801 = ((_2792 * _2792) * (_2797 + (-1.0))) + 1.0;
        float _2808 = exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0);
        float _2815 = 1.0 - _2774;
        float _2825 = (0.5 / (((_2557 * ((_2788 * _2815) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2557 * _2815) + _2774) * _2788))) * _2788;
        float _4799 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2827 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2797 / ((_2801 * _2801) * 3.141590118408203125));
        float _2828 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2749 = (((((_2808 * _2579) + _931) * cbLight._m0[_2759].x) * _2827) * _2828) + _2691;
        _2751 = (((((_2808 * _2581) + _933) * cbLight._m0[_2759].y) * _2827) * _2828) + _2692;
        _2753 = (((((_2808 * _2582) + _934) * cbLight._m0[_2759].z) * _2827) * _2828) + _2693;
    }
    float _2859;
    float _2861;
    float _2863;
    if (_2466)
    {
        _2859 = _2749;
        _2861 = _2751;
        _2863 = _2753;
    }
    else
    {
        uint _2870 = _2280 + 3u;
        uint _2874 = _2280 + 11u;
        float _2888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2870].w)) * _771) * 0.949999988079071044921875);
        float _2889 = _2888 * _2888;
        float _2890 = cbLight._m0[_2870].x + _848;
        float _2891 = cbLight._m0[_2870].y + _849;
        float _2892 = cbLight._m0[_2870].z + _850;
        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
        float _2897 = _2896 * _2890;
        float _2898 = _2896 * _2891;
        float _2899 = _2896 * _2892;
        float _2900 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2870].xyz));
        float _4815 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2903 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2904 = dot(vec3(_768, _769, _770), vec3(_2897, _2898, _2899));
        float _4826 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2907 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2908 = dot(vec3(cbLight._m0[_2870].xyz), vec3(_2897, _2898, _2899));
        float _4837 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2912 = _2889 * _2889;
        float _2916 = ((_2907 * _2907) * (_2912 + (-1.0))) + 1.0;
        float _2923 = exp2(log2(1.0 - (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) * 5.0);
        float _2930 = 1.0 - _2889;
        float _2940 = (0.5 / (((_2557 * ((_2903 * _2930) + _2889)) + 9.9999999392252902907785028219223e-09) + (((_2557 * _2930) + _2889) * _2903))) * _2903;
        float _4848 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2942 = (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2912 / ((_2916 * _2916) * 3.141590118408203125));
        float _2943 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2859 = (((((_2923 * _2579) + _931) * cbLight._m0[_2874].x) * _2942) * _2943) + _2749;
        _2861 = (((((_2923 * _2581) + _933) * cbLight._m0[_2874].y) * _2942) * _2943) + _2751;
        _2863 = (((((_2923 * _2582) + _934) * cbLight._m0[_2874].z) * _2942) * _2943) + _2753;
    }
    float _3009;
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    if (_2278.y == 0u)
    {
        uvec4 _2964 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2965 = _2964.x;
        uint _2976 = uint((float(_2964.y) * floor(float(uint(cbSceneParam._m0[85u].y * _869) / _2965))) + floor(float(uint(cbSceneParam._m0[85u].x * _868) / _2965)));
        float _2986 = (log2(_2056 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2987 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
        uint _2990 = uint(isnan(14.0) ? _2987 : (isnan(_2987) ? 14.0 : min(_2987, 14.0)));
        uvec4 _2995 = texelFetch(g_lightClusterGridBuffer, int(((_2990 << 2u) + (_2976 << 6u)) >> 2u));
        uint _2996 = _2995.x;
        uint _2997 = _2964.z;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        if (((((1u << ((_2997 >> 4u) & 15u)) + 4294967295u) & _2996) == 0u) || ((_2997 & 240u) == 0u))
        {
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
            _3086 = 0.0;
        }
        else
        {
            float _3077;
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3087;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            uint _3235 = 0u;
            uint _3244;
            bool _3245;
            for (;;)
            {
                _3244 = texelFetch(g_lightClassification, int((((_2990 << 5u) + (_2976 << 9u)) + (_3235 << 2u)) >> 2u)).x;
                _3245 = _3244 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3245)
                {
                    frontier_phi_71_pred = _3234;
                    frontier_phi_71_pred_1 = _3233;
                    frontier_phi_71_pred_2 = _3232;
                    frontier_phi_71_pred_3 = _3231;
                    frontier_phi_71_pred_4 = _3230;
                    frontier_phi_71_pred_5 = _3229;
                }
                else
                {
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    uint _3380;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3234;
                    _3380 = _3244;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    for (;;)
                    {
                        uint _3384 = uint(findLSB(_3380)) + (_3235 << 5u);
                        uint _3381 = (_3380 + 4294967295u) & _3380;
                        uint _3386 = _3384 * 48u;
                        vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3386)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 3u)).x));
                        uint _3406 = (_3384 * 48u) + 4u;
                        vec4 _3419 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3406)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 3u)).x));
                        uint _3425 = (_3384 * 48u) + 8u;
                        vec3 _3436 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3425)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 2u)).x));
                        float _3440 = _3400.x - _2054;
                        float _3441 = _3400.y - _2055;
                        float _3442 = _3400.z - _2056;
                        float _3443 = dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442));
                        float _3446 = inversesqrt(_3443);
                        float _3447 = _3446 * _3440;
                        float _3448 = _3446 * _3441;
                        float _3449 = _3446 * _3442;
                        float _3450 = dot(vec3(_887, _890, _893), vec3(_3447, _3448, _3449));
                        float _3455 = 1.0 - (_3443 * _3400.w);
                        float _4874 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3456 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                        float _3457 = sqrt(_3443) * _3419.w;
                        float _3460 = 1.39999997615814208984375 / (_3457 + 1.39999997615814208984375);
                        float _3461 = _3460 * _3460;
                        float _3464 = ((1.0 - _3461) * _3450) + _3461;
                        float _3467 = _3457 * _3457;
                        float _3471 = ((isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0))) * _3456) / ((_3467 * 0.699999988079071044921875) + 1.0);
                        float _3475 = (-0.0) - _2054;
                        float _3476 = (-0.0) - _2055;
                        float _3477 = (-0.0) - _2056;
                        float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                        float _3482 = _3481 * _3475;
                        float _3483 = _3481 * _3476;
                        float _3484 = _3481 * _3477;
                        float _3491 = exp2(log2(1.0 / ((_3467 * 3.5) + 5.0)) * 0.25);
                        float _3492 = 1.0 - _962;
                        float _3499 = sqrt(1.0 - ((1.0 - (_3492 * _3492)) * (1.0 - (_3491 * _3491))));
                        float _3500 = _3499 * _3499;
                        float _3501 = _3500 * _3500;
                        float _3502 = _3482 + _3447;
                        float _3503 = _3483 + _3448;
                        float _3504 = _3484 + _3449;
                        float _3508 = inversesqrt(dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504)));
                        float _3512 = dot(vec3(_887, _890, _893), vec3(_3482, _3483, _3484));
                        float _4890 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                        float _3515 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                        float _3516 = dot(vec3(_887, _890, _893), vec3(_3508 * _3502, _3508 * _3503, _3508 * _3504));
                        float _4901 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                        float _3519 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                        float _3523 = ((_3519 * _3519) * (_3501 + (-1.0))) + 1.0;
                        float _3524 = _3460 * _3500;
                        float _3525 = _3524 * _3524;
                        float _3528 = ((1.0 - _3525) * _3450) + _3525;
                        float _4912 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                        float _3529 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                        float _3530 = 1.0 - _3500;
                        float _3540 = (0.5 / (((_3529 * ((_3515 * _3530) + _3500)) + 9.9999999392252902907785028219223e-09) + (((_3529 * _3530) + _3500) * _3515))) * _3529;
                        float _4923 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3551 = (((_3501 * 3.1415927410125732421875) * (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) / ((_3523 * _3523) * ((_3467 * 2.1991131305694580078125) + 3.141590118408203125))) * _3456;
                        _3304 = (_3471 * _3419.x) + _3377;
                        _3305 = (_3471 * _3419.y) + _3378;
                        _3306 = (_3471 * _3419.z) + _3379;
                        _3301 = (_3551 * _3436.x) + _3374;
                        _3302 = (_3551 * _3436.y) + _3375;
                        _3303 = (_3551 * _3436.z) + _3376;
                        if (_3381 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3306;
                            _3380 = _3381;
                        }
                    }
                    frontier_phi_71_pred = _3306;
                    frontier_phi_71_pred_1 = _3305;
                    frontier_phi_71_pred_2 = _3304;
                    frontier_phi_71_pred_3 = _3303;
                    frontier_phi_71_pred_4 = _3302;
                    frontier_phi_71_pred_5 = _3301;
                }
                _3087 = frontier_phi_71_pred;
                _3085 = frontier_phi_71_pred_1;
                _3083 = frontier_phi_71_pred_2;
                _3081 = frontier_phi_71_pred_3;
                _3079 = frontier_phi_71_pred_4;
                _3077 = frontier_phi_71_pred_5;
                uint _3236 = _3235 + 1u;
                if (_3236 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3229 = _3077;
                    _3230 = _3079;
                    _3231 = _3081;
                    _3232 = _3083;
                    _3233 = _3085;
                    _3234 = _3087;
                    _3235 = _3236;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
            _3086 = _3087;
        }
        uvec4 _3090 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3091 = _3090.z;
        uint _3093 = (_3091 >> 8u) & 15u;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        if (((4294967295u << _3093) & _2996) == 0u)
        {
            _3197 = _3076;
            _3199 = _3078;
            _3201 = _3080;
            _3203 = _3082;
            _3205 = _3084;
            _3207 = _3086;
        }
        else
        {
            float _3222 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
            float _3223 = _3222 * _2054;
            float _3224 = _3222 * _2055;
            float _3225 = _3222 * _2056;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3093 < ((_3091 >> 12u) & 15u))
            {
                float _3198;
                float _3200;
                float _3202;
                float _3204;
                float _3206;
                float _3208;
                float _3357 = _3076;
                float _3358 = _3078;
                float _3359 = _3080;
                float _3360 = _3082;
                float _3361 = _3084;
                float _3362 = _3086;
                uint _3363 = _3093;
                uint _3372;
                bool _3373;
                for (;;)
                {
                    _3372 = texelFetch(g_lightClassification, int((((_2990 << 5u) + (_2976 << 9u)) + (_3363 << 2u)) >> 2u)).x;
                    _3373 = _3372 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3373)
                    {
                        frontier_phi_82_pred = _3362;
                        frontier_phi_82_pred_1 = _3361;
                        frontier_phi_82_pred_2 = _3360;
                        frontier_phi_82_pred_3 = _3359;
                        frontier_phi_82_pred_4 = _3358;
                        frontier_phi_82_pred_5 = _3357;
                    }
                    else
                    {
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3578 = _3357;
                        float _3579 = _3358;
                        float _3580 = _3359;
                        float _3581 = _3360;
                        float _3582 = _3361;
                        float _3583 = _3362;
                        uint _3584 = _3372;
                        uint _3585;
                        vec4 _3610;
                        float _3611;
                        vec4 _3626;
                        vec3 _3638;
                        vec4 _3653;
                        vec4 _3668;
                        float _3715;
                        bool _3716;
                        for (;;)
                        {
                            uint _3595 = ((_3363 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3584));
                            _3585 = (_3584 + 4294967295u) & _3584;
                            uint _3597 = _3595 * 40u;
                            _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            _3611 = _3610.w;
                            uint _3613 = (_3595 * 40u) + 4u;
                            _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            uint _3628 = (_3595 * 40u) + 8u;
                            _3638 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x));
                            uint _3640 = (_3595 * 40u) + 16u;
                            _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3655 = (_3595 * 40u) + 20u;
                            _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            uint _3671 = (_3595 * 40u) + 24u;
                            vec4 _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            uint _3690 = (_3595 * 40u) + 28u;
                            vec4 _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            _3715 = fma(_2056, _3703.z, fma(_2055, _3703.y, _3703.x * _2054)) + _3703.w;
                            _3716 = !((fma(_2056, _3684.z, fma(_2055, _3684.y, _3684.x * _2054)) + _3684.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3716)
                            {
                                float _3743 = _3610.x - _2054;
                                float _3744 = _3610.y - _2055;
                                float _3745 = _3610.z - _2056;
                                float _3746 = dot(vec3(_3743, _3744, _3745), vec3(_3743, _3744, _3745));
                                float _3749 = inversesqrt(_3746);
                                float _3750 = _3749 * _3743;
                                float _3751 = _3749 * _3744;
                                float _3752 = _3749 * _3745;
                                float _3756 = 1.0 - (_3746 / (_3611 * _3611));
                                float _4934 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3757 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                                float _3761 = sqrt(_3746) * _3626.w;
                                float _3763 = 1.39999997615814208984375 / (_3761 + 1.39999997615814208984375);
                                float _3764 = _3763 * _3763;
                                float _3767 = ((1.0 - _3764) * dot(vec3(_3750, _3751, _3752), vec3(_887, _890, _893))) + _3764;
                                float _3770 = _3761 * _3761;
                                float _3774 = (fma(_2056, _3653.z, fma(_2055, _3653.y, _3653.x * _2054)) + _3653.w) / _3715;
                                float _3775 = (fma(_2056, _3668.z, fma(_2055, _3668.y, _3668.x * _2054)) + _3668.w) / _3715;
                                float _3779 = 1.0 - dot(vec2(_3774, _3775), vec2(_3774, _3775));
                                float _4950 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3780 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                                float _3781 = _3780 * (((isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0))) * _3757) / ((_3770 * 0.699999988079071044921875) + 1.0));
                                float _3793 = exp2(log2(1.0 / ((_3770 * 3.5) + 5.0)) * 0.25);
                                float _3794 = 1.0 - _962;
                                float _3801 = sqrt(1.0 - ((1.0 - (_3794 * _3794)) * (1.0 - (_3793 * _3793))));
                                float _3802 = _3801 * _3801;
                                float _3803 = _3802 * _3802;
                                float _3804 = _3750 - _3223;
                                float _3805 = _3751 - _3224;
                                float _3806 = _3752 - _3225;
                                float _3810 = inversesqrt(dot(vec3(_3804, _3805, _3806), vec3(_3804, _3805, _3806)));
                                float _3814 = dot(vec3(_887, _890, _893), vec3((-0.0) - _3223, (-0.0) - _3224, (-0.0) - _3225));
                                float _4961 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3817 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3818 = dot(vec3(_887, _890, _893), vec3(_3810 * _3804, _3810 * _3805, _3810 * _3806));
                                float _4972 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3821 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3825 = ((_3821 * _3821) * (_3803 + (-1.0))) + 1.0;
                                float _3826 = _3763 * _3802;
                                float _3827 = _3826 * _3826;
                                float _3833 = ((1.0 - _3827) * dot(vec3(_887, _890, _893), vec3(_3750, _3751, _3752))) + _3827;
                                float _4983 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3834 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3835 = 1.0 - _3802;
                                float _3845 = (0.5 / (((_3834 * ((_3817 * _3835) + _3802)) + 9.9999999392252902907785028219223e-09) + (((_3834 * _3835) + _3802) * _3817))) * _3834;
                                float _4994 = isnan(0.0) ? _3845 : (isnan(_3845) ? 0.0 : max(_3845, 0.0));
                                float _3855 = (_3780 * _3757) * (((_3803 * 3.1415927410125732421875) * (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0)))) / ((_3825 * _3825) * ((_3770 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3781 * _3626.z;
                                frontier_phi_88_pred_1 = _3781 * _3626.y;
                                frontier_phi_88_pred_2 = _3781 * _3626.x;
                                frontier_phi_88_pred_3 = _3855 * _3638.z;
                                frontier_phi_88_pred_4 = _3855 * _3638.y;
                                frontier_phi_88_pred_5 = _3855 * _3638.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3864 = frontier_phi_88_pred;
                            _3863 = frontier_phi_88_pred_1;
                            _3862 = frontier_phi_88_pred_2;
                            _3861 = frontier_phi_88_pred_3;
                            _3860 = frontier_phi_88_pred_4;
                            _3859 = frontier_phi_88_pred_5;
                            _3568 = _3862 + _3581;
                            _3569 = _3863 + _3582;
                            _3570 = _3864 + _3583;
                            _3565 = _3859 + _3578;
                            _3566 = _3860 + _3579;
                            _3567 = _3861 + _3580;
                            if (_3585 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3585;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3570;
                        frontier_phi_82_pred_1 = _3569;
                        frontier_phi_82_pred_2 = _3568;
                        frontier_phi_82_pred_3 = _3567;
                        frontier_phi_82_pred_4 = _3566;
                        frontier_phi_82_pred_5 = _3565;
                    }
                    _3208 = frontier_phi_82_pred;
                    _3206 = frontier_phi_82_pred_1;
                    _3204 = frontier_phi_82_pred_2;
                    _3202 = frontier_phi_82_pred_3;
                    _3200 = frontier_phi_82_pred_4;
                    _3198 = frontier_phi_82_pred_5;
                    uint _3364 = _3363 + 1u;
                    if (_3364 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3357 = _3198;
                        _3358 = _3200;
                        _3359 = _3202;
                        _3360 = _3204;
                        _3361 = _3206;
                        _3362 = _3208;
                        _3363 = _3364;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3204;
                frontier_phi_63_64_ladder_1 = _3208;
                frontier_phi_63_64_ladder_2 = _3206;
                frontier_phi_63_64_ladder_3 = _3202;
                frontier_phi_63_64_ladder_4 = _3200;
                frontier_phi_63_64_ladder_5 = _3198;
            }
            else
            {
                frontier_phi_63_64_ladder = _3082;
                frontier_phi_63_64_ladder_1 = _3086;
                frontier_phi_63_64_ladder_2 = _3084;
                frontier_phi_63_64_ladder_3 = _3080;
                frontier_phi_63_64_ladder_4 = _3078;
                frontier_phi_63_64_ladder_5 = _3076;
            }
            _3197 = frontier_phi_63_64_ladder_5;
            _3199 = frontier_phi_63_64_ladder_4;
            _3201 = frontier_phi_63_64_ladder_3;
            _3203 = frontier_phi_63_64_ladder;
            _3205 = frontier_phi_63_64_ladder_2;
            _3207 = frontier_phi_63_64_ladder_1;
        }
        float _3212 = isnan(1.0) ? _946 : (isnan(_946) ? 1.0 : min(_946, 1.0));
        _3009 = (_3212 * _3203) + _2521;
        _3011 = (_3212 * _3205) + _2523;
        _3013 = (_3212 * _3207) + _2525;
        _3015 = ((_3197 * _931) * _3212) + _2859;
        _3017 = ((_3199 * _933) * _3212) + _2861;
        _3019 = ((_3201 * _934) * _3212) + _2863;
    }
    else
    {
        _3009 = _2521;
        _3011 = _2523;
        _3013 = _2525;
        _3015 = _2859;
        _3017 = _2861;
        _3019 = _2863;
    }
    float _5010 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _5021 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _5032 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _3036 = ((isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0))) * (_3009 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _946))) + ((_3015 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1787)) * cbPerFrame._m0[3u].x);
    float _3037 = ((isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0))) * (_3011 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _946))) + ((_3017 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1787)) * cbPerFrame._m0[3u].x);
    float _3038 = ((isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_3013 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _946))) + ((_3019 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1787)) * cbPerFrame._m0[3u].x);
    uint _3039 = _906 + 6u;
    float _3047 = _868 / cbSceneParam._m0[86u].x;
    float _3048 = _869 / cbSceneParam._m0[86u].y;
    vec4 _3062 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3047, _3048, (log2((isnan(cbSceneParam._m0[77u].w) ? _791 : (isnan(_791) ? cbSceneParam._m0[77u].w : min(_791, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3064 = _3062.x;
    float _3065 = _3062.y;
    float _3066 = _3062.z;
    float _3067 = _3062.w;
    float _3139;
    float _3141;
    float _3143;
    float _3145;
    if (_791 > cbSceneParam._m0[78u].w)
    {
        float _3101 = isnan(_791) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _791 : min(cbSceneParam._m0[80u].w, _791));
        float _3102 = _3101 / _791;
        float _3113 = _3102 * _841;
        float _3114 = _842 * _3102;
        float _3115 = (-0.0) - _3114;
        float _3117 = _3102 * _843;
        float _3119 = (cbSceneParam._m0[77u].w * _3115) / _3101;
        float _3120 = _3119 + cbSceneParam._m0[79u].w;
        float _3121 = cbSceneParam._m0[79u].w - _3114;
        float _3127 = sqrt(((_3113 * _3113) + (_3114 * _3114)) + (_3117 * _3117));
        float _3130 = (1.0 - (cbSceneParam._m0[77u].w / _3101)) * _3127;
        float _3135 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3137 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3314;
        if (abs((_3115 - _3119) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3314 = ((((_3120 > 0.0) ? exp2(_3135 * _3120) : (2.0 - exp2(_3137 * _3120))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3130;
        }
        else
        {
            float _3258 = 1.0 / cbSceneParam._m0[80u].x;
            float _3259 = isnan(_3121) ? _3120 : (isnan(_3120) ? _3121 : max(_3120, _3121));
            float _3260 = isnan(_3121) ? _3120 : (isnan(_3120) ? _3121 : min(_3120, _3121));
            float _3269 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : min(_3259, 0.0));
            float _3270 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : min(_3260, 0.0));
            _3314 = ((abs(_3127 / _3115) * cbSceneParam._m0[80u].y) * ((((_3269 - _3270) * 2.0) - ((exp2(_3135 * (isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0)))) - exp2(_3135 * (isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0))))) * _3258)) - ((exp2(_3137 * _3269) - exp2(_3137 * _3270)) * _3258))) + (_3130 * cbSceneParam._m0[80u].z);
        }
        vec4 _3316 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3047, _3048, 1.0), 0.0);
        float _3325 = exp2((_3314 * (-1.44269502162933349609375)) * (1.0 - _3316.w));
        float _3326 = log2(_3325);
        float _3342 = log2(_3067);
        _3139 = (exp2(_3342 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3326 * cbSceneParam._m0[78u].x)) * _3316.x) / cbSceneParam._m0[78u].x)) + _3064;
        _3141 = (exp2(_3342 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3326 * cbSceneParam._m0[78u].y)) * _3316.y) / cbSceneParam._m0[78u].y)) + _3065;
        _3143 = (exp2(_3342 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3326 * cbSceneParam._m0[78u].z)) * _3316.z) / cbSceneParam._m0[78u].z)) + _3066;
        _3145 = _3325 * _3067;
    }
    else
    {
        _3139 = _3064;
        _3141 = _3065;
        _3143 = _3066;
        _3145 = _3067;
    }
    bool _3352;
    vec4 _3155;
    vec4 _3177;
    float _3179;
    float _3183;
    float _3184;
    float _3185;
    float _3186;
    bool _3196;
    for (;;)
    {
        _3155 = cbMatDynParam._m0[0u];
        float _3157 = roundEven(_3155.y);
        bool _3158 = _3157 == 3.0;
        float _3159 = log2(_3145);
        float _3166 = exp2(_3159 * cbSceneParam._m0[78u].x) * _3036;
        float _3167 = exp2(_3159 * cbSceneParam._m0[78u].y) * _3037;
        float _3168 = exp2(_3159 * cbSceneParam._m0[78u].z) * _3038;
        float _3175 = _857 + (-0.5);
        _3177 = cbMtdParam._m0[1u];
        _3179 = _3177.y * _3175;
        float _3182 = (_3157 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3183 = _3182 * (_3158 ? _3166 : (_3166 + (cbSceneParam._m0[72u].w * _3139)));
        _3184 = _3182 * (_3158 ? _3167 : (_3167 + (cbSceneParam._m0[72u].w * _3141)));
        _3185 = _3182 * (_3158 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3143)));
        _3186 = _3175 * 0.999000012874603271484375;
        _3196 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3196)
        {
            if ((cbInstanceData._m0[_906 + 7u].x + _3186) < 0.5)
            {
                _3352 = true;
                break;
            }
        }
        uint _3293 = _907 + uint(_3155.w);
        if ((cbInstanceData._m0[_3293].w < 1.0) && ((cbInstanceData._m0[_3293].w + _3186) < 0.5))
        {
            _3352 = true;
            break;
        }
        if ((_3179 + 1.0) < _3177.x)
        {
            _3352 = true;
            break;
        }
        _3352 = false;
        break;
    }
    float _3556;
    if (_3352)
    {
        discard_state = true;
        _3556 = 0.0;
    }
    else
    {
        _3556 = cbInstanceData._m0[_3039].w;
    }
    SV_Target.x = _3183;
    SV_Target.y = _3184;
    SV_Target.z = _3185;
    SV_Target.w = _3556;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3039].w;
    discard_exit();
}


