#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1479;
float _3860;
float _3861;
float _3862;
float _3863;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _272 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _272.x * cbMtdParam._m0[10u].x;
    float _279 = _272.y * cbMtdParam._m0[10u].y;
    float _280 = _272.z * cbMtdParam._m0[10u].z;
    vec4 _298 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _348 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _358 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _348)) + 1.0;
    float _3872 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _366 = (_359 * ((_298.x * cbMtdParam._m0[11u].x) - _278)) + _278;
    float _367 = (_359 * ((_298.y * cbMtdParam._m0[11u].y) - _279)) + _279;
    float _368 = (_359 * ((_298.z * cbMtdParam._m0[11u].z) - _280)) + _280;
    vec4 _386 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _417 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _348)) + 1.0;
    float _3883 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _425 = (_418 * ((_386.x * cbMtdParam._m0[12u].x) - _366)) + _366;
    float _426 = (_418 * ((_386.y * cbMtdParam._m0[12u].y) - _367)) + _367;
    float _427 = (_418 * ((_386.z * cbMtdParam._m0[12u].z) - _368)) + _368;
    vec4 _445 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _470 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _348)) + 1.0;
    float _3894 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    vec4 _499 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _507 = ((((_471 * ((_445.x * cbMtdParam._m0[13u].x) - _425)) + _425) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _499.x;
    float _510 = ((((_471 * ((_445.y * cbMtdParam._m0[13u].y) - _426)) + _426) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _499.y;
    float _513 = ((((_471 * ((_445.z * cbMtdParam._m0[13u].z) - _427)) + _427) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _499.z;
    vec4 _533 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _562 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3905 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _570 = (_563 * ((_533.x * cbMtdParam._m0[14u].x) - _507)) + _507;
    float _571 = (_563 * ((_533.y * cbMtdParam._m0[14u].y) - _510)) + _510;
    float _572 = (_563 * ((_533.z * cbMtdParam._m0[14u].z) - _513)) + _513;
    vec4 _592 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _620 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _3916 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _628 = (_621 * ((_592.x * cbMtdParam._m0[15u].x) - _570)) + _570;
    float _629 = (_621 * ((_592.y * cbMtdParam._m0[15u].y) - _571)) + _571;
    float _630 = (_621 * ((_592.z * cbMtdParam._m0[15u].z) - _572)) + _572;
    vec4 _643 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _645 = _643.x;
    float _663 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _645) * _359) + _645;
    float _680 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _663) * _418) + _663;
    float _697 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _680) * _471) + _680;
    float _699 = _697 - (_697 * TEXCOORD_5.x);
    vec4 _715 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _737 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _739 = _737.x;
    float _740 = _737.y;
    float _743 = cbMtdParam._m0[18u].y * _737.z;
    vec4 _755 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _764 = (((cbMtdParam._m0[18u].x * _755.z) - _743) * _359) + _743;
    vec4 _777 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _788 = (((cbMtdParam._m0[17u].w * _777.z) - _764) * _418) + _764;
    vec4 _801 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _810 = (((cbMtdParam._m0[17u].z * _801.z) - _788) * _471) + _788;
    float _815 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_715.z * cbMtdParam._m0[18u].z) - _810)) + _810;
    vec4 _828 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _842 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_828.z * cbMtdParam._m0[19u].y) - _815)) + _815;
    float _847 = ((_755.x - _739) * _359) + _739;
    float _848 = ((_755.y - _740) * _359) + _740;
    float _853 = ((_777.x - _847) * _418) + _847;
    float _854 = ((_777.y - _848) * _418) + _848;
    float _863 = ((((_801.x - _853) * _471) + _853) * 2.0) + (-1.0);
    float _864 = ((((_801.y - _854) * _471) + _854) * 2.0) + (-1.0);
    float _865 = dot(vec2(_863, _864), vec2(_863, _864));
    float _3927 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _870 = sqrt(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))));
    float _883 = (((((_715.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _863) + ((((_828.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _884 = (((((_715.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _864) + ((((_828.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _887 = fma(_870, _242 * NORMAL.x, fma(_884, _249 * TANGENT.x, (_235 * _227) * _883));
    float _890 = fma(_870, _242 * NORMAL.y, fma(_884, _249 * TANGENT.y, (_235 * _228) * _883));
    float _893 = fma(_870, _242 * NORMAL.z, fma(_884, _249 * TANGENT.z, (_235 * _229) * _883));
    float _897 = inversesqrt(dot(vec3(_887, _890, _893), vec3(_887, _890, _893)));
    float _898 = _897 * _887;
    float _899 = _897 * _890;
    float _900 = _897 * _893;
    float _3938 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _901 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3960 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3971 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3982 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _905 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _921 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _971 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _961);
    float _972 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _961);
    float _973 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _961);
    float _977 = inversesqrt(dot(vec3(_971, _972, _973), vec3(_971, _972, _973)));
    float _978 = _971 * _977;
    float _979 = _972 * _977;
    float _980 = _973 * _977;
    vec4 _985 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _987 = _985.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1159 = sqrt(((_971 * _971) + (_972 * _972)) + (_973 * _973));
        float _1165 = (cbMatDynParam._m0[5u].x * _1159) + cbMatDynParam._m0[5u].y;
        float _3993 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1170 = (cbMatDynParam._m0[5u].z * _1159) + cbMatDynParam._m0[5u].w;
        float _4004 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) - _1166)) + _1166) < ((_987 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _998 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _999 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1017 = fma(_900, cbSceneParam._m0[5u].z, fma(_899, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _898));
    float _1020 = fma(_900, cbSceneParam._m0[6u].z, fma(_899, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _898));
    float _1023 = fma(_900, cbSceneParam._m0[7u].z, fma(_899, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _898));
    uint _1036 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1037 = _1036 + 9u;
    uint _1038 = _1037 + uint(cbMatDynParam._m0[0u].w);
    float _1044 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * cbInstanceData._m0[_1038].x;
    float _1045 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * cbInstanceData._m0[_1038].y;
    float _1046 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * cbInstanceData._m0[_1038].z;
    float _4015 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _1050 = 1.0 - _905;
    float _1051 = _1047 * _1050;
    float _1052 = _1048 * _1050;
    float _1053 = _1049 * _1050;
    float _1058 = (_1047 + (-0.039999999105930328369140625)) * _905;
    float _1059 = (_1048 + (-0.039999999105930328369140625)) * _905;
    float _1060 = (_1049 + (-0.039999999105930328369140625)) * _905;
    float _1061 = _1058 + 0.039999999105930328369140625;
    float _1063 = _1059 + 0.039999999105930328369140625;
    float _1064 = _1060 + 0.039999999105930328369140625;
    vec4 _1073 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _998, cbSceneParam._m0[86u].y * _999));
    float _1076 = _1073.x * TEXCOORD_5.w;
    float _1077 = dot(vec3(_898, _899, _900), vec3(_978, _979, _980));
    float _1080 = _1077 * 2.0;
    float _1084 = (_1080 * _898) - _978;
    float _1085 = (_1080 * _899) - _979;
    float _1086 = (_1080 * _900) - _980;
    float _1090 = abs(dot(vec3(_978, _979, _980), vec3(_898, _899, _900)));
    float _4048 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1092 = sqrt(_901);
    float _1105 = exp2((_1092 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1092 * 3.0));
    float _1111 = (1.0 - _1105) * ((_1092 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1112 = _1105 * _1092;
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1478;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1203 = fma(_1148, cbModelParam._m0[26u].z, fma(_1144, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1140));
        float _1207 = fma(_1148, cbModelParam._m0[27u].z, fma(_1144, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1140));
        float _1211 = fma(_1148, cbModelParam._m0[28u].z, fma(_1144, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1140));
        float _1236 = _1140 + _898;
        float _1237 = _1144 + _899;
        float _1238 = _1148 + _900;
        float _1248 = fma(_1238, cbModelParam._m0[26u].z, fma(_1237, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1236)) - _1203;
        float _1249 = fma(_1238, cbModelParam._m0[27u].z, fma(_1237, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1236)) - _1207;
        float _1250 = fma(_1238, cbModelParam._m0[28u].z, fma(_1237, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1236)) - _1211;
        float _1254 = inversesqrt(dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250)));
        float _1267 = ((_1254 * _1248) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1203 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1254 * _1249) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1207 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1254 * _1250) / cbModelParam._m0[34u].z) + ((((((_1211 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        float _1306 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1272.x + (-0.5));
        float _1308 = _1306 * (_1272.y + (-0.5));
        float _1309 = _1306 * (_1272.z + (-0.5));
        float _1316 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1279.x + (-0.5));
        float _1318 = _1316 * (_1279.y + (-0.5));
        float _1319 = _1316 * (_1279.z + (-0.5));
        float _1326 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1286.x + (-0.5));
        float _1328 = _1326 * (_1286.y + (-0.5));
        float _1329 = _1326 * (_1286.z + (-0.5));
        float _1336 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1293.x + (-0.5));
        float _1338 = _1336 * (_1293.y + (-0.5));
        float _1339 = _1336 * (_1293.z + (-0.5));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = _1307 * 0.5;
        float _1344 = _1317 * 0.5;
        float _1345 = _1327 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1360 = (dot(vec3(_898, _899, _900), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1370 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4096 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1372 + 1.0))) + _1377) * _1340;
        float _1387 = _1308 * 0.5;
        float _1388 = _1318 * 0.5;
        float _1389 = _1328 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_898, _899, _900), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4129 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1414 + 1.0))) + _1419) * _1341;
        float _1429 = _1309 * 0.5;
        float _1430 = _1319 * 0.5;
        float _1431 = _1329 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_898, _899, _900), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4162 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1456 + 1.0))) + _1461) * _1342;
        _1478 = _1309;
        _1480 = _1308;
        _1481 = _1307;
        _1482 = _1319;
        _1483 = _1318;
        _1484 = _1317;
        _1485 = _1329;
        _1486 = _1328;
        _1487 = _1327;
        _1488 = _1342;
        _1489 = _1341;
        _1490 = _1340;
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
    }
    else
    {
        _1478 = _1479;
        _1480 = _1479;
        _1481 = _1479;
        _1482 = _1479;
        _1483 = _1479;
        _1484 = _1479;
        _1485 = _1479;
        _1486 = _1479;
        _1487 = _1479;
        _1488 = _1479;
        _1489 = _1479;
        _1490 = _1479;
        _1491 = 0.0;
        _1492 = 0.0;
        _1493 = 0.0;
    }
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1522 = fma(_1148, cbModelParam._m0[30u].z, fma(_1144, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1140));
        float _1526 = fma(_1148, cbModelParam._m0[31u].z, fma(_1144, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1140));
        float _1530 = fma(_1148, cbModelParam._m0[32u].z, fma(_1144, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1140));
        float _1553 = _1140 + _898;
        float _1554 = _1144 + _899;
        float _1555 = _1148 + _900;
        float _1565 = fma(_1555, cbModelParam._m0[30u].z, fma(_1554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1553)) - _1522;
        float _1566 = fma(_1555, cbModelParam._m0[31u].z, fma(_1554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1553)) - _1526;
        float _1567 = fma(_1555, cbModelParam._m0[32u].z, fma(_1554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1553)) - _1530;
        float _1571 = inversesqrt(dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567)));
        float _1584 = ((_1571 * _1565) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1522 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1585 = ((_1571 * _1566) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1526 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1586 = ((_1571 * _1567) / cbModelParam._m0[35u].z) + ((((((_1530 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        float _1621 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1588.x + (-0.5));
        float _1623 = _1621 * (_1588.y + (-0.5));
        float _1624 = _1621 * (_1588.z + (-0.5));
        float _1631 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1595.x + (-0.5));
        float _1633 = _1631 * (_1595.y + (-0.5));
        float _1634 = _1631 * (_1595.z + (-0.5));
        float _1641 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1602.x + (-0.5));
        float _1643 = _1641 * (_1602.y + (-0.5));
        float _1644 = _1641 * (_1602.z + (-0.5));
        float _1651 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1609.x + (-0.5));
        float _1653 = _1651 * (_1609.y + (-0.5));
        float _1654 = _1651 * (_1609.z + (-0.5));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = _1622 * 0.5;
        float _1659 = _1632 * 0.5;
        float _1660 = _1642 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_898, _899, _900), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4225 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1685 + 1.0))) + _1690) * _1655;
        float _1700 = _1623 * 0.5;
        float _1701 = _1633 * 0.5;
        float _1702 = _1643 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_898, _899, _900), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4258 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1727 + 1.0))) + _1732) * _1656;
        float _1742 = _1624 * 0.5;
        float _1743 = _1634 * 0.5;
        float _1744 = _1644 * 0.5;
        float _1745 = dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744));
        float _1750 = (_1745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1745);
        float _1758 = (dot(vec3(_898, _899, _900), vec3(_1750 * _1742, _1750 * _1743, _1750 * _1744)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1767 = sqrt(((_1743 * _1743) + (_1742 * _1742)) + (_1744 * _1744)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1769 = _1768 * 2.0;
        float _1773 = (1.0 - _1768) / (_1768 + 1.0);
        float _4291 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1783 = ((((1.0 - _1774) * (_1769 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1769 + 1.0))) + _1774) * _1657;
        _1791 = _1624;
        _1792 = _1623;
        _1793 = _1622;
        _1794 = _1634;
        _1795 = _1633;
        _1796 = _1632;
        _1797 = _1644;
        _1798 = _1643;
        _1799 = _1642;
        _1800 = _1657;
        _1801 = _1656;
        _1802 = _1655;
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)));
    }
    else
    {
        _1791 = _1479;
        _1792 = _1479;
        _1793 = _1479;
        _1794 = _1479;
        _1795 = _1479;
        _1796 = _1479;
        _1797 = _1479;
        _1798 = _1479;
        _1799 = _1479;
        _1800 = _1479;
        _1801 = _1479;
        _1802 = _1479;
        _1803 = 0.0;
        _1804 = 0.0;
        _1805 = 0.0;
    }
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1491)) + _1491;
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1492)) + _1492;
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1493)) + _1493;
    float _1838 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1841 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1844 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1815));
    float _1859 = _1084 * 0.5;
    float _1860 = _1085 * 0.5;
    float _1861 = _1086 * 0.5;
    float _1862 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1865 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1868 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1902;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1875 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1478, _1482, _1485, _1488));
        float _1879 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1480, _1483, _1486, _1489));
        float _1883 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1481, _1484, _1487, _1490));
        float _1890 = dot(vec4(cbModelParam._m0[39u]), vec4(_1859, _1860, _1861, 1.0));
        _1902 = dot(vec3(isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1890) ? 0.0 : (isnan(0.0) ? _1890 : max(0.0, _1890))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1902 = 1.0;
    }
    float _1913;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1904 = dot(vec4(cbModelParam._m0[40u]), vec4(_1859, _1860, _1861, 1.0));
        _1913 = dot(vec3(isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1904) ? 0.0 : (isnan(0.0) ? _1904 : max(0.0, _1904))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1913 = 1.0;
    }
    float _1917 = (_1913 * cbModelParam._m0[1u].x) + (_1902 * (1.0 - cbModelParam._m0[1u].x));
    float _1927 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _901);
    float _1928 = isnan(_1927) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1927 : min(cbModelParam._m0[25u].z, _1927));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1975 = fma(_1148, cbModelParam._m0[13u].z, fma(_1144, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140)) + cbModelParam._m0[13u].w;
        float _1979 = fma(_1148, cbModelParam._m0[14u].z, fma(_1144, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140)) + cbModelParam._m0[14u].w;
        float _1983 = fma(_1148, cbModelParam._m0[15u].z, fma(_1144, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140)) + cbModelParam._m0[15u].w;
        float _1986 = fma(_1086, cbModelParam._m0[13u].z, fma(_1085, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1084));
        float _1989 = fma(_1086, cbModelParam._m0[14u].z, fma(_1085, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1084));
        float _1992 = fma(_1086, cbModelParam._m0[15u].z, fma(_1085, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1084));
        float _2020;
        if (_1986 > 0.0)
        {
            _2020 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2020 = frontier_phi_17_15_ladder;
        }
        float _2222;
        if (_1989 > 0.0)
        {
            _2222 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2222 = frontier_phi_26_22_ladder;
        }
        float _2476;
        if (_1992 > 0.0)
        {
            _2476 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2476 = frontier_phi_38_33_ladder;
        }
        float _2478 = isnan(_2222) ? _2020 : (isnan(_2020) ? _2222 : min(_2020, _2222));
        float _2479 = isnan(_2476) ? _2478 : (isnan(_2478) ? _2476 : min(_2478, _2476));
        float _2483 = (_2479 * _1986) + _1975;
        float _2484 = (_2479 * _1989) + _1979;
        float _2485 = (_2479 * _1992) + _1983;
        float _2486 = _2479 * 9.9999997473787516355514526367188e-05;
        float _2488 = (-1.0) - _2486;
        float _2490 = _2486 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2485 > _2490) || ((_2485 < _2488) || ((_2484 > _2490) || ((_2484 < _2488) || ((_2483 < _2488) || (_2483 > _2490))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2613 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2485, cbModelParam._m0[9u].z, fma(_2484, cbModelParam._m0[9u].y, _2483 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2485, cbModelParam._m0[10u].z, fma(_2484, cbModelParam._m0[10u].y, _2483 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2485, cbModelParam._m0[11u].z, fma(_2484, cbModelParam._m0[11u].y, _2483 * cbModelParam._m0[11u].x))), _1928);
            frontier_phi_16_38_ladder = _2613.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2613.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2613.x * cbModelParam._m0[1u].y;
        }
        _2008 = frontier_phi_16_38_ladder_2;
        _2010 = frontier_phi_16_38_ladder_1;
        _2012 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1996 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1084, _1085, _1086), _1928);
        _2008 = _1996.x * cbModelParam._m0[1u].y;
        _2010 = _1996.y * cbModelParam._m0[1u].y;
        _2012 = _1996.z * cbModelParam._m0[1u].y;
    }
    float _2016 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _901);
    float _2017 = isnan(_2016) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2016 : min(cbModelParam._m0[25u].w, _2016));
    float _2106;
    float _2108;
    float _2110;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2070 = fma(_1148, cbModelParam._m0[21u].z, fma(_1144, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140)) + cbModelParam._m0[21u].w;
        float _2074 = fma(_1148, cbModelParam._m0[22u].z, fma(_1144, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140)) + cbModelParam._m0[22u].w;
        float _2078 = fma(_1148, cbModelParam._m0[23u].z, fma(_1144, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140)) + cbModelParam._m0[23u].w;
        float _2081 = fma(_1086, cbModelParam._m0[21u].z, fma(_1085, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1084));
        float _2084 = fma(_1086, cbModelParam._m0[22u].z, fma(_1085, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1084));
        float _2087 = fma(_1086, cbModelParam._m0[23u].z, fma(_1085, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1084));
        float _2227;
        if (_2081 > 0.0)
        {
            _2227 = abs((1.0 - _2070) / _2081);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2070 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2227 = frontier_phi_28_24_ladder;
        }
        float _2503;
        if (_2084 > 0.0)
        {
            _2503 = abs((1.0 - _2074) / _2084);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2074 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2503 = frontier_phi_40_35_ladder;
        }
        float _2716;
        if (_2087 > 0.0)
        {
            _2716 = abs((1.0 - _2078) / _2087);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2078 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2716 = frontier_phi_49_46_ladder;
        }
        float _2718 = isnan(_2503) ? _2227 : (isnan(_2227) ? _2503 : min(_2227, _2503));
        float _2719 = isnan(_2716) ? _2718 : (isnan(_2718) ? _2716 : min(_2718, _2716));
        float _2723 = (_2719 * _2081) + _2070;
        float _2724 = (_2719 * _2084) + _2074;
        float _2725 = (_2719 * _2087) + _2078;
        float _2726 = _2719 * 9.9999997473787516355514526367188e-05;
        float _2727 = (-1.0) - _2726;
        float _2729 = _2726 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2725 > _2729) || ((_2725 < _2727) || ((_2724 > _2729) || ((_2724 < _2727) || ((_2723 < _2727) || (_2723 > _2729))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2924 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2725, cbModelParam._m0[17u].z, fma(_2724, cbModelParam._m0[17u].y, _2723 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2725, cbModelParam._m0[18u].z, fma(_2724, cbModelParam._m0[18u].y, _2723 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2725, cbModelParam._m0[19u].z, fma(_2724, cbModelParam._m0[19u].y, _2723 * cbModelParam._m0[19u].x))), _2017);
            frontier_phi_25_49_ladder = _2924.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2924.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2924.x * cbModelParam._m0[1u].z;
        }
        _2106 = frontier_phi_25_49_ladder_2;
        _2108 = frontier_phi_25_49_ladder_1;
        _2110 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2090 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1084, _1085, _1086), _2017);
        _2106 = _2090.x * cbModelParam._m0[1u].z;
        _2108 = _2090.y * cbModelParam._m0[1u].z;
        _2110 = _2090.z * cbModelParam._m0[1u].z;
    }
    float _2123 = (((_1111 * _1061) + _1112) * _1076) * ((cbModelParam._m0[1u].w * (_2106 - _2008)) + _2008);
    float _2125 = (((_1111 * _1063) + _1112) * _1076) * ((cbModelParam._m0[1u].w * (_2108 - _2010)) + _2010);
    float _2127 = (((_1111 * _1064) + _1112) * _1076) * ((cbModelParam._m0[1u].w * (_2110 - _2012)) + _2012);
    float _2130 = fma(_2127, cbSceneParam._m0[89u].z, fma(_2125, cbSceneParam._m0[89u].y, _2123 * cbSceneParam._m0[89u].x));
    float _2133 = fma(_2127, cbSceneParam._m0[90u].z, fma(_2125, cbSceneParam._m0[90u].y, _2123 * cbSceneParam._m0[90u].x));
    float _2136 = fma(_2127, cbSceneParam._m0[91u].z, fma(_2125, cbSceneParam._m0[91u].y, _2123 * cbSceneParam._m0[91u].x));
    uvec4 _2146 = floatBitsToUint(cbInstanceData._m0[_1036 + 5u]);
    uint _2148 = _2146.x * 14u;
    uint _2149 = _2148 + 13u;
    float _2156 = _1076 + (-1.0);
    float _2161 = (cbLight._m0[_2149].x * _2156) + 1.0;
    float _2162 = (cbLight._m0[_2149].y * _2156) + 1.0;
    float _2163 = (cbLight._m0[_2149].z * _2156) + 1.0;
    float _2164 = (cbLight._m0[_2149].w * _2156) + 1.0;
    uint _2165 = _2148 + 5u;
    float _2171 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
    uint _2175 = _2148 + 4u;
    float _2181 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
    uint _2185 = _2148 | 1u;
    float _2196 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_898, _899, _900));
    float _2199 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_898, _899, _900));
    float _4427 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _4438 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2204 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * 0.3183098733425140380859375;
    float _2206 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * 0.3183098733425140380859375;
    float _2213 = ((cbLight._m0[_2165].x * _2171) * _2206) + ((cbLight._m0[_2175].x * _2181) * _2204);
    float _2214 = ((_2171 * cbLight._m0[_2165].y) * _2206) + ((_2181 * cbLight._m0[_2175].y) * _2204);
    float _2215 = ((_2171 * cbLight._m0[_2165].z) * _2206) + ((_2181 * cbLight._m0[_2175].z) * _2204);
    uvec4 _2219 = floatBitsToUint(cbLight._m0[_2148 + 12u]);
    bool _2221 = _2219.x == 0u;
    float _2232;
    float _2234;
    float _2236;
    if (_2221)
    {
        _2232 = _2213;
        _2234 = _2214;
        _2236 = _2215;
    }
    else
    {
        uint _2240 = _2148 + 6u;
        float _2256 = (dot(vec3(cbLight._m0[_2148 + 2u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2257 = _2256 * _2256;
        float _4449 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2258 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2259 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2232 = (((cbLight._m0[_2240].x * 0.3183098733425140380859375) * _2258) * _2259) + _2213;
        _2234 = (((cbLight._m0[_2240].y * 0.3183098733425140380859375) * _2258) * _2259) + _2214;
        _2236 = (((cbLight._m0[_2240].z * 0.3183098733425140380859375) * _2258) * _2259) + _2215;
    }
    bool _2239 = _2219.y == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2239)
    {
        _2277 = _2232;
        _2279 = _2234;
        _2281 = _2236;
    }
    else
    {
        uint _2447 = _2148 + 7u;
        float _2463 = (dot(vec3(cbLight._m0[_2148 + 3u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2464 = _2463 * _2463;
        float _4465 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2465 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2466 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2277 = (((cbLight._m0[_2447].x * 0.3183098733425140380859375) * _2465) * _2466) + _2232;
        _2279 = (((cbLight._m0[_2447].y * 0.3183098733425140380859375) * _2465) * _2466) + _2234;
        _2281 = (((cbLight._m0[_2447].z * 0.3183098733425140380859375) * _2465) * _2466) + _2236;
    }
    uint _2284 = _2148 + 8u;
    float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _901) * 0.949999988079071044921875);
    float _2298 = _2297 * _2297;
    float _2299 = cbLight._m0[_2148].x + _978;
    float _2300 = cbLight._m0[_2148].y + _979;
    float _2301 = cbLight._m0[_2148].z + _980;
    float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
    float _2306 = _2305 * _2299;
    float _2307 = _2305 * _2300;
    float _2308 = _2305 * _2301;
    float _2309 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2148].xyz));
    float _4481 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _4492 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _2313 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2314 = dot(vec3(_898, _899, _900), vec3(_2306, _2307, _2308));
    float _4503 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2318 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2306, _2307, _2308));
    float _4514 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2322 = _2298 * _2298;
    float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
    float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
    float _2335 = 0.959999978542327880859375 - _1058;
    float _2337 = 0.959999978542327880859375 - _1059;
    float _2338 = 0.959999978542327880859375 - _1060;
    float _2345 = 1.0 - _2298;
    float _2356 = (0.5 / (((_2313 * ((_2312 * _2345) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2345) + _2298) * _2312))) * _2312;
    float _4525 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2358 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
    uint _2369 = _2148 + 9u;
    float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _901) * 0.949999988079071044921875);
    float _2381 = _2380 * _2380;
    float _2382 = cbLight._m0[_2185].x + _978;
    float _2383 = cbLight._m0[_2185].y + _979;
    float _2384 = cbLight._m0[_2185].z + _980;
    float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
    float _2389 = _2388 * _2382;
    float _2390 = _2388 * _2383;
    float _2391 = _2388 * _2384;
    float _2392 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2185].xyz));
    float _4536 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2396 = dot(vec3(_898, _899, _900), vec3(_2389, _2390, _2391));
    float _4547 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2400 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2389, _2390, _2391));
    float _4558 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2404 = _2381 * _2381;
    float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
    float _2415 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
    float _2422 = 1.0 - _2381;
    float _2432 = (0.5 / (((_2313 * ((_2395 * _2422) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2422) + _2381) * _2395))) * _2395;
    float _4569 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2434 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
    float _2444 = (((((_2415 * _2335) + _1061) * cbLight._m0[_2369].x) * _2434) * _2171) + (((((_2334 * _2335) + _1061) * cbLight._m0[_2284].x) * _2358) * _2181);
    float _2445 = (((((_2415 * _2337) + _1063) * cbLight._m0[_2369].y) * _2434) * _2171) + (((((_2334 * _2337) + _1063) * cbLight._m0[_2284].y) * _2358) * _2181);
    float _2446 = (((((_2415 * _2338) + _1064) * cbLight._m0[_2369].z) * _2434) * _2171) + (((((_2334 * _2338) + _1064) * cbLight._m0[_2284].z) * _2358) * _2181);
    float _2508;
    float _2510;
    float _2512;
    if (_2221)
    {
        _2508 = _2444;
        _2510 = _2445;
        _2512 = _2446;
    }
    else
    {
        uint _2514 = _2148 + 2u;
        uint _2518 = _2148 + 10u;
        float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2514].w)) * _901) * 0.949999988079071044921875);
        float _2533 = _2532 * _2532;
        float _2534 = cbLight._m0[_2514].x + _978;
        float _2535 = cbLight._m0[_2514].y + _979;
        float _2536 = cbLight._m0[_2514].z + _980;
        float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
        float _2541 = _2540 * _2534;
        float _2542 = _2540 * _2535;
        float _2543 = _2540 * _2536;
        float _2544 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2514].xyz));
        float _4580 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2548 = dot(vec3(_898, _899, _900), vec3(_2541, _2542, _2543));
        float _4591 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2552 = dot(vec3(cbLight._m0[_2514].xyz), vec3(_2541, _2542, _2543));
        float _4602 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2556 = _2533 * _2533;
        float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
        float _2567 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
        float _2574 = 1.0 - _2533;
        float _2584 = (0.5 / (((_2313 * ((_2547 * _2574) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2574) + _2533) * _2547))) * _2547;
        float _4613 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2586 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
        float _2587 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2508 = (((((_2567 * _2335) + _1061) * cbLight._m0[_2518].x) * _2586) * _2587) + _2444;
        _2510 = (((((_2567 * _2337) + _1063) * cbLight._m0[_2518].y) * _2586) * _2587) + _2445;
        _2512 = (((((_2567 * _2338) + _1064) * cbLight._m0[_2518].z) * _2586) * _2587) + _2446;
    }
    float _2622;
    float _2624;
    float _2626;
    if (_2239)
    {
        _2622 = _2508;
        _2624 = _2510;
        _2626 = _2512;
    }
    else
    {
        uint _2633 = _2148 + 3u;
        uint _2637 = _2148 + 11u;
        float _2651 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2633].w)) * _901) * 0.949999988079071044921875);
        float _2652 = _2651 * _2651;
        float _2653 = cbLight._m0[_2633].x + _978;
        float _2654 = cbLight._m0[_2633].y + _979;
        float _2655 = cbLight._m0[_2633].z + _980;
        float _2659 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
        float _2660 = _2659 * _2653;
        float _2661 = _2659 * _2654;
        float _2662 = _2659 * _2655;
        float _2663 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2633].xyz));
        float _4629 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2667 = dot(vec3(_898, _899, _900), vec3(_2660, _2661, _2662));
        float _4640 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2671 = dot(vec3(cbLight._m0[_2633].xyz), vec3(_2660, _2661, _2662));
        float _4651 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2675 = _2652 * _2652;
        float _2679 = ((_2670 * _2670) * (_2675 + (-1.0))) + 1.0;
        float _2686 = exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0);
        float _2693 = 1.0 - _2652;
        float _2703 = (0.5 / (((_2313 * ((_2666 * _2693) + _2652)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2693) + _2652) * _2666))) * _2666;
        float _4662 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2705 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2675 / ((_2679 * _2679) * 3.141590118408203125));
        float _2706 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2622 = (((((_2686 * _2335) + _1061) * cbLight._m0[_2637].x) * _2705) * _2706) + _2508;
        _2624 = (((((_2686 * _2337) + _1063) * cbLight._m0[_2637].y) * _2705) * _2706) + _2510;
        _2626 = (((((_2686 * _2338) + _1064) * cbLight._m0[_2637].z) * _2705) * _2706) + _2512;
    }
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    if (_2146.y == 0u)
    {
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2781;
        float _2783 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2781;
        float _2784 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2781;
        uvec4 _2796 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2797 = _2796.x;
        uint _2808 = uint((float(_2796.y) * floor(float(uint(cbSceneParam._m0[85u].y * _999) / _2797))) + floor(float(uint(cbSceneParam._m0[85u].x * _998) / _2797)));
        float _2818 = (log2(_2784 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2819 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        uint _2822 = uint(isnan(14.0) ? _2819 : (isnan(_2819) ? 14.0 : min(_2819, 14.0)));
        uvec4 _2827 = texelFetch(g_lightClusterGridBuffer, int(((_2822 << 2u) + (_2808 << 6u)) >> 2u));
        uint _2828 = _2827.x;
        uint _2829 = _2796.z;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        if (((((1u << ((_2829 >> 4u) & 15u)) + 4294967295u) & _2828) == 0u) || ((_2829 & 240u) == 0u))
        {
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
        }
        else
        {
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            uint _3088 = 0u;
            uint _3097;
            bool _3098;
            for (;;)
            {
                _3097 = texelFetch(g_lightClassification, int((((_2822 << 5u) + (_2808 << 9u)) + (_3088 << 2u)) >> 2u)).x;
                _3098 = _3097 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3098)
                {
                    frontier_phi_66_pred = _3082;
                    frontier_phi_66_pred_1 = _3087;
                    frontier_phi_66_pred_2 = _3086;
                    frontier_phi_66_pred_3 = _3085;
                    frontier_phi_66_pred_4 = _3084;
                    frontier_phi_66_pred_5 = _3083;
                }
                else
                {
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    uint _3233;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3097;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    for (;;)
                    {
                        uint _3237 = uint(findLSB(_3233)) + (_3088 << 5u);
                        uint _3234 = (_3233 + 4294967295u) & _3233;
                        uint _3239 = _3237 * 48u;
                        vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3259 = (_3237 * 48u) + 4u;
                        vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 3u)).x));
                        uint _3278 = (_3237 * 48u) + 8u;
                        vec3 _3289 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x));
                        float _3293 = _3253.x - _2782;
                        float _3294 = _3253.y - _2783;
                        float _3295 = _3253.z - _2784;
                        float _3296 = dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295));
                        float _3299 = inversesqrt(_3296);
                        float _3300 = _3299 * _3293;
                        float _3301 = _3299 * _3294;
                        float _3302 = _3299 * _3295;
                        float _3303 = dot(vec3(_1017, _1020, _1023), vec3(_3300, _3301, _3302));
                        float _3308 = 1.0 - (_3296 * _3253.w);
                        float _4688 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3309 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3310 = sqrt(_3296) * _3272.w;
                        float _3313 = 1.39999997615814208984375 / (_3310 + 1.39999997615814208984375);
                        float _3314 = _3313 * _3313;
                        float _3317 = ((1.0 - _3314) * _3303) + _3314;
                        float _3320 = _3310 * _3310;
                        float _3324 = ((isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))) * _3309) / ((_3320 * 0.699999988079071044921875) + 1.0);
                        float _3328 = (-0.0) - _2782;
                        float _3329 = (-0.0) - _2783;
                        float _3330 = (-0.0) - _2784;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3345 = exp2(log2(1.0 / ((_3320 * 3.5) + 5.0)) * 0.25);
                        float _3346 = 1.0 - _1092;
                        float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                        float _3354 = _3353 * _3353;
                        float _3355 = _3354 * _3354;
                        float _3356 = _3335 + _3300;
                        float _3357 = _3336 + _3301;
                        float _3358 = _3337 + _3302;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3366 = dot(vec3(_1017, _1020, _1023), vec3(_3335, _3336, _3337));
                        float _4704 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3370 = dot(vec3(_1017, _1020, _1023), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                        float _4715 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                        float _3378 = _3313 * _3354;
                        float _3379 = _3378 * _3378;
                        float _3382 = ((1.0 - _3379) * _3303) + _3379;
                        float _4726 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3384 = 1.0 - _3354;
                        float _3394 = (0.5 / (((_3383 * ((_3369 * _3384) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3354) * _3369))) * _3383;
                        float _4737 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3405 = (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) / ((_3377 * _3377) * ((_3320 * 2.1991131305694580078125) + 3.141590118408203125))) * _3309;
                        _3157 = (_3324 * _3272.x) + _3230;
                        _3158 = (_3324 * _3272.y) + _3231;
                        _3159 = (_3324 * _3272.z) + _3232;
                        _3154 = (_3405 * _3289.x) + _3227;
                        _3155 = (_3405 * _3289.y) + _3228;
                        _3156 = (_3405 * _3289.z) + _3229;
                        if (_3234 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3234;
                        }
                    }
                    frontier_phi_66_pred = _3154;
                    frontier_phi_66_pred_1 = _3159;
                    frontier_phi_66_pred_2 = _3158;
                    frontier_phi_66_pred_3 = _3157;
                    frontier_phi_66_pred_4 = _3156;
                    frontier_phi_66_pred_5 = _3155;
                }
                _2930 = frontier_phi_66_pred;
                _2940 = frontier_phi_66_pred_1;
                _2938 = frontier_phi_66_pred_2;
                _2936 = frontier_phi_66_pred_3;
                _2934 = frontier_phi_66_pred_4;
                _2932 = frontier_phi_66_pred_5;
                uint _3089 = _3088 + 1u;
                if (_3089 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3082 = _2930;
                    _3083 = _2932;
                    _3084 = _2934;
                    _3085 = _2936;
                    _3086 = _2938;
                    _3087 = _2940;
                    _3088 = _3089;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
        }
        uvec4 _2943 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2944 = _2943.z;
        uint _2946 = (_2944 >> 8u) & 15u;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        if (((4294967295u << _2946) & _2828) == 0u)
        {
            _3050 = _2929;
            _3052 = _2931;
            _3054 = _2933;
            _3056 = _2935;
            _3058 = _2937;
            _3060 = _2939;
        }
        else
        {
            float _3075 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
            float _3076 = _3075 * _2782;
            float _3077 = _3075 * _2783;
            float _3078 = _3075 * _2784;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2946 < ((_2944 >> 12u) & 15u))
            {
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3210 = _2929;
                float _3211 = _2931;
                float _3212 = _2933;
                float _3213 = _2935;
                float _3214 = _2937;
                float _3215 = _2939;
                uint _3216 = _2946;
                uint _3225;
                bool _3226;
                for (;;)
                {
                    _3225 = texelFetch(g_lightClassification, int((((_2822 << 5u) + (_2808 << 9u)) + (_3216 << 2u)) >> 2u)).x;
                    _3226 = _3225 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3226)
                    {
                        frontier_phi_77_pred = _3215;
                        frontier_phi_77_pred_1 = _3214;
                        frontier_phi_77_pred_2 = _3213;
                        frontier_phi_77_pred_3 = _3212;
                        frontier_phi_77_pred_4 = _3211;
                        frontier_phi_77_pred_5 = _3210;
                    }
                    else
                    {
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3432 = _3210;
                        float _3433 = _3211;
                        float _3434 = _3212;
                        float _3435 = _3213;
                        float _3436 = _3214;
                        float _3437 = _3215;
                        uint _3438 = _3225;
                        uint _3439;
                        vec4 _3464;
                        float _3465;
                        vec4 _3480;
                        vec3 _3492;
                        vec4 _3507;
                        vec4 _3522;
                        float _3569;
                        bool _3570;
                        for (;;)
                        {
                            uint _3449 = ((_3216 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3438));
                            _3439 = (_3438 + 4294967295u) & _3438;
                            uint _3451 = _3449 * 40u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            _3465 = _3464.w;
                            uint _3467 = (_3449 * 40u) + 4u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3449 * 40u) + 8u;
                            _3492 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x));
                            uint _3494 = (_3449 * 40u) + 16u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3509 = (_3449 * 40u) + 20u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3525 = (_3449 * 40u) + 24u;
                            vec4 _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3544 = (_3449 * 40u) + 28u;
                            vec4 _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            _3569 = fma(_2784, _3557.z, fma(_2783, _3557.y, _3557.x * _2782)) + _3557.w;
                            _3570 = !((fma(_2784, _3538.z, fma(_2783, _3538.y, _3538.x * _2782)) + _3538.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3570)
                            {
                                float _3597 = _3464.x - _2782;
                                float _3598 = _3464.y - _2783;
                                float _3599 = _3464.z - _2784;
                                float _3600 = dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599));
                                float _3603 = inversesqrt(_3600);
                                float _3604 = _3603 * _3597;
                                float _3605 = _3603 * _3598;
                                float _3606 = _3603 * _3599;
                                float _3610 = 1.0 - (_3600 / (_3465 * _3465));
                                float _4748 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3615 = sqrt(_3600) * _3480.w;
                                float _3617 = 1.39999997615814208984375 / (_3615 + 1.39999997615814208984375);
                                float _3618 = _3617 * _3617;
                                float _3621 = ((1.0 - _3618) * dot(vec3(_3604, _3605, _3606), vec3(_1017, _1020, _1023))) + _3618;
                                float _3624 = _3615 * _3615;
                                float _3628 = (fma(_2784, _3507.z, fma(_2783, _3507.y, _3507.x * _2782)) + _3507.w) / _3569;
                                float _3629 = (fma(_2784, _3522.z, fma(_2783, _3522.y, _3522.x * _2782)) + _3522.w) / _3569;
                                float _3633 = 1.0 - dot(vec2(_3628, _3629), vec2(_3628, _3629));
                                float _4764 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3635 = _3634 * (((isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0))) * _3611) / ((_3624 * 0.699999988079071044921875) + 1.0));
                                float _3647 = exp2(log2(1.0 / ((_3624 * 3.5) + 5.0)) * 0.25);
                                float _3648 = 1.0 - _1092;
                                float _3655 = sqrt(1.0 - ((1.0 - (_3648 * _3648)) * (1.0 - (_3647 * _3647))));
                                float _3656 = _3655 * _3655;
                                float _3657 = _3656 * _3656;
                                float _3658 = _3604 - _3076;
                                float _3659 = _3605 - _3077;
                                float _3660 = _3606 - _3078;
                                float _3664 = inversesqrt(dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660)));
                                float _3668 = dot(vec3(_1017, _1020, _1023), vec3((-0.0) - _3076, (-0.0) - _3077, (-0.0) - _3078));
                                float _4775 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3671 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3672 = dot(vec3(_1017, _1020, _1023), vec3(_3664 * _3658, _3664 * _3659, _3664 * _3660));
                                float _4786 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3675 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3679 = ((_3675 * _3675) * (_3657 + (-1.0))) + 1.0;
                                float _3680 = _3617 * _3656;
                                float _3681 = _3680 * _3680;
                                float _3687 = ((1.0 - _3681) * dot(vec3(_1017, _1020, _1023), vec3(_3604, _3605, _3606))) + _3681;
                                float _4797 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3689 = 1.0 - _3656;
                                float _3699 = (0.5 / (((_3688 * ((_3671 * _3689) + _3656)) + 9.9999999392252902907785028219223e-09) + (((_3688 * _3689) + _3656) * _3671))) * _3688;
                                float _4808 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3709 = (_3634 * _3611) * (((_3657 * 3.1415927410125732421875) * (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) / ((_3679 * _3679) * ((_3624 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3635 * _3480.y;
                                frontier_phi_83_pred_1 = _3635 * _3480.x;
                                frontier_phi_83_pred_2 = _3709 * _3492.z;
                                frontier_phi_83_pred_3 = _3709 * _3492.y;
                                frontier_phi_83_pred_4 = _3709 * _3492.x;
                                frontier_phi_83_pred_5 = _3635 * _3480.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3717 = frontier_phi_83_pred;
                            _3716 = frontier_phi_83_pred_1;
                            _3715 = frontier_phi_83_pred_2;
                            _3714 = frontier_phi_83_pred_3;
                            _3713 = frontier_phi_83_pred_4;
                            _3718 = frontier_phi_83_pred_5;
                            _3422 = _3716 + _3435;
                            _3423 = _3717 + _3436;
                            _3424 = _3718 + _3437;
                            _3419 = _3713 + _3432;
                            _3420 = _3714 + _3433;
                            _3421 = _3715 + _3434;
                            if (_3439 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3439;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3424;
                        frontier_phi_77_pred_1 = _3423;
                        frontier_phi_77_pred_2 = _3422;
                        frontier_phi_77_pred_3 = _3421;
                        frontier_phi_77_pred_4 = _3420;
                        frontier_phi_77_pred_5 = _3419;
                    }
                    _3061 = frontier_phi_77_pred;
                    _3059 = frontier_phi_77_pred_1;
                    _3057 = frontier_phi_77_pred_2;
                    _3055 = frontier_phi_77_pred_3;
                    _3053 = frontier_phi_77_pred_4;
                    _3051 = frontier_phi_77_pred_5;
                    uint _3217 = _3216 + 1u;
                    if (_3217 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3210 = _3051;
                        _3211 = _3053;
                        _3212 = _3055;
                        _3213 = _3057;
                        _3214 = _3059;
                        _3215 = _3061;
                        _3216 = _3217;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3055;
                frontier_phi_58_59_ladder_1 = _3061;
                frontier_phi_58_59_ladder_2 = _3059;
                frontier_phi_58_59_ladder_3 = _3057;
                frontier_phi_58_59_ladder_4 = _3053;
                frontier_phi_58_59_ladder_5 = _3051;
            }
            else
            {
                frontier_phi_58_59_ladder = _2933;
                frontier_phi_58_59_ladder_1 = _2939;
                frontier_phi_58_59_ladder_2 = _2937;
                frontier_phi_58_59_ladder_3 = _2935;
                frontier_phi_58_59_ladder_4 = _2931;
                frontier_phi_58_59_ladder_5 = _2929;
            }
            _3050 = frontier_phi_58_59_ladder_5;
            _3052 = frontier_phi_58_59_ladder_4;
            _3054 = frontier_phi_58_59_ladder;
            _3056 = frontier_phi_58_59_ladder_3;
            _3058 = frontier_phi_58_59_ladder_2;
            _3060 = frontier_phi_58_59_ladder_1;
        }
        float _3065 = isnan(1.0) ? _1076 : (isnan(_1076) ? 1.0 : min(_1076, 1.0));
        _2841 = (_3065 * _3056) + _2277;
        _2843 = (_3065 * _3058) + _2279;
        _2845 = (_3065 * _3060) + _2281;
        _2847 = ((_3050 * _1061) * _3065) + _2622;
        _2849 = ((_3052 * _1063) * _3065) + _2624;
        _2851 = ((_3054 * _1064) * _3065) + _2626;
    }
    else
    {
        _2841 = _2277;
        _2843 = _2279;
        _2845 = _2281;
        _2847 = _2622;
        _2849 = _2624;
        _2851 = _2626;
    }
    float _4824 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _4835 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _4846 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _2868 = ((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2841 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1076))) + ((_2847 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1917)) * cbPerFrame._m0[3u].x);
    float _2869 = ((isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2843 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1076))) + ((_2849 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1917)) * cbPerFrame._m0[3u].x);
    float _2870 = ((isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2845 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1076))) + ((_2851 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1917)) * cbPerFrame._m0[3u].x);
    uint _2871 = _1036 + 6u;
    float _2879 = _998 / cbSceneParam._m0[86u].x;
    float _2880 = _999 / cbSceneParam._m0[86u].y;
    vec4 _2894 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2879, _2880, (log2((isnan(cbSceneParam._m0[77u].w) ? _921 : (isnan(_921) ? cbSceneParam._m0[77u].w : min(_921, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2896 = _2894.x;
    float _2897 = _2894.y;
    float _2898 = _2894.z;
    float _2899 = _2894.w;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    if (_921 > cbSceneParam._m0[78u].w)
    {
        float _2954 = isnan(_921) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _921 : min(cbSceneParam._m0[80u].w, _921));
        float _2955 = _2954 / _921;
        float _2966 = _2955 * _971;
        float _2967 = _972 * _2955;
        float _2968 = (-0.0) - _2967;
        float _2970 = _2955 * _973;
        float _2972 = (cbSceneParam._m0[77u].w * _2968) / _2954;
        float _2973 = _2972 + cbSceneParam._m0[79u].w;
        float _2974 = cbSceneParam._m0[79u].w - _2967;
        float _2980 = sqrt(((_2966 * _2966) + (_2967 * _2967)) + (_2970 * _2970));
        float _2983 = (1.0 - (cbSceneParam._m0[77u].w / _2954)) * _2980;
        float _2988 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2990 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3167;
        if (abs((_2968 - _2972) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3167 = ((((_2973 > 0.0) ? exp2(_2988 * _2973) : (2.0 - exp2(_2990 * _2973))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2983;
        }
        else
        {
            float _3111 = 1.0 / cbSceneParam._m0[80u].x;
            float _3112 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : max(_2973, _2974));
            float _3113 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : min(_2973, _2974));
            float _3122 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : min(_3112, 0.0));
            float _3123 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : min(_3113, 0.0));
            _3167 = ((abs(_2980 / _2968) * cbSceneParam._m0[80u].y) * ((((_3122 - _3123) * 2.0) - ((exp2(_2988 * (isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0)))) - exp2(_2988 * (isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0))))) * _3111)) - ((exp2(_2990 * _3122) - exp2(_2990 * _3123)) * _3111))) + (_2983 * cbSceneParam._m0[80u].z);
        }
        vec4 _3169 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2879, _2880, 1.0), 0.0);
        float _3178 = exp2((_3167 * (-1.44269502162933349609375)) * (1.0 - _3169.w));
        float _3179 = log2(_3178);
        float _3195 = log2(_2899);
        _2992 = (exp2(_3195 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].x)) * _3169.x) / cbSceneParam._m0[78u].x)) + _2896;
        _2994 = (exp2(_3195 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].y)) * _3169.y) / cbSceneParam._m0[78u].y)) + _2897;
        _2996 = (exp2(_3195 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].z)) * _3169.z) / cbSceneParam._m0[78u].z)) + _2898;
        _2998 = _3178 * _2899;
    }
    else
    {
        _2992 = _2896;
        _2994 = _2897;
        _2996 = _2898;
        _2998 = _2899;
    }
    bool _3205;
    vec4 _3008;
    vec4 _3030;
    float _3032;
    float _3036;
    float _3037;
    float _3038;
    float _3039;
    bool _3049;
    for (;;)
    {
        _3008 = cbMatDynParam._m0[0u];
        float _3010 = roundEven(_3008.y);
        bool _3011 = _3010 == 3.0;
        float _3012 = log2(_2998);
        float _3019 = exp2(_3012 * cbSceneParam._m0[78u].x) * _2868;
        float _3020 = exp2(_3012 * cbSceneParam._m0[78u].y) * _2869;
        float _3021 = exp2(_3012 * cbSceneParam._m0[78u].z) * _2870;
        float _3028 = _987 + (-0.5);
        _3030 = cbMtdParam._m0[1u];
        _3032 = _3030.y * _3028;
        float _3035 = (_3010 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3036 = _3035 * (_3011 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2992)));
        _3037 = _3035 * (_3011 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2994)));
        _3038 = _3035 * (_3011 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2996)));
        _3039 = _3028 * 0.999000012874603271484375;
        _3049 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3049)
        {
            if ((cbInstanceData._m0[_1036 + 7u].x + _3039) < 0.5)
            {
                _3205 = true;
                break;
            }
        }
        uint _3146 = _1037 + uint(_3008.w);
        if ((cbInstanceData._m0[_3146].w < 1.0) && ((cbInstanceData._m0[_3146].w + _3039) < 0.5))
        {
            _3205 = true;
            break;
        }
        if ((_3032 + 1.0) < _3030.x)
        {
            _3205 = true;
            break;
        }
        _3205 = false;
        break;
    }
    float _3410;
    if (_3205)
    {
        discard_state = true;
        _3410 = 0.0;
    }
    else
    {
        _3410 = cbInstanceData._m0[_2871].w;
    }
    SV_Target.x = _3036;
    SV_Target.y = _3037;
    SV_Target.z = _3038;
    SV_Target.w = _3410;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2871].w;
    discard_exit();
}


