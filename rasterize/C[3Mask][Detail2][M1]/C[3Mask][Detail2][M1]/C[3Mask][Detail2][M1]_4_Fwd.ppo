#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1252;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _248 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _248.x * cbMtdParam._m0[10u].x;
    float _255 = _248.y * cbMtdParam._m0[10u].y;
    float _256 = _248.z * cbMtdParam._m0[10u].z;
    vec4 _274 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _324 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _334 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _324)) + 1.0;
    float _3581 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _335 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _342 = (_335 * ((_274.x * cbMtdParam._m0[11u].x) - _254)) + _254;
    float _343 = (_335 * ((_274.y * cbMtdParam._m0[11u].y) - _255)) + _255;
    float _344 = (_335 * ((_274.z * cbMtdParam._m0[11u].z) - _256)) + _256;
    vec4 _362 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _393 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _324)) + 1.0;
    float _3592 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _401 = (_394 * ((_362.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _402 = (_394 * ((_362.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _403 = (_394 * ((_362.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _421 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _446 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _324)) + 1.0;
    float _3603 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    vec4 _475 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _483 = ((((_447 * ((_421.x * cbMtdParam._m0[13u].x) - _401)) + _401) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _475.x;
    float _486 = ((((_447 * ((_421.y * cbMtdParam._m0[13u].y) - _402)) + _402) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _475.y;
    float _489 = ((((_447 * ((_421.z * cbMtdParam._m0[13u].z) - _403)) + _403) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _475.z;
    vec4 _502 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _504 = _502.x;
    float _522 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _504) * _335) + _504;
    float _539 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _522) * _394) + _522;
    float _556 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _539) * _447) + _539;
    vec4 _568 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _570 = _568.x;
    float _571 = _568.y;
    float _577 = cbMtdParam._m0[18u].y * _568.z;
    vec4 _589 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _598 = (((cbMtdParam._m0[18u].x * _589.z) - _577) * _335) + _577;
    vec4 _611 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _622 = (((cbMtdParam._m0[17u].w * _611.z) - _598) * _394) + _598;
    vec4 _635 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _644 = (((cbMtdParam._m0[17u].z * _635.z) - _622) * _447) + _622;
    vec4 _657 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _670 = ((_589.x - _570) * _335) + _570;
    float _671 = ((_589.y - _571) * _335) + _571;
    float _676 = ((_611.x - _670) * _394) + _670;
    float _677 = ((_611.y - _671) * _394) + _671;
    float _686 = ((((_635.x - _676) * _447) + _676) * 2.0) + (-1.0);
    float _687 = ((((_635.y - _677) * _447) + _677) * 2.0) + (-1.0);
    float _688 = dot(vec2(_686, _687), vec2(_686, _687));
    float _3614 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _693 = sqrt(1.0 - (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))));
    float _696 = (((_657.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _686;
    float _697 = (((_657.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _687;
    float _700 = fma(_693, _218 * NORMAL.x, fma(_697, _225 * TANGENT.x, (_211 * _203) * _696));
    float _703 = fma(_693, _218 * NORMAL.y, fma(_697, _225 * TANGENT.y, (_211 * _204) * _696));
    float _706 = fma(_693, _218 * NORMAL.z, fma(_697, _225 * TANGENT.z, (_211 * _205) * _696));
    float _710 = inversesqrt(dot(vec3(_700, _703, _706), vec3(_700, _703, _706)));
    float _711 = _710 * _700;
    float _712 = _710 * _703;
    float _713 = _710 * _706;
    float _3625 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _714 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _3636 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3647 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3658 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3669 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _718 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _734 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _784 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _774);
    float _785 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _774);
    float _786 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _774);
    float _790 = inversesqrt(dot(vec3(_784, _785, _786), vec3(_784, _785, _786)));
    float _791 = _784 * _790;
    float _792 = _785 * _790;
    float _793 = _786 * _790;
    float _799 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _800 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _818 = fma(_713, cbSceneParam._m0[5u].z, fma(_712, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _711));
    float _821 = fma(_713, cbSceneParam._m0[6u].z, fma(_712, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _711));
    float _824 = fma(_713, cbSceneParam._m0[7u].z, fma(_712, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _711));
    uint _837 = uint(roundEven(NORMAL.w)) * 13u;
    uint _839 = (_837 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _845 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_839].x;
    float _846 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_839].y;
    float _847 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * cbInstanceData._m0[_839].z;
    float _3680 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _851 = 1.0 - _718;
    float _852 = _848 * _851;
    float _853 = _849 * _851;
    float _854 = _850 * _851;
    float _859 = (_848 + (-0.039999999105930328369140625)) * _718;
    float _860 = (_849 + (-0.039999999105930328369140625)) * _718;
    float _861 = (_850 + (-0.039999999105930328369140625)) * _718;
    float _862 = _859 + 0.039999999105930328369140625;
    float _864 = _860 + 0.039999999105930328369140625;
    float _865 = _861 + 0.039999999105930328369140625;
    vec4 _874 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _799, cbSceneParam._m0[86u].y * _800));
    float _877 = _874.x * TEXCOORD_5.w;
    float _878 = dot(vec3(_711, _712, _713), vec3(_791, _792, _793));
    float _881 = _878 * 2.0;
    float _885 = (_881 * _711) - _791;
    float _886 = (_881 * _712) - _792;
    float _887 = (_881 * _713) - _793;
    float _891 = abs(dot(vec3(_791, _792, _793), vec3(_711, _712, _713)));
    float _3713 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _893 = sqrt(_714);
    float _906 = exp2((_893 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_893 * 3.0));
    float _912 = (1.0 - _906) * ((_893 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _913 = _906 * _893;
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1251;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _976 = fma(_949, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941));
        float _980 = fma(_949, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941));
        float _984 = fma(_949, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941));
        float _1009 = _941 + _711;
        float _1010 = _945 + _712;
        float _1011 = _949 + _713;
        float _1021 = fma(_1011, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009)) - _976;
        float _1022 = fma(_1011, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009)) - _980;
        float _1023 = fma(_1011, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009)) - _984;
        float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
        float _1040 = ((_1027 * _1021) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_976 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1027 * _1022) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_980 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1027 * _1023) / cbModelParam._m0[34u].z) + ((((((_984 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        float _1079 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1045.x + (-0.5));
        float _1081 = _1079 * (_1045.y + (-0.5));
        float _1082 = _1079 * (_1045.z + (-0.5));
        float _1089 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1052.x + (-0.5));
        float _1091 = _1089 * (_1052.y + (-0.5));
        float _1092 = _1089 * (_1052.z + (-0.5));
        float _1099 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1059.x + (-0.5));
        float _1101 = _1099 * (_1059.y + (-0.5));
        float _1102 = _1099 * (_1059.z + (-0.5));
        float _1109 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1066.x + (-0.5));
        float _1111 = _1109 * (_1066.y + (-0.5));
        float _1112 = _1109 * (_1066.z + (-0.5));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = _1080 * 0.5;
        float _1117 = _1090 * 0.5;
        float _1118 = _1100 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1133 = (dot(vec3(_711, _712, _713), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1143 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3761 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1145 + 1.0))) + _1150) * _1113;
        float _1160 = _1081 * 0.5;
        float _1161 = _1091 * 0.5;
        float _1162 = _1101 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_711, _712, _713), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3794 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1187 + 1.0))) + _1192) * _1114;
        float _1202 = _1082 * 0.5;
        float _1203 = _1092 * 0.5;
        float _1204 = _1102 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_711, _712, _713), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3827 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1229 + 1.0))) + _1234) * _1115;
        _1251 = _1082;
        _1253 = _1081;
        _1254 = _1080;
        _1255 = _1092;
        _1256 = _1091;
        _1257 = _1090;
        _1258 = _1102;
        _1259 = _1101;
        _1260 = _1100;
        _1261 = _1115;
        _1262 = _1114;
        _1263 = _1113;
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
    }
    else
    {
        _1251 = _1252;
        _1253 = _1252;
        _1254 = _1252;
        _1255 = _1252;
        _1256 = _1252;
        _1257 = _1252;
        _1258 = _1252;
        _1259 = _1252;
        _1260 = _1252;
        _1261 = _1252;
        _1262 = _1252;
        _1263 = _1252;
        _1264 = 0.0;
        _1265 = 0.0;
        _1266 = 0.0;
    }
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1292 = fma(_949, cbModelParam._m0[30u].z, fma(_945, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _941));
        float _1296 = fma(_949, cbModelParam._m0[31u].z, fma(_945, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _941));
        float _1300 = fma(_949, cbModelParam._m0[32u].z, fma(_945, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _941));
        float _1323 = _941 + _711;
        float _1324 = _945 + _712;
        float _1325 = _949 + _713;
        float _1335 = fma(_1325, cbModelParam._m0[30u].z, fma(_1324, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1323)) - _1292;
        float _1336 = fma(_1325, cbModelParam._m0[31u].z, fma(_1324, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1323)) - _1296;
        float _1337 = fma(_1325, cbModelParam._m0[32u].z, fma(_1324, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1323)) - _1300;
        float _1341 = inversesqrt(dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337)));
        float _1354 = ((_1341 * _1335) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1292 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1341 * _1336) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1296 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1341 * _1337) / cbModelParam._m0[35u].z) + ((((((_1300 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        float _1391 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1358.x + (-0.5));
        float _1393 = _1391 * (_1358.y + (-0.5));
        float _1394 = _1391 * (_1358.z + (-0.5));
        float _1401 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1365.x + (-0.5));
        float _1403 = _1401 * (_1365.y + (-0.5));
        float _1404 = _1401 * (_1365.z + (-0.5));
        float _1411 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1372.x + (-0.5));
        float _1413 = _1411 * (_1372.y + (-0.5));
        float _1414 = _1411 * (_1372.z + (-0.5));
        float _1421 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1379.x + (-0.5));
        float _1423 = _1421 * (_1379.y + (-0.5));
        float _1424 = _1421 * (_1379.z + (-0.5));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = _1392 * 0.5;
        float _1429 = _1402 * 0.5;
        float _1430 = _1412 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_711, _712, _713), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _3890 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1455 + 1.0))) + _1460) * _1425;
        float _1470 = _1393 * 0.5;
        float _1471 = _1403 * 0.5;
        float _1472 = _1413 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_711, _712, _713), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _3923 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1497 + 1.0))) + _1502) * _1426;
        float _1512 = _1394 * 0.5;
        float _1513 = _1404 * 0.5;
        float _1514 = _1414 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_711, _712, _713), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _3956 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1539 + 1.0))) + _1544) * _1427;
        _1561 = _1394;
        _1562 = _1393;
        _1563 = _1392;
        _1564 = _1404;
        _1565 = _1403;
        _1566 = _1402;
        _1567 = _1414;
        _1568 = _1413;
        _1569 = _1412;
        _1570 = _1427;
        _1571 = _1426;
        _1572 = _1425;
        _1573 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
    }
    else
    {
        _1561 = _1252;
        _1562 = _1252;
        _1563 = _1252;
        _1564 = _1252;
        _1565 = _1252;
        _1566 = _1252;
        _1567 = _1252;
        _1568 = _1252;
        _1569 = _1252;
        _1570 = _1252;
        _1571 = _1252;
        _1572 = _1252;
        _1573 = 0.0;
        _1574 = 0.0;
        _1575 = 0.0;
    }
    float _1585 = (cbModelParam._m0[1u].x * (_1573 - _1264)) + _1264;
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1265)) + _1265;
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1266)) + _1266;
    float _1608 = fma(_1587, cbSceneParam._m0[89u].z, fma(_1586, cbSceneParam._m0[89u].y, _1585 * cbSceneParam._m0[89u].x));
    float _1611 = fma(_1587, cbSceneParam._m0[90u].z, fma(_1586, cbSceneParam._m0[90u].y, _1585 * cbSceneParam._m0[90u].x));
    float _1614 = fma(_1587, cbSceneParam._m0[91u].z, fma(_1586, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1585));
    float _1629 = _885 * 0.5;
    float _1630 = _886 * 0.5;
    float _1631 = _887 * 0.5;
    float _1632 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1635 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1638 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1561, _1564, _1567, _1570));
    float _1672;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1645 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1251, _1255, _1258, _1261));
        float _1649 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1253, _1256, _1259, _1262));
        float _1653 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1254, _1257, _1260, _1263));
        float _1660 = dot(vec4(cbModelParam._m0[39u]), vec4(_1629, _1630, _1631, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1660) ? 0.0 : (isnan(0.0) ? _1660 : max(0.0, _1660))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1683;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1674 = dot(vec4(cbModelParam._m0[40u]), vec4(_1629, _1630, _1631, 1.0));
        _1683 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1683 = 1.0;
    }
    float _1687 = (_1683 * cbModelParam._m0[1u].x) + (_1672 * (1.0 - cbModelParam._m0[1u].x));
    float _1697 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _714);
    float _1698 = isnan(_1697) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1697 : min(cbModelParam._m0[25u].z, _1697));
    float _1780;
    float _1782;
    float _1784;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1747 = fma(_949, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941)) + cbModelParam._m0[13u].w;
        float _1751 = fma(_949, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941)) + cbModelParam._m0[14u].w;
        float _1755 = fma(_949, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941)) + cbModelParam._m0[15u].w;
        float _1758 = fma(_887, cbModelParam._m0[13u].z, fma(_886, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885));
        float _1761 = fma(_887, cbModelParam._m0[14u].z, fma(_886, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885));
        float _1764 = fma(_887, cbModelParam._m0[15u].z, fma(_886, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885));
        float _1792;
        if (_1758 > 0.0)
        {
            _1792 = abs((1.0 - _1747) / _1758);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1747 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1792 = frontier_phi_14_12_ladder;
        }
        float _1994;
        if (_1761 > 0.0)
        {
            _1994 = abs((1.0 - _1751) / _1761);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1751 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1994 = frontier_phi_23_19_ladder;
        }
        float _2248;
        if (_1764 > 0.0)
        {
            _2248 = abs((1.0 - _1755) / _1764);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1755 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2248 = frontier_phi_35_30_ladder;
        }
        float _2250 = isnan(_1994) ? _1792 : (isnan(_1792) ? _1994 : min(_1792, _1994));
        float _2251 = isnan(_2248) ? _2250 : (isnan(_2250) ? _2248 : min(_2250, _2248));
        float _2255 = (_2251 * _1758) + _1747;
        float _2256 = (_2251 * _1761) + _1751;
        float _2257 = (_2251 * _1764) + _1755;
        float _2258 = _2251 * 9.9999997473787516355514526367188e-05;
        float _2260 = (-1.0) - _2258;
        float _2262 = _2258 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2257 > _2262) || ((_2257 < _2260) || ((_2256 > _2262) || ((_2256 < _2260) || ((_2255 < _2260) || (_2255 > _2262))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2385 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2257, cbModelParam._m0[9u].z, fma(_2256, cbModelParam._m0[9u].y, _2255 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2257, cbModelParam._m0[10u].z, fma(_2256, cbModelParam._m0[10u].y, _2255 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2257, cbModelParam._m0[11u].z, fma(_2256, cbModelParam._m0[11u].y, _2255 * cbModelParam._m0[11u].x))), _1698);
            frontier_phi_13_35_ladder = _2385.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2385.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2385.x * cbModelParam._m0[1u].y;
        }
        _1780 = frontier_phi_13_35_ladder_2;
        _1782 = frontier_phi_13_35_ladder_1;
        _1784 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1768 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_885, _886, _887), _1698);
        _1780 = _1768.x * cbModelParam._m0[1u].y;
        _1782 = _1768.y * cbModelParam._m0[1u].y;
        _1784 = _1768.z * cbModelParam._m0[1u].y;
    }
    float _1788 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _714);
    float _1789 = isnan(_1788) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1788 : min(cbModelParam._m0[25u].w, _1788));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1842 = fma(_949, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941)) + cbModelParam._m0[21u].w;
        float _1846 = fma(_949, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941)) + cbModelParam._m0[22u].w;
        float _1850 = fma(_949, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941)) + cbModelParam._m0[23u].w;
        float _1853 = fma(_887, cbModelParam._m0[21u].z, fma(_886, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885));
        float _1856 = fma(_887, cbModelParam._m0[22u].z, fma(_886, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885));
        float _1859 = fma(_887, cbModelParam._m0[23u].z, fma(_886, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885));
        float _1999;
        if (_1853 > 0.0)
        {
            _1999 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1999 = frontier_phi_25_21_ladder;
        }
        float _2275;
        if (_1856 > 0.0)
        {
            _2275 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2275 = frontier_phi_37_32_ladder;
        }
        float _2488;
        if (_1859 > 0.0)
        {
            _2488 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2488 = frontier_phi_46_43_ladder;
        }
        float _2490 = isnan(_2275) ? _1999 : (isnan(_1999) ? _2275 : min(_1999, _2275));
        float _2491 = isnan(_2488) ? _2490 : (isnan(_2490) ? _2488 : min(_2490, _2488));
        float _2495 = (_2491 * _1853) + _1842;
        float _2496 = (_2491 * _1856) + _1846;
        float _2497 = (_2491 * _1859) + _1850;
        float _2498 = _2491 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2498;
        float _2501 = _2498 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2497 > _2501) || ((_2497 < _2499) || ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 < _2499) || (_2495 > _2501))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2696 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2497, cbModelParam._m0[17u].z, fma(_2496, cbModelParam._m0[17u].y, _2495 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2497, cbModelParam._m0[18u].z, fma(_2496, cbModelParam._m0[18u].y, _2495 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2497, cbModelParam._m0[19u].z, fma(_2496, cbModelParam._m0[19u].y, _2495 * cbModelParam._m0[19u].x))), _1789);
            frontier_phi_22_46_ladder = _2696.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2696.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2696.x * cbModelParam._m0[1u].z;
        }
        _1878 = frontier_phi_22_46_ladder_2;
        _1880 = frontier_phi_22_46_ladder_1;
        _1882 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_885, _886, _887), _1789);
        _1878 = _1862.x * cbModelParam._m0[1u].z;
        _1880 = _1862.y * cbModelParam._m0[1u].z;
        _1882 = _1862.z * cbModelParam._m0[1u].z;
    }
    float _1895 = (((_912 * _862) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1878 - _1780)) + _1780);
    float _1897 = (((_912 * _864) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1880 - _1782)) + _1782);
    float _1899 = (((_912 * _865) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1882 - _1784)) + _1784);
    float _1902 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1897, cbSceneParam._m0[89u].y, _1895 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1897, cbSceneParam._m0[90u].y, _1895 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1897, cbSceneParam._m0[91u].y, _1895 * cbSceneParam._m0[91u].x));
    uvec4 _1918 = floatBitsToUint(cbInstanceData._m0[_837 + 5u]);
    uint _1920 = _1918.x * 14u;
    uint _1921 = _1920 + 13u;
    float _1928 = _877 + (-1.0);
    float _1933 = (cbLight._m0[_1921].x * _1928) + 1.0;
    float _1934 = (cbLight._m0[_1921].y * _1928) + 1.0;
    float _1935 = (cbLight._m0[_1921].z * _1928) + 1.0;
    float _1936 = (cbLight._m0[_1921].w * _1928) + 1.0;
    uint _1937 = _1920 + 5u;
    float _1943 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
    uint _1947 = _1920 + 4u;
    float _1953 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
    uint _1957 = _1920 | 1u;
    float _1968 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_711, _712, _713));
    float _1971 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_711, _712, _713));
    float _4092 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _4103 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1976 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * 0.3183098733425140380859375;
    float _1978 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.3183098733425140380859375;
    float _1985 = ((cbLight._m0[_1937].x * _1943) * _1978) + ((cbLight._m0[_1947].x * _1953) * _1976);
    float _1986 = ((_1943 * cbLight._m0[_1937].y) * _1978) + ((_1953 * cbLight._m0[_1947].y) * _1976);
    float _1987 = ((_1943 * cbLight._m0[_1937].z) * _1978) + ((_1953 * cbLight._m0[_1947].z) * _1976);
    uvec4 _1991 = floatBitsToUint(cbLight._m0[_1920 + 12u]);
    bool _1993 = _1991.x == 0u;
    float _2004;
    float _2006;
    float _2008;
    if (_1993)
    {
        _2004 = _1985;
        _2006 = _1986;
        _2008 = _1987;
    }
    else
    {
        uint _2012 = _1920 + 6u;
        float _2028 = (dot(vec3(cbLight._m0[_1920 + 2u].xyz), vec3(_711, _712, _713)) * 0.5) + 0.5;
        float _2029 = _2028 * _2028;
        float _4114 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2030 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2031 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2004 = (((cbLight._m0[_2012].x * 0.3183098733425140380859375) * _2030) * _2031) + _1985;
        _2006 = (((cbLight._m0[_2012].y * 0.3183098733425140380859375) * _2030) * _2031) + _1986;
        _2008 = (((cbLight._m0[_2012].z * 0.3183098733425140380859375) * _2030) * _2031) + _1987;
    }
    bool _2011 = _1991.y == 0u;
    float _2049;
    float _2051;
    float _2053;
    if (_2011)
    {
        _2049 = _2004;
        _2051 = _2006;
        _2053 = _2008;
    }
    else
    {
        uint _2219 = _1920 + 7u;
        float _2235 = (dot(vec3(cbLight._m0[_1920 + 3u].xyz), vec3(_711, _712, _713)) * 0.5) + 0.5;
        float _2236 = _2235 * _2235;
        float _4130 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2237 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2238 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
        _2049 = (((cbLight._m0[_2219].x * 0.3183098733425140380859375) * _2237) * _2238) + _2004;
        _2051 = (((cbLight._m0[_2219].y * 0.3183098733425140380859375) * _2237) * _2238) + _2006;
        _2053 = (((cbLight._m0[_2219].z * 0.3183098733425140380859375) * _2237) * _2238) + _2008;
    }
    uint _2056 = _1920 + 8u;
    float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _714) * 0.949999988079071044921875);
    float _2070 = _2069 * _2069;
    float _2071 = cbLight._m0[_1920].x + _791;
    float _2072 = cbLight._m0[_1920].y + _792;
    float _2073 = cbLight._m0[_1920].z + _793;
    float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
    float _2078 = _2077 * _2071;
    float _2079 = _2077 * _2072;
    float _2080 = _2077 * _2073;
    float _2081 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_1920].xyz));
    float _4146 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _4157 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _2085 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2086 = dot(vec3(_711, _712, _713), vec3(_2078, _2079, _2080));
    float _4168 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2089 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _2090 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_2078, _2079, _2080));
    float _4179 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2094 = _2070 * _2070;
    float _2098 = ((_2089 * _2089) * (_2094 + (-1.0))) + 1.0;
    float _2106 = exp2(log2(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * 5.0);
    float _2107 = 0.959999978542327880859375 - _859;
    float _2109 = 0.959999978542327880859375 - _860;
    float _2110 = 0.959999978542327880859375 - _861;
    float _2117 = 1.0 - _2070;
    float _2128 = (0.5 / (((_2085 * ((_2084 * _2117) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_2085 * _2117) + _2070) * _2084))) * _2084;
    float _4190 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2130 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2094 / ((_2098 * _2098) * 3.141590118408203125));
    uint _2141 = _1920 + 9u;
    float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1957].w)) * _714) * 0.949999988079071044921875);
    float _2153 = _2152 * _2152;
    float _2154 = cbLight._m0[_1957].x + _791;
    float _2155 = cbLight._m0[_1957].y + _792;
    float _2156 = cbLight._m0[_1957].z + _793;
    float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
    float _2161 = _2160 * _2154;
    float _2162 = _2160 * _2155;
    float _2163 = _2160 * _2156;
    float _2164 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_1957].xyz));
    float _4201 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2167 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2168 = dot(vec3(_711, _712, _713), vec3(_2161, _2162, _2163));
    float _4212 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2172 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_2161, _2162, _2163));
    float _4223 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2176 = _2153 * _2153;
    float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
    float _2187 = exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0);
    float _2194 = 1.0 - _2153;
    float _2204 = (0.5 / (((_2085 * ((_2167 * _2194) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_2085 * _2194) + _2153) * _2167))) * _2167;
    float _4234 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2206 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
    float _2216 = (((((_2187 * _2107) + _862) * cbLight._m0[_2141].x) * _2206) * _1943) + (((((_2106 * _2107) + _862) * cbLight._m0[_2056].x) * _2130) * _1953);
    float _2217 = (((((_2187 * _2109) + _864) * cbLight._m0[_2141].y) * _2206) * _1943) + (((((_2106 * _2109) + _864) * cbLight._m0[_2056].y) * _2130) * _1953);
    float _2218 = (((((_2187 * _2110) + _865) * cbLight._m0[_2141].z) * _2206) * _1943) + (((((_2106 * _2110) + _865) * cbLight._m0[_2056].z) * _2130) * _1953);
    float _2280;
    float _2282;
    float _2284;
    if (_1993)
    {
        _2280 = _2216;
        _2282 = _2217;
        _2284 = _2218;
    }
    else
    {
        uint _2286 = _1920 + 2u;
        uint _2290 = _1920 + 10u;
        float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2286].w)) * _714) * 0.949999988079071044921875);
        float _2305 = _2304 * _2304;
        float _2306 = cbLight._m0[_2286].x + _791;
        float _2307 = cbLight._m0[_2286].y + _792;
        float _2308 = cbLight._m0[_2286].z + _793;
        float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
        float _2313 = _2312 * _2306;
        float _2314 = _2312 * _2307;
        float _2315 = _2312 * _2308;
        float _2316 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2286].xyz));
        float _4245 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2319 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2320 = dot(vec3(_711, _712, _713), vec3(_2313, _2314, _2315));
        float _4256 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2323 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2324 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_2313, _2314, _2315));
        float _4267 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2328 = _2305 * _2305;
        float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
        float _2339 = exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0);
        float _2346 = 1.0 - _2305;
        float _2356 = (0.5 / (((_2085 * ((_2319 * _2346) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_2085 * _2346) + _2305) * _2319))) * _2319;
        float _4278 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2358 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
        float _2359 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2280 = (((((_2339 * _2107) + _862) * cbLight._m0[_2290].x) * _2358) * _2359) + _2216;
        _2282 = (((((_2339 * _2109) + _864) * cbLight._m0[_2290].y) * _2358) * _2359) + _2217;
        _2284 = (((((_2339 * _2110) + _865) * cbLight._m0[_2290].z) * _2358) * _2359) + _2218;
    }
    float _2394;
    float _2396;
    float _2398;
    if (_2011)
    {
        _2394 = _2280;
        _2396 = _2282;
        _2398 = _2284;
    }
    else
    {
        uint _2405 = _1920 + 3u;
        uint _2409 = _1920 + 11u;
        float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _714) * 0.949999988079071044921875);
        float _2424 = _2423 * _2423;
        float _2425 = cbLight._m0[_2405].x + _791;
        float _2426 = cbLight._m0[_2405].y + _792;
        float _2427 = cbLight._m0[_2405].z + _793;
        float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
        float _2432 = _2431 * _2425;
        float _2433 = _2431 * _2426;
        float _2434 = _2431 * _2427;
        float _2435 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2405].xyz));
        float _4294 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2439 = dot(vec3(_711, _712, _713), vec3(_2432, _2433, _2434));
        float _4305 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2443 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2432, _2433, _2434));
        float _4316 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2447 = _2424 * _2424;
        float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
        float _2458 = exp2(log2(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * 5.0);
        float _2465 = 1.0 - _2424;
        float _2475 = (0.5 / (((_2085 * ((_2438 * _2465) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2085 * _2465) + _2424) * _2438))) * _2438;
        float _4327 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2477 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
        float _2478 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
        _2394 = (((((_2458 * _2107) + _862) * cbLight._m0[_2409].x) * _2477) * _2478) + _2280;
        _2396 = (((((_2458 * _2109) + _864) * cbLight._m0[_2409].y) * _2477) * _2478) + _2282;
        _2398 = (((((_2458 * _2110) + _865) * cbLight._m0[_2409].z) * _2477) * _2478) + _2284;
    }
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    if (_1918.y == 0u)
    {
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2554 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2553;
        float _2555 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2553;
        float _2556 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2553;
        uvec4 _2568 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2569 = _2568.x;
        uint _2580 = uint((float(_2568.y) * floor(float(uint(cbSceneParam._m0[85u].y * _800) / _2569))) + floor(float(uint(cbSceneParam._m0[85u].x * _799) / _2569)));
        float _2590 = (log2(_2556 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2591 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        uint _2594 = uint(isnan(14.0) ? _2591 : (isnan(_2591) ? 14.0 : min(_2591, 14.0)));
        uvec4 _2599 = texelFetch(g_lightClusterGridBuffer, int(((_2594 << 2u) + (_2580 << 6u)) >> 2u));
        uint _2600 = _2599.x;
        uint _2601 = _2568.z;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        if (((((1u << ((_2601 >> 4u) & 15u)) + 4294967295u) & _2600) == 0u) || ((_2601 & 240u) == 0u))
        {
            _2701 = 0.0;
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
        }
        else
        {
            float _2702;
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            uint _2852 = 0u;
            uint _2861;
            bool _2862;
            for (;;)
            {
                _2861 = texelFetch(g_lightClassification, int((((_2594 << 5u) + (_2580 << 9u)) + (_2852 << 2u)) >> 2u)).x;
                _2862 = _2861 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2862)
                {
                    frontier_phi_61_pred = _2846;
                    frontier_phi_61_pred_1 = _2851;
                    frontier_phi_61_pred_2 = _2850;
                    frontier_phi_61_pred_3 = _2849;
                    frontier_phi_61_pred_4 = _2848;
                    frontier_phi_61_pred_5 = _2847;
                }
                else
                {
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    uint _2976;
                    _2970 = _2846;
                    _2971 = _2847;
                    _2972 = _2848;
                    _2973 = _2849;
                    _2974 = _2850;
                    _2975 = _2851;
                    _2976 = _2861;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    for (;;)
                    {
                        uint _2980 = uint(findLSB(_2976)) + (_2852 << 5u);
                        uint _2977 = (_2976 + 4294967295u) & _2976;
                        uint _2982 = _2980 * 48u;
                        vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 3u)).x));
                        uint _3002 = (_2980 * 48u) + 4u;
                        vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 3u)).x));
                        uint _3021 = (_2980 * 48u) + 8u;
                        vec3 _3032 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x));
                        float _3036 = _2996.x - _2554;
                        float _3037 = _2996.y - _2555;
                        float _3038 = _2996.z - _2556;
                        float _3039 = dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038));
                        float _3042 = inversesqrt(_3039);
                        float _3043 = _3042 * _3036;
                        float _3044 = _3042 * _3037;
                        float _3045 = _3042 * _3038;
                        float _3046 = dot(vec3(_818, _821, _824), vec3(_3043, _3044, _3045));
                        float _3051 = 1.0 - (_3039 * _2996.w);
                        float _4353 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3052 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3053 = sqrt(_3039) * _3015.w;
                        float _3056 = 1.39999997615814208984375 / (_3053 + 1.39999997615814208984375);
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _3046) + _3057;
                        float _3063 = _3053 * _3053;
                        float _3067 = ((isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))) * _3052) / ((_3063 * 0.699999988079071044921875) + 1.0);
                        float _3071 = (-0.0) - _2554;
                        float _3072 = (-0.0) - _2555;
                        float _3073 = (-0.0) - _2556;
                        float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
                        float _3078 = _3077 * _3071;
                        float _3079 = _3077 * _3072;
                        float _3080 = _3077 * _3073;
                        float _3088 = exp2(log2(1.0 / ((_3063 * 3.5) + 5.0)) * 0.25);
                        float _3089 = 1.0 - _893;
                        float _3096 = sqrt(1.0 - ((1.0 - (_3089 * _3089)) * (1.0 - (_3088 * _3088))));
                        float _3097 = _3096 * _3096;
                        float _3098 = _3097 * _3097;
                        float _3099 = _3078 + _3043;
                        float _3100 = _3079 + _3044;
                        float _3101 = _3080 + _3045;
                        float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                        float _3109 = dot(vec3(_818, _821, _824), vec3(_3078, _3079, _3080));
                        float _4369 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3112 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3113 = dot(vec3(_818, _821, _824), vec3(_3105 * _3099, _3105 * _3100, _3105 * _3101));
                        float _4380 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3116 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _3120 = ((_3116 * _3116) * (_3098 + (-1.0))) + 1.0;
                        float _3121 = _3056 * _3097;
                        float _3122 = _3121 * _3121;
                        float _3125 = ((1.0 - _3122) * _3046) + _3122;
                        float _4391 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3126 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                        float _3127 = 1.0 - _3097;
                        float _3137 = (0.5 / (((_3126 * ((_3112 * _3127) + _3097)) + 9.9999999392252902907785028219223e-09) + (((_3126 * _3127) + _3097) * _3112))) * _3126;
                        float _4402 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3148 = (((_3098 * 3.1415927410125732421875) * (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) / ((_3120 * _3120) * ((_3063 * 2.1991131305694580078125) + 3.141590118408203125))) * _3052;
                        _2905 = (_3067 * _3015.x) + _2973;
                        _2906 = (_3067 * _3015.y) + _2974;
                        _2907 = (_3067 * _3015.z) + _2975;
                        _2902 = (_3148 * _3032.x) + _2970;
                        _2903 = (_3148 * _3032.y) + _2971;
                        _2904 = (_3148 * _3032.z) + _2972;
                        if (_2977 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2970 = _2902;
                            _2971 = _2903;
                            _2972 = _2904;
                            _2973 = _2905;
                            _2974 = _2906;
                            _2975 = _2907;
                            _2976 = _2977;
                        }
                    }
                    frontier_phi_61_pred = _2902;
                    frontier_phi_61_pred_1 = _2907;
                    frontier_phi_61_pred_2 = _2906;
                    frontier_phi_61_pred_3 = _2905;
                    frontier_phi_61_pred_4 = _2904;
                    frontier_phi_61_pred_5 = _2903;
                }
                _2702 = frontier_phi_61_pred;
                _2712 = frontier_phi_61_pred_1;
                _2710 = frontier_phi_61_pred_2;
                _2708 = frontier_phi_61_pred_3;
                _2706 = frontier_phi_61_pred_4;
                _2704 = frontier_phi_61_pred_5;
                uint _2853 = _2852 + 1u;
                if (_2853 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2846 = _2702;
                    _2847 = _2704;
                    _2848 = _2706;
                    _2849 = _2708;
                    _2850 = _2710;
                    _2851 = _2712;
                    _2852 = _2853;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2701 = _2702;
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
        }
        uvec4 _2715 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2716 = _2715.z;
        uint _2718 = (_2716 >> 8u) & 15u;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        if (((4294967295u << _2718) & _2600) == 0u)
        {
            _2814 = _2701;
            _2816 = _2703;
            _2818 = _2705;
            _2820 = _2707;
            _2822 = _2709;
            _2824 = _2711;
        }
        else
        {
            float _2839 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
            float _2840 = _2839 * _2554;
            float _2841 = _2839 * _2555;
            float _2842 = _2839 * _2556;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2718 < ((_2716 >> 12u) & 15u))
            {
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2953 = _2701;
                float _2954 = _2703;
                float _2955 = _2705;
                float _2956 = _2707;
                float _2957 = _2709;
                float _2958 = _2711;
                uint _2959 = _2718;
                uint _2968;
                bool _2969;
                for (;;)
                {
                    _2968 = texelFetch(g_lightClassification, int((((_2594 << 5u) + (_2580 << 9u)) + (_2959 << 2u)) >> 2u)).x;
                    _2969 = _2968 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2969)
                    {
                        frontier_phi_67_pred = _2956;
                        frontier_phi_67_pred_1 = _2957;
                        frontier_phi_67_pred_2 = _2958;
                        frontier_phi_67_pred_3 = _2955;
                        frontier_phi_67_pred_4 = _2954;
                        frontier_phi_67_pred_5 = _2953;
                    }
                    else
                    {
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3166 = _2953;
                        float _3167 = _2954;
                        float _3168 = _2955;
                        float _3169 = _2956;
                        float _3170 = _2957;
                        float _3171 = _2958;
                        uint _3172 = _2968;
                        uint _3173;
                        vec4 _3198;
                        float _3199;
                        vec4 _3214;
                        vec3 _3226;
                        vec4 _3241;
                        vec4 _3256;
                        float _3303;
                        bool _3304;
                        for (;;)
                        {
                            uint _3183 = ((_2959 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3172));
                            _3173 = (_3172 + 4294967295u) & _3172;
                            uint _3185 = _3183 * 40u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            _3199 = _3198.w;
                            uint _3201 = (_3183 * 40u) + 4u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3216 = (_3183 * 40u) + 8u;
                            _3226 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x));
                            uint _3228 = (_3183 * 40u) + 16u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3243 = (_3183 * 40u) + 20u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3259 = (_3183 * 40u) + 24u;
                            vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3278 = (_3183 * 40u) + 28u;
                            vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            _3303 = fma(_2556, _3291.z, fma(_2555, _3291.y, _3291.x * _2554)) + _3291.w;
                            _3304 = !((fma(_2556, _3272.z, fma(_2555, _3272.y, _3272.x * _2554)) + _3272.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3304)
                            {
                                float _3331 = _3198.x - _2554;
                                float _3332 = _3198.y - _2555;
                                float _3333 = _3198.z - _2556;
                                float _3334 = dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333));
                                float _3337 = inversesqrt(_3334);
                                float _3338 = _3337 * _3331;
                                float _3339 = _3337 * _3332;
                                float _3340 = _3337 * _3333;
                                float _3344 = 1.0 - (_3334 / (_3199 * _3199));
                                float _4413 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3345 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3349 = sqrt(_3334) * _3214.w;
                                float _3351 = 1.39999997615814208984375 / (_3349 + 1.39999997615814208984375);
                                float _3352 = _3351 * _3351;
                                float _3355 = ((1.0 - _3352) * dot(vec3(_3338, _3339, _3340), vec3(_818, _821, _824))) + _3352;
                                float _3358 = _3349 * _3349;
                                float _3362 = (fma(_2556, _3241.z, fma(_2555, _3241.y, _3241.x * _2554)) + _3241.w) / _3303;
                                float _3363 = (fma(_2556, _3256.z, fma(_2555, _3256.y, _3256.x * _2554)) + _3256.w) / _3303;
                                float _3367 = 1.0 - dot(vec2(_3362, _3363), vec2(_3362, _3363));
                                float _4429 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3369 = _3368 * (((isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0))) * _3345) / ((_3358 * 0.699999988079071044921875) + 1.0));
                                float _3381 = exp2(log2(1.0 / ((_3358 * 3.5) + 5.0)) * 0.25);
                                float _3382 = 1.0 - _893;
                                float _3389 = sqrt(1.0 - ((1.0 - (_3382 * _3382)) * (1.0 - (_3381 * _3381))));
                                float _3390 = _3389 * _3389;
                                float _3391 = _3390 * _3390;
                                float _3392 = _3338 - _2840;
                                float _3393 = _3339 - _2841;
                                float _3394 = _3340 - _2842;
                                float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                                float _3402 = dot(vec3(_818, _821, _824), vec3((-0.0) - _2840, (-0.0) - _2841, (-0.0) - _2842));
                                float _4440 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3405 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3406 = dot(vec3(_818, _821, _824), vec3(_3398 * _3392, _3398 * _3393, _3398 * _3394));
                                float _4451 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3409 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3413 = ((_3409 * _3409) * (_3391 + (-1.0))) + 1.0;
                                float _3414 = _3351 * _3390;
                                float _3415 = _3414 * _3414;
                                float _3421 = ((1.0 - _3415) * dot(vec3(_818, _821, _824), vec3(_3338, _3339, _3340))) + _3415;
                                float _4462 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3423 = 1.0 - _3390;
                                float _3433 = (0.5 / (((_3422 * ((_3405 * _3423) + _3390)) + 9.9999999392252902907785028219223e-09) + (((_3422 * _3423) + _3390) * _3405))) * _3422;
                                float _4473 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3443 = (_3368 * _3345) * (((_3391 * 3.1415927410125732421875) * (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) / ((_3413 * _3413) * ((_3358 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3443 * _3226.x;
                                frontier_phi_73_pred_1 = _3443 * _3226.y;
                                frontier_phi_73_pred_2 = _3369 * _3214.z;
                                frontier_phi_73_pred_3 = _3369 * _3214.y;
                                frontier_phi_73_pred_4 = _3369 * _3214.x;
                                frontier_phi_73_pred_5 = _3443 * _3226.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3447 = frontier_phi_73_pred;
                            _3448 = frontier_phi_73_pred_1;
                            _3452 = frontier_phi_73_pred_2;
                            _3451 = frontier_phi_73_pred_3;
                            _3450 = frontier_phi_73_pred_4;
                            _3449 = frontier_phi_73_pred_5;
                            _3156 = _3450 + _3169;
                            _3157 = _3451 + _3170;
                            _3158 = _3452 + _3171;
                            _3153 = _3447 + _3166;
                            _3154 = _3448 + _3167;
                            _3155 = _3449 + _3168;
                            if (_3173 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3173;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3156;
                        frontier_phi_67_pred_1 = _3157;
                        frontier_phi_67_pred_2 = _3158;
                        frontier_phi_67_pred_3 = _3155;
                        frontier_phi_67_pred_4 = _3154;
                        frontier_phi_67_pred_5 = _3153;
                    }
                    _2821 = frontier_phi_67_pred;
                    _2823 = frontier_phi_67_pred_1;
                    _2825 = frontier_phi_67_pred_2;
                    _2819 = frontier_phi_67_pred_3;
                    _2817 = frontier_phi_67_pred_4;
                    _2815 = frontier_phi_67_pred_5;
                    uint _2960 = _2959 + 1u;
                    if (_2960 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2953 = _2815;
                        _2954 = _2817;
                        _2955 = _2819;
                        _2956 = _2821;
                        _2957 = _2823;
                        _2958 = _2825;
                        _2959 = _2960;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2823;
                frontier_phi_55_56_ladder_1 = _2825;
                frontier_phi_55_56_ladder_2 = _2821;
                frontier_phi_55_56_ladder_3 = _2819;
                frontier_phi_55_56_ladder_4 = _2817;
                frontier_phi_55_56_ladder_5 = _2815;
            }
            else
            {
                frontier_phi_55_56_ladder = _2709;
                frontier_phi_55_56_ladder_1 = _2711;
                frontier_phi_55_56_ladder_2 = _2707;
                frontier_phi_55_56_ladder_3 = _2705;
                frontier_phi_55_56_ladder_4 = _2703;
                frontier_phi_55_56_ladder_5 = _2701;
            }
            _2814 = frontier_phi_55_56_ladder_5;
            _2816 = frontier_phi_55_56_ladder_4;
            _2818 = frontier_phi_55_56_ladder_3;
            _2820 = frontier_phi_55_56_ladder_2;
            _2822 = frontier_phi_55_56_ladder;
            _2824 = frontier_phi_55_56_ladder_1;
        }
        float _2829 = isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0));
        _2613 = (_2829 * _2820) + _2049;
        _2615 = (_2829 * _2822) + _2051;
        _2617 = (_2829 * _2824) + _2053;
        _2619 = ((_2814 * _862) * _2829) + _2394;
        _2621 = ((_2816 * _864) * _2829) + _2396;
        _2623 = ((_2818 * _865) * _2829) + _2398;
    }
    else
    {
        _2613 = _2049;
        _2615 = _2051;
        _2617 = _2053;
        _2619 = _2394;
        _2621 = _2396;
        _2623 = _2398;
    }
    float _4489 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4500 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4511 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    uint _2643 = _837 + 6u;
    float _2651 = _799 / cbSceneParam._m0[86u].x;
    float _2652 = _800 / cbSceneParam._m0[86u].y;
    vec4 _2666 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2651, _2652, (log2((isnan(cbSceneParam._m0[77u].w) ? _734 : (isnan(_734) ? cbSceneParam._m0[77u].w : min(_734, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2668 = _2666.x;
    float _2669 = _2666.y;
    float _2670 = _2666.z;
    float _2671 = _2666.w;
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    if (_734 > cbSceneParam._m0[78u].w)
    {
        float _2726 = isnan(_734) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _734 : min(cbSceneParam._m0[80u].w, _734));
        float _2727 = _2726 / _734;
        float _2738 = _2727 * _784;
        float _2739 = _785 * _2727;
        float _2740 = (-0.0) - _2739;
        float _2742 = _2727 * _786;
        float _2744 = (cbSceneParam._m0[77u].w * _2740) / _2726;
        float _2745 = _2744 + cbSceneParam._m0[79u].w;
        float _2746 = cbSceneParam._m0[79u].w - _2739;
        float _2752 = sqrt(((_2738 * _2738) + (_2739 * _2739)) + (_2742 * _2742));
        float _2755 = (1.0 - (cbSceneParam._m0[77u].w / _2726)) * _2752;
        float _2760 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2762 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2915;
        if (abs((_2740 - _2744) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2915 = ((((_2745 > 0.0) ? exp2(_2760 * _2745) : (2.0 - exp2(_2762 * _2745))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2755;
        }
        else
        {
            float _2875 = 1.0 / cbSceneParam._m0[80u].x;
            float _2876 = isnan(_2746) ? _2745 : (isnan(_2745) ? _2746 : max(_2745, _2746));
            float _2877 = isnan(_2746) ? _2745 : (isnan(_2745) ? _2746 : min(_2745, _2746));
            float _2886 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : min(_2876, 0.0));
            float _2887 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : min(_2877, 0.0));
            _2915 = ((abs(_2752 / _2740) * cbSceneParam._m0[80u].y) * ((((_2886 - _2887) * 2.0) - ((exp2(_2760 * (isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0)))) - exp2(_2760 * (isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0))))) * _2875)) - ((exp2(_2762 * _2886) - exp2(_2762 * _2887)) * _2875))) + (_2755 * cbSceneParam._m0[80u].z);
        }
        vec4 _2917 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2651, _2652, 1.0), 0.0);
        float _2926 = exp2((_2915 * (-1.44269502162933349609375)) * (1.0 - _2917.w));
        float _2927 = log2(_2926);
        float _2943 = log2(_2671);
        _2764 = (exp2(_2943 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].x)) * _2917.x) / cbSceneParam._m0[78u].x)) + _2668;
        _2766 = (exp2(_2943 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].y)) * _2917.y) / cbSceneParam._m0[78u].y)) + _2669;
        _2768 = (exp2(_2943 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].z)) * _2917.z) / cbSceneParam._m0[78u].z)) + _2670;
        _2770 = _2926 * _2671;
    }
    else
    {
        _2764 = _2668;
        _2766 = _2669;
        _2768 = _2670;
        _2770 = _2671;
    }
    float _2782 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2783 = _2782 == 3.0;
    float _2784 = log2(_2770);
    float _2791 = exp2(_2784 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2613 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _877))) + ((_2619 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1687)) * cbPerFrame._m0[3u].x));
    float _2792 = exp2(_2784 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2615 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _877))) + ((_2621 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1687)) * cbPerFrame._m0[3u].x));
    float _2793 = exp2(_2784 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2617 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _877))) + ((_2623 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1687)) * cbPerFrame._m0[3u].x));
    float _2802 = (_2782 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2802 * (_2783 ? _2791 : (_2791 + (cbSceneParam._m0[72u].w * _2764)));
    SV_Target.y = _2802 * (_2783 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2766)));
    SV_Target.z = _2802 * (_2783 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2768)));
    SV_Target.w = cbInstanceData._m0[_2643].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2643].w;
}


