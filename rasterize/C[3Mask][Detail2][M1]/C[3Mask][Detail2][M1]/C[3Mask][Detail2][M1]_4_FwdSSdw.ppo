#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1254;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _250.x * cbMtdParam._m0[10u].x;
    float _257 = _250.y * cbMtdParam._m0[10u].y;
    float _258 = _250.z * cbMtdParam._m0[10u].z;
    vec4 _276 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _326 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _336 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _326)) + 1.0;
    float _3607 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _337 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _344 = (_337 * ((_276.x * cbMtdParam._m0[11u].x) - _256)) + _256;
    float _345 = (_337 * ((_276.y * cbMtdParam._m0[11u].y) - _257)) + _257;
    float _346 = (_337 * ((_276.z * cbMtdParam._m0[11u].z) - _258)) + _258;
    vec4 _364 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _395 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _326)) + 1.0;
    float _3618 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _403 = (_396 * ((_364.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _404 = (_396 * ((_364.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _405 = (_396 * ((_364.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _423 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _448 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _326)) + 1.0;
    float _3629 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    vec4 _477 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _485 = ((((_449 * ((_423.x * cbMtdParam._m0[13u].x) - _403)) + _403) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _477.x;
    float _488 = ((((_449 * ((_423.y * cbMtdParam._m0[13u].y) - _404)) + _404) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _477.y;
    float _491 = ((((_449 * ((_423.z * cbMtdParam._m0[13u].z) - _405)) + _405) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _477.z;
    vec4 _504 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _506 = _504.x;
    float _524 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _506) * _337) + _506;
    float _541 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _524) * _396) + _524;
    float _558 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _541) * _449) + _541;
    vec4 _570 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _572 = _570.x;
    float _573 = _570.y;
    float _579 = cbMtdParam._m0[18u].y * _570.z;
    vec4 _591 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _600 = (((cbMtdParam._m0[18u].x * _591.z) - _579) * _337) + _579;
    vec4 _613 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _624 = (((cbMtdParam._m0[17u].w * _613.z) - _600) * _396) + _600;
    vec4 _637 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _646 = (((cbMtdParam._m0[17u].z * _637.z) - _624) * _449) + _624;
    vec4 _659 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _672 = ((_591.x - _572) * _337) + _572;
    float _673 = ((_591.y - _573) * _337) + _573;
    float _678 = ((_613.x - _672) * _396) + _672;
    float _679 = ((_613.y - _673) * _396) + _673;
    float _688 = ((((_637.x - _678) * _449) + _678) * 2.0) + (-1.0);
    float _689 = ((((_637.y - _679) * _449) + _679) * 2.0) + (-1.0);
    float _690 = dot(vec2(_688, _689), vec2(_688, _689));
    float _3640 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _695 = sqrt(1.0 - (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))));
    float _698 = (((_659.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _688;
    float _699 = (((_659.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _689;
    float _702 = fma(_695, _220 * NORMAL.x, fma(_699, _227 * TANGENT.x, (_213 * _205) * _698));
    float _705 = fma(_695, _220 * NORMAL.y, fma(_699, _227 * TANGENT.y, (_213 * _206) * _698));
    float _708 = fma(_695, _220 * NORMAL.z, fma(_699, _227 * TANGENT.z, (_213 * _207) * _698));
    float _712 = inversesqrt(dot(vec3(_702, _705, _708), vec3(_702, _705, _708)));
    float _713 = _712 * _702;
    float _714 = _712 * _705;
    float _715 = _712 * _708;
    float _3651 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _716 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3673 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3684 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3695 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _720 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _736 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _786 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _776);
    float _787 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _776);
    float _788 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _776);
    float _792 = inversesqrt(dot(vec3(_786, _787, _788), vec3(_786, _787, _788)));
    float _793 = _786 * _792;
    float _794 = _787 * _792;
    float _795 = _788 * _792;
    float _801 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _802 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _820 = fma(_715, cbSceneParam._m0[5u].z, fma(_714, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _713));
    float _823 = fma(_715, cbSceneParam._m0[6u].z, fma(_714, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _713));
    float _826 = fma(_715, cbSceneParam._m0[7u].z, fma(_714, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _713));
    uint _839 = uint(roundEven(NORMAL.w)) * 13u;
    uint _841 = (_839 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _847 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_841].x;
    float _848 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_841].y;
    float _849 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) * cbInstanceData._m0[_841].z;
    float _3706 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _853 = 1.0 - _720;
    float _854 = _850 * _853;
    float _855 = _851 * _853;
    float _856 = _852 * _853;
    float _861 = (_850 + (-0.039999999105930328369140625)) * _720;
    float _862 = (_851 + (-0.039999999105930328369140625)) * _720;
    float _863 = (_852 + (-0.039999999105930328369140625)) * _720;
    float _864 = _861 + 0.039999999105930328369140625;
    float _866 = _862 + 0.039999999105930328369140625;
    float _867 = _863 + 0.039999999105930328369140625;
    vec4 _876 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _801, cbSceneParam._m0[86u].y * _802));
    float _879 = _876.x * TEXCOORD_5.w;
    float _880 = dot(vec3(_713, _714, _715), vec3(_793, _794, _795));
    float _883 = _880 * 2.0;
    float _887 = (_883 * _713) - _793;
    float _888 = (_883 * _714) - _794;
    float _889 = (_883 * _715) - _795;
    float _893 = abs(dot(vec3(_793, _794, _795), vec3(_713, _714, _715)));
    float _3739 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _895 = sqrt(_716);
    float _908 = exp2((_895 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_895 * 3.0));
    float _914 = (1.0 - _908) * ((_895 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _915 = _908 * _895;
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1253;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _978 = fma(_951, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943));
        float _982 = fma(_951, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943));
        float _986 = fma(_951, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943));
        float _1011 = _943 + _713;
        float _1012 = _947 + _714;
        float _1013 = _951 + _715;
        float _1023 = fma(_1013, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1011)) - _978;
        float _1024 = fma(_1013, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1011)) - _982;
        float _1025 = fma(_1013, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1011)) - _986;
        float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
        float _1042 = ((_1029 * _1023) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_978 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1029 * _1024) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_982 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1029 * _1025) / cbModelParam._m0[34u].z) + ((((((_986 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        float _1081 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1047.x + (-0.5));
        float _1083 = _1081 * (_1047.y + (-0.5));
        float _1084 = _1081 * (_1047.z + (-0.5));
        float _1091 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1054.x + (-0.5));
        float _1093 = _1091 * (_1054.y + (-0.5));
        float _1094 = _1091 * (_1054.z + (-0.5));
        float _1101 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1061.x + (-0.5));
        float _1103 = _1101 * (_1061.y + (-0.5));
        float _1104 = _1101 * (_1061.z + (-0.5));
        float _1111 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1068.x + (-0.5));
        float _1113 = _1111 * (_1068.y + (-0.5));
        float _1114 = _1111 * (_1068.z + (-0.5));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = _1082 * 0.5;
        float _1119 = _1092 * 0.5;
        float _1120 = _1102 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1135 = (dot(vec3(_713, _714, _715), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1145 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3787 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1147 + 1.0))) + _1152) * _1115;
        float _1162 = _1083 * 0.5;
        float _1163 = _1093 * 0.5;
        float _1164 = _1103 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_713, _714, _715), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3820 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1189 + 1.0))) + _1194) * _1116;
        float _1204 = _1084 * 0.5;
        float _1205 = _1094 * 0.5;
        float _1206 = _1104 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_713, _714, _715), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3853 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1231 + 1.0))) + _1236) * _1117;
        _1253 = _1084;
        _1255 = _1083;
        _1256 = _1082;
        _1257 = _1094;
        _1258 = _1093;
        _1259 = _1092;
        _1260 = _1104;
        _1261 = _1103;
        _1262 = _1102;
        _1263 = _1117;
        _1264 = _1116;
        _1265 = _1115;
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
    }
    else
    {
        _1253 = _1254;
        _1255 = _1254;
        _1256 = _1254;
        _1257 = _1254;
        _1258 = _1254;
        _1259 = _1254;
        _1260 = _1254;
        _1261 = _1254;
        _1262 = _1254;
        _1263 = _1254;
        _1264 = _1254;
        _1265 = _1254;
        _1266 = 0.0;
        _1267 = 0.0;
        _1268 = 0.0;
    }
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1294 = fma(_951, cbModelParam._m0[30u].z, fma(_947, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943));
        float _1298 = fma(_951, cbModelParam._m0[31u].z, fma(_947, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943));
        float _1302 = fma(_951, cbModelParam._m0[32u].z, fma(_947, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943));
        float _1325 = _943 + _713;
        float _1326 = _947 + _714;
        float _1327 = _951 + _715;
        float _1337 = fma(_1327, cbModelParam._m0[30u].z, fma(_1326, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1325)) - _1294;
        float _1338 = fma(_1327, cbModelParam._m0[31u].z, fma(_1326, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1325)) - _1298;
        float _1339 = fma(_1327, cbModelParam._m0[32u].z, fma(_1326, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1325)) - _1302;
        float _1343 = inversesqrt(dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339)));
        float _1356 = ((_1343 * _1337) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1294 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1357 = ((_1343 * _1338) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1298 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1343 * _1339) / cbModelParam._m0[35u].z) + ((((((_1302 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        float _1393 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1360.x + (-0.5));
        float _1395 = _1393 * (_1360.y + (-0.5));
        float _1396 = _1393 * (_1360.z + (-0.5));
        float _1403 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1367.x + (-0.5));
        float _1405 = _1403 * (_1367.y + (-0.5));
        float _1406 = _1403 * (_1367.z + (-0.5));
        float _1413 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1374.x + (-0.5));
        float _1415 = _1413 * (_1374.y + (-0.5));
        float _1416 = _1413 * (_1374.z + (-0.5));
        float _1423 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1381.x + (-0.5));
        float _1425 = _1423 * (_1381.y + (-0.5));
        float _1426 = _1423 * (_1381.z + (-0.5));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = _1394 * 0.5;
        float _1431 = _1404 * 0.5;
        float _1432 = _1414 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_713, _714, _715), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _3916 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1457 + 1.0))) + _1462) * _1427;
        float _1472 = _1395 * 0.5;
        float _1473 = _1405 * 0.5;
        float _1474 = _1415 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_713, _714, _715), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _3949 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1499 + 1.0))) + _1504) * _1428;
        float _1514 = _1396 * 0.5;
        float _1515 = _1406 * 0.5;
        float _1516 = _1416 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_713, _714, _715), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _3982 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1541 + 1.0))) + _1546) * _1429;
        _1563 = _1396;
        _1564 = _1395;
        _1565 = _1394;
        _1566 = _1406;
        _1567 = _1405;
        _1568 = _1404;
        _1569 = _1416;
        _1570 = _1415;
        _1571 = _1414;
        _1572 = _1429;
        _1573 = _1428;
        _1574 = _1427;
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
    }
    else
    {
        _1563 = _1254;
        _1564 = _1254;
        _1565 = _1254;
        _1566 = _1254;
        _1567 = _1254;
        _1568 = _1254;
        _1569 = _1254;
        _1570 = _1254;
        _1571 = _1254;
        _1572 = _1254;
        _1573 = _1254;
        _1574 = _1254;
        _1575 = 0.0;
        _1576 = 0.0;
        _1577 = 0.0;
    }
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1266)) + _1266;
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1267)) + _1267;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1268)) + _1268;
    float _1610 = fma(_1589, cbSceneParam._m0[89u].z, fma(_1588, cbSceneParam._m0[89u].y, _1587 * cbSceneParam._m0[89u].x));
    float _1613 = fma(_1589, cbSceneParam._m0[90u].z, fma(_1588, cbSceneParam._m0[90u].y, _1587 * cbSceneParam._m0[90u].x));
    float _1616 = fma(_1589, cbSceneParam._m0[91u].z, fma(_1588, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1587));
    float _1631 = _887 * 0.5;
    float _1632 = _888 * 0.5;
    float _1633 = _889 * 0.5;
    float _1634 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1637 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1640 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1674;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1647 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1253, _1257, _1260, _1263));
        float _1651 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1255, _1258, _1261, _1264));
        float _1655 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1256, _1259, _1262, _1265));
        float _1662 = dot(vec4(cbModelParam._m0[39u]), vec4(_1631, _1632, _1633, 1.0));
        _1674 = dot(vec3(isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1662) ? 0.0 : (isnan(0.0) ? _1662 : max(0.0, _1662))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1674 = 1.0;
    }
    float _1685;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1676 = dot(vec4(cbModelParam._m0[40u]), vec4(_1631, _1632, _1633, 1.0));
        _1685 = dot(vec3(isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1676) ? 0.0 : (isnan(0.0) ? _1676 : max(0.0, _1676))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1685 = 1.0;
    }
    float _1689 = (_1685 * cbModelParam._m0[1u].x) + (_1674 * (1.0 - cbModelParam._m0[1u].x));
    float _1699 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _716);
    float _1700 = isnan(_1699) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1699 : min(cbModelParam._m0[25u].z, _1699));
    float _1782;
    float _1784;
    float _1786;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1749 = fma(_951, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943)) + cbModelParam._m0[13u].w;
        float _1753 = fma(_951, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943)) + cbModelParam._m0[14u].w;
        float _1757 = fma(_951, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943)) + cbModelParam._m0[15u].w;
        float _1760 = fma(_889, cbModelParam._m0[13u].z, fma(_888, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _887));
        float _1763 = fma(_889, cbModelParam._m0[14u].z, fma(_888, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _887));
        float _1766 = fma(_889, cbModelParam._m0[15u].z, fma(_888, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _887));
        float _1794;
        if (_1760 > 0.0)
        {
            _1794 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1794 = frontier_phi_14_12_ladder;
        }
        float _2017;
        if (_1763 > 0.0)
        {
            _2017 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2017 = frontier_phi_23_19_ladder;
        }
        float _2274;
        if (_1766 > 0.0)
        {
            _2274 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2274 = frontier_phi_35_30_ladder;
        }
        float _2276 = isnan(_2017) ? _1794 : (isnan(_1794) ? _2017 : min(_1794, _2017));
        float _2277 = isnan(_2274) ? _2276 : (isnan(_2276) ? _2274 : min(_2276, _2274));
        float _2281 = (_2277 * _1760) + _1749;
        float _2282 = (_2277 * _1763) + _1753;
        float _2283 = (_2277 * _1766) + _1757;
        float _2284 = _2277 * 9.9999997473787516355514526367188e-05;
        float _2286 = (-1.0) - _2284;
        float _2288 = _2284 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2283 > _2288) || ((_2283 < _2286) || ((_2282 > _2288) || ((_2282 < _2286) || ((_2281 < _2286) || (_2281 > _2288))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2411 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2283, cbModelParam._m0[9u].z, fma(_2282, cbModelParam._m0[9u].y, _2281 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2283, cbModelParam._m0[10u].z, fma(_2282, cbModelParam._m0[10u].y, _2281 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2283, cbModelParam._m0[11u].z, fma(_2282, cbModelParam._m0[11u].y, _2281 * cbModelParam._m0[11u].x))), _1700);
            frontier_phi_13_35_ladder = _2411.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2411.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2411.x * cbModelParam._m0[1u].y;
        }
        _1782 = frontier_phi_13_35_ladder_2;
        _1784 = frontier_phi_13_35_ladder_1;
        _1786 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1770 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_887, _888, _889), _1700);
        _1782 = _1770.x * cbModelParam._m0[1u].y;
        _1784 = _1770.y * cbModelParam._m0[1u].y;
        _1786 = _1770.z * cbModelParam._m0[1u].y;
    }
    float _1790 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _716);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1790 : min(cbModelParam._m0[25u].w, _1790));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1844 = fma(_951, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943)) + cbModelParam._m0[21u].w;
        float _1848 = fma(_951, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943)) + cbModelParam._m0[22u].w;
        float _1852 = fma(_951, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943)) + cbModelParam._m0[23u].w;
        float _1855 = fma(_889, cbModelParam._m0[21u].z, fma(_888, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _887));
        float _1858 = fma(_889, cbModelParam._m0[22u].z, fma(_888, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _887));
        float _1861 = fma(_889, cbModelParam._m0[23u].z, fma(_888, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _887));
        float _2022;
        if (_1855 > 0.0)
        {
            _2022 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2022 = frontier_phi_25_21_ladder;
        }
        float _2301;
        if (_1858 > 0.0)
        {
            _2301 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2301 = frontier_phi_37_32_ladder;
        }
        float _2514;
        if (_1861 > 0.0)
        {
            _2514 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2514 = frontier_phi_46_43_ladder;
        }
        float _2516 = isnan(_2301) ? _2022 : (isnan(_2022) ? _2301 : min(_2022, _2301));
        float _2517 = isnan(_2514) ? _2516 : (isnan(_2516) ? _2514 : min(_2516, _2514));
        float _2521 = (_2517 * _1855) + _1844;
        float _2522 = (_2517 * _1858) + _1848;
        float _2523 = (_2517 * _1861) + _1852;
        float _2524 = _2517 * 9.9999997473787516355514526367188e-05;
        float _2525 = (-1.0) - _2524;
        float _2527 = _2524 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2523 > _2527) || ((_2523 < _2525) || ((_2522 > _2527) || ((_2522 < _2525) || ((_2521 < _2525) || (_2521 > _2527))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2722 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2523, cbModelParam._m0[17u].z, fma(_2522, cbModelParam._m0[17u].y, _2521 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2523, cbModelParam._m0[18u].z, fma(_2522, cbModelParam._m0[18u].y, _2521 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2523, cbModelParam._m0[19u].z, fma(_2522, cbModelParam._m0[19u].y, _2521 * cbModelParam._m0[19u].x))), _1791);
            frontier_phi_22_46_ladder = _2722.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2722.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2722.x * cbModelParam._m0[1u].z;
        }
        _1880 = frontier_phi_22_46_ladder_2;
        _1882 = frontier_phi_22_46_ladder_1;
        _1884 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_887, _888, _889), _1791);
        _1880 = _1864.x * cbModelParam._m0[1u].z;
        _1882 = _1864.y * cbModelParam._m0[1u].z;
        _1884 = _1864.z * cbModelParam._m0[1u].z;
    }
    float _1897 = (((_914 * _864) + _915) * _879) * ((cbModelParam._m0[1u].w * (_1880 - _1782)) + _1782);
    float _1899 = (((_914 * _866) + _915) * _879) * ((cbModelParam._m0[1u].w * (_1882 - _1784)) + _1784);
    float _1901 = (((_914 * _867) + _915) * _879) * ((cbModelParam._m0[1u].w * (_1884 - _1786)) + _1786);
    float _1904 = fma(_1901, cbSceneParam._m0[89u].z, fma(_1899, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1907 = fma(_1901, cbSceneParam._m0[90u].z, fma(_1899, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1910 = fma(_1901, cbSceneParam._m0[91u].z, fma(_1899, cbSceneParam._m0[91u].y, _1897 * cbSceneParam._m0[91u].x));
    vec4 _1918 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_801, _802));
    float _1920 = _1918.w;
    float _1932 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1920);
    float _1933 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1920);
    float _1934 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1920);
    uvec4 _1938 = floatBitsToUint(cbInstanceData._m0[_839 + 5u]);
    uint _1940 = _1938.x * 14u;
    uint _1941 = _1940 + 13u;
    float _1948 = _879 + (-1.0);
    float _1953 = (cbLight._m0[_1941].x * _1948) + 1.0;
    float _1954 = (cbLight._m0[_1941].y * _1948) + 1.0;
    float _1955 = (cbLight._m0[_1941].z * _1948) + 1.0;
    float _1956 = (cbLight._m0[_1941].w * _1948) + 1.0;
    uint _1957 = _1940 + 5u;
    float _1963 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
    uint _1967 = _1940 + 4u;
    float _1976 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
    uint _1980 = _1940 | 1u;
    float _1991 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_713, _714, _715));
    float _1994 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_713, _714, _715));
    float _4118 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _4129 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1999 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.3183098733425140380859375;
    float _2001 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * 0.3183098733425140380859375;
    float _2008 = ((cbLight._m0[_1957].x * _1963) * _2001) + (((cbLight._m0[_1967].x * _1932) * _1976) * _1999);
    float _2009 = ((_1963 * cbLight._m0[_1957].y) * _2001) + (((cbLight._m0[_1967].y * _1933) * _1976) * _1999);
    float _2010 = ((_1963 * cbLight._m0[_1957].z) * _2001) + (((cbLight._m0[_1967].z * _1934) * _1976) * _1999);
    uvec4 _2014 = floatBitsToUint(cbLight._m0[_1940 + 12u]);
    bool _2016 = _2014.x == 0u;
    float _2027;
    float _2029;
    float _2031;
    if (_2016)
    {
        _2027 = _2008;
        _2029 = _2009;
        _2031 = _2010;
    }
    else
    {
        uint _2035 = _1940 + 6u;
        float _2051 = (dot(vec3(cbLight._m0[_1940 + 2u].xyz), vec3(_713, _714, _715)) * 0.5) + 0.5;
        float _2052 = _2051 * _2051;
        float _4140 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2053 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2054 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2027 = (((cbLight._m0[_2035].x * 0.3183098733425140380859375) * _2053) * _2054) + _2008;
        _2029 = (((cbLight._m0[_2035].y * 0.3183098733425140380859375) * _2053) * _2054) + _2009;
        _2031 = (((cbLight._m0[_2035].z * 0.3183098733425140380859375) * _2053) * _2054) + _2010;
    }
    bool _2034 = _2014.y == 0u;
    float _2072;
    float _2074;
    float _2076;
    if (_2034)
    {
        _2072 = _2027;
        _2074 = _2029;
        _2076 = _2031;
    }
    else
    {
        uint _2245 = _1940 + 7u;
        float _2261 = (dot(vec3(cbLight._m0[_1940 + 3u].xyz), vec3(_713, _714, _715)) * 0.5) + 0.5;
        float _2262 = _2261 * _2261;
        float _4156 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2263 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2264 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2072 = (((cbLight._m0[_2245].x * 0.3183098733425140380859375) * _2263) * _2264) + _2027;
        _2074 = (((cbLight._m0[_2245].y * 0.3183098733425140380859375) * _2263) * _2264) + _2029;
        _2076 = (((cbLight._m0[_2245].z * 0.3183098733425140380859375) * _2263) * _2264) + _2031;
    }
    uint _2079 = _1940 + 8u;
    float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _716) * 0.949999988079071044921875);
    float _2093 = _2092 * _2092;
    float _2094 = cbLight._m0[_1940].x + _793;
    float _2095 = cbLight._m0[_1940].y + _794;
    float _2096 = cbLight._m0[_1940].z + _795;
    float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
    float _2101 = _2100 * _2094;
    float _2102 = _2100 * _2095;
    float _2103 = _2100 * _2096;
    float _2104 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_1940].xyz));
    float _4172 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _4183 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _2108 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2109 = dot(vec3(_713, _714, _715), vec3(_2101, _2102, _2103));
    float _4194 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _2113 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2101, _2102, _2103));
    float _4205 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2117 = _2093 * _2093;
    float _2121 = ((_2112 * _2112) * (_2117 + (-1.0))) + 1.0;
    float _2129 = exp2(log2(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * 5.0);
    float _2130 = 0.959999978542327880859375 - _861;
    float _2132 = 0.959999978542327880859375 - _862;
    float _2133 = 0.959999978542327880859375 - _863;
    float _2140 = 1.0 - _2093;
    float _2151 = (0.5 / (((_2108 * ((_2107 * _2140) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2140) + _2093) * _2107))) * _2107;
    float _4216 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2153 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2117 / ((_2121 * _2121) * 3.141590118408203125));
    uint _2167 = _1940 + 9u;
    float _2178 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1980].w)) * _716) * 0.949999988079071044921875);
    float _2179 = _2178 * _2178;
    float _2180 = cbLight._m0[_1980].x + _793;
    float _2181 = cbLight._m0[_1980].y + _794;
    float _2182 = cbLight._m0[_1980].z + _795;
    float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
    float _2187 = _2186 * _2180;
    float _2188 = _2186 * _2181;
    float _2189 = _2186 * _2182;
    float _2190 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_1980].xyz));
    float _4227 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _2194 = dot(vec3(_713, _714, _715), vec3(_2187, _2188, _2189));
    float _4238 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _2198 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_2187, _2188, _2189));
    float _4249 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2202 = _2179 * _2179;
    float _2206 = ((_2197 * _2197) * (_2202 + (-1.0))) + 1.0;
    float _2213 = exp2(log2(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * 5.0);
    float _2220 = 1.0 - _2179;
    float _2230 = (0.5 / (((_2108 * ((_2193 * _2220) + _2179)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2220) + _2179) * _2193))) * _2193;
    float _4260 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2232 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2202 / ((_2206 * _2206) * 3.141590118408203125));
    float _2242 = (((((_2213 * _2130) + _864) * cbLight._m0[_2167].x) * _2232) * _1963) + ((((cbLight._m0[_2079].x * _1932) * ((_2129 * _2130) + _864)) * _2153) * _1976);
    float _2243 = (((((_2213 * _2132) + _866) * cbLight._m0[_2167].y) * _2232) * _1963) + ((((cbLight._m0[_2079].y * _1933) * ((_2129 * _2132) + _866)) * _2153) * _1976);
    float _2244 = (((((_2213 * _2133) + _867) * cbLight._m0[_2167].z) * _2232) * _1963) + ((((cbLight._m0[_2079].z * _1934) * ((_2129 * _2133) + _867)) * _2153) * _1976);
    float _2306;
    float _2308;
    float _2310;
    if (_2016)
    {
        _2306 = _2242;
        _2308 = _2243;
        _2310 = _2244;
    }
    else
    {
        uint _2312 = _1940 + 2u;
        uint _2316 = _1940 + 10u;
        float _2330 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _716) * 0.949999988079071044921875);
        float _2331 = _2330 * _2330;
        float _2332 = cbLight._m0[_2312].x + _793;
        float _2333 = cbLight._m0[_2312].y + _794;
        float _2334 = cbLight._m0[_2312].z + _795;
        float _2338 = inversesqrt(dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334)));
        float _2339 = _2338 * _2332;
        float _2340 = _2338 * _2333;
        float _2341 = _2338 * _2334;
        float _2342 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2312].xyz));
        float _4271 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2346 = dot(vec3(_713, _714, _715), vec3(_2339, _2340, _2341));
        float _4282 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2349 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2350 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2339, _2340, _2341));
        float _4293 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2354 = _2331 * _2331;
        float _2358 = ((_2349 * _2349) * (_2354 + (-1.0))) + 1.0;
        float _2365 = exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0);
        float _2372 = 1.0 - _2331;
        float _2382 = (0.5 / (((_2108 * ((_2345 * _2372) + _2331)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2372) + _2331) * _2345))) * _2345;
        float _4304 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2384 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2354 / ((_2358 * _2358) * 3.141590118408203125));
        float _2385 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2306 = (((((_2365 * _2130) + _864) * cbLight._m0[_2316].x) * _2384) * _2385) + _2242;
        _2308 = (((((_2365 * _2132) + _866) * cbLight._m0[_2316].y) * _2384) * _2385) + _2243;
        _2310 = (((((_2365 * _2133) + _867) * cbLight._m0[_2316].z) * _2384) * _2385) + _2244;
    }
    float _2420;
    float _2422;
    float _2424;
    if (_2034)
    {
        _2420 = _2306;
        _2422 = _2308;
        _2424 = _2310;
    }
    else
    {
        uint _2431 = _1940 + 3u;
        uint _2435 = _1940 + 11u;
        float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2431].w)) * _716) * 0.949999988079071044921875);
        float _2450 = _2449 * _2449;
        float _2451 = cbLight._m0[_2431].x + _793;
        float _2452 = cbLight._m0[_2431].y + _794;
        float _2453 = cbLight._m0[_2431].z + _795;
        float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
        float _2458 = _2457 * _2451;
        float _2459 = _2457 * _2452;
        float _2460 = _2457 * _2453;
        float _2461 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2431].xyz));
        float _4320 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2465 = dot(vec3(_713, _714, _715), vec3(_2458, _2459, _2460));
        float _4331 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2468 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2469 = dot(vec3(cbLight._m0[_2431].xyz), vec3(_2458, _2459, _2460));
        float _4342 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2473 = _2450 * _2450;
        float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
        float _2484 = exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0);
        float _2491 = 1.0 - _2450;
        float _2501 = (0.5 / (((_2108 * ((_2464 * _2491) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2108 * _2491) + _2450) * _2464))) * _2464;
        float _4353 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2503 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
        float _2504 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2420 = (((((_2484 * _2130) + _864) * cbLight._m0[_2435].x) * _2503) * _2504) + _2306;
        _2422 = (((((_2484 * _2132) + _866) * cbLight._m0[_2435].y) * _2503) * _2504) + _2308;
        _2424 = (((((_2484 * _2133) + _867) * cbLight._m0[_2435].z) * _2503) * _2504) + _2310;
    }
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    if (_1938.y == 0u)
    {
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2579;
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2579;
        float _2582 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2579;
        uvec4 _2594 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2595 = _2594.x;
        uint _2606 = uint((float(_2594.y) * floor(float(uint(cbSceneParam._m0[85u].y * _802) / _2595))) + floor(float(uint(cbSceneParam._m0[85u].x * _801) / _2595)));
        float _2616 = (log2(_2582 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2617 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        uint _2620 = uint(isnan(14.0) ? _2617 : (isnan(_2617) ? 14.0 : min(_2617, 14.0)));
        uvec4 _2625 = texelFetch(g_lightClusterGridBuffer, int(((_2620 << 2u) + (_2606 << 6u)) >> 2u));
        uint _2626 = _2625.x;
        uint _2627 = _2594.z;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        if (((((1u << ((_2627 >> 4u) & 15u)) + 4294967295u) & _2626) == 0u) || ((_2627 & 240u) == 0u))
        {
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
        }
        else
        {
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            uint _2878 = 0u;
            uint _2887;
            bool _2888;
            for (;;)
            {
                _2887 = texelFetch(g_lightClassification, int((((_2620 << 5u) + (_2606 << 9u)) + (_2878 << 2u)) >> 2u)).x;
                _2888 = _2887 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2888)
                {
                    frontier_phi_61_pred = _2872;
                    frontier_phi_61_pred_1 = _2877;
                    frontier_phi_61_pred_2 = _2876;
                    frontier_phi_61_pred_3 = _2875;
                    frontier_phi_61_pred_4 = _2874;
                    frontier_phi_61_pred_5 = _2873;
                }
                else
                {
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    uint _3002;
                    _2996 = _2872;
                    _2997 = _2873;
                    _2998 = _2874;
                    _2999 = _2875;
                    _3000 = _2876;
                    _3001 = _2877;
                    _3002 = _2887;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    for (;;)
                    {
                        uint _3006 = uint(findLSB(_3002)) + (_2878 << 5u);
                        uint _3003 = (_3002 + 4294967295u) & _3002;
                        uint _3008 = _3006 * 48u;
                        vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3008)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 3u)).x));
                        uint _3028 = (_3006 * 48u) + 4u;
                        vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3028)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 3u)).x));
                        uint _3047 = (_3006 * 48u) + 8u;
                        vec3 _3058 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3047)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 2u)).x));
                        float _3062 = _3022.x - _2580;
                        float _3063 = _3022.y - _2581;
                        float _3064 = _3022.z - _2582;
                        float _3065 = dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064));
                        float _3068 = inversesqrt(_3065);
                        float _3069 = _3068 * _3062;
                        float _3070 = _3068 * _3063;
                        float _3071 = _3068 * _3064;
                        float _3072 = dot(vec3(_820, _823, _826), vec3(_3069, _3070, _3071));
                        float _3077 = 1.0 - (_3065 * _3022.w);
                        float _4379 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3078 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3079 = sqrt(_3065) * _3041.w;
                        float _3082 = 1.39999997615814208984375 / (_3079 + 1.39999997615814208984375);
                        float _3083 = _3082 * _3082;
                        float _3086 = ((1.0 - _3083) * _3072) + _3083;
                        float _3089 = _3079 * _3079;
                        float _3093 = ((isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))) * _3078) / ((_3089 * 0.699999988079071044921875) + 1.0);
                        float _3097 = (-0.0) - _2580;
                        float _3098 = (-0.0) - _2581;
                        float _3099 = (-0.0) - _2582;
                        float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
                        float _3104 = _3103 * _3097;
                        float _3105 = _3103 * _3098;
                        float _3106 = _3103 * _3099;
                        float _3114 = exp2(log2(1.0 / ((_3089 * 3.5) + 5.0)) * 0.25);
                        float _3115 = 1.0 - _895;
                        float _3122 = sqrt(1.0 - ((1.0 - (_3115 * _3115)) * (1.0 - (_3114 * _3114))));
                        float _3123 = _3122 * _3122;
                        float _3124 = _3123 * _3123;
                        float _3125 = _3104 + _3069;
                        float _3126 = _3105 + _3070;
                        float _3127 = _3106 + _3071;
                        float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                        float _3135 = dot(vec3(_820, _823, _826), vec3(_3104, _3105, _3106));
                        float _4395 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3138 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3139 = dot(vec3(_820, _823, _826), vec3(_3131 * _3125, _3131 * _3126, _3131 * _3127));
                        float _4406 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                        float _3146 = ((_3142 * _3142) * (_3124 + (-1.0))) + 1.0;
                        float _3147 = _3082 * _3123;
                        float _3148 = _3147 * _3147;
                        float _3151 = ((1.0 - _3148) * _3072) + _3148;
                        float _4417 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3152 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3153 = 1.0 - _3123;
                        float _3163 = (0.5 / (((_3152 * ((_3138 * _3153) + _3123)) + 9.9999999392252902907785028219223e-09) + (((_3152 * _3153) + _3123) * _3138))) * _3152;
                        float _4428 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3174 = (((_3124 * 3.1415927410125732421875) * (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) / ((_3146 * _3146) * ((_3089 * 2.1991131305694580078125) + 3.141590118408203125))) * _3078;
                        _2931 = (_3093 * _3041.x) + _2999;
                        _2932 = (_3093 * _3041.y) + _3000;
                        _2933 = (_3093 * _3041.z) + _3001;
                        _2928 = (_3174 * _3058.x) + _2996;
                        _2929 = (_3174 * _3058.y) + _2997;
                        _2930 = (_3174 * _3058.z) + _2998;
                        if (_3003 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2996 = _2928;
                            _2997 = _2929;
                            _2998 = _2930;
                            _2999 = _2931;
                            _3000 = _2932;
                            _3001 = _2933;
                            _3002 = _3003;
                        }
                    }
                    frontier_phi_61_pred = _2928;
                    frontier_phi_61_pred_1 = _2933;
                    frontier_phi_61_pred_2 = _2932;
                    frontier_phi_61_pred_3 = _2931;
                    frontier_phi_61_pred_4 = _2930;
                    frontier_phi_61_pred_5 = _2929;
                }
                _2728 = frontier_phi_61_pred;
                _2738 = frontier_phi_61_pred_1;
                _2736 = frontier_phi_61_pred_2;
                _2734 = frontier_phi_61_pred_3;
                _2732 = frontier_phi_61_pred_4;
                _2730 = frontier_phi_61_pred_5;
                uint _2879 = _2878 + 1u;
                if (_2879 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2872 = _2728;
                    _2873 = _2730;
                    _2874 = _2732;
                    _2875 = _2734;
                    _2876 = _2736;
                    _2877 = _2738;
                    _2878 = _2879;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
        }
        uvec4 _2741 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2742 = _2741.z;
        uint _2744 = (_2742 >> 8u) & 15u;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        if (((4294967295u << _2744) & _2626) == 0u)
        {
            _2840 = _2727;
            _2842 = _2729;
            _2844 = _2731;
            _2846 = _2733;
            _2848 = _2735;
            _2850 = _2737;
        }
        else
        {
            float _2865 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
            float _2866 = _2865 * _2580;
            float _2867 = _2865 * _2581;
            float _2868 = _2865 * _2582;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2744 < ((_2742 >> 12u) & 15u))
            {
                float _2841;
                float _2843;
                float _2845;
                float _2847;
                float _2849;
                float _2851;
                float _2979 = _2727;
                float _2980 = _2729;
                float _2981 = _2731;
                float _2982 = _2733;
                float _2983 = _2735;
                float _2984 = _2737;
                uint _2985 = _2744;
                uint _2994;
                bool _2995;
                for (;;)
                {
                    _2994 = texelFetch(g_lightClassification, int((((_2620 << 5u) + (_2606 << 9u)) + (_2985 << 2u)) >> 2u)).x;
                    _2995 = _2994 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2995)
                    {
                        frontier_phi_67_pred = _2982;
                        frontier_phi_67_pred_1 = _2983;
                        frontier_phi_67_pred_2 = _2984;
                        frontier_phi_67_pred_3 = _2981;
                        frontier_phi_67_pred_4 = _2980;
                        frontier_phi_67_pred_5 = _2979;
                    }
                    else
                    {
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3192 = _2979;
                        float _3193 = _2980;
                        float _3194 = _2981;
                        float _3195 = _2982;
                        float _3196 = _2983;
                        float _3197 = _2984;
                        uint _3198 = _2994;
                        uint _3199;
                        vec4 _3224;
                        float _3225;
                        vec4 _3240;
                        vec3 _3252;
                        vec4 _3267;
                        vec4 _3282;
                        float _3329;
                        bool _3330;
                        for (;;)
                        {
                            uint _3209 = ((_2985 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3198));
                            _3199 = (_3198 + 4294967295u) & _3198;
                            uint _3211 = _3209 * 40u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            _3225 = _3224.w;
                            uint _3227 = (_3209 * 40u) + 4u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3209 * 40u) + 8u;
                            _3252 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x));
                            uint _3254 = (_3209 * 40u) + 16u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3269 = (_3209 * 40u) + 20u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3285 = (_3209 * 40u) + 24u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3304 = (_3209 * 40u) + 28u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3329 = fma(_2582, _3317.z, fma(_2581, _3317.y, _3317.x * _2580)) + _3317.w;
                            _3330 = !((fma(_2582, _3298.z, fma(_2581, _3298.y, _3298.x * _2580)) + _3298.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3330)
                            {
                                float _3357 = _3224.x - _2580;
                                float _3358 = _3224.y - _2581;
                                float _3359 = _3224.z - _2582;
                                float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                                float _3363 = inversesqrt(_3360);
                                float _3364 = _3363 * _3357;
                                float _3365 = _3363 * _3358;
                                float _3366 = _3363 * _3359;
                                float _3370 = 1.0 - (_3360 / (_3225 * _3225));
                                float _4439 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3375 = sqrt(_3360) * _3240.w;
                                float _3377 = 1.39999997615814208984375 / (_3375 + 1.39999997615814208984375);
                                float _3378 = _3377 * _3377;
                                float _3381 = ((1.0 - _3378) * dot(vec3(_3364, _3365, _3366), vec3(_820, _823, _826))) + _3378;
                                float _3384 = _3375 * _3375;
                                float _3388 = (fma(_2582, _3267.z, fma(_2581, _3267.y, _3267.x * _2580)) + _3267.w) / _3329;
                                float _3389 = (fma(_2582, _3282.z, fma(_2581, _3282.y, _3282.x * _2580)) + _3282.w) / _3329;
                                float _3393 = 1.0 - dot(vec2(_3388, _3389), vec2(_3388, _3389));
                                float _4455 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3395 = _3394 * (((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3371) / ((_3384 * 0.699999988079071044921875) + 1.0));
                                float _3407 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                                float _3408 = 1.0 - _895;
                                float _3415 = sqrt(1.0 - ((1.0 - (_3408 * _3408)) * (1.0 - (_3407 * _3407))));
                                float _3416 = _3415 * _3415;
                                float _3417 = _3416 * _3416;
                                float _3418 = _3364 - _2866;
                                float _3419 = _3365 - _2867;
                                float _3420 = _3366 - _2868;
                                float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                                float _3428 = dot(vec3(_820, _823, _826), vec3((-0.0) - _2866, (-0.0) - _2867, (-0.0) - _2868));
                                float _4466 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3432 = dot(vec3(_820, _823, _826), vec3(_3424 * _3418, _3424 * _3419, _3424 * _3420));
                                float _4477 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3439 = ((_3435 * _3435) * (_3417 + (-1.0))) + 1.0;
                                float _3440 = _3377 * _3416;
                                float _3441 = _3440 * _3440;
                                float _3447 = ((1.0 - _3441) * dot(vec3(_820, _823, _826), vec3(_3364, _3365, _3366))) + _3441;
                                float _4488 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3449 = 1.0 - _3416;
                                float _3459 = (0.5 / (((_3448 * ((_3431 * _3449) + _3416)) + 9.9999999392252902907785028219223e-09) + (((_3448 * _3449) + _3416) * _3431))) * _3448;
                                float _4499 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3469 = (_3394 * _3371) * (((_3417 * 3.1415927410125732421875) * (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) / ((_3439 * _3439) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3469 * _3252.x;
                                frontier_phi_73_pred_1 = _3469 * _3252.y;
                                frontier_phi_73_pred_2 = _3395 * _3240.z;
                                frontier_phi_73_pred_3 = _3395 * _3240.y;
                                frontier_phi_73_pred_4 = _3395 * _3240.x;
                                frontier_phi_73_pred_5 = _3469 * _3252.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3473 = frontier_phi_73_pred;
                            _3474 = frontier_phi_73_pred_1;
                            _3478 = frontier_phi_73_pred_2;
                            _3477 = frontier_phi_73_pred_3;
                            _3476 = frontier_phi_73_pred_4;
                            _3475 = frontier_phi_73_pred_5;
                            _3182 = _3476 + _3195;
                            _3183 = _3477 + _3196;
                            _3184 = _3478 + _3197;
                            _3179 = _3473 + _3192;
                            _3180 = _3474 + _3193;
                            _3181 = _3475 + _3194;
                            if (_3199 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3199;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3182;
                        frontier_phi_67_pred_1 = _3183;
                        frontier_phi_67_pred_2 = _3184;
                        frontier_phi_67_pred_3 = _3181;
                        frontier_phi_67_pred_4 = _3180;
                        frontier_phi_67_pred_5 = _3179;
                    }
                    _2847 = frontier_phi_67_pred;
                    _2849 = frontier_phi_67_pred_1;
                    _2851 = frontier_phi_67_pred_2;
                    _2845 = frontier_phi_67_pred_3;
                    _2843 = frontier_phi_67_pred_4;
                    _2841 = frontier_phi_67_pred_5;
                    uint _2986 = _2985 + 1u;
                    if (_2986 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2979 = _2841;
                        _2980 = _2843;
                        _2981 = _2845;
                        _2982 = _2847;
                        _2983 = _2849;
                        _2984 = _2851;
                        _2985 = _2986;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2849;
                frontier_phi_55_56_ladder_1 = _2851;
                frontier_phi_55_56_ladder_2 = _2847;
                frontier_phi_55_56_ladder_3 = _2845;
                frontier_phi_55_56_ladder_4 = _2843;
                frontier_phi_55_56_ladder_5 = _2841;
            }
            else
            {
                frontier_phi_55_56_ladder = _2735;
                frontier_phi_55_56_ladder_1 = _2737;
                frontier_phi_55_56_ladder_2 = _2733;
                frontier_phi_55_56_ladder_3 = _2731;
                frontier_phi_55_56_ladder_4 = _2729;
                frontier_phi_55_56_ladder_5 = _2727;
            }
            _2840 = frontier_phi_55_56_ladder_5;
            _2842 = frontier_phi_55_56_ladder_4;
            _2844 = frontier_phi_55_56_ladder_3;
            _2846 = frontier_phi_55_56_ladder_2;
            _2848 = frontier_phi_55_56_ladder;
            _2850 = frontier_phi_55_56_ladder_1;
        }
        float _2855 = isnan(1.0) ? _879 : (isnan(_879) ? 1.0 : min(_879, 1.0));
        _2639 = (_2855 * _2846) + _2072;
        _2641 = (_2855 * _2848) + _2074;
        _2643 = (_2855 * _2850) + _2076;
        _2645 = ((_2840 * _864) * _2855) + _2420;
        _2647 = ((_2842 * _866) * _2855) + _2422;
        _2649 = ((_2844 * _867) * _2855) + _2424;
    }
    else
    {
        _2639 = _2072;
        _2641 = _2074;
        _2643 = _2076;
        _2645 = _2420;
        _2647 = _2422;
        _2649 = _2424;
    }
    float _4515 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4526 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4537 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    uint _2669 = _839 + 6u;
    float _2677 = _801 / cbSceneParam._m0[86u].x;
    float _2678 = _802 / cbSceneParam._m0[86u].y;
    vec4 _2692 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2677, _2678, (log2((isnan(cbSceneParam._m0[77u].w) ? _736 : (isnan(_736) ? cbSceneParam._m0[77u].w : min(_736, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2694 = _2692.x;
    float _2695 = _2692.y;
    float _2696 = _2692.z;
    float _2697 = _2692.w;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    if (_736 > cbSceneParam._m0[78u].w)
    {
        float _2752 = isnan(_736) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _736 : min(cbSceneParam._m0[80u].w, _736));
        float _2753 = _2752 / _736;
        float _2764 = _2753 * _786;
        float _2765 = _787 * _2753;
        float _2766 = (-0.0) - _2765;
        float _2768 = _2753 * _788;
        float _2770 = (cbSceneParam._m0[77u].w * _2766) / _2752;
        float _2771 = _2770 + cbSceneParam._m0[79u].w;
        float _2772 = cbSceneParam._m0[79u].w - _2765;
        float _2778 = sqrt(((_2764 * _2764) + (_2765 * _2765)) + (_2768 * _2768));
        float _2781 = (1.0 - (cbSceneParam._m0[77u].w / _2752)) * _2778;
        float _2786 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2788 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2941;
        if (abs((_2766 - _2770) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2941 = ((((_2771 > 0.0) ? exp2(_2786 * _2771) : (2.0 - exp2(_2788 * _2771))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2781;
        }
        else
        {
            float _2901 = 1.0 / cbSceneParam._m0[80u].x;
            float _2902 = isnan(_2772) ? _2771 : (isnan(_2771) ? _2772 : max(_2771, _2772));
            float _2903 = isnan(_2772) ? _2771 : (isnan(_2771) ? _2772 : min(_2771, _2772));
            float _2912 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : min(_2902, 0.0));
            float _2913 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : min(_2903, 0.0));
            _2941 = ((abs(_2778 / _2766) * cbSceneParam._m0[80u].y) * ((((_2912 - _2913) * 2.0) - ((exp2(_2786 * (isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0)))) - exp2(_2786 * (isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0))))) * _2901)) - ((exp2(_2788 * _2912) - exp2(_2788 * _2913)) * _2901))) + (_2781 * cbSceneParam._m0[80u].z);
        }
        vec4 _2943 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2677, _2678, 1.0), 0.0);
        float _2952 = exp2((_2941 * (-1.44269502162933349609375)) * (1.0 - _2943.w));
        float _2953 = log2(_2952);
        float _2969 = log2(_2697);
        _2790 = (exp2(_2969 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].x)) * _2943.x) / cbSceneParam._m0[78u].x)) + _2694;
        _2792 = (exp2(_2969 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].y)) * _2943.y) / cbSceneParam._m0[78u].y)) + _2695;
        _2794 = (exp2(_2969 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].z)) * _2943.z) / cbSceneParam._m0[78u].z)) + _2696;
        _2796 = _2952 * _2697;
    }
    else
    {
        _2790 = _2694;
        _2792 = _2695;
        _2794 = _2696;
        _2796 = _2697;
    }
    float _2808 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2809 = _2808 == 3.0;
    float _2810 = log2(_2796);
    float _2817 = exp2(_2810 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2639 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _879))) + ((_2645 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1689)) * cbPerFrame._m0[3u].x));
    float _2818 = exp2(_2810 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2641 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _879))) + ((_2647 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1689)) * cbPerFrame._m0[3u].x));
    float _2819 = exp2(_2810 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2643 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _879))) + ((_2649 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1689)) * cbPerFrame._m0[3u].x));
    float _2828 = (_2808 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2828 * (_2809 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2790)));
    SV_Target.y = _2828 * (_2809 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2792)));
    SV_Target.z = _2828 * (_2809 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2794)));
    SV_Target.w = cbInstanceData._m0[_2669].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2669].w;
}


