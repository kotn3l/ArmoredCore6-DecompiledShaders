#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1445;
float _3827;
float _3828;
float _3829;
float _3830;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _270 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _270.x * cbMtdParam._m0[10u].x;
    float _277 = _270.y * cbMtdParam._m0[10u].y;
    float _278 = _270.z * cbMtdParam._m0[10u].z;
    vec4 _296 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _346 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _356 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _346)) + 1.0;
    float _3839 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _357 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _364 = (_357 * ((_296.x * cbMtdParam._m0[11u].x) - _276)) + _276;
    float _365 = (_357 * ((_296.y * cbMtdParam._m0[11u].y) - _277)) + _277;
    float _366 = (_357 * ((_296.z * cbMtdParam._m0[11u].z) - _278)) + _278;
    vec4 _384 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _415 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _346)) + 1.0;
    float _3850 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _423 = (_416 * ((_384.x * cbMtdParam._m0[12u].x) - _364)) + _364;
    float _424 = (_416 * ((_384.y * cbMtdParam._m0[12u].y) - _365)) + _365;
    float _425 = (_416 * ((_384.z * cbMtdParam._m0[12u].z) - _366)) + _366;
    vec4 _443 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _468 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _346)) + 1.0;
    float _3861 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _476 = (_469 * ((_443.x * cbMtdParam._m0[13u].x) - _423)) + _423;
    float _477 = (_469 * ((_443.y * cbMtdParam._m0[13u].y) - _424)) + _424;
    float _478 = (_469 * ((_443.z * cbMtdParam._m0[13u].z) - _425)) + _425;
    vec4 _498 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _527 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3872 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _535 = (_528 * ((_498.x * cbMtdParam._m0[14u].x) - _476)) + _476;
    float _536 = (_528 * ((_498.y * cbMtdParam._m0[14u].y) - _477)) + _477;
    float _537 = (_528 * ((_498.z * cbMtdParam._m0[14u].z) - _478)) + _478;
    vec4 _557 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _585 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _3883 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _593 = (_586 * ((_557.x * cbMtdParam._m0[15u].x) - _535)) + _535;
    float _594 = (_586 * ((_557.y * cbMtdParam._m0[15u].y) - _536)) + _536;
    float _595 = (_586 * ((_557.z * cbMtdParam._m0[15u].z) - _537)) + _537;
    vec4 _608 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _610 = _608.x;
    float _628 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _610) * _357) + _610;
    float _646 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _628) * _416) + _628;
    float _663 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _646) * _469) + _646;
    float _665 = _663 - (_663 * TEXCOORD_5.x);
    vec4 _681 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _703 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _705 = _703.x;
    float _706 = _703.y;
    float _709 = cbMtdParam._m0[18u].y * _703.z;
    vec4 _721 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _730 = (((cbMtdParam._m0[18u].x * _721.z) - _709) * _357) + _709;
    vec4 _743 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _754 = (((cbMtdParam._m0[17u].w * _743.z) - _730) * _416) + _730;
    vec4 _767 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _776 = (((cbMtdParam._m0[17u].z * _767.z) - _754) * _469) + _754;
    float _781 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_681.z * cbMtdParam._m0[18u].z) - _776)) + _776;
    vec4 _794 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _808 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_794.z * cbMtdParam._m0[19u].y) - _781)) + _781;
    float _813 = ((_721.x - _705) * _357) + _705;
    float _814 = ((_721.y - _706) * _357) + _706;
    float _819 = ((_743.x - _813) * _416) + _813;
    float _820 = ((_743.y - _814) * _416) + _814;
    float _829 = ((((_767.x - _819) * _469) + _819) * 2.0) + (-1.0);
    float _830 = ((((_767.y - _820) * _469) + _820) * 2.0) + (-1.0);
    float _831 = dot(vec2(_829, _830), vec2(_829, _830));
    float _3894 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _836 = sqrt(1.0 - (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))));
    float _849 = (((((_681.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _829) + ((((_794.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _850 = (((((_681.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _830) + ((((_794.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _853 = fma(_836, _240 * NORMAL.x, fma(_850, _247 * TANGENT.x, (_233 * _225) * _849));
    float _856 = fma(_836, _240 * NORMAL.y, fma(_850, _247 * TANGENT.y, (_233 * _226) * _849));
    float _859 = fma(_836, _240 * NORMAL.z, fma(_850, _247 * TANGENT.z, (_233 * _227) * _849));
    float _863 = inversesqrt(dot(vec3(_853, _856, _859), vec3(_853, _856, _859)));
    float _864 = _863 * _853;
    float _865 = _863 * _856;
    float _866 = _863 * _859;
    float _3905 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _867 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _3916 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3927 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3938 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3949 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _871 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _887 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _937 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _927);
    float _938 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _927);
    float _939 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _927);
    float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
    float _944 = _937 * _943;
    float _945 = _938 * _943;
    float _946 = _939 * _943;
    vec4 _951 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _953 = _951.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1125 = sqrt(((_937 * _937) + (_938 * _938)) + (_939 * _939));
        float _1131 = (cbMatDynParam._m0[5u].x * _1125) + cbMatDynParam._m0[5u].y;
        float _3960 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1136 = (cbMatDynParam._m0[5u].z * _1125) + cbMatDynParam._m0[5u].w;
        float _3971 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) - _1132)) + _1132) < ((_953 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _964 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _965 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _983 = fma(_866, cbSceneParam._m0[5u].z, fma(_865, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _864));
    float _986 = fma(_866, cbSceneParam._m0[6u].z, fma(_865, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _864));
    float _989 = fma(_866, cbSceneParam._m0[7u].z, fma(_865, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _864));
    uint _1002 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1003 = _1002 + 9u;
    uint _1004 = _1003 + uint(cbMatDynParam._m0[0u].w);
    float _1010 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_1004].x;
    float _1011 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * cbInstanceData._m0[_1004].y;
    float _1012 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * cbInstanceData._m0[_1004].z;
    float _3982 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1013 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1014 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1015 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _1016 = 1.0 - _871;
    float _1017 = _1013 * _1016;
    float _1018 = _1014 * _1016;
    float _1019 = _1015 * _1016;
    float _1024 = (_1013 + (-0.039999999105930328369140625)) * _871;
    float _1025 = (_1014 + (-0.039999999105930328369140625)) * _871;
    float _1026 = (_1015 + (-0.039999999105930328369140625)) * _871;
    float _1027 = _1024 + 0.039999999105930328369140625;
    float _1029 = _1025 + 0.039999999105930328369140625;
    float _1030 = _1026 + 0.039999999105930328369140625;
    vec4 _1039 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _964, cbSceneParam._m0[86u].y * _965));
    float _1042 = _1039.x * TEXCOORD_5.w;
    float _1043 = dot(vec3(_864, _865, _866), vec3(_944, _945, _946));
    float _1046 = _1043 * 2.0;
    float _1050 = (_1046 * _864) - _944;
    float _1051 = (_1046 * _865) - _945;
    float _1052 = (_1046 * _866) - _946;
    float _1056 = abs(dot(vec3(_944, _945, _946), vec3(_864, _865, _866)));
    float _4015 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1058 = sqrt(_867);
    float _1071 = exp2((_1058 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1058 * 3.0));
    float _1077 = (1.0 - _1071) * ((_1058 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1078 = _1071 * _1058;
    float _1106 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1110 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1114 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1444;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1169 = fma(_1114, cbModelParam._m0[26u].z, fma(_1110, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1106));
        float _1173 = fma(_1114, cbModelParam._m0[27u].z, fma(_1110, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1106));
        float _1177 = fma(_1114, cbModelParam._m0[28u].z, fma(_1110, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1106));
        float _1202 = _1106 + _864;
        float _1203 = _1110 + _865;
        float _1204 = _1114 + _866;
        float _1214 = fma(_1204, cbModelParam._m0[26u].z, fma(_1203, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1202)) - _1169;
        float _1215 = fma(_1204, cbModelParam._m0[27u].z, fma(_1203, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1202)) - _1173;
        float _1216 = fma(_1204, cbModelParam._m0[28u].z, fma(_1203, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1202)) - _1177;
        float _1220 = inversesqrt(dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216)));
        float _1233 = ((_1220 * _1214) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1169 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1220 * _1215) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1173 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1220 * _1216) / cbModelParam._m0[34u].z) + ((((((_1177 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        float _1272 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1238.x + (-0.5));
        float _1274 = _1272 * (_1238.y + (-0.5));
        float _1275 = _1272 * (_1238.z + (-0.5));
        float _1282 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1245.x + (-0.5));
        float _1284 = _1282 * (_1245.y + (-0.5));
        float _1285 = _1282 * (_1245.z + (-0.5));
        float _1292 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1252.x + (-0.5));
        float _1294 = _1292 * (_1252.y + (-0.5));
        float _1295 = _1292 * (_1252.z + (-0.5));
        float _1302 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1259.x + (-0.5));
        float _1304 = _1302 * (_1259.y + (-0.5));
        float _1305 = _1302 * (_1259.z + (-0.5));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = _1273 * 0.5;
        float _1310 = _1283 * 0.5;
        float _1311 = _1293 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1326 = (dot(vec3(_864, _865, _866), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1336 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _4063 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1338 + 1.0))) + _1343) * _1306;
        float _1353 = _1274 * 0.5;
        float _1354 = _1284 * 0.5;
        float _1355 = _1294 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_864, _865, _866), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4096 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1380 + 1.0))) + _1385) * _1307;
        float _1395 = _1275 * 0.5;
        float _1396 = _1285 * 0.5;
        float _1397 = _1295 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_864, _865, _866), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4129 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1422 + 1.0))) + _1427) * _1308;
        _1444 = _1275;
        _1446 = _1274;
        _1447 = _1273;
        _1448 = _1285;
        _1449 = _1284;
        _1450 = _1283;
        _1451 = _1295;
        _1452 = _1294;
        _1453 = _1293;
        _1454 = _1308;
        _1455 = _1307;
        _1456 = _1306;
        _1457 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1458 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1459 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
    }
    else
    {
        _1444 = _1445;
        _1446 = _1445;
        _1447 = _1445;
        _1448 = _1445;
        _1449 = _1445;
        _1450 = _1445;
        _1451 = _1445;
        _1452 = _1445;
        _1453 = _1445;
        _1454 = _1445;
        _1455 = _1445;
        _1456 = _1445;
        _1457 = 0.0;
        _1458 = 0.0;
        _1459 = 0.0;
    }
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1488 = fma(_1114, cbModelParam._m0[30u].z, fma(_1110, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1106));
        float _1492 = fma(_1114, cbModelParam._m0[31u].z, fma(_1110, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1106));
        float _1496 = fma(_1114, cbModelParam._m0[32u].z, fma(_1110, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1106));
        float _1519 = _1106 + _864;
        float _1520 = _1110 + _865;
        float _1521 = _1114 + _866;
        float _1531 = fma(_1521, cbModelParam._m0[30u].z, fma(_1520, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1519)) - _1488;
        float _1532 = fma(_1521, cbModelParam._m0[31u].z, fma(_1520, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1519)) - _1492;
        float _1533 = fma(_1521, cbModelParam._m0[32u].z, fma(_1520, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1519)) - _1496;
        float _1537 = inversesqrt(dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533)));
        float _1550 = ((_1537 * _1531) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1488 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1551 = ((_1537 * _1532) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1492 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1552 = ((_1537 * _1533) / cbModelParam._m0[35u].z) + ((((((_1496 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1550, _1551, _1552), 0.0);
        float _1587 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1554.x + (-0.5));
        float _1589 = _1587 * (_1554.y + (-0.5));
        float _1590 = _1587 * (_1554.z + (-0.5));
        float _1597 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1561.x + (-0.5));
        float _1599 = _1597 * (_1561.y + (-0.5));
        float _1600 = _1597 * (_1561.z + (-0.5));
        float _1607 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1568.x + (-0.5));
        float _1609 = _1607 * (_1568.y + (-0.5));
        float _1610 = _1607 * (_1568.z + (-0.5));
        float _1617 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1575.x + (-0.5));
        float _1619 = _1617 * (_1575.y + (-0.5));
        float _1620 = _1617 * (_1575.z + (-0.5));
        float _1621 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1622 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = _1588 * 0.5;
        float _1625 = _1598 * 0.5;
        float _1626 = _1608 * 0.5;
        float _1627 = dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626));
        float _1632 = (_1627 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1627);
        float _1640 = (dot(vec3(_864, _865, _866), vec3(_1632 * _1624, _1632 * _1625, _1632 * _1626)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1649 = sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626)) / (_1621 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1651 = _1650 * 2.0;
        float _1655 = (1.0 - _1650) / (_1650 + 1.0);
        float _4192 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1665 = ((((1.0 - _1656) * (_1651 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1651 + 1.0))) + _1656) * _1621;
        float _1666 = _1589 * 0.5;
        float _1667 = _1599 * 0.5;
        float _1668 = _1609 * 0.5;
        float _1669 = dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668));
        float _1674 = (_1669 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1669);
        float _1682 = (dot(vec3(_864, _865, _866), vec3(_1674 * _1666, _1674 * _1667, _1674 * _1668)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1691 = sqrt(((_1667 * _1667) + (_1666 * _1666)) + (_1668 * _1668)) / (_1622 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1693 = _1692 * 2.0;
        float _1697 = (1.0 - _1692) / (_1692 + 1.0);
        float _4225 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1707 = ((((1.0 - _1698) * (_1693 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1693 + 1.0))) + _1698) * _1622;
        float _1708 = _1590 * 0.5;
        float _1709 = _1600 * 0.5;
        float _1710 = _1610 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_864, _865, _866), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4258 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1735 + 1.0))) + _1740) * _1623;
        _1757 = _1590;
        _1758 = _1589;
        _1759 = _1588;
        _1760 = _1600;
        _1761 = _1599;
        _1762 = _1598;
        _1763 = _1610;
        _1764 = _1609;
        _1765 = _1608;
        _1766 = _1623;
        _1767 = _1622;
        _1768 = _1621;
        _1769 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)));
        _1770 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)));
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
    }
    else
    {
        _1757 = _1445;
        _1758 = _1445;
        _1759 = _1445;
        _1760 = _1445;
        _1761 = _1445;
        _1762 = _1445;
        _1763 = _1445;
        _1764 = _1445;
        _1765 = _1445;
        _1766 = _1445;
        _1767 = _1445;
        _1768 = _1445;
        _1769 = 0.0;
        _1770 = 0.0;
        _1771 = 0.0;
    }
    float _1781 = (cbModelParam._m0[1u].x * (_1769 - _1457)) + _1457;
    float _1782 = (cbModelParam._m0[1u].x * (_1770 - _1458)) + _1458;
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1459)) + _1459;
    float _1804 = fma(_1783, cbSceneParam._m0[89u].z, fma(_1782, cbSceneParam._m0[89u].y, _1781 * cbSceneParam._m0[89u].x));
    float _1807 = fma(_1783, cbSceneParam._m0[90u].z, fma(_1782, cbSceneParam._m0[90u].y, _1781 * cbSceneParam._m0[90u].x));
    float _1810 = fma(_1783, cbSceneParam._m0[91u].z, fma(_1782, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1781));
    float _1825 = _1050 * 0.5;
    float _1826 = _1051 * 0.5;
    float _1827 = _1052 * 0.5;
    float _1828 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1831 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1758, _1761, _1764, _1767));
    float _1834 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1757, _1760, _1763, _1766));
    float _1868;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1841 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1444, _1448, _1451, _1454));
        float _1845 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1446, _1449, _1452, _1455));
        float _1849 = dot(vec4(_1825, _1826, _1827, 1.0), vec4(_1447, _1450, _1453, _1456));
        float _1856 = dot(vec4(cbModelParam._m0[39u]), vec4(_1825, _1826, _1827, 1.0));
        _1868 = dot(vec3(isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1856) ? 0.0 : (isnan(0.0) ? _1856 : max(0.0, _1856))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1868 = 1.0;
    }
    float _1879;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1870 = dot(vec4(cbModelParam._m0[40u]), vec4(_1825, _1826, _1827, 1.0));
        _1879 = dot(vec3(isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1870) ? 0.0 : (isnan(0.0) ? _1870 : max(0.0, _1870))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1879 = 1.0;
    }
    float _1883 = (_1879 * cbModelParam._m0[1u].x) + (_1868 * (1.0 - cbModelParam._m0[1u].x));
    float _1893 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _867);
    float _1894 = isnan(_1893) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1893 : min(cbModelParam._m0[25u].z, _1893));
    float _1974;
    float _1976;
    float _1978;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1941 = fma(_1114, cbModelParam._m0[13u].z, fma(_1110, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1106)) + cbModelParam._m0[13u].w;
        float _1945 = fma(_1114, cbModelParam._m0[14u].z, fma(_1110, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1106)) + cbModelParam._m0[14u].w;
        float _1949 = fma(_1114, cbModelParam._m0[15u].z, fma(_1110, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1106)) + cbModelParam._m0[15u].w;
        float _1952 = fma(_1052, cbModelParam._m0[13u].z, fma(_1051, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1050));
        float _1955 = fma(_1052, cbModelParam._m0[14u].z, fma(_1051, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1050));
        float _1958 = fma(_1052, cbModelParam._m0[15u].z, fma(_1051, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1050));
        float _1986;
        if (_1952 > 0.0)
        {
            _1986 = abs((1.0 - _1941) / _1952);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1941 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1986 = frontier_phi_17_15_ladder;
        }
        float _2189;
        if (_1955 > 0.0)
        {
            _2189 = abs((1.0 - _1945) / _1955);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1945 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2189 = frontier_phi_26_22_ladder;
        }
        float _2443;
        if (_1958 > 0.0)
        {
            _2443 = abs((1.0 - _1949) / _1958);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1949 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2443 = frontier_phi_38_33_ladder;
        }
        float _2445 = isnan(_2189) ? _1986 : (isnan(_1986) ? _2189 : min(_1986, _2189));
        float _2446 = isnan(_2443) ? _2445 : (isnan(_2445) ? _2443 : min(_2445, _2443));
        float _2450 = (_2446 * _1952) + _1941;
        float _2451 = (_2446 * _1955) + _1945;
        float _2452 = (_2446 * _1958) + _1949;
        float _2453 = _2446 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2453;
        float _2457 = _2453 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 > _2457) || ((_2451 < _2455) || ((_2450 < _2455) || (_2450 > _2457))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2452, cbModelParam._m0[9u].z, fma(_2451, cbModelParam._m0[9u].y, _2450 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2452, cbModelParam._m0[10u].z, fma(_2451, cbModelParam._m0[10u].y, _2450 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2452, cbModelParam._m0[11u].z, fma(_2451, cbModelParam._m0[11u].y, _2450 * cbModelParam._m0[11u].x))), _1894);
            frontier_phi_16_38_ladder = _2580.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2580.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2580.x * cbModelParam._m0[1u].y;
        }
        _1974 = frontier_phi_16_38_ladder_2;
        _1976 = frontier_phi_16_38_ladder_1;
        _1978 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1962 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1050, _1051, _1052), _1894);
        _1974 = _1962.x * cbModelParam._m0[1u].y;
        _1976 = _1962.y * cbModelParam._m0[1u].y;
        _1978 = _1962.z * cbModelParam._m0[1u].y;
    }
    float _1982 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _867);
    float _1983 = isnan(_1982) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1982 : min(cbModelParam._m0[25u].w, _1982));
    float _2072;
    float _2074;
    float _2076;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2036 = fma(_1114, cbModelParam._m0[21u].z, fma(_1110, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1106)) + cbModelParam._m0[21u].w;
        float _2040 = fma(_1114, cbModelParam._m0[22u].z, fma(_1110, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1106)) + cbModelParam._m0[22u].w;
        float _2044 = fma(_1114, cbModelParam._m0[23u].z, fma(_1110, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1106)) + cbModelParam._m0[23u].w;
        float _2047 = fma(_1052, cbModelParam._m0[21u].z, fma(_1051, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1050));
        float _2050 = fma(_1052, cbModelParam._m0[22u].z, fma(_1051, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1050));
        float _2053 = fma(_1052, cbModelParam._m0[23u].z, fma(_1051, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1050));
        float _2194;
        if (_2047 > 0.0)
        {
            _2194 = abs((1.0 - _2036) / _2047);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2036 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2194 = frontier_phi_28_24_ladder;
        }
        float _2470;
        if (_2050 > 0.0)
        {
            _2470 = abs((1.0 - _2040) / _2050);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2040 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2470 = frontier_phi_40_35_ladder;
        }
        float _2683;
        if (_2053 > 0.0)
        {
            _2683 = abs((1.0 - _2044) / _2053);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2044 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2683 = frontier_phi_49_46_ladder;
        }
        float _2685 = isnan(_2470) ? _2194 : (isnan(_2194) ? _2470 : min(_2194, _2470));
        float _2686 = isnan(_2683) ? _2685 : (isnan(_2685) ? _2683 : min(_2685, _2683));
        float _2690 = (_2686 * _2047) + _2036;
        float _2691 = (_2686 * _2050) + _2040;
        float _2692 = (_2686 * _2053) + _2044;
        float _2693 = _2686 * 9.9999997473787516355514526367188e-05;
        float _2694 = (-1.0) - _2693;
        float _2696 = _2693 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2692 > _2696) || ((_2692 < _2694) || ((_2691 > _2696) || ((_2691 < _2694) || ((_2690 < _2694) || (_2690 > _2696))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2891 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2692, cbModelParam._m0[17u].z, fma(_2691, cbModelParam._m0[17u].y, _2690 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2692, cbModelParam._m0[18u].z, fma(_2691, cbModelParam._m0[18u].y, _2690 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2692, cbModelParam._m0[19u].z, fma(_2691, cbModelParam._m0[19u].y, _2690 * cbModelParam._m0[19u].x))), _1983);
            frontier_phi_25_49_ladder = _2891.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2891.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2891.x * cbModelParam._m0[1u].z;
        }
        _2072 = frontier_phi_25_49_ladder_2;
        _2074 = frontier_phi_25_49_ladder_1;
        _2076 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2056 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1050, _1051, _1052), _1983);
        _2072 = _2056.x * cbModelParam._m0[1u].z;
        _2074 = _2056.y * cbModelParam._m0[1u].z;
        _2076 = _2056.z * cbModelParam._m0[1u].z;
    }
    float _2089 = (((_1077 * _1027) + _1078) * _1042) * ((cbModelParam._m0[1u].w * (_2072 - _1974)) + _1974);
    float _2091 = (((_1077 * _1029) + _1078) * _1042) * ((cbModelParam._m0[1u].w * (_2074 - _1976)) + _1976);
    float _2093 = (((_1077 * _1030) + _1078) * _1042) * ((cbModelParam._m0[1u].w * (_2076 - _1978)) + _1978);
    float _2096 = fma(_2093, cbSceneParam._m0[89u].z, fma(_2091, cbSceneParam._m0[89u].y, _2089 * cbSceneParam._m0[89u].x));
    float _2099 = fma(_2093, cbSceneParam._m0[90u].z, fma(_2091, cbSceneParam._m0[90u].y, _2089 * cbSceneParam._m0[90u].x));
    float _2102 = fma(_2093, cbSceneParam._m0[91u].z, fma(_2091, cbSceneParam._m0[91u].y, _2089 * cbSceneParam._m0[91u].x));
    uvec4 _2112 = floatBitsToUint(cbInstanceData._m0[_1002 + 5u]);
    uint _2114 = _2112.x * 14u;
    uint _2115 = _2114 + 13u;
    float _2122 = _1042 + (-1.0);
    float _2127 = (cbLight._m0[_2115].x * _2122) + 1.0;
    float _2128 = (cbLight._m0[_2115].y * _2122) + 1.0;
    float _2129 = (cbLight._m0[_2115].z * _2122) + 1.0;
    float _2130 = (cbLight._m0[_2115].w * _2122) + 1.0;
    uint _2131 = _2114 + 5u;
    float _2137 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
    uint _2141 = _2114 + 4u;
    float _2148 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2152 = _2114 | 1u;
    float _2163 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_864, _865, _866));
    float _2166 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_864, _865, _866));
    float _4394 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _4405 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2171 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.3183098733425140380859375;
    float _2173 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * 0.3183098733425140380859375;
    float _2180 = ((cbLight._m0[_2131].x * _2137) * _2173) + ((cbLight._m0[_2141].x * _2148) * _2171);
    float _2181 = ((_2137 * cbLight._m0[_2131].y) * _2173) + ((_2148 * cbLight._m0[_2141].y) * _2171);
    float _2182 = ((_2137 * cbLight._m0[_2131].z) * _2173) + ((_2148 * cbLight._m0[_2141].z) * _2171);
    uvec4 _2186 = floatBitsToUint(cbLight._m0[_2114 + 12u]);
    bool _2188 = _2186.x == 0u;
    float _2199;
    float _2201;
    float _2203;
    if (_2188)
    {
        _2199 = _2180;
        _2201 = _2181;
        _2203 = _2182;
    }
    else
    {
        uint _2207 = _2114 + 6u;
        float _2223 = (dot(vec3(cbLight._m0[_2114 + 2u].xyz), vec3(_864, _865, _866)) * 0.5) + 0.5;
        float _2224 = _2223 * _2223;
        float _4416 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2225 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2226 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2199 = (((cbLight._m0[_2207].x * 0.3183098733425140380859375) * _2225) * _2226) + _2180;
        _2201 = (((cbLight._m0[_2207].y * 0.3183098733425140380859375) * _2225) * _2226) + _2181;
        _2203 = (((cbLight._m0[_2207].z * 0.3183098733425140380859375) * _2225) * _2226) + _2182;
    }
    bool _2206 = _2186.y == 0u;
    float _2244;
    float _2246;
    float _2248;
    if (_2206)
    {
        _2244 = _2199;
        _2246 = _2201;
        _2248 = _2203;
    }
    else
    {
        uint _2414 = _2114 + 7u;
        float _2430 = (dot(vec3(cbLight._m0[_2114 + 3u].xyz), vec3(_864, _865, _866)) * 0.5) + 0.5;
        float _2431 = _2430 * _2430;
        float _4432 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2432 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2433 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2244 = (((cbLight._m0[_2414].x * 0.3183098733425140380859375) * _2432) * _2433) + _2199;
        _2246 = (((cbLight._m0[_2414].y * 0.3183098733425140380859375) * _2432) * _2433) + _2201;
        _2248 = (((cbLight._m0[_2414].z * 0.3183098733425140380859375) * _2432) * _2433) + _2203;
    }
    uint _2251 = _2114 + 8u;
    float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _867) * 0.949999988079071044921875);
    float _2265 = _2264 * _2264;
    float _2266 = cbLight._m0[_2114].x + _944;
    float _2267 = cbLight._m0[_2114].y + _945;
    float _2268 = cbLight._m0[_2114].z + _946;
    float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
    float _2273 = _2272 * _2266;
    float _2274 = _2272 * _2267;
    float _2275 = _2272 * _2268;
    float _2276 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2114].xyz));
    float _4448 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _4459 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _2280 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2281 = dot(vec3(_864, _865, _866), vec3(_2273, _2274, _2275));
    float _4470 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2285 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2273, _2274, _2275));
    float _4481 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2289 = _2265 * _2265;
    float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
    float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
    float _2302 = 0.959999978542327880859375 - _1024;
    float _2304 = 0.959999978542327880859375 - _1025;
    float _2305 = 0.959999978542327880859375 - _1026;
    float _2312 = 1.0 - _2265;
    float _2323 = (0.5 / (((_2280 * ((_2279 * _2312) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2312) + _2265) * _2279))) * _2279;
    float _4492 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2325 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
    uint _2336 = _2114 + 9u;
    float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _867) * 0.949999988079071044921875);
    float _2348 = _2347 * _2347;
    float _2349 = cbLight._m0[_2152].x + _944;
    float _2350 = cbLight._m0[_2152].y + _945;
    float _2351 = cbLight._m0[_2152].z + _946;
    float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
    float _2356 = _2355 * _2349;
    float _2357 = _2355 * _2350;
    float _2358 = _2355 * _2351;
    float _2359 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2152].xyz));
    float _4503 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2363 = dot(vec3(_864, _865, _866), vec3(_2356, _2357, _2358));
    float _4514 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2367 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2356, _2357, _2358));
    float _4525 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2371 = _2348 * _2348;
    float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
    float _2382 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
    float _2389 = 1.0 - _2348;
    float _2399 = (0.5 / (((_2280 * ((_2362 * _2389) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2389) + _2348) * _2362))) * _2362;
    float _4536 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2401 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
    float _2411 = (((((_2382 * _2302) + _1027) * cbLight._m0[_2336].x) * _2401) * _2137) + (((((_2301 * _2302) + _1027) * cbLight._m0[_2251].x) * _2325) * _2148);
    float _2412 = (((((_2382 * _2304) + _1029) * cbLight._m0[_2336].y) * _2401) * _2137) + (((((_2301 * _2304) + _1029) * cbLight._m0[_2251].y) * _2325) * _2148);
    float _2413 = (((((_2382 * _2305) + _1030) * cbLight._m0[_2336].z) * _2401) * _2137) + (((((_2301 * _2305) + _1030) * cbLight._m0[_2251].z) * _2325) * _2148);
    float _2475;
    float _2477;
    float _2479;
    if (_2188)
    {
        _2475 = _2411;
        _2477 = _2412;
        _2479 = _2413;
    }
    else
    {
        uint _2481 = _2114 + 2u;
        uint _2485 = _2114 + 10u;
        float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _867) * 0.949999988079071044921875);
        float _2500 = _2499 * _2499;
        float _2501 = cbLight._m0[_2481].x + _944;
        float _2502 = cbLight._m0[_2481].y + _945;
        float _2503 = cbLight._m0[_2481].z + _946;
        float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
        float _2508 = _2507 * _2501;
        float _2509 = _2507 * _2502;
        float _2510 = _2507 * _2503;
        float _2511 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2481].xyz));
        float _4547 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2515 = dot(vec3(_864, _865, _866), vec3(_2508, _2509, _2510));
        float _4558 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2519 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2508, _2509, _2510));
        float _4569 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2523 = _2500 * _2500;
        float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
        float _2534 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
        float _2541 = 1.0 - _2500;
        float _2551 = (0.5 / (((_2280 * ((_2514 * _2541) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2541) + _2500) * _2514))) * _2514;
        float _4580 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2553 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
        float _2554 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2475 = (((((_2534 * _2302) + _1027) * cbLight._m0[_2485].x) * _2553) * _2554) + _2411;
        _2477 = (((((_2534 * _2304) + _1029) * cbLight._m0[_2485].y) * _2553) * _2554) + _2412;
        _2479 = (((((_2534 * _2305) + _1030) * cbLight._m0[_2485].z) * _2553) * _2554) + _2413;
    }
    float _2589;
    float _2591;
    float _2593;
    if (_2206)
    {
        _2589 = _2475;
        _2591 = _2477;
        _2593 = _2479;
    }
    else
    {
        uint _2600 = _2114 + 3u;
        uint _2604 = _2114 + 11u;
        float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2600].w)) * _867) * 0.949999988079071044921875);
        float _2619 = _2618 * _2618;
        float _2620 = cbLight._m0[_2600].x + _944;
        float _2621 = cbLight._m0[_2600].y + _945;
        float _2622 = cbLight._m0[_2600].z + _946;
        float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
        float _2627 = _2626 * _2620;
        float _2628 = _2626 * _2621;
        float _2629 = _2626 * _2622;
        float _2630 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2600].xyz));
        float _4596 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2634 = dot(vec3(_864, _865, _866), vec3(_2627, _2628, _2629));
        float _4607 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2638 = dot(vec3(cbLight._m0[_2600].xyz), vec3(_2627, _2628, _2629));
        float _4618 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2642 = _2619 * _2619;
        float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
        float _2653 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
        float _2660 = 1.0 - _2619;
        float _2670 = (0.5 / (((_2280 * ((_2633 * _2660) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2660) + _2619) * _2633))) * _2633;
        float _4629 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2672 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
        float _2673 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2589 = (((((_2653 * _2302) + _1027) * cbLight._m0[_2604].x) * _2672) * _2673) + _2475;
        _2591 = (((((_2653 * _2304) + _1029) * cbLight._m0[_2604].y) * _2672) * _2673) + _2477;
        _2593 = (((((_2653 * _2305) + _1030) * cbLight._m0[_2604].z) * _2672) * _2673) + _2479;
    }
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    if (_2112.y == 0u)
    {
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2749 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2748;
        float _2750 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2748;
        float _2751 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2748;
        uvec4 _2763 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2764 = _2763.x;
        uint _2775 = uint((float(_2763.y) * floor(float(uint(cbSceneParam._m0[85u].y * _965) / _2764))) + floor(float(uint(cbSceneParam._m0[85u].x * _964) / _2764)));
        float _2785 = (log2(_2751 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2786 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        uint _2789 = uint(isnan(14.0) ? _2786 : (isnan(_2786) ? 14.0 : min(_2786, 14.0)));
        uvec4 _2794 = texelFetch(g_lightClusterGridBuffer, int(((_2789 << 2u) + (_2775 << 6u)) >> 2u));
        uint _2795 = _2794.x;
        uint _2796 = _2763.z;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((((1u << ((_2796 >> 4u) & 15u)) + 4294967295u) & _2795) == 0u) || ((_2796 & 240u) == 0u))
        {
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
        }
        else
        {
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            uint _3055 = 0u;
            uint _3064;
            bool _3065;
            for (;;)
            {
                _3064 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3055 << 2u)) >> 2u)).x;
                _3065 = _3064 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3065)
                {
                    frontier_phi_66_pred = _3049;
                    frontier_phi_66_pred_1 = _3054;
                    frontier_phi_66_pred_2 = _3053;
                    frontier_phi_66_pred_3 = _3052;
                    frontier_phi_66_pred_4 = _3051;
                    frontier_phi_66_pred_5 = _3050;
                }
                else
                {
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    uint _3200;
                    _3194 = _3049;
                    _3195 = _3050;
                    _3196 = _3051;
                    _3197 = _3052;
                    _3198 = _3053;
                    _3199 = _3054;
                    _3200 = _3064;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    for (;;)
                    {
                        uint _3204 = uint(findLSB(_3200)) + (_3055 << 5u);
                        uint _3201 = (_3200 + 4294967295u) & _3200;
                        uint _3206 = _3204 * 48u;
                        vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 3u)).x));
                        uint _3226 = (_3204 * 48u) + 4u;
                        vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 3u)).x));
                        uint _3245 = (_3204 * 48u) + 8u;
                        vec3 _3256 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x));
                        float _3260 = _3220.x - _2749;
                        float _3261 = _3220.y - _2750;
                        float _3262 = _3220.z - _2751;
                        float _3263 = dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262));
                        float _3266 = inversesqrt(_3263);
                        float _3267 = _3266 * _3260;
                        float _3268 = _3266 * _3261;
                        float _3269 = _3266 * _3262;
                        float _3270 = dot(vec3(_983, _986, _989), vec3(_3267, _3268, _3269));
                        float _3275 = 1.0 - (_3263 * _3220.w);
                        float _4655 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3276 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3277 = sqrt(_3263) * _3239.w;
                        float _3280 = 1.39999997615814208984375 / (_3277 + 1.39999997615814208984375);
                        float _3281 = _3280 * _3280;
                        float _3284 = ((1.0 - _3281) * _3270) + _3281;
                        float _3287 = _3277 * _3277;
                        float _3291 = ((isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))) * _3276) / ((_3287 * 0.699999988079071044921875) + 1.0);
                        float _3295 = (-0.0) - _2749;
                        float _3296 = (-0.0) - _2750;
                        float _3297 = (-0.0) - _2751;
                        float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3312 = exp2(log2(1.0 / ((_3287 * 3.5) + 5.0)) * 0.25);
                        float _3313 = 1.0 - _1058;
                        float _3320 = sqrt(1.0 - ((1.0 - (_3313 * _3313)) * (1.0 - (_3312 * _3312))));
                        float _3321 = _3320 * _3320;
                        float _3322 = _3321 * _3321;
                        float _3323 = _3302 + _3267;
                        float _3324 = _3303 + _3268;
                        float _3325 = _3304 + _3269;
                        float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                        float _3333 = dot(vec3(_983, _986, _989), vec3(_3302, _3303, _3304));
                        float _4671 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3336 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3337 = dot(vec3(_983, _986, _989), vec3(_3329 * _3323, _3329 * _3324, _3329 * _3325));
                        float _4682 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3340 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3344 = ((_3340 * _3340) * (_3322 + (-1.0))) + 1.0;
                        float _3345 = _3280 * _3321;
                        float _3346 = _3345 * _3345;
                        float _3349 = ((1.0 - _3346) * _3270) + _3346;
                        float _4693 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3350 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3351 = 1.0 - _3321;
                        float _3361 = (0.5 / (((_3350 * ((_3336 * _3351) + _3321)) + 9.9999999392252902907785028219223e-09) + (((_3350 * _3351) + _3321) * _3336))) * _3350;
                        float _4704 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3372 = (((_3322 * 3.1415927410125732421875) * (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) / ((_3344 * _3344) * ((_3287 * 2.1991131305694580078125) + 3.141590118408203125))) * _3276;
                        _3124 = (_3291 * _3239.x) + _3197;
                        _3125 = (_3291 * _3239.y) + _3198;
                        _3126 = (_3291 * _3239.z) + _3199;
                        _3121 = (_3372 * _3256.x) + _3194;
                        _3122 = (_3372 * _3256.y) + _3195;
                        _3123 = (_3372 * _3256.z) + _3196;
                        if (_3201 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3194 = _3121;
                            _3195 = _3122;
                            _3196 = _3123;
                            _3197 = _3124;
                            _3198 = _3125;
                            _3199 = _3126;
                            _3200 = _3201;
                        }
                    }
                    frontier_phi_66_pred = _3121;
                    frontier_phi_66_pred_1 = _3126;
                    frontier_phi_66_pred_2 = _3125;
                    frontier_phi_66_pred_3 = _3124;
                    frontier_phi_66_pred_4 = _3123;
                    frontier_phi_66_pred_5 = _3122;
                }
                _2897 = frontier_phi_66_pred;
                _2907 = frontier_phi_66_pred_1;
                _2905 = frontier_phi_66_pred_2;
                _2903 = frontier_phi_66_pred_3;
                _2901 = frontier_phi_66_pred_4;
                _2899 = frontier_phi_66_pred_5;
                uint _3056 = _3055 + 1u;
                if (_3056 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3049 = _2897;
                    _3050 = _2899;
                    _3051 = _2901;
                    _3052 = _2903;
                    _3053 = _2905;
                    _3054 = _2907;
                    _3055 = _3056;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
        }
        uvec4 _2910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2911 = _2910.z;
        uint _2913 = (_2911 >> 8u) & 15u;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        if (((4294967295u << _2913) & _2795) == 0u)
        {
            _3017 = _2896;
            _3019 = _2898;
            _3021 = _2900;
            _3023 = _2902;
            _3025 = _2904;
            _3027 = _2906;
        }
        else
        {
            float _3042 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
            float _3043 = _3042 * _2749;
            float _3044 = _3042 * _2750;
            float _3045 = _3042 * _2751;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2913 < ((_2911 >> 12u) & 15u))
            {
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3026;
                float _3028;
                float _3177 = _2896;
                float _3178 = _2898;
                float _3179 = _2900;
                float _3180 = _2902;
                float _3181 = _2904;
                float _3182 = _2906;
                uint _3183 = _2913;
                uint _3192;
                bool _3193;
                for (;;)
                {
                    _3192 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3183 << 2u)) >> 2u)).x;
                    _3193 = _3192 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3193)
                    {
                        frontier_phi_77_pred = _3182;
                        frontier_phi_77_pred_1 = _3181;
                        frontier_phi_77_pred_2 = _3180;
                        frontier_phi_77_pred_3 = _3179;
                        frontier_phi_77_pred_4 = _3178;
                        frontier_phi_77_pred_5 = _3177;
                    }
                    else
                    {
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3399 = _3177;
                        float _3400 = _3178;
                        float _3401 = _3179;
                        float _3402 = _3180;
                        float _3403 = _3181;
                        float _3404 = _3182;
                        uint _3405 = _3192;
                        uint _3406;
                        vec4 _3431;
                        float _3432;
                        vec4 _3447;
                        vec3 _3459;
                        vec4 _3474;
                        vec4 _3489;
                        float _3536;
                        bool _3537;
                        for (;;)
                        {
                            uint _3416 = ((_3183 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3405));
                            _3406 = (_3405 + 4294967295u) & _3405;
                            uint _3418 = _3416 * 40u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            _3432 = _3431.w;
                            uint _3434 = (_3416 * 40u) + 4u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3449 = (_3416 * 40u) + 8u;
                            _3459 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x));
                            uint _3461 = (_3416 * 40u) + 16u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3476 = (_3416 * 40u) + 20u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3492 = (_3416 * 40u) + 24u;
                            vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3511 = (_3416 * 40u) + 28u;
                            vec4 _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            _3536 = fma(_2751, _3524.z, fma(_2750, _3524.y, _3524.x * _2749)) + _3524.w;
                            _3537 = !((fma(_2751, _3505.z, fma(_2750, _3505.y, _3505.x * _2749)) + _3505.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3537)
                            {
                                float _3564 = _3431.x - _2749;
                                float _3565 = _3431.y - _2750;
                                float _3566 = _3431.z - _2751;
                                float _3567 = dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566));
                                float _3570 = inversesqrt(_3567);
                                float _3571 = _3570 * _3564;
                                float _3572 = _3570 * _3565;
                                float _3573 = _3570 * _3566;
                                float _3577 = 1.0 - (_3567 / (_3432 * _3432));
                                float _4715 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3582 = sqrt(_3567) * _3447.w;
                                float _3584 = 1.39999997615814208984375 / (_3582 + 1.39999997615814208984375);
                                float _3585 = _3584 * _3584;
                                float _3588 = ((1.0 - _3585) * dot(vec3(_3571, _3572, _3573), vec3(_983, _986, _989))) + _3585;
                                float _3591 = _3582 * _3582;
                                float _3595 = (fma(_2751, _3474.z, fma(_2750, _3474.y, _3474.x * _2749)) + _3474.w) / _3536;
                                float _3596 = (fma(_2751, _3489.z, fma(_2750, _3489.y, _3489.x * _2749)) + _3489.w) / _3536;
                                float _3600 = 1.0 - dot(vec2(_3595, _3596), vec2(_3595, _3596));
                                float _4731 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3601 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3602 = _3601 * (((isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0))) * _3578) / ((_3591 * 0.699999988079071044921875) + 1.0));
                                float _3614 = exp2(log2(1.0 / ((_3591 * 3.5) + 5.0)) * 0.25);
                                float _3615 = 1.0 - _1058;
                                float _3622 = sqrt(1.0 - ((1.0 - (_3615 * _3615)) * (1.0 - (_3614 * _3614))));
                                float _3623 = _3622 * _3622;
                                float _3624 = _3623 * _3623;
                                float _3625 = _3571 - _3043;
                                float _3626 = _3572 - _3044;
                                float _3627 = _3573 - _3045;
                                float _3631 = inversesqrt(dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627)));
                                float _3635 = dot(vec3(_983, _986, _989), vec3((-0.0) - _3043, (-0.0) - _3044, (-0.0) - _3045));
                                float _4742 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3638 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3639 = dot(vec3(_983, _986, _989), vec3(_3631 * _3625, _3631 * _3626, _3631 * _3627));
                                float _4753 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3642 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3646 = ((_3642 * _3642) * (_3624 + (-1.0))) + 1.0;
                                float _3647 = _3584 * _3623;
                                float _3648 = _3647 * _3647;
                                float _3654 = ((1.0 - _3648) * dot(vec3(_983, _986, _989), vec3(_3571, _3572, _3573))) + _3648;
                                float _4764 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3656 = 1.0 - _3623;
                                float _3666 = (0.5 / (((_3655 * ((_3638 * _3656) + _3623)) + 9.9999999392252902907785028219223e-09) + (((_3655 * _3656) + _3623) * _3638))) * _3655;
                                float _4775 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3676 = (_3601 * _3578) * (((_3624 * 3.1415927410125732421875) * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) / ((_3646 * _3646) * ((_3591 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3602 * _3447.y;
                                frontier_phi_83_pred_1 = _3602 * _3447.x;
                                frontier_phi_83_pred_2 = _3676 * _3459.z;
                                frontier_phi_83_pred_3 = _3676 * _3459.y;
                                frontier_phi_83_pred_4 = _3676 * _3459.x;
                                frontier_phi_83_pred_5 = _3602 * _3447.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3684 = frontier_phi_83_pred;
                            _3683 = frontier_phi_83_pred_1;
                            _3682 = frontier_phi_83_pred_2;
                            _3681 = frontier_phi_83_pred_3;
                            _3680 = frontier_phi_83_pred_4;
                            _3685 = frontier_phi_83_pred_5;
                            _3389 = _3683 + _3402;
                            _3390 = _3684 + _3403;
                            _3391 = _3685 + _3404;
                            _3386 = _3680 + _3399;
                            _3387 = _3681 + _3400;
                            _3388 = _3682 + _3401;
                            if (_3406 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3406;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3391;
                        frontier_phi_77_pred_1 = _3390;
                        frontier_phi_77_pred_2 = _3389;
                        frontier_phi_77_pred_3 = _3388;
                        frontier_phi_77_pred_4 = _3387;
                        frontier_phi_77_pred_5 = _3386;
                    }
                    _3028 = frontier_phi_77_pred;
                    _3026 = frontier_phi_77_pred_1;
                    _3024 = frontier_phi_77_pred_2;
                    _3022 = frontier_phi_77_pred_3;
                    _3020 = frontier_phi_77_pred_4;
                    _3018 = frontier_phi_77_pred_5;
                    uint _3184 = _3183 + 1u;
                    if (_3184 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3177 = _3018;
                        _3178 = _3020;
                        _3179 = _3022;
                        _3180 = _3024;
                        _3181 = _3026;
                        _3182 = _3028;
                        _3183 = _3184;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3022;
                frontier_phi_58_59_ladder_1 = _3028;
                frontier_phi_58_59_ladder_2 = _3026;
                frontier_phi_58_59_ladder_3 = _3024;
                frontier_phi_58_59_ladder_4 = _3020;
                frontier_phi_58_59_ladder_5 = _3018;
            }
            else
            {
                frontier_phi_58_59_ladder = _2900;
                frontier_phi_58_59_ladder_1 = _2906;
                frontier_phi_58_59_ladder_2 = _2904;
                frontier_phi_58_59_ladder_3 = _2902;
                frontier_phi_58_59_ladder_4 = _2898;
                frontier_phi_58_59_ladder_5 = _2896;
            }
            _3017 = frontier_phi_58_59_ladder_5;
            _3019 = frontier_phi_58_59_ladder_4;
            _3021 = frontier_phi_58_59_ladder;
            _3023 = frontier_phi_58_59_ladder_3;
            _3025 = frontier_phi_58_59_ladder_2;
            _3027 = frontier_phi_58_59_ladder_1;
        }
        float _3032 = isnan(1.0) ? _1042 : (isnan(_1042) ? 1.0 : min(_1042, 1.0));
        _2808 = (_3032 * _3023) + _2244;
        _2810 = (_3032 * _3025) + _2246;
        _2812 = (_3032 * _3027) + _2248;
        _2814 = ((_3017 * _1027) * _3032) + _2589;
        _2816 = ((_3019 * _1029) * _3032) + _2591;
        _2818 = ((_3021 * _1030) * _3032) + _2593;
    }
    else
    {
        _2808 = _2244;
        _2810 = _2246;
        _2812 = _2248;
        _2814 = _2589;
        _2816 = _2591;
        _2818 = _2593;
    }
    float _4791 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _4802 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _4813 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _2835 = ((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2808 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1042))) + ((_2814 + ((isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))) * _1883)) * cbPerFrame._m0[3u].x);
    float _2836 = ((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2810 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1042))) + ((_2816 + ((isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))) * _1883)) * cbPerFrame._m0[3u].x);
    float _2837 = ((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2812 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1042))) + ((_2818 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1883)) * cbPerFrame._m0[3u].x);
    uint _2838 = _1002 + 6u;
    float _2846 = _964 / cbSceneParam._m0[86u].x;
    float _2847 = _965 / cbSceneParam._m0[86u].y;
    vec4 _2861 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2846, _2847, (log2((isnan(cbSceneParam._m0[77u].w) ? _887 : (isnan(_887) ? cbSceneParam._m0[77u].w : min(_887, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2863 = _2861.x;
    float _2864 = _2861.y;
    float _2865 = _2861.z;
    float _2866 = _2861.w;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_887 > cbSceneParam._m0[78u].w)
    {
        float _2921 = isnan(_887) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _887 : min(cbSceneParam._m0[80u].w, _887));
        float _2922 = _2921 / _887;
        float _2933 = _2922 * _937;
        float _2934 = _938 * _2922;
        float _2935 = (-0.0) - _2934;
        float _2937 = _2922 * _939;
        float _2939 = (cbSceneParam._m0[77u].w * _2935) / _2921;
        float _2940 = _2939 + cbSceneParam._m0[79u].w;
        float _2941 = cbSceneParam._m0[79u].w - _2934;
        float _2947 = sqrt(((_2933 * _2933) + (_2934 * _2934)) + (_2937 * _2937));
        float _2950 = (1.0 - (cbSceneParam._m0[77u].w / _2921)) * _2947;
        float _2955 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2957 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3134;
        if (abs((_2935 - _2939) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3134 = ((((_2940 > 0.0) ? exp2(_2955 * _2940) : (2.0 - exp2(_2957 * _2940))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2950;
        }
        else
        {
            float _3078 = 1.0 / cbSceneParam._m0[80u].x;
            float _3079 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : max(_2940, _2941));
            float _3080 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : min(_2940, _2941));
            float _3089 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : min(_3079, 0.0));
            float _3090 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : min(_3080, 0.0));
            _3134 = ((abs(_2947 / _2935) * cbSceneParam._m0[80u].y) * ((((_3089 - _3090) * 2.0) - ((exp2(_2955 * (isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0)))) - exp2(_2955 * (isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))))) * _3078)) - ((exp2(_2957 * _3089) - exp2(_2957 * _3090)) * _3078))) + (_2950 * cbSceneParam._m0[80u].z);
        }
        vec4 _3136 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2846, _2847, 1.0), 0.0);
        float _3145 = exp2((_3134 * (-1.44269502162933349609375)) * (1.0 - _3136.w));
        float _3146 = log2(_3145);
        float _3162 = log2(_2866);
        _2959 = (exp2(_3162 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].x)) * _3136.x) / cbSceneParam._m0[78u].x)) + _2863;
        _2961 = (exp2(_3162 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].y)) * _3136.y) / cbSceneParam._m0[78u].y)) + _2864;
        _2963 = (exp2(_3162 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].z)) * _3136.z) / cbSceneParam._m0[78u].z)) + _2865;
        _2965 = _3145 * _2866;
    }
    else
    {
        _2959 = _2863;
        _2961 = _2864;
        _2963 = _2865;
        _2965 = _2866;
    }
    bool _3172;
    vec4 _2975;
    vec4 _2997;
    float _2999;
    float _3003;
    float _3004;
    float _3005;
    float _3006;
    bool _3016;
    for (;;)
    {
        _2975 = cbMatDynParam._m0[0u];
        float _2977 = roundEven(_2975.y);
        bool _2978 = _2977 == 3.0;
        float _2979 = log2(_2965);
        float _2986 = exp2(_2979 * cbSceneParam._m0[78u].x) * _2835;
        float _2987 = exp2(_2979 * cbSceneParam._m0[78u].y) * _2836;
        float _2988 = exp2(_2979 * cbSceneParam._m0[78u].z) * _2837;
        float _2995 = _953 + (-0.5);
        _2997 = cbMtdParam._m0[1u];
        _2999 = _2997.y * _2995;
        float _3002 = (_2977 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3003 = _3002 * (_2978 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2959)));
        _3004 = _3002 * (_2978 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2961)));
        _3005 = _3002 * (_2978 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2963)));
        _3006 = _2995 * 0.999000012874603271484375;
        _3016 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3016)
        {
            if ((cbInstanceData._m0[_1002 + 7u].x + _3006) < 0.5)
            {
                _3172 = true;
                break;
            }
        }
        uint _3113 = _1003 + uint(_2975.w);
        if ((cbInstanceData._m0[_3113].w < 1.0) && ((cbInstanceData._m0[_3113].w + _3006) < 0.5))
        {
            _3172 = true;
            break;
        }
        if ((_2999 + 1.0) < _2997.x)
        {
            _3172 = true;
            break;
        }
        _3172 = false;
        break;
    }
    float _3377;
    if (_3172)
    {
        discard_state = true;
        _3377 = 0.0;
    }
    else
    {
        _3377 = cbInstanceData._m0[_2838].w;
    }
    SV_Target.x = _3003;
    SV_Target.y = _3004;
    SV_Target.z = _3005;
    SV_Target.w = _3377;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2838].w;
    discard_exit();
}


