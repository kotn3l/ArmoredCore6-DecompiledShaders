#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1408;
float _3789;
float _3790;
float _3791;
float _3792;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _268 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _268.x * cbMtdParam._m0[10u].x;
    float _275 = _268.y * cbMtdParam._m0[10u].y;
    float _276 = _268.z * cbMtdParam._m0[10u].z;
    vec4 _294 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _344 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _354 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _344)) + 1.0;
    float _3801 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _355 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _362 = (_355 * ((_294.x * cbMtdParam._m0[11u].x) - _274)) + _274;
    float _363 = (_355 * ((_294.y * cbMtdParam._m0[11u].y) - _275)) + _275;
    float _364 = (_355 * ((_294.z * cbMtdParam._m0[11u].z) - _276)) + _276;
    vec4 _382 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _413 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _344)) + 1.0;
    float _3812 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _421 = (_414 * ((_382.x * cbMtdParam._m0[12u].x) - _362)) + _362;
    float _422 = (_414 * ((_382.y * cbMtdParam._m0[12u].y) - _363)) + _363;
    float _423 = (_414 * ((_382.z * cbMtdParam._m0[12u].z) - _364)) + _364;
    vec4 _441 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _466 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _344)) + 1.0;
    float _3823 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    vec4 _495 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _503 = ((((_467 * ((_441.x * cbMtdParam._m0[13u].x) - _421)) + _421) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _495.x;
    float _506 = ((((_467 * ((_441.y * cbMtdParam._m0[13u].y) - _422)) + _422) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _495.y;
    float _509 = ((((_467 * ((_441.z * cbMtdParam._m0[13u].z) - _423)) + _423) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _495.z;
    vec4 _530 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _559 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _3834 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _567 = (_560 * ((_530.x * cbMtdParam._m0[15u].x) - _503)) + _503;
    float _568 = (_560 * ((_530.y * cbMtdParam._m0[15u].y) - _506)) + _506;
    float _569 = (_560 * ((_530.z * cbMtdParam._m0[15u].z) - _509)) + _509;
    vec4 _582 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _584 = _582.x;
    float _602 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _584) * _355) + _584;
    float _619 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _602) * _414) + _602;
    float _636 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _619) * _467) + _619;
    vec4 _648 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _668 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _670 = _668.x;
    float _671 = _668.y;
    float _677 = cbMtdParam._m0[18u].y * _668.z;
    vec4 _689 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _698 = (((cbMtdParam._m0[18u].x * _689.z) - _677) * _355) + _677;
    vec4 _711 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _722 = (((cbMtdParam._m0[17u].w * _711.z) - _698) * _414) + _698;
    vec4 _735 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _744 = (((cbMtdParam._m0[17u].z * _735.z) - _722) * _467) + _722;
    vec4 _757 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _771 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_757.z * cbMtdParam._m0[19u].y) - _744)) + _744;
    float _776 = ((_689.x - _670) * _355) + _670;
    float _777 = ((_689.y - _671) * _355) + _671;
    float _782 = ((_711.x - _776) * _414) + _776;
    float _783 = ((_711.y - _777) * _414) + _777;
    float _792 = ((((_735.x - _782) * _467) + _782) * 2.0) + (-1.0);
    float _793 = ((((_735.y - _783) * _467) + _783) * 2.0) + (-1.0);
    float _794 = dot(vec2(_792, _793), vec2(_792, _793));
    float _3845 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _799 = sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))));
    float _812 = (((((_648.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _792) + ((((_757.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _813 = (((((_648.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _793) + ((((_757.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _816 = fma(_799, _238 * NORMAL.x, fma(_813, _245 * TANGENT.x, (_231 * _223) * _812));
    float _819 = fma(_799, _238 * NORMAL.y, fma(_813, _245 * TANGENT.y, (_231 * _224) * _812));
    float _822 = fma(_799, _238 * NORMAL.z, fma(_813, _245 * TANGENT.z, (_231 * _225) * _812));
    float _826 = inversesqrt(dot(vec3(_816, _819, _822), vec3(_816, _819, _822)));
    float _827 = _826 * _816;
    float _828 = _826 * _819;
    float _829 = _826 * _822;
    float _3856 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _830 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3878 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3889 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3900 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _834 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _850 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _900 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _890);
    float _901 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _890);
    float _902 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _890);
    float _906 = inversesqrt(dot(vec3(_900, _901, _902), vec3(_900, _901, _902)));
    float _907 = _900 * _906;
    float _908 = _901 * _906;
    float _909 = _902 * _906;
    vec4 _914 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _916 = _914.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1088 = sqrt(((_900 * _900) + (_901 * _901)) + (_902 * _902));
        float _1094 = (cbMatDynParam._m0[5u].x * _1088) + cbMatDynParam._m0[5u].y;
        float _3911 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1099 = (cbMatDynParam._m0[5u].z * _1088) + cbMatDynParam._m0[5u].w;
        float _3922 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) - _1095)) + _1095) < ((_916 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _927 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _928 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _946 = fma(_829, cbSceneParam._m0[5u].z, fma(_828, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _827));
    float _949 = fma(_829, cbSceneParam._m0[6u].z, fma(_828, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _827));
    float _952 = fma(_829, cbSceneParam._m0[7u].z, fma(_828, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _827));
    uint _965 = uint(roundEven(NORMAL.w)) * 13u;
    uint _966 = _965 + 9u;
    uint _967 = _966 + uint(cbMatDynParam._m0[0u].w);
    float _973 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * cbInstanceData._m0[_967].x;
    float _974 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_967].y;
    float _975 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_967].z;
    float _3933 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _979 = 1.0 - _834;
    float _980 = _976 * _979;
    float _981 = _977 * _979;
    float _982 = _978 * _979;
    float _987 = (_976 + (-0.039999999105930328369140625)) * _834;
    float _988 = (_977 + (-0.039999999105930328369140625)) * _834;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _834;
    float _990 = _987 + 0.039999999105930328369140625;
    float _992 = _988 + 0.039999999105930328369140625;
    float _993 = _989 + 0.039999999105930328369140625;
    vec4 _1002 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _927, cbSceneParam._m0[86u].y * _928));
    float _1005 = _1002.x * TEXCOORD_5.w;
    float _1006 = dot(vec3(_827, _828, _829), vec3(_907, _908, _909));
    float _1009 = _1006 * 2.0;
    float _1013 = (_1009 * _827) - _907;
    float _1014 = (_1009 * _828) - _908;
    float _1015 = (_1009 * _829) - _909;
    float _1019 = abs(dot(vec3(_907, _908, _909), vec3(_827, _828, _829)));
    float _3966 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1021 = sqrt(_830);
    float _1034 = exp2((_1021 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1021 * 3.0));
    float _1040 = (1.0 - _1034) * ((_1021 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1041 = _1034 * _1021;
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1407;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1132 = fma(_1077, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1069));
        float _1136 = fma(_1077, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1069));
        float _1140 = fma(_1077, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1069));
        float _1165 = _1069 + _827;
        float _1166 = _1073 + _828;
        float _1167 = _1077 + _829;
        float _1177 = fma(_1167, cbModelParam._m0[26u].z, fma(_1166, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1165)) - _1132;
        float _1178 = fma(_1167, cbModelParam._m0[27u].z, fma(_1166, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1165)) - _1136;
        float _1179 = fma(_1167, cbModelParam._m0[28u].z, fma(_1166, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1165)) - _1140;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1132 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1136 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[34u].z) + ((((((_1140 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1235 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1201.x + (-0.5));
        float _1237 = _1235 * (_1201.y + (-0.5));
        float _1238 = _1235 * (_1201.z + (-0.5));
        float _1245 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1208.x + (-0.5));
        float _1247 = _1245 * (_1208.y + (-0.5));
        float _1248 = _1245 * (_1208.z + (-0.5));
        float _1255 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1215.x + (-0.5));
        float _1257 = _1255 * (_1215.y + (-0.5));
        float _1258 = _1255 * (_1215.z + (-0.5));
        float _1265 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1222.x + (-0.5));
        float _1267 = _1265 * (_1222.y + (-0.5));
        float _1268 = _1265 * (_1222.z + (-0.5));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = _1236 * 0.5;
        float _1273 = _1246 * 0.5;
        float _1274 = _1256 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1289 = (dot(vec3(_827, _828, _829), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1299 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4014 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1301 + 1.0))) + _1306) * _1269;
        float _1316 = _1237 * 0.5;
        float _1317 = _1247 * 0.5;
        float _1318 = _1257 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_827, _828, _829), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4047 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1343 + 1.0))) + _1348) * _1270;
        float _1358 = _1238 * 0.5;
        float _1359 = _1248 * 0.5;
        float _1360 = _1258 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_827, _828, _829), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4080 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1385 + 1.0))) + _1390) * _1271;
        _1407 = _1238;
        _1409 = _1237;
        _1410 = _1236;
        _1411 = _1248;
        _1412 = _1247;
        _1413 = _1246;
        _1414 = _1258;
        _1415 = _1257;
        _1416 = _1256;
        _1417 = _1271;
        _1418 = _1270;
        _1419 = _1269;
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
    }
    else
    {
        _1407 = _1408;
        _1409 = _1408;
        _1410 = _1408;
        _1411 = _1408;
        _1412 = _1408;
        _1413 = _1408;
        _1414 = _1408;
        _1415 = _1408;
        _1416 = _1408;
        _1417 = _1408;
        _1418 = _1408;
        _1419 = _1408;
        _1420 = 0.0;
        _1421 = 0.0;
        _1422 = 0.0;
    }
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1451 = fma(_1077, cbModelParam._m0[30u].z, fma(_1073, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069));
        float _1455 = fma(_1077, cbModelParam._m0[31u].z, fma(_1073, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069));
        float _1459 = fma(_1077, cbModelParam._m0[32u].z, fma(_1073, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069));
        float _1482 = _1069 + _827;
        float _1483 = _1073 + _828;
        float _1484 = _1077 + _829;
        float _1494 = fma(_1484, cbModelParam._m0[30u].z, fma(_1483, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1482)) - _1451;
        float _1495 = fma(_1484, cbModelParam._m0[31u].z, fma(_1483, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1482)) - _1455;
        float _1496 = fma(_1484, cbModelParam._m0[32u].z, fma(_1483, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1482)) - _1459;
        float _1500 = inversesqrt(dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496)));
        float _1513 = ((_1500 * _1494) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1451 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1514 = ((_1500 * _1495) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1455 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1515 = ((_1500 * _1496) / cbModelParam._m0[35u].z) + ((((((_1459 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        float _1550 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1517.x + (-0.5));
        float _1552 = _1550 * (_1517.y + (-0.5));
        float _1553 = _1550 * (_1517.z + (-0.5));
        float _1560 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1524.x + (-0.5));
        float _1562 = _1560 * (_1524.y + (-0.5));
        float _1563 = _1560 * (_1524.z + (-0.5));
        float _1570 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1531.x + (-0.5));
        float _1572 = _1570 * (_1531.y + (-0.5));
        float _1573 = _1570 * (_1531.z + (-0.5));
        float _1580 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1538.x + (-0.5));
        float _1582 = _1580 * (_1538.y + (-0.5));
        float _1583 = _1580 * (_1538.z + (-0.5));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = _1551 * 0.5;
        float _1588 = _1561 * 0.5;
        float _1589 = _1571 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_827, _828, _829), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4143 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1614 + 1.0))) + _1619) * _1584;
        float _1629 = _1552 * 0.5;
        float _1630 = _1562 * 0.5;
        float _1631 = _1572 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_827, _828, _829), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4176 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1656 + 1.0))) + _1661) * _1585;
        float _1671 = _1553 * 0.5;
        float _1672 = _1563 * 0.5;
        float _1673 = _1573 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_827, _828, _829), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4209 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1698 + 1.0))) + _1703) * _1586;
        _1720 = _1553;
        _1721 = _1552;
        _1722 = _1551;
        _1723 = _1563;
        _1724 = _1562;
        _1725 = _1561;
        _1726 = _1573;
        _1727 = _1572;
        _1728 = _1571;
        _1729 = _1586;
        _1730 = _1585;
        _1731 = _1584;
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
    }
    else
    {
        _1720 = _1408;
        _1721 = _1408;
        _1722 = _1408;
        _1723 = _1408;
        _1724 = _1408;
        _1725 = _1408;
        _1726 = _1408;
        _1727 = _1408;
        _1728 = _1408;
        _1729 = _1408;
        _1730 = _1408;
        _1731 = _1408;
        _1732 = 0.0;
        _1733 = 0.0;
        _1734 = 0.0;
    }
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1420)) + _1420;
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1421)) + _1421;
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1422)) + _1422;
    float _1767 = fma(_1746, cbSceneParam._m0[89u].z, fma(_1745, cbSceneParam._m0[89u].y, _1744 * cbSceneParam._m0[89u].x));
    float _1770 = fma(_1746, cbSceneParam._m0[90u].z, fma(_1745, cbSceneParam._m0[90u].y, _1744 * cbSceneParam._m0[90u].x));
    float _1773 = fma(_1746, cbSceneParam._m0[91u].z, fma(_1745, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1744));
    float _1788 = _1013 * 0.5;
    float _1789 = _1014 * 0.5;
    float _1790 = _1015 * 0.5;
    float _1791 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1794 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1797 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1831;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1804 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1407, _1411, _1414, _1417));
        float _1808 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1409, _1412, _1415, _1418));
        float _1812 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1410, _1413, _1416, _1419));
        float _1819 = dot(vec4(cbModelParam._m0[39u]), vec4(_1788, _1789, _1790, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1819) ? 0.0 : (isnan(0.0) ? _1819 : max(0.0, _1819))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1842;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1833 = dot(vec4(cbModelParam._m0[40u]), vec4(_1788, _1789, _1790, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1833) ? 0.0 : (isnan(0.0) ? _1833 : max(0.0, _1833))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1846 = (_1842 * cbModelParam._m0[1u].x) + (_1831 * (1.0 - cbModelParam._m0[1u].x));
    float _1856 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _830);
    float _1857 = isnan(_1856) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1856 : min(cbModelParam._m0[25u].z, _1856));
    float _1937;
    float _1939;
    float _1941;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1904 = fma(_1077, cbModelParam._m0[13u].z, fma(_1073, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069)) + cbModelParam._m0[13u].w;
        float _1908 = fma(_1077, cbModelParam._m0[14u].z, fma(_1073, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069)) + cbModelParam._m0[14u].w;
        float _1912 = fma(_1077, cbModelParam._m0[15u].z, fma(_1073, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069)) + cbModelParam._m0[15u].w;
        float _1915 = fma(_1015, cbModelParam._m0[13u].z, fma(_1014, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1013));
        float _1918 = fma(_1015, cbModelParam._m0[14u].z, fma(_1014, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1013));
        float _1921 = fma(_1015, cbModelParam._m0[15u].z, fma(_1014, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1013));
        float _1949;
        if (_1915 > 0.0)
        {
            _1949 = abs((1.0 - _1904) / _1915);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1904 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1949 = frontier_phi_17_15_ladder;
        }
        float _2151;
        if (_1918 > 0.0)
        {
            _2151 = abs((1.0 - _1908) / _1918);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1908 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2151 = frontier_phi_26_22_ladder;
        }
        float _2405;
        if (_1921 > 0.0)
        {
            _2405 = abs((1.0 - _1912) / _1921);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1912 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2405 = frontier_phi_38_33_ladder;
        }
        float _2407 = isnan(_2151) ? _1949 : (isnan(_1949) ? _2151 : min(_1949, _2151));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1915) + _1904;
        float _2413 = (_2408 * _1918) + _1908;
        float _2414 = (_2408 * _1921) + _1912;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2417 = (-1.0) - _2415;
        float _2419 = _2415 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2414 > _2419) || ((_2414 < _2417) || ((_2413 > _2419) || ((_2413 < _2417) || ((_2412 < _2417) || (_2412 > _2419))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2414, cbModelParam._m0[9u].z, fma(_2413, cbModelParam._m0[9u].y, _2412 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2414, cbModelParam._m0[10u].z, fma(_2413, cbModelParam._m0[10u].y, _2412 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2414, cbModelParam._m0[11u].z, fma(_2413, cbModelParam._m0[11u].y, _2412 * cbModelParam._m0[11u].x))), _1857);
            frontier_phi_16_38_ladder = _2542.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2542.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2542.x * cbModelParam._m0[1u].y;
        }
        _1937 = frontier_phi_16_38_ladder_2;
        _1939 = frontier_phi_16_38_ladder_1;
        _1941 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1925 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1013, _1014, _1015), _1857);
        _1937 = _1925.x * cbModelParam._m0[1u].y;
        _1939 = _1925.y * cbModelParam._m0[1u].y;
        _1941 = _1925.z * cbModelParam._m0[1u].y;
    }
    float _1945 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _830);
    float _1946 = isnan(_1945) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1945 : min(cbModelParam._m0[25u].w, _1945));
    float _2035;
    float _2037;
    float _2039;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1999 = fma(_1077, cbModelParam._m0[21u].z, fma(_1073, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069)) + cbModelParam._m0[21u].w;
        float _2003 = fma(_1077, cbModelParam._m0[22u].z, fma(_1073, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069)) + cbModelParam._m0[22u].w;
        float _2007 = fma(_1077, cbModelParam._m0[23u].z, fma(_1073, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069)) + cbModelParam._m0[23u].w;
        float _2010 = fma(_1015, cbModelParam._m0[21u].z, fma(_1014, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1013));
        float _2013 = fma(_1015, cbModelParam._m0[22u].z, fma(_1014, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1013));
        float _2016 = fma(_1015, cbModelParam._m0[23u].z, fma(_1014, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1013));
        float _2156;
        if (_2010 > 0.0)
        {
            _2156 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2156 = frontier_phi_28_24_ladder;
        }
        float _2432;
        if (_2013 > 0.0)
        {
            _2432 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2432 = frontier_phi_40_35_ladder;
        }
        float _2645;
        if (_2016 > 0.0)
        {
            _2645 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2645 = frontier_phi_49_46_ladder;
        }
        float _2647 = isnan(_2432) ? _2156 : (isnan(_2156) ? _2432 : min(_2156, _2432));
        float _2648 = isnan(_2645) ? _2647 : (isnan(_2647) ? _2645 : min(_2647, _2645));
        float _2652 = (_2648 * _2010) + _1999;
        float _2653 = (_2648 * _2013) + _2003;
        float _2654 = (_2648 * _2016) + _2007;
        float _2655 = _2648 * 9.9999997473787516355514526367188e-05;
        float _2656 = (-1.0) - _2655;
        float _2658 = _2655 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2654 > _2658) || ((_2654 < _2656) || ((_2653 > _2658) || ((_2653 < _2656) || ((_2652 < _2656) || (_2652 > _2658))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2853 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2654, cbModelParam._m0[17u].z, fma(_2653, cbModelParam._m0[17u].y, _2652 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2654, cbModelParam._m0[18u].z, fma(_2653, cbModelParam._m0[18u].y, _2652 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2654, cbModelParam._m0[19u].z, fma(_2653, cbModelParam._m0[19u].y, _2652 * cbModelParam._m0[19u].x))), _1946);
            frontier_phi_25_49_ladder = _2853.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2853.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2853.x * cbModelParam._m0[1u].z;
        }
        _2035 = frontier_phi_25_49_ladder_2;
        _2037 = frontier_phi_25_49_ladder_1;
        _2039 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2019 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1013, _1014, _1015), _1946);
        _2035 = _2019.x * cbModelParam._m0[1u].z;
        _2037 = _2019.y * cbModelParam._m0[1u].z;
        _2039 = _2019.z * cbModelParam._m0[1u].z;
    }
    float _2052 = (((_1040 * _990) + _1041) * _1005) * ((cbModelParam._m0[1u].w * (_2035 - _1937)) + _1937);
    float _2054 = (((_1040 * _992) + _1041) * _1005) * ((cbModelParam._m0[1u].w * (_2037 - _1939)) + _1939);
    float _2056 = (((_1040 * _993) + _1041) * _1005) * ((cbModelParam._m0[1u].w * (_2039 - _1941)) + _1941);
    float _2059 = fma(_2056, cbSceneParam._m0[89u].z, fma(_2054, cbSceneParam._m0[89u].y, _2052 * cbSceneParam._m0[89u].x));
    float _2062 = fma(_2056, cbSceneParam._m0[90u].z, fma(_2054, cbSceneParam._m0[90u].y, _2052 * cbSceneParam._m0[90u].x));
    float _2065 = fma(_2056, cbSceneParam._m0[91u].z, fma(_2054, cbSceneParam._m0[91u].y, _2052 * cbSceneParam._m0[91u].x));
    uvec4 _2075 = floatBitsToUint(cbInstanceData._m0[_965 + 5u]);
    uint _2077 = _2075.x * 14u;
    uint _2078 = _2077 + 13u;
    float _2085 = _1005 + (-1.0);
    float _2090 = (cbLight._m0[_2078].x * _2085) + 1.0;
    float _2091 = (cbLight._m0[_2078].y * _2085) + 1.0;
    float _2092 = (cbLight._m0[_2078].z * _2085) + 1.0;
    float _2093 = (cbLight._m0[_2078].w * _2085) + 1.0;
    uint _2094 = _2077 + 5u;
    float _2100 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
    uint _2104 = _2077 + 4u;
    float _2110 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
    uint _2114 = _2077 | 1u;
    float _2125 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_827, _828, _829));
    float _2128 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_827, _828, _829));
    float _4345 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _4356 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2133 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2135 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2142 = ((cbLight._m0[_2094].x * _2100) * _2135) + ((cbLight._m0[_2104].x * _2110) * _2133);
    float _2143 = ((_2100 * cbLight._m0[_2094].y) * _2135) + ((_2110 * cbLight._m0[_2104].y) * _2133);
    float _2144 = ((_2100 * cbLight._m0[_2094].z) * _2135) + ((_2110 * cbLight._m0[_2104].z) * _2133);
    uvec4 _2148 = floatBitsToUint(cbLight._m0[_2077 + 12u]);
    bool _2150 = _2148.x == 0u;
    float _2161;
    float _2163;
    float _2165;
    if (_2150)
    {
        _2161 = _2142;
        _2163 = _2143;
        _2165 = _2144;
    }
    else
    {
        uint _2169 = _2077 + 6u;
        float _2185 = (dot(vec3(cbLight._m0[_2077 + 2u].xyz), vec3(_827, _828, _829)) * 0.5) + 0.5;
        float _2186 = _2185 * _2185;
        float _4367 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2187 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2188 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2161 = (((cbLight._m0[_2169].x * 0.3183098733425140380859375) * _2187) * _2188) + _2142;
        _2163 = (((cbLight._m0[_2169].y * 0.3183098733425140380859375) * _2187) * _2188) + _2143;
        _2165 = (((cbLight._m0[_2169].z * 0.3183098733425140380859375) * _2187) * _2188) + _2144;
    }
    bool _2168 = _2148.y == 0u;
    float _2206;
    float _2208;
    float _2210;
    if (_2168)
    {
        _2206 = _2161;
        _2208 = _2163;
        _2210 = _2165;
    }
    else
    {
        uint _2376 = _2077 + 7u;
        float _2392 = (dot(vec3(cbLight._m0[_2077 + 3u].xyz), vec3(_827, _828, _829)) * 0.5) + 0.5;
        float _2393 = _2392 * _2392;
        float _4383 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2394 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2395 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2206 = (((cbLight._m0[_2376].x * 0.3183098733425140380859375) * _2394) * _2395) + _2161;
        _2208 = (((cbLight._m0[_2376].y * 0.3183098733425140380859375) * _2394) * _2395) + _2163;
        _2210 = (((cbLight._m0[_2376].z * 0.3183098733425140380859375) * _2394) * _2395) + _2165;
    }
    uint _2213 = _2077 + 8u;
    float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _830) * 0.949999988079071044921875);
    float _2227 = _2226 * _2226;
    float _2228 = cbLight._m0[_2077].x + _907;
    float _2229 = cbLight._m0[_2077].y + _908;
    float _2230 = cbLight._m0[_2077].z + _909;
    float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
    float _2235 = _2234 * _2228;
    float _2236 = _2234 * _2229;
    float _2237 = _2234 * _2230;
    float _2238 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2077].xyz));
    float _4399 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _4410 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _2242 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2243 = dot(vec3(_827, _828, _829), vec3(_2235, _2236, _2237));
    float _4421 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2247 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2235, _2236, _2237));
    float _4432 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2251 = _2227 * _2227;
    float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
    float _2263 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
    float _2264 = 0.959999978542327880859375 - _987;
    float _2266 = 0.959999978542327880859375 - _988;
    float _2267 = 0.959999978542327880859375 - _989;
    float _2274 = 1.0 - _2227;
    float _2285 = (0.5 / (((_2242 * ((_2241 * _2274) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2274) + _2227) * _2241))) * _2241;
    float _4443 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2287 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
    uint _2298 = _2077 + 9u;
    float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _830) * 0.949999988079071044921875);
    float _2310 = _2309 * _2309;
    float _2311 = cbLight._m0[_2114].x + _907;
    float _2312 = cbLight._m0[_2114].y + _908;
    float _2313 = cbLight._m0[_2114].z + _909;
    float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
    float _2318 = _2317 * _2311;
    float _2319 = _2317 * _2312;
    float _2320 = _2317 * _2313;
    float _2321 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2114].xyz));
    float _4454 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2325 = dot(vec3(_827, _828, _829), vec3(_2318, _2319, _2320));
    float _4465 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2329 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2318, _2319, _2320));
    float _4476 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2333 = _2310 * _2310;
    float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
    float _2344 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
    float _2351 = 1.0 - _2310;
    float _2361 = (0.5 / (((_2242 * ((_2324 * _2351) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2351) + _2310) * _2324))) * _2324;
    float _4487 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2363 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
    float _2373 = (((((_2344 * _2264) + _990) * cbLight._m0[_2298].x) * _2363) * _2100) + (((((_2263 * _2264) + _990) * cbLight._m0[_2213].x) * _2287) * _2110);
    float _2374 = (((((_2344 * _2266) + _992) * cbLight._m0[_2298].y) * _2363) * _2100) + (((((_2263 * _2266) + _992) * cbLight._m0[_2213].y) * _2287) * _2110);
    float _2375 = (((((_2344 * _2267) + _993) * cbLight._m0[_2298].z) * _2363) * _2100) + (((((_2263 * _2267) + _993) * cbLight._m0[_2213].z) * _2287) * _2110);
    float _2437;
    float _2439;
    float _2441;
    if (_2150)
    {
        _2437 = _2373;
        _2439 = _2374;
        _2441 = _2375;
    }
    else
    {
        uint _2443 = _2077 + 2u;
        uint _2447 = _2077 + 10u;
        float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2443].w)) * _830) * 0.949999988079071044921875);
        float _2462 = _2461 * _2461;
        float _2463 = cbLight._m0[_2443].x + _907;
        float _2464 = cbLight._m0[_2443].y + _908;
        float _2465 = cbLight._m0[_2443].z + _909;
        float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
        float _2470 = _2469 * _2463;
        float _2471 = _2469 * _2464;
        float _2472 = _2469 * _2465;
        float _2473 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2443].xyz));
        float _4498 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2477 = dot(vec3(_827, _828, _829), vec3(_2470, _2471, _2472));
        float _4509 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2481 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_2470, _2471, _2472));
        float _4520 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2485 = _2462 * _2462;
        float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
        float _2496 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
        float _2503 = 1.0 - _2462;
        float _2513 = (0.5 / (((_2242 * ((_2476 * _2503) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2503) + _2462) * _2476))) * _2476;
        float _4531 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2515 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
        float _2516 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2437 = (((((_2496 * _2264) + _990) * cbLight._m0[_2447].x) * _2515) * _2516) + _2373;
        _2439 = (((((_2496 * _2266) + _992) * cbLight._m0[_2447].y) * _2515) * _2516) + _2374;
        _2441 = (((((_2496 * _2267) + _993) * cbLight._m0[_2447].z) * _2515) * _2516) + _2375;
    }
    float _2551;
    float _2553;
    float _2555;
    if (_2168)
    {
        _2551 = _2437;
        _2553 = _2439;
        _2555 = _2441;
    }
    else
    {
        uint _2562 = _2077 + 3u;
        uint _2566 = _2077 + 11u;
        float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _830) * 0.949999988079071044921875);
        float _2581 = _2580 * _2580;
        float _2582 = cbLight._m0[_2562].x + _907;
        float _2583 = cbLight._m0[_2562].y + _908;
        float _2584 = cbLight._m0[_2562].z + _909;
        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
        float _2589 = _2588 * _2582;
        float _2590 = _2588 * _2583;
        float _2591 = _2588 * _2584;
        float _2592 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2562].xyz));
        float _4547 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2596 = dot(vec3(_827, _828, _829), vec3(_2589, _2590, _2591));
        float _4558 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2600 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2589, _2590, _2591));
        float _4569 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _2581 * _2581;
        float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
        float _2615 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
        float _2622 = 1.0 - _2581;
        float _2632 = (0.5 / (((_2242 * ((_2595 * _2622) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2622) + _2581) * _2595))) * _2595;
        float _4580 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2634 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
        float _2635 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2551 = (((((_2615 * _2264) + _990) * cbLight._m0[_2566].x) * _2634) * _2635) + _2437;
        _2553 = (((((_2615 * _2266) + _992) * cbLight._m0[_2566].y) * _2634) * _2635) + _2439;
        _2555 = (((((_2615 * _2267) + _993) * cbLight._m0[_2566].z) * _2634) * _2635) + _2441;
    }
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    if (_2075.y == 0u)
    {
        float _2710 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2711 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2710;
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2710;
        float _2713 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2710;
        uvec4 _2725 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2726 = _2725.x;
        uint _2737 = uint((float(_2725.y) * floor(float(uint(cbSceneParam._m0[85u].y * _928) / _2726))) + floor(float(uint(cbSceneParam._m0[85u].x * _927) / _2726)));
        float _2747 = (log2(_2713 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2748 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        uint _2751 = uint(isnan(14.0) ? _2748 : (isnan(_2748) ? 14.0 : min(_2748, 14.0)));
        uvec4 _2756 = texelFetch(g_lightClusterGridBuffer, int(((_2751 << 2u) + (_2737 << 6u)) >> 2u));
        uint _2757 = _2756.x;
        uint _2758 = _2725.z;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        if (((((1u << ((_2758 >> 4u) & 15u)) + 4294967295u) & _2757) == 0u) || ((_2758 & 240u) == 0u))
        {
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
        }
        else
        {
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            uint _3017 = 0u;
            uint _3026;
            bool _3027;
            for (;;)
            {
                _3026 = texelFetch(g_lightClassification, int((((_2751 << 5u) + (_2737 << 9u)) + (_3017 << 2u)) >> 2u)).x;
                _3027 = _3026 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3027)
                {
                    frontier_phi_66_pred = _3011;
                    frontier_phi_66_pred_1 = _3016;
                    frontier_phi_66_pred_2 = _3015;
                    frontier_phi_66_pred_3 = _3014;
                    frontier_phi_66_pred_4 = _3013;
                    frontier_phi_66_pred_5 = _3012;
                }
                else
                {
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    uint _3162;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3016;
                    _3162 = _3026;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    for (;;)
                    {
                        uint _3166 = uint(findLSB(_3162)) + (_3017 << 5u);
                        uint _3163 = (_3162 + 4294967295u) & _3162;
                        uint _3168 = _3166 * 48u;
                        vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3168)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 3u)).x));
                        uint _3188 = (_3166 * 48u) + 4u;
                        vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3188)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 3u)).x));
                        uint _3207 = (_3166 * 48u) + 8u;
                        vec3 _3218 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3207)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 2u)).x));
                        float _3222 = _3182.x - _2711;
                        float _3223 = _3182.y - _2712;
                        float _3224 = _3182.z - _2713;
                        float _3225 = dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224));
                        float _3228 = inversesqrt(_3225);
                        float _3229 = _3228 * _3222;
                        float _3230 = _3228 * _3223;
                        float _3231 = _3228 * _3224;
                        float _3232 = dot(vec3(_946, _949, _952), vec3(_3229, _3230, _3231));
                        float _3237 = 1.0 - (_3225 * _3182.w);
                        float _4606 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3238 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3239 = sqrt(_3225) * _3201.w;
                        float _3242 = 1.39999997615814208984375 / (_3239 + 1.39999997615814208984375);
                        float _3243 = _3242 * _3242;
                        float _3246 = ((1.0 - _3243) * _3232) + _3243;
                        float _3249 = _3239 * _3239;
                        float _3253 = ((isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0))) * _3238) / ((_3249 * 0.699999988079071044921875) + 1.0);
                        float _3257 = (-0.0) - _2711;
                        float _3258 = (-0.0) - _2712;
                        float _3259 = (-0.0) - _2713;
                        float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                        float _3264 = _3263 * _3257;
                        float _3265 = _3263 * _3258;
                        float _3266 = _3263 * _3259;
                        float _3274 = exp2(log2(1.0 / ((_3249 * 3.5) + 5.0)) * 0.25);
                        float _3275 = 1.0 - _1021;
                        float _3282 = sqrt(1.0 - ((1.0 - (_3275 * _3275)) * (1.0 - (_3274 * _3274))));
                        float _3283 = _3282 * _3282;
                        float _3284 = _3283 * _3283;
                        float _3285 = _3264 + _3229;
                        float _3286 = _3265 + _3230;
                        float _3287 = _3266 + _3231;
                        float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                        float _3295 = dot(vec3(_946, _949, _952), vec3(_3264, _3265, _3266));
                        float _4622 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3298 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3299 = dot(vec3(_946, _949, _952), vec3(_3291 * _3285, _3291 * _3286, _3291 * _3287));
                        float _4633 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3302 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3306 = ((_3302 * _3302) * (_3284 + (-1.0))) + 1.0;
                        float _3307 = _3242 * _3283;
                        float _3308 = _3307 * _3307;
                        float _3311 = ((1.0 - _3308) * _3232) + _3308;
                        float _4644 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3312 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3313 = 1.0 - _3283;
                        float _3323 = (0.5 / (((_3312 * ((_3298 * _3313) + _3283)) + 9.9999999392252902907785028219223e-09) + (((_3312 * _3313) + _3283) * _3298))) * _3312;
                        float _4655 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3334 = (((_3284 * 3.1415927410125732421875) * (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) / ((_3306 * _3306) * ((_3249 * 2.1991131305694580078125) + 3.141590118408203125))) * _3238;
                        _3086 = (_3253 * _3201.x) + _3159;
                        _3087 = (_3253 * _3201.y) + _3160;
                        _3088 = (_3253 * _3201.z) + _3161;
                        _3083 = (_3334 * _3218.x) + _3156;
                        _3084 = (_3334 * _3218.y) + _3157;
                        _3085 = (_3334 * _3218.z) + _3158;
                        if (_3163 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3088;
                            _3162 = _3163;
                        }
                    }
                    frontier_phi_66_pred = _3083;
                    frontier_phi_66_pred_1 = _3088;
                    frontier_phi_66_pred_2 = _3087;
                    frontier_phi_66_pred_3 = _3086;
                    frontier_phi_66_pred_4 = _3085;
                    frontier_phi_66_pred_5 = _3084;
                }
                _2859 = frontier_phi_66_pred;
                _2869 = frontier_phi_66_pred_1;
                _2867 = frontier_phi_66_pred_2;
                _2865 = frontier_phi_66_pred_3;
                _2863 = frontier_phi_66_pred_4;
                _2861 = frontier_phi_66_pred_5;
                uint _3018 = _3017 + 1u;
                if (_3018 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3011 = _2859;
                    _3012 = _2861;
                    _3013 = _2863;
                    _3014 = _2865;
                    _3015 = _2867;
                    _3016 = _2869;
                    _3017 = _3018;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
        }
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.z;
        uint _2875 = (_2873 >> 8u) & 15u;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        if (((4294967295u << _2875) & _2757) == 0u)
        {
            _2979 = _2858;
            _2981 = _2860;
            _2983 = _2862;
            _2985 = _2864;
            _2987 = _2866;
            _2989 = _2868;
        }
        else
        {
            float _3004 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
            float _3005 = _3004 * _2711;
            float _3006 = _3004 * _2712;
            float _3007 = _3004 * _2713;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2875 < ((_2873 >> 12u) & 15u))
            {
                float _2980;
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _3139 = _2858;
                float _3140 = _2860;
                float _3141 = _2862;
                float _3142 = _2864;
                float _3143 = _2866;
                float _3144 = _2868;
                uint _3145 = _2875;
                uint _3154;
                bool _3155;
                for (;;)
                {
                    _3154 = texelFetch(g_lightClassification, int((((_2751 << 5u) + (_2737 << 9u)) + (_3145 << 2u)) >> 2u)).x;
                    _3155 = _3154 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3155)
                    {
                        frontier_phi_77_pred = _3144;
                        frontier_phi_77_pred_1 = _3143;
                        frontier_phi_77_pred_2 = _3142;
                        frontier_phi_77_pred_3 = _3141;
                        frontier_phi_77_pred_4 = _3140;
                        frontier_phi_77_pred_5 = _3139;
                    }
                    else
                    {
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3361 = _3139;
                        float _3362 = _3140;
                        float _3363 = _3141;
                        float _3364 = _3142;
                        float _3365 = _3143;
                        float _3366 = _3144;
                        uint _3367 = _3154;
                        uint _3368;
                        vec4 _3393;
                        float _3394;
                        vec4 _3409;
                        vec3 _3421;
                        vec4 _3436;
                        vec4 _3451;
                        float _3498;
                        bool _3499;
                        for (;;)
                        {
                            uint _3378 = ((_3145 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3367));
                            _3368 = (_3367 + 4294967295u) & _3367;
                            uint _3380 = _3378 * 40u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            _3394 = _3393.w;
                            uint _3396 = (_3378 * 40u) + 4u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3411 = (_3378 * 40u) + 8u;
                            _3421 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x));
                            uint _3423 = (_3378 * 40u) + 16u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3438 = (_3378 * 40u) + 20u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3454 = (_3378 * 40u) + 24u;
                            vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3473 = (_3378 * 40u) + 28u;
                            vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            _3498 = fma(_2713, _3486.z, fma(_2712, _3486.y, _3486.x * _2711)) + _3486.w;
                            _3499 = !((fma(_2713, _3467.z, fma(_2712, _3467.y, _3467.x * _2711)) + _3467.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3499)
                            {
                                float _3526 = _3393.x - _2711;
                                float _3527 = _3393.y - _2712;
                                float _3528 = _3393.z - _2713;
                                float _3529 = dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528));
                                float _3532 = inversesqrt(_3529);
                                float _3533 = _3532 * _3526;
                                float _3534 = _3532 * _3527;
                                float _3535 = _3532 * _3528;
                                float _3539 = 1.0 - (_3529 / (_3394 * _3394));
                                float _4666 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3544 = sqrt(_3529) * _3409.w;
                                float _3546 = 1.39999997615814208984375 / (_3544 + 1.39999997615814208984375);
                                float _3547 = _3546 * _3546;
                                float _3550 = ((1.0 - _3547) * dot(vec3(_3533, _3534, _3535), vec3(_946, _949, _952))) + _3547;
                                float _3553 = _3544 * _3544;
                                float _3557 = (fma(_2713, _3436.z, fma(_2712, _3436.y, _3436.x * _2711)) + _3436.w) / _3498;
                                float _3558 = (fma(_2713, _3451.z, fma(_2712, _3451.y, _3451.x * _2711)) + _3451.w) / _3498;
                                float _3562 = 1.0 - dot(vec2(_3557, _3558), vec2(_3557, _3558));
                                float _4682 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3564 = _3563 * (((isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0))) * _3540) / ((_3553 * 0.699999988079071044921875) + 1.0));
                                float _3576 = exp2(log2(1.0 / ((_3553 * 3.5) + 5.0)) * 0.25);
                                float _3577 = 1.0 - _1021;
                                float _3584 = sqrt(1.0 - ((1.0 - (_3577 * _3577)) * (1.0 - (_3576 * _3576))));
                                float _3585 = _3584 * _3584;
                                float _3586 = _3585 * _3585;
                                float _3587 = _3533 - _3005;
                                float _3588 = _3534 - _3006;
                                float _3589 = _3535 - _3007;
                                float _3593 = inversesqrt(dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589)));
                                float _3597 = dot(vec3(_946, _949, _952), vec3((-0.0) - _3005, (-0.0) - _3006, (-0.0) - _3007));
                                float _4693 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3600 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3601 = dot(vec3(_946, _949, _952), vec3(_3593 * _3587, _3593 * _3588, _3593 * _3589));
                                float _4704 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3608 = ((_3604 * _3604) * (_3586 + (-1.0))) + 1.0;
                                float _3609 = _3546 * _3585;
                                float _3610 = _3609 * _3609;
                                float _3616 = ((1.0 - _3610) * dot(vec3(_946, _949, _952), vec3(_3533, _3534, _3535))) + _3610;
                                float _4715 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3617 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3618 = 1.0 - _3585;
                                float _3628 = (0.5 / (((_3617 * ((_3600 * _3618) + _3585)) + 9.9999999392252902907785028219223e-09) + (((_3617 * _3618) + _3585) * _3600))) * _3617;
                                float _4726 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3638 = (_3563 * _3540) * (((_3586 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3608 * _3608) * ((_3553 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3564 * _3409.y;
                                frontier_phi_83_pred_1 = _3564 * _3409.x;
                                frontier_phi_83_pred_2 = _3638 * _3421.z;
                                frontier_phi_83_pred_3 = _3638 * _3421.y;
                                frontier_phi_83_pred_4 = _3638 * _3421.x;
                                frontier_phi_83_pred_5 = _3564 * _3409.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3646 = frontier_phi_83_pred;
                            _3645 = frontier_phi_83_pred_1;
                            _3644 = frontier_phi_83_pred_2;
                            _3643 = frontier_phi_83_pred_3;
                            _3642 = frontier_phi_83_pred_4;
                            _3647 = frontier_phi_83_pred_5;
                            _3351 = _3645 + _3364;
                            _3352 = _3646 + _3365;
                            _3353 = _3647 + _3366;
                            _3348 = _3642 + _3361;
                            _3349 = _3643 + _3362;
                            _3350 = _3644 + _3363;
                            if (_3368 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3368;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3353;
                        frontier_phi_77_pred_1 = _3352;
                        frontier_phi_77_pred_2 = _3351;
                        frontier_phi_77_pred_3 = _3350;
                        frontier_phi_77_pred_4 = _3349;
                        frontier_phi_77_pred_5 = _3348;
                    }
                    _2990 = frontier_phi_77_pred;
                    _2988 = frontier_phi_77_pred_1;
                    _2986 = frontier_phi_77_pred_2;
                    _2984 = frontier_phi_77_pred_3;
                    _2982 = frontier_phi_77_pred_4;
                    _2980 = frontier_phi_77_pred_5;
                    uint _3146 = _3145 + 1u;
                    if (_3146 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3139 = _2980;
                        _3140 = _2982;
                        _3141 = _2984;
                        _3142 = _2986;
                        _3143 = _2988;
                        _3144 = _2990;
                        _3145 = _3146;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2984;
                frontier_phi_58_59_ladder_1 = _2990;
                frontier_phi_58_59_ladder_2 = _2988;
                frontier_phi_58_59_ladder_3 = _2986;
                frontier_phi_58_59_ladder_4 = _2982;
                frontier_phi_58_59_ladder_5 = _2980;
            }
            else
            {
                frontier_phi_58_59_ladder = _2862;
                frontier_phi_58_59_ladder_1 = _2868;
                frontier_phi_58_59_ladder_2 = _2866;
                frontier_phi_58_59_ladder_3 = _2864;
                frontier_phi_58_59_ladder_4 = _2860;
                frontier_phi_58_59_ladder_5 = _2858;
            }
            _2979 = frontier_phi_58_59_ladder_5;
            _2981 = frontier_phi_58_59_ladder_4;
            _2983 = frontier_phi_58_59_ladder;
            _2985 = frontier_phi_58_59_ladder_3;
            _2987 = frontier_phi_58_59_ladder_2;
            _2989 = frontier_phi_58_59_ladder_1;
        }
        float _2994 = isnan(1.0) ? _1005 : (isnan(_1005) ? 1.0 : min(_1005, 1.0));
        _2770 = (_2994 * _2985) + _2206;
        _2772 = (_2994 * _2987) + _2208;
        _2774 = (_2994 * _2989) + _2210;
        _2776 = ((_2979 * _990) * _2994) + _2551;
        _2778 = ((_2981 * _992) * _2994) + _2553;
        _2780 = ((_2983 * _993) * _2994) + _2555;
    }
    else
    {
        _2770 = _2206;
        _2772 = _2208;
        _2774 = _2210;
        _2776 = _2551;
        _2778 = _2553;
        _2780 = _2555;
    }
    float _4742 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4753 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4764 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _2797 = ((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2770 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1005))) + ((_2776 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1846)) * cbPerFrame._m0[3u].x);
    float _2798 = ((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2772 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1005))) + ((_2778 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1846)) * cbPerFrame._m0[3u].x);
    float _2799 = ((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2774 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1005))) + ((_2780 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1846)) * cbPerFrame._m0[3u].x);
    uint _2800 = _965 + 6u;
    float _2808 = _927 / cbSceneParam._m0[86u].x;
    float _2809 = _928 / cbSceneParam._m0[86u].y;
    vec4 _2823 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2808, _2809, (log2((isnan(cbSceneParam._m0[77u].w) ? _850 : (isnan(_850) ? cbSceneParam._m0[77u].w : min(_850, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2825 = _2823.x;
    float _2826 = _2823.y;
    float _2827 = _2823.z;
    float _2828 = _2823.w;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_850 > cbSceneParam._m0[78u].w)
    {
        float _2883 = isnan(_850) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _850 : min(cbSceneParam._m0[80u].w, _850));
        float _2884 = _2883 / _850;
        float _2895 = _2884 * _900;
        float _2896 = _901 * _2884;
        float _2897 = (-0.0) - _2896;
        float _2899 = _2884 * _902;
        float _2901 = (cbSceneParam._m0[77u].w * _2897) / _2883;
        float _2902 = _2901 + cbSceneParam._m0[79u].w;
        float _2903 = cbSceneParam._m0[79u].w - _2896;
        float _2909 = sqrt(((_2895 * _2895) + (_2896 * _2896)) + (_2899 * _2899));
        float _2912 = (1.0 - (cbSceneParam._m0[77u].w / _2883)) * _2909;
        float _2917 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2919 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3096;
        if (abs((_2897 - _2901) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3096 = ((((_2902 > 0.0) ? exp2(_2917 * _2902) : (2.0 - exp2(_2919 * _2902))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2912;
        }
        else
        {
            float _3040 = 1.0 / cbSceneParam._m0[80u].x;
            float _3041 = isnan(_2903) ? _2902 : (isnan(_2902) ? _2903 : max(_2902, _2903));
            float _3042 = isnan(_2903) ? _2902 : (isnan(_2902) ? _2903 : min(_2902, _2903));
            float _3051 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : min(_3041, 0.0));
            float _3052 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : min(_3042, 0.0));
            _3096 = ((abs(_2909 / _2897) * cbSceneParam._m0[80u].y) * ((((_3051 - _3052) * 2.0) - ((exp2(_2917 * (isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0)))) - exp2(_2917 * (isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))))) * _3040)) - ((exp2(_2919 * _3051) - exp2(_2919 * _3052)) * _3040))) + (_2912 * cbSceneParam._m0[80u].z);
        }
        vec4 _3098 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2808, _2809, 1.0), 0.0);
        float _3107 = exp2((_3096 * (-1.44269502162933349609375)) * (1.0 - _3098.w));
        float _3108 = log2(_3107);
        float _3124 = log2(_2828);
        _2921 = (exp2(_3124 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].x)) * _3098.x) / cbSceneParam._m0[78u].x)) + _2825;
        _2923 = (exp2(_3124 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].y)) * _3098.y) / cbSceneParam._m0[78u].y)) + _2826;
        _2925 = (exp2(_3124 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].z)) * _3098.z) / cbSceneParam._m0[78u].z)) + _2827;
        _2927 = _3107 * _2828;
    }
    else
    {
        _2921 = _2825;
        _2923 = _2826;
        _2925 = _2827;
        _2927 = _2828;
    }
    bool _3134;
    vec4 _2937;
    vec4 _2959;
    float _2961;
    float _2965;
    float _2966;
    float _2967;
    float _2968;
    bool _2978;
    for (;;)
    {
        _2937 = cbMatDynParam._m0[0u];
        float _2939 = roundEven(_2937.y);
        bool _2940 = _2939 == 3.0;
        float _2941 = log2(_2927);
        float _2948 = exp2(_2941 * cbSceneParam._m0[78u].x) * _2797;
        float _2949 = exp2(_2941 * cbSceneParam._m0[78u].y) * _2798;
        float _2950 = exp2(_2941 * cbSceneParam._m0[78u].z) * _2799;
        float _2957 = _916 + (-0.5);
        _2959 = cbMtdParam._m0[1u];
        _2961 = _2959.y * _2957;
        float _2964 = (_2939 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2965 = _2964 * (_2940 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2921)));
        _2966 = _2964 * (_2940 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2923)));
        _2967 = _2964 * (_2940 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2925)));
        _2968 = _2957 * 0.999000012874603271484375;
        _2978 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2978)
        {
            if ((cbInstanceData._m0[_965 + 7u].x + _2968) < 0.5)
            {
                _3134 = true;
                break;
            }
        }
        uint _3075 = _966 + uint(_2937.w);
        if ((cbInstanceData._m0[_3075].w < 1.0) && ((cbInstanceData._m0[_3075].w + _2968) < 0.5))
        {
            _3134 = true;
            break;
        }
        if ((_2961 + 1.0) < _2959.x)
        {
            _3134 = true;
            break;
        }
        _3134 = false;
        break;
    }
    float _3339;
    if (_3134)
    {
        discard_state = true;
        _3339 = 0.0;
    }
    else
    {
        _3339 = cbInstanceData._m0[_2800].w;
    }
    SV_Target.x = _2965;
    SV_Target.y = _2966;
    SV_Target.z = _2967;
    SV_Target.w = _3339;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2800].w;
    discard_exit();
}


