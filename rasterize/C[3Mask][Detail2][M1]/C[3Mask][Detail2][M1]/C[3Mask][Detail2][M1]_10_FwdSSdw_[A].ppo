#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1481;
float _3886;
float _3887;
float _3888;
float _3889;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _274 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _274.x * cbMtdParam._m0[10u].x;
    float _281 = _274.y * cbMtdParam._m0[10u].y;
    float _282 = _274.z * cbMtdParam._m0[10u].z;
    vec4 _300 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _350 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _360 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _350)) + 1.0;
    float _3898 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _361 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _368 = (_361 * ((_300.x * cbMtdParam._m0[11u].x) - _280)) + _280;
    float _369 = (_361 * ((_300.y * cbMtdParam._m0[11u].y) - _281)) + _281;
    float _370 = (_361 * ((_300.z * cbMtdParam._m0[11u].z) - _282)) + _282;
    vec4 _388 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _419 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _350)) + 1.0;
    float _3909 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _427 = (_420 * ((_388.x * cbMtdParam._m0[12u].x) - _368)) + _368;
    float _428 = (_420 * ((_388.y * cbMtdParam._m0[12u].y) - _369)) + _369;
    float _429 = (_420 * ((_388.z * cbMtdParam._m0[12u].z) - _370)) + _370;
    vec4 _447 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _472 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _350)) + 1.0;
    float _3920 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    vec4 _501 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _509 = ((((_473 * ((_447.x * cbMtdParam._m0[13u].x) - _427)) + _427) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _501.x;
    float _512 = ((((_473 * ((_447.y * cbMtdParam._m0[13u].y) - _428)) + _428) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _501.y;
    float _515 = ((((_473 * ((_447.z * cbMtdParam._m0[13u].z) - _429)) + _429) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _501.z;
    vec4 _535 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _564 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3931 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _572 = (_565 * ((_535.x * cbMtdParam._m0[14u].x) - _509)) + _509;
    float _573 = (_565 * ((_535.y * cbMtdParam._m0[14u].y) - _512)) + _512;
    float _574 = (_565 * ((_535.z * cbMtdParam._m0[14u].z) - _515)) + _515;
    vec4 _594 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _622 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _3942 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _623 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _630 = (_623 * ((_594.x * cbMtdParam._m0[15u].x) - _572)) + _572;
    float _631 = (_623 * ((_594.y * cbMtdParam._m0[15u].y) - _573)) + _573;
    float _632 = (_623 * ((_594.z * cbMtdParam._m0[15u].z) - _574)) + _574;
    vec4 _645 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _647 = _645.x;
    float _665 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _647) * _361) + _647;
    float _682 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _665) * _420) + _665;
    float _699 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _682) * _473) + _682;
    float _701 = _699 - (_699 * TEXCOORD_5.x);
    vec4 _717 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _739 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _741 = _739.x;
    float _742 = _739.y;
    float _745 = cbMtdParam._m0[18u].y * _739.z;
    vec4 _757 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _766 = (((cbMtdParam._m0[18u].x * _757.z) - _745) * _361) + _745;
    vec4 _779 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _790 = (((cbMtdParam._m0[17u].w * _779.z) - _766) * _420) + _766;
    vec4 _803 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _812 = (((cbMtdParam._m0[17u].z * _803.z) - _790) * _473) + _790;
    float _817 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_717.z * cbMtdParam._m0[18u].z) - _812)) + _812;
    vec4 _830 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _844 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_830.z * cbMtdParam._m0[19u].y) - _817)) + _817;
    float _849 = ((_757.x - _741) * _361) + _741;
    float _850 = ((_757.y - _742) * _361) + _742;
    float _855 = ((_779.x - _849) * _420) + _849;
    float _856 = ((_779.y - _850) * _420) + _850;
    float _865 = ((((_803.x - _855) * _473) + _855) * 2.0) + (-1.0);
    float _866 = ((((_803.y - _856) * _473) + _856) * 2.0) + (-1.0);
    float _867 = dot(vec2(_865, _866), vec2(_865, _866));
    float _3953 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _872 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    float _885 = (((((_717.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _865) + ((((_830.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _886 = (((((_717.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _866) + ((((_830.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _889 = fma(_872, _244 * NORMAL.x, fma(_886, _251 * TANGENT.x, (_237 * _229) * _885));
    float _892 = fma(_872, _244 * NORMAL.y, fma(_886, _251 * TANGENT.y, (_237 * _230) * _885));
    float _895 = fma(_872, _244 * NORMAL.z, fma(_886, _251 * TANGENT.z, (_237 * _231) * _885));
    float _899 = inversesqrt(dot(vec3(_889, _892, _895), vec3(_889, _892, _895)));
    float _900 = _899 * _889;
    float _901 = _899 * _892;
    float _902 = _899 * _895;
    float _3964 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _903 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3986 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3997 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4008 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _907 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _923 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _973 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _963);
    float _974 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _963);
    float _975 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _963);
    float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
    float _980 = _973 * _979;
    float _981 = _974 * _979;
    float _982 = _975 * _979;
    vec4 _987 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _989 = _987.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1161 = sqrt(((_973 * _973) + (_974 * _974)) + (_975 * _975));
        float _1167 = (cbMatDynParam._m0[5u].x * _1161) + cbMatDynParam._m0[5u].y;
        float _4019 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1172 = (cbMatDynParam._m0[5u].z * _1161) + cbMatDynParam._m0[5u].w;
        float _4030 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) - _1168)) + _1168) < ((_989 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1000 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1001 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1019 = fma(_902, cbSceneParam._m0[5u].z, fma(_901, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _900));
    float _1022 = fma(_902, cbSceneParam._m0[6u].z, fma(_901, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _900));
    float _1025 = fma(_902, cbSceneParam._m0[7u].z, fma(_901, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _900));
    uint _1038 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1039 = _1038 + 9u;
    uint _1040 = _1039 + uint(cbMatDynParam._m0[0u].w);
    float _1046 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * cbInstanceData._m0[_1040].x;
    float _1047 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * cbInstanceData._m0[_1040].y;
    float _1048 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_1040].z;
    float _4041 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _1052 = 1.0 - _907;
    float _1053 = _1049 * _1052;
    float _1054 = _1050 * _1052;
    float _1055 = _1051 * _1052;
    float _1060 = (_1049 + (-0.039999999105930328369140625)) * _907;
    float _1061 = (_1050 + (-0.039999999105930328369140625)) * _907;
    float _1062 = (_1051 + (-0.039999999105930328369140625)) * _907;
    float _1063 = _1060 + 0.039999999105930328369140625;
    float _1065 = _1061 + 0.039999999105930328369140625;
    float _1066 = _1062 + 0.039999999105930328369140625;
    vec4 _1075 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1000, cbSceneParam._m0[86u].y * _1001));
    float _1078 = _1075.x * TEXCOORD_5.w;
    float _1079 = dot(vec3(_900, _901, _902), vec3(_980, _981, _982));
    float _1082 = _1079 * 2.0;
    float _1086 = (_1082 * _900) - _980;
    float _1087 = (_1082 * _901) - _981;
    float _1088 = (_1082 * _902) - _982;
    float _1092 = abs(dot(vec3(_980, _981, _982), vec3(_900, _901, _902)));
    float _4074 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1094 = sqrt(_903);
    float _1107 = exp2((_1094 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1094 * 3.0));
    float _1113 = (1.0 - _1107) * ((_1094 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1114 = _1107 * _1094;
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1480;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1205 = fma(_1150, cbModelParam._m0[26u].z, fma(_1146, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1142));
        float _1209 = fma(_1150, cbModelParam._m0[27u].z, fma(_1146, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1142));
        float _1213 = fma(_1150, cbModelParam._m0[28u].z, fma(_1146, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1142));
        float _1238 = _1142 + _900;
        float _1239 = _1146 + _901;
        float _1240 = _1150 + _902;
        float _1250 = fma(_1240, cbModelParam._m0[26u].z, fma(_1239, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1238)) - _1205;
        float _1251 = fma(_1240, cbModelParam._m0[27u].z, fma(_1239, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1238)) - _1209;
        float _1252 = fma(_1240, cbModelParam._m0[28u].z, fma(_1239, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1238)) - _1213;
        float _1256 = inversesqrt(dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252)));
        float _1269 = ((_1256 * _1250) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1205 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1256 * _1251) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1209 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1256 * _1252) / cbModelParam._m0[34u].z) + ((((((_1213 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        float _1308 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1274.x + (-0.5));
        float _1310 = _1308 * (_1274.y + (-0.5));
        float _1311 = _1308 * (_1274.z + (-0.5));
        float _1318 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1281.x + (-0.5));
        float _1320 = _1318 * (_1281.y + (-0.5));
        float _1321 = _1318 * (_1281.z + (-0.5));
        float _1328 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1288.x + (-0.5));
        float _1330 = _1328 * (_1288.y + (-0.5));
        float _1331 = _1328 * (_1288.z + (-0.5));
        float _1338 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1295.x + (-0.5));
        float _1340 = _1338 * (_1295.y + (-0.5));
        float _1341 = _1338 * (_1295.z + (-0.5));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = _1309 * 0.5;
        float _1346 = _1319 * 0.5;
        float _1347 = _1329 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1362 = (dot(vec3(_900, _901, _902), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1372 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4122 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1374 + 1.0))) + _1379) * _1342;
        float _1389 = _1310 * 0.5;
        float _1390 = _1320 * 0.5;
        float _1391 = _1330 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_900, _901, _902), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4155 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1416 + 1.0))) + _1421) * _1343;
        float _1431 = _1311 * 0.5;
        float _1432 = _1321 * 0.5;
        float _1433 = _1331 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_900, _901, _902), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4188 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1458 + 1.0))) + _1463) * _1344;
        _1480 = _1311;
        _1482 = _1310;
        _1483 = _1309;
        _1484 = _1321;
        _1485 = _1320;
        _1486 = _1319;
        _1487 = _1331;
        _1488 = _1330;
        _1489 = _1329;
        _1490 = _1344;
        _1491 = _1343;
        _1492 = _1342;
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1494 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
    }
    else
    {
        _1480 = _1481;
        _1482 = _1481;
        _1483 = _1481;
        _1484 = _1481;
        _1485 = _1481;
        _1486 = _1481;
        _1487 = _1481;
        _1488 = _1481;
        _1489 = _1481;
        _1490 = _1481;
        _1491 = _1481;
        _1492 = _1481;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1524 = fma(_1150, cbModelParam._m0[30u].z, fma(_1146, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1142));
        float _1528 = fma(_1150, cbModelParam._m0[31u].z, fma(_1146, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1142));
        float _1532 = fma(_1150, cbModelParam._m0[32u].z, fma(_1146, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1142));
        float _1555 = _1142 + _900;
        float _1556 = _1146 + _901;
        float _1557 = _1150 + _902;
        float _1567 = fma(_1557, cbModelParam._m0[30u].z, fma(_1556, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1555)) - _1524;
        float _1568 = fma(_1557, cbModelParam._m0[31u].z, fma(_1556, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1555)) - _1528;
        float _1569 = fma(_1557, cbModelParam._m0[32u].z, fma(_1556, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1555)) - _1532;
        float _1573 = inversesqrt(dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569)));
        float _1586 = ((_1573 * _1567) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1524 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1587 = ((_1573 * _1568) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1528 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1573 * _1569) / cbModelParam._m0[35u].z) + ((((((_1532 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        float _1623 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1590.x + (-0.5));
        float _1625 = _1623 * (_1590.y + (-0.5));
        float _1626 = _1623 * (_1590.z + (-0.5));
        float _1633 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1597.x + (-0.5));
        float _1635 = _1633 * (_1597.y + (-0.5));
        float _1636 = _1633 * (_1597.z + (-0.5));
        float _1643 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1604.x + (-0.5));
        float _1645 = _1643 * (_1604.y + (-0.5));
        float _1646 = _1643 * (_1604.z + (-0.5));
        float _1653 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1611.x + (-0.5));
        float _1655 = _1653 * (_1611.y + (-0.5));
        float _1656 = _1653 * (_1611.z + (-0.5));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = _1624 * 0.5;
        float _1661 = _1634 * 0.5;
        float _1662 = _1644 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_900, _901, _902), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4251 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1687 + 1.0))) + _1692) * _1657;
        float _1702 = _1625 * 0.5;
        float _1703 = _1635 * 0.5;
        float _1704 = _1645 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_900, _901, _902), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4284 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1729 + 1.0))) + _1734) * _1658;
        float _1744 = _1626 * 0.5;
        float _1745 = _1636 * 0.5;
        float _1746 = _1646 * 0.5;
        float _1747 = dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746));
        float _1752 = (_1747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1747);
        float _1760 = (dot(vec3(_900, _901, _902), vec3(_1752 * _1744, _1752 * _1745, _1752 * _1746)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1769 = sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1771 = _1770 * 2.0;
        float _1775 = (1.0 - _1770) / (_1770 + 1.0);
        float _4317 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1785 = ((((1.0 - _1776) * (_1771 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1771 + 1.0))) + _1776) * _1659;
        _1793 = _1626;
        _1794 = _1625;
        _1795 = _1624;
        _1796 = _1636;
        _1797 = _1635;
        _1798 = _1634;
        _1799 = _1646;
        _1800 = _1645;
        _1801 = _1644;
        _1802 = _1659;
        _1803 = _1658;
        _1804 = _1657;
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)));
    }
    else
    {
        _1793 = _1481;
        _1794 = _1481;
        _1795 = _1481;
        _1796 = _1481;
        _1797 = _1481;
        _1798 = _1481;
        _1799 = _1481;
        _1800 = _1481;
        _1801 = _1481;
        _1802 = _1481;
        _1803 = _1481;
        _1804 = _1481;
        _1805 = 0.0;
        _1806 = 0.0;
        _1807 = 0.0;
    }
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1493)) + _1493;
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1494)) + _1494;
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1495)) + _1495;
    float _1840 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1843 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1846 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1817));
    float _1861 = _1086 * 0.5;
    float _1862 = _1087 * 0.5;
    float _1863 = _1088 * 0.5;
    float _1864 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1867 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1870 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1904;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1877 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1480, _1484, _1487, _1490));
        float _1881 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1482, _1485, _1488, _1491));
        float _1885 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1483, _1486, _1489, _1492));
        float _1892 = dot(vec4(cbModelParam._m0[39u]), vec4(_1861, _1862, _1863, 1.0));
        _1904 = dot(vec3(isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1892) ? 0.0 : (isnan(0.0) ? _1892 : max(0.0, _1892))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1904 = 1.0;
    }
    float _1915;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1906 = dot(vec4(cbModelParam._m0[40u]), vec4(_1861, _1862, _1863, 1.0));
        _1915 = dot(vec3(isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1906) ? 0.0 : (isnan(0.0) ? _1906 : max(0.0, _1906))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1915 = 1.0;
    }
    float _1919 = (_1915 * cbModelParam._m0[1u].x) + (_1904 * (1.0 - cbModelParam._m0[1u].x));
    float _1929 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _903);
    float _1930 = isnan(_1929) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1929 : min(cbModelParam._m0[25u].z, _1929));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1977 = fma(_1150, cbModelParam._m0[13u].z, fma(_1146, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1142)) + cbModelParam._m0[13u].w;
        float _1981 = fma(_1150, cbModelParam._m0[14u].z, fma(_1146, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1142)) + cbModelParam._m0[14u].w;
        float _1985 = fma(_1150, cbModelParam._m0[15u].z, fma(_1146, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1142)) + cbModelParam._m0[15u].w;
        float _1988 = fma(_1088, cbModelParam._m0[13u].z, fma(_1087, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1086));
        float _1991 = fma(_1088, cbModelParam._m0[14u].z, fma(_1087, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1086));
        float _1994 = fma(_1088, cbModelParam._m0[15u].z, fma(_1087, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1086));
        float _2022;
        if (_1988 > 0.0)
        {
            _2022 = abs((1.0 - _1977) / _1988);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1977 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2022 = frontier_phi_17_15_ladder;
        }
        float _2245;
        if (_1991 > 0.0)
        {
            _2245 = abs((1.0 - _1981) / _1991);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1981 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2245 = frontier_phi_26_22_ladder;
        }
        float _2502;
        if (_1994 > 0.0)
        {
            _2502 = abs((1.0 - _1985) / _1994);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1985 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2502 = frontier_phi_38_33_ladder;
        }
        float _2504 = isnan(_2245) ? _2022 : (isnan(_2022) ? _2245 : min(_2022, _2245));
        float _2505 = isnan(_2502) ? _2504 : (isnan(_2504) ? _2502 : min(_2504, _2502));
        float _2509 = (_2505 * _1988) + _1977;
        float _2510 = (_2505 * _1991) + _1981;
        float _2511 = (_2505 * _1994) + _1985;
        float _2512 = _2505 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2512;
        float _2516 = _2512 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 > _2516) || ((_2510 < _2514) || ((_2509 < _2514) || (_2509 > _2516))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2639 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2511, cbModelParam._m0[9u].z, fma(_2510, cbModelParam._m0[9u].y, _2509 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2511, cbModelParam._m0[10u].z, fma(_2510, cbModelParam._m0[10u].y, _2509 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2511, cbModelParam._m0[11u].z, fma(_2510, cbModelParam._m0[11u].y, _2509 * cbModelParam._m0[11u].x))), _1930);
            frontier_phi_16_38_ladder = _2639.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2639.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2639.x * cbModelParam._m0[1u].y;
        }
        _2010 = frontier_phi_16_38_ladder_2;
        _2012 = frontier_phi_16_38_ladder_1;
        _2014 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1998 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1086, _1087, _1088), _1930);
        _2010 = _1998.x * cbModelParam._m0[1u].y;
        _2012 = _1998.y * cbModelParam._m0[1u].y;
        _2014 = _1998.z * cbModelParam._m0[1u].y;
    }
    float _2018 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _903);
    float _2019 = isnan(_2018) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2018 : min(cbModelParam._m0[25u].w, _2018));
    float _2108;
    float _2110;
    float _2112;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2072 = fma(_1150, cbModelParam._m0[21u].z, fma(_1146, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1142)) + cbModelParam._m0[21u].w;
        float _2076 = fma(_1150, cbModelParam._m0[22u].z, fma(_1146, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1142)) + cbModelParam._m0[22u].w;
        float _2080 = fma(_1150, cbModelParam._m0[23u].z, fma(_1146, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1142)) + cbModelParam._m0[23u].w;
        float _2083 = fma(_1088, cbModelParam._m0[21u].z, fma(_1087, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1086));
        float _2086 = fma(_1088, cbModelParam._m0[22u].z, fma(_1087, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1086));
        float _2089 = fma(_1088, cbModelParam._m0[23u].z, fma(_1087, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1086));
        float _2250;
        if (_2083 > 0.0)
        {
            _2250 = abs((1.0 - _2072) / _2083);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2072 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2250 = frontier_phi_28_24_ladder;
        }
        float _2529;
        if (_2086 > 0.0)
        {
            _2529 = abs((1.0 - _2076) / _2086);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2076 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2529 = frontier_phi_40_35_ladder;
        }
        float _2742;
        if (_2089 > 0.0)
        {
            _2742 = abs((1.0 - _2080) / _2089);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2080 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2742 = frontier_phi_49_46_ladder;
        }
        float _2744 = isnan(_2529) ? _2250 : (isnan(_2250) ? _2529 : min(_2250, _2529));
        float _2745 = isnan(_2742) ? _2744 : (isnan(_2744) ? _2742 : min(_2744, _2742));
        float _2749 = (_2745 * _2083) + _2072;
        float _2750 = (_2745 * _2086) + _2076;
        float _2751 = (_2745 * _2089) + _2080;
        float _2752 = _2745 * 9.9999997473787516355514526367188e-05;
        float _2753 = (-1.0) - _2752;
        float _2755 = _2752 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2751 > _2755) || ((_2751 < _2753) || ((_2750 > _2755) || ((_2750 < _2753) || ((_2749 < _2753) || (_2749 > _2755))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2751, cbModelParam._m0[17u].z, fma(_2750, cbModelParam._m0[17u].y, _2749 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2751, cbModelParam._m0[18u].z, fma(_2750, cbModelParam._m0[18u].y, _2749 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2751, cbModelParam._m0[19u].z, fma(_2750, cbModelParam._m0[19u].y, _2749 * cbModelParam._m0[19u].x))), _2019);
            frontier_phi_25_49_ladder = _2950.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2950.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2950.x * cbModelParam._m0[1u].z;
        }
        _2108 = frontier_phi_25_49_ladder_2;
        _2110 = frontier_phi_25_49_ladder_1;
        _2112 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2092 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1086, _1087, _1088), _2019);
        _2108 = _2092.x * cbModelParam._m0[1u].z;
        _2110 = _2092.y * cbModelParam._m0[1u].z;
        _2112 = _2092.z * cbModelParam._m0[1u].z;
    }
    float _2125 = (((_1113 * _1063) + _1114) * _1078) * ((cbModelParam._m0[1u].w * (_2108 - _2010)) + _2010);
    float _2127 = (((_1113 * _1065) + _1114) * _1078) * ((cbModelParam._m0[1u].w * (_2110 - _2012)) + _2012);
    float _2129 = (((_1113 * _1066) + _1114) * _1078) * ((cbModelParam._m0[1u].w * (_2112 - _2014)) + _2014);
    float _2132 = fma(_2129, cbSceneParam._m0[89u].z, fma(_2127, cbSceneParam._m0[89u].y, _2125 * cbSceneParam._m0[89u].x));
    float _2135 = fma(_2129, cbSceneParam._m0[90u].z, fma(_2127, cbSceneParam._m0[90u].y, _2125 * cbSceneParam._m0[90u].x));
    float _2138 = fma(_2129, cbSceneParam._m0[91u].z, fma(_2127, cbSceneParam._m0[91u].y, _2125 * cbSceneParam._m0[91u].x));
    vec4 _2146 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1000, _1001));
    float _2148 = _2146.w;
    float _2160 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2148);
    float _2161 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2148);
    float _2162 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2148);
    uvec4 _2166 = floatBitsToUint(cbInstanceData._m0[_1038 + 5u]);
    uint _2168 = _2166.x * 14u;
    uint _2169 = _2168 + 13u;
    float _2176 = _1078 + (-1.0);
    float _2181 = (cbLight._m0[_2169].x * _2176) + 1.0;
    float _2182 = (cbLight._m0[_2169].y * _2176) + 1.0;
    float _2183 = (cbLight._m0[_2169].z * _2176) + 1.0;
    float _2184 = (cbLight._m0[_2169].w * _2176) + 1.0;
    uint _2185 = _2168 + 5u;
    float _2191 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
    uint _2195 = _2168 + 4u;
    float _2204 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
    uint _2208 = _2168 | 1u;
    float _2219 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_900, _901, _902));
    float _2222 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_900, _901, _902));
    float _4453 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _4464 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2227 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * 0.3183098733425140380859375;
    float _2229 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2236 = ((cbLight._m0[_2185].x * _2191) * _2229) + (((cbLight._m0[_2195].x * _2160) * _2204) * _2227);
    float _2237 = ((_2191 * cbLight._m0[_2185].y) * _2229) + (((cbLight._m0[_2195].y * _2161) * _2204) * _2227);
    float _2238 = ((_2191 * cbLight._m0[_2185].z) * _2229) + (((cbLight._m0[_2195].z * _2162) * _2204) * _2227);
    uvec4 _2242 = floatBitsToUint(cbLight._m0[_2168 + 12u]);
    bool _2244 = _2242.x == 0u;
    float _2255;
    float _2257;
    float _2259;
    if (_2244)
    {
        _2255 = _2236;
        _2257 = _2237;
        _2259 = _2238;
    }
    else
    {
        uint _2263 = _2168 + 6u;
        float _2279 = (dot(vec3(cbLight._m0[_2168 + 2u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2280 = _2279 * _2279;
        float _4475 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2281 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2282 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2255 = (((cbLight._m0[_2263].x * 0.3183098733425140380859375) * _2281) * _2282) + _2236;
        _2257 = (((cbLight._m0[_2263].y * 0.3183098733425140380859375) * _2281) * _2282) + _2237;
        _2259 = (((cbLight._m0[_2263].z * 0.3183098733425140380859375) * _2281) * _2282) + _2238;
    }
    bool _2262 = _2242.y == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2262)
    {
        _2300 = _2255;
        _2302 = _2257;
        _2304 = _2259;
    }
    else
    {
        uint _2473 = _2168 + 7u;
        float _2489 = (dot(vec3(cbLight._m0[_2168 + 3u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2490 = _2489 * _2489;
        float _4491 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2491 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2492 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2300 = (((cbLight._m0[_2473].x * 0.3183098733425140380859375) * _2491) * _2492) + _2255;
        _2302 = (((cbLight._m0[_2473].y * 0.3183098733425140380859375) * _2491) * _2492) + _2257;
        _2304 = (((cbLight._m0[_2473].z * 0.3183098733425140380859375) * _2491) * _2492) + _2259;
    }
    uint _2307 = _2168 + 8u;
    float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _903) * 0.949999988079071044921875);
    float _2321 = _2320 * _2320;
    float _2322 = cbLight._m0[_2168].x + _980;
    float _2323 = cbLight._m0[_2168].y + _981;
    float _2324 = cbLight._m0[_2168].z + _982;
    float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
    float _2329 = _2328 * _2322;
    float _2330 = _2328 * _2323;
    float _2331 = _2328 * _2324;
    float _2332 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2168].xyz));
    float _4507 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _4518 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _2336 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2337 = dot(vec3(_900, _901, _902), vec3(_2329, _2330, _2331));
    float _4529 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2341 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2329, _2330, _2331));
    float _4540 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2345 = _2321 * _2321;
    float _2349 = ((_2340 * _2340) * (_2345 + (-1.0))) + 1.0;
    float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0);
    float _2358 = 0.959999978542327880859375 - _1060;
    float _2360 = 0.959999978542327880859375 - _1061;
    float _2361 = 0.959999978542327880859375 - _1062;
    float _2368 = 1.0 - _2321;
    float _2379 = (0.5 / (((_2336 * ((_2335 * _2368) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2368) + _2321) * _2335))) * _2335;
    float _4551 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2381 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2345 / ((_2349 * _2349) * 3.141590118408203125));
    uint _2395 = _2168 + 9u;
    float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _903) * 0.949999988079071044921875);
    float _2407 = _2406 * _2406;
    float _2408 = cbLight._m0[_2208].x + _980;
    float _2409 = cbLight._m0[_2208].y + _981;
    float _2410 = cbLight._m0[_2208].z + _982;
    float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
    float _2415 = _2414 * _2408;
    float _2416 = _2414 * _2409;
    float _2417 = _2414 * _2410;
    float _2418 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2208].xyz));
    float _4562 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2422 = dot(vec3(_900, _901, _902), vec3(_2415, _2416, _2417));
    float _4573 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2426 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2415, _2416, _2417));
    float _4584 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2430 = _2407 * _2407;
    float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
    float _2441 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
    float _2448 = 1.0 - _2407;
    float _2458 = (0.5 / (((_2336 * ((_2421 * _2448) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2448) + _2407) * _2421))) * _2421;
    float _4595 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2460 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
    float _2470 = (((((_2441 * _2358) + _1063) * cbLight._m0[_2395].x) * _2460) * _2191) + ((((cbLight._m0[_2307].x * _2160) * ((_2357 * _2358) + _1063)) * _2381) * _2204);
    float _2471 = (((((_2441 * _2360) + _1065) * cbLight._m0[_2395].y) * _2460) * _2191) + ((((cbLight._m0[_2307].y * _2161) * ((_2357 * _2360) + _1065)) * _2381) * _2204);
    float _2472 = (((((_2441 * _2361) + _1066) * cbLight._m0[_2395].z) * _2460) * _2191) + ((((cbLight._m0[_2307].z * _2162) * ((_2357 * _2361) + _1066)) * _2381) * _2204);
    float _2534;
    float _2536;
    float _2538;
    if (_2244)
    {
        _2534 = _2470;
        _2536 = _2471;
        _2538 = _2472;
    }
    else
    {
        uint _2540 = _2168 + 2u;
        uint _2544 = _2168 + 10u;
        float _2558 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2540].w)) * _903) * 0.949999988079071044921875);
        float _2559 = _2558 * _2558;
        float _2560 = cbLight._m0[_2540].x + _980;
        float _2561 = cbLight._m0[_2540].y + _981;
        float _2562 = cbLight._m0[_2540].z + _982;
        float _2566 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
        float _2567 = _2566 * _2560;
        float _2568 = _2566 * _2561;
        float _2569 = _2566 * _2562;
        float _2570 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2540].xyz));
        float _4606 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2574 = dot(vec3(_900, _901, _902), vec3(_2567, _2568, _2569));
        float _4617 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2577 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2578 = dot(vec3(cbLight._m0[_2540].xyz), vec3(_2567, _2568, _2569));
        float _4628 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2582 = _2559 * _2559;
        float _2586 = ((_2577 * _2577) * (_2582 + (-1.0))) + 1.0;
        float _2593 = exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0);
        float _2600 = 1.0 - _2559;
        float _2610 = (0.5 / (((_2336 * ((_2573 * _2600) + _2559)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2600) + _2559) * _2573))) * _2573;
        float _4639 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2612 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2582 / ((_2586 * _2586) * 3.141590118408203125));
        float _2613 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2534 = (((((_2593 * _2358) + _1063) * cbLight._m0[_2544].x) * _2612) * _2613) + _2470;
        _2536 = (((((_2593 * _2360) + _1065) * cbLight._m0[_2544].y) * _2612) * _2613) + _2471;
        _2538 = (((((_2593 * _2361) + _1066) * cbLight._m0[_2544].z) * _2612) * _2613) + _2472;
    }
    float _2648;
    float _2650;
    float _2652;
    if (_2262)
    {
        _2648 = _2534;
        _2650 = _2536;
        _2652 = _2538;
    }
    else
    {
        uint _2659 = _2168 + 3u;
        uint _2663 = _2168 + 11u;
        float _2677 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2659].w)) * _903) * 0.949999988079071044921875);
        float _2678 = _2677 * _2677;
        float _2679 = cbLight._m0[_2659].x + _980;
        float _2680 = cbLight._m0[_2659].y + _981;
        float _2681 = cbLight._m0[_2659].z + _982;
        float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
        float _2686 = _2685 * _2679;
        float _2687 = _2685 * _2680;
        float _2688 = _2685 * _2681;
        float _2689 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2659].xyz));
        float _4655 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2693 = dot(vec3(_900, _901, _902), vec3(_2686, _2687, _2688));
        float _4666 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2697 = dot(vec3(cbLight._m0[_2659].xyz), vec3(_2686, _2687, _2688));
        float _4677 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2701 = _2678 * _2678;
        float _2705 = ((_2696 * _2696) * (_2701 + (-1.0))) + 1.0;
        float _2712 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
        float _2719 = 1.0 - _2678;
        float _2729 = (0.5 / (((_2336 * ((_2692 * _2719) + _2678)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2719) + _2678) * _2692))) * _2692;
        float _4688 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2731 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2701 / ((_2705 * _2705) * 3.141590118408203125));
        float _2732 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2648 = (((((_2712 * _2358) + _1063) * cbLight._m0[_2663].x) * _2731) * _2732) + _2534;
        _2650 = (((((_2712 * _2360) + _1065) * cbLight._m0[_2663].y) * _2731) * _2732) + _2536;
        _2652 = (((((_2712 * _2361) + _1066) * cbLight._m0[_2663].z) * _2731) * _2732) + _2538;
    }
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    if (_2166.y == 0u)
    {
        float _2807 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2808 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2807;
        float _2809 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2807;
        float _2810 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2807;
        uvec4 _2822 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2823 = _2822.x;
        uint _2834 = uint((float(_2822.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1001) / _2823))) + floor(float(uint(cbSceneParam._m0[85u].x * _1000) / _2823)));
        float _2844 = (log2(_2810 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2845 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        uint _2848 = uint(isnan(14.0) ? _2845 : (isnan(_2845) ? 14.0 : min(_2845, 14.0)));
        uvec4 _2853 = texelFetch(g_lightClusterGridBuffer, int(((_2848 << 2u) + (_2834 << 6u)) >> 2u));
        uint _2854 = _2853.x;
        uint _2855 = _2822.z;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((((1u << ((_2855 >> 4u) & 15u)) + 4294967295u) & _2854) == 0u) || ((_2855 & 240u) == 0u))
        {
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
        }
        else
        {
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _2964;
            float _2966;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            uint _3114 = 0u;
            uint _3123;
            bool _3124;
            for (;;)
            {
                _3123 = texelFetch(g_lightClassification, int((((_2848 << 5u) + (_2834 << 9u)) + (_3114 << 2u)) >> 2u)).x;
                _3124 = _3123 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3124)
                {
                    frontier_phi_66_pred = _3108;
                    frontier_phi_66_pred_1 = _3113;
                    frontier_phi_66_pred_2 = _3112;
                    frontier_phi_66_pred_3 = _3111;
                    frontier_phi_66_pred_4 = _3110;
                    frontier_phi_66_pred_5 = _3109;
                }
                else
                {
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    uint _3259;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3123;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    for (;;)
                    {
                        uint _3263 = uint(findLSB(_3259)) + (_3114 << 5u);
                        uint _3260 = (_3259 + 4294967295u) & _3259;
                        uint _3265 = _3263 * 48u;
                        vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 3u)).x));
                        uint _3285 = (_3263 * 48u) + 4u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3285)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 3u)).x));
                        uint _3304 = (_3263 * 48u) + 8u;
                        vec3 _3315 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x));
                        float _3319 = _3279.x - _2808;
                        float _3320 = _3279.y - _2809;
                        float _3321 = _3279.z - _2810;
                        float _3322 = dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321));
                        float _3325 = inversesqrt(_3322);
                        float _3326 = _3325 * _3319;
                        float _3327 = _3325 * _3320;
                        float _3328 = _3325 * _3321;
                        float _3329 = dot(vec3(_1019, _1022, _1025), vec3(_3326, _3327, _3328));
                        float _3334 = 1.0 - (_3322 * _3279.w);
                        float _4714 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3335 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3336 = sqrt(_3322) * _3298.w;
                        float _3339 = 1.39999997615814208984375 / (_3336 + 1.39999997615814208984375);
                        float _3340 = _3339 * _3339;
                        float _3343 = ((1.0 - _3340) * _3329) + _3340;
                        float _3346 = _3336 * _3336;
                        float _3350 = ((isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))) * _3335) / ((_3346 * 0.699999988079071044921875) + 1.0);
                        float _3354 = (-0.0) - _2808;
                        float _3355 = (-0.0) - _2809;
                        float _3356 = (-0.0) - _2810;
                        float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                        float _3361 = _3360 * _3354;
                        float _3362 = _3360 * _3355;
                        float _3363 = _3360 * _3356;
                        float _3371 = exp2(log2(1.0 / ((_3346 * 3.5) + 5.0)) * 0.25);
                        float _3372 = 1.0 - _1094;
                        float _3379 = sqrt(1.0 - ((1.0 - (_3372 * _3372)) * (1.0 - (_3371 * _3371))));
                        float _3380 = _3379 * _3379;
                        float _3381 = _3380 * _3380;
                        float _3382 = _3361 + _3326;
                        float _3383 = _3362 + _3327;
                        float _3384 = _3363 + _3328;
                        float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                        float _3392 = dot(vec3(_1019, _1022, _1025), vec3(_3361, _3362, _3363));
                        float _4730 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3395 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3396 = dot(vec3(_1019, _1022, _1025), vec3(_3388 * _3382, _3388 * _3383, _3388 * _3384));
                        float _4741 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3399 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3403 = ((_3399 * _3399) * (_3381 + (-1.0))) + 1.0;
                        float _3404 = _3339 * _3380;
                        float _3405 = _3404 * _3404;
                        float _3408 = ((1.0 - _3405) * _3329) + _3405;
                        float _4752 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3409 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3410 = 1.0 - _3380;
                        float _3420 = (0.5 / (((_3409 * ((_3395 * _3410) + _3380)) + 9.9999999392252902907785028219223e-09) + (((_3409 * _3410) + _3380) * _3395))) * _3409;
                        float _4763 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3431 = (((_3381 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3403 * _3403) * ((_3346 * 2.1991131305694580078125) + 3.141590118408203125))) * _3335;
                        _3183 = (_3350 * _3298.x) + _3256;
                        _3184 = (_3350 * _3298.y) + _3257;
                        _3185 = (_3350 * _3298.z) + _3258;
                        _3180 = (_3431 * _3315.x) + _3253;
                        _3181 = (_3431 * _3315.y) + _3254;
                        _3182 = (_3431 * _3315.z) + _3255;
                        if (_3260 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3260;
                        }
                    }
                    frontier_phi_66_pred = _3180;
                    frontier_phi_66_pred_1 = _3185;
                    frontier_phi_66_pred_2 = _3184;
                    frontier_phi_66_pred_3 = _3183;
                    frontier_phi_66_pred_4 = _3182;
                    frontier_phi_66_pred_5 = _3181;
                }
                _2956 = frontier_phi_66_pred;
                _2966 = frontier_phi_66_pred_1;
                _2964 = frontier_phi_66_pred_2;
                _2962 = frontier_phi_66_pred_3;
                _2960 = frontier_phi_66_pred_4;
                _2958 = frontier_phi_66_pred_5;
                uint _3115 = _3114 + 1u;
                if (_3115 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3108 = _2956;
                    _3109 = _2958;
                    _3110 = _2960;
                    _3111 = _2962;
                    _3112 = _2964;
                    _3113 = _2966;
                    _3114 = _3115;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
        }
        uvec4 _2969 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2970 = _2969.z;
        uint _2972 = (_2970 >> 8u) & 15u;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        if (((4294967295u << _2972) & _2854) == 0u)
        {
            _3076 = _2955;
            _3078 = _2957;
            _3080 = _2959;
            _3082 = _2961;
            _3084 = _2963;
            _3086 = _2965;
        }
        else
        {
            float _3101 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
            float _3102 = _3101 * _2808;
            float _3103 = _3101 * _2809;
            float _3104 = _3101 * _2810;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2972 < ((_2970 >> 12u) & 15u))
            {
                float _3077;
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3236 = _2955;
                float _3237 = _2957;
                float _3238 = _2959;
                float _3239 = _2961;
                float _3240 = _2963;
                float _3241 = _2965;
                uint _3242 = _2972;
                uint _3251;
                bool _3252;
                for (;;)
                {
                    _3251 = texelFetch(g_lightClassification, int((((_2848 << 5u) + (_2834 << 9u)) + (_3242 << 2u)) >> 2u)).x;
                    _3252 = _3251 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3252)
                    {
                        frontier_phi_77_pred = _3241;
                        frontier_phi_77_pred_1 = _3240;
                        frontier_phi_77_pred_2 = _3239;
                        frontier_phi_77_pred_3 = _3238;
                        frontier_phi_77_pred_4 = _3237;
                        frontier_phi_77_pred_5 = _3236;
                    }
                    else
                    {
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3458 = _3236;
                        float _3459 = _3237;
                        float _3460 = _3238;
                        float _3461 = _3239;
                        float _3462 = _3240;
                        float _3463 = _3241;
                        uint _3464 = _3251;
                        uint _3465;
                        vec4 _3490;
                        float _3491;
                        vec4 _3506;
                        vec3 _3518;
                        vec4 _3533;
                        vec4 _3548;
                        float _3595;
                        bool _3596;
                        for (;;)
                        {
                            uint _3475 = ((_3242 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3464));
                            _3465 = (_3464 + 4294967295u) & _3464;
                            uint _3477 = _3475 * 40u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3491 = _3490.w;
                            uint _3493 = (_3475 * 40u) + 4u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3508 = (_3475 * 40u) + 8u;
                            _3518 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x));
                            uint _3520 = (_3475 * 40u) + 16u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3475 * 40u) + 20u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3551 = (_3475 * 40u) + 24u;
                            vec4 _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3570 = (_3475 * 40u) + 28u;
                            vec4 _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            _3595 = fma(_2810, _3583.z, fma(_2809, _3583.y, _3583.x * _2808)) + _3583.w;
                            _3596 = !((fma(_2810, _3564.z, fma(_2809, _3564.y, _3564.x * _2808)) + _3564.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3596)
                            {
                                float _3623 = _3490.x - _2808;
                                float _3624 = _3490.y - _2809;
                                float _3625 = _3490.z - _2810;
                                float _3626 = dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625));
                                float _3629 = inversesqrt(_3626);
                                float _3630 = _3629 * _3623;
                                float _3631 = _3629 * _3624;
                                float _3632 = _3629 * _3625;
                                float _3636 = 1.0 - (_3626 / (_3491 * _3491));
                                float _4774 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3637 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3641 = sqrt(_3626) * _3506.w;
                                float _3643 = 1.39999997615814208984375 / (_3641 + 1.39999997615814208984375);
                                float _3644 = _3643 * _3643;
                                float _3647 = ((1.0 - _3644) * dot(vec3(_3630, _3631, _3632), vec3(_1019, _1022, _1025))) + _3644;
                                float _3650 = _3641 * _3641;
                                float _3654 = (fma(_2810, _3533.z, fma(_2809, _3533.y, _3533.x * _2808)) + _3533.w) / _3595;
                                float _3655 = (fma(_2810, _3548.z, fma(_2809, _3548.y, _3548.x * _2808)) + _3548.w) / _3595;
                                float _3659 = 1.0 - dot(vec2(_3654, _3655), vec2(_3654, _3655));
                                float _4790 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3661 = _3660 * (((isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0))) * _3637) / ((_3650 * 0.699999988079071044921875) + 1.0));
                                float _3673 = exp2(log2(1.0 / ((_3650 * 3.5) + 5.0)) * 0.25);
                                float _3674 = 1.0 - _1094;
                                float _3681 = sqrt(1.0 - ((1.0 - (_3674 * _3674)) * (1.0 - (_3673 * _3673))));
                                float _3682 = _3681 * _3681;
                                float _3683 = _3682 * _3682;
                                float _3684 = _3630 - _3102;
                                float _3685 = _3631 - _3103;
                                float _3686 = _3632 - _3104;
                                float _3690 = inversesqrt(dot(vec3(_3684, _3685, _3686), vec3(_3684, _3685, _3686)));
                                float _3694 = dot(vec3(_1019, _1022, _1025), vec3((-0.0) - _3102, (-0.0) - _3103, (-0.0) - _3104));
                                float _4801 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3697 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3698 = dot(vec3(_1019, _1022, _1025), vec3(_3690 * _3684, _3690 * _3685, _3690 * _3686));
                                float _4812 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3701 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3705 = ((_3701 * _3701) * (_3683 + (-1.0))) + 1.0;
                                float _3706 = _3643 * _3682;
                                float _3707 = _3706 * _3706;
                                float _3713 = ((1.0 - _3707) * dot(vec3(_1019, _1022, _1025), vec3(_3630, _3631, _3632))) + _3707;
                                float _4823 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3714 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3715 = 1.0 - _3682;
                                float _3725 = (0.5 / (((_3714 * ((_3697 * _3715) + _3682)) + 9.9999999392252902907785028219223e-09) + (((_3714 * _3715) + _3682) * _3697))) * _3714;
                                float _4834 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3735 = (_3660 * _3637) * (((_3683 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3705 * _3705) * ((_3650 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3661 * _3506.y;
                                frontier_phi_83_pred_1 = _3661 * _3506.x;
                                frontier_phi_83_pred_2 = _3735 * _3518.z;
                                frontier_phi_83_pred_3 = _3735 * _3518.y;
                                frontier_phi_83_pred_4 = _3735 * _3518.x;
                                frontier_phi_83_pred_5 = _3661 * _3506.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3743 = frontier_phi_83_pred;
                            _3742 = frontier_phi_83_pred_1;
                            _3741 = frontier_phi_83_pred_2;
                            _3740 = frontier_phi_83_pred_3;
                            _3739 = frontier_phi_83_pred_4;
                            _3744 = frontier_phi_83_pred_5;
                            _3448 = _3742 + _3461;
                            _3449 = _3743 + _3462;
                            _3450 = _3744 + _3463;
                            _3445 = _3739 + _3458;
                            _3446 = _3740 + _3459;
                            _3447 = _3741 + _3460;
                            if (_3465 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3465;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3450;
                        frontier_phi_77_pred_1 = _3449;
                        frontier_phi_77_pred_2 = _3448;
                        frontier_phi_77_pred_3 = _3447;
                        frontier_phi_77_pred_4 = _3446;
                        frontier_phi_77_pred_5 = _3445;
                    }
                    _3087 = frontier_phi_77_pred;
                    _3085 = frontier_phi_77_pred_1;
                    _3083 = frontier_phi_77_pred_2;
                    _3081 = frontier_phi_77_pred_3;
                    _3079 = frontier_phi_77_pred_4;
                    _3077 = frontier_phi_77_pred_5;
                    uint _3243 = _3242 + 1u;
                    if (_3243 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3236 = _3077;
                        _3237 = _3079;
                        _3238 = _3081;
                        _3239 = _3083;
                        _3240 = _3085;
                        _3241 = _3087;
                        _3242 = _3243;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3081;
                frontier_phi_58_59_ladder_1 = _3087;
                frontier_phi_58_59_ladder_2 = _3085;
                frontier_phi_58_59_ladder_3 = _3083;
                frontier_phi_58_59_ladder_4 = _3079;
                frontier_phi_58_59_ladder_5 = _3077;
            }
            else
            {
                frontier_phi_58_59_ladder = _2959;
                frontier_phi_58_59_ladder_1 = _2965;
                frontier_phi_58_59_ladder_2 = _2963;
                frontier_phi_58_59_ladder_3 = _2961;
                frontier_phi_58_59_ladder_4 = _2957;
                frontier_phi_58_59_ladder_5 = _2955;
            }
            _3076 = frontier_phi_58_59_ladder_5;
            _3078 = frontier_phi_58_59_ladder_4;
            _3080 = frontier_phi_58_59_ladder;
            _3082 = frontier_phi_58_59_ladder_3;
            _3084 = frontier_phi_58_59_ladder_2;
            _3086 = frontier_phi_58_59_ladder_1;
        }
        float _3091 = isnan(1.0) ? _1078 : (isnan(_1078) ? 1.0 : min(_1078, 1.0));
        _2867 = (_3091 * _3082) + _2300;
        _2869 = (_3091 * _3084) + _2302;
        _2871 = (_3091 * _3086) + _2304;
        _2873 = ((_3076 * _1063) * _3091) + _2648;
        _2875 = ((_3078 * _1065) * _3091) + _2650;
        _2877 = ((_3080 * _1066) * _3091) + _2652;
    }
    else
    {
        _2867 = _2300;
        _2869 = _2302;
        _2871 = _2304;
        _2873 = _2648;
        _2875 = _2650;
        _2877 = _2652;
    }
    float _4850 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _4861 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _4872 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _2894 = ((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2867 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1078))) + ((_2873 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1919)) * cbPerFrame._m0[3u].x);
    float _2895 = ((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2869 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1078))) + ((_2875 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1919)) * cbPerFrame._m0[3u].x);
    float _2896 = ((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2871 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1078))) + ((_2877 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1919)) * cbPerFrame._m0[3u].x);
    uint _2897 = _1038 + 6u;
    float _2905 = _1000 / cbSceneParam._m0[86u].x;
    float _2906 = _1001 / cbSceneParam._m0[86u].y;
    vec4 _2920 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2905, _2906, (log2((isnan(cbSceneParam._m0[77u].w) ? _923 : (isnan(_923) ? cbSceneParam._m0[77u].w : min(_923, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2922 = _2920.x;
    float _2923 = _2920.y;
    float _2924 = _2920.z;
    float _2925 = _2920.w;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    if (_923 > cbSceneParam._m0[78u].w)
    {
        float _2980 = isnan(_923) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _923 : min(cbSceneParam._m0[80u].w, _923));
        float _2981 = _2980 / _923;
        float _2992 = _2981 * _973;
        float _2993 = _974 * _2981;
        float _2994 = (-0.0) - _2993;
        float _2996 = _2981 * _975;
        float _2998 = (cbSceneParam._m0[77u].w * _2994) / _2980;
        float _2999 = _2998 + cbSceneParam._m0[79u].w;
        float _3000 = cbSceneParam._m0[79u].w - _2993;
        float _3006 = sqrt(((_2992 * _2992) + (_2993 * _2993)) + (_2996 * _2996));
        float _3009 = (1.0 - (cbSceneParam._m0[77u].w / _2980)) * _3006;
        float _3014 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3016 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3193;
        if (abs((_2994 - _2998) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3193 = ((((_2999 > 0.0) ? exp2(_3014 * _2999) : (2.0 - exp2(_3016 * _2999))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3009;
        }
        else
        {
            float _3137 = 1.0 / cbSceneParam._m0[80u].x;
            float _3138 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : max(_2999, _3000));
            float _3139 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : min(_2999, _3000));
            float _3148 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : min(_3138, 0.0));
            float _3149 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : min(_3139, 0.0));
            _3193 = ((abs(_3006 / _2994) * cbSceneParam._m0[80u].y) * ((((_3148 - _3149) * 2.0) - ((exp2(_3014 * (isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0)))) - exp2(_3014 * (isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))))) * _3137)) - ((exp2(_3016 * _3148) - exp2(_3016 * _3149)) * _3137))) + (_3009 * cbSceneParam._m0[80u].z);
        }
        vec4 _3195 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2905, _2906, 1.0), 0.0);
        float _3204 = exp2((_3193 * (-1.44269502162933349609375)) * (1.0 - _3195.w));
        float _3205 = log2(_3204);
        float _3221 = log2(_2925);
        _3018 = (exp2(_3221 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].x)) * _3195.x) / cbSceneParam._m0[78u].x)) + _2922;
        _3020 = (exp2(_3221 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].y)) * _3195.y) / cbSceneParam._m0[78u].y)) + _2923;
        _3022 = (exp2(_3221 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].z)) * _3195.z) / cbSceneParam._m0[78u].z)) + _2924;
        _3024 = _3204 * _2925;
    }
    else
    {
        _3018 = _2922;
        _3020 = _2923;
        _3022 = _2924;
        _3024 = _2925;
    }
    bool _3231;
    vec4 _3034;
    vec4 _3056;
    float _3058;
    float _3062;
    float _3063;
    float _3064;
    float _3065;
    bool _3075;
    for (;;)
    {
        _3034 = cbMatDynParam._m0[0u];
        float _3036 = roundEven(_3034.y);
        bool _3037 = _3036 == 3.0;
        float _3038 = log2(_3024);
        float _3045 = exp2(_3038 * cbSceneParam._m0[78u].x) * _2894;
        float _3046 = exp2(_3038 * cbSceneParam._m0[78u].y) * _2895;
        float _3047 = exp2(_3038 * cbSceneParam._m0[78u].z) * _2896;
        float _3054 = _989 + (-0.5);
        _3056 = cbMtdParam._m0[1u];
        _3058 = _3056.y * _3054;
        float _3061 = (_3036 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3062 = _3061 * (_3037 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3018)));
        _3063 = _3061 * (_3037 ? _3046 : (_3046 + (cbSceneParam._m0[72u].w * _3020)));
        _3064 = _3061 * (_3037 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3022)));
        _3065 = _3054 * 0.999000012874603271484375;
        _3075 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3075)
        {
            if ((cbInstanceData._m0[_1038 + 7u].x + _3065) < 0.5)
            {
                _3231 = true;
                break;
            }
        }
        uint _3172 = _1039 + uint(_3034.w);
        if ((cbInstanceData._m0[_3172].w < 1.0) && ((cbInstanceData._m0[_3172].w + _3065) < 0.5))
        {
            _3231 = true;
            break;
        }
        if ((_3058 + 1.0) < _3056.x)
        {
            _3231 = true;
            break;
        }
        _3231 = false;
        break;
    }
    float _3436;
    if (_3231)
    {
        discard_state = true;
        _3436 = 0.0;
    }
    else
    {
        _3436 = cbInstanceData._m0[_2897].w;
    }
    SV_Target.x = _3062;
    SV_Target.y = _3063;
    SV_Target.z = _3064;
    SV_Target.w = _3436;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2897].w;
    discard_exit();
}


