#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1273;
float _3680;
float _3681;
float _3682;
float _3683;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _252 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _252.x * cbMtdParam._m0[10u].x;
    float _259 = _252.y * cbMtdParam._m0[10u].y;
    float _260 = _252.z * cbMtdParam._m0[10u].z;
    vec4 _278 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _328 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _338 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _328)) + 1.0;
    float _3692 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _339 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _346 = (_339 * ((_278.x * cbMtdParam._m0[11u].x) - _258)) + _258;
    float _347 = (_339 * ((_278.y * cbMtdParam._m0[11u].y) - _259)) + _259;
    float _348 = (_339 * ((_278.z * cbMtdParam._m0[11u].z) - _260)) + _260;
    vec4 _366 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _397 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _328)) + 1.0;
    float _3703 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _405 = (_398 * ((_366.x * cbMtdParam._m0[12u].x) - _346)) + _346;
    float _406 = (_398 * ((_366.y * cbMtdParam._m0[12u].y) - _347)) + _347;
    float _407 = (_398 * ((_366.z * cbMtdParam._m0[12u].z) - _348)) + _348;
    vec4 _425 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _450 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _328)) + 1.0;
    float _3714 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    vec4 _479 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _487 = ((((_451 * ((_425.x * cbMtdParam._m0[13u].x) - _405)) + _405) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _479.x;
    float _490 = ((((_451 * ((_425.y * cbMtdParam._m0[13u].y) - _406)) + _406) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _479.y;
    float _493 = ((((_451 * ((_425.z * cbMtdParam._m0[13u].z) - _407)) + _407) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _479.z;
    vec4 _506 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _508 = _506.x;
    float _526 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _508) * _339) + _508;
    float _543 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _526) * _398) + _526;
    float _560 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _543) * _451) + _543;
    vec4 _572 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _574 = _572.x;
    float _575 = _572.y;
    float _581 = cbMtdParam._m0[18u].y * _572.z;
    vec4 _593 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _602 = (((cbMtdParam._m0[18u].x * _593.z) - _581) * _339) + _581;
    vec4 _615 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _626 = (((cbMtdParam._m0[17u].w * _615.z) - _602) * _398) + _602;
    vec4 _639 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _648 = (((cbMtdParam._m0[17u].z * _639.z) - _626) * _451) + _626;
    float _653 = ((_593.x - _574) * _339) + _574;
    float _654 = ((_593.y - _575) * _339) + _575;
    float _659 = ((_615.x - _653) * _398) + _653;
    float _660 = ((_615.y - _654) * _398) + _654;
    float _669 = ((((_639.x - _659) * _451) + _659) * 2.0) + (-1.0);
    float _671 = ((((_639.y - _660) * _451) + _660) * 2.0) + (-1.0);
    float _672 = dot(vec2(_669, _671), vec2(_669, _671));
    float _3725 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _677 = sqrt(1.0 - (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))));
    float _680 = fma(_677, _222 * NORMAL.x, fma(_671, _229 * TANGENT.x, (_215 * _207) * _669));
    float _683 = fma(_677, _222 * NORMAL.y, fma(_671, _229 * TANGENT.y, (_215 * _208) * _669));
    float _686 = fma(_677, _222 * NORMAL.z, fma(_671, _229 * TANGENT.z, (_215 * _209) * _669));
    float _690 = inversesqrt(dot(vec3(_680, _683, _686), vec3(_680, _683, _686)));
    float _691 = _690 * _680;
    float _692 = _690 * _683;
    float _693 = _690 * _686;
    float _3736 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _694 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3758 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3769 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3780 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _698 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _714 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _764 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _754);
    float _765 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _754);
    float _766 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _754);
    float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
    float _771 = _764 * _770;
    float _772 = _765 * _770;
    float _773 = _766 * _770;
    vec4 _778 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _780 = _778.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _952 = sqrt(((_764 * _764) + (_765 * _765)) + (_766 * _766));
        float _958 = (cbMatDynParam._m0[5u].x * _952) + cbMatDynParam._m0[5u].y;
        float _3791 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _963 = (cbMatDynParam._m0[5u].z * _952) + cbMatDynParam._m0[5u].w;
        float _3802 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) - _959)) + _959) < ((_780 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _791 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _792 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _810 = fma(_693, cbSceneParam._m0[5u].z, fma(_692, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _691));
    float _813 = fma(_693, cbSceneParam._m0[6u].z, fma(_692, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _691));
    float _816 = fma(_693, cbSceneParam._m0[7u].z, fma(_692, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _691));
    uint _829 = uint(roundEven(NORMAL.w)) * 13u;
    uint _830 = _829 + 9u;
    uint _831 = _830 + uint(cbMatDynParam._m0[0u].w);
    float _837 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_831].x;
    float _838 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_831].y;
    float _839 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_831].z;
    float _3813 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _843 = 1.0 - _698;
    float _844 = _840 * _843;
    float _845 = _841 * _843;
    float _846 = _842 * _843;
    float _851 = (_840 + (-0.039999999105930328369140625)) * _698;
    float _852 = (_841 + (-0.039999999105930328369140625)) * _698;
    float _853 = (_842 + (-0.039999999105930328369140625)) * _698;
    float _854 = _851 + 0.039999999105930328369140625;
    float _856 = _852 + 0.039999999105930328369140625;
    float _857 = _853 + 0.039999999105930328369140625;
    vec4 _866 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _791, cbSceneParam._m0[86u].y * _792));
    float _869 = _866.x * TEXCOORD_5.w;
    float _870 = dot(vec3(_691, _692, _693), vec3(_771, _772, _773));
    float _873 = _870 * 2.0;
    float _877 = (_873 * _691) - _771;
    float _878 = (_873 * _692) - _772;
    float _879 = (_873 * _693) - _773;
    float _883 = abs(dot(vec3(_771, _772, _773), vec3(_691, _692, _693)));
    float _3846 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _885 = sqrt(_694);
    float _898 = exp2((_885 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_885 * 3.0));
    float _904 = (1.0 - _898) * ((_885 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _905 = _898 * _885;
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1272;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _997 = fma(_941, cbModelParam._m0[26u].z, fma(_937, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _933));
        float _1001 = fma(_941, cbModelParam._m0[27u].z, fma(_937, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _933));
        float _1005 = fma(_941, cbModelParam._m0[28u].z, fma(_937, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _933));
        float _1030 = _933 + _691;
        float _1031 = _937 + _692;
        float _1032 = _941 + _693;
        float _1042 = fma(_1032, cbModelParam._m0[26u].z, fma(_1031, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030)) - _997;
        float _1043 = fma(_1032, cbModelParam._m0[27u].z, fma(_1031, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030)) - _1001;
        float _1044 = fma(_1032, cbModelParam._m0[28u].z, fma(_1031, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030)) - _1005;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_997 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1001 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[34u].z) + ((((((_1005 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1100 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1066.x + (-0.5));
        float _1102 = _1100 * (_1066.y + (-0.5));
        float _1103 = _1100 * (_1066.z + (-0.5));
        float _1110 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1073.x + (-0.5));
        float _1112 = _1110 * (_1073.y + (-0.5));
        float _1113 = _1110 * (_1073.z + (-0.5));
        float _1120 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1080.x + (-0.5));
        float _1122 = _1120 * (_1080.y + (-0.5));
        float _1123 = _1120 * (_1080.z + (-0.5));
        float _1130 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1087.x + (-0.5));
        float _1132 = _1130 * (_1087.y + (-0.5));
        float _1133 = _1130 * (_1087.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1154 = (dot(vec3(_691, _692, _693), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1164 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3894 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1166 + 1.0))) + _1171) * _1134;
        float _1181 = _1102 * 0.5;
        float _1182 = _1112 * 0.5;
        float _1183 = _1122 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_691, _692, _693), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3927 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1208 + 1.0))) + _1213) * _1135;
        float _1223 = _1103 * 0.5;
        float _1224 = _1113 * 0.5;
        float _1225 = _1123 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_691, _692, _693), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3960 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1250 + 1.0))) + _1255) * _1136;
        _1272 = _1103;
        _1274 = _1102;
        _1275 = _1101;
        _1276 = _1113;
        _1277 = _1112;
        _1278 = _1111;
        _1279 = _1123;
        _1280 = _1122;
        _1281 = _1121;
        _1282 = _1136;
        _1283 = _1135;
        _1284 = _1134;
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
    }
    else
    {
        _1272 = _1273;
        _1274 = _1273;
        _1275 = _1273;
        _1276 = _1273;
        _1277 = _1273;
        _1278 = _1273;
        _1279 = _1273;
        _1280 = _1273;
        _1281 = _1273;
        _1282 = _1273;
        _1283 = _1273;
        _1284 = _1273;
        _1285 = 0.0;
        _1286 = 0.0;
        _1287 = 0.0;
    }
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1316 = fma(_941, cbModelParam._m0[30u].z, fma(_937, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _933));
        float _1320 = fma(_941, cbModelParam._m0[31u].z, fma(_937, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _933));
        float _1324 = fma(_941, cbModelParam._m0[32u].z, fma(_937, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _933));
        float _1347 = _933 + _691;
        float _1348 = _937 + _692;
        float _1349 = _941 + _693;
        float _1359 = fma(_1349, cbModelParam._m0[30u].z, fma(_1348, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1347)) - _1316;
        float _1360 = fma(_1349, cbModelParam._m0[31u].z, fma(_1348, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1347)) - _1320;
        float _1361 = fma(_1349, cbModelParam._m0[32u].z, fma(_1348, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1347)) - _1324;
        float _1365 = inversesqrt(dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361)));
        float _1378 = ((_1365 * _1359) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1316 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1365 * _1360) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1320 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1365 * _1361) / cbModelParam._m0[35u].z) + ((((((_1324 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        float _1415 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1382.x + (-0.5));
        float _1417 = _1415 * (_1382.y + (-0.5));
        float _1418 = _1415 * (_1382.z + (-0.5));
        float _1425 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1389.x + (-0.5));
        float _1427 = _1425 * (_1389.y + (-0.5));
        float _1428 = _1425 * (_1389.z + (-0.5));
        float _1435 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1396.x + (-0.5));
        float _1437 = _1435 * (_1396.y + (-0.5));
        float _1438 = _1435 * (_1396.z + (-0.5));
        float _1445 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1403.x + (-0.5));
        float _1447 = _1445 * (_1403.y + (-0.5));
        float _1448 = _1445 * (_1403.z + (-0.5));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = _1416 * 0.5;
        float _1453 = _1426 * 0.5;
        float _1454 = _1436 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_691, _692, _693), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4023 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1479 + 1.0))) + _1484) * _1449;
        float _1494 = _1417 * 0.5;
        float _1495 = _1427 * 0.5;
        float _1496 = _1437 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_691, _692, _693), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4056 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1521 + 1.0))) + _1526) * _1450;
        float _1536 = _1418 * 0.5;
        float _1537 = _1428 * 0.5;
        float _1538 = _1438 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_691, _692, _693), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4089 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1563 + 1.0))) + _1568) * _1451;
        _1585 = _1418;
        _1586 = _1417;
        _1587 = _1416;
        _1588 = _1428;
        _1589 = _1427;
        _1590 = _1426;
        _1591 = _1438;
        _1592 = _1437;
        _1593 = _1436;
        _1594 = _1451;
        _1595 = _1450;
        _1596 = _1449;
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
    }
    else
    {
        _1585 = _1273;
        _1586 = _1273;
        _1587 = _1273;
        _1588 = _1273;
        _1589 = _1273;
        _1590 = _1273;
        _1591 = _1273;
        _1592 = _1273;
        _1593 = _1273;
        _1594 = _1273;
        _1595 = _1273;
        _1596 = _1273;
        _1597 = 0.0;
        _1598 = 0.0;
        _1599 = 0.0;
    }
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1285)) + _1285;
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1286)) + _1286;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1287)) + _1287;
    float _1632 = fma(_1611, cbSceneParam._m0[89u].z, fma(_1610, cbSceneParam._m0[89u].y, _1609 * cbSceneParam._m0[89u].x));
    float _1635 = fma(_1611, cbSceneParam._m0[90u].z, fma(_1610, cbSceneParam._m0[90u].y, _1609 * cbSceneParam._m0[90u].x));
    float _1638 = fma(_1611, cbSceneParam._m0[91u].z, fma(_1610, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1609));
    float _1653 = _877 * 0.5;
    float _1654 = _878 * 0.5;
    float _1655 = _879 * 0.5;
    float _1656 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1659 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1662 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1696;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1669 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1272, _1276, _1279, _1282));
        float _1673 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1677 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1275, _1278, _1281, _1284));
        float _1684 = dot(vec4(cbModelParam._m0[39u]), vec4(_1653, _1654, _1655, 1.0));
        _1696 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1696 = 1.0;
    }
    float _1707;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1698 = dot(vec4(cbModelParam._m0[40u]), vec4(_1653, _1654, _1655, 1.0));
        _1707 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1707 = 1.0;
    }
    float _1711 = (_1707 * cbModelParam._m0[1u].x) + (_1696 * (1.0 - cbModelParam._m0[1u].x));
    float _1721 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _694);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1721 : min(cbModelParam._m0[25u].z, _1721));
    float _1804;
    float _1806;
    float _1808;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1771 = fma(_941, cbModelParam._m0[13u].z, fma(_937, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _933)) + cbModelParam._m0[13u].w;
        float _1775 = fma(_941, cbModelParam._m0[14u].z, fma(_937, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _933)) + cbModelParam._m0[14u].w;
        float _1779 = fma(_941, cbModelParam._m0[15u].z, fma(_937, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _933)) + cbModelParam._m0[15u].w;
        float _1782 = fma(_879, cbModelParam._m0[13u].z, fma(_878, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _877));
        float _1785 = fma(_879, cbModelParam._m0[14u].z, fma(_878, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _877));
        float _1788 = fma(_879, cbModelParam._m0[15u].z, fma(_878, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _877));
        float _1816;
        if (_1782 > 0.0)
        {
            _1816 = abs((1.0 - _1771) / _1782);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1771 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1816 = frontier_phi_17_15_ladder;
        }
        float _2039;
        if (_1785 > 0.0)
        {
            _2039 = abs((1.0 - _1775) / _1785);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1775 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2039 = frontier_phi_26_22_ladder;
        }
        float _2296;
        if (_1788 > 0.0)
        {
            _2296 = abs((1.0 - _1779) / _1788);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1779 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2296 = frontier_phi_38_33_ladder;
        }
        float _2298 = isnan(_2039) ? _1816 : (isnan(_1816) ? _2039 : min(_1816, _2039));
        float _2299 = isnan(_2296) ? _2298 : (isnan(_2298) ? _2296 : min(_2298, _2296));
        float _2303 = (_2299 * _1782) + _1771;
        float _2304 = (_2299 * _1785) + _1775;
        float _2305 = (_2299 * _1788) + _1779;
        float _2306 = _2299 * 9.9999997473787516355514526367188e-05;
        float _2308 = (-1.0) - _2306;
        float _2310 = _2306 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2305 > _2310) || ((_2305 < _2308) || ((_2304 > _2310) || ((_2304 < _2308) || ((_2303 < _2308) || (_2303 > _2310))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2433 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2305, cbModelParam._m0[9u].z, fma(_2304, cbModelParam._m0[9u].y, _2303 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2305, cbModelParam._m0[10u].z, fma(_2304, cbModelParam._m0[10u].y, _2303 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2305, cbModelParam._m0[11u].z, fma(_2304, cbModelParam._m0[11u].y, _2303 * cbModelParam._m0[11u].x))), _1722);
            frontier_phi_16_38_ladder = _2433.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2433.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2433.x * cbModelParam._m0[1u].y;
        }
        _1804 = frontier_phi_16_38_ladder_2;
        _1806 = frontier_phi_16_38_ladder_1;
        _1808 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1792 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_877, _878, _879), _1722);
        _1804 = _1792.x * cbModelParam._m0[1u].y;
        _1806 = _1792.y * cbModelParam._m0[1u].y;
        _1808 = _1792.z * cbModelParam._m0[1u].y;
    }
    float _1812 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _694);
    float _1813 = isnan(_1812) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1812 : min(cbModelParam._m0[25u].w, _1812));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1866 = fma(_941, cbModelParam._m0[21u].z, fma(_937, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _933)) + cbModelParam._m0[21u].w;
        float _1870 = fma(_941, cbModelParam._m0[22u].z, fma(_937, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _933)) + cbModelParam._m0[22u].w;
        float _1874 = fma(_941, cbModelParam._m0[23u].z, fma(_937, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _933)) + cbModelParam._m0[23u].w;
        float _1877 = fma(_879, cbModelParam._m0[21u].z, fma(_878, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _877));
        float _1880 = fma(_879, cbModelParam._m0[22u].z, fma(_878, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _877));
        float _1883 = fma(_879, cbModelParam._m0[23u].z, fma(_878, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _877));
        float _2044;
        if (_1877 > 0.0)
        {
            _2044 = abs((1.0 - _1866) / _1877);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1866 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2044 = frontier_phi_28_24_ladder;
        }
        float _2323;
        if (_1880 > 0.0)
        {
            _2323 = abs((1.0 - _1870) / _1880);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1870 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2323 = frontier_phi_40_35_ladder;
        }
        float _2536;
        if (_1883 > 0.0)
        {
            _2536 = abs((1.0 - _1874) / _1883);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1874 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2536 = frontier_phi_49_46_ladder;
        }
        float _2538 = isnan(_2323) ? _2044 : (isnan(_2044) ? _2323 : min(_2044, _2323));
        float _2539 = isnan(_2536) ? _2538 : (isnan(_2538) ? _2536 : min(_2538, _2536));
        float _2543 = (_2539 * _1877) + _1866;
        float _2544 = (_2539 * _1880) + _1870;
        float _2545 = (_2539 * _1883) + _1874;
        float _2546 = _2539 * 9.9999997473787516355514526367188e-05;
        float _2547 = (-1.0) - _2546;
        float _2549 = _2546 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2545 > _2549) || ((_2545 < _2547) || ((_2544 > _2549) || ((_2544 < _2547) || ((_2543 < _2547) || (_2543 > _2549))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2744 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2545, cbModelParam._m0[17u].z, fma(_2544, cbModelParam._m0[17u].y, _2543 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2545, cbModelParam._m0[18u].z, fma(_2544, cbModelParam._m0[18u].y, _2543 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2545, cbModelParam._m0[19u].z, fma(_2544, cbModelParam._m0[19u].y, _2543 * cbModelParam._m0[19u].x))), _1813);
            frontier_phi_25_49_ladder = _2744.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2744.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2744.x * cbModelParam._m0[1u].z;
        }
        _1902 = frontier_phi_25_49_ladder_2;
        _1904 = frontier_phi_25_49_ladder_1;
        _1906 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1886 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_877, _878, _879), _1813);
        _1902 = _1886.x * cbModelParam._m0[1u].z;
        _1904 = _1886.y * cbModelParam._m0[1u].z;
        _1906 = _1886.z * cbModelParam._m0[1u].z;
    }
    float _1919 = (((_904 * _854) + _905) * _869) * ((cbModelParam._m0[1u].w * (_1902 - _1804)) + _1804);
    float _1921 = (((_904 * _856) + _905) * _869) * ((cbModelParam._m0[1u].w * (_1904 - _1806)) + _1806);
    float _1923 = (((_904 * _857) + _905) * _869) * ((cbModelParam._m0[1u].w * (_1906 - _1808)) + _1808);
    float _1926 = fma(_1923, cbSceneParam._m0[89u].z, fma(_1921, cbSceneParam._m0[89u].y, _1919 * cbSceneParam._m0[89u].x));
    float _1929 = fma(_1923, cbSceneParam._m0[90u].z, fma(_1921, cbSceneParam._m0[90u].y, _1919 * cbSceneParam._m0[90u].x));
    float _1932 = fma(_1923, cbSceneParam._m0[91u].z, fma(_1921, cbSceneParam._m0[91u].y, _1919 * cbSceneParam._m0[91u].x));
    vec4 _1940 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_791, _792));
    float _1942 = _1940.w;
    float _1954 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1942);
    float _1955 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1942);
    float _1956 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1942);
    uvec4 _1960 = floatBitsToUint(cbInstanceData._m0[_829 + 5u]);
    uint _1962 = _1960.x * 14u;
    uint _1963 = _1962 + 13u;
    float _1970 = _869 + (-1.0);
    float _1975 = (cbLight._m0[_1963].x * _1970) + 1.0;
    float _1976 = (cbLight._m0[_1963].y * _1970) + 1.0;
    float _1977 = (cbLight._m0[_1963].z * _1970) + 1.0;
    float _1978 = (cbLight._m0[_1963].w * _1970) + 1.0;
    uint _1979 = _1962 + 5u;
    float _1985 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _1989 = _1962 + 4u;
    float _1998 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _2002 = _1962 | 1u;
    float _2013 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_691, _692, _693));
    float _2016 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_691, _692, _693));
    float _4225 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _4236 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2021 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * 0.3183098733425140380859375;
    float _2023 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.3183098733425140380859375;
    float _2030 = ((cbLight._m0[_1979].x * _1985) * _2023) + (((cbLight._m0[_1989].x * _1954) * _1998) * _2021);
    float _2031 = ((_1985 * cbLight._m0[_1979].y) * _2023) + (((cbLight._m0[_1989].y * _1955) * _1998) * _2021);
    float _2032 = ((_1985 * cbLight._m0[_1979].z) * _2023) + (((cbLight._m0[_1989].z * _1956) * _1998) * _2021);
    uvec4 _2036 = floatBitsToUint(cbLight._m0[_1962 + 12u]);
    bool _2038 = _2036.x == 0u;
    float _2049;
    float _2051;
    float _2053;
    if (_2038)
    {
        _2049 = _2030;
        _2051 = _2031;
        _2053 = _2032;
    }
    else
    {
        uint _2057 = _1962 + 6u;
        float _2073 = (dot(vec3(cbLight._m0[_1962 + 2u].xyz), vec3(_691, _692, _693)) * 0.5) + 0.5;
        float _2074 = _2073 * _2073;
        float _4247 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2075 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2076 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2049 = (((cbLight._m0[_2057].x * 0.3183098733425140380859375) * _2075) * _2076) + _2030;
        _2051 = (((cbLight._m0[_2057].y * 0.3183098733425140380859375) * _2075) * _2076) + _2031;
        _2053 = (((cbLight._m0[_2057].z * 0.3183098733425140380859375) * _2075) * _2076) + _2032;
    }
    bool _2056 = _2036.y == 0u;
    float _2094;
    float _2096;
    float _2098;
    if (_2056)
    {
        _2094 = _2049;
        _2096 = _2051;
        _2098 = _2053;
    }
    else
    {
        uint _2267 = _1962 + 7u;
        float _2283 = (dot(vec3(cbLight._m0[_1962 + 3u].xyz), vec3(_691, _692, _693)) * 0.5) + 0.5;
        float _2284 = _2283 * _2283;
        float _4263 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2285 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2286 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2094 = (((cbLight._m0[_2267].x * 0.3183098733425140380859375) * _2285) * _2286) + _2049;
        _2096 = (((cbLight._m0[_2267].y * 0.3183098733425140380859375) * _2285) * _2286) + _2051;
        _2098 = (((cbLight._m0[_2267].z * 0.3183098733425140380859375) * _2285) * _2286) + _2053;
    }
    uint _2101 = _1962 + 8u;
    float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _694) * 0.949999988079071044921875);
    float _2115 = _2114 * _2114;
    float _2116 = cbLight._m0[_1962].x + _771;
    float _2117 = cbLight._m0[_1962].y + _772;
    float _2118 = cbLight._m0[_1962].z + _773;
    float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
    float _2123 = _2122 * _2116;
    float _2124 = _2122 * _2117;
    float _2125 = _2122 * _2118;
    float _2126 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_1962].xyz));
    float _4279 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _4290 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _2130 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2131 = dot(vec3(_691, _692, _693), vec3(_2123, _2124, _2125));
    float _4301 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2135 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_2123, _2124, _2125));
    float _4312 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2139 = _2115 * _2115;
    float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
    float _2151 = exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0);
    float _2152 = 0.959999978542327880859375 - _851;
    float _2154 = 0.959999978542327880859375 - _852;
    float _2155 = 0.959999978542327880859375 - _853;
    float _2162 = 1.0 - _2115;
    float _2173 = (0.5 / (((_2130 * ((_2129 * _2162) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2162) + _2115) * _2129))) * _2129;
    float _4323 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2175 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
    uint _2189 = _1962 + 9u;
    float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _694) * 0.949999988079071044921875);
    float _2201 = _2200 * _2200;
    float _2202 = cbLight._m0[_2002].x + _771;
    float _2203 = cbLight._m0[_2002].y + _772;
    float _2204 = cbLight._m0[_2002].z + _773;
    float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
    float _2209 = _2208 * _2202;
    float _2210 = _2208 * _2203;
    float _2211 = _2208 * _2204;
    float _2212 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2002].xyz));
    float _4334 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2216 = dot(vec3(_691, _692, _693), vec3(_2209, _2210, _2211));
    float _4345 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2220 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2209, _2210, _2211));
    float _4356 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2224 = _2201 * _2201;
    float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
    float _2235 = exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0);
    float _2242 = 1.0 - _2201;
    float _2252 = (0.5 / (((_2130 * ((_2215 * _2242) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2242) + _2201) * _2215))) * _2215;
    float _4367 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2254 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
    float _2264 = (((((_2235 * _2152) + _854) * cbLight._m0[_2189].x) * _2254) * _1985) + ((((cbLight._m0[_2101].x * _1954) * ((_2151 * _2152) + _854)) * _2175) * _1998);
    float _2265 = (((((_2235 * _2154) + _856) * cbLight._m0[_2189].y) * _2254) * _1985) + ((((cbLight._m0[_2101].y * _1955) * ((_2151 * _2154) + _856)) * _2175) * _1998);
    float _2266 = (((((_2235 * _2155) + _857) * cbLight._m0[_2189].z) * _2254) * _1985) + ((((cbLight._m0[_2101].z * _1956) * ((_2151 * _2155) + _857)) * _2175) * _1998);
    float _2328;
    float _2330;
    float _2332;
    if (_2038)
    {
        _2328 = _2264;
        _2330 = _2265;
        _2332 = _2266;
    }
    else
    {
        uint _2334 = _1962 + 2u;
        uint _2338 = _1962 + 10u;
        float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _694) * 0.949999988079071044921875);
        float _2353 = _2352 * _2352;
        float _2354 = cbLight._m0[_2334].x + _771;
        float _2355 = cbLight._m0[_2334].y + _772;
        float _2356 = cbLight._m0[_2334].z + _773;
        float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
        float _2361 = _2360 * _2354;
        float _2362 = _2360 * _2355;
        float _2363 = _2360 * _2356;
        float _2364 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2334].xyz));
        float _4378 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2368 = dot(vec3(_691, _692, _693), vec3(_2361, _2362, _2363));
        float _4389 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2371 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2372 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2361, _2362, _2363));
        float _4400 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2376 = _2353 * _2353;
        float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
        float _2387 = exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0);
        float _2394 = 1.0 - _2353;
        float _2404 = (0.5 / (((_2130 * ((_2367 * _2394) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2394) + _2353) * _2367))) * _2367;
        float _4411 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2406 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
        float _2407 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2328 = (((((_2387 * _2152) + _854) * cbLight._m0[_2338].x) * _2406) * _2407) + _2264;
        _2330 = (((((_2387 * _2154) + _856) * cbLight._m0[_2338].y) * _2406) * _2407) + _2265;
        _2332 = (((((_2387 * _2155) + _857) * cbLight._m0[_2338].z) * _2406) * _2407) + _2266;
    }
    float _2442;
    float _2444;
    float _2446;
    if (_2056)
    {
        _2442 = _2328;
        _2444 = _2330;
        _2446 = _2332;
    }
    else
    {
        uint _2453 = _1962 + 3u;
        uint _2457 = _1962 + 11u;
        float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2453].w)) * _694) * 0.949999988079071044921875);
        float _2472 = _2471 * _2471;
        float _2473 = cbLight._m0[_2453].x + _771;
        float _2474 = cbLight._m0[_2453].y + _772;
        float _2475 = cbLight._m0[_2453].z + _773;
        float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
        float _2480 = _2479 * _2473;
        float _2481 = _2479 * _2474;
        float _2482 = _2479 * _2475;
        float _2483 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2453].xyz));
        float _4427 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2487 = dot(vec3(_691, _692, _693), vec3(_2480, _2481, _2482));
        float _4438 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2491 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_2480, _2481, _2482));
        float _4449 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2495 = _2472 * _2472;
        float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
        float _2506 = exp2(log2(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) * 5.0);
        float _2513 = 1.0 - _2472;
        float _2523 = (0.5 / (((_2130 * ((_2486 * _2513) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2513) + _2472) * _2486))) * _2486;
        float _4460 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2525 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
        float _2526 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2442 = (((((_2506 * _2152) + _854) * cbLight._m0[_2457].x) * _2525) * _2526) + _2328;
        _2444 = (((((_2506 * _2154) + _856) * cbLight._m0[_2457].y) * _2525) * _2526) + _2330;
        _2446 = (((((_2506 * _2155) + _857) * cbLight._m0[_2457].z) * _2525) * _2526) + _2332;
    }
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    if (_1960.y == 0u)
    {
        float _2601 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2602 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2601;
        float _2603 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2601;
        float _2604 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2601;
        uvec4 _2616 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2617 = _2616.x;
        uint _2628 = uint((float(_2616.y) * floor(float(uint(cbSceneParam._m0[85u].y * _792) / _2617))) + floor(float(uint(cbSceneParam._m0[85u].x * _791) / _2617)));
        float _2638 = (log2(_2604 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2639 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        uint _2642 = uint(isnan(14.0) ? _2639 : (isnan(_2639) ? 14.0 : min(_2639, 14.0)));
        uvec4 _2647 = texelFetch(g_lightClusterGridBuffer, int(((_2642 << 2u) + (_2628 << 6u)) >> 2u));
        uint _2648 = _2647.x;
        uint _2649 = _2616.z;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        if (((((1u << ((_2649 >> 4u) & 15u)) + 4294967295u) & _2648) == 0u) || ((_2649 & 240u) == 0u))
        {
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
        }
        else
        {
            float _2750;
            float _2752;
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            uint _2908 = 0u;
            uint _2917;
            bool _2918;
            for (;;)
            {
                _2917 = texelFetch(g_lightClassification, int((((_2642 << 5u) + (_2628 << 9u)) + (_2908 << 2u)) >> 2u)).x;
                _2918 = _2917 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2918)
                {
                    frontier_phi_66_pred = _2902;
                    frontier_phi_66_pred_1 = _2907;
                    frontier_phi_66_pred_2 = _2906;
                    frontier_phi_66_pred_3 = _2905;
                    frontier_phi_66_pred_4 = _2904;
                    frontier_phi_66_pred_5 = _2903;
                }
                else
                {
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    uint _3053;
                    _3047 = _2902;
                    _3048 = _2903;
                    _3049 = _2904;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2917;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    for (;;)
                    {
                        uint _3057 = uint(findLSB(_3053)) + (_2908 << 5u);
                        uint _3054 = (_3053 + 4294967295u) & _3053;
                        uint _3059 = _3057 * 48u;
                        vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 3u)).x));
                        uint _3079 = (_3057 * 48u) + 4u;
                        vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3079)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 3u)).x));
                        uint _3098 = (_3057 * 48u) + 8u;
                        vec3 _3109 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x));
                        float _3113 = _3073.x - _2602;
                        float _3114 = _3073.y - _2603;
                        float _3115 = _3073.z - _2604;
                        float _3116 = dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115));
                        float _3119 = inversesqrt(_3116);
                        float _3120 = _3119 * _3113;
                        float _3121 = _3119 * _3114;
                        float _3122 = _3119 * _3115;
                        float _3123 = dot(vec3(_810, _813, _816), vec3(_3120, _3121, _3122));
                        float _3128 = 1.0 - (_3116 * _3073.w);
                        float _4486 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3129 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3130 = sqrt(_3116) * _3092.w;
                        float _3133 = 1.39999997615814208984375 / (_3130 + 1.39999997615814208984375);
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3123) + _3134;
                        float _3140 = _3130 * _3130;
                        float _3144 = ((isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0))) * _3129) / ((_3140 * 0.699999988079071044921875) + 1.0);
                        float _3148 = (-0.0) - _2602;
                        float _3149 = (-0.0) - _2603;
                        float _3150 = (-0.0) - _2604;
                        float _3154 = inversesqrt(dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150)));
                        float _3155 = _3154 * _3148;
                        float _3156 = _3154 * _3149;
                        float _3157 = _3154 * _3150;
                        float _3165 = exp2(log2(1.0 / ((_3140 * 3.5) + 5.0)) * 0.25);
                        float _3166 = 1.0 - _885;
                        float _3173 = sqrt(1.0 - ((1.0 - (_3166 * _3166)) * (1.0 - (_3165 * _3165))));
                        float _3174 = _3173 * _3173;
                        float _3175 = _3174 * _3174;
                        float _3176 = _3155 + _3120;
                        float _3177 = _3156 + _3121;
                        float _3178 = _3157 + _3122;
                        float _3182 = inversesqrt(dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178)));
                        float _3186 = dot(vec3(_810, _813, _816), vec3(_3155, _3156, _3157));
                        float _4502 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3189 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3190 = dot(vec3(_810, _813, _816), vec3(_3182 * _3176, _3182 * _3177, _3182 * _3178));
                        float _4513 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3193 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3197 = ((_3193 * _3193) * (_3175 + (-1.0))) + 1.0;
                        float _3198 = _3133 * _3174;
                        float _3199 = _3198 * _3198;
                        float _3202 = ((1.0 - _3199) * _3123) + _3199;
                        float _4524 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3203 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3204 = 1.0 - _3174;
                        float _3214 = (0.5 / (((_3203 * ((_3189 * _3204) + _3174)) + 9.9999999392252902907785028219223e-09) + (((_3203 * _3204) + _3174) * _3189))) * _3203;
                        float _4535 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3225 = (((_3175 * 3.1415927410125732421875) * (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) / ((_3197 * _3197) * ((_3140 * 2.1991131305694580078125) + 3.141590118408203125))) * _3129;
                        _2977 = (_3144 * _3092.x) + _3050;
                        _2978 = (_3144 * _3092.y) + _3051;
                        _2979 = (_3144 * _3092.z) + _3052;
                        _2974 = (_3225 * _3109.x) + _3047;
                        _2975 = (_3225 * _3109.y) + _3048;
                        _2976 = (_3225 * _3109.z) + _3049;
                        if (_3054 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3047 = _2974;
                            _3048 = _2975;
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _3054;
                        }
                    }
                    frontier_phi_66_pred = _2974;
                    frontier_phi_66_pred_1 = _2979;
                    frontier_phi_66_pred_2 = _2978;
                    frontier_phi_66_pred_3 = _2977;
                    frontier_phi_66_pred_4 = _2976;
                    frontier_phi_66_pred_5 = _2975;
                }
                _2750 = frontier_phi_66_pred;
                _2760 = frontier_phi_66_pred_1;
                _2758 = frontier_phi_66_pred_2;
                _2756 = frontier_phi_66_pred_3;
                _2754 = frontier_phi_66_pred_4;
                _2752 = frontier_phi_66_pred_5;
                uint _2909 = _2908 + 1u;
                if (_2909 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2902 = _2750;
                    _2903 = _2752;
                    _2904 = _2754;
                    _2905 = _2756;
                    _2906 = _2758;
                    _2907 = _2760;
                    _2908 = _2909;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
        }
        uvec4 _2763 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2764 = _2763.z;
        uint _2766 = (_2764 >> 8u) & 15u;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        if (((4294967295u << _2766) & _2648) == 0u)
        {
            _2870 = _2749;
            _2872 = _2751;
            _2874 = _2753;
            _2876 = _2755;
            _2878 = _2757;
            _2880 = _2759;
        }
        else
        {
            float _2895 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
            float _2896 = _2895 * _2602;
            float _2897 = _2895 * _2603;
            float _2898 = _2895 * _2604;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2766 < ((_2764 >> 12u) & 15u))
            {
                float _2871;
                float _2873;
                float _2875;
                float _2877;
                float _2879;
                float _2881;
                float _3030 = _2749;
                float _3031 = _2751;
                float _3032 = _2753;
                float _3033 = _2755;
                float _3034 = _2757;
                float _3035 = _2759;
                uint _3036 = _2766;
                uint _3045;
                bool _3046;
                for (;;)
                {
                    _3045 = texelFetch(g_lightClassification, int((((_2642 << 5u) + (_2628 << 9u)) + (_3036 << 2u)) >> 2u)).x;
                    _3046 = _3045 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3046)
                    {
                        frontier_phi_77_pred = _3035;
                        frontier_phi_77_pred_1 = _3034;
                        frontier_phi_77_pred_2 = _3033;
                        frontier_phi_77_pred_3 = _3032;
                        frontier_phi_77_pred_4 = _3031;
                        frontier_phi_77_pred_5 = _3030;
                    }
                    else
                    {
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3252 = _3030;
                        float _3253 = _3031;
                        float _3254 = _3032;
                        float _3255 = _3033;
                        float _3256 = _3034;
                        float _3257 = _3035;
                        uint _3258 = _3045;
                        uint _3259;
                        vec4 _3284;
                        float _3285;
                        vec4 _3300;
                        vec3 _3312;
                        vec4 _3327;
                        vec4 _3342;
                        float _3389;
                        bool _3390;
                        for (;;)
                        {
                            uint _3269 = ((_3036 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3258));
                            _3259 = (_3258 + 4294967295u) & _3258;
                            uint _3271 = _3269 * 40u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            _3285 = _3284.w;
                            uint _3287 = (_3269 * 40u) + 4u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3302 = (_3269 * 40u) + 8u;
                            _3312 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x));
                            uint _3314 = (_3269 * 40u) + 16u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3329 = (_3269 * 40u) + 20u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3345 = (_3269 * 40u) + 24u;
                            vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3364 = (_3269 * 40u) + 28u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3389 = fma(_2604, _3377.z, fma(_2603, _3377.y, _3377.x * _2602)) + _3377.w;
                            _3390 = !((fma(_2604, _3358.z, fma(_2603, _3358.y, _3358.x * _2602)) + _3358.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3390)
                            {
                                float _3417 = _3284.x - _2602;
                                float _3418 = _3284.y - _2603;
                                float _3419 = _3284.z - _2604;
                                float _3420 = dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419));
                                float _3423 = inversesqrt(_3420);
                                float _3424 = _3423 * _3417;
                                float _3425 = _3423 * _3418;
                                float _3426 = _3423 * _3419;
                                float _3430 = 1.0 - (_3420 / (_3285 * _3285));
                                float _4546 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3435 = sqrt(_3420) * _3300.w;
                                float _3437 = 1.39999997615814208984375 / (_3435 + 1.39999997615814208984375);
                                float _3438 = _3437 * _3437;
                                float _3441 = ((1.0 - _3438) * dot(vec3(_3424, _3425, _3426), vec3(_810, _813, _816))) + _3438;
                                float _3444 = _3435 * _3435;
                                float _3448 = (fma(_2604, _3327.z, fma(_2603, _3327.y, _3327.x * _2602)) + _3327.w) / _3389;
                                float _3449 = (fma(_2604, _3342.z, fma(_2603, _3342.y, _3342.x * _2602)) + _3342.w) / _3389;
                                float _3453 = 1.0 - dot(vec2(_3448, _3449), vec2(_3448, _3449));
                                float _4562 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3455 = _3454 * (((isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0))) * _3431) / ((_3444 * 0.699999988079071044921875) + 1.0));
                                float _3467 = exp2(log2(1.0 / ((_3444 * 3.5) + 5.0)) * 0.25);
                                float _3468 = 1.0 - _885;
                                float _3475 = sqrt(1.0 - ((1.0 - (_3468 * _3468)) * (1.0 - (_3467 * _3467))));
                                float _3476 = _3475 * _3475;
                                float _3477 = _3476 * _3476;
                                float _3478 = _3424 - _2896;
                                float _3479 = _3425 - _2897;
                                float _3480 = _3426 - _2898;
                                float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                                float _3488 = dot(vec3(_810, _813, _816), vec3((-0.0) - _2896, (-0.0) - _2897, (-0.0) - _2898));
                                float _4573 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3491 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3492 = dot(vec3(_810, _813, _816), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                                float _4584 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                                float _3500 = _3437 * _3476;
                                float _3501 = _3500 * _3500;
                                float _3507 = ((1.0 - _3501) * dot(vec3(_810, _813, _816), vec3(_3424, _3425, _3426))) + _3501;
                                float _4595 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3509 = 1.0 - _3476;
                                float _3519 = (0.5 / (((_3508 * ((_3491 * _3509) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3508 * _3509) + _3476) * _3491))) * _3508;
                                float _4606 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3529 = (_3454 * _3431) * (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) / ((_3499 * _3499) * ((_3444 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3455 * _3300.y;
                                frontier_phi_83_pred_1 = _3455 * _3300.x;
                                frontier_phi_83_pred_2 = _3529 * _3312.z;
                                frontier_phi_83_pred_3 = _3529 * _3312.y;
                                frontier_phi_83_pred_4 = _3529 * _3312.x;
                                frontier_phi_83_pred_5 = _3455 * _3300.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3537 = frontier_phi_83_pred;
                            _3536 = frontier_phi_83_pred_1;
                            _3535 = frontier_phi_83_pred_2;
                            _3534 = frontier_phi_83_pred_3;
                            _3533 = frontier_phi_83_pred_4;
                            _3538 = frontier_phi_83_pred_5;
                            _3242 = _3536 + _3255;
                            _3243 = _3537 + _3256;
                            _3244 = _3538 + _3257;
                            _3239 = _3533 + _3252;
                            _3240 = _3534 + _3253;
                            _3241 = _3535 + _3254;
                            if (_3259 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3259;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3244;
                        frontier_phi_77_pred_1 = _3243;
                        frontier_phi_77_pred_2 = _3242;
                        frontier_phi_77_pred_3 = _3241;
                        frontier_phi_77_pred_4 = _3240;
                        frontier_phi_77_pred_5 = _3239;
                    }
                    _2881 = frontier_phi_77_pred;
                    _2879 = frontier_phi_77_pred_1;
                    _2877 = frontier_phi_77_pred_2;
                    _2875 = frontier_phi_77_pred_3;
                    _2873 = frontier_phi_77_pred_4;
                    _2871 = frontier_phi_77_pred_5;
                    uint _3037 = _3036 + 1u;
                    if (_3037 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3030 = _2871;
                        _3031 = _2873;
                        _3032 = _2875;
                        _3033 = _2877;
                        _3034 = _2879;
                        _3035 = _2881;
                        _3036 = _3037;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2875;
                frontier_phi_58_59_ladder_1 = _2881;
                frontier_phi_58_59_ladder_2 = _2879;
                frontier_phi_58_59_ladder_3 = _2877;
                frontier_phi_58_59_ladder_4 = _2873;
                frontier_phi_58_59_ladder_5 = _2871;
            }
            else
            {
                frontier_phi_58_59_ladder = _2753;
                frontier_phi_58_59_ladder_1 = _2759;
                frontier_phi_58_59_ladder_2 = _2757;
                frontier_phi_58_59_ladder_3 = _2755;
                frontier_phi_58_59_ladder_4 = _2751;
                frontier_phi_58_59_ladder_5 = _2749;
            }
            _2870 = frontier_phi_58_59_ladder_5;
            _2872 = frontier_phi_58_59_ladder_4;
            _2874 = frontier_phi_58_59_ladder;
            _2876 = frontier_phi_58_59_ladder_3;
            _2878 = frontier_phi_58_59_ladder_2;
            _2880 = frontier_phi_58_59_ladder_1;
        }
        float _2885 = isnan(1.0) ? _869 : (isnan(_869) ? 1.0 : min(_869, 1.0));
        _2661 = (_2885 * _2876) + _2094;
        _2663 = (_2885 * _2878) + _2096;
        _2665 = (_2885 * _2880) + _2098;
        _2667 = ((_2870 * _854) * _2885) + _2442;
        _2669 = ((_2872 * _856) * _2885) + _2444;
        _2671 = ((_2874 * _857) * _2885) + _2446;
    }
    else
    {
        _2661 = _2094;
        _2663 = _2096;
        _2665 = _2098;
        _2667 = _2442;
        _2669 = _2444;
        _2671 = _2446;
    }
    float _4622 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4633 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4644 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _2688 = ((isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2661 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _869))) + ((_2667 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    float _2689 = ((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2663 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _869))) + ((_2669 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    float _2690 = ((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2665 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _869))) + ((_2671 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    uint _2691 = _829 + 6u;
    float _2699 = _791 / cbSceneParam._m0[86u].x;
    float _2700 = _792 / cbSceneParam._m0[86u].y;
    vec4 _2714 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2699, _2700, (log2((isnan(cbSceneParam._m0[77u].w) ? _714 : (isnan(_714) ? cbSceneParam._m0[77u].w : min(_714, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2716 = _2714.x;
    float _2717 = _2714.y;
    float _2718 = _2714.z;
    float _2719 = _2714.w;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    if (_714 > cbSceneParam._m0[78u].w)
    {
        float _2774 = isnan(_714) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _714 : min(cbSceneParam._m0[80u].w, _714));
        float _2775 = _2774 / _714;
        float _2786 = _2775 * _764;
        float _2787 = _765 * _2775;
        float _2788 = (-0.0) - _2787;
        float _2790 = _2775 * _766;
        float _2792 = (cbSceneParam._m0[77u].w * _2788) / _2774;
        float _2793 = _2792 + cbSceneParam._m0[79u].w;
        float _2794 = cbSceneParam._m0[79u].w - _2787;
        float _2800 = sqrt(((_2786 * _2786) + (_2787 * _2787)) + (_2790 * _2790));
        float _2803 = (1.0 - (cbSceneParam._m0[77u].w / _2774)) * _2800;
        float _2808 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2810 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2987;
        if (abs((_2788 - _2792) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2987 = ((((_2793 > 0.0) ? exp2(_2808 * _2793) : (2.0 - exp2(_2810 * _2793))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2803;
        }
        else
        {
            float _2931 = 1.0 / cbSceneParam._m0[80u].x;
            float _2932 = isnan(_2794) ? _2793 : (isnan(_2793) ? _2794 : max(_2793, _2794));
            float _2933 = isnan(_2794) ? _2793 : (isnan(_2793) ? _2794 : min(_2793, _2794));
            float _2942 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : min(_2932, 0.0));
            float _2943 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : min(_2933, 0.0));
            _2987 = ((abs(_2800 / _2788) * cbSceneParam._m0[80u].y) * ((((_2942 - _2943) * 2.0) - ((exp2(_2808 * (isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0)))) - exp2(_2808 * (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0))))) * _2931)) - ((exp2(_2810 * _2942) - exp2(_2810 * _2943)) * _2931))) + (_2803 * cbSceneParam._m0[80u].z);
        }
        vec4 _2989 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2699, _2700, 1.0), 0.0);
        float _2998 = exp2((_2987 * (-1.44269502162933349609375)) * (1.0 - _2989.w));
        float _2999 = log2(_2998);
        float _3015 = log2(_2719);
        _2812 = (exp2(_3015 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].x)) * _2989.x) / cbSceneParam._m0[78u].x)) + _2716;
        _2814 = (exp2(_3015 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].y)) * _2989.y) / cbSceneParam._m0[78u].y)) + _2717;
        _2816 = (exp2(_3015 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].z)) * _2989.z) / cbSceneParam._m0[78u].z)) + _2718;
        _2818 = _2998 * _2719;
    }
    else
    {
        _2812 = _2716;
        _2814 = _2717;
        _2816 = _2718;
        _2818 = _2719;
    }
    bool _3025;
    vec4 _2828;
    vec4 _2850;
    float _2852;
    float _2856;
    float _2857;
    float _2858;
    float _2859;
    bool _2869;
    for (;;)
    {
        _2828 = cbMatDynParam._m0[0u];
        float _2830 = roundEven(_2828.y);
        bool _2831 = _2830 == 3.0;
        float _2832 = log2(_2818);
        float _2839 = exp2(_2832 * cbSceneParam._m0[78u].x) * _2688;
        float _2840 = exp2(_2832 * cbSceneParam._m0[78u].y) * _2689;
        float _2841 = exp2(_2832 * cbSceneParam._m0[78u].z) * _2690;
        float _2848 = _780 + (-0.5);
        _2850 = cbMtdParam._m0[1u];
        _2852 = _2850.y * _2848;
        float _2855 = (_2830 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2856 = _2855 * (_2831 ? _2839 : (_2839 + (cbSceneParam._m0[72u].w * _2812)));
        _2857 = _2855 * (_2831 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2814)));
        _2858 = _2855 * (_2831 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2816)));
        _2859 = _2848 * 0.999000012874603271484375;
        _2869 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2869)
        {
            if ((cbInstanceData._m0[_829 + 7u].x + _2859) < 0.5)
            {
                _3025 = true;
                break;
            }
        }
        uint _2966 = _830 + uint(_2828.w);
        if ((cbInstanceData._m0[_2966].w < 1.0) && ((cbInstanceData._m0[_2966].w + _2859) < 0.5))
        {
            _3025 = true;
            break;
        }
        if ((_2852 + 1.0) < _2850.x)
        {
            _3025 = true;
            break;
        }
        _3025 = false;
        break;
    }
    float _3230;
    if (_3025)
    {
        discard_state = true;
        _3230 = 0.0;
    }
    else
    {
        _3230 = cbInstanceData._m0[_2691].w;
    }
    SV_Target.x = _2856;
    SV_Target.y = _2857;
    SV_Target.z = _2858;
    SV_Target.w = _3230;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2691].w;
    discard_exit();
}


