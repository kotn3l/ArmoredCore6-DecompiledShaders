#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1263;
float _3647;
float _3648;
float _3649;
float _3650;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _250.x * cbMtdParam._m0[10u].x;
    float _257 = _250.y * cbMtdParam._m0[10u].y;
    float _258 = _250.z * cbMtdParam._m0[10u].z;
    vec4 _276 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _326 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _336 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _326)) + 1.0;
    float _3659 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _337 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _344 = (_337 * ((_276.x * cbMtdParam._m0[11u].x) - _256)) + _256;
    float _345 = (_337 * ((_276.y * cbMtdParam._m0[11u].y) - _257)) + _257;
    float _346 = (_337 * ((_276.z * cbMtdParam._m0[11u].z) - _258)) + _258;
    vec4 _364 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _395 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _326)) + 1.0;
    float _3670 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _403 = (_396 * ((_364.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _404 = (_396 * ((_364.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _405 = (_396 * ((_364.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _423 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _448 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _326)) + 1.0;
    float _3681 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _456 = (_449 * ((_423.x * cbMtdParam._m0[13u].x) - _403)) + _403;
    float _457 = (_449 * ((_423.y * cbMtdParam._m0[13u].y) - _404)) + _404;
    float _458 = (_449 * ((_423.z * cbMtdParam._m0[13u].z) - _405)) + _405;
    vec4 _471 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _473 = _471.x;
    float _491 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _473) * _337) + _473;
    float _509 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _491) * _396) + _491;
    float _526 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _509) * _449) + _509;
    vec4 _538 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _540 = _538.x;
    float _541 = _538.y;
    float _547 = cbMtdParam._m0[18u].y * _538.z;
    vec4 _559 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _568 = (((cbMtdParam._m0[18u].x * _559.z) - _547) * _337) + _547;
    vec4 _581 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _592 = (((cbMtdParam._m0[17u].w * _581.z) - _568) * _396) + _568;
    vec4 _605 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _614 = (((cbMtdParam._m0[17u].z * _605.z) - _592) * _449) + _592;
    vec4 _627 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _640 = ((_559.x - _540) * _337) + _540;
    float _641 = ((_559.y - _541) * _337) + _541;
    float _646 = ((_581.x - _640) * _396) + _640;
    float _647 = ((_581.y - _641) * _396) + _641;
    float _656 = ((((_605.x - _646) * _449) + _646) * 2.0) + (-1.0);
    float _657 = ((((_605.y - _647) * _449) + _647) * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _3692 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _663 = sqrt(1.0 - (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))));
    float _666 = (((_627.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _656;
    float _667 = (((_627.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _657;
    float _670 = fma(_663, _220 * NORMAL.x, fma(_667, _227 * TANGENT.x, (_213 * _205) * _666));
    float _673 = fma(_663, _220 * NORMAL.y, fma(_667, _227 * TANGENT.y, (_213 * _206) * _666));
    float _676 = fma(_663, _220 * NORMAL.z, fma(_667, _227 * TANGENT.z, (_213 * _207) * _666));
    float _680 = inversesqrt(dot(vec3(_670, _673, _676), vec3(_670, _673, _676)));
    float _681 = _680 * _670;
    float _682 = _680 * _673;
    float _683 = _680 * _676;
    float _3703 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _684 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3725 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3736 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3747 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _688 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _704 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _754 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _744);
    float _755 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _744);
    float _756 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _744);
    float _760 = inversesqrt(dot(vec3(_754, _755, _756), vec3(_754, _755, _756)));
    float _761 = _754 * _760;
    float _762 = _755 * _760;
    float _763 = _756 * _760;
    vec4 _768 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _770 = _768.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _942 = sqrt(((_754 * _754) + (_755 * _755)) + (_756 * _756));
        float _948 = (cbMatDynParam._m0[5u].x * _942) + cbMatDynParam._m0[5u].y;
        float _3758 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _953 = (cbMatDynParam._m0[5u].z * _942) + cbMatDynParam._m0[5u].w;
        float _3769 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) - _949)) + _949) < ((_770 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _781 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _782 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _800 = fma(_683, cbSceneParam._m0[5u].z, fma(_682, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _681));
    float _803 = fma(_683, cbSceneParam._m0[6u].z, fma(_682, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _681));
    float _806 = fma(_683, cbSceneParam._m0[7u].z, fma(_682, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _681));
    uint _819 = uint(roundEven(NORMAL.w)) * 13u;
    uint _820 = _819 + 9u;
    uint _821 = _820 + uint(cbMatDynParam._m0[0u].w);
    float _827 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_821].x;
    float _828 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) * cbInstanceData._m0[_821].y;
    float _829 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_821].z;
    float _3780 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _833 = 1.0 - _688;
    float _834 = _830 * _833;
    float _835 = _831 * _833;
    float _836 = _832 * _833;
    float _841 = (_830 + (-0.039999999105930328369140625)) * _688;
    float _842 = (_831 + (-0.039999999105930328369140625)) * _688;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _688;
    float _844 = _841 + 0.039999999105930328369140625;
    float _846 = _842 + 0.039999999105930328369140625;
    float _847 = _843 + 0.039999999105930328369140625;
    vec4 _856 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _781, cbSceneParam._m0[86u].y * _782));
    float _859 = _856.x * TEXCOORD_5.w;
    float _860 = dot(vec3(_681, _682, _683), vec3(_761, _762, _763));
    float _863 = _860 * 2.0;
    float _867 = (_863 * _681) - _761;
    float _868 = (_863 * _682) - _762;
    float _869 = (_863 * _683) - _763;
    float _873 = abs(dot(vec3(_761, _762, _763), vec3(_681, _682, _683)));
    float _3813 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _875 = sqrt(_684);
    float _888 = exp2((_875 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_875 * 3.0));
    float _894 = (1.0 - _888) * ((_875 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _895 = _888 * _875;
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1262;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _987 = fma(_931, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923));
        float _991 = fma(_931, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923));
        float _995 = fma(_931, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923));
        float _1020 = _923 + _681;
        float _1021 = _927 + _682;
        float _1022 = _931 + _683;
        float _1032 = fma(_1022, cbModelParam._m0[26u].z, fma(_1021, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020)) - _987;
        float _1033 = fma(_1022, cbModelParam._m0[27u].z, fma(_1021, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020)) - _991;
        float _1034 = fma(_1022, cbModelParam._m0[28u].z, fma(_1021, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020)) - _995;
        float _1038 = inversesqrt(dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034)));
        float _1051 = ((_1038 * _1032) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_987 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1038 * _1033) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_991 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1038 * _1034) / cbModelParam._m0[34u].z) + ((((((_995 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        float _1090 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1056.x + (-0.5));
        float _1092 = _1090 * (_1056.y + (-0.5));
        float _1093 = _1090 * (_1056.z + (-0.5));
        float _1100 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1063.x + (-0.5));
        float _1102 = _1100 * (_1063.y + (-0.5));
        float _1103 = _1100 * (_1063.z + (-0.5));
        float _1110 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1070.x + (-0.5));
        float _1112 = _1110 * (_1070.y + (-0.5));
        float _1113 = _1110 * (_1070.z + (-0.5));
        float _1120 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1077.x + (-0.5));
        float _1122 = _1120 * (_1077.y + (-0.5));
        float _1123 = _1120 * (_1077.z + (-0.5));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = _1091 * 0.5;
        float _1128 = _1101 * 0.5;
        float _1129 = _1111 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1144 = (dot(vec3(_681, _682, _683), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1154 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3861 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1156 + 1.0))) + _1161) * _1124;
        float _1171 = _1092 * 0.5;
        float _1172 = _1102 * 0.5;
        float _1173 = _1112 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_681, _682, _683), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3894 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1198 + 1.0))) + _1203) * _1125;
        float _1213 = _1093 * 0.5;
        float _1214 = _1103 * 0.5;
        float _1215 = _1113 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_681, _682, _683), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3927 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1240 + 1.0))) + _1245) * _1126;
        _1262 = _1093;
        _1264 = _1092;
        _1265 = _1091;
        _1266 = _1103;
        _1267 = _1102;
        _1268 = _1101;
        _1269 = _1113;
        _1270 = _1112;
        _1271 = _1111;
        _1272 = _1126;
        _1273 = _1125;
        _1274 = _1124;
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
    }
    else
    {
        _1262 = _1263;
        _1264 = _1263;
        _1265 = _1263;
        _1266 = _1263;
        _1267 = _1263;
        _1268 = _1263;
        _1269 = _1263;
        _1270 = _1263;
        _1271 = _1263;
        _1272 = _1263;
        _1273 = _1263;
        _1274 = _1263;
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
    }
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1306 = fma(_931, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923));
        float _1310 = fma(_931, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923));
        float _1314 = fma(_931, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923));
        float _1337 = _923 + _681;
        float _1338 = _927 + _682;
        float _1339 = _931 + _683;
        float _1349 = fma(_1339, cbModelParam._m0[30u].z, fma(_1338, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1337)) - _1306;
        float _1350 = fma(_1339, cbModelParam._m0[31u].z, fma(_1338, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1337)) - _1310;
        float _1351 = fma(_1339, cbModelParam._m0[32u].z, fma(_1338, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1337)) - _1314;
        float _1355 = inversesqrt(dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351)));
        float _1368 = ((_1355 * _1349) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1306 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1355 * _1350) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1310 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1355 * _1351) / cbModelParam._m0[35u].z) + ((((((_1314 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        float _1405 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1372.x + (-0.5));
        float _1407 = _1405 * (_1372.y + (-0.5));
        float _1408 = _1405 * (_1372.z + (-0.5));
        float _1415 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1379.x + (-0.5));
        float _1417 = _1415 * (_1379.y + (-0.5));
        float _1418 = _1415 * (_1379.z + (-0.5));
        float _1425 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1386.x + (-0.5));
        float _1427 = _1425 * (_1386.y + (-0.5));
        float _1428 = _1425 * (_1386.z + (-0.5));
        float _1435 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1393.x + (-0.5));
        float _1437 = _1435 * (_1393.y + (-0.5));
        float _1438 = _1435 * (_1393.z + (-0.5));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = _1406 * 0.5;
        float _1443 = _1416 * 0.5;
        float _1444 = _1426 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_681, _682, _683), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _3990 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1469 + 1.0))) + _1474) * _1439;
        float _1484 = _1407 * 0.5;
        float _1485 = _1417 * 0.5;
        float _1486 = _1427 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_681, _682, _683), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4023 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1511 + 1.0))) + _1516) * _1440;
        float _1526 = _1408 * 0.5;
        float _1527 = _1418 * 0.5;
        float _1528 = _1428 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_681, _682, _683), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4056 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1553 + 1.0))) + _1558) * _1441;
        _1575 = _1408;
        _1576 = _1407;
        _1577 = _1406;
        _1578 = _1418;
        _1579 = _1417;
        _1580 = _1416;
        _1581 = _1428;
        _1582 = _1427;
        _1583 = _1426;
        _1584 = _1441;
        _1585 = _1440;
        _1586 = _1439;
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
    }
    else
    {
        _1575 = _1263;
        _1576 = _1263;
        _1577 = _1263;
        _1578 = _1263;
        _1579 = _1263;
        _1580 = _1263;
        _1581 = _1263;
        _1582 = _1263;
        _1583 = _1263;
        _1584 = _1263;
        _1585 = _1263;
        _1586 = _1263;
        _1587 = 0.0;
        _1588 = 0.0;
        _1589 = 0.0;
    }
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1275)) + _1275;
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1276)) + _1276;
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1277)) + _1277;
    float _1622 = fma(_1601, cbSceneParam._m0[89u].z, fma(_1600, cbSceneParam._m0[89u].y, _1599 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1601, cbSceneParam._m0[90u].z, fma(_1600, cbSceneParam._m0[90u].y, _1599 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1601, cbSceneParam._m0[91u].z, fma(_1600, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1599));
    float _1643 = _867 * 0.5;
    float _1644 = _868 * 0.5;
    float _1645 = _869 * 0.5;
    float _1646 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1649 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1652 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1686;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1659 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1262, _1266, _1269, _1272));
        float _1663 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1667 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1674 = dot(vec4(cbModelParam._m0[39u]), vec4(_1643, _1644, _1645, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1697;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1688 = dot(vec4(cbModelParam._m0[40u]), vec4(_1643, _1644, _1645, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1688) ? 0.0 : (isnan(0.0) ? _1688 : max(0.0, _1688))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1701 = (_1697 * cbModelParam._m0[1u].x) + (_1686 * (1.0 - cbModelParam._m0[1u].x));
    float _1711 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _684);
    float _1712 = isnan(_1711) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1711 : min(cbModelParam._m0[25u].z, _1711));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1761 = fma(_931, cbModelParam._m0[13u].z, fma(_927, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923)) + cbModelParam._m0[13u].w;
        float _1765 = fma(_931, cbModelParam._m0[14u].z, fma(_927, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923)) + cbModelParam._m0[14u].w;
        float _1769 = fma(_931, cbModelParam._m0[15u].z, fma(_927, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923)) + cbModelParam._m0[15u].w;
        float _1772 = fma(_869, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _867));
        float _1775 = fma(_869, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _867));
        float _1778 = fma(_869, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _867));
        float _1806;
        if (_1772 > 0.0)
        {
            _1806 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1806 = frontier_phi_17_15_ladder;
        }
        float _2009;
        if (_1775 > 0.0)
        {
            _2009 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2009 = frontier_phi_26_22_ladder;
        }
        float _2263;
        if (_1778 > 0.0)
        {
            _2263 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2263 = frontier_phi_38_33_ladder;
        }
        float _2265 = isnan(_2009) ? _1806 : (isnan(_1806) ? _2009 : min(_1806, _2009));
        float _2266 = isnan(_2263) ? _2265 : (isnan(_2265) ? _2263 : min(_2265, _2263));
        float _2270 = (_2266 * _1772) + _1761;
        float _2271 = (_2266 * _1775) + _1765;
        float _2272 = (_2266 * _1778) + _1769;
        float _2273 = _2266 * 9.9999997473787516355514526367188e-05;
        float _2275 = (-1.0) - _2273;
        float _2277 = _2273 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2272 > _2277) || ((_2272 < _2275) || ((_2271 > _2277) || ((_2271 < _2275) || ((_2270 < _2275) || (_2270 > _2277))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2272, cbModelParam._m0[9u].z, fma(_2271, cbModelParam._m0[9u].y, _2270 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2272, cbModelParam._m0[10u].z, fma(_2271, cbModelParam._m0[10u].y, _2270 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2272, cbModelParam._m0[11u].z, fma(_2271, cbModelParam._m0[11u].y, _2270 * cbModelParam._m0[11u].x))), _1712);
            frontier_phi_16_38_ladder = _2400.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2400.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2400.x * cbModelParam._m0[1u].y;
        }
        _1794 = frontier_phi_16_38_ladder_2;
        _1796 = frontier_phi_16_38_ladder_1;
        _1798 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_867, _868, _869), _1712);
        _1794 = _1782.x * cbModelParam._m0[1u].y;
        _1796 = _1782.y * cbModelParam._m0[1u].y;
        _1798 = _1782.z * cbModelParam._m0[1u].y;
    }
    float _1802 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _684);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1802 : min(cbModelParam._m0[25u].w, _1802));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1856 = fma(_931, cbModelParam._m0[21u].z, fma(_927, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923)) + cbModelParam._m0[21u].w;
        float _1860 = fma(_931, cbModelParam._m0[22u].z, fma(_927, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923)) + cbModelParam._m0[22u].w;
        float _1864 = fma(_931, cbModelParam._m0[23u].z, fma(_927, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923)) + cbModelParam._m0[23u].w;
        float _1867 = fma(_869, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _867));
        float _1870 = fma(_869, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _867));
        float _1873 = fma(_869, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _867));
        float _2014;
        if (_1867 > 0.0)
        {
            _2014 = abs((1.0 - _1856) / _1867);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1856 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2014 = frontier_phi_28_24_ladder;
        }
        float _2290;
        if (_1870 > 0.0)
        {
            _2290 = abs((1.0 - _1860) / _1870);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1860 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2290 = frontier_phi_40_35_ladder;
        }
        float _2503;
        if (_1873 > 0.0)
        {
            _2503 = abs((1.0 - _1864) / _1873);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1864 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2503 = frontier_phi_49_46_ladder;
        }
        float _2505 = isnan(_2290) ? _2014 : (isnan(_2014) ? _2290 : min(_2014, _2290));
        float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
        float _2510 = (_2506 * _1867) + _1856;
        float _2511 = (_2506 * _1870) + _1860;
        float _2512 = (_2506 * _1873) + _1864;
        float _2513 = _2506 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2513;
        float _2516 = _2513 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2512 > _2516) || ((_2512 < _2514) || ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 < _2514) || (_2510 > _2516))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2711 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2512, cbModelParam._m0[17u].z, fma(_2511, cbModelParam._m0[17u].y, _2510 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2512, cbModelParam._m0[18u].z, fma(_2511, cbModelParam._m0[18u].y, _2510 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2512, cbModelParam._m0[19u].z, fma(_2511, cbModelParam._m0[19u].y, _2510 * cbModelParam._m0[19u].x))), _1803);
            frontier_phi_25_49_ladder = _2711.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2711.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2711.x * cbModelParam._m0[1u].z;
        }
        _1892 = frontier_phi_25_49_ladder_2;
        _1894 = frontier_phi_25_49_ladder_1;
        _1896 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_867, _868, _869), _1803);
        _1892 = _1876.x * cbModelParam._m0[1u].z;
        _1894 = _1876.y * cbModelParam._m0[1u].z;
        _1896 = _1876.z * cbModelParam._m0[1u].z;
    }
    float _1909 = (((_894 * _844) + _895) * _859) * ((cbModelParam._m0[1u].w * (_1892 - _1794)) + _1794);
    float _1911 = (((_894 * _846) + _895) * _859) * ((cbModelParam._m0[1u].w * (_1894 - _1796)) + _1796);
    float _1913 = (((_894 * _847) + _895) * _859) * ((cbModelParam._m0[1u].w * (_1896 - _1798)) + _1798);
    float _1916 = fma(_1913, cbSceneParam._m0[89u].z, fma(_1911, cbSceneParam._m0[89u].y, _1909 * cbSceneParam._m0[89u].x));
    float _1919 = fma(_1913, cbSceneParam._m0[90u].z, fma(_1911, cbSceneParam._m0[90u].y, _1909 * cbSceneParam._m0[90u].x));
    float _1922 = fma(_1913, cbSceneParam._m0[91u].z, fma(_1911, cbSceneParam._m0[91u].y, _1909 * cbSceneParam._m0[91u].x));
    uvec4 _1932 = floatBitsToUint(cbInstanceData._m0[_819 + 5u]);
    uint _1934 = _1932.x * 14u;
    uint _1935 = _1934 + 13u;
    float _1942 = _859 + (-1.0);
    float _1947 = (cbLight._m0[_1935].x * _1942) + 1.0;
    float _1948 = (cbLight._m0[_1935].y * _1942) + 1.0;
    float _1949 = (cbLight._m0[_1935].z * _1942) + 1.0;
    float _1950 = (cbLight._m0[_1935].w * _1942) + 1.0;
    uint _1951 = _1934 + 5u;
    float _1957 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1961 = _1934 + 4u;
    float _1968 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
    uint _1972 = _1934 | 1u;
    float _1983 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_681, _682, _683));
    float _1986 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_681, _682, _683));
    float _4192 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _4203 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1991 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * 0.3183098733425140380859375;
    float _1993 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 0.3183098733425140380859375;
    float _2000 = ((cbLight._m0[_1951].x * _1957) * _1993) + ((cbLight._m0[_1961].x * _1968) * _1991);
    float _2001 = ((_1957 * cbLight._m0[_1951].y) * _1993) + ((_1968 * cbLight._m0[_1961].y) * _1991);
    float _2002 = ((_1957 * cbLight._m0[_1951].z) * _1993) + ((_1968 * cbLight._m0[_1961].z) * _1991);
    uvec4 _2006 = floatBitsToUint(cbLight._m0[_1934 + 12u]);
    bool _2008 = _2006.x == 0u;
    float _2019;
    float _2021;
    float _2023;
    if (_2008)
    {
        _2019 = _2000;
        _2021 = _2001;
        _2023 = _2002;
    }
    else
    {
        uint _2027 = _1934 + 6u;
        float _2043 = (dot(vec3(cbLight._m0[_1934 + 2u].xyz), vec3(_681, _682, _683)) * 0.5) + 0.5;
        float _2044 = _2043 * _2043;
        float _4214 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2045 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2046 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2019 = (((cbLight._m0[_2027].x * 0.3183098733425140380859375) * _2045) * _2046) + _2000;
        _2021 = (((cbLight._m0[_2027].y * 0.3183098733425140380859375) * _2045) * _2046) + _2001;
        _2023 = (((cbLight._m0[_2027].z * 0.3183098733425140380859375) * _2045) * _2046) + _2002;
    }
    bool _2026 = _2006.y == 0u;
    float _2064;
    float _2066;
    float _2068;
    if (_2026)
    {
        _2064 = _2019;
        _2066 = _2021;
        _2068 = _2023;
    }
    else
    {
        uint _2234 = _1934 + 7u;
        float _2250 = (dot(vec3(cbLight._m0[_1934 + 3u].xyz), vec3(_681, _682, _683)) * 0.5) + 0.5;
        float _2251 = _2250 * _2250;
        float _4230 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2252 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2253 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2064 = (((cbLight._m0[_2234].x * 0.3183098733425140380859375) * _2252) * _2253) + _2019;
        _2066 = (((cbLight._m0[_2234].y * 0.3183098733425140380859375) * _2252) * _2253) + _2021;
        _2068 = (((cbLight._m0[_2234].z * 0.3183098733425140380859375) * _2252) * _2253) + _2023;
    }
    uint _2071 = _1934 + 8u;
    float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _684) * 0.949999988079071044921875);
    float _2085 = _2084 * _2084;
    float _2086 = cbLight._m0[_1934].x + _761;
    float _2087 = cbLight._m0[_1934].y + _762;
    float _2088 = cbLight._m0[_1934].z + _763;
    float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
    float _2093 = _2092 * _2086;
    float _2094 = _2092 * _2087;
    float _2095 = _2092 * _2088;
    float _2096 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_1934].xyz));
    float _4246 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _4257 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _2100 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2101 = dot(vec3(_681, _682, _683), vec3(_2093, _2094, _2095));
    float _4268 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2105 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_2093, _2094, _2095));
    float _4279 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2109 = _2085 * _2085;
    float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
    float _2121 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
    float _2122 = 0.959999978542327880859375 - _841;
    float _2124 = 0.959999978542327880859375 - _842;
    float _2125 = 0.959999978542327880859375 - _843;
    float _2132 = 1.0 - _2085;
    float _2143 = (0.5 / (((_2100 * ((_2099 * _2132) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2132) + _2085) * _2099))) * _2099;
    float _4290 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2145 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
    uint _2156 = _1934 + 9u;
    float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _684) * 0.949999988079071044921875);
    float _2168 = _2167 * _2167;
    float _2169 = cbLight._m0[_1972].x + _761;
    float _2170 = cbLight._m0[_1972].y + _762;
    float _2171 = cbLight._m0[_1972].z + _763;
    float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
    float _2176 = _2175 * _2169;
    float _2177 = _2175 * _2170;
    float _2178 = _2175 * _2171;
    float _2179 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_1972].xyz));
    float _4301 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2183 = dot(vec3(_681, _682, _683), vec3(_2176, _2177, _2178));
    float _4312 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2187 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_2176, _2177, _2178));
    float _4323 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2191 = _2168 * _2168;
    float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
    float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
    float _2209 = 1.0 - _2168;
    float _2219 = (0.5 / (((_2100 * ((_2182 * _2209) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2209) + _2168) * _2182))) * _2182;
    float _4334 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2221 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
    float _2231 = (((((_2202 * _2122) + _844) * cbLight._m0[_2156].x) * _2221) * _1957) + (((((_2121 * _2122) + _844) * cbLight._m0[_2071].x) * _2145) * _1968);
    float _2232 = (((((_2202 * _2124) + _846) * cbLight._m0[_2156].y) * _2221) * _1957) + (((((_2121 * _2124) + _846) * cbLight._m0[_2071].y) * _2145) * _1968);
    float _2233 = (((((_2202 * _2125) + _847) * cbLight._m0[_2156].z) * _2221) * _1957) + (((((_2121 * _2125) + _847) * cbLight._m0[_2071].z) * _2145) * _1968);
    float _2295;
    float _2297;
    float _2299;
    if (_2008)
    {
        _2295 = _2231;
        _2297 = _2232;
        _2299 = _2233;
    }
    else
    {
        uint _2301 = _1934 + 2u;
        uint _2305 = _1934 + 10u;
        float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _684) * 0.949999988079071044921875);
        float _2320 = _2319 * _2319;
        float _2321 = cbLight._m0[_2301].x + _761;
        float _2322 = cbLight._m0[_2301].y + _762;
        float _2323 = cbLight._m0[_2301].z + _763;
        float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
        float _2328 = _2327 * _2321;
        float _2329 = _2327 * _2322;
        float _2330 = _2327 * _2323;
        float _2331 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2301].xyz));
        float _4345 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2335 = dot(vec3(_681, _682, _683), vec3(_2328, _2329, _2330));
        float _4356 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2339 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2328, _2329, _2330));
        float _4367 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2343 = _2320 * _2320;
        float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
        float _2354 = exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0);
        float _2361 = 1.0 - _2320;
        float _2371 = (0.5 / (((_2100 * ((_2334 * _2361) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2361) + _2320) * _2334))) * _2334;
        float _4378 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2373 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
        float _2374 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2295 = (((((_2354 * _2122) + _844) * cbLight._m0[_2305].x) * _2373) * _2374) + _2231;
        _2297 = (((((_2354 * _2124) + _846) * cbLight._m0[_2305].y) * _2373) * _2374) + _2232;
        _2299 = (((((_2354 * _2125) + _847) * cbLight._m0[_2305].z) * _2373) * _2374) + _2233;
    }
    float _2409;
    float _2411;
    float _2413;
    if (_2026)
    {
        _2409 = _2295;
        _2411 = _2297;
        _2413 = _2299;
    }
    else
    {
        uint _2420 = _1934 + 3u;
        uint _2424 = _1934 + 11u;
        float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _684) * 0.949999988079071044921875);
        float _2439 = _2438 * _2438;
        float _2440 = cbLight._m0[_2420].x + _761;
        float _2441 = cbLight._m0[_2420].y + _762;
        float _2442 = cbLight._m0[_2420].z + _763;
        float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
        float _2447 = _2446 * _2440;
        float _2448 = _2446 * _2441;
        float _2449 = _2446 * _2442;
        float _2450 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2420].xyz));
        float _4394 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2454 = dot(vec3(_681, _682, _683), vec3(_2447, _2448, _2449));
        float _4405 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2458 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2447, _2448, _2449));
        float _4416 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2462 = _2439 * _2439;
        float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
        float _2473 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
        float _2480 = 1.0 - _2439;
        float _2490 = (0.5 / (((_2100 * ((_2453 * _2480) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2480) + _2439) * _2453))) * _2453;
        float _4427 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2492 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
        float _2493 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2409 = (((((_2473 * _2122) + _844) * cbLight._m0[_2424].x) * _2492) * _2493) + _2295;
        _2411 = (((((_2473 * _2124) + _846) * cbLight._m0[_2424].y) * _2492) * _2493) + _2297;
        _2413 = (((((_2473 * _2125) + _847) * cbLight._m0[_2424].z) * _2492) * _2493) + _2299;
    }
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    if (_1932.y == 0u)
    {
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2568;
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2568;
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2568;
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.x;
        uint _2595 = uint((float(_2583.y) * floor(float(uint(cbSceneParam._m0[85u].y * _782) / _2584))) + floor(float(uint(cbSceneParam._m0[85u].x * _781) / _2584)));
        float _2605 = (log2(_2571 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2606 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        uint _2609 = uint(isnan(14.0) ? _2606 : (isnan(_2606) ? 14.0 : min(_2606, 14.0)));
        uvec4 _2614 = texelFetch(g_lightClusterGridBuffer, int(((_2609 << 2u) + (_2595 << 6u)) >> 2u));
        uint _2615 = _2614.x;
        uint _2616 = _2583.z;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        if (((((1u << ((_2616 >> 4u) & 15u)) + 4294967295u) & _2615) == 0u) || ((_2616 & 240u) == 0u))
        {
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
        }
        else
        {
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            uint _2875 = 0u;
            uint _2884;
            bool _2885;
            for (;;)
            {
                _2884 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_2875 << 2u)) >> 2u)).x;
                _2885 = _2884 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2885)
                {
                    frontier_phi_66_pred = _2869;
                    frontier_phi_66_pred_1 = _2874;
                    frontier_phi_66_pred_2 = _2873;
                    frontier_phi_66_pred_3 = _2872;
                    frontier_phi_66_pred_4 = _2871;
                    frontier_phi_66_pred_5 = _2870;
                }
                else
                {
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    uint _3020;
                    _3014 = _2869;
                    _3015 = _2870;
                    _3016 = _2871;
                    _3017 = _2872;
                    _3018 = _2873;
                    _3019 = _2874;
                    _3020 = _2884;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    for (;;)
                    {
                        uint _3024 = uint(findLSB(_3020)) + (_2875 << 5u);
                        uint _3021 = (_3020 + 4294967295u) & _3020;
                        uint _3026 = _3024 * 48u;
                        vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 3u)).x));
                        uint _3046 = (_3024 * 48u) + 4u;
                        vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 3u)).x));
                        uint _3065 = (_3024 * 48u) + 8u;
                        vec3 _3076 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x));
                        float _3080 = _3040.x - _2569;
                        float _3081 = _3040.y - _2570;
                        float _3082 = _3040.z - _2571;
                        float _3083 = dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082));
                        float _3086 = inversesqrt(_3083);
                        float _3087 = _3086 * _3080;
                        float _3088 = _3086 * _3081;
                        float _3089 = _3086 * _3082;
                        float _3090 = dot(vec3(_800, _803, _806), vec3(_3087, _3088, _3089));
                        float _3095 = 1.0 - (_3083 * _3040.w);
                        float _4453 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3096 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3097 = sqrt(_3083) * _3059.w;
                        float _3100 = 1.39999997615814208984375 / (_3097 + 1.39999997615814208984375);
                        float _3101 = _3100 * _3100;
                        float _3104 = ((1.0 - _3101) * _3090) + _3101;
                        float _3107 = _3097 * _3097;
                        float _3111 = ((isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0))) * _3096) / ((_3107 * 0.699999988079071044921875) + 1.0);
                        float _3115 = (-0.0) - _2569;
                        float _3116 = (-0.0) - _2570;
                        float _3117 = (-0.0) - _2571;
                        float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3132 = exp2(log2(1.0 / ((_3107 * 3.5) + 5.0)) * 0.25);
                        float _3133 = 1.0 - _875;
                        float _3140 = sqrt(1.0 - ((1.0 - (_3133 * _3133)) * (1.0 - (_3132 * _3132))));
                        float _3141 = _3140 * _3140;
                        float _3142 = _3141 * _3141;
                        float _3143 = _3122 + _3087;
                        float _3144 = _3123 + _3088;
                        float _3145 = _3124 + _3089;
                        float _3149 = inversesqrt(dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145)));
                        float _3153 = dot(vec3(_800, _803, _806), vec3(_3122, _3123, _3124));
                        float _4469 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3156 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3157 = dot(vec3(_800, _803, _806), vec3(_3149 * _3143, _3149 * _3144, _3149 * _3145));
                        float _4480 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3160 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3164 = ((_3160 * _3160) * (_3142 + (-1.0))) + 1.0;
                        float _3165 = _3100 * _3141;
                        float _3166 = _3165 * _3165;
                        float _3169 = ((1.0 - _3166) * _3090) + _3166;
                        float _4491 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3170 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3171 = 1.0 - _3141;
                        float _3181 = (0.5 / (((_3170 * ((_3156 * _3171) + _3141)) + 9.9999999392252902907785028219223e-09) + (((_3170 * _3171) + _3141) * _3156))) * _3170;
                        float _4502 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3192 = (((_3142 * 3.1415927410125732421875) * (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) / ((_3164 * _3164) * ((_3107 * 2.1991131305694580078125) + 3.141590118408203125))) * _3096;
                        _2944 = (_3111 * _3059.x) + _3017;
                        _2945 = (_3111 * _3059.y) + _3018;
                        _2946 = (_3111 * _3059.z) + _3019;
                        _2941 = (_3192 * _3076.x) + _3014;
                        _2942 = (_3192 * _3076.y) + _3015;
                        _2943 = (_3192 * _3076.z) + _3016;
                        if (_3021 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3014 = _2941;
                            _3015 = _2942;
                            _3016 = _2943;
                            _3017 = _2944;
                            _3018 = _2945;
                            _3019 = _2946;
                            _3020 = _3021;
                        }
                    }
                    frontier_phi_66_pred = _2941;
                    frontier_phi_66_pred_1 = _2946;
                    frontier_phi_66_pred_2 = _2945;
                    frontier_phi_66_pred_3 = _2944;
                    frontier_phi_66_pred_4 = _2943;
                    frontier_phi_66_pred_5 = _2942;
                }
                _2717 = frontier_phi_66_pred;
                _2727 = frontier_phi_66_pred_1;
                _2725 = frontier_phi_66_pred_2;
                _2723 = frontier_phi_66_pred_3;
                _2721 = frontier_phi_66_pred_4;
                _2719 = frontier_phi_66_pred_5;
                uint _2876 = _2875 + 1u;
                if (_2876 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2869 = _2717;
                    _2870 = _2719;
                    _2871 = _2721;
                    _2872 = _2723;
                    _2873 = _2725;
                    _2874 = _2727;
                    _2875 = _2876;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
        }
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.z;
        uint _2733 = (_2731 >> 8u) & 15u;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        if (((4294967295u << _2733) & _2615) == 0u)
        {
            _2837 = _2716;
            _2839 = _2718;
            _2841 = _2720;
            _2843 = _2722;
            _2845 = _2724;
            _2847 = _2726;
        }
        else
        {
            float _2862 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
            float _2863 = _2862 * _2569;
            float _2864 = _2862 * _2570;
            float _2865 = _2862 * _2571;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2733 < ((_2731 >> 12u) & 15u))
            {
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2848;
                float _2997 = _2716;
                float _2998 = _2718;
                float _2999 = _2720;
                float _3000 = _2722;
                float _3001 = _2724;
                float _3002 = _2726;
                uint _3003 = _2733;
                uint _3012;
                bool _3013;
                for (;;)
                {
                    _3012 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_3003 << 2u)) >> 2u)).x;
                    _3013 = _3012 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3013)
                    {
                        frontier_phi_77_pred = _3002;
                        frontier_phi_77_pred_1 = _3001;
                        frontier_phi_77_pred_2 = _3000;
                        frontier_phi_77_pred_3 = _2999;
                        frontier_phi_77_pred_4 = _2998;
                        frontier_phi_77_pred_5 = _2997;
                    }
                    else
                    {
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3219 = _2997;
                        float _3220 = _2998;
                        float _3221 = _2999;
                        float _3222 = _3000;
                        float _3223 = _3001;
                        float _3224 = _3002;
                        uint _3225 = _3012;
                        uint _3226;
                        vec4 _3251;
                        float _3252;
                        vec4 _3267;
                        vec3 _3279;
                        vec4 _3294;
                        vec4 _3309;
                        float _3356;
                        bool _3357;
                        for (;;)
                        {
                            uint _3236 = ((_3003 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3225));
                            _3226 = (_3225 + 4294967295u) & _3225;
                            uint _3238 = _3236 * 40u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            _3252 = _3251.w;
                            uint _3254 = (_3236 * 40u) + 4u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3269 = (_3236 * 40u) + 8u;
                            _3279 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x));
                            uint _3281 = (_3236 * 40u) + 16u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3296 = (_3236 * 40u) + 20u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3312 = (_3236 * 40u) + 24u;
                            vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3331 = (_3236 * 40u) + 28u;
                            vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            _3356 = fma(_2571, _3344.z, fma(_2570, _3344.y, _3344.x * _2569)) + _3344.w;
                            _3357 = !((fma(_2571, _3325.z, fma(_2570, _3325.y, _3325.x * _2569)) + _3325.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3357)
                            {
                                float _3384 = _3251.x - _2569;
                                float _3385 = _3251.y - _2570;
                                float _3386 = _3251.z - _2571;
                                float _3387 = dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386));
                                float _3390 = inversesqrt(_3387);
                                float _3391 = _3390 * _3384;
                                float _3392 = _3390 * _3385;
                                float _3393 = _3390 * _3386;
                                float _3397 = 1.0 - (_3387 / (_3252 * _3252));
                                float _4513 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3398 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3402 = sqrt(_3387) * _3267.w;
                                float _3404 = 1.39999997615814208984375 / (_3402 + 1.39999997615814208984375);
                                float _3405 = _3404 * _3404;
                                float _3408 = ((1.0 - _3405) * dot(vec3(_3391, _3392, _3393), vec3(_800, _803, _806))) + _3405;
                                float _3411 = _3402 * _3402;
                                float _3415 = (fma(_2571, _3294.z, fma(_2570, _3294.y, _3294.x * _2569)) + _3294.w) / _3356;
                                float _3416 = (fma(_2571, _3309.z, fma(_2570, _3309.y, _3309.x * _2569)) + _3309.w) / _3356;
                                float _3420 = 1.0 - dot(vec2(_3415, _3416), vec2(_3415, _3416));
                                float _4529 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3421 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3422 = _3421 * (((isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0))) * _3398) / ((_3411 * 0.699999988079071044921875) + 1.0));
                                float _3434 = exp2(log2(1.0 / ((_3411 * 3.5) + 5.0)) * 0.25);
                                float _3435 = 1.0 - _875;
                                float _3442 = sqrt(1.0 - ((1.0 - (_3435 * _3435)) * (1.0 - (_3434 * _3434))));
                                float _3443 = _3442 * _3442;
                                float _3444 = _3443 * _3443;
                                float _3445 = _3391 - _2863;
                                float _3446 = _3392 - _2864;
                                float _3447 = _3393 - _2865;
                                float _3451 = inversesqrt(dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447)));
                                float _3455 = dot(vec3(_800, _803, _806), vec3((-0.0) - _2863, (-0.0) - _2864, (-0.0) - _2865));
                                float _4540 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3458 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3459 = dot(vec3(_800, _803, _806), vec3(_3451 * _3445, _3451 * _3446, _3451 * _3447));
                                float _4551 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3462 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3466 = ((_3462 * _3462) * (_3444 + (-1.0))) + 1.0;
                                float _3467 = _3404 * _3443;
                                float _3468 = _3467 * _3467;
                                float _3474 = ((1.0 - _3468) * dot(vec3(_800, _803, _806), vec3(_3391, _3392, _3393))) + _3468;
                                float _4562 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3476 = 1.0 - _3443;
                                float _3486 = (0.5 / (((_3475 * ((_3458 * _3476) + _3443)) + 9.9999999392252902907785028219223e-09) + (((_3475 * _3476) + _3443) * _3458))) * _3475;
                                float _4573 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3496 = (_3421 * _3398) * (((_3444 * 3.1415927410125732421875) * (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) / ((_3466 * _3466) * ((_3411 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3422 * _3267.y;
                                frontier_phi_83_pred_1 = _3422 * _3267.x;
                                frontier_phi_83_pred_2 = _3496 * _3279.z;
                                frontier_phi_83_pred_3 = _3496 * _3279.y;
                                frontier_phi_83_pred_4 = _3496 * _3279.x;
                                frontier_phi_83_pred_5 = _3422 * _3267.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3504 = frontier_phi_83_pred;
                            _3503 = frontier_phi_83_pred_1;
                            _3502 = frontier_phi_83_pred_2;
                            _3501 = frontier_phi_83_pred_3;
                            _3500 = frontier_phi_83_pred_4;
                            _3505 = frontier_phi_83_pred_5;
                            _3209 = _3503 + _3222;
                            _3210 = _3504 + _3223;
                            _3211 = _3505 + _3224;
                            _3206 = _3500 + _3219;
                            _3207 = _3501 + _3220;
                            _3208 = _3502 + _3221;
                            if (_3226 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3226;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3211;
                        frontier_phi_77_pred_1 = _3210;
                        frontier_phi_77_pred_2 = _3209;
                        frontier_phi_77_pred_3 = _3208;
                        frontier_phi_77_pred_4 = _3207;
                        frontier_phi_77_pred_5 = _3206;
                    }
                    _2848 = frontier_phi_77_pred;
                    _2846 = frontier_phi_77_pred_1;
                    _2844 = frontier_phi_77_pred_2;
                    _2842 = frontier_phi_77_pred_3;
                    _2840 = frontier_phi_77_pred_4;
                    _2838 = frontier_phi_77_pred_5;
                    uint _3004 = _3003 + 1u;
                    if (_3004 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2997 = _2838;
                        _2998 = _2840;
                        _2999 = _2842;
                        _3000 = _2844;
                        _3001 = _2846;
                        _3002 = _2848;
                        _3003 = _3004;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2842;
                frontier_phi_58_59_ladder_1 = _2848;
                frontier_phi_58_59_ladder_2 = _2846;
                frontier_phi_58_59_ladder_3 = _2844;
                frontier_phi_58_59_ladder_4 = _2840;
                frontier_phi_58_59_ladder_5 = _2838;
            }
            else
            {
                frontier_phi_58_59_ladder = _2720;
                frontier_phi_58_59_ladder_1 = _2726;
                frontier_phi_58_59_ladder_2 = _2724;
                frontier_phi_58_59_ladder_3 = _2722;
                frontier_phi_58_59_ladder_4 = _2718;
                frontier_phi_58_59_ladder_5 = _2716;
            }
            _2837 = frontier_phi_58_59_ladder_5;
            _2839 = frontier_phi_58_59_ladder_4;
            _2841 = frontier_phi_58_59_ladder;
            _2843 = frontier_phi_58_59_ladder_3;
            _2845 = frontier_phi_58_59_ladder_2;
            _2847 = frontier_phi_58_59_ladder_1;
        }
        float _2852 = isnan(1.0) ? _859 : (isnan(_859) ? 1.0 : min(_859, 1.0));
        _2628 = (_2852 * _2843) + _2064;
        _2630 = (_2852 * _2845) + _2066;
        _2632 = (_2852 * _2847) + _2068;
        _2634 = ((_2837 * _844) * _2852) + _2409;
        _2636 = ((_2839 * _846) * _2852) + _2411;
        _2638 = ((_2841 * _847) * _2852) + _2413;
    }
    else
    {
        _2628 = _2064;
        _2630 = _2066;
        _2632 = _2068;
        _2634 = _2409;
        _2636 = _2411;
        _2638 = _2413;
    }
    float _4589 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4600 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4611 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _2655 = ((isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2628 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _859))) + ((_2634 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    float _2656 = ((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2630 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _859))) + ((_2636 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    float _2657 = ((isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2632 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _859))) + ((_2638 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    uint _2658 = _819 + 6u;
    float _2666 = _781 / cbSceneParam._m0[86u].x;
    float _2667 = _782 / cbSceneParam._m0[86u].y;
    vec4 _2681 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2666, _2667, (log2((isnan(cbSceneParam._m0[77u].w) ? _704 : (isnan(_704) ? cbSceneParam._m0[77u].w : min(_704, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2683 = _2681.x;
    float _2684 = _2681.y;
    float _2685 = _2681.z;
    float _2686 = _2681.w;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    if (_704 > cbSceneParam._m0[78u].w)
    {
        float _2741 = isnan(_704) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _704 : min(cbSceneParam._m0[80u].w, _704));
        float _2742 = _2741 / _704;
        float _2753 = _2742 * _754;
        float _2754 = _755 * _2742;
        float _2755 = (-0.0) - _2754;
        float _2757 = _2742 * _756;
        float _2759 = (cbSceneParam._m0[77u].w * _2755) / _2741;
        float _2760 = _2759 + cbSceneParam._m0[79u].w;
        float _2761 = cbSceneParam._m0[79u].w - _2754;
        float _2767 = sqrt(((_2753 * _2753) + (_2754 * _2754)) + (_2757 * _2757));
        float _2770 = (1.0 - (cbSceneParam._m0[77u].w / _2741)) * _2767;
        float _2775 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2777 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2954;
        if (abs((_2755 - _2759) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2954 = ((((_2760 > 0.0) ? exp2(_2775 * _2760) : (2.0 - exp2(_2777 * _2760))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2770;
        }
        else
        {
            float _2898 = 1.0 / cbSceneParam._m0[80u].x;
            float _2899 = isnan(_2761) ? _2760 : (isnan(_2760) ? _2761 : max(_2760, _2761));
            float _2900 = isnan(_2761) ? _2760 : (isnan(_2760) ? _2761 : min(_2760, _2761));
            float _2909 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : min(_2899, 0.0));
            float _2910 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : min(_2900, 0.0));
            _2954 = ((abs(_2767 / _2755) * cbSceneParam._m0[80u].y) * ((((_2909 - _2910) * 2.0) - ((exp2(_2775 * (isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0)))) - exp2(_2775 * (isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0))))) * _2898)) - ((exp2(_2777 * _2909) - exp2(_2777 * _2910)) * _2898))) + (_2770 * cbSceneParam._m0[80u].z);
        }
        vec4 _2956 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2666, _2667, 1.0), 0.0);
        float _2965 = exp2((_2954 * (-1.44269502162933349609375)) * (1.0 - _2956.w));
        float _2966 = log2(_2965);
        float _2982 = log2(_2686);
        _2779 = (exp2(_2982 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].x)) * _2956.x) / cbSceneParam._m0[78u].x)) + _2683;
        _2781 = (exp2(_2982 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].y)) * _2956.y) / cbSceneParam._m0[78u].y)) + _2684;
        _2783 = (exp2(_2982 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].z)) * _2956.z) / cbSceneParam._m0[78u].z)) + _2685;
        _2785 = _2965 * _2686;
    }
    else
    {
        _2779 = _2683;
        _2781 = _2684;
        _2783 = _2685;
        _2785 = _2686;
    }
    bool _2992;
    vec4 _2795;
    vec4 _2817;
    float _2819;
    float _2823;
    float _2824;
    float _2825;
    float _2826;
    bool _2836;
    for (;;)
    {
        _2795 = cbMatDynParam._m0[0u];
        float _2797 = roundEven(_2795.y);
        bool _2798 = _2797 == 3.0;
        float _2799 = log2(_2785);
        float _2806 = exp2(_2799 * cbSceneParam._m0[78u].x) * _2655;
        float _2807 = exp2(_2799 * cbSceneParam._m0[78u].y) * _2656;
        float _2808 = exp2(_2799 * cbSceneParam._m0[78u].z) * _2657;
        float _2815 = _770 + (-0.5);
        _2817 = cbMtdParam._m0[1u];
        _2819 = _2817.y * _2815;
        float _2822 = (_2797 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2823 = _2822 * (_2798 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2779)));
        _2824 = _2822 * (_2798 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2781)));
        _2825 = _2822 * (_2798 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2783)));
        _2826 = _2815 * 0.999000012874603271484375;
        _2836 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2836)
        {
            if ((cbInstanceData._m0[_819 + 7u].x + _2826) < 0.5)
            {
                _2992 = true;
                break;
            }
        }
        uint _2933 = _820 + uint(_2795.w);
        if ((cbInstanceData._m0[_2933].w < 1.0) && ((cbInstanceData._m0[_2933].w + _2826) < 0.5))
        {
            _2992 = true;
            break;
        }
        if ((_2819 + 1.0) < _2817.x)
        {
            _2992 = true;
            break;
        }
        _2992 = false;
        break;
    }
    float _3197;
    if (_2992)
    {
        discard_state = true;
        _3197 = 0.0;
    }
    else
    {
        _3197 = cbInstanceData._m0[_2658].w;
    }
    SV_Target.x = _2823;
    SV_Target.y = _2824;
    SV_Target.z = _2825;
    SV_Target.w = _3197;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2658].w;
    discard_exit();
}


