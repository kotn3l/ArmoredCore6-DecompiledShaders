#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1400;
float _3782;
float _3783;
float _3784;
float _3785;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _268 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _268.x * cbMtdParam._m0[10u].x;
    float _275 = _268.y * cbMtdParam._m0[10u].y;
    float _276 = _268.z * cbMtdParam._m0[10u].z;
    vec4 _294 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _344 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _354 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _344)) + 1.0;
    float _3794 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _355 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _362 = (_355 * ((_294.x * cbMtdParam._m0[11u].x) - _274)) + _274;
    float _363 = (_355 * ((_294.y * cbMtdParam._m0[11u].y) - _275)) + _275;
    float _364 = (_355 * ((_294.z * cbMtdParam._m0[11u].z) - _276)) + _276;
    vec4 _382 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _413 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _344)) + 1.0;
    float _3805 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _421 = (_414 * ((_382.x * cbMtdParam._m0[12u].x) - _362)) + _362;
    float _422 = (_414 * ((_382.y * cbMtdParam._m0[12u].y) - _363)) + _363;
    float _423 = (_414 * ((_382.z * cbMtdParam._m0[12u].z) - _364)) + _364;
    vec4 _441 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _466 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _344)) + 1.0;
    float _3816 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _474 = (_467 * ((_441.x * cbMtdParam._m0[13u].x) - _421)) + _421;
    float _475 = (_467 * ((_441.y * cbMtdParam._m0[13u].y) - _422)) + _422;
    float _476 = (_467 * ((_441.z * cbMtdParam._m0[13u].z) - _423)) + _423;
    vec4 _497 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _526 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _3827 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _534 = (_527 * ((_497.x * cbMtdParam._m0[15u].x) - _474)) + _474;
    float _535 = (_527 * ((_497.y * cbMtdParam._m0[15u].y) - _475)) + _475;
    float _536 = (_527 * ((_497.z * cbMtdParam._m0[15u].z) - _476)) + _476;
    vec4 _549 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _551 = _549.x;
    float _569 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _551) * _355) + _551;
    float _587 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _569) * _414) + _569;
    float _604 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _587) * _467) + _587;
    vec4 _616 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _636 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _638 = _636.x;
    float _639 = _636.y;
    float _645 = cbMtdParam._m0[18u].y * _636.z;
    vec4 _657 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _666 = (((cbMtdParam._m0[18u].x * _657.z) - _645) * _355) + _645;
    vec4 _679 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _690 = (((cbMtdParam._m0[17u].w * _679.z) - _666) * _414) + _666;
    vec4 _703 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _712 = (((cbMtdParam._m0[17u].z * _703.z) - _690) * _467) + _690;
    vec4 _725 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _739 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_725.z * cbMtdParam._m0[19u].y) - _712)) + _712;
    vec4 _752 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _764 = ((_657.x - _638) * _355) + _638;
    float _765 = ((_657.y - _639) * _355) + _639;
    float _770 = ((_679.x - _764) * _414) + _764;
    float _771 = ((_679.y - _765) * _414) + _765;
    float _780 = ((((_703.x - _770) * _467) + _770) * 2.0) + (-1.0);
    float _781 = ((((_703.y - _771) * _467) + _771) * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _3838 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _787 = sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))));
    float _804 = (((((_752.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _780) + ((((_616.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y)) + ((((_725.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _805 = (((((_752.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _781) + ((((_616.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y)) + ((((_725.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _808 = fma(_787, _238 * NORMAL.x, fma(_805, _245 * TANGENT.x, (_231 * _223) * _804));
    float _811 = fma(_787, _238 * NORMAL.y, fma(_805, _245 * TANGENT.y, (_231 * _224) * _804));
    float _814 = fma(_787, _238 * NORMAL.z, fma(_805, _245 * TANGENT.z, (_231 * _225) * _804));
    float _818 = inversesqrt(dot(vec3(_808, _811, _814), vec3(_808, _811, _814)));
    float _819 = _818 * _808;
    float _820 = _818 * _811;
    float _821 = _818 * _814;
    float _3849 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _822 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _3871 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _3882 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _3893 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _826 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _842 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _892 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _882);
    float _893 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _882);
    float _894 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _882);
    float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
    float _899 = _892 * _898;
    float _900 = _893 * _898;
    float _901 = _894 * _898;
    vec4 _906 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _908 = _906.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1080 = sqrt(((_892 * _892) + (_893 * _893)) + (_894 * _894));
        float _1086 = (cbMatDynParam._m0[5u].x * _1080) + cbMatDynParam._m0[5u].y;
        float _3904 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1091 = (cbMatDynParam._m0[5u].z * _1080) + cbMatDynParam._m0[5u].w;
        float _3915 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) - _1087)) + _1087) < ((_908 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _919 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _920 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _938 = fma(_821, cbSceneParam._m0[5u].z, fma(_820, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _819));
    float _941 = fma(_821, cbSceneParam._m0[6u].z, fma(_820, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _819));
    float _944 = fma(_821, cbSceneParam._m0[7u].z, fma(_820, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _819));
    uint _957 = uint(roundEven(NORMAL.w)) * 13u;
    uint _958 = _957 + 9u;
    uint _959 = _958 + uint(cbMatDynParam._m0[0u].w);
    float _965 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_959].x;
    float _966 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_959].y;
    float _967 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_959].z;
    float _3926 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _971 = 1.0 - _826;
    float _972 = _968 * _971;
    float _973 = _969 * _971;
    float _974 = _970 * _971;
    float _979 = (_968 + (-0.039999999105930328369140625)) * _826;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _826;
    float _981 = (_970 + (-0.039999999105930328369140625)) * _826;
    float _982 = _979 + 0.039999999105930328369140625;
    float _984 = _980 + 0.039999999105930328369140625;
    float _985 = _981 + 0.039999999105930328369140625;
    vec4 _994 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _919, cbSceneParam._m0[86u].y * _920));
    float _997 = _994.x * TEXCOORD_5.w;
    float _998 = dot(vec3(_819, _820, _821), vec3(_899, _900, _901));
    float _1001 = _998 * 2.0;
    float _1005 = (_1001 * _819) - _899;
    float _1006 = (_1001 * _820) - _900;
    float _1007 = (_1001 * _821) - _901;
    float _1011 = abs(dot(vec3(_899, _900, _901), vec3(_819, _820, _821)));
    float _3959 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1013 = sqrt(_822);
    float _1026 = exp2((_1013 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1013 * 3.0));
    float _1032 = (1.0 - _1026) * ((_1013 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1033 = _1026 * _1013;
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1399;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1124 = fma(_1069, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061));
        float _1128 = fma(_1069, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061));
        float _1132 = fma(_1069, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061));
        float _1157 = _1061 + _819;
        float _1158 = _1065 + _820;
        float _1159 = _1069 + _821;
        float _1169 = fma(_1159, cbModelParam._m0[26u].z, fma(_1158, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1157)) - _1124;
        float _1170 = fma(_1159, cbModelParam._m0[27u].z, fma(_1158, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1157)) - _1128;
        float _1171 = fma(_1159, cbModelParam._m0[28u].z, fma(_1158, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1157)) - _1132;
        float _1175 = inversesqrt(dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171)));
        float _1188 = ((_1175 * _1169) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1124 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1175 * _1170) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1128 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1175 * _1171) / cbModelParam._m0[34u].z) + ((((((_1132 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        float _1227 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1193.x + (-0.5));
        float _1229 = _1227 * (_1193.y + (-0.5));
        float _1230 = _1227 * (_1193.z + (-0.5));
        float _1237 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1200.x + (-0.5));
        float _1239 = _1237 * (_1200.y + (-0.5));
        float _1240 = _1237 * (_1200.z + (-0.5));
        float _1247 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1207.x + (-0.5));
        float _1249 = _1247 * (_1207.y + (-0.5));
        float _1250 = _1247 * (_1207.z + (-0.5));
        float _1257 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1214.x + (-0.5));
        float _1259 = _1257 * (_1214.y + (-0.5));
        float _1260 = _1257 * (_1214.z + (-0.5));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = _1228 * 0.5;
        float _1265 = _1238 * 0.5;
        float _1266 = _1248 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1281 = (dot(vec3(_819, _820, _821), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1291 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4007 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1293 + 1.0))) + _1298) * _1261;
        float _1308 = _1229 * 0.5;
        float _1309 = _1239 * 0.5;
        float _1310 = _1249 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_819, _820, _821), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4040 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1335 + 1.0))) + _1340) * _1262;
        float _1350 = _1230 * 0.5;
        float _1351 = _1240 * 0.5;
        float _1352 = _1250 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_819, _820, _821), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4073 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1377 + 1.0))) + _1382) * _1263;
        _1399 = _1230;
        _1401 = _1229;
        _1402 = _1228;
        _1403 = _1240;
        _1404 = _1239;
        _1405 = _1238;
        _1406 = _1250;
        _1407 = _1249;
        _1408 = _1248;
        _1409 = _1263;
        _1410 = _1262;
        _1411 = _1261;
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    }
    else
    {
        _1399 = _1400;
        _1401 = _1400;
        _1402 = _1400;
        _1403 = _1400;
        _1404 = _1400;
        _1405 = _1400;
        _1406 = _1400;
        _1407 = _1400;
        _1408 = _1400;
        _1409 = _1400;
        _1410 = _1400;
        _1411 = _1400;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1443 = fma(_1069, cbModelParam._m0[30u].z, fma(_1065, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061));
        float _1447 = fma(_1069, cbModelParam._m0[31u].z, fma(_1065, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061));
        float _1451 = fma(_1069, cbModelParam._m0[32u].z, fma(_1065, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061));
        float _1474 = _1061 + _819;
        float _1475 = _1065 + _820;
        float _1476 = _1069 + _821;
        float _1486 = fma(_1476, cbModelParam._m0[30u].z, fma(_1475, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1474)) - _1443;
        float _1487 = fma(_1476, cbModelParam._m0[31u].z, fma(_1475, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1474)) - _1447;
        float _1488 = fma(_1476, cbModelParam._m0[32u].z, fma(_1475, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1474)) - _1451;
        float _1492 = inversesqrt(dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488)));
        float _1505 = ((_1492 * _1486) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1443 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1492 * _1487) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1447 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1492 * _1488) / cbModelParam._m0[35u].z) + ((((((_1451 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        float _1542 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1509.x + (-0.5));
        float _1544 = _1542 * (_1509.y + (-0.5));
        float _1545 = _1542 * (_1509.z + (-0.5));
        float _1552 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1516.x + (-0.5));
        float _1554 = _1552 * (_1516.y + (-0.5));
        float _1555 = _1552 * (_1516.z + (-0.5));
        float _1562 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1523.x + (-0.5));
        float _1564 = _1562 * (_1523.y + (-0.5));
        float _1565 = _1562 * (_1523.z + (-0.5));
        float _1572 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1530.x + (-0.5));
        float _1574 = _1572 * (_1530.y + (-0.5));
        float _1575 = _1572 * (_1530.z + (-0.5));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = _1543 * 0.5;
        float _1580 = _1553 * 0.5;
        float _1581 = _1563 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_819, _820, _821), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4136 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1606 + 1.0))) + _1611) * _1576;
        float _1621 = _1544 * 0.5;
        float _1622 = _1554 * 0.5;
        float _1623 = _1564 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_819, _820, _821), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4169 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1648 + 1.0))) + _1653) * _1577;
        float _1663 = _1545 * 0.5;
        float _1664 = _1555 * 0.5;
        float _1665 = _1565 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1679 = (dot(vec3(_819, _820, _821), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1688 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4202 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1690 + 1.0))) + _1695) * _1578;
        _1712 = _1545;
        _1713 = _1544;
        _1714 = _1543;
        _1715 = _1555;
        _1716 = _1554;
        _1717 = _1553;
        _1718 = _1565;
        _1719 = _1564;
        _1720 = _1563;
        _1721 = _1578;
        _1722 = _1577;
        _1723 = _1576;
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
    }
    else
    {
        _1712 = _1400;
        _1713 = _1400;
        _1714 = _1400;
        _1715 = _1400;
        _1716 = _1400;
        _1717 = _1400;
        _1718 = _1400;
        _1719 = _1400;
        _1720 = _1400;
        _1721 = _1400;
        _1722 = _1400;
        _1723 = _1400;
        _1724 = 0.0;
        _1725 = 0.0;
        _1726 = 0.0;
    }
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1412)) + _1412;
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1413)) + _1413;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1414)) + _1414;
    float _1759 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1737, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1762 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1737, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1765 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1737, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1736));
    float _1780 = _1005 * 0.5;
    float _1781 = _1006 * 0.5;
    float _1782 = _1007 * 0.5;
    float _1783 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1786 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1789 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1823;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1796 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1399, _1403, _1406, _1409));
        float _1800 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1401, _1404, _1407, _1410));
        float _1804 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1811 = dot(vec4(cbModelParam._m0[39u]), vec4(_1780, _1781, _1782, 1.0));
        _1823 = dot(vec3(isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1811) ? 0.0 : (isnan(0.0) ? _1811 : max(0.0, _1811))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1823 = 1.0;
    }
    float _1834;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1825 = dot(vec4(cbModelParam._m0[40u]), vec4(_1780, _1781, _1782, 1.0));
        _1834 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1825) ? 0.0 : (isnan(0.0) ? _1825 : max(0.0, _1825))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1834 = 1.0;
    }
    float _1838 = (_1834 * cbModelParam._m0[1u].x) + (_1823 * (1.0 - cbModelParam._m0[1u].x));
    float _1848 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _822);
    float _1849 = isnan(_1848) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1848 : min(cbModelParam._m0[25u].z, _1848));
    float _1929;
    float _1931;
    float _1933;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1896 = fma(_1069, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061)) + cbModelParam._m0[13u].w;
        float _1900 = fma(_1069, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061)) + cbModelParam._m0[14u].w;
        float _1904 = fma(_1069, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061)) + cbModelParam._m0[15u].w;
        float _1907 = fma(_1007, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005));
        float _1910 = fma(_1007, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005));
        float _1913 = fma(_1007, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005));
        float _1941;
        if (_1907 > 0.0)
        {
            _1941 = abs((1.0 - _1896) / _1907);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1896 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1941 = frontier_phi_17_15_ladder;
        }
        float _2144;
        if (_1910 > 0.0)
        {
            _2144 = abs((1.0 - _1900) / _1910);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1900 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2144 = frontier_phi_26_22_ladder;
        }
        float _2398;
        if (_1913 > 0.0)
        {
            _2398 = abs((1.0 - _1904) / _1913);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1904 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2398 = frontier_phi_38_33_ladder;
        }
        float _2400 = isnan(_2144) ? _1941 : (isnan(_1941) ? _2144 : min(_1941, _2144));
        float _2401 = isnan(_2398) ? _2400 : (isnan(_2400) ? _2398 : min(_2400, _2398));
        float _2405 = (_2401 * _1907) + _1896;
        float _2406 = (_2401 * _1910) + _1900;
        float _2407 = (_2401 * _1913) + _1904;
        float _2408 = _2401 * 9.9999997473787516355514526367188e-05;
        float _2410 = (-1.0) - _2408;
        float _2412 = _2408 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2407 > _2412) || ((_2407 < _2410) || ((_2406 > _2412) || ((_2406 < _2410) || ((_2405 < _2410) || (_2405 > _2412))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2407, cbModelParam._m0[9u].z, fma(_2406, cbModelParam._m0[9u].y, _2405 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2407, cbModelParam._m0[10u].z, fma(_2406, cbModelParam._m0[10u].y, _2405 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2407, cbModelParam._m0[11u].z, fma(_2406, cbModelParam._m0[11u].y, _2405 * cbModelParam._m0[11u].x))), _1849);
            frontier_phi_16_38_ladder = _2535.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2535.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2535.x * cbModelParam._m0[1u].y;
        }
        _1929 = frontier_phi_16_38_ladder_2;
        _1931 = frontier_phi_16_38_ladder_1;
        _1933 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1005, _1006, _1007), _1849);
        _1929 = _1917.x * cbModelParam._m0[1u].y;
        _1931 = _1917.y * cbModelParam._m0[1u].y;
        _1933 = _1917.z * cbModelParam._m0[1u].y;
    }
    float _1937 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _822);
    float _1938 = isnan(_1937) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1937 : min(cbModelParam._m0[25u].w, _1937));
    float _2027;
    float _2029;
    float _2031;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1991 = fma(_1069, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061)) + cbModelParam._m0[21u].w;
        float _1995 = fma(_1069, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061)) + cbModelParam._m0[22u].w;
        float _1999 = fma(_1069, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061)) + cbModelParam._m0[23u].w;
        float _2002 = fma(_1007, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005));
        float _2005 = fma(_1007, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005));
        float _2008 = fma(_1007, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005));
        float _2149;
        if (_2002 > 0.0)
        {
            _2149 = abs((1.0 - _1991) / _2002);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1991 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2149 = frontier_phi_28_24_ladder;
        }
        float _2425;
        if (_2005 > 0.0)
        {
            _2425 = abs((1.0 - _1995) / _2005);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1995 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2425 = frontier_phi_40_35_ladder;
        }
        float _2638;
        if (_2008 > 0.0)
        {
            _2638 = abs((1.0 - _1999) / _2008);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1999 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2638 = frontier_phi_49_46_ladder;
        }
        float _2640 = isnan(_2425) ? _2149 : (isnan(_2149) ? _2425 : min(_2149, _2425));
        float _2641 = isnan(_2638) ? _2640 : (isnan(_2640) ? _2638 : min(_2640, _2638));
        float _2645 = (_2641 * _2002) + _1991;
        float _2646 = (_2641 * _2005) + _1995;
        float _2647 = (_2641 * _2008) + _1999;
        float _2648 = _2641 * 9.9999997473787516355514526367188e-05;
        float _2649 = (-1.0) - _2648;
        float _2651 = _2648 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2647 > _2651) || ((_2647 < _2649) || ((_2646 > _2651) || ((_2646 < _2649) || ((_2645 < _2649) || (_2645 > _2651))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2647, cbModelParam._m0[17u].z, fma(_2646, cbModelParam._m0[17u].y, _2645 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2647, cbModelParam._m0[18u].z, fma(_2646, cbModelParam._m0[18u].y, _2645 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2647, cbModelParam._m0[19u].z, fma(_2646, cbModelParam._m0[19u].y, _2645 * cbModelParam._m0[19u].x))), _1938);
            frontier_phi_25_49_ladder = _2846.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2846.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2846.x * cbModelParam._m0[1u].z;
        }
        _2027 = frontier_phi_25_49_ladder_2;
        _2029 = frontier_phi_25_49_ladder_1;
        _2031 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2011 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1005, _1006, _1007), _1938);
        _2027 = _2011.x * cbModelParam._m0[1u].z;
        _2029 = _2011.y * cbModelParam._m0[1u].z;
        _2031 = _2011.z * cbModelParam._m0[1u].z;
    }
    float _2044 = (((_1032 * _982) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2027 - _1929)) + _1929);
    float _2046 = (((_1032 * _984) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2029 - _1931)) + _1931);
    float _2048 = (((_1032 * _985) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2031 - _1933)) + _1933);
    float _2051 = fma(_2048, cbSceneParam._m0[89u].z, fma(_2046, cbSceneParam._m0[89u].y, _2044 * cbSceneParam._m0[89u].x));
    float _2054 = fma(_2048, cbSceneParam._m0[90u].z, fma(_2046, cbSceneParam._m0[90u].y, _2044 * cbSceneParam._m0[90u].x));
    float _2057 = fma(_2048, cbSceneParam._m0[91u].z, fma(_2046, cbSceneParam._m0[91u].y, _2044 * cbSceneParam._m0[91u].x));
    uvec4 _2067 = floatBitsToUint(cbInstanceData._m0[_957 + 5u]);
    uint _2069 = _2067.x * 14u;
    uint _2070 = _2069 + 13u;
    float _2077 = _997 + (-1.0);
    float _2082 = (cbLight._m0[_2070].x * _2077) + 1.0;
    float _2083 = (cbLight._m0[_2070].y * _2077) + 1.0;
    float _2084 = (cbLight._m0[_2070].z * _2077) + 1.0;
    float _2085 = (cbLight._m0[_2070].w * _2077) + 1.0;
    uint _2086 = _2069 + 5u;
    float _2092 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
    uint _2096 = _2069 + 4u;
    float _2103 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
    uint _2107 = _2069 | 1u;
    float _2118 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_819, _820, _821));
    float _2121 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_819, _820, _821));
    float _4338 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _4349 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2126 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 0.3183098733425140380859375;
    float _2128 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.3183098733425140380859375;
    float _2135 = ((cbLight._m0[_2086].x * _2092) * _2128) + ((cbLight._m0[_2096].x * _2103) * _2126);
    float _2136 = ((_2092 * cbLight._m0[_2086].y) * _2128) + ((_2103 * cbLight._m0[_2096].y) * _2126);
    float _2137 = ((_2092 * cbLight._m0[_2086].z) * _2128) + ((_2103 * cbLight._m0[_2096].z) * _2126);
    uvec4 _2141 = floatBitsToUint(cbLight._m0[_2069 + 12u]);
    bool _2143 = _2141.x == 0u;
    float _2154;
    float _2156;
    float _2158;
    if (_2143)
    {
        _2154 = _2135;
        _2156 = _2136;
        _2158 = _2137;
    }
    else
    {
        uint _2162 = _2069 + 6u;
        float _2178 = (dot(vec3(cbLight._m0[_2069 + 2u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2179 = _2178 * _2178;
        float _4360 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2180 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2181 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2154 = (((cbLight._m0[_2162].x * 0.3183098733425140380859375) * _2180) * _2181) + _2135;
        _2156 = (((cbLight._m0[_2162].y * 0.3183098733425140380859375) * _2180) * _2181) + _2136;
        _2158 = (((cbLight._m0[_2162].z * 0.3183098733425140380859375) * _2180) * _2181) + _2137;
    }
    bool _2161 = _2141.y == 0u;
    float _2199;
    float _2201;
    float _2203;
    if (_2161)
    {
        _2199 = _2154;
        _2201 = _2156;
        _2203 = _2158;
    }
    else
    {
        uint _2369 = _2069 + 7u;
        float _2385 = (dot(vec3(cbLight._m0[_2069 + 3u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2386 = _2385 * _2385;
        float _4376 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2387 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2388 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2199 = (((cbLight._m0[_2369].x * 0.3183098733425140380859375) * _2387) * _2388) + _2154;
        _2201 = (((cbLight._m0[_2369].y * 0.3183098733425140380859375) * _2387) * _2388) + _2156;
        _2203 = (((cbLight._m0[_2369].z * 0.3183098733425140380859375) * _2387) * _2388) + _2158;
    }
    uint _2206 = _2069 + 8u;
    float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _822) * 0.949999988079071044921875);
    float _2220 = _2219 * _2219;
    float _2221 = cbLight._m0[_2069].x + _899;
    float _2222 = cbLight._m0[_2069].y + _900;
    float _2223 = cbLight._m0[_2069].z + _901;
    float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
    float _2228 = _2227 * _2221;
    float _2229 = _2227 * _2222;
    float _2230 = _2227 * _2223;
    float _2231 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2069].xyz));
    float _4392 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _4403 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2235 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2236 = dot(vec3(_819, _820, _821), vec3(_2228, _2229, _2230));
    float _4414 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2228, _2229, _2230));
    float _4425 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2220 * _2220;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0);
    float _2257 = 0.959999978542327880859375 - _979;
    float _2259 = 0.959999978542327880859375 - _980;
    float _2260 = 0.959999978542327880859375 - _981;
    float _2267 = 1.0 - _2220;
    float _2278 = (0.5 / (((_2235 * ((_2234 * _2267) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2267) + _2220) * _2234))) * _2234;
    float _4436 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2280 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    uint _2291 = _2069 + 9u;
    float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _822) * 0.949999988079071044921875);
    float _2303 = _2302 * _2302;
    float _2304 = cbLight._m0[_2107].x + _899;
    float _2305 = cbLight._m0[_2107].y + _900;
    float _2306 = cbLight._m0[_2107].z + _901;
    float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
    float _2311 = _2310 * _2304;
    float _2312 = _2310 * _2305;
    float _2313 = _2310 * _2306;
    float _2314 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2107].xyz));
    float _4447 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2318 = dot(vec3(_819, _820, _821), vec3(_2311, _2312, _2313));
    float _4458 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2311, _2312, _2313));
    float _4469 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2303 * _2303;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2337 = exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0);
    float _2344 = 1.0 - _2303;
    float _2354 = (0.5 / (((_2235 * ((_2317 * _2344) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2344) + _2303) * _2317))) * _2317;
    float _4480 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2356 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    float _2366 = (((((_2337 * _2257) + _982) * cbLight._m0[_2291].x) * _2356) * _2092) + (((((_2256 * _2257) + _982) * cbLight._m0[_2206].x) * _2280) * _2103);
    float _2367 = (((((_2337 * _2259) + _984) * cbLight._m0[_2291].y) * _2356) * _2092) + (((((_2256 * _2259) + _984) * cbLight._m0[_2206].y) * _2280) * _2103);
    float _2368 = (((((_2337 * _2260) + _985) * cbLight._m0[_2291].z) * _2356) * _2092) + (((((_2256 * _2260) + _985) * cbLight._m0[_2206].z) * _2280) * _2103);
    float _2430;
    float _2432;
    float _2434;
    if (_2143)
    {
        _2430 = _2366;
        _2432 = _2367;
        _2434 = _2368;
    }
    else
    {
        uint _2436 = _2069 + 2u;
        uint _2440 = _2069 + 10u;
        float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _822) * 0.949999988079071044921875);
        float _2455 = _2454 * _2454;
        float _2456 = cbLight._m0[_2436].x + _899;
        float _2457 = cbLight._m0[_2436].y + _900;
        float _2458 = cbLight._m0[_2436].z + _901;
        float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
        float _2463 = _2462 * _2456;
        float _2464 = _2462 * _2457;
        float _2465 = _2462 * _2458;
        float _2466 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2436].xyz));
        float _4491 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2470 = dot(vec3(_819, _820, _821), vec3(_2463, _2464, _2465));
        float _4502 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2474 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2463, _2464, _2465));
        float _4513 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2478 = _2455 * _2455;
        float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
        float _2489 = exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0);
        float _2496 = 1.0 - _2455;
        float _2506 = (0.5 / (((_2235 * ((_2469 * _2496) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2496) + _2455) * _2469))) * _2469;
        float _4524 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2508 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
        float _2509 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2430 = (((((_2489 * _2257) + _982) * cbLight._m0[_2440].x) * _2508) * _2509) + _2366;
        _2432 = (((((_2489 * _2259) + _984) * cbLight._m0[_2440].y) * _2508) * _2509) + _2367;
        _2434 = (((((_2489 * _2260) + _985) * cbLight._m0[_2440].z) * _2508) * _2509) + _2368;
    }
    float _2544;
    float _2546;
    float _2548;
    if (_2161)
    {
        _2544 = _2430;
        _2546 = _2432;
        _2548 = _2434;
    }
    else
    {
        uint _2555 = _2069 + 3u;
        uint _2559 = _2069 + 11u;
        float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2555].w)) * _822) * 0.949999988079071044921875);
        float _2574 = _2573 * _2573;
        float _2575 = cbLight._m0[_2555].x + _899;
        float _2576 = cbLight._m0[_2555].y + _900;
        float _2577 = cbLight._m0[_2555].z + _901;
        float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
        float _2582 = _2581 * _2575;
        float _2583 = _2581 * _2576;
        float _2584 = _2581 * _2577;
        float _2585 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2555].xyz));
        float _4540 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2589 = dot(vec3(_819, _820, _821), vec3(_2582, _2583, _2584));
        float _4551 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2593 = dot(vec3(cbLight._m0[_2555].xyz), vec3(_2582, _2583, _2584));
        float _4562 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2597 = _2574 * _2574;
        float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
        float _2608 = exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0);
        float _2615 = 1.0 - _2574;
        float _2625 = (0.5 / (((_2235 * ((_2588 * _2615) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2615) + _2574) * _2588))) * _2588;
        float _4573 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2627 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
        float _2628 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2544 = (((((_2608 * _2257) + _982) * cbLight._m0[_2559].x) * _2627) * _2628) + _2430;
        _2546 = (((((_2608 * _2259) + _984) * cbLight._m0[_2559].y) * _2627) * _2628) + _2432;
        _2548 = (((((_2608 * _2260) + _985) * cbLight._m0[_2559].z) * _2627) * _2628) + _2434;
    }
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    if (_2067.y == 0u)
    {
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2704 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2703;
        float _2705 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2703;
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2703;
        uvec4 _2718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2719 = _2718.x;
        uint _2730 = uint((float(_2718.y) * floor(float(uint(cbSceneParam._m0[85u].y * _920) / _2719))) + floor(float(uint(cbSceneParam._m0[85u].x * _919) / _2719)));
        float _2740 = (log2(_2706 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2741 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        uint _2744 = uint(isnan(14.0) ? _2741 : (isnan(_2741) ? 14.0 : min(_2741, 14.0)));
        uvec4 _2749 = texelFetch(g_lightClusterGridBuffer, int(((_2744 << 2u) + (_2730 << 6u)) >> 2u));
        uint _2750 = _2749.x;
        uint _2751 = _2718.z;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        if (((((1u << ((_2751 >> 4u) & 15u)) + 4294967295u) & _2750) == 0u) || ((_2751 & 240u) == 0u))
        {
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
        }
        else
        {
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            uint _3010 = 0u;
            uint _3019;
            bool _3020;
            for (;;)
            {
                _3019 = texelFetch(g_lightClassification, int((((_2744 << 5u) + (_2730 << 9u)) + (_3010 << 2u)) >> 2u)).x;
                _3020 = _3019 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3020)
                {
                    frontier_phi_66_pred = _3004;
                    frontier_phi_66_pred_1 = _3009;
                    frontier_phi_66_pred_2 = _3008;
                    frontier_phi_66_pred_3 = _3007;
                    frontier_phi_66_pred_4 = _3006;
                    frontier_phi_66_pred_5 = _3005;
                }
                else
                {
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    uint _3155;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3019;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    for (;;)
                    {
                        uint _3159 = uint(findLSB(_3155)) + (_3010 << 5u);
                        uint _3156 = (_3155 + 4294967295u) & _3155;
                        uint _3161 = _3159 * 48u;
                        vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3181 = (_3159 * 48u) + 4u;
                        vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3200 = (_3159 * 48u) + 8u;
                        vec3 _3211 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x));
                        float _3215 = _3175.x - _2704;
                        float _3216 = _3175.y - _2705;
                        float _3217 = _3175.z - _2706;
                        float _3218 = dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217));
                        float _3221 = inversesqrt(_3218);
                        float _3222 = _3221 * _3215;
                        float _3223 = _3221 * _3216;
                        float _3224 = _3221 * _3217;
                        float _3225 = dot(vec3(_938, _941, _944), vec3(_3222, _3223, _3224));
                        float _3230 = 1.0 - (_3218 * _3175.w);
                        float _4599 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3231 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3232 = sqrt(_3218) * _3194.w;
                        float _3235 = 1.39999997615814208984375 / (_3232 + 1.39999997615814208984375);
                        float _3236 = _3235 * _3235;
                        float _3239 = ((1.0 - _3236) * _3225) + _3236;
                        float _3242 = _3232 * _3232;
                        float _3246 = ((isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))) * _3231) / ((_3242 * 0.699999988079071044921875) + 1.0);
                        float _3250 = (-0.0) - _2704;
                        float _3251 = (-0.0) - _2705;
                        float _3252 = (-0.0) - _2706;
                        float _3256 = inversesqrt(dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252)));
                        float _3257 = _3256 * _3250;
                        float _3258 = _3256 * _3251;
                        float _3259 = _3256 * _3252;
                        float _3267 = exp2(log2(1.0 / ((_3242 * 3.5) + 5.0)) * 0.25);
                        float _3268 = 1.0 - _1013;
                        float _3275 = sqrt(1.0 - ((1.0 - (_3268 * _3268)) * (1.0 - (_3267 * _3267))));
                        float _3276 = _3275 * _3275;
                        float _3277 = _3276 * _3276;
                        float _3278 = _3257 + _3222;
                        float _3279 = _3258 + _3223;
                        float _3280 = _3259 + _3224;
                        float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                        float _3288 = dot(vec3(_938, _941, _944), vec3(_3257, _3258, _3259));
                        float _4615 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3291 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3292 = dot(vec3(_938, _941, _944), vec3(_3284 * _3278, _3284 * _3279, _3284 * _3280));
                        float _4626 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3295 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3299 = ((_3295 * _3295) * (_3277 + (-1.0))) + 1.0;
                        float _3300 = _3235 * _3276;
                        float _3301 = _3300 * _3300;
                        float _3304 = ((1.0 - _3301) * _3225) + _3301;
                        float _4637 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3306 = 1.0 - _3276;
                        float _3316 = (0.5 / (((_3305 * ((_3291 * _3306) + _3276)) + 9.9999999392252902907785028219223e-09) + (((_3305 * _3306) + _3276) * _3291))) * _3305;
                        float _4648 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3327 = (((_3277 * 3.1415927410125732421875) * (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) / ((_3299 * _3299) * ((_3242 * 2.1991131305694580078125) + 3.141590118408203125))) * _3231;
                        _3079 = (_3246 * _3194.x) + _3152;
                        _3080 = (_3246 * _3194.y) + _3153;
                        _3081 = (_3246 * _3194.z) + _3154;
                        _3076 = (_3327 * _3211.x) + _3149;
                        _3077 = (_3327 * _3211.y) + _3150;
                        _3078 = (_3327 * _3211.z) + _3151;
                        if (_3156 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3156;
                        }
                    }
                    frontier_phi_66_pred = _3076;
                    frontier_phi_66_pred_1 = _3081;
                    frontier_phi_66_pred_2 = _3080;
                    frontier_phi_66_pred_3 = _3079;
                    frontier_phi_66_pred_4 = _3078;
                    frontier_phi_66_pred_5 = _3077;
                }
                _2852 = frontier_phi_66_pred;
                _2862 = frontier_phi_66_pred_1;
                _2860 = frontier_phi_66_pred_2;
                _2858 = frontier_phi_66_pred_3;
                _2856 = frontier_phi_66_pred_4;
                _2854 = frontier_phi_66_pred_5;
                uint _3011 = _3010 + 1u;
                if (_3011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3004 = _2852;
                    _3005 = _2854;
                    _3006 = _2856;
                    _3007 = _2858;
                    _3008 = _2860;
                    _3009 = _2862;
                    _3010 = _3011;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
        }
        uvec4 _2865 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2866 = _2865.z;
        uint _2868 = (_2866 >> 8u) & 15u;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        if (((4294967295u << _2868) & _2750) == 0u)
        {
            _2972 = _2851;
            _2974 = _2853;
            _2976 = _2855;
            _2978 = _2857;
            _2980 = _2859;
            _2982 = _2861;
        }
        else
        {
            float _2997 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
            float _2998 = _2997 * _2704;
            float _2999 = _2997 * _2705;
            float _3000 = _2997 * _2706;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2868 < ((_2866 >> 12u) & 15u))
            {
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _3132 = _2851;
                float _3133 = _2853;
                float _3134 = _2855;
                float _3135 = _2857;
                float _3136 = _2859;
                float _3137 = _2861;
                uint _3138 = _2868;
                uint _3147;
                bool _3148;
                for (;;)
                {
                    _3147 = texelFetch(g_lightClassification, int((((_2744 << 5u) + (_2730 << 9u)) + (_3138 << 2u)) >> 2u)).x;
                    _3148 = _3147 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3148)
                    {
                        frontier_phi_77_pred = _3137;
                        frontier_phi_77_pred_1 = _3136;
                        frontier_phi_77_pred_2 = _3135;
                        frontier_phi_77_pred_3 = _3134;
                        frontier_phi_77_pred_4 = _3133;
                        frontier_phi_77_pred_5 = _3132;
                    }
                    else
                    {
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3354 = _3132;
                        float _3355 = _3133;
                        float _3356 = _3134;
                        float _3357 = _3135;
                        float _3358 = _3136;
                        float _3359 = _3137;
                        uint _3360 = _3147;
                        uint _3361;
                        vec4 _3386;
                        float _3387;
                        vec4 _3402;
                        vec3 _3414;
                        vec4 _3429;
                        vec4 _3444;
                        float _3491;
                        bool _3492;
                        for (;;)
                        {
                            uint _3371 = ((_3138 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3360));
                            _3361 = (_3360 + 4294967295u) & _3360;
                            uint _3373 = _3371 * 40u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            _3387 = _3386.w;
                            uint _3389 = (_3371 * 40u) + 4u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3404 = (_3371 * 40u) + 8u;
                            _3414 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x));
                            uint _3416 = (_3371 * 40u) + 16u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3431 = (_3371 * 40u) + 20u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3447 = (_3371 * 40u) + 24u;
                            vec4 _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3466 = (_3371 * 40u) + 28u;
                            vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            _3491 = fma(_2706, _3479.z, fma(_2705, _3479.y, _3479.x * _2704)) + _3479.w;
                            _3492 = !((fma(_2706, _3460.z, fma(_2705, _3460.y, _3460.x * _2704)) + _3460.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3492)
                            {
                                float _3519 = _3386.x - _2704;
                                float _3520 = _3386.y - _2705;
                                float _3521 = _3386.z - _2706;
                                float _3522 = dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521));
                                float _3525 = inversesqrt(_3522);
                                float _3526 = _3525 * _3519;
                                float _3527 = _3525 * _3520;
                                float _3528 = _3525 * _3521;
                                float _3532 = 1.0 - (_3522 / (_3387 * _3387));
                                float _4659 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3537 = sqrt(_3522) * _3402.w;
                                float _3539 = 1.39999997615814208984375 / (_3537 + 1.39999997615814208984375);
                                float _3540 = _3539 * _3539;
                                float _3543 = ((1.0 - _3540) * dot(vec3(_3526, _3527, _3528), vec3(_938, _941, _944))) + _3540;
                                float _3546 = _3537 * _3537;
                                float _3550 = (fma(_2706, _3429.z, fma(_2705, _3429.y, _3429.x * _2704)) + _3429.w) / _3491;
                                float _3551 = (fma(_2706, _3444.z, fma(_2705, _3444.y, _3444.x * _2704)) + _3444.w) / _3491;
                                float _3555 = 1.0 - dot(vec2(_3550, _3551), vec2(_3550, _3551));
                                float _4675 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3557 = _3556 * (((isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0))) * _3533) / ((_3546 * 0.699999988079071044921875) + 1.0));
                                float _3569 = exp2(log2(1.0 / ((_3546 * 3.5) + 5.0)) * 0.25);
                                float _3570 = 1.0 - _1013;
                                float _3577 = sqrt(1.0 - ((1.0 - (_3570 * _3570)) * (1.0 - (_3569 * _3569))));
                                float _3578 = _3577 * _3577;
                                float _3579 = _3578 * _3578;
                                float _3580 = _3526 - _2998;
                                float _3581 = _3527 - _2999;
                                float _3582 = _3528 - _3000;
                                float _3586 = inversesqrt(dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582)));
                                float _3590 = dot(vec3(_938, _941, _944), vec3((-0.0) - _2998, (-0.0) - _2999, (-0.0) - _3000));
                                float _4686 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3594 = dot(vec3(_938, _941, _944), vec3(_3586 * _3580, _3586 * _3581, _3586 * _3582));
                                float _4697 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3597 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3601 = ((_3597 * _3597) * (_3579 + (-1.0))) + 1.0;
                                float _3602 = _3539 * _3578;
                                float _3603 = _3602 * _3602;
                                float _3609 = ((1.0 - _3603) * dot(vec3(_938, _941, _944), vec3(_3526, _3527, _3528))) + _3603;
                                float _4708 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3611 = 1.0 - _3578;
                                float _3621 = (0.5 / (((_3610 * ((_3593 * _3611) + _3578)) + 9.9999999392252902907785028219223e-09) + (((_3610 * _3611) + _3578) * _3593))) * _3610;
                                float _4719 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3631 = (_3556 * _3533) * (((_3579 * 3.1415927410125732421875) * (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) / ((_3601 * _3601) * ((_3546 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3557 * _3402.y;
                                frontier_phi_83_pred_1 = _3557 * _3402.x;
                                frontier_phi_83_pred_2 = _3631 * _3414.z;
                                frontier_phi_83_pred_3 = _3631 * _3414.y;
                                frontier_phi_83_pred_4 = _3631 * _3414.x;
                                frontier_phi_83_pred_5 = _3557 * _3402.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3639 = frontier_phi_83_pred;
                            _3638 = frontier_phi_83_pred_1;
                            _3637 = frontier_phi_83_pred_2;
                            _3636 = frontier_phi_83_pred_3;
                            _3635 = frontier_phi_83_pred_4;
                            _3640 = frontier_phi_83_pred_5;
                            _3344 = _3638 + _3357;
                            _3345 = _3639 + _3358;
                            _3346 = _3640 + _3359;
                            _3341 = _3635 + _3354;
                            _3342 = _3636 + _3355;
                            _3343 = _3637 + _3356;
                            if (_3361 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3361;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3346;
                        frontier_phi_77_pred_1 = _3345;
                        frontier_phi_77_pred_2 = _3344;
                        frontier_phi_77_pred_3 = _3343;
                        frontier_phi_77_pred_4 = _3342;
                        frontier_phi_77_pred_5 = _3341;
                    }
                    _2983 = frontier_phi_77_pred;
                    _2981 = frontier_phi_77_pred_1;
                    _2979 = frontier_phi_77_pred_2;
                    _2977 = frontier_phi_77_pred_3;
                    _2975 = frontier_phi_77_pred_4;
                    _2973 = frontier_phi_77_pred_5;
                    uint _3139 = _3138 + 1u;
                    if (_3139 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3132 = _2973;
                        _3133 = _2975;
                        _3134 = _2977;
                        _3135 = _2979;
                        _3136 = _2981;
                        _3137 = _2983;
                        _3138 = _3139;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2977;
                frontier_phi_58_59_ladder_1 = _2983;
                frontier_phi_58_59_ladder_2 = _2981;
                frontier_phi_58_59_ladder_3 = _2979;
                frontier_phi_58_59_ladder_4 = _2975;
                frontier_phi_58_59_ladder_5 = _2973;
            }
            else
            {
                frontier_phi_58_59_ladder = _2855;
                frontier_phi_58_59_ladder_1 = _2861;
                frontier_phi_58_59_ladder_2 = _2859;
                frontier_phi_58_59_ladder_3 = _2857;
                frontier_phi_58_59_ladder_4 = _2853;
                frontier_phi_58_59_ladder_5 = _2851;
            }
            _2972 = frontier_phi_58_59_ladder_5;
            _2974 = frontier_phi_58_59_ladder_4;
            _2976 = frontier_phi_58_59_ladder;
            _2978 = frontier_phi_58_59_ladder_3;
            _2980 = frontier_phi_58_59_ladder_2;
            _2982 = frontier_phi_58_59_ladder_1;
        }
        float _2987 = isnan(1.0) ? _997 : (isnan(_997) ? 1.0 : min(_997, 1.0));
        _2763 = (_2987 * _2978) + _2199;
        _2765 = (_2987 * _2980) + _2201;
        _2767 = (_2987 * _2982) + _2203;
        _2769 = ((_2972 * _982) * _2987) + _2544;
        _2771 = ((_2974 * _984) * _2987) + _2546;
        _2773 = ((_2976 * _985) * _2987) + _2548;
    }
    else
    {
        _2763 = _2199;
        _2765 = _2201;
        _2767 = _2203;
        _2769 = _2544;
        _2771 = _2546;
        _2773 = _2548;
    }
    float _4735 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4746 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _4757 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _2790 = ((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2763 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _997))) + ((_2769 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1838)) * cbPerFrame._m0[3u].x);
    float _2791 = ((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2765 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _997))) + ((_2771 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1838)) * cbPerFrame._m0[3u].x);
    float _2792 = ((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2767 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _997))) + ((_2773 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1838)) * cbPerFrame._m0[3u].x);
    uint _2793 = _957 + 6u;
    float _2801 = _919 / cbSceneParam._m0[86u].x;
    float _2802 = _920 / cbSceneParam._m0[86u].y;
    vec4 _2816 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2801, _2802, (log2((isnan(cbSceneParam._m0[77u].w) ? _842 : (isnan(_842) ? cbSceneParam._m0[77u].w : min(_842, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2818 = _2816.x;
    float _2819 = _2816.y;
    float _2820 = _2816.z;
    float _2821 = _2816.w;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    if (_842 > cbSceneParam._m0[78u].w)
    {
        float _2876 = isnan(_842) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _842 : min(cbSceneParam._m0[80u].w, _842));
        float _2877 = _2876 / _842;
        float _2888 = _2877 * _892;
        float _2889 = _893 * _2877;
        float _2890 = (-0.0) - _2889;
        float _2892 = _2877 * _894;
        float _2894 = (cbSceneParam._m0[77u].w * _2890) / _2876;
        float _2895 = _2894 + cbSceneParam._m0[79u].w;
        float _2896 = cbSceneParam._m0[79u].w - _2889;
        float _2902 = sqrt(((_2888 * _2888) + (_2889 * _2889)) + (_2892 * _2892));
        float _2905 = (1.0 - (cbSceneParam._m0[77u].w / _2876)) * _2902;
        float _2910 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2912 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3089;
        if (abs((_2890 - _2894) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3089 = ((((_2895 > 0.0) ? exp2(_2910 * _2895) : (2.0 - exp2(_2912 * _2895))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2905;
        }
        else
        {
            float _3033 = 1.0 / cbSceneParam._m0[80u].x;
            float _3034 = isnan(_2896) ? _2895 : (isnan(_2895) ? _2896 : max(_2895, _2896));
            float _3035 = isnan(_2896) ? _2895 : (isnan(_2895) ? _2896 : min(_2895, _2896));
            float _3044 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : min(_3034, 0.0));
            float _3045 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : min(_3035, 0.0));
            _3089 = ((abs(_2902 / _2890) * cbSceneParam._m0[80u].y) * ((((_3044 - _3045) * 2.0) - ((exp2(_2910 * (isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0)))) - exp2(_2910 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0))))) * _3033)) - ((exp2(_2912 * _3044) - exp2(_2912 * _3045)) * _3033))) + (_2905 * cbSceneParam._m0[80u].z);
        }
        vec4 _3091 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2801, _2802, 1.0), 0.0);
        float _3100 = exp2((_3089 * (-1.44269502162933349609375)) * (1.0 - _3091.w));
        float _3101 = log2(_3100);
        float _3117 = log2(_2821);
        _2914 = (exp2(_3117 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].x)) * _3091.x) / cbSceneParam._m0[78u].x)) + _2818;
        _2916 = (exp2(_3117 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].y)) * _3091.y) / cbSceneParam._m0[78u].y)) + _2819;
        _2918 = (exp2(_3117 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].z)) * _3091.z) / cbSceneParam._m0[78u].z)) + _2820;
        _2920 = _3100 * _2821;
    }
    else
    {
        _2914 = _2818;
        _2916 = _2819;
        _2918 = _2820;
        _2920 = _2821;
    }
    bool _3127;
    vec4 _2930;
    vec4 _2952;
    float _2954;
    float _2958;
    float _2959;
    float _2960;
    float _2961;
    bool _2971;
    for (;;)
    {
        _2930 = cbMatDynParam._m0[0u];
        float _2932 = roundEven(_2930.y);
        bool _2933 = _2932 == 3.0;
        float _2934 = log2(_2920);
        float _2941 = exp2(_2934 * cbSceneParam._m0[78u].x) * _2790;
        float _2942 = exp2(_2934 * cbSceneParam._m0[78u].y) * _2791;
        float _2943 = exp2(_2934 * cbSceneParam._m0[78u].z) * _2792;
        float _2950 = _908 + (-0.5);
        _2952 = cbMtdParam._m0[1u];
        _2954 = _2952.y * _2950;
        float _2957 = (_2932 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2958 = _2957 * (_2933 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2914)));
        _2959 = _2957 * (_2933 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2916)));
        _2960 = _2957 * (_2933 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2918)));
        _2961 = _2950 * 0.999000012874603271484375;
        _2971 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2971)
        {
            if ((cbInstanceData._m0[_957 + 7u].x + _2961) < 0.5)
            {
                _3127 = true;
                break;
            }
        }
        uint _3068 = _958 + uint(_2930.w);
        if ((cbInstanceData._m0[_3068].w < 1.0) && ((cbInstanceData._m0[_3068].w + _2961) < 0.5))
        {
            _3127 = true;
            break;
        }
        if ((_2954 + 1.0) < _2952.x)
        {
            _3127 = true;
            break;
        }
        _3127 = false;
        break;
    }
    float _3332;
    if (_3127)
    {
        discard_state = true;
        _3332 = 0.0;
    }
    else
    {
        _3332 = cbInstanceData._m0[_2793].w;
    }
    SV_Target.x = _2958;
    SV_Target.y = _2959;
    SV_Target.z = _2960;
    SV_Target.w = _3332;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2793].w;
    discard_exit();
}


