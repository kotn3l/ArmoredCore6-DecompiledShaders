#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1230;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _250.x * cbMtdParam._m0[10u].x;
    float _257 = _250.y * cbMtdParam._m0[10u].y;
    float _258 = _250.z * cbMtdParam._m0[10u].z;
    vec4 _276 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _326 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _336 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _326)) + 1.0;
    float _3842 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _337 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _344 = (_337 * ((_276.x * cbMtdParam._m0[11u].x) - _256)) + _256;
    float _345 = (_337 * ((_276.y * cbMtdParam._m0[11u].y) - _257)) + _257;
    float _346 = (_337 * ((_276.z * cbMtdParam._m0[11u].z) - _258)) + _258;
    vec4 _364 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _395 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _326)) + 1.0;
    float _3853 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _403 = (_396 * ((_364.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _404 = (_396 * ((_364.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _405 = (_396 * ((_364.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _423 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _448 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _326)) + 1.0;
    float _3864 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    vec4 _477 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _485 = ((((_449 * ((_423.x * cbMtdParam._m0[13u].x) - _403)) + _403) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _477.x;
    float _488 = ((((_449 * ((_423.y * cbMtdParam._m0[13u].y) - _404)) + _404) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _477.y;
    float _491 = ((((_449 * ((_423.z * cbMtdParam._m0[13u].z) - _405)) + _405) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _477.z;
    vec4 _504 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _506 = _504.x;
    float _524 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _506) * _337) + _506;
    float _541 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _524) * _396) + _524;
    float _558 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _541) * _449) + _541;
    vec4 _570 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _572 = _570.x;
    float _573 = _570.y;
    float _579 = cbMtdParam._m0[18u].y * _570.z;
    vec4 _591 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _600 = (((cbMtdParam._m0[18u].x * _591.z) - _579) * _337) + _579;
    vec4 _613 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _624 = (((cbMtdParam._m0[17u].w * _613.z) - _600) * _396) + _600;
    vec4 _637 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _646 = (((cbMtdParam._m0[17u].z * _637.z) - _624) * _449) + _624;
    float _651 = ((_591.x - _572) * _337) + _572;
    float _652 = ((_591.y - _573) * _337) + _573;
    float _657 = ((_613.x - _651) * _396) + _651;
    float _658 = ((_613.y - _652) * _396) + _652;
    float _667 = ((((_637.x - _657) * _449) + _657) * 2.0) + (-1.0);
    float _669 = ((((_637.y - _658) * _449) + _658) * 2.0) + (-1.0);
    float _670 = dot(vec2(_667, _669), vec2(_667, _669));
    float _3875 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _675 = sqrt(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))));
    float _678 = fma(_675, _220 * NORMAL.x, fma(_669, _227 * TANGENT.x, (_213 * _205) * _667));
    float _681 = fma(_675, _220 * NORMAL.y, fma(_669, _227 * TANGENT.y, (_213 * _206) * _667));
    float _684 = fma(_675, _220 * NORMAL.z, fma(_669, _227 * TANGENT.z, (_213 * _207) * _667));
    float _688 = inversesqrt(dot(vec3(_678, _681, _684), vec3(_678, _681, _684)));
    float _689 = _688 * _678;
    float _690 = _688 * _681;
    float _691 = _688 * _684;
    float _3886 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _692 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3908 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3919 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3930 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _696 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _712 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _762 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _752);
    float _763 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _752);
    float _764 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _752);
    float _768 = inversesqrt(dot(vec3(_762, _763, _764), vec3(_762, _763, _764)));
    float _769 = _762 * _768;
    float _770 = _763 * _768;
    float _771 = _764 * _768;
    float _777 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _778 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _796 = fma(_691, cbSceneParam._m0[5u].z, fma(_690, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _689));
    float _799 = fma(_691, cbSceneParam._m0[6u].z, fma(_690, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _689));
    float _802 = fma(_691, cbSceneParam._m0[7u].z, fma(_690, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _689));
    uint _815 = uint(roundEven(NORMAL.w)) * 13u;
    uint _817 = (_815 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _823 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_817].x;
    float _824 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * cbInstanceData._m0[_817].y;
    float _825 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * cbInstanceData._m0[_817].z;
    float _3941 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _829 = 1.0 - _696;
    float _830 = _826 * _829;
    float _831 = _827 * _829;
    float _832 = _828 * _829;
    float _837 = (_826 + (-0.039999999105930328369140625)) * _696;
    float _838 = (_827 + (-0.039999999105930328369140625)) * _696;
    float _839 = (_828 + (-0.039999999105930328369140625)) * _696;
    float _840 = _837 + 0.039999999105930328369140625;
    float _842 = _838 + 0.039999999105930328369140625;
    float _843 = _839 + 0.039999999105930328369140625;
    vec4 _852 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _777, cbSceneParam._m0[86u].y * _778));
    float _855 = _852.x * TEXCOORD_5.w;
    float _856 = dot(vec3(_689, _690, _691), vec3(_769, _770, _771));
    float _859 = _856 * 2.0;
    float _863 = (_859 * _689) - _769;
    float _864 = (_859 * _690) - _770;
    float _865 = (_859 * _691) - _771;
    float _869 = abs(dot(vec3(_769, _770, _771), vec3(_689, _690, _691)));
    float _3974 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _871 = sqrt(_692);
    float _884 = exp2((_871 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_871 * 3.0));
    float _890 = (1.0 - _884) * ((_871 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _891 = _884 * _871;
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1229;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _954 = fma(_927, cbModelParam._m0[26u].z, fma(_923, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _919));
        float _958 = fma(_927, cbModelParam._m0[27u].z, fma(_923, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _919));
        float _962 = fma(_927, cbModelParam._m0[28u].z, fma(_923, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _919));
        float _987 = _919 + _689;
        float _988 = _923 + _690;
        float _989 = _927 + _691;
        float _999 = fma(_989, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987)) - _954;
        float _1000 = fma(_989, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987)) - _958;
        float _1001 = fma(_989, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987)) - _962;
        float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
        float _1018 = ((_1005 * _999) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_954 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1005 * _1000) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_958 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1005 * _1001) / cbModelParam._m0[34u].z) + ((((((_962 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        float _1057 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1023.x + (-0.5));
        float _1059 = _1057 * (_1023.y + (-0.5));
        float _1060 = _1057 * (_1023.z + (-0.5));
        float _1067 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1030.x + (-0.5));
        float _1069 = _1067 * (_1030.y + (-0.5));
        float _1070 = _1067 * (_1030.z + (-0.5));
        float _1077 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1037.x + (-0.5));
        float _1079 = _1077 * (_1037.y + (-0.5));
        float _1080 = _1077 * (_1037.z + (-0.5));
        float _1087 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1044.x + (-0.5));
        float _1089 = _1087 * (_1044.y + (-0.5));
        float _1090 = _1087 * (_1044.z + (-0.5));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1058 * 0.5;
        float _1095 = _1068 * 0.5;
        float _1096 = _1078 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1111 = (dot(vec3(_689, _690, _691), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1121 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _4022 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1123 + 1.0))) + _1128) * _1091;
        float _1138 = _1059 * 0.5;
        float _1139 = _1069 * 0.5;
        float _1140 = _1079 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_689, _690, _691), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _4055 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1165 + 1.0))) + _1170) * _1092;
        float _1180 = _1060 * 0.5;
        float _1181 = _1070 * 0.5;
        float _1182 = _1080 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_689, _690, _691), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _4088 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1207 + 1.0))) + _1212) * _1093;
        _1229 = _1060;
        _1231 = _1059;
        _1232 = _1058;
        _1233 = _1070;
        _1234 = _1069;
        _1235 = _1068;
        _1236 = _1080;
        _1237 = _1079;
        _1238 = _1078;
        _1239 = _1093;
        _1240 = _1092;
        _1241 = _1091;
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _1230;
        _1231 = _1230;
        _1232 = _1230;
        _1233 = _1230;
        _1234 = _1230;
        _1235 = _1230;
        _1236 = _1230;
        _1237 = _1230;
        _1238 = _1230;
        _1239 = _1230;
        _1240 = _1230;
        _1241 = _1230;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1270 = fma(_927, cbModelParam._m0[30u].z, fma(_923, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919));
        float _1274 = fma(_927, cbModelParam._m0[31u].z, fma(_923, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919));
        float _1278 = fma(_927, cbModelParam._m0[32u].z, fma(_923, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919));
        float _1301 = _919 + _689;
        float _1302 = _923 + _690;
        float _1303 = _927 + _691;
        float _1313 = fma(_1303, cbModelParam._m0[30u].z, fma(_1302, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1301)) - _1270;
        float _1314 = fma(_1303, cbModelParam._m0[31u].z, fma(_1302, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1301)) - _1274;
        float _1315 = fma(_1303, cbModelParam._m0[32u].z, fma(_1302, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1301)) - _1278;
        float _1319 = inversesqrt(dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315)));
        float _1332 = ((_1319 * _1313) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1270 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1319 * _1314) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1274 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1319 * _1315) / cbModelParam._m0[35u].z) + ((((((_1278 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        float _1369 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1336.x + (-0.5));
        float _1371 = _1369 * (_1336.y + (-0.5));
        float _1372 = _1369 * (_1336.z + (-0.5));
        float _1379 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1343.x + (-0.5));
        float _1381 = _1379 * (_1343.y + (-0.5));
        float _1382 = _1379 * (_1343.z + (-0.5));
        float _1389 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1350.x + (-0.5));
        float _1391 = _1389 * (_1350.y + (-0.5));
        float _1392 = _1389 * (_1350.z + (-0.5));
        float _1399 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1357.x + (-0.5));
        float _1401 = _1399 * (_1357.y + (-0.5));
        float _1402 = _1399 * (_1357.z + (-0.5));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = _1370 * 0.5;
        float _1407 = _1380 * 0.5;
        float _1408 = _1390 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_689, _690, _691), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _4151 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1433 + 1.0))) + _1438) * _1403;
        float _1448 = _1371 * 0.5;
        float _1449 = _1381 * 0.5;
        float _1450 = _1391 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_689, _690, _691), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4184 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1475 + 1.0))) + _1480) * _1404;
        float _1490 = _1372 * 0.5;
        float _1491 = _1382 * 0.5;
        float _1492 = _1392 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_689, _690, _691), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4217 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1517 + 1.0))) + _1522) * _1405;
        _1539 = _1372;
        _1540 = _1371;
        _1541 = _1370;
        _1542 = _1382;
        _1543 = _1381;
        _1544 = _1380;
        _1545 = _1392;
        _1546 = _1391;
        _1547 = _1390;
        _1548 = _1405;
        _1549 = _1404;
        _1550 = _1403;
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
    }
    else
    {
        _1539 = _1230;
        _1540 = _1230;
        _1541 = _1230;
        _1542 = _1230;
        _1543 = _1230;
        _1544 = _1230;
        _1545 = _1230;
        _1546 = _1230;
        _1547 = _1230;
        _1548 = _1230;
        _1549 = _1230;
        _1550 = _1230;
        _1551 = 0.0;
        _1552 = 0.0;
        _1553 = 0.0;
    }
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1242)) + _1242;
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1243)) + _1243;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1244)) + _1244;
    float _1586 = fma(_1565, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1563 * cbSceneParam._m0[89u].x));
    float _1589 = fma(_1565, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1563 * cbSceneParam._m0[90u].x));
    float _1592 = fma(_1565, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1563));
    float _1607 = _863 * 0.5;
    float _1608 = _864 * 0.5;
    float _1609 = _865 * 0.5;
    float _1610 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1613 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1616 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1650;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1623 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1229, _1233, _1236, _1239));
        float _1627 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1231, _1234, _1237, _1240));
        float _1631 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1232, _1235, _1238, _1241));
        float _1638 = dot(vec4(cbModelParam._m0[39u]), vec4(_1607, _1608, _1609, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1661;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1652 = dot(vec4(cbModelParam._m0[40u]), vec4(_1607, _1608, _1609, 1.0));
        _1661 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1661 = 1.0;
    }
    float _1665 = (_1661 * cbModelParam._m0[1u].x) + (_1650 * (1.0 - cbModelParam._m0[1u].x));
    float _1675 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _692);
    float _1676 = isnan(_1675) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1675 : min(cbModelParam._m0[25u].z, _1675));
    float _1758;
    float _1760;
    float _1762;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1725 = fma(_927, cbModelParam._m0[13u].z, fma(_923, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _919)) + cbModelParam._m0[13u].w;
        float _1729 = fma(_927, cbModelParam._m0[14u].z, fma(_923, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _919)) + cbModelParam._m0[14u].w;
        float _1733 = fma(_927, cbModelParam._m0[15u].z, fma(_923, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _919)) + cbModelParam._m0[15u].w;
        float _1736 = fma(_865, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863));
        float _1739 = fma(_865, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863));
        float _1742 = fma(_865, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863));
        float _1770;
        if (_1736 > 0.0)
        {
            _1770 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1770 = frontier_phi_14_12_ladder;
        }
        float _1941;
        if (_1739 > 0.0)
        {
            _1941 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1941 = frontier_phi_23_19_ladder;
        }
        float _2236;
        if (_1742 > 0.0)
        {
            _2236 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2236 = frontier_phi_35_30_ladder;
        }
        float _2238 = isnan(_1941) ? _1770 : (isnan(_1770) ? _1941 : min(_1770, _1941));
        float _2239 = isnan(_2236) ? _2238 : (isnan(_2238) ? _2236 : min(_2238, _2236));
        float _2243 = (_2239 * _1736) + _1725;
        float _2244 = (_2239 * _1739) + _1729;
        float _2245 = (_2239 * _1742) + _1733;
        float _2246 = _2239 * 9.9999997473787516355514526367188e-05;
        float _2248 = (-1.0) - _2246;
        float _2250 = _2246 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2245 > _2250) || ((_2245 < _2248) || ((_2244 > _2250) || ((_2244 < _2248) || ((_2243 < _2248) || (_2243 > _2250))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2390 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2245, cbModelParam._m0[9u].z, fma(_2244, cbModelParam._m0[9u].y, _2243 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2245, cbModelParam._m0[10u].z, fma(_2244, cbModelParam._m0[10u].y, _2243 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2245, cbModelParam._m0[11u].z, fma(_2244, cbModelParam._m0[11u].y, _2243 * cbModelParam._m0[11u].x))), _1676);
            frontier_phi_13_35_ladder = _2390.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2390.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2390.x * cbModelParam._m0[1u].y;
        }
        _1758 = frontier_phi_13_35_ladder_2;
        _1760 = frontier_phi_13_35_ladder_1;
        _1762 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1746 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_863, _864, _865), _1676);
        _1758 = _1746.x * cbModelParam._m0[1u].y;
        _1760 = _1746.y * cbModelParam._m0[1u].y;
        _1762 = _1746.z * cbModelParam._m0[1u].y;
    }
    float _1766 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _692);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1766 : min(cbModelParam._m0[25u].w, _1766));
    float _1856;
    float _1858;
    float _1860;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1820 = fma(_927, cbModelParam._m0[21u].z, fma(_923, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _919)) + cbModelParam._m0[21u].w;
        float _1824 = fma(_927, cbModelParam._m0[22u].z, fma(_923, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _919)) + cbModelParam._m0[22u].w;
        float _1828 = fma(_927, cbModelParam._m0[23u].z, fma(_923, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _919)) + cbModelParam._m0[23u].w;
        float _1831 = fma(_865, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863));
        float _1834 = fma(_865, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863));
        float _1837 = fma(_865, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863));
        float _1946;
        if (_1831 > 0.0)
        {
            _1946 = abs((1.0 - _1820) / _1831);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1820 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1946 = frontier_phi_25_21_ladder;
        }
        float _2263;
        if (_1834 > 0.0)
        {
            _2263 = abs((1.0 - _1824) / _1834);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1824 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2263 = frontier_phi_37_32_ladder;
        }
        float _2601;
        if (_1837 > 0.0)
        {
            _2601 = abs((1.0 - _1828) / _1837);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1828 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2601 = frontier_phi_47_44_ladder;
        }
        float _2603 = isnan(_2263) ? _1946 : (isnan(_1946) ? _2263 : min(_1946, _2263));
        float _2604 = isnan(_2601) ? _2603 : (isnan(_2603) ? _2601 : min(_2603, _2601));
        float _2608 = (_2604 * _1831) + _1820;
        float _2609 = (_2604 * _1834) + _1824;
        float _2610 = (_2604 * _1837) + _1828;
        float _2611 = _2604 * 9.9999997473787516355514526367188e-05;
        float _2612 = (-1.0) - _2611;
        float _2614 = _2611 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2610 > _2614) || ((_2610 < _2612) || ((_2609 > _2614) || ((_2609 < _2612) || ((_2608 < _2612) || (_2608 > _2614))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2732 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2610, cbModelParam._m0[17u].z, fma(_2609, cbModelParam._m0[17u].y, _2608 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2610, cbModelParam._m0[18u].z, fma(_2609, cbModelParam._m0[18u].y, _2608 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2610, cbModelParam._m0[19u].z, fma(_2609, cbModelParam._m0[19u].y, _2608 * cbModelParam._m0[19u].x))), _1767);
            frontier_phi_22_47_ladder = _2732.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2732.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2732.x * cbModelParam._m0[1u].z;
        }
        _1856 = frontier_phi_22_47_ladder_2;
        _1858 = frontier_phi_22_47_ladder_1;
        _1860 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1840 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_863, _864, _865), _1767);
        _1856 = _1840.x * cbModelParam._m0[1u].z;
        _1858 = _1840.y * cbModelParam._m0[1u].z;
        _1860 = _1840.z * cbModelParam._m0[1u].z;
    }
    float _1873 = (((_890 * _840) + _891) * _855) * ((cbModelParam._m0[1u].w * (_1856 - _1758)) + _1758);
    float _1875 = (((_890 * _842) + _891) * _855) * ((cbModelParam._m0[1u].w * (_1858 - _1760)) + _1760);
    float _1877 = (((_890 * _843) + _891) * _855) * ((cbModelParam._m0[1u].w * (_1860 - _1762)) + _1762);
    float _1880 = fma(_1877, cbSceneParam._m0[89u].z, fma(_1875, cbSceneParam._m0[89u].y, _1873 * cbSceneParam._m0[89u].x));
    float _1883 = fma(_1877, cbSceneParam._m0[90u].z, fma(_1875, cbSceneParam._m0[90u].y, _1873 * cbSceneParam._m0[90u].x));
    float _1886 = fma(_1877, cbSceneParam._m0[91u].z, fma(_1875, cbSceneParam._m0[91u].y, _1873 * cbSceneParam._m0[91u].x));
    float _1920 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1924 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1928 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1932 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1933 = _1920 / _1932;
    float _1934 = _1924 / _1932;
    float _1935 = _1928 / _1932;
    float _2082;
    float _2083;
    float _2084;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1962 = ((uint(_1935 > cbSceneParam._m0[59u].y) + uint(_1935 > cbSceneParam._m0[59u].x)) + uint(_1935 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1963 = _1962 + 43u;
        uint _1971 = _1962 + 44u;
        uint _1979 = _1962 + 45u;
        uint _1987 = _1962 + 46u;
        float _1998 = fma(_1932, cbSceneParam._m0[_1963].w, fma(_1928, cbSceneParam._m0[_1963].z, fma(_1924, cbSceneParam._m0[_1963].y, _1920 * cbSceneParam._m0[_1963].x)));
        float _2002 = fma(_1932, cbSceneParam._m0[_1971].w, fma(_1928, cbSceneParam._m0[_1971].z, fma(_1924, cbSceneParam._m0[_1971].y, _1920 * cbSceneParam._m0[_1971].x)));
        float _2010 = fma(_1932, cbSceneParam._m0[_1987].w, fma(_1928, cbSceneParam._m0[_1987].z, fma(_1924, cbSceneParam._m0[_1987].y, _1920 * cbSceneParam._m0[_1987].x)));
        float _2015 = cbSceneParam._m0[33u].z * _2010;
        float _2017 = cbSceneParam._m0[33u].w * _2010;
        float _2020 = fma(_1932, cbSceneParam._m0[_1979].w, fma(_1928, cbSceneParam._m0[_1979].z, fma(_1924, cbSceneParam._m0[_1979].y, _1920 * cbSceneParam._m0[_1979].x))) / _2010;
        float _2068 = (cbSceneParam._m0[33u].x - sqrt(((_1934 * _1934) + (_1933 * _1933)) + (_1935 * _1935))) * cbSceneParam._m0[33u].y;
        float _4343 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2075 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2015 + _1998) / _2010, (_2017 + _2002) / _2010), _2020), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2017 + _1998) / _2010, (_2002 - _2015) / _2010), _2020), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1998 - _2015) / _2010, (_2002 - _2017) / _2010), _2020), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1998 - _2017) / _2010, (_2015 + _2002) / _2010), _2020), 0.0)).x), vec4(0.25)));
        _2082 = 1.0 - (_2075 * cbSceneParam._m0[34u].x);
        _2083 = 1.0 - (_2075 * cbSceneParam._m0[34u].y);
        _2084 = 1.0 - (_2075 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2082 = 1.0;
        _2083 = 1.0;
        _2084 = 1.0;
    }
    float _2148;
    float _2150;
    float _2152;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2136 = fma(_1932, cbSceneParam._m0[63u].w, fma(_1928, cbSceneParam._m0[63u].z, fma(_1924, cbSceneParam._m0[63u].y, _1920 * cbSceneParam._m0[63u].x)));
        float _2137 = fma(_1932, cbSceneParam._m0[60u].w, fma(_1928, cbSceneParam._m0[60u].z, fma(_1924, cbSceneParam._m0[60u].y, _1920 * cbSceneParam._m0[60u].x))) / _2136;
        float _2138 = fma(_1932, cbSceneParam._m0[61u].w, fma(_1928, cbSceneParam._m0[61u].z, fma(_1924, cbSceneParam._m0[61u].y, _1920 * cbSceneParam._m0[61u].x))) / _2136;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2137 >= cbSceneParam._m0[64u].x) && (_2138 >= cbSceneParam._m0[64u].y)) && (_2137 <= cbSceneParam._m0[64u].z)) && (_2138 <= cbSceneParam._m0[64u].w))
        {
            float _2276 = fma(_1932, cbSceneParam._m0[62u].w, fma(_1928, cbSceneParam._m0[62u].z, fma(_1924, cbSceneParam._m0[62u].y, _1920 * cbSceneParam._m0[62u].x))) / _2136;
            float _2280 = isnan(cbSceneParam._m0[41u].w) ? _2276 : (isnan(_2276) ? cbSceneParam._m0[41u].w : max(_2276, cbSceneParam._m0[41u].w));
            float _2323 = (cbSceneParam._m0[33u].x - sqrt(((_1934 * _1934) + (_1933 * _1933)) + (_1935 * _1935))) * cbSceneParam._m0[33u].y;
            float _4359 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
            float _2330 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2137, cbSceneParam._m0[33u].w + _2138), _2280), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2137, _2138 - cbSceneParam._m0[33u].z), _2280), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2137 - cbSceneParam._m0[33u].z, _2138 - cbSceneParam._m0[33u].w), _2280), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2137 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2138), _2280), 0.0)).x), vec4(0.25)));
            float _2334 = 1.0 - (_2330 * cbSceneParam._m0[34u].x);
            float _2335 = 1.0 - (_2330 * cbSceneParam._m0[34u].y);
            float _2336 = 1.0 - (_2330 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2336) ? _2084 : (isnan(_2084) ? _2336 : min(_2084, _2336));
            frontier_phi_34_33_ladder_1 = isnan(_2335) ? _2083 : (isnan(_2083) ? _2335 : min(_2083, _2335));
            frontier_phi_34_33_ladder_2 = isnan(_2334) ? _2082 : (isnan(_2082) ? _2334 : min(_2082, _2334));
        }
        else
        {
            frontier_phi_34_33_ladder = _2084;
            frontier_phi_34_33_ladder_1 = _2083;
            frontier_phi_34_33_ladder_2 = _2082;
        }
        _2148 = frontier_phi_34_33_ladder_2;
        _2150 = frontier_phi_34_33_ladder_1;
        _2152 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2148 = _2082;
        _2150 = _2083;
        _2152 = _2084;
    }
    uvec4 _2157 = floatBitsToUint(cbInstanceData._m0[_815 + 5u]);
    uint _2159 = _2157.x * 14u;
    uint _2160 = _2159 + 13u;
    float _2167 = _855 + (-1.0);
    float _2172 = (cbLight._m0[_2160].x * _2167) + 1.0;
    float _2173 = (cbLight._m0[_2160].y * _2167) + 1.0;
    float _2174 = (cbLight._m0[_2160].z * _2167) + 1.0;
    float _2175 = (cbLight._m0[_2160].w * _2167) + 1.0;
    uint _2176 = _2159 + 5u;
    float _2182 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
    uint _2186 = _2159 + 4u;
    float _2195 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
    uint _2199 = _2159 | 1u;
    float _2210 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_689, _690, _691));
    float _2213 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_689, _690, _691));
    float _4395 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _4406 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2218 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * 0.3183098733425140380859375;
    float _2220 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * 0.3183098733425140380859375;
    float _2227 = ((cbLight._m0[_2176].x * _2182) * _2220) + (((cbLight._m0[_2186].x * _2148) * _2195) * _2218);
    float _2228 = ((_2182 * cbLight._m0[_2176].y) * _2220) + (((cbLight._m0[_2186].y * _2150) * _2195) * _2218);
    float _2229 = ((_2182 * cbLight._m0[_2176].z) * _2220) + (((cbLight._m0[_2186].z * _2152) * _2195) * _2218);
    uvec4 _2233 = floatBitsToUint(cbLight._m0[_2159 + 12u]);
    bool _2235 = _2233.x == 0u;
    float _2337;
    float _2339;
    float _2341;
    if (_2235)
    {
        _2337 = _2227;
        _2339 = _2228;
        _2341 = _2229;
    }
    else
    {
        uint _2345 = _2159 + 6u;
        float _2361 = (dot(vec3(cbLight._m0[_2159 + 2u].xyz), vec3(_689, _690, _691)) * 0.5) + 0.5;
        float _2362 = _2361 * _2361;
        float _4417 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2363 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2364 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2337 = (((cbLight._m0[_2345].x * 0.3183098733425140380859375) * _2363) * _2364) + _2227;
        _2339 = (((cbLight._m0[_2345].y * 0.3183098733425140380859375) * _2363) * _2364) + _2228;
        _2341 = (((cbLight._m0[_2345].z * 0.3183098733425140380859375) * _2363) * _2364) + _2229;
    }
    bool _2344 = _2233.y == 0u;
    float _2399;
    float _2401;
    float _2403;
    if (_2344)
    {
        _2399 = _2337;
        _2401 = _2339;
        _2403 = _2341;
    }
    else
    {
        uint _2572 = _2159 + 7u;
        float _2588 = (dot(vec3(cbLight._m0[_2159 + 3u].xyz), vec3(_689, _690, _691)) * 0.5) + 0.5;
        float _2589 = _2588 * _2588;
        float _4433 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2590 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2591 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2399 = (((cbLight._m0[_2572].x * 0.3183098733425140380859375) * _2590) * _2591) + _2337;
        _2401 = (((cbLight._m0[_2572].y * 0.3183098733425140380859375) * _2590) * _2591) + _2339;
        _2403 = (((cbLight._m0[_2572].z * 0.3183098733425140380859375) * _2590) * _2591) + _2341;
    }
    uint _2406 = _2159 + 8u;
    float _2419 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _692) * 0.949999988079071044921875);
    float _2420 = _2419 * _2419;
    float _2421 = cbLight._m0[_2159].x + _769;
    float _2422 = cbLight._m0[_2159].y + _770;
    float _2423 = cbLight._m0[_2159].z + _771;
    float _2427 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
    float _2428 = _2427 * _2421;
    float _2429 = _2427 * _2422;
    float _2430 = _2427 * _2423;
    float _2431 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_2159].xyz));
    float _4449 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2434 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _4460 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _2435 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2436 = dot(vec3(_689, _690, _691), vec3(_2428, _2429, _2430));
    float _4471 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2440 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2428, _2429, _2430));
    float _4482 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2444 = _2420 * _2420;
    float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
    float _2456 = exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0);
    float _2457 = 0.959999978542327880859375 - _837;
    float _2459 = 0.959999978542327880859375 - _838;
    float _2460 = 0.959999978542327880859375 - _839;
    float _2467 = 1.0 - _2420;
    float _2478 = (0.5 / (((_2435 * ((_2434 * _2467) + _2420)) + 9.9999999392252902907785028219223e-09) + (((_2435 * _2467) + _2420) * _2434))) * _2434;
    float _4493 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2480 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
    uint _2494 = _2159 + 9u;
    float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _692) * 0.949999988079071044921875);
    float _2506 = _2505 * _2505;
    float _2507 = cbLight._m0[_2199].x + _769;
    float _2508 = cbLight._m0[_2199].y + _770;
    float _2509 = cbLight._m0[_2199].z + _771;
    float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
    float _2514 = _2513 * _2507;
    float _2515 = _2513 * _2508;
    float _2516 = _2513 * _2509;
    float _2517 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_2199].xyz));
    float _4504 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2520 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2521 = dot(vec3(_689, _690, _691), vec3(_2514, _2515, _2516));
    float _4515 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2524 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2525 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2514, _2515, _2516));
    float _4526 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2529 = _2506 * _2506;
    float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
    float _2540 = exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0);
    float _2547 = 1.0 - _2506;
    float _2557 = (0.5 / (((_2435 * ((_2520 * _2547) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2435 * _2547) + _2506) * _2520))) * _2520;
    float _4537 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2559 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
    float _2569 = (((((_2540 * _2457) + _840) * cbLight._m0[_2494].x) * _2559) * _2182) + ((((cbLight._m0[_2406].x * _2148) * ((_2456 * _2457) + _840)) * _2480) * _2195);
    float _2570 = (((((_2540 * _2459) + _842) * cbLight._m0[_2494].y) * _2559) * _2182) + ((((cbLight._m0[_2406].y * _2150) * ((_2456 * _2459) + _842)) * _2480) * _2195);
    float _2571 = (((((_2540 * _2460) + _843) * cbLight._m0[_2494].z) * _2559) * _2182) + ((((cbLight._m0[_2406].z * _2152) * ((_2456 * _2460) + _843)) * _2480) * _2195);
    float _2627;
    float _2629;
    float _2631;
    if (_2235)
    {
        _2627 = _2569;
        _2629 = _2570;
        _2631 = _2571;
    }
    else
    {
        uint _2633 = _2159 + 2u;
        uint _2637 = _2159 + 10u;
        float _2651 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2633].w)) * _692) * 0.949999988079071044921875);
        float _2652 = _2651 * _2651;
        float _2653 = cbLight._m0[_2633].x + _769;
        float _2654 = cbLight._m0[_2633].y + _770;
        float _2655 = cbLight._m0[_2633].z + _771;
        float _2659 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
        float _2660 = _2659 * _2653;
        float _2661 = _2659 * _2654;
        float _2662 = _2659 * _2655;
        float _2663 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_2633].xyz));
        float _4548 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2667 = dot(vec3(_689, _690, _691), vec3(_2660, _2661, _2662));
        float _4559 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2671 = dot(vec3(cbLight._m0[_2633].xyz), vec3(_2660, _2661, _2662));
        float _4570 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2675 = _2652 * _2652;
        float _2679 = ((_2670 * _2670) * (_2675 + (-1.0))) + 1.0;
        float _2686 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
        float _2693 = 1.0 - _2652;
        float _2703 = (0.5 / (((_2435 * ((_2666 * _2693) + _2652)) + 9.9999999392252902907785028219223e-09) + (((_2435 * _2693) + _2652) * _2666))) * _2666;
        float _4581 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2705 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2675 / ((_2679 * _2679) * 3.141590118408203125));
        float _2706 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2627 = (((((_2686 * _2457) + _840) * cbLight._m0[_2637].x) * _2705) * _2706) + _2569;
        _2629 = (((((_2686 * _2459) + _842) * cbLight._m0[_2637].y) * _2705) * _2706) + _2570;
        _2631 = (((((_2686 * _2460) + _843) * cbLight._m0[_2637].z) * _2705) * _2706) + _2571;
    }
    float _2737;
    float _2739;
    float _2741;
    if (_2344)
    {
        _2737 = _2627;
        _2739 = _2629;
        _2741 = _2631;
    }
    else
    {
        uint _2748 = _2159 + 3u;
        uint _2752 = _2159 + 11u;
        float _2766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2748].w)) * _692) * 0.949999988079071044921875);
        float _2767 = _2766 * _2766;
        float _2768 = cbLight._m0[_2748].x + _769;
        float _2769 = cbLight._m0[_2748].y + _770;
        float _2770 = cbLight._m0[_2748].z + _771;
        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
        float _2775 = _2774 * _2768;
        float _2776 = _2774 * _2769;
        float _2777 = _2774 * _2770;
        float _2778 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_2748].xyz));
        float _4597 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2781 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2782 = dot(vec3(_689, _690, _691), vec3(_2775, _2776, _2777));
        float _4608 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2785 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2786 = dot(vec3(cbLight._m0[_2748].xyz), vec3(_2775, _2776, _2777));
        float _4619 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2790 = _2767 * _2767;
        float _2794 = ((_2785 * _2785) * (_2790 + (-1.0))) + 1.0;
        float _2801 = exp2(log2(1.0 - (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * 5.0);
        float _2808 = 1.0 - _2767;
        float _2818 = (0.5 / (((_2435 * ((_2781 * _2808) + _2767)) + 9.9999999392252902907785028219223e-09) + (((_2435 * _2808) + _2767) * _2781))) * _2781;
        float _4630 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2820 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2790 / ((_2794 * _2794) * 3.141590118408203125));
        float _2821 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2737 = (((((_2801 * _2457) + _840) * cbLight._m0[_2752].x) * _2820) * _2821) + _2627;
        _2739 = (((((_2801 * _2459) + _842) * cbLight._m0[_2752].y) * _2820) * _2821) + _2629;
        _2741 = (((((_2801 * _2460) + _843) * cbLight._m0[_2752].z) * _2820) * _2821) + _2631;
    }
    float _2887;
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    if (_2157.y == 0u)
    {
        uvec4 _2842 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2843 = _2842.x;
        uint _2854 = uint((float(_2842.y) * floor(float(uint(cbSceneParam._m0[85u].y * _778) / _2843))) + floor(float(uint(cbSceneParam._m0[85u].x * _777) / _2843)));
        float _2864 = (log2(_1935 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2865 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        uint _2868 = uint(isnan(14.0) ? _2865 : (isnan(_2865) ? 14.0 : min(_2865, 14.0)));
        uvec4 _2873 = texelFetch(g_lightClusterGridBuffer, int(((_2868 << 2u) + (_2854 << 6u)) >> 2u));
        uint _2874 = _2873.x;
        uint _2875 = _2842.z;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        if (((((1u << ((_2875 >> 4u) & 15u)) + 4294967295u) & _2874) == 0u) || ((_2875 & 240u) == 0u))
        {
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
        }
        else
        {
            float _2955;
            float _2957;
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            uint _3105 = 0u;
            uint _3114;
            bool _3115;
            for (;;)
            {
                _3114 = texelFetch(g_lightClassification, int((((_2868 << 5u) + (_2854 << 9u)) + (_3105 << 2u)) >> 2u)).x;
                _3115 = _3114 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3115)
                {
                    frontier_phi_66_pred = _3104;
                    frontier_phi_66_pred_1 = _3103;
                    frontier_phi_66_pred_2 = _3102;
                    frontier_phi_66_pred_3 = _3101;
                    frontier_phi_66_pred_4 = _3100;
                    frontier_phi_66_pred_5 = _3099;
                }
                else
                {
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    uint _3229;
                    _3223 = _3099;
                    _3224 = _3100;
                    _3225 = _3101;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3114;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    for (;;)
                    {
                        uint _3233 = uint(findLSB(_3229)) + (_3105 << 5u);
                        uint _3230 = (_3229 + 4294967295u) & _3229;
                        uint _3235 = _3233 * 48u;
                        vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 3u)).x));
                        uint _3255 = (_3233 * 48u) + 4u;
                        vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 3u)).x));
                        uint _3274 = (_3233 * 48u) + 8u;
                        vec3 _3285 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x));
                        float _3289 = _3249.x - _1933;
                        float _3290 = _3249.y - _1934;
                        float _3291 = _3249.z - _1935;
                        float _3292 = dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291));
                        float _3295 = inversesqrt(_3292);
                        float _3296 = _3295 * _3289;
                        float _3297 = _3295 * _3290;
                        float _3298 = _3295 * _3291;
                        float _3299 = dot(vec3(_796, _799, _802), vec3(_3296, _3297, _3298));
                        float _3304 = 1.0 - (_3292 * _3249.w);
                        float _4656 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3306 = sqrt(_3292) * _3268.w;
                        float _3309 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                        float _3310 = _3309 * _3309;
                        float _3313 = ((1.0 - _3310) * _3299) + _3310;
                        float _3316 = _3306 * _3306;
                        float _3320 = ((isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))) * _3305) / ((_3316 * 0.699999988079071044921875) + 1.0);
                        float _3324 = (-0.0) - _1933;
                        float _3325 = (-0.0) - _1934;
                        float _3326 = (-0.0) - _1935;
                        float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                        float _3331 = _3330 * _3324;
                        float _3332 = _3330 * _3325;
                        float _3333 = _3330 * _3326;
                        float _3340 = exp2(log2(1.0 / ((_3316 * 3.5) + 5.0)) * 0.25);
                        float _3341 = 1.0 - _871;
                        float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                        float _3349 = _3348 * _3348;
                        float _3350 = _3349 * _3349;
                        float _3351 = _3331 + _3296;
                        float _3352 = _3332 + _3297;
                        float _3353 = _3333 + _3298;
                        float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                        float _3361 = dot(vec3(_796, _799, _802), vec3(_3331, _3332, _3333));
                        float _4672 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3364 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                        float _3365 = dot(vec3(_796, _799, _802), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                        float _4683 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                        float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                        float _3373 = _3309 * _3349;
                        float _3374 = _3373 * _3373;
                        float _3377 = ((1.0 - _3374) * _3299) + _3374;
                        float _4694 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3378 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3379 = 1.0 - _3349;
                        float _3389 = (0.5 / (((_3378 * ((_3364 * _3379) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3378 * _3379) + _3349) * _3364))) * _3378;
                        float _4705 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3400 = (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) / ((_3372 * _3372) * ((_3316 * 2.1991131305694580078125) + 3.141590118408203125))) * _3305;
                        _3158 = (_3320 * _3268.x) + _3226;
                        _3159 = (_3320 * _3268.y) + _3227;
                        _3160 = (_3320 * _3268.z) + _3228;
                        _3155 = (_3400 * _3285.x) + _3223;
                        _3156 = (_3400 * _3285.y) + _3224;
                        _3157 = (_3400 * _3285.z) + _3225;
                        if (_3230 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3223 = _3155;
                            _3224 = _3156;
                            _3225 = _3157;
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3230;
                        }
                    }
                    frontier_phi_66_pred = _3160;
                    frontier_phi_66_pred_1 = _3159;
                    frontier_phi_66_pred_2 = _3158;
                    frontier_phi_66_pred_3 = _3157;
                    frontier_phi_66_pred_4 = _3156;
                    frontier_phi_66_pred_5 = _3155;
                }
                _2965 = frontier_phi_66_pred;
                _2963 = frontier_phi_66_pred_1;
                _2961 = frontier_phi_66_pred_2;
                _2959 = frontier_phi_66_pred_3;
                _2957 = frontier_phi_66_pred_4;
                _2955 = frontier_phi_66_pred_5;
                uint _3106 = _3105 + 1u;
                if (_3106 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3099 = _2955;
                    _3100 = _2957;
                    _3101 = _2959;
                    _3102 = _2961;
                    _3103 = _2963;
                    _3104 = _2965;
                    _3105 = _3106;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
        }
        uvec4 _2968 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2969 = _2968.z;
        uint _2971 = (_2969 >> 8u) & 15u;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        if (((4294967295u << _2971) & _2874) == 0u)
        {
            _3067 = _2954;
            _3069 = _2956;
            _3071 = _2958;
            _3073 = _2960;
            _3075 = _2962;
            _3077 = _2964;
        }
        else
        {
            float _3092 = inversesqrt(dot(vec3(_1933, _1934, _1935), vec3(_1933, _1934, _1935)));
            float _3093 = _3092 * _1933;
            float _3094 = _3092 * _1934;
            float _3095 = _3092 * _1935;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2971 < ((_2969 >> 12u) & 15u))
            {
                float _3068;
                float _3070;
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3206 = _2954;
                float _3207 = _2956;
                float _3208 = _2958;
                float _3209 = _2960;
                float _3210 = _2962;
                float _3211 = _2964;
                uint _3212 = _2971;
                uint _3221;
                bool _3222;
                for (;;)
                {
                    _3221 = texelFetch(g_lightClassification, int((((_2868 << 5u) + (_2854 << 9u)) + (_3212 << 2u)) >> 2u)).x;
                    _3222 = _3221 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3222)
                    {
                        frontier_phi_72_pred = _3211;
                        frontier_phi_72_pred_1 = _3210;
                        frontier_phi_72_pred_2 = _3209;
                        frontier_phi_72_pred_3 = _3208;
                        frontier_phi_72_pred_4 = _3207;
                        frontier_phi_72_pred_5 = _3206;
                    }
                    else
                    {
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3418 = _3206;
                        float _3419 = _3207;
                        float _3420 = _3208;
                        float _3421 = _3209;
                        float _3422 = _3210;
                        float _3423 = _3211;
                        uint _3424 = _3221;
                        uint _3425;
                        vec4 _3450;
                        float _3451;
                        vec4 _3466;
                        vec3 _3478;
                        vec4 _3493;
                        vec4 _3508;
                        float _3555;
                        bool _3556;
                        for (;;)
                        {
                            uint _3435 = ((_3212 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3424));
                            _3425 = (_3424 + 4294967295u) & _3424;
                            uint _3437 = _3435 * 40u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            _3451 = _3450.w;
                            uint _3453 = (_3435 * 40u) + 4u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3435 * 40u) + 8u;
                            _3478 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x));
                            uint _3480 = (_3435 * 40u) + 16u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3495 = (_3435 * 40u) + 20u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3511 = (_3435 * 40u) + 24u;
                            vec4 _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3530 = (_3435 * 40u) + 28u;
                            vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            _3555 = fma(_1935, _3543.z, fma(_1934, _3543.y, _3543.x * _1933)) + _3543.w;
                            _3556 = !((fma(_1935, _3524.z, fma(_1934, _3524.y, _3524.x * _1933)) + _3524.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3556)
                            {
                                float _3583 = _3450.x - _1933;
                                float _3584 = _3450.y - _1934;
                                float _3585 = _3450.z - _1935;
                                float _3586 = dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585));
                                float _3589 = inversesqrt(_3586);
                                float _3590 = _3589 * _3583;
                                float _3591 = _3589 * _3584;
                                float _3592 = _3589 * _3585;
                                float _3596 = 1.0 - (_3586 / (_3451 * _3451));
                                float _4716 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3601 = sqrt(_3586) * _3466.w;
                                float _3603 = 1.39999997615814208984375 / (_3601 + 1.39999997615814208984375);
                                float _3604 = _3603 * _3603;
                                float _3607 = ((1.0 - _3604) * dot(vec3(_3590, _3591, _3592), vec3(_796, _799, _802))) + _3604;
                                float _3610 = _3601 * _3601;
                                float _3614 = (fma(_1935, _3493.z, fma(_1934, _3493.y, _3493.x * _1933)) + _3493.w) / _3555;
                                float _3615 = (fma(_1935, _3508.z, fma(_1934, _3508.y, _3508.x * _1933)) + _3508.w) / _3555;
                                float _3619 = 1.0 - dot(vec2(_3614, _3615), vec2(_3614, _3615));
                                float _4732 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3620 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3621 = _3620 * (((isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0))) * _3597) / ((_3610 * 0.699999988079071044921875) + 1.0));
                                float _3633 = exp2(log2(1.0 / ((_3610 * 3.5) + 5.0)) * 0.25);
                                float _3634 = 1.0 - _871;
                                float _3641 = sqrt(1.0 - ((1.0 - (_3634 * _3634)) * (1.0 - (_3633 * _3633))));
                                float _3642 = _3641 * _3641;
                                float _3643 = _3642 * _3642;
                                float _3644 = _3590 - _3093;
                                float _3645 = _3591 - _3094;
                                float _3646 = _3592 - _3095;
                                float _3650 = inversesqrt(dot(vec3(_3644, _3645, _3646), vec3(_3644, _3645, _3646)));
                                float _3654 = dot(vec3(_796, _799, _802), vec3((-0.0) - _3093, (-0.0) - _3094, (-0.0) - _3095));
                                float _4743 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3657 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                                float _3658 = dot(vec3(_796, _799, _802), vec3(_3650 * _3644, _3650 * _3645, _3650 * _3646));
                                float _4754 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3661 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3665 = ((_3661 * _3661) * (_3643 + (-1.0))) + 1.0;
                                float _3666 = _3603 * _3642;
                                float _3667 = _3666 * _3666;
                                float _3673 = ((1.0 - _3667) * dot(vec3(_796, _799, _802), vec3(_3590, _3591, _3592))) + _3667;
                                float _4765 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3674 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3675 = 1.0 - _3642;
                                float _3685 = (0.5 / (((_3674 * ((_3657 * _3675) + _3642)) + 9.9999999392252902907785028219223e-09) + (((_3674 * _3675) + _3642) * _3657))) * _3674;
                                float _4776 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3695 = (_3620 * _3597) * (((_3643 * 3.1415927410125732421875) * (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)))) / ((_3665 * _3665) * ((_3610 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3621 * _3466.y;
                                frontier_phi_78_pred_1 = _3621 * _3466.x;
                                frontier_phi_78_pred_2 = _3695 * _3478.z;
                                frontier_phi_78_pred_3 = _3695 * _3478.y;
                                frontier_phi_78_pred_4 = _3695 * _3478.x;
                                frontier_phi_78_pred_5 = _3621 * _3466.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3703 = frontier_phi_78_pred;
                            _3702 = frontier_phi_78_pred_1;
                            _3701 = frontier_phi_78_pred_2;
                            _3700 = frontier_phi_78_pred_3;
                            _3699 = frontier_phi_78_pred_4;
                            _3704 = frontier_phi_78_pred_5;
                            _3408 = _3702 + _3421;
                            _3409 = _3703 + _3422;
                            _3410 = _3704 + _3423;
                            _3405 = _3699 + _3418;
                            _3406 = _3700 + _3419;
                            _3407 = _3701 + _3420;
                            if (_3425 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3425;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3410;
                        frontier_phi_72_pred_1 = _3409;
                        frontier_phi_72_pred_2 = _3408;
                        frontier_phi_72_pred_3 = _3407;
                        frontier_phi_72_pred_4 = _3406;
                        frontier_phi_72_pred_5 = _3405;
                    }
                    _3078 = frontier_phi_72_pred;
                    _3076 = frontier_phi_72_pred_1;
                    _3074 = frontier_phi_72_pred_2;
                    _3072 = frontier_phi_72_pred_3;
                    _3070 = frontier_phi_72_pred_4;
                    _3068 = frontier_phi_72_pred_5;
                    uint _3213 = _3212 + 1u;
                    if (_3213 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3206 = _3068;
                        _3207 = _3070;
                        _3208 = _3072;
                        _3209 = _3074;
                        _3210 = _3076;
                        _3211 = _3078;
                        _3212 = _3213;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3078;
                frontier_phi_60_61_ladder_1 = _3076;
                frontier_phi_60_61_ladder_2 = _3072;
                frontier_phi_60_61_ladder_3 = _3070;
                frontier_phi_60_61_ladder_4 = _3068;
                frontier_phi_60_61_ladder_5 = _3074;
            }
            else
            {
                frontier_phi_60_61_ladder = _2964;
                frontier_phi_60_61_ladder_1 = _2962;
                frontier_phi_60_61_ladder_2 = _2958;
                frontier_phi_60_61_ladder_3 = _2956;
                frontier_phi_60_61_ladder_4 = _2954;
                frontier_phi_60_61_ladder_5 = _2960;
            }
            _3067 = frontier_phi_60_61_ladder_4;
            _3069 = frontier_phi_60_61_ladder_3;
            _3071 = frontier_phi_60_61_ladder_2;
            _3073 = frontier_phi_60_61_ladder_5;
            _3075 = frontier_phi_60_61_ladder_1;
            _3077 = frontier_phi_60_61_ladder;
        }
        float _3082 = isnan(1.0) ? _855 : (isnan(_855) ? 1.0 : min(_855, 1.0));
        _2887 = (_3082 * _3073) + _2399;
        _2889 = (_3082 * _3075) + _2401;
        _2891 = (_3082 * _3077) + _2403;
        _2893 = ((_3067 * _840) * _3082) + _2737;
        _2895 = ((_3069 * _842) * _3082) + _2739;
        _2897 = ((_3071 * _843) * _3082) + _2741;
    }
    else
    {
        _2887 = _2399;
        _2889 = _2401;
        _2891 = _2403;
        _2893 = _2737;
        _2895 = _2739;
        _2897 = _2741;
    }
    float _4792 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4803 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4814 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    uint _2917 = _815 + 6u;
    float _2925 = _777 / cbSceneParam._m0[86u].x;
    float _2926 = _778 / cbSceneParam._m0[86u].y;
    vec4 _2940 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2925, _2926, (log2((isnan(cbSceneParam._m0[77u].w) ? _712 : (isnan(_712) ? cbSceneParam._m0[77u].w : min(_712, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2942 = _2940.x;
    float _2943 = _2940.y;
    float _2944 = _2940.z;
    float _2945 = _2940.w;
    float _3017;
    float _3019;
    float _3021;
    float _3023;
    if (_712 > cbSceneParam._m0[78u].w)
    {
        float _2979 = isnan(_712) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _712 : min(cbSceneParam._m0[80u].w, _712));
        float _2980 = _2979 / _712;
        float _2991 = _2980 * _762;
        float _2992 = _763 * _2980;
        float _2993 = (-0.0) - _2992;
        float _2995 = _2980 * _764;
        float _2997 = (cbSceneParam._m0[77u].w * _2993) / _2979;
        float _2998 = _2997 + cbSceneParam._m0[79u].w;
        float _2999 = cbSceneParam._m0[79u].w - _2992;
        float _3005 = sqrt(((_2991 * _2991) + (_2992 * _2992)) + (_2995 * _2995));
        float _3008 = (1.0 - (cbSceneParam._m0[77u].w / _2979)) * _3005;
        float _3013 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3015 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3168;
        if (abs((_2993 - _2997) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3168 = ((((_2998 > 0.0) ? exp2(_3013 * _2998) : (2.0 - exp2(_3015 * _2998))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3008;
        }
        else
        {
            float _3128 = 1.0 / cbSceneParam._m0[80u].x;
            float _3129 = isnan(_2999) ? _2998 : (isnan(_2998) ? _2999 : max(_2998, _2999));
            float _3130 = isnan(_2999) ? _2998 : (isnan(_2998) ? _2999 : min(_2998, _2999));
            float _3139 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : min(_3129, 0.0));
            float _3140 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : min(_3130, 0.0));
            _3168 = ((abs(_3005 / _2993) * cbSceneParam._m0[80u].y) * ((((_3139 - _3140) * 2.0) - ((exp2(_3013 * (isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0)))) - exp2(_3013 * (isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0))))) * _3128)) - ((exp2(_3015 * _3139) - exp2(_3015 * _3140)) * _3128))) + (_3008 * cbSceneParam._m0[80u].z);
        }
        vec4 _3170 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2925, _2926, 1.0), 0.0);
        float _3179 = exp2((_3168 * (-1.44269502162933349609375)) * (1.0 - _3170.w));
        float _3180 = log2(_3179);
        float _3196 = log2(_2945);
        _3017 = (exp2(_3196 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].x)) * _3170.x) / cbSceneParam._m0[78u].x)) + _2942;
        _3019 = (exp2(_3196 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].y)) * _3170.y) / cbSceneParam._m0[78u].y)) + _2943;
        _3021 = (exp2(_3196 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].z)) * _3170.z) / cbSceneParam._m0[78u].z)) + _2944;
        _3023 = _3179 * _2945;
    }
    else
    {
        _3017 = _2942;
        _3019 = _2943;
        _3021 = _2944;
        _3023 = _2945;
    }
    float _3035 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3036 = _3035 == 3.0;
    float _3037 = log2(_3023);
    float _3044 = exp2(_3037 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2887 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _855))) + ((_2893 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1665)) * cbPerFrame._m0[3u].x));
    float _3045 = exp2(_3037 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2889 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _855))) + ((_2895 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1665)) * cbPerFrame._m0[3u].x));
    float _3046 = exp2(_3037 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2891 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _855))) + ((_2897 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1665)) * cbPerFrame._m0[3u].x));
    float _3055 = (_3035 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3055 * (_3036 ? _3044 : (_3044 + (cbSceneParam._m0[72u].w * _3017)));
    SV_Target.y = _3055 * (_3036 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3019)));
    SV_Target.z = _3055 * (_3036 ? _3046 : (_3046 + (cbSceneParam._m0[72u].w * _3021)));
    SV_Target.w = cbInstanceData._m0[_2917].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2917].w;
}


