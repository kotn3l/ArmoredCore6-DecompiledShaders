#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1365;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _266.x * cbMtdParam._m0[10u].x;
    float _273 = _266.y * cbMtdParam._m0[10u].y;
    float _274 = _266.z * cbMtdParam._m0[10u].z;
    vec4 _292 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _342 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _352 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _342)) + 1.0;
    float _3976 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _353 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _360 = (_353 * ((_292.x * cbMtdParam._m0[11u].x) - _272)) + _272;
    float _361 = (_353 * ((_292.y * cbMtdParam._m0[11u].y) - _273)) + _273;
    float _362 = (_353 * ((_292.z * cbMtdParam._m0[11u].z) - _274)) + _274;
    vec4 _380 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _411 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _342)) + 1.0;
    float _3987 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _419 = (_412 * ((_380.x * cbMtdParam._m0[12u].x) - _360)) + _360;
    float _420 = (_412 * ((_380.y * cbMtdParam._m0[12u].y) - _361)) + _361;
    float _421 = (_412 * ((_380.z * cbMtdParam._m0[12u].z) - _362)) + _362;
    vec4 _439 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _464 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _342)) + 1.0;
    float _3998 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    vec4 _493 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _501 = ((((_465 * ((_439.x * cbMtdParam._m0[13u].x) - _419)) + _419) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _493.x;
    float _504 = ((((_465 * ((_439.y * cbMtdParam._m0[13u].y) - _420)) + _420) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _493.y;
    float _507 = ((((_465 * ((_439.z * cbMtdParam._m0[13u].z) - _421)) + _421) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _493.z;
    vec4 _527 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _556 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _4009 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _564 = (_557 * ((_527.x * cbMtdParam._m0[14u].x) - _501)) + _501;
    float _565 = (_557 * ((_527.y * cbMtdParam._m0[14u].y) - _504)) + _504;
    float _566 = (_557 * ((_527.z * cbMtdParam._m0[14u].z) - _507)) + _507;
    vec4 _579 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _581 = _579.x;
    float _599 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _581) * _353) + _581;
    float _616 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _599) * _412) + _599;
    float _633 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _616) * _465) + _616;
    float _635 = _633 - (_633 * TEXCOORD_5.x);
    vec4 _651 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _673 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _675 = _673.x;
    float _676 = _673.y;
    float _679 = cbMtdParam._m0[18u].y * _673.z;
    vec4 _691 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _700 = (((cbMtdParam._m0[18u].x * _691.z) - _679) * _353) + _679;
    vec4 _713 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _724 = (((cbMtdParam._m0[17u].w * _713.z) - _700) * _412) + _700;
    vec4 _737 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _746 = (((cbMtdParam._m0[17u].z * _737.z) - _724) * _465) + _724;
    float _751 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_651.z * cbMtdParam._m0[18u].z) - _746)) + _746;
    vec4 _764 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _776 = ((_691.x - _675) * _353) + _675;
    float _777 = ((_691.y - _676) * _353) + _676;
    float _782 = ((_713.x - _776) * _412) + _776;
    float _783 = ((_713.y - _777) * _412) + _777;
    float _792 = ((((_737.x - _782) * _465) + _782) * 2.0) + (-1.0);
    float _793 = ((((_737.y - _783) * _465) + _783) * 2.0) + (-1.0);
    float _794 = dot(vec2(_792, _793), vec2(_792, _793));
    float _4020 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _799 = sqrt(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))));
    float _809 = ((((_764.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _792) + ((((_651.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y);
    float _810 = ((((_764.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _793) + ((((_651.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y);
    float _813 = fma(_799, _236 * NORMAL.x, fma(_810, _243 * TANGENT.x, (_229 * _221) * _809));
    float _816 = fma(_799, _236 * NORMAL.y, fma(_810, _243 * TANGENT.y, (_229 * _222) * _809));
    float _819 = fma(_799, _236 * NORMAL.z, fma(_810, _243 * TANGENT.z, (_229 * _223) * _809));
    float _823 = inversesqrt(dot(vec3(_813, _816, _819), vec3(_813, _816, _819)));
    float _824 = _823 * _813;
    float _825 = _823 * _816;
    float _826 = _823 * _819;
    float _4031 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _827 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4053 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4064 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4075 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _831 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _847 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _897 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _887);
    float _898 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _887);
    float _899 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _887);
    float _903 = inversesqrt(dot(vec3(_897, _898, _899), vec3(_897, _898, _899)));
    float _904 = _897 * _903;
    float _905 = _898 * _903;
    float _906 = _899 * _903;
    float _912 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _913 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _931 = fma(_826, cbSceneParam._m0[5u].z, fma(_825, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _824));
    float _934 = fma(_826, cbSceneParam._m0[6u].z, fma(_825, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _824));
    float _937 = fma(_826, cbSceneParam._m0[7u].z, fma(_825, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _824));
    uint _950 = uint(roundEven(NORMAL.w)) * 13u;
    uint _952 = (_950 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _958 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * cbInstanceData._m0[_952].x;
    float _959 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * cbInstanceData._m0[_952].y;
    float _960 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * cbInstanceData._m0[_952].z;
    float _4086 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _4108 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _964 = 1.0 - _831;
    float _965 = _961 * _964;
    float _966 = _962 * _964;
    float _967 = _963 * _964;
    float _972 = (_961 + (-0.039999999105930328369140625)) * _831;
    float _973 = (_962 + (-0.039999999105930328369140625)) * _831;
    float _974 = (_963 + (-0.039999999105930328369140625)) * _831;
    float _975 = _972 + 0.039999999105930328369140625;
    float _977 = _973 + 0.039999999105930328369140625;
    float _978 = _974 + 0.039999999105930328369140625;
    vec4 _987 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _912, cbSceneParam._m0[86u].y * _913));
    float _990 = _987.x * TEXCOORD_5.w;
    float _991 = dot(vec3(_824, _825, _826), vec3(_904, _905, _906));
    float _994 = _991 * 2.0;
    float _998 = (_994 * _824) - _904;
    float _999 = (_994 * _825) - _905;
    float _1000 = (_994 * _826) - _906;
    float _1004 = abs(dot(vec3(_904, _905, _906), vec3(_824, _825, _826)));
    float _4119 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1006 = sqrt(_827);
    float _1019 = exp2((_1006 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1006 * 3.0));
    float _1025 = (1.0 - _1019) * ((_1006 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1026 = _1019 * _1006;
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1364;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1089 = fma(_1062, cbModelParam._m0[26u].z, fma(_1058, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054));
        float _1093 = fma(_1062, cbModelParam._m0[27u].z, fma(_1058, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054));
        float _1097 = fma(_1062, cbModelParam._m0[28u].z, fma(_1058, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054));
        float _1122 = _1054 + _824;
        float _1123 = _1058 + _825;
        float _1124 = _1062 + _826;
        float _1134 = fma(_1124, cbModelParam._m0[26u].z, fma(_1123, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1122)) - _1089;
        float _1135 = fma(_1124, cbModelParam._m0[27u].z, fma(_1123, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1122)) - _1093;
        float _1136 = fma(_1124, cbModelParam._m0[28u].z, fma(_1123, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1122)) - _1097;
        float _1140 = inversesqrt(dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136)));
        float _1153 = ((_1140 * _1134) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1089 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1140 * _1135) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1093 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1140 * _1136) / cbModelParam._m0[34u].z) + ((((((_1097 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        float _1192 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1158.x + (-0.5));
        float _1194 = _1192 * (_1158.y + (-0.5));
        float _1195 = _1192 * (_1158.z + (-0.5));
        float _1202 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1165.x + (-0.5));
        float _1204 = _1202 * (_1165.y + (-0.5));
        float _1205 = _1202 * (_1165.z + (-0.5));
        float _1212 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1172.x + (-0.5));
        float _1214 = _1212 * (_1172.y + (-0.5));
        float _1215 = _1212 * (_1172.z + (-0.5));
        float _1222 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1179.x + (-0.5));
        float _1224 = _1222 * (_1179.y + (-0.5));
        float _1225 = _1222 * (_1179.z + (-0.5));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = _1193 * 0.5;
        float _1230 = _1203 * 0.5;
        float _1231 = _1213 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1246 = (dot(vec3(_824, _825, _826), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1256 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _4167 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1258 + 1.0))) + _1263) * _1226;
        float _1273 = _1194 * 0.5;
        float _1274 = _1204 * 0.5;
        float _1275 = _1214 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_824, _825, _826), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4200 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1300 + 1.0))) + _1305) * _1227;
        float _1315 = _1195 * 0.5;
        float _1316 = _1205 * 0.5;
        float _1317 = _1215 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_824, _825, _826), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4233 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1342 + 1.0))) + _1347) * _1228;
        _1364 = _1195;
        _1366 = _1194;
        _1367 = _1193;
        _1368 = _1205;
        _1369 = _1204;
        _1370 = _1203;
        _1371 = _1215;
        _1372 = _1214;
        _1373 = _1213;
        _1374 = _1228;
        _1375 = _1227;
        _1376 = _1226;
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
    }
    else
    {
        _1364 = _1365;
        _1366 = _1365;
        _1367 = _1365;
        _1368 = _1365;
        _1369 = _1365;
        _1370 = _1365;
        _1371 = _1365;
        _1372 = _1365;
        _1373 = _1365;
        _1374 = _1365;
        _1375 = _1365;
        _1376 = _1365;
        _1377 = 0.0;
        _1378 = 0.0;
        _1379 = 0.0;
    }
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1405 = fma(_1062, cbModelParam._m0[30u].z, fma(_1058, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1054));
        float _1409 = fma(_1062, cbModelParam._m0[31u].z, fma(_1058, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1054));
        float _1413 = fma(_1062, cbModelParam._m0[32u].z, fma(_1058, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1054));
        float _1436 = _1054 + _824;
        float _1437 = _1058 + _825;
        float _1438 = _1062 + _826;
        float _1448 = fma(_1438, cbModelParam._m0[30u].z, fma(_1437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1436)) - _1405;
        float _1449 = fma(_1438, cbModelParam._m0[31u].z, fma(_1437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1436)) - _1409;
        float _1450 = fma(_1438, cbModelParam._m0[32u].z, fma(_1437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1436)) - _1413;
        float _1454 = inversesqrt(dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450)));
        float _1467 = ((_1454 * _1448) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1405 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1454 * _1449) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1409 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1454 * _1450) / cbModelParam._m0[35u].z) + ((((((_1413 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        float _1504 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1471.x + (-0.5));
        float _1506 = _1504 * (_1471.y + (-0.5));
        float _1507 = _1504 * (_1471.z + (-0.5));
        float _1514 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1478.x + (-0.5));
        float _1516 = _1514 * (_1478.y + (-0.5));
        float _1517 = _1514 * (_1478.z + (-0.5));
        float _1524 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1485.x + (-0.5));
        float _1526 = _1524 * (_1485.y + (-0.5));
        float _1527 = _1524 * (_1485.z + (-0.5));
        float _1534 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1492.x + (-0.5));
        float _1536 = _1534 * (_1492.y + (-0.5));
        float _1537 = _1534 * (_1492.z + (-0.5));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = _1505 * 0.5;
        float _1542 = _1515 * 0.5;
        float _1543 = _1525 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_824, _825, _826), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4296 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1568 + 1.0))) + _1573) * _1538;
        float _1583 = _1506 * 0.5;
        float _1584 = _1516 * 0.5;
        float _1585 = _1526 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_824, _825, _826), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4329 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1610 + 1.0))) + _1615) * _1539;
        float _1625 = _1507 * 0.5;
        float _1626 = _1517 * 0.5;
        float _1627 = _1527 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_824, _825, _826), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4362 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1652 + 1.0))) + _1657) * _1540;
        _1674 = _1507;
        _1675 = _1506;
        _1676 = _1505;
        _1677 = _1517;
        _1678 = _1516;
        _1679 = _1515;
        _1680 = _1527;
        _1681 = _1526;
        _1682 = _1525;
        _1683 = _1540;
        _1684 = _1539;
        _1685 = _1538;
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
    }
    else
    {
        _1674 = _1365;
        _1675 = _1365;
        _1676 = _1365;
        _1677 = _1365;
        _1678 = _1365;
        _1679 = _1365;
        _1680 = _1365;
        _1681 = _1365;
        _1682 = _1365;
        _1683 = _1365;
        _1684 = _1365;
        _1685 = _1365;
        _1686 = 0.0;
        _1687 = 0.0;
        _1688 = 0.0;
    }
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1377)) + _1377;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1378)) + _1378;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1379)) + _1379;
    float _1721 = fma(_1700, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1698 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1700, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1698 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1700, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1698));
    float _1742 = _998 * 0.5;
    float _1743 = _999 * 0.5;
    float _1744 = _1000 * 0.5;
    float _1745 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1748 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1751 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1785;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1758 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1364, _1368, _1371, _1374));
        float _1762 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1366, _1369, _1372, _1375));
        float _1766 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1773 = dot(vec4(cbModelParam._m0[39u]), vec4(_1742, _1743, _1744, 1.0));
        _1785 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1773) ? 0.0 : (isnan(0.0) ? _1773 : max(0.0, _1773))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1785 = 1.0;
    }
    float _1796;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1787 = dot(vec4(cbModelParam._m0[40u]), vec4(_1742, _1743, _1744, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1800 = (_1796 * cbModelParam._m0[1u].x) + (_1785 * (1.0 - cbModelParam._m0[1u].x));
    float _1810 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _827);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1810 : min(cbModelParam._m0[25u].z, _1810));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1859 = fma(_1062, cbModelParam._m0[13u].z, fma(_1058, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1054)) + cbModelParam._m0[13u].w;
        float _1863 = fma(_1062, cbModelParam._m0[14u].z, fma(_1058, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1054)) + cbModelParam._m0[14u].w;
        float _1867 = fma(_1062, cbModelParam._m0[15u].z, fma(_1058, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1054)) + cbModelParam._m0[15u].w;
        float _1870 = fma(_1000, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998));
        float _1873 = fma(_1000, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998));
        float _1876 = fma(_1000, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998));
        float _1904;
        if (_1870 > 0.0)
        {
            _1904 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1904 = frontier_phi_14_12_ladder;
        }
        float _2075;
        if (_1873 > 0.0)
        {
            _2075 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2075 = frontier_phi_23_19_ladder;
        }
        float _2370;
        if (_1876 > 0.0)
        {
            _2370 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2370 = frontier_phi_35_30_ladder;
        }
        float _2372 = isnan(_2075) ? _1904 : (isnan(_1904) ? _2075 : min(_1904, _2075));
        float _2373 = isnan(_2370) ? _2372 : (isnan(_2372) ? _2370 : min(_2372, _2370));
        float _2377 = (_2373 * _1870) + _1859;
        float _2378 = (_2373 * _1873) + _1863;
        float _2379 = (_2373 * _1876) + _1867;
        float _2380 = _2373 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2380;
        float _2384 = _2380 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 > _2384) || ((_2378 < _2382) || ((_2377 < _2382) || (_2377 > _2384))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2524 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2379, cbModelParam._m0[9u].z, fma(_2378, cbModelParam._m0[9u].y, _2377 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2379, cbModelParam._m0[10u].z, fma(_2378, cbModelParam._m0[10u].y, _2377 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2379, cbModelParam._m0[11u].z, fma(_2378, cbModelParam._m0[11u].y, _2377 * cbModelParam._m0[11u].x))), _1811);
            frontier_phi_13_35_ladder = _2524.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2524.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2524.x * cbModelParam._m0[1u].y;
        }
        _1892 = frontier_phi_13_35_ladder_2;
        _1894 = frontier_phi_13_35_ladder_1;
        _1896 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_998, _999, _1000), _1811);
        _1892 = _1880.x * cbModelParam._m0[1u].y;
        _1894 = _1880.y * cbModelParam._m0[1u].y;
        _1896 = _1880.z * cbModelParam._m0[1u].y;
    }
    float _1900 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _827);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1900 : min(cbModelParam._m0[25u].w, _1900));
    float _1990;
    float _1992;
    float _1994;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1954 = fma(_1062, cbModelParam._m0[21u].z, fma(_1058, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1054)) + cbModelParam._m0[21u].w;
        float _1958 = fma(_1062, cbModelParam._m0[22u].z, fma(_1058, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1054)) + cbModelParam._m0[22u].w;
        float _1962 = fma(_1062, cbModelParam._m0[23u].z, fma(_1058, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1054)) + cbModelParam._m0[23u].w;
        float _1965 = fma(_1000, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998));
        float _1968 = fma(_1000, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998));
        float _1971 = fma(_1000, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998));
        float _2080;
        if (_1965 > 0.0)
        {
            _2080 = abs((1.0 - _1954) / _1965);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1954 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2080 = frontier_phi_25_21_ladder;
        }
        float _2397;
        if (_1968 > 0.0)
        {
            _2397 = abs((1.0 - _1958) / _1968);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1958 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2397 = frontier_phi_37_32_ladder;
        }
        float _2735;
        if (_1971 > 0.0)
        {
            _2735 = abs((1.0 - _1962) / _1971);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1962 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2735 = frontier_phi_47_44_ladder;
        }
        float _2737 = isnan(_2397) ? _2080 : (isnan(_2080) ? _2397 : min(_2080, _2397));
        float _2738 = isnan(_2735) ? _2737 : (isnan(_2737) ? _2735 : min(_2737, _2735));
        float _2742 = (_2738 * _1965) + _1954;
        float _2743 = (_2738 * _1968) + _1958;
        float _2744 = (_2738 * _1971) + _1962;
        float _2745 = _2738 * 9.9999997473787516355514526367188e-05;
        float _2746 = (-1.0) - _2745;
        float _2748 = _2745 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2744 > _2748) || ((_2744 < _2746) || ((_2743 > _2748) || ((_2743 < _2746) || ((_2742 < _2746) || (_2742 > _2748))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2744, cbModelParam._m0[17u].z, fma(_2743, cbModelParam._m0[17u].y, _2742 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2744, cbModelParam._m0[18u].z, fma(_2743, cbModelParam._m0[18u].y, _2742 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2744, cbModelParam._m0[19u].z, fma(_2743, cbModelParam._m0[19u].y, _2742 * cbModelParam._m0[19u].x))), _1901);
            frontier_phi_22_47_ladder = _2866.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2866.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2866.x * cbModelParam._m0[1u].z;
        }
        _1990 = frontier_phi_22_47_ladder_2;
        _1992 = frontier_phi_22_47_ladder_1;
        _1994 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_998, _999, _1000), _1901);
        _1990 = _1974.x * cbModelParam._m0[1u].z;
        _1992 = _1974.y * cbModelParam._m0[1u].z;
        _1994 = _1974.z * cbModelParam._m0[1u].z;
    }
    float _2007 = (((_1025 * _975) + _1026) * _990) * ((cbModelParam._m0[1u].w * (_1990 - _1892)) + _1892);
    float _2009 = (((_1025 * _977) + _1026) * _990) * ((cbModelParam._m0[1u].w * (_1992 - _1894)) + _1894);
    float _2011 = (((_1025 * _978) + _1026) * _990) * ((cbModelParam._m0[1u].w * (_1994 - _1896)) + _1896);
    float _2014 = fma(_2011, cbSceneParam._m0[89u].z, fma(_2009, cbSceneParam._m0[89u].y, _2007 * cbSceneParam._m0[89u].x));
    float _2017 = fma(_2011, cbSceneParam._m0[90u].z, fma(_2009, cbSceneParam._m0[90u].y, _2007 * cbSceneParam._m0[90u].x));
    float _2020 = fma(_2011, cbSceneParam._m0[91u].z, fma(_2009, cbSceneParam._m0[91u].y, _2007 * cbSceneParam._m0[91u].x));
    float _2054 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2066 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2067 = _2054 / _2066;
    float _2068 = _2058 / _2066;
    float _2069 = _2062 / _2066;
    float _2216;
    float _2217;
    float _2218;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2096 = ((uint(_2069 > cbSceneParam._m0[59u].y) + uint(_2069 > cbSceneParam._m0[59u].x)) + uint(_2069 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2097 = _2096 + 43u;
        uint _2105 = _2096 + 44u;
        uint _2113 = _2096 + 45u;
        uint _2121 = _2096 + 46u;
        float _2132 = fma(_2066, cbSceneParam._m0[_2097].w, fma(_2062, cbSceneParam._m0[_2097].z, fma(_2058, cbSceneParam._m0[_2097].y, _2054 * cbSceneParam._m0[_2097].x)));
        float _2136 = fma(_2066, cbSceneParam._m0[_2105].w, fma(_2062, cbSceneParam._m0[_2105].z, fma(_2058, cbSceneParam._m0[_2105].y, _2054 * cbSceneParam._m0[_2105].x)));
        float _2144 = fma(_2066, cbSceneParam._m0[_2121].w, fma(_2062, cbSceneParam._m0[_2121].z, fma(_2058, cbSceneParam._m0[_2121].y, _2054 * cbSceneParam._m0[_2121].x)));
        float _2149 = cbSceneParam._m0[33u].z * _2144;
        float _2151 = cbSceneParam._m0[33u].w * _2144;
        float _2154 = fma(_2066, cbSceneParam._m0[_2113].w, fma(_2062, cbSceneParam._m0[_2113].z, fma(_2058, cbSceneParam._m0[_2113].y, _2054 * cbSceneParam._m0[_2113].x))) / _2144;
        float _2202 = (cbSceneParam._m0[33u].x - sqrt(((_2068 * _2068) + (_2067 * _2067)) + (_2069 * _2069))) * cbSceneParam._m0[33u].y;
        float _4488 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2209 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2149 + _2132) / _2144, (_2151 + _2136) / _2144), _2154), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 + _2132) / _2144, (_2136 - _2149) / _2144), _2154), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2132 - _2149) / _2144, (_2136 - _2151) / _2144), _2154), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2132 - _2151) / _2144, (_2149 + _2136) / _2144), _2154), 0.0)).x), vec4(0.25)));
        _2216 = 1.0 - (_2209 * cbSceneParam._m0[34u].x);
        _2217 = 1.0 - (_2209 * cbSceneParam._m0[34u].y);
        _2218 = 1.0 - (_2209 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2216 = 1.0;
        _2217 = 1.0;
        _2218 = 1.0;
    }
    float _2282;
    float _2284;
    float _2286;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2270 = fma(_2066, cbSceneParam._m0[63u].w, fma(_2062, cbSceneParam._m0[63u].z, fma(_2058, cbSceneParam._m0[63u].y, _2054 * cbSceneParam._m0[63u].x)));
        float _2271 = fma(_2066, cbSceneParam._m0[60u].w, fma(_2062, cbSceneParam._m0[60u].z, fma(_2058, cbSceneParam._m0[60u].y, _2054 * cbSceneParam._m0[60u].x))) / _2270;
        float _2272 = fma(_2066, cbSceneParam._m0[61u].w, fma(_2062, cbSceneParam._m0[61u].z, fma(_2058, cbSceneParam._m0[61u].y, _2054 * cbSceneParam._m0[61u].x))) / _2270;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2271 >= cbSceneParam._m0[64u].x) && (_2272 >= cbSceneParam._m0[64u].y)) && (_2271 <= cbSceneParam._m0[64u].z)) && (_2272 <= cbSceneParam._m0[64u].w))
        {
            float _2410 = fma(_2066, cbSceneParam._m0[62u].w, fma(_2062, cbSceneParam._m0[62u].z, fma(_2058, cbSceneParam._m0[62u].y, _2054 * cbSceneParam._m0[62u].x))) / _2270;
            float _2414 = isnan(cbSceneParam._m0[41u].w) ? _2410 : (isnan(_2410) ? cbSceneParam._m0[41u].w : max(_2410, cbSceneParam._m0[41u].w));
            float _2457 = (cbSceneParam._m0[33u].x - sqrt(((_2068 * _2068) + (_2067 * _2067)) + (_2069 * _2069))) * cbSceneParam._m0[33u].y;
            float _4504 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
            float _2464 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2271, cbSceneParam._m0[33u].w + _2272), _2414), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2271, _2272 - cbSceneParam._m0[33u].z), _2414), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2271 - cbSceneParam._m0[33u].z, _2272 - cbSceneParam._m0[33u].w), _2414), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2271 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2272), _2414), 0.0)).x), vec4(0.25)));
            float _2468 = 1.0 - (_2464 * cbSceneParam._m0[34u].x);
            float _2469 = 1.0 - (_2464 * cbSceneParam._m0[34u].y);
            float _2470 = 1.0 - (_2464 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2470) ? _2218 : (isnan(_2218) ? _2470 : min(_2218, _2470));
            frontier_phi_34_33_ladder_1 = isnan(_2469) ? _2217 : (isnan(_2217) ? _2469 : min(_2217, _2469));
            frontier_phi_34_33_ladder_2 = isnan(_2468) ? _2216 : (isnan(_2216) ? _2468 : min(_2216, _2468));
        }
        else
        {
            frontier_phi_34_33_ladder = _2218;
            frontier_phi_34_33_ladder_1 = _2217;
            frontier_phi_34_33_ladder_2 = _2216;
        }
        _2282 = frontier_phi_34_33_ladder_2;
        _2284 = frontier_phi_34_33_ladder_1;
        _2286 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2282 = _2216;
        _2284 = _2217;
        _2286 = _2218;
    }
    uvec4 _2291 = floatBitsToUint(cbInstanceData._m0[_950 + 5u]);
    uint _2293 = _2291.x * 14u;
    uint _2294 = _2293 + 13u;
    float _2301 = _990 + (-1.0);
    float _2306 = (cbLight._m0[_2294].x * _2301) + 1.0;
    float _2307 = (cbLight._m0[_2294].y * _2301) + 1.0;
    float _2308 = (cbLight._m0[_2294].z * _2301) + 1.0;
    float _2309 = (cbLight._m0[_2294].w * _2301) + 1.0;
    uint _2310 = _2293 + 5u;
    float _2316 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
    uint _2320 = _2293 + 4u;
    float _2329 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
    uint _2333 = _2293 | 1u;
    float _2344 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_824, _825, _826));
    float _2347 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_824, _825, _826));
    float _4540 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _4551 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2352 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * 0.3183098733425140380859375;
    float _2354 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * 0.3183098733425140380859375;
    float _2361 = ((cbLight._m0[_2310].x * _2316) * _2354) + (((cbLight._m0[_2320].x * _2282) * _2329) * _2352);
    float _2362 = ((_2316 * cbLight._m0[_2310].y) * _2354) + (((cbLight._m0[_2320].y * _2284) * _2329) * _2352);
    float _2363 = ((_2316 * cbLight._m0[_2310].z) * _2354) + (((cbLight._m0[_2320].z * _2286) * _2329) * _2352);
    uvec4 _2367 = floatBitsToUint(cbLight._m0[_2293 + 12u]);
    bool _2369 = _2367.x == 0u;
    float _2471;
    float _2473;
    float _2475;
    if (_2369)
    {
        _2471 = _2361;
        _2473 = _2362;
        _2475 = _2363;
    }
    else
    {
        uint _2479 = _2293 + 6u;
        float _2495 = (dot(vec3(cbLight._m0[_2293 + 2u].xyz), vec3(_824, _825, _826)) * 0.5) + 0.5;
        float _2496 = _2495 * _2495;
        float _4562 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2497 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2498 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2471 = (((cbLight._m0[_2479].x * 0.3183098733425140380859375) * _2497) * _2498) + _2361;
        _2473 = (((cbLight._m0[_2479].y * 0.3183098733425140380859375) * _2497) * _2498) + _2362;
        _2475 = (((cbLight._m0[_2479].z * 0.3183098733425140380859375) * _2497) * _2498) + _2363;
    }
    bool _2478 = _2367.y == 0u;
    float _2533;
    float _2535;
    float _2537;
    if (_2478)
    {
        _2533 = _2471;
        _2535 = _2473;
        _2537 = _2475;
    }
    else
    {
        uint _2706 = _2293 + 7u;
        float _2722 = (dot(vec3(cbLight._m0[_2293 + 3u].xyz), vec3(_824, _825, _826)) * 0.5) + 0.5;
        float _2723 = _2722 * _2722;
        float _4578 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2724 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2725 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
        _2533 = (((cbLight._m0[_2706].x * 0.3183098733425140380859375) * _2724) * _2725) + _2471;
        _2535 = (((cbLight._m0[_2706].y * 0.3183098733425140380859375) * _2724) * _2725) + _2473;
        _2537 = (((cbLight._m0[_2706].z * 0.3183098733425140380859375) * _2724) * _2725) + _2475;
    }
    uint _2540 = _2293 + 8u;
    float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _827) * 0.949999988079071044921875);
    float _2554 = _2553 * _2553;
    float _2555 = cbLight._m0[_2293].x + _904;
    float _2556 = cbLight._m0[_2293].y + _905;
    float _2557 = cbLight._m0[_2293].z + _906;
    float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
    float _2562 = _2561 * _2555;
    float _2563 = _2561 * _2556;
    float _2564 = _2561 * _2557;
    float _2565 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2293].xyz));
    float _4594 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _4605 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _2569 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
    float _2570 = dot(vec3(_824, _825, _826), vec3(_2562, _2563, _2564));
    float _4616 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2573 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
    float _2574 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2562, _2563, _2564));
    float _4627 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2578 = _2554 * _2554;
    float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
    float _2590 = exp2(log2(1.0 - (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) * 5.0);
    float _2591 = 0.959999978542327880859375 - _972;
    float _2593 = 0.959999978542327880859375 - _973;
    float _2594 = 0.959999978542327880859375 - _974;
    float _2601 = 1.0 - _2554;
    float _2612 = (0.5 / (((_2569 * ((_2568 * _2601) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2601) + _2554) * _2568))) * _2568;
    float _4638 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2614 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
    uint _2628 = _2293 + 9u;
    float _2639 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2333].w)) * _827) * 0.949999988079071044921875);
    float _2640 = _2639 * _2639;
    float _2641 = cbLight._m0[_2333].x + _904;
    float _2642 = cbLight._m0[_2333].y + _905;
    float _2643 = cbLight._m0[_2333].z + _906;
    float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
    float _2648 = _2647 * _2641;
    float _2649 = _2647 * _2642;
    float _2650 = _2647 * _2643;
    float _2651 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2333].xyz));
    float _4649 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2654 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _2655 = dot(vec3(_824, _825, _826), vec3(_2648, _2649, _2650));
    float _4660 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2658 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
    float _2659 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_2648, _2649, _2650));
    float _4671 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2663 = _2640 * _2640;
    float _2667 = ((_2658 * _2658) * (_2663 + (-1.0))) + 1.0;
    float _2674 = exp2(log2(1.0 - (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) * 5.0);
    float _2681 = 1.0 - _2640;
    float _2691 = (0.5 / (((_2569 * ((_2654 * _2681) + _2640)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2681) + _2640) * _2654))) * _2654;
    float _4682 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2693 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2663 / ((_2667 * _2667) * 3.141590118408203125));
    float _2703 = (((((_2674 * _2591) + _975) * cbLight._m0[_2628].x) * _2693) * _2316) + ((((cbLight._m0[_2540].x * _2282) * ((_2590 * _2591) + _975)) * _2614) * _2329);
    float _2704 = (((((_2674 * _2593) + _977) * cbLight._m0[_2628].y) * _2693) * _2316) + ((((cbLight._m0[_2540].y * _2284) * ((_2590 * _2593) + _977)) * _2614) * _2329);
    float _2705 = (((((_2674 * _2594) + _978) * cbLight._m0[_2628].z) * _2693) * _2316) + ((((cbLight._m0[_2540].z * _2286) * ((_2590 * _2594) + _978)) * _2614) * _2329);
    float _2761;
    float _2763;
    float _2765;
    if (_2369)
    {
        _2761 = _2703;
        _2763 = _2704;
        _2765 = _2705;
    }
    else
    {
        uint _2767 = _2293 + 2u;
        uint _2771 = _2293 + 10u;
        float _2785 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2767].w)) * _827) * 0.949999988079071044921875);
        float _2786 = _2785 * _2785;
        float _2787 = cbLight._m0[_2767].x + _904;
        float _2788 = cbLight._m0[_2767].y + _905;
        float _2789 = cbLight._m0[_2767].z + _906;
        float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
        float _2794 = _2793 * _2787;
        float _2795 = _2793 * _2788;
        float _2796 = _2793 * _2789;
        float _2797 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2767].xyz));
        float _4693 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2800 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2801 = dot(vec3(_824, _825, _826), vec3(_2794, _2795, _2796));
        float _4704 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2804 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2805 = dot(vec3(cbLight._m0[_2767].xyz), vec3(_2794, _2795, _2796));
        float _4715 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2809 = _2786 * _2786;
        float _2813 = ((_2804 * _2804) * (_2809 + (-1.0))) + 1.0;
        float _2820 = exp2(log2(1.0 - (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) * 5.0);
        float _2827 = 1.0 - _2786;
        float _2837 = (0.5 / (((_2569 * ((_2800 * _2827) + _2786)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2827) + _2786) * _2800))) * _2800;
        float _4726 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2839 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2809 / ((_2813 * _2813) * 3.141590118408203125));
        float _2840 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2761 = (((((_2820 * _2591) + _975) * cbLight._m0[_2771].x) * _2839) * _2840) + _2703;
        _2763 = (((((_2820 * _2593) + _977) * cbLight._m0[_2771].y) * _2839) * _2840) + _2704;
        _2765 = (((((_2820 * _2594) + _978) * cbLight._m0[_2771].z) * _2839) * _2840) + _2705;
    }
    float _2871;
    float _2873;
    float _2875;
    if (_2478)
    {
        _2871 = _2761;
        _2873 = _2763;
        _2875 = _2765;
    }
    else
    {
        uint _2882 = _2293 + 3u;
        uint _2886 = _2293 + 11u;
        float _2900 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2882].w)) * _827) * 0.949999988079071044921875);
        float _2901 = _2900 * _2900;
        float _2902 = cbLight._m0[_2882].x + _904;
        float _2903 = cbLight._m0[_2882].y + _905;
        float _2904 = cbLight._m0[_2882].z + _906;
        float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
        float _2909 = _2908 * _2902;
        float _2910 = _2908 * _2903;
        float _2911 = _2908 * _2904;
        float _2912 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2882].xyz));
        float _4742 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2915 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2916 = dot(vec3(_824, _825, _826), vec3(_2909, _2910, _2911));
        float _4753 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2919 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _2920 = dot(vec3(cbLight._m0[_2882].xyz), vec3(_2909, _2910, _2911));
        float _4764 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2924 = _2901 * _2901;
        float _2928 = ((_2919 * _2919) * (_2924 + (-1.0))) + 1.0;
        float _2935 = exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0);
        float _2942 = 1.0 - _2901;
        float _2952 = (0.5 / (((_2569 * ((_2915 * _2942) + _2901)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2942) + _2901) * _2915))) * _2915;
        float _4775 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2954 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2924 / ((_2928 * _2928) * 3.141590118408203125));
        float _2955 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
        _2871 = (((((_2935 * _2591) + _975) * cbLight._m0[_2886].x) * _2954) * _2955) + _2761;
        _2873 = (((((_2935 * _2593) + _977) * cbLight._m0[_2886].y) * _2954) * _2955) + _2763;
        _2875 = (((((_2935 * _2594) + _978) * cbLight._m0[_2886].z) * _2954) * _2955) + _2765;
    }
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    float _3029;
    float _3031;
    if (_2291.y == 0u)
    {
        uvec4 _2976 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2977 = _2976.x;
        uint _2988 = uint((float(_2976.y) * floor(float(uint(cbSceneParam._m0[85u].y * _913) / _2977))) + floor(float(uint(cbSceneParam._m0[85u].x * _912) / _2977)));
        float _2998 = (log2(_2069 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2999 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
        uint _3002 = uint(isnan(14.0) ? _2999 : (isnan(_2999) ? 14.0 : min(_2999, 14.0)));
        uvec4 _3007 = texelFetch(g_lightClusterGridBuffer, int(((_3002 << 2u) + (_2988 << 6u)) >> 2u));
        uint _3008 = _3007.x;
        uint _3009 = _2976.z;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        if (((((1u << ((_3009 >> 4u) & 15u)) + 4294967295u) & _3008) == 0u) || ((_3009 & 240u) == 0u))
        {
            _3088 = 0.0;
            _3090 = 0.0;
            _3092 = 0.0;
            _3094 = 0.0;
            _3096 = 0.0;
            _3098 = 0.0;
        }
        else
        {
            float _3089;
            float _3091;
            float _3093;
            float _3095;
            float _3097;
            float _3099;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            uint _3239 = 0u;
            uint _3248;
            bool _3249;
            for (;;)
            {
                _3248 = texelFetch(g_lightClassification, int((((_3002 << 5u) + (_2988 << 9u)) + (_3239 << 2u)) >> 2u)).x;
                _3249 = _3248 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3249)
                {
                    frontier_phi_66_pred = _3238;
                    frontier_phi_66_pred_1 = _3237;
                    frontier_phi_66_pred_2 = _3236;
                    frontier_phi_66_pred_3 = _3235;
                    frontier_phi_66_pred_4 = _3234;
                    frontier_phi_66_pred_5 = _3233;
                }
                else
                {
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    uint _3363;
                    _3357 = _3233;
                    _3358 = _3234;
                    _3359 = _3235;
                    _3360 = _3236;
                    _3361 = _3237;
                    _3362 = _3238;
                    _3363 = _3248;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    for (;;)
                    {
                        uint _3367 = uint(findLSB(_3363)) + (_3239 << 5u);
                        uint _3364 = (_3363 + 4294967295u) & _3363;
                        uint _3369 = _3367 * 48u;
                        vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3369)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 3u)).x));
                        uint _3389 = (_3367 * 48u) + 4u;
                        vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3389)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 3u)).x));
                        uint _3408 = (_3367 * 48u) + 8u;
                        vec3 _3419 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x));
                        float _3423 = _3383.x - _2067;
                        float _3424 = _3383.y - _2068;
                        float _3425 = _3383.z - _2069;
                        float _3426 = dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425));
                        float _3429 = inversesqrt(_3426);
                        float _3430 = _3429 * _3423;
                        float _3431 = _3429 * _3424;
                        float _3432 = _3429 * _3425;
                        float _3433 = dot(vec3(_931, _934, _937), vec3(_3430, _3431, _3432));
                        float _3438 = 1.0 - (_3426 * _3383.w);
                        float _4801 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3439 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3440 = sqrt(_3426) * _3402.w;
                        float _3443 = 1.39999997615814208984375 / (_3440 + 1.39999997615814208984375);
                        float _3444 = _3443 * _3443;
                        float _3447 = ((1.0 - _3444) * _3433) + _3444;
                        float _3450 = _3440 * _3440;
                        float _3454 = ((isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))) * _3439) / ((_3450 * 0.699999988079071044921875) + 1.0);
                        float _3458 = (-0.0) - _2067;
                        float _3459 = (-0.0) - _2068;
                        float _3460 = (-0.0) - _2069;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3465 = _3464 * _3458;
                        float _3466 = _3464 * _3459;
                        float _3467 = _3464 * _3460;
                        float _3474 = exp2(log2(1.0 / ((_3450 * 3.5) + 5.0)) * 0.25);
                        float _3475 = 1.0 - _1006;
                        float _3482 = sqrt(1.0 - ((1.0 - (_3475 * _3475)) * (1.0 - (_3474 * _3474))));
                        float _3483 = _3482 * _3482;
                        float _3484 = _3483 * _3483;
                        float _3485 = _3465 + _3430;
                        float _3486 = _3466 + _3431;
                        float _3487 = _3467 + _3432;
                        float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                        float _3495 = dot(vec3(_931, _934, _937), vec3(_3465, _3466, _3467));
                        float _4817 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3498 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                        float _3499 = dot(vec3(_931, _934, _937), vec3(_3491 * _3485, _3491 * _3486, _3491 * _3487));
                        float _4828 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3502 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                        float _3506 = ((_3502 * _3502) * (_3484 + (-1.0))) + 1.0;
                        float _3507 = _3443 * _3483;
                        float _3508 = _3507 * _3507;
                        float _3511 = ((1.0 - _3508) * _3433) + _3508;
                        float _4839 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3512 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                        float _3513 = 1.0 - _3483;
                        float _3523 = (0.5 / (((_3512 * ((_3498 * _3513) + _3483)) + 9.9999999392252902907785028219223e-09) + (((_3512 * _3513) + _3483) * _3498))) * _3512;
                        float _4850 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3534 = (((_3484 * 3.1415927410125732421875) * (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) / ((_3506 * _3506) * ((_3450 * 2.1991131305694580078125) + 3.141590118408203125))) * _3439;
                        _3292 = (_3454 * _3402.x) + _3360;
                        _3293 = (_3454 * _3402.y) + _3361;
                        _3294 = (_3454 * _3402.z) + _3362;
                        _3289 = (_3534 * _3419.x) + _3357;
                        _3290 = (_3534 * _3419.y) + _3358;
                        _3291 = (_3534 * _3419.z) + _3359;
                        if (_3364 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3357 = _3289;
                            _3358 = _3290;
                            _3359 = _3291;
                            _3360 = _3292;
                            _3361 = _3293;
                            _3362 = _3294;
                            _3363 = _3364;
                        }
                    }
                    frontier_phi_66_pred = _3294;
                    frontier_phi_66_pred_1 = _3293;
                    frontier_phi_66_pred_2 = _3292;
                    frontier_phi_66_pred_3 = _3291;
                    frontier_phi_66_pred_4 = _3290;
                    frontier_phi_66_pred_5 = _3289;
                }
                _3099 = frontier_phi_66_pred;
                _3097 = frontier_phi_66_pred_1;
                _3095 = frontier_phi_66_pred_2;
                _3093 = frontier_phi_66_pred_3;
                _3091 = frontier_phi_66_pred_4;
                _3089 = frontier_phi_66_pred_5;
                uint _3240 = _3239 + 1u;
                if (_3240 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3233 = _3089;
                    _3234 = _3091;
                    _3235 = _3093;
                    _3236 = _3095;
                    _3237 = _3097;
                    _3238 = _3099;
                    _3239 = _3240;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3088 = _3089;
            _3090 = _3091;
            _3092 = _3093;
            _3094 = _3095;
            _3096 = _3097;
            _3098 = _3099;
        }
        uvec4 _3102 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3103 = _3102.z;
        uint _3105 = (_3103 >> 8u) & 15u;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        if (((4294967295u << _3105) & _3008) == 0u)
        {
            _3201 = _3088;
            _3203 = _3090;
            _3205 = _3092;
            _3207 = _3094;
            _3209 = _3096;
            _3211 = _3098;
        }
        else
        {
            float _3226 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
            float _3227 = _3226 * _2067;
            float _3228 = _3226 * _2068;
            float _3229 = _3226 * _2069;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3105 < ((_3103 >> 12u) & 15u))
            {
                float _3202;
                float _3204;
                float _3206;
                float _3208;
                float _3210;
                float _3212;
                float _3340 = _3088;
                float _3341 = _3090;
                float _3342 = _3092;
                float _3343 = _3094;
                float _3344 = _3096;
                float _3345 = _3098;
                uint _3346 = _3105;
                uint _3355;
                bool _3356;
                for (;;)
                {
                    _3355 = texelFetch(g_lightClassification, int((((_3002 << 5u) + (_2988 << 9u)) + (_3346 << 2u)) >> 2u)).x;
                    _3356 = _3355 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3356)
                    {
                        frontier_phi_72_pred = _3345;
                        frontier_phi_72_pred_1 = _3344;
                        frontier_phi_72_pred_2 = _3343;
                        frontier_phi_72_pred_3 = _3342;
                        frontier_phi_72_pred_4 = _3341;
                        frontier_phi_72_pred_5 = _3340;
                    }
                    else
                    {
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3552 = _3340;
                        float _3553 = _3341;
                        float _3554 = _3342;
                        float _3555 = _3343;
                        float _3556 = _3344;
                        float _3557 = _3345;
                        uint _3558 = _3355;
                        uint _3559;
                        vec4 _3584;
                        float _3585;
                        vec4 _3600;
                        vec3 _3612;
                        vec4 _3627;
                        vec4 _3642;
                        float _3689;
                        bool _3690;
                        for (;;)
                        {
                            uint _3569 = ((_3346 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3558));
                            _3559 = (_3558 + 4294967295u) & _3558;
                            uint _3571 = _3569 * 40u;
                            _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            _3585 = _3584.w;
                            uint _3587 = (_3569 * 40u) + 4u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3569 * 40u) + 8u;
                            _3612 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x));
                            uint _3614 = (_3569 * 40u) + 16u;
                            _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3629 = (_3569 * 40u) + 20u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3645 = (_3569 * 40u) + 24u;
                            vec4 _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            uint _3664 = (_3569 * 40u) + 28u;
                            vec4 _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            _3689 = fma(_2069, _3677.z, fma(_2068, _3677.y, _3677.x * _2067)) + _3677.w;
                            _3690 = !((fma(_2069, _3658.z, fma(_2068, _3658.y, _3658.x * _2067)) + _3658.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3690)
                            {
                                float _3717 = _3584.x - _2067;
                                float _3718 = _3584.y - _2068;
                                float _3719 = _3584.z - _2069;
                                float _3720 = dot(vec3(_3717, _3718, _3719), vec3(_3717, _3718, _3719));
                                float _3723 = inversesqrt(_3720);
                                float _3724 = _3723 * _3717;
                                float _3725 = _3723 * _3718;
                                float _3726 = _3723 * _3719;
                                float _3730 = 1.0 - (_3720 / (_3585 * _3585));
                                float _4861 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3731 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3735 = sqrt(_3720) * _3600.w;
                                float _3737 = 1.39999997615814208984375 / (_3735 + 1.39999997615814208984375);
                                float _3738 = _3737 * _3737;
                                float _3741 = ((1.0 - _3738) * dot(vec3(_3724, _3725, _3726), vec3(_931, _934, _937))) + _3738;
                                float _3744 = _3735 * _3735;
                                float _3748 = (fma(_2069, _3627.z, fma(_2068, _3627.y, _3627.x * _2067)) + _3627.w) / _3689;
                                float _3749 = (fma(_2069, _3642.z, fma(_2068, _3642.y, _3642.x * _2067)) + _3642.w) / _3689;
                                float _3753 = 1.0 - dot(vec2(_3748, _3749), vec2(_3748, _3749));
                                float _4877 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3754 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3755 = _3754 * (((isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0))) * _3731) / ((_3744 * 0.699999988079071044921875) + 1.0));
                                float _3767 = exp2(log2(1.0 / ((_3744 * 3.5) + 5.0)) * 0.25);
                                float _3768 = 1.0 - _1006;
                                float _3775 = sqrt(1.0 - ((1.0 - (_3768 * _3768)) * (1.0 - (_3767 * _3767))));
                                float _3776 = _3775 * _3775;
                                float _3777 = _3776 * _3776;
                                float _3778 = _3724 - _3227;
                                float _3779 = _3725 - _3228;
                                float _3780 = _3726 - _3229;
                                float _3784 = inversesqrt(dot(vec3(_3778, _3779, _3780), vec3(_3778, _3779, _3780)));
                                float _3788 = dot(vec3(_931, _934, _937), vec3((-0.0) - _3227, (-0.0) - _3228, (-0.0) - _3229));
                                float _4888 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3791 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3792 = dot(vec3(_931, _934, _937), vec3(_3784 * _3778, _3784 * _3779, _3784 * _3780));
                                float _4899 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3795 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                                float _3799 = ((_3795 * _3795) * (_3777 + (-1.0))) + 1.0;
                                float _3800 = _3737 * _3776;
                                float _3801 = _3800 * _3800;
                                float _3807 = ((1.0 - _3801) * dot(vec3(_931, _934, _937), vec3(_3724, _3725, _3726))) + _3801;
                                float _4910 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3808 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                                float _3809 = 1.0 - _3776;
                                float _3819 = (0.5 / (((_3808 * ((_3791 * _3809) + _3776)) + 9.9999999392252902907785028219223e-09) + (((_3808 * _3809) + _3776) * _3791))) * _3808;
                                float _4921 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3829 = (_3754 * _3731) * (((_3777 * 3.1415927410125732421875) * (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) / ((_3799 * _3799) * ((_3744 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3755 * _3600.y;
                                frontier_phi_78_pred_1 = _3755 * _3600.x;
                                frontier_phi_78_pred_2 = _3829 * _3612.z;
                                frontier_phi_78_pred_3 = _3829 * _3612.y;
                                frontier_phi_78_pred_4 = _3829 * _3612.x;
                                frontier_phi_78_pred_5 = _3755 * _3600.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3837 = frontier_phi_78_pred;
                            _3836 = frontier_phi_78_pred_1;
                            _3835 = frontier_phi_78_pred_2;
                            _3834 = frontier_phi_78_pred_3;
                            _3833 = frontier_phi_78_pred_4;
                            _3838 = frontier_phi_78_pred_5;
                            _3542 = _3836 + _3555;
                            _3543 = _3837 + _3556;
                            _3544 = _3838 + _3557;
                            _3539 = _3833 + _3552;
                            _3540 = _3834 + _3553;
                            _3541 = _3835 + _3554;
                            if (_3559 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3559;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3544;
                        frontier_phi_72_pred_1 = _3543;
                        frontier_phi_72_pred_2 = _3542;
                        frontier_phi_72_pred_3 = _3541;
                        frontier_phi_72_pred_4 = _3540;
                        frontier_phi_72_pred_5 = _3539;
                    }
                    _3212 = frontier_phi_72_pred;
                    _3210 = frontier_phi_72_pred_1;
                    _3208 = frontier_phi_72_pred_2;
                    _3206 = frontier_phi_72_pred_3;
                    _3204 = frontier_phi_72_pred_4;
                    _3202 = frontier_phi_72_pred_5;
                    uint _3347 = _3346 + 1u;
                    if (_3347 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3340 = _3202;
                        _3341 = _3204;
                        _3342 = _3206;
                        _3343 = _3208;
                        _3344 = _3210;
                        _3345 = _3212;
                        _3346 = _3347;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3212;
                frontier_phi_60_61_ladder_1 = _3210;
                frontier_phi_60_61_ladder_2 = _3206;
                frontier_phi_60_61_ladder_3 = _3204;
                frontier_phi_60_61_ladder_4 = _3202;
                frontier_phi_60_61_ladder_5 = _3208;
            }
            else
            {
                frontier_phi_60_61_ladder = _3098;
                frontier_phi_60_61_ladder_1 = _3096;
                frontier_phi_60_61_ladder_2 = _3092;
                frontier_phi_60_61_ladder_3 = _3090;
                frontier_phi_60_61_ladder_4 = _3088;
                frontier_phi_60_61_ladder_5 = _3094;
            }
            _3201 = frontier_phi_60_61_ladder_4;
            _3203 = frontier_phi_60_61_ladder_3;
            _3205 = frontier_phi_60_61_ladder_2;
            _3207 = frontier_phi_60_61_ladder_5;
            _3209 = frontier_phi_60_61_ladder_1;
            _3211 = frontier_phi_60_61_ladder;
        }
        float _3216 = isnan(1.0) ? _990 : (isnan(_990) ? 1.0 : min(_990, 1.0));
        _3021 = (_3216 * _3207) + _2533;
        _3023 = (_3216 * _3209) + _2535;
        _3025 = (_3216 * _3211) + _2537;
        _3027 = ((_3201 * _975) * _3216) + _2871;
        _3029 = ((_3203 * _977) * _3216) + _2873;
        _3031 = ((_3205 * _978) * _3216) + _2875;
    }
    else
    {
        _3021 = _2533;
        _3023 = _2535;
        _3025 = _2537;
        _3027 = _2871;
        _3029 = _2873;
        _3031 = _2875;
    }
    float _4937 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4948 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4959 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    uint _3051 = _950 + 6u;
    float _3059 = _912 / cbSceneParam._m0[86u].x;
    float _3060 = _913 / cbSceneParam._m0[86u].y;
    vec4 _3074 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3059, _3060, (log2((isnan(cbSceneParam._m0[77u].w) ? _847 : (isnan(_847) ? cbSceneParam._m0[77u].w : min(_847, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3076 = _3074.x;
    float _3077 = _3074.y;
    float _3078 = _3074.z;
    float _3079 = _3074.w;
    float _3151;
    float _3153;
    float _3155;
    float _3157;
    if (_847 > cbSceneParam._m0[78u].w)
    {
        float _3113 = isnan(_847) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _847 : min(cbSceneParam._m0[80u].w, _847));
        float _3114 = _3113 / _847;
        float _3125 = _3114 * _897;
        float _3126 = _898 * _3114;
        float _3127 = (-0.0) - _3126;
        float _3129 = _3114 * _899;
        float _3131 = (cbSceneParam._m0[77u].w * _3127) / _3113;
        float _3132 = _3131 + cbSceneParam._m0[79u].w;
        float _3133 = cbSceneParam._m0[79u].w - _3126;
        float _3139 = sqrt(((_3125 * _3125) + (_3126 * _3126)) + (_3129 * _3129));
        float _3142 = (1.0 - (cbSceneParam._m0[77u].w / _3113)) * _3139;
        float _3147 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3149 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3302;
        if (abs((_3127 - _3131) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3302 = ((((_3132 > 0.0) ? exp2(_3147 * _3132) : (2.0 - exp2(_3149 * _3132))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3142;
        }
        else
        {
            float _3262 = 1.0 / cbSceneParam._m0[80u].x;
            float _3263 = isnan(_3133) ? _3132 : (isnan(_3132) ? _3133 : max(_3132, _3133));
            float _3264 = isnan(_3133) ? _3132 : (isnan(_3132) ? _3133 : min(_3132, _3133));
            float _3273 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : min(_3263, 0.0));
            float _3274 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : min(_3264, 0.0));
            _3302 = ((abs(_3139 / _3127) * cbSceneParam._m0[80u].y) * ((((_3273 - _3274) * 2.0) - ((exp2(_3147 * (isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0)))) - exp2(_3147 * (isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0))))) * _3262)) - ((exp2(_3149 * _3273) - exp2(_3149 * _3274)) * _3262))) + (_3142 * cbSceneParam._m0[80u].z);
        }
        vec4 _3304 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3059, _3060, 1.0), 0.0);
        float _3313 = exp2((_3302 * (-1.44269502162933349609375)) * (1.0 - _3304.w));
        float _3314 = log2(_3313);
        float _3330 = log2(_3079);
        _3151 = (exp2(_3330 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].x)) * _3304.x) / cbSceneParam._m0[78u].x)) + _3076;
        _3153 = (exp2(_3330 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].y)) * _3304.y) / cbSceneParam._m0[78u].y)) + _3077;
        _3155 = (exp2(_3330 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].z)) * _3304.z) / cbSceneParam._m0[78u].z)) + _3078;
        _3157 = _3313 * _3079;
    }
    else
    {
        _3151 = _3076;
        _3153 = _3077;
        _3155 = _3078;
        _3157 = _3079;
    }
    float _3169 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3170 = _3169 == 3.0;
    float _3171 = log2(_3157);
    float _3178 = exp2(_3171 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_3021 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _990))) + ((_3027 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _3179 = exp2(_3171 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0))) * (_3023 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _990))) + ((_3029 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _3180 = exp2(_3171 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0))) * (_3025 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _990))) + ((_3031 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _3189 = (_3169 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3189 * (_3170 ? _3178 : (_3178 + (cbSceneParam._m0[72u].w * _3151)));
    SV_Target.y = _3189 * (_3170 ? _3179 : (_3179 + (cbSceneParam._m0[72u].w * _3153)));
    SV_Target.z = _3189 * (_3170 ? _3180 : (_3180 + (cbSceneParam._m0[72u].w * _3155)));
    SV_Target.w = cbInstanceData._m0[_3051].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3051].w;
}


