#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1241;
float _3908;
float _3909;
float _3910;
float _3911;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _252 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _252.x * cbMtdParam._m0[10u].x;
    float _259 = _252.y * cbMtdParam._m0[10u].y;
    float _260 = _252.z * cbMtdParam._m0[10u].z;
    vec4 _278 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _328 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _338 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _328)) + 1.0;
    float _3920 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _339 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _346 = (_339 * ((_278.x * cbMtdParam._m0[11u].x) - _258)) + _258;
    float _347 = (_339 * ((_278.y * cbMtdParam._m0[11u].y) - _259)) + _259;
    float _348 = (_339 * ((_278.z * cbMtdParam._m0[11u].z) - _260)) + _260;
    vec4 _366 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _397 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _328)) + 1.0;
    float _3931 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _405 = (_398 * ((_366.x * cbMtdParam._m0[12u].x) - _346)) + _346;
    float _406 = (_398 * ((_366.y * cbMtdParam._m0[12u].y) - _347)) + _347;
    float _407 = (_398 * ((_366.z * cbMtdParam._m0[12u].z) - _348)) + _348;
    vec4 _425 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _450 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _328)) + 1.0;
    float _3942 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _458 = (_451 * ((_425.x * cbMtdParam._m0[13u].x) - _405)) + _405;
    float _459 = (_451 * ((_425.y * cbMtdParam._m0[13u].y) - _406)) + _406;
    float _460 = (_451 * ((_425.z * cbMtdParam._m0[13u].z) - _407)) + _407;
    vec4 _473 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _475 = _473.x;
    float _493 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _475) * _339) + _475;
    float _511 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _493) * _398) + _493;
    float _528 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _511) * _451) + _511;
    vec4 _540 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _542 = _540.x;
    float _543 = _540.y;
    float _549 = cbMtdParam._m0[18u].y * _540.z;
    vec4 _561 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _570 = (((cbMtdParam._m0[18u].x * _561.z) - _549) * _339) + _549;
    vec4 _583 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _594 = (((cbMtdParam._m0[17u].w * _583.z) - _570) * _398) + _570;
    vec4 _607 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _616 = (((cbMtdParam._m0[17u].z * _607.z) - _594) * _451) + _594;
    float _621 = ((_561.x - _542) * _339) + _542;
    float _622 = ((_561.y - _543) * _339) + _543;
    float _627 = ((_583.x - _621) * _398) + _621;
    float _628 = ((_583.y - _622) * _398) + _622;
    float _637 = ((((_607.x - _627) * _451) + _627) * 2.0) + (-1.0);
    float _639 = ((((_607.y - _628) * _451) + _628) * 2.0) + (-1.0);
    float _640 = dot(vec2(_637, _639), vec2(_637, _639));
    float _3953 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _645 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    float _648 = fma(_645, _222 * NORMAL.x, fma(_639, _229 * TANGENT.x, (_215 * _207) * _637));
    float _651 = fma(_645, _222 * NORMAL.y, fma(_639, _229 * TANGENT.y, (_215 * _208) * _637));
    float _654 = fma(_645, _222 * NORMAL.z, fma(_639, _229 * TANGENT.z, (_215 * _209) * _637));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    float _659 = _658 * _648;
    float _660 = _658 * _651;
    float _661 = _658 * _654;
    float _3964 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _662 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3986 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3997 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4008 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _666 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _682 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _732 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _722);
    float _733 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _722);
    float _734 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _722);
    float _738 = inversesqrt(dot(vec3(_732, _733, _734), vec3(_732, _733, _734)));
    float _739 = _732 * _738;
    float _740 = _733 * _738;
    float _741 = _734 * _738;
    vec4 _746 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _748 = _746.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _920 = sqrt(((_732 * _732) + (_733 * _733)) + (_734 * _734));
        float _926 = (cbMatDynParam._m0[5u].x * _920) + cbMatDynParam._m0[5u].y;
        float _4019 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _931 = (cbMatDynParam._m0[5u].z * _920) + cbMatDynParam._m0[5u].w;
        float _4030 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) - _927)) + _927) < ((_748 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _759 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _760 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _778 = fma(_661, cbSceneParam._m0[5u].z, fma(_660, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _659));
    float _781 = fma(_661, cbSceneParam._m0[6u].z, fma(_660, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _659));
    float _784 = fma(_661, cbSceneParam._m0[7u].z, fma(_660, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _659));
    uint _797 = uint(roundEven(NORMAL.w)) * 13u;
    uint _798 = _797 + 9u;
    uint _799 = _798 + uint(cbMatDynParam._m0[0u].w);
    float _805 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * cbInstanceData._m0[_799].x;
    float _806 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * cbInstanceData._m0[_799].y;
    float _807 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_799].z;
    float _4041 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _811 = 1.0 - _666;
    float _812 = _808 * _811;
    float _813 = _809 * _811;
    float _814 = _810 * _811;
    float _819 = (_808 + (-0.039999999105930328369140625)) * _666;
    float _820 = (_809 + (-0.039999999105930328369140625)) * _666;
    float _821 = (_810 + (-0.039999999105930328369140625)) * _666;
    float _822 = _819 + 0.039999999105930328369140625;
    float _824 = _820 + 0.039999999105930328369140625;
    float _825 = _821 + 0.039999999105930328369140625;
    vec4 _834 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _759, cbSceneParam._m0[86u].y * _760));
    float _837 = _834.x * TEXCOORD_5.w;
    float _838 = dot(vec3(_659, _660, _661), vec3(_739, _740, _741));
    float _841 = _838 * 2.0;
    float _845 = (_841 * _659) - _739;
    float _846 = (_841 * _660) - _740;
    float _847 = (_841 * _661) - _741;
    float _851 = abs(dot(vec3(_739, _740, _741), vec3(_659, _660, _661)));
    float _4074 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _853 = sqrt(_662);
    float _866 = exp2((_853 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_853 * 3.0));
    float _872 = (1.0 - _866) * ((_853 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _873 = _866 * _853;
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1240;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _965 = fma(_909, cbModelParam._m0[26u].z, fma(_905, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _901));
        float _969 = fma(_909, cbModelParam._m0[27u].z, fma(_905, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _901));
        float _973 = fma(_909, cbModelParam._m0[28u].z, fma(_905, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _901));
        float _998 = _901 + _659;
        float _999 = _905 + _660;
        float _1000 = _909 + _661;
        float _1010 = fma(_1000, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998)) - _965;
        float _1011 = fma(_1000, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998)) - _969;
        float _1012 = fma(_1000, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998)) - _973;
        float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
        float _1029 = ((_1016 * _1010) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_965 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1016 * _1011) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_969 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1016 * _1012) / cbModelParam._m0[34u].z) + ((((((_973 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        float _1068 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1034.x + (-0.5));
        float _1070 = _1068 * (_1034.y + (-0.5));
        float _1071 = _1068 * (_1034.z + (-0.5));
        float _1078 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1041.x + (-0.5));
        float _1080 = _1078 * (_1041.y + (-0.5));
        float _1081 = _1078 * (_1041.z + (-0.5));
        float _1088 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1048.x + (-0.5));
        float _1090 = _1088 * (_1048.y + (-0.5));
        float _1091 = _1088 * (_1048.z + (-0.5));
        float _1098 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1055.x + (-0.5));
        float _1100 = _1098 * (_1055.y + (-0.5));
        float _1101 = _1098 * (_1055.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1122 = (dot(vec3(_659, _660, _661), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1132 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _4122 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1134 + 1.0))) + _1139) * _1102;
        float _1149 = _1070 * 0.5;
        float _1150 = _1080 * 0.5;
        float _1151 = _1090 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_659, _660, _661), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _4155 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1176 + 1.0))) + _1181) * _1103;
        float _1191 = _1071 * 0.5;
        float _1192 = _1081 * 0.5;
        float _1193 = _1091 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_659, _660, _661), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _4188 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1218 + 1.0))) + _1223) * _1104;
        _1240 = _1071;
        _1242 = _1070;
        _1243 = _1069;
        _1244 = _1081;
        _1245 = _1080;
        _1246 = _1079;
        _1247 = _1091;
        _1248 = _1090;
        _1249 = _1089;
        _1250 = _1104;
        _1251 = _1103;
        _1252 = _1102;
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _1241;
        _1242 = _1241;
        _1243 = _1241;
        _1244 = _1241;
        _1245 = _1241;
        _1246 = _1241;
        _1247 = _1241;
        _1248 = _1241;
        _1249 = _1241;
        _1250 = _1241;
        _1251 = _1241;
        _1252 = _1241;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1284 = fma(_909, cbModelParam._m0[30u].z, fma(_905, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _901));
        float _1288 = fma(_909, cbModelParam._m0[31u].z, fma(_905, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _901));
        float _1292 = fma(_909, cbModelParam._m0[32u].z, fma(_905, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _901));
        float _1315 = _901 + _659;
        float _1316 = _905 + _660;
        float _1317 = _909 + _661;
        float _1327 = fma(_1317, cbModelParam._m0[30u].z, fma(_1316, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1315)) - _1284;
        float _1328 = fma(_1317, cbModelParam._m0[31u].z, fma(_1316, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1315)) - _1288;
        float _1329 = fma(_1317, cbModelParam._m0[32u].z, fma(_1316, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1315)) - _1292;
        float _1333 = inversesqrt(dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329)));
        float _1346 = ((_1333 * _1327) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1284 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1333 * _1328) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1288 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1333 * _1329) / cbModelParam._m0[35u].z) + ((((((_1292 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        float _1383 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1350.x + (-0.5));
        float _1385 = _1383 * (_1350.y + (-0.5));
        float _1386 = _1383 * (_1350.z + (-0.5));
        float _1393 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1357.x + (-0.5));
        float _1395 = _1393 * (_1357.y + (-0.5));
        float _1396 = _1393 * (_1357.z + (-0.5));
        float _1403 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1364.x + (-0.5));
        float _1405 = _1403 * (_1364.y + (-0.5));
        float _1406 = _1403 * (_1364.z + (-0.5));
        float _1413 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1371.x + (-0.5));
        float _1415 = _1413 * (_1371.y + (-0.5));
        float _1416 = _1413 * (_1371.z + (-0.5));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = _1384 * 0.5;
        float _1421 = _1394 * 0.5;
        float _1422 = _1404 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_659, _660, _661), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4251 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1447 + 1.0))) + _1452) * _1417;
        float _1462 = _1385 * 0.5;
        float _1463 = _1395 * 0.5;
        float _1464 = _1405 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_659, _660, _661), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4284 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1489 + 1.0))) + _1494) * _1418;
        float _1504 = _1386 * 0.5;
        float _1505 = _1396 * 0.5;
        float _1506 = _1406 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_659, _660, _661), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4317 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1531 + 1.0))) + _1536) * _1419;
        _1553 = _1386;
        _1554 = _1385;
        _1555 = _1384;
        _1556 = _1396;
        _1557 = _1395;
        _1558 = _1394;
        _1559 = _1406;
        _1560 = _1405;
        _1561 = _1404;
        _1562 = _1419;
        _1563 = _1418;
        _1564 = _1417;
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
    }
    else
    {
        _1553 = _1241;
        _1554 = _1241;
        _1555 = _1241;
        _1556 = _1241;
        _1557 = _1241;
        _1558 = _1241;
        _1559 = _1241;
        _1560 = _1241;
        _1561 = _1241;
        _1562 = _1241;
        _1563 = _1241;
        _1564 = _1241;
        _1565 = 0.0;
        _1566 = 0.0;
        _1567 = 0.0;
    }
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1253)) + _1253;
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1254)) + _1254;
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1255)) + _1255;
    float _1600 = fma(_1579, cbSceneParam._m0[89u].z, fma(_1578, cbSceneParam._m0[89u].y, _1577 * cbSceneParam._m0[89u].x));
    float _1603 = fma(_1579, cbSceneParam._m0[90u].z, fma(_1578, cbSceneParam._m0[90u].y, _1577 * cbSceneParam._m0[90u].x));
    float _1606 = fma(_1579, cbSceneParam._m0[91u].z, fma(_1578, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1577));
    float _1621 = _845 * 0.5;
    float _1622 = _846 * 0.5;
    float _1623 = _847 * 0.5;
    float _1624 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1627 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1630 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1664;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1637 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1240, _1244, _1247, _1250));
        float _1641 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1645 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1652 = dot(vec4(cbModelParam._m0[39u]), vec4(_1621, _1622, _1623, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1675;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1666 = dot(vec4(cbModelParam._m0[40u]), vec4(_1621, _1622, _1623, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1666) ? 0.0 : (isnan(0.0) ? _1666 : max(0.0, _1666))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1679 = (_1675 * cbModelParam._m0[1u].x) + (_1664 * (1.0 - cbModelParam._m0[1u].x));
    float _1689 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _662);
    float _1690 = isnan(_1689) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1689 : min(cbModelParam._m0[25u].z, _1689));
    float _1772;
    float _1774;
    float _1776;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1739 = fma(_909, cbModelParam._m0[13u].z, fma(_905, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901)) + cbModelParam._m0[13u].w;
        float _1743 = fma(_909, cbModelParam._m0[14u].z, fma(_905, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901)) + cbModelParam._m0[14u].w;
        float _1747 = fma(_909, cbModelParam._m0[15u].z, fma(_905, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901)) + cbModelParam._m0[15u].w;
        float _1750 = fma(_847, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845));
        float _1753 = fma(_847, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845));
        float _1756 = fma(_847, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845));
        float _1784;
        if (_1750 > 0.0)
        {
            _1784 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1784 = frontier_phi_17_15_ladder;
        }
        float _1955;
        if (_1753 > 0.0)
        {
            _1955 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1955 = frontier_phi_26_22_ladder;
        }
        float _2251;
        if (_1756 > 0.0)
        {
            _2251 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2251 = frontier_phi_38_33_ladder;
        }
        float _2253 = isnan(_1955) ? _1784 : (isnan(_1784) ? _1955 : min(_1784, _1955));
        float _2254 = isnan(_2251) ? _2253 : (isnan(_2253) ? _2251 : min(_2253, _2251));
        float _2258 = (_2254 * _1750) + _1739;
        float _2259 = (_2254 * _1753) + _1743;
        float _2260 = (_2254 * _1756) + _1747;
        float _2261 = _2254 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2261;
        float _2265 = _2261 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 > _2265) || ((_2259 < _2263) || ((_2258 < _2263) || (_2258 > _2265))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2405 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2260, cbModelParam._m0[9u].z, fma(_2259, cbModelParam._m0[9u].y, _2258 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2260, cbModelParam._m0[10u].z, fma(_2259, cbModelParam._m0[10u].y, _2258 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2260, cbModelParam._m0[11u].z, fma(_2259, cbModelParam._m0[11u].y, _2258 * cbModelParam._m0[11u].x))), _1690);
            frontier_phi_16_38_ladder = _2405.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2405.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2405.x * cbModelParam._m0[1u].y;
        }
        _1772 = frontier_phi_16_38_ladder_2;
        _1774 = frontier_phi_16_38_ladder_1;
        _1776 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_845, _846, _847), _1690);
        _1772 = _1760.x * cbModelParam._m0[1u].y;
        _1774 = _1760.y * cbModelParam._m0[1u].y;
        _1776 = _1760.z * cbModelParam._m0[1u].y;
    }
    float _1780 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _662);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1780 : min(cbModelParam._m0[25u].w, _1780));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1834 = fma(_909, cbModelParam._m0[21u].z, fma(_905, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901)) + cbModelParam._m0[21u].w;
        float _1838 = fma(_909, cbModelParam._m0[22u].z, fma(_905, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901)) + cbModelParam._m0[22u].w;
        float _1842 = fma(_909, cbModelParam._m0[23u].z, fma(_905, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901)) + cbModelParam._m0[23u].w;
        float _1845 = fma(_847, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845));
        float _1848 = fma(_847, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845));
        float _1851 = fma(_847, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845));
        float _1960;
        if (_1845 > 0.0)
        {
            _1960 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1960 = frontier_phi_28_24_ladder;
        }
        float _2278;
        if (_1848 > 0.0)
        {
            _2278 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2278 = frontier_phi_40_35_ladder;
        }
        float _2616;
        if (_1851 > 0.0)
        {
            _2616 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2616 = frontier_phi_50_47_ladder;
        }
        float _2618 = isnan(_2278) ? _1960 : (isnan(_1960) ? _2278 : min(_1960, _2278));
        float _2619 = isnan(_2616) ? _2618 : (isnan(_2618) ? _2616 : min(_2618, _2616));
        float _2623 = (_2619 * _1845) + _1834;
        float _2624 = (_2619 * _1848) + _1838;
        float _2625 = (_2619 * _1851) + _1842;
        float _2626 = _2619 * 9.9999997473787516355514526367188e-05;
        float _2627 = (-1.0) - _2626;
        float _2629 = _2626 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2625 > _2629) || ((_2625 < _2627) || ((_2624 > _2629) || ((_2624 < _2627) || ((_2623 < _2627) || (_2623 > _2629))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2625, cbModelParam._m0[17u].z, fma(_2624, cbModelParam._m0[17u].y, _2623 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2625, cbModelParam._m0[18u].z, fma(_2624, cbModelParam._m0[18u].y, _2623 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2625, cbModelParam._m0[19u].z, fma(_2624, cbModelParam._m0[19u].y, _2623 * cbModelParam._m0[19u].x))), _1781);
            frontier_phi_25_50_ladder = _2747.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2747.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2747.x * cbModelParam._m0[1u].z;
        }
        _1870 = frontier_phi_25_50_ladder_2;
        _1872 = frontier_phi_25_50_ladder_1;
        _1874 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_845, _846, _847), _1781);
        _1870 = _1854.x * cbModelParam._m0[1u].z;
        _1872 = _1854.y * cbModelParam._m0[1u].z;
        _1874 = _1854.z * cbModelParam._m0[1u].z;
    }
    float _1887 = (((_872 * _822) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1870 - _1772)) + _1772);
    float _1889 = (((_872 * _824) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1872 - _1774)) + _1774);
    float _1891 = (((_872 * _825) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1874 - _1776)) + _1776);
    float _1894 = fma(_1891, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1897 = fma(_1891, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1900 = fma(_1891, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, _1887 * cbSceneParam._m0[91u].x));
    float _1934 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1938 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1942 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1946 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1947 = _1934 / _1946;
    float _1948 = _1938 / _1946;
    float _1949 = _1942 / _1946;
    float _2096;
    float _2097;
    float _2098;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1976 = ((uint(_1949 > cbSceneParam._m0[59u].y) + uint(_1949 > cbSceneParam._m0[59u].x)) + uint(_1949 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1977 = _1976 + 43u;
        uint _1985 = _1976 + 44u;
        uint _1993 = _1976 + 45u;
        uint _2001 = _1976 + 46u;
        float _2012 = fma(_1946, cbSceneParam._m0[_1977].w, fma(_1942, cbSceneParam._m0[_1977].z, fma(_1938, cbSceneParam._m0[_1977].y, _1934 * cbSceneParam._m0[_1977].x)));
        float _2016 = fma(_1946, cbSceneParam._m0[_1985].w, fma(_1942, cbSceneParam._m0[_1985].z, fma(_1938, cbSceneParam._m0[_1985].y, _1934 * cbSceneParam._m0[_1985].x)));
        float _2024 = fma(_1946, cbSceneParam._m0[_2001].w, fma(_1942, cbSceneParam._m0[_2001].z, fma(_1938, cbSceneParam._m0[_2001].y, _1934 * cbSceneParam._m0[_2001].x)));
        float _2029 = cbSceneParam._m0[33u].z * _2024;
        float _2031 = cbSceneParam._m0[33u].w * _2024;
        float _2034 = fma(_1946, cbSceneParam._m0[_1993].w, fma(_1942, cbSceneParam._m0[_1993].z, fma(_1938, cbSceneParam._m0[_1993].y, _1934 * cbSceneParam._m0[_1993].x))) / _2024;
        float _2082 = (cbSceneParam._m0[33u].x - sqrt(((_1948 * _1948) + (_1947 * _1947)) + (_1949 * _1949))) * cbSceneParam._m0[33u].y;
        float _4443 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2089 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2029 + _2012) / _2024, (_2031 + _2016) / _2024), _2034), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2031 + _2012) / _2024, (_2016 - _2029) / _2024), _2034), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2012 - _2029) / _2024, (_2016 - _2031) / _2024), _2034), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2012 - _2031) / _2024, (_2029 + _2016) / _2024), _2034), 0.0)).x), vec4(0.25)));
        _2096 = 1.0 - (_2089 * cbSceneParam._m0[34u].x);
        _2097 = 1.0 - (_2089 * cbSceneParam._m0[34u].y);
        _2098 = 1.0 - (_2089 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2096 = 1.0;
        _2097 = 1.0;
        _2098 = 1.0;
    }
    float _2162;
    float _2164;
    float _2166;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2150 = fma(_1946, cbSceneParam._m0[63u].w, fma(_1942, cbSceneParam._m0[63u].z, fma(_1938, cbSceneParam._m0[63u].y, _1934 * cbSceneParam._m0[63u].x)));
        float _2151 = fma(_1946, cbSceneParam._m0[60u].w, fma(_1942, cbSceneParam._m0[60u].z, fma(_1938, cbSceneParam._m0[60u].y, _1934 * cbSceneParam._m0[60u].x))) / _2150;
        float _2152 = fma(_1946, cbSceneParam._m0[61u].w, fma(_1942, cbSceneParam._m0[61u].z, fma(_1938, cbSceneParam._m0[61u].y, _1934 * cbSceneParam._m0[61u].x))) / _2150;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2151 >= cbSceneParam._m0[64u].x) && (_2152 >= cbSceneParam._m0[64u].y)) && (_2151 <= cbSceneParam._m0[64u].z)) && (_2152 <= cbSceneParam._m0[64u].w))
        {
            float _2291 = fma(_1946, cbSceneParam._m0[62u].w, fma(_1942, cbSceneParam._m0[62u].z, fma(_1938, cbSceneParam._m0[62u].y, _1934 * cbSceneParam._m0[62u].x))) / _2150;
            float _2295 = isnan(cbSceneParam._m0[41u].w) ? _2291 : (isnan(_2291) ? cbSceneParam._m0[41u].w : max(_2291, cbSceneParam._m0[41u].w));
            float _2338 = (cbSceneParam._m0[33u].x - sqrt(((_1948 * _1948) + (_1947 * _1947)) + (_1949 * _1949))) * cbSceneParam._m0[33u].y;
            float _4459 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
            float _2345 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2151, cbSceneParam._m0[33u].w + _2152), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2151, _2152 - cbSceneParam._m0[33u].z), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2151 - cbSceneParam._m0[33u].z, _2152 - cbSceneParam._m0[33u].w), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2151 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2152), _2295), 0.0)).x), vec4(0.25)));
            float _2349 = 1.0 - (_2345 * cbSceneParam._m0[34u].x);
            float _2350 = 1.0 - (_2345 * cbSceneParam._m0[34u].y);
            float _2351 = 1.0 - (_2345 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2351) ? _2098 : (isnan(_2098) ? _2351 : min(_2098, _2351));
            frontier_phi_37_36_ladder_1 = isnan(_2350) ? _2097 : (isnan(_2097) ? _2350 : min(_2097, _2350));
            frontier_phi_37_36_ladder_2 = isnan(_2349) ? _2096 : (isnan(_2096) ? _2349 : min(_2096, _2349));
        }
        else
        {
            frontier_phi_37_36_ladder = _2098;
            frontier_phi_37_36_ladder_1 = _2097;
            frontier_phi_37_36_ladder_2 = _2096;
        }
        _2162 = frontier_phi_37_36_ladder_2;
        _2164 = frontier_phi_37_36_ladder_1;
        _2166 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2162 = _2096;
        _2164 = _2097;
        _2166 = _2098;
    }
    uvec4 _2171 = floatBitsToUint(cbInstanceData._m0[_797 + 5u]);
    uint _2173 = _2171.x * 14u;
    uint _2174 = _2173 + 13u;
    float _2181 = _837 + (-1.0);
    float _2186 = (cbLight._m0[_2174].x * _2181) + 1.0;
    float _2187 = (cbLight._m0[_2174].y * _2181) + 1.0;
    float _2188 = (cbLight._m0[_2174].z * _2181) + 1.0;
    float _2189 = (cbLight._m0[_2174].w * _2181) + 1.0;
    uint _2190 = _2173 + 5u;
    float _2196 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
    uint _2200 = _2173 + 4u;
    float _2210 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
    uint _2214 = _2173 | 1u;
    float _2225 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_659, _660, _661));
    float _2228 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_659, _660, _661));
    float _4495 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _4506 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2233 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2235 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2242 = ((cbLight._m0[_2190].x * _2196) * _2235) + (((cbLight._m0[_2200].x * _2162) * _2210) * _2233);
    float _2243 = ((_2196 * cbLight._m0[_2190].y) * _2235) + (((cbLight._m0[_2200].y * _2164) * _2210) * _2233);
    float _2244 = ((_2196 * cbLight._m0[_2190].z) * _2235) + (((cbLight._m0[_2200].z * _2166) * _2210) * _2233);
    uvec4 _2248 = floatBitsToUint(cbLight._m0[_2173 + 12u]);
    bool _2250 = _2248.x == 0u;
    float _2352;
    float _2354;
    float _2356;
    if (_2250)
    {
        _2352 = _2242;
        _2354 = _2243;
        _2356 = _2244;
    }
    else
    {
        uint _2360 = _2173 + 6u;
        float _2376 = (dot(vec3(cbLight._m0[_2173 + 2u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2377 = _2376 * _2376;
        float _4517 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2378 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2379 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2352 = (((cbLight._m0[_2360].x * 0.3183098733425140380859375) * _2378) * _2379) + _2242;
        _2354 = (((cbLight._m0[_2360].y * 0.3183098733425140380859375) * _2378) * _2379) + _2243;
        _2356 = (((cbLight._m0[_2360].z * 0.3183098733425140380859375) * _2378) * _2379) + _2244;
    }
    bool _2359 = _2248.y == 0u;
    float _2414;
    float _2416;
    float _2418;
    if (_2359)
    {
        _2414 = _2352;
        _2416 = _2354;
        _2418 = _2356;
    }
    else
    {
        uint _2587 = _2173 + 7u;
        float _2603 = (dot(vec3(cbLight._m0[_2173 + 3u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2604 = _2603 * _2603;
        float _4533 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2605 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2606 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2414 = (((cbLight._m0[_2587].x * 0.3183098733425140380859375) * _2605) * _2606) + _2352;
        _2416 = (((cbLight._m0[_2587].y * 0.3183098733425140380859375) * _2605) * _2606) + _2354;
        _2418 = (((cbLight._m0[_2587].z * 0.3183098733425140380859375) * _2605) * _2606) + _2356;
    }
    uint _2421 = _2173 + 8u;
    float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2173].w)) * _662) * 0.949999988079071044921875);
    float _2435 = _2434 * _2434;
    float _2436 = cbLight._m0[_2173].x + _739;
    float _2437 = cbLight._m0[_2173].y + _740;
    float _2438 = cbLight._m0[_2173].z + _741;
    float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
    float _2443 = _2442 * _2436;
    float _2444 = _2442 * _2437;
    float _2445 = _2442 * _2438;
    float _2446 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2173].xyz));
    float _4549 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _4560 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _2450 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2451 = dot(vec3(_659, _660, _661), vec3(_2443, _2444, _2445));
    float _4571 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2454 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2455 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2443, _2444, _2445));
    float _4582 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2459 = _2435 * _2435;
    float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
    float _2471 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
    float _2472 = 0.959999978542327880859375 - _819;
    float _2474 = 0.959999978542327880859375 - _820;
    float _2475 = 0.959999978542327880859375 - _821;
    float _2482 = 1.0 - _2435;
    float _2493 = (0.5 / (((_2450 * ((_2449 * _2482) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2450 * _2482) + _2435) * _2449))) * _2449;
    float _4593 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2495 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
    uint _2509 = _2173 + 9u;
    float _2520 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _662) * 0.949999988079071044921875);
    float _2521 = _2520 * _2520;
    float _2522 = cbLight._m0[_2214].x + _739;
    float _2523 = cbLight._m0[_2214].y + _740;
    float _2524 = cbLight._m0[_2214].z + _741;
    float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
    float _2529 = _2528 * _2522;
    float _2530 = _2528 * _2523;
    float _2531 = _2528 * _2524;
    float _2532 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2214].xyz));
    float _4604 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2535 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2536 = dot(vec3(_659, _660, _661), vec3(_2529, _2530, _2531));
    float _4615 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2540 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2529, _2530, _2531));
    float _4626 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2544 = _2521 * _2521;
    float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
    float _2555 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
    float _2562 = 1.0 - _2521;
    float _2572 = (0.5 / (((_2450 * ((_2535 * _2562) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2450 * _2562) + _2521) * _2535))) * _2535;
    float _4637 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2574 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
    float _2584 = (((((_2555 * _2472) + _822) * cbLight._m0[_2509].x) * _2574) * _2196) + ((((cbLight._m0[_2421].x * _2162) * ((_2471 * _2472) + _822)) * _2495) * _2210);
    float _2585 = (((((_2555 * _2474) + _824) * cbLight._m0[_2509].y) * _2574) * _2196) + ((((cbLight._m0[_2421].y * _2164) * ((_2471 * _2474) + _824)) * _2495) * _2210);
    float _2586 = (((((_2555 * _2475) + _825) * cbLight._m0[_2509].z) * _2574) * _2196) + ((((cbLight._m0[_2421].z * _2166) * ((_2471 * _2475) + _825)) * _2495) * _2210);
    float _2642;
    float _2644;
    float _2646;
    if (_2250)
    {
        _2642 = _2584;
        _2644 = _2585;
        _2646 = _2586;
    }
    else
    {
        uint _2648 = _2173 + 2u;
        uint _2652 = _2173 + 10u;
        float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2648].w)) * _662) * 0.949999988079071044921875);
        float _2667 = _2666 * _2666;
        float _2668 = cbLight._m0[_2648].x + _739;
        float _2669 = cbLight._m0[_2648].y + _740;
        float _2670 = cbLight._m0[_2648].z + _741;
        float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
        float _2675 = _2674 * _2668;
        float _2676 = _2674 * _2669;
        float _2677 = _2674 * _2670;
        float _2678 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2648].xyz));
        float _4648 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2682 = dot(vec3(_659, _660, _661), vec3(_2675, _2676, _2677));
        float _4659 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2686 = dot(vec3(cbLight._m0[_2648].xyz), vec3(_2675, _2676, _2677));
        float _4670 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2690 = _2667 * _2667;
        float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
        float _2701 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
        float _2708 = 1.0 - _2667;
        float _2718 = (0.5 / (((_2450 * ((_2681 * _2708) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2450 * _2708) + _2667) * _2681))) * _2681;
        float _4681 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2720 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
        float _2721 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2642 = (((((_2701 * _2472) + _822) * cbLight._m0[_2652].x) * _2720) * _2721) + _2584;
        _2644 = (((((_2701 * _2474) + _824) * cbLight._m0[_2652].y) * _2720) * _2721) + _2585;
        _2646 = (((((_2701 * _2475) + _825) * cbLight._m0[_2652].z) * _2720) * _2721) + _2586;
    }
    float _2752;
    float _2754;
    float _2756;
    if (_2359)
    {
        _2752 = _2642;
        _2754 = _2644;
        _2756 = _2646;
    }
    else
    {
        uint _2763 = _2173 + 3u;
        uint _2767 = _2173 + 11u;
        float _2781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2763].w)) * _662) * 0.949999988079071044921875);
        float _2782 = _2781 * _2781;
        float _2783 = cbLight._m0[_2763].x + _739;
        float _2784 = cbLight._m0[_2763].y + _740;
        float _2785 = cbLight._m0[_2763].z + _741;
        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
        float _2790 = _2789 * _2783;
        float _2791 = _2789 * _2784;
        float _2792 = _2789 * _2785;
        float _2793 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2763].xyz));
        float _4697 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2797 = dot(vec3(_659, _660, _661), vec3(_2790, _2791, _2792));
        float _4708 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2800 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2801 = dot(vec3(cbLight._m0[_2763].xyz), vec3(_2790, _2791, _2792));
        float _4719 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2805 = _2782 * _2782;
        float _2809 = ((_2800 * _2800) * (_2805 + (-1.0))) + 1.0;
        float _2816 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
        float _2823 = 1.0 - _2782;
        float _2833 = (0.5 / (((_2450 * ((_2796 * _2823) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2450 * _2823) + _2782) * _2796))) * _2796;
        float _4730 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2835 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2805 / ((_2809 * _2809) * 3.141590118408203125));
        float _2836 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2752 = (((((_2816 * _2472) + _822) * cbLight._m0[_2767].x) * _2835) * _2836) + _2642;
        _2754 = (((((_2816 * _2474) + _824) * cbLight._m0[_2767].y) * _2835) * _2836) + _2644;
        _2756 = (((((_2816 * _2475) + _825) * cbLight._m0[_2767].z) * _2835) * _2836) + _2646;
    }
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    float _2912;
    if (_2171.y == 0u)
    {
        uvec4 _2857 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2858 = _2857.x;
        uint _2869 = uint((float(_2857.y) * floor(float(uint(cbSceneParam._m0[85u].y * _760) / _2858))) + floor(float(uint(cbSceneParam._m0[85u].x * _759) / _2858)));
        float _2879 = (log2(_1949 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2880 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        uint _2883 = uint(isnan(14.0) ? _2880 : (isnan(_2880) ? 14.0 : min(_2880, 14.0)));
        uvec4 _2888 = texelFetch(g_lightClusterGridBuffer, int(((_2883 << 2u) + (_2869 << 6u)) >> 2u));
        uint _2889 = _2888.x;
        uint _2890 = _2857.z;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        if (((((1u << ((_2890 >> 4u) & 15u)) + 4294967295u) & _2889) == 0u) || ((_2890 & 240u) == 0u))
        {
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
        }
        else
        {
            float _2970;
            float _2972;
            float _2974;
            float _2976;
            float _2978;
            float _2980;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            uint _3128 = 0u;
            uint _3137;
            bool _3138;
            for (;;)
            {
                _3137 = texelFetch(g_lightClassification, int((((_2883 << 5u) + (_2869 << 9u)) + (_3128 << 2u)) >> 2u)).x;
                _3138 = _3137 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3138)
                {
                    frontier_phi_71_pred = _3127;
                    frontier_phi_71_pred_1 = _3126;
                    frontier_phi_71_pred_2 = _3125;
                    frontier_phi_71_pred_3 = _3124;
                    frontier_phi_71_pred_4 = _3123;
                    frontier_phi_71_pred_5 = _3122;
                }
                else
                {
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    uint _3273;
                    _3267 = _3122;
                    _3268 = _3123;
                    _3269 = _3124;
                    _3270 = _3125;
                    _3271 = _3126;
                    _3272 = _3127;
                    _3273 = _3137;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    for (;;)
                    {
                        uint _3277 = uint(findLSB(_3273)) + (_3128 << 5u);
                        uint _3274 = (_3273 + 4294967295u) & _3273;
                        uint _3279 = _3277 * 48u;
                        vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 3u)).x));
                        uint _3299 = (_3277 * 48u) + 4u;
                        vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 3u)).x));
                        uint _3318 = (_3277 * 48u) + 8u;
                        vec3 _3329 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x));
                        float _3333 = _3293.x - _1947;
                        float _3334 = _3293.y - _1948;
                        float _3335 = _3293.z - _1949;
                        float _3336 = dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335));
                        float _3339 = inversesqrt(_3336);
                        float _3340 = _3339 * _3333;
                        float _3341 = _3339 * _3334;
                        float _3342 = _3339 * _3335;
                        float _3343 = dot(vec3(_778, _781, _784), vec3(_3340, _3341, _3342));
                        float _3348 = 1.0 - (_3336 * _3293.w);
                        float _4756 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3349 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3350 = sqrt(_3336) * _3312.w;
                        float _3353 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                        float _3354 = _3353 * _3353;
                        float _3357 = ((1.0 - _3354) * _3343) + _3354;
                        float _3360 = _3350 * _3350;
                        float _3364 = ((isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0))) * _3349) / ((_3360 * 0.699999988079071044921875) + 1.0);
                        float _3368 = (-0.0) - _1947;
                        float _3369 = (-0.0) - _1948;
                        float _3370 = (-0.0) - _1949;
                        float _3374 = inversesqrt(dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370)));
                        float _3375 = _3374 * _3368;
                        float _3376 = _3374 * _3369;
                        float _3377 = _3374 * _3370;
                        float _3384 = exp2(log2(1.0 / ((_3360 * 3.5) + 5.0)) * 0.25);
                        float _3385 = 1.0 - _853;
                        float _3392 = sqrt(1.0 - ((1.0 - (_3385 * _3385)) * (1.0 - (_3384 * _3384))));
                        float _3393 = _3392 * _3392;
                        float _3394 = _3393 * _3393;
                        float _3395 = _3375 + _3340;
                        float _3396 = _3376 + _3341;
                        float _3397 = _3377 + _3342;
                        float _3401 = inversesqrt(dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397)));
                        float _3405 = dot(vec3(_778, _781, _784), vec3(_3375, _3376, _3377));
                        float _4772 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3408 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3409 = dot(vec3(_778, _781, _784), vec3(_3401 * _3395, _3401 * _3396, _3401 * _3397));
                        float _4783 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3412 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3416 = ((_3412 * _3412) * (_3394 + (-1.0))) + 1.0;
                        float _3417 = _3353 * _3393;
                        float _3418 = _3417 * _3417;
                        float _3421 = ((1.0 - _3418) * _3343) + _3418;
                        float _4794 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3422 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3423 = 1.0 - _3393;
                        float _3433 = (0.5 / (((_3422 * ((_3408 * _3423) + _3393)) + 9.9999999392252902907785028219223e-09) + (((_3422 * _3423) + _3393) * _3408))) * _3422;
                        float _4805 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3444 = (((_3394 * 3.1415927410125732421875) * (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) / ((_3416 * _3416) * ((_3360 * 2.1991131305694580078125) + 3.141590118408203125))) * _3349;
                        _3197 = (_3364 * _3312.x) + _3270;
                        _3198 = (_3364 * _3312.y) + _3271;
                        _3199 = (_3364 * _3312.z) + _3272;
                        _3194 = (_3444 * _3329.x) + _3267;
                        _3195 = (_3444 * _3329.y) + _3268;
                        _3196 = (_3444 * _3329.z) + _3269;
                        if (_3274 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3267 = _3194;
                            _3268 = _3195;
                            _3269 = _3196;
                            _3270 = _3197;
                            _3271 = _3198;
                            _3272 = _3199;
                            _3273 = _3274;
                        }
                    }
                    frontier_phi_71_pred = _3199;
                    frontier_phi_71_pred_1 = _3198;
                    frontier_phi_71_pred_2 = _3197;
                    frontier_phi_71_pred_3 = _3196;
                    frontier_phi_71_pred_4 = _3195;
                    frontier_phi_71_pred_5 = _3194;
                }
                _2980 = frontier_phi_71_pred;
                _2978 = frontier_phi_71_pred_1;
                _2976 = frontier_phi_71_pred_2;
                _2974 = frontier_phi_71_pred_3;
                _2972 = frontier_phi_71_pred_4;
                _2970 = frontier_phi_71_pred_5;
                uint _3129 = _3128 + 1u;
                if (_3129 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3122 = _2970;
                    _3123 = _2972;
                    _3124 = _2974;
                    _3125 = _2976;
                    _3126 = _2978;
                    _3127 = _2980;
                    _3128 = _3129;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
        }
        uvec4 _2983 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2984 = _2983.z;
        uint _2986 = (_2984 >> 8u) & 15u;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        if (((4294967295u << _2986) & _2889) == 0u)
        {
            _3090 = _2969;
            _3092 = _2971;
            _3094 = _2973;
            _3096 = _2975;
            _3098 = _2977;
            _3100 = _2979;
        }
        else
        {
            float _3115 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
            float _3116 = _3115 * _1947;
            float _3117 = _3115 * _1948;
            float _3118 = _3115 * _1949;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2986 < ((_2984 >> 12u) & 15u))
            {
                float _3091;
                float _3093;
                float _3095;
                float _3097;
                float _3099;
                float _3101;
                float _3250 = _2969;
                float _3251 = _2971;
                float _3252 = _2973;
                float _3253 = _2975;
                float _3254 = _2977;
                float _3255 = _2979;
                uint _3256 = _2986;
                uint _3265;
                bool _3266;
                for (;;)
                {
                    _3265 = texelFetch(g_lightClassification, int((((_2883 << 5u) + (_2869 << 9u)) + (_3256 << 2u)) >> 2u)).x;
                    _3266 = _3265 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3266)
                    {
                        frontier_phi_82_pred = _3255;
                        frontier_phi_82_pred_1 = _3254;
                        frontier_phi_82_pred_2 = _3253;
                        frontier_phi_82_pred_3 = _3252;
                        frontier_phi_82_pred_4 = _3251;
                        frontier_phi_82_pred_5 = _3250;
                    }
                    else
                    {
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3471 = _3250;
                        float _3472 = _3251;
                        float _3473 = _3252;
                        float _3474 = _3253;
                        float _3475 = _3254;
                        float _3476 = _3255;
                        uint _3477 = _3265;
                        uint _3478;
                        vec4 _3503;
                        float _3504;
                        vec4 _3519;
                        vec3 _3531;
                        vec4 _3546;
                        vec4 _3561;
                        float _3608;
                        bool _3609;
                        for (;;)
                        {
                            uint _3488 = ((_3256 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3477));
                            _3478 = (_3477 + 4294967295u) & _3477;
                            uint _3490 = _3488 * 40u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            _3504 = _3503.w;
                            uint _3506 = (_3488 * 40u) + 4u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3521 = (_3488 * 40u) + 8u;
                            _3531 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x));
                            uint _3533 = (_3488 * 40u) + 16u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            uint _3548 = (_3488 * 40u) + 20u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3564 = (_3488 * 40u) + 24u;
                            vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3583 = (_3488 * 40u) + 28u;
                            vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            _3608 = fma(_1949, _3596.z, fma(_1948, _3596.y, _3596.x * _1947)) + _3596.w;
                            _3609 = !((fma(_1949, _3577.z, fma(_1948, _3577.y, _3577.x * _1947)) + _3577.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3609)
                            {
                                float _3636 = _3503.x - _1947;
                                float _3637 = _3503.y - _1948;
                                float _3638 = _3503.z - _1949;
                                float _3639 = dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638));
                                float _3642 = inversesqrt(_3639);
                                float _3643 = _3642 * _3636;
                                float _3644 = _3642 * _3637;
                                float _3645 = _3642 * _3638;
                                float _3649 = 1.0 - (_3639 / (_3504 * _3504));
                                float _4816 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3654 = sqrt(_3639) * _3519.w;
                                float _3656 = 1.39999997615814208984375 / (_3654 + 1.39999997615814208984375);
                                float _3657 = _3656 * _3656;
                                float _3660 = ((1.0 - _3657) * dot(vec3(_3643, _3644, _3645), vec3(_778, _781, _784))) + _3657;
                                float _3663 = _3654 * _3654;
                                float _3667 = (fma(_1949, _3546.z, fma(_1948, _3546.y, _3546.x * _1947)) + _3546.w) / _3608;
                                float _3668 = (fma(_1949, _3561.z, fma(_1948, _3561.y, _3561.x * _1947)) + _3561.w) / _3608;
                                float _3672 = 1.0 - dot(vec2(_3667, _3668), vec2(_3667, _3668));
                                float _4832 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3673 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3674 = _3673 * (((isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0))) * _3650) / ((_3663 * 0.699999988079071044921875) + 1.0));
                                float _3686 = exp2(log2(1.0 / ((_3663 * 3.5) + 5.0)) * 0.25);
                                float _3687 = 1.0 - _853;
                                float _3694 = sqrt(1.0 - ((1.0 - (_3687 * _3687)) * (1.0 - (_3686 * _3686))));
                                float _3695 = _3694 * _3694;
                                float _3696 = _3695 * _3695;
                                float _3697 = _3643 - _3116;
                                float _3698 = _3644 - _3117;
                                float _3699 = _3645 - _3118;
                                float _3703 = inversesqrt(dot(vec3(_3697, _3698, _3699), vec3(_3697, _3698, _3699)));
                                float _3707 = dot(vec3(_778, _781, _784), vec3((-0.0) - _3116, (-0.0) - _3117, (-0.0) - _3118));
                                float _4843 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3710 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3711 = dot(vec3(_778, _781, _784), vec3(_3703 * _3697, _3703 * _3698, _3703 * _3699));
                                float _4854 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3714 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3718 = ((_3714 * _3714) * (_3696 + (-1.0))) + 1.0;
                                float _3719 = _3656 * _3695;
                                float _3720 = _3719 * _3719;
                                float _3726 = ((1.0 - _3720) * dot(vec3(_778, _781, _784), vec3(_3643, _3644, _3645))) + _3720;
                                float _4865 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3727 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3728 = 1.0 - _3695;
                                float _3738 = (0.5 / (((_3727 * ((_3710 * _3728) + _3695)) + 9.9999999392252902907785028219223e-09) + (((_3727 * _3728) + _3695) * _3710))) * _3727;
                                float _4876 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3748 = (_3673 * _3650) * (((_3696 * 3.1415927410125732421875) * (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) / ((_3718 * _3718) * ((_3663 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3674 * _3519.z;
                                frontier_phi_88_pred_1 = _3674 * _3519.y;
                                frontier_phi_88_pred_2 = _3674 * _3519.x;
                                frontier_phi_88_pred_3 = _3748 * _3531.z;
                                frontier_phi_88_pred_4 = _3748 * _3531.y;
                                frontier_phi_88_pred_5 = _3748 * _3531.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3757 = frontier_phi_88_pred;
                            _3756 = frontier_phi_88_pred_1;
                            _3755 = frontier_phi_88_pred_2;
                            _3754 = frontier_phi_88_pred_3;
                            _3753 = frontier_phi_88_pred_4;
                            _3752 = frontier_phi_88_pred_5;
                            _3461 = _3755 + _3474;
                            _3462 = _3756 + _3475;
                            _3463 = _3757 + _3476;
                            _3458 = _3752 + _3471;
                            _3459 = _3753 + _3472;
                            _3460 = _3754 + _3473;
                            if (_3478 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3478;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3463;
                        frontier_phi_82_pred_1 = _3462;
                        frontier_phi_82_pred_2 = _3461;
                        frontier_phi_82_pred_3 = _3460;
                        frontier_phi_82_pred_4 = _3459;
                        frontier_phi_82_pred_5 = _3458;
                    }
                    _3101 = frontier_phi_82_pred;
                    _3099 = frontier_phi_82_pred_1;
                    _3097 = frontier_phi_82_pred_2;
                    _3095 = frontier_phi_82_pred_3;
                    _3093 = frontier_phi_82_pred_4;
                    _3091 = frontier_phi_82_pred_5;
                    uint _3257 = _3256 + 1u;
                    if (_3257 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3250 = _3091;
                        _3251 = _3093;
                        _3252 = _3095;
                        _3253 = _3097;
                        _3254 = _3099;
                        _3255 = _3101;
                        _3256 = _3257;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3097;
                frontier_phi_63_64_ladder_1 = _3101;
                frontier_phi_63_64_ladder_2 = _3099;
                frontier_phi_63_64_ladder_3 = _3095;
                frontier_phi_63_64_ladder_4 = _3093;
                frontier_phi_63_64_ladder_5 = _3091;
            }
            else
            {
                frontier_phi_63_64_ladder = _2975;
                frontier_phi_63_64_ladder_1 = _2979;
                frontier_phi_63_64_ladder_2 = _2977;
                frontier_phi_63_64_ladder_3 = _2973;
                frontier_phi_63_64_ladder_4 = _2971;
                frontier_phi_63_64_ladder_5 = _2969;
            }
            _3090 = frontier_phi_63_64_ladder_5;
            _3092 = frontier_phi_63_64_ladder_4;
            _3094 = frontier_phi_63_64_ladder_3;
            _3096 = frontier_phi_63_64_ladder;
            _3098 = frontier_phi_63_64_ladder_2;
            _3100 = frontier_phi_63_64_ladder_1;
        }
        float _3105 = isnan(1.0) ? _837 : (isnan(_837) ? 1.0 : min(_837, 1.0));
        _2902 = (_3105 * _3096) + _2414;
        _2904 = (_3105 * _3098) + _2416;
        _2906 = (_3105 * _3100) + _2418;
        _2908 = ((_3090 * _822) * _3105) + _2752;
        _2910 = ((_3092 * _824) * _3105) + _2754;
        _2912 = ((_3094 * _825) * _3105) + _2756;
    }
    else
    {
        _2902 = _2414;
        _2904 = _2416;
        _2906 = _2418;
        _2908 = _2752;
        _2910 = _2754;
        _2912 = _2756;
    }
    float _4892 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4903 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4914 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _2929 = ((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2902 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _837))) + ((_2908 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1679)) * cbPerFrame._m0[3u].x);
    float _2930 = ((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2904 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _837))) + ((_2910 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1679)) * cbPerFrame._m0[3u].x);
    float _2931 = ((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2906 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _837))) + ((_2912 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1679)) * cbPerFrame._m0[3u].x);
    uint _2932 = _797 + 6u;
    float _2940 = _759 / cbSceneParam._m0[86u].x;
    float _2941 = _760 / cbSceneParam._m0[86u].y;
    vec4 _2955 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2940, _2941, (log2((isnan(cbSceneParam._m0[77u].w) ? _682 : (isnan(_682) ? cbSceneParam._m0[77u].w : min(_682, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2957 = _2955.x;
    float _2958 = _2955.y;
    float _2959 = _2955.z;
    float _2960 = _2955.w;
    float _3032;
    float _3034;
    float _3036;
    float _3038;
    if (_682 > cbSceneParam._m0[78u].w)
    {
        float _2994 = isnan(_682) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _682 : min(cbSceneParam._m0[80u].w, _682));
        float _2995 = _2994 / _682;
        float _3006 = _2995 * _732;
        float _3007 = _733 * _2995;
        float _3008 = (-0.0) - _3007;
        float _3010 = _2995 * _734;
        float _3012 = (cbSceneParam._m0[77u].w * _3008) / _2994;
        float _3013 = _3012 + cbSceneParam._m0[79u].w;
        float _3014 = cbSceneParam._m0[79u].w - _3007;
        float _3020 = sqrt(((_3006 * _3006) + (_3007 * _3007)) + (_3010 * _3010));
        float _3023 = (1.0 - (cbSceneParam._m0[77u].w / _2994)) * _3020;
        float _3028 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3030 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3207;
        if (abs((_3008 - _3012) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3207 = ((((_3013 > 0.0) ? exp2(_3028 * _3013) : (2.0 - exp2(_3030 * _3013))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3023;
        }
        else
        {
            float _3151 = 1.0 / cbSceneParam._m0[80u].x;
            float _3152 = isnan(_3014) ? _3013 : (isnan(_3013) ? _3014 : max(_3013, _3014));
            float _3153 = isnan(_3014) ? _3013 : (isnan(_3013) ? _3014 : min(_3013, _3014));
            float _3162 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : min(_3152, 0.0));
            float _3163 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : min(_3153, 0.0));
            _3207 = ((abs(_3020 / _3008) * cbSceneParam._m0[80u].y) * ((((_3162 - _3163) * 2.0) - ((exp2(_3028 * (isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0)))) - exp2(_3028 * (isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0))))) * _3151)) - ((exp2(_3030 * _3162) - exp2(_3030 * _3163)) * _3151))) + (_3023 * cbSceneParam._m0[80u].z);
        }
        vec4 _3209 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2940, _2941, 1.0), 0.0);
        float _3218 = exp2((_3207 * (-1.44269502162933349609375)) * (1.0 - _3209.w));
        float _3219 = log2(_3218);
        float _3235 = log2(_2960);
        _3032 = (exp2(_3235 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].x)) * _3209.x) / cbSceneParam._m0[78u].x)) + _2957;
        _3034 = (exp2(_3235 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].y)) * _3209.y) / cbSceneParam._m0[78u].y)) + _2958;
        _3036 = (exp2(_3235 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].z)) * _3209.z) / cbSceneParam._m0[78u].z)) + _2959;
        _3038 = _3218 * _2960;
    }
    else
    {
        _3032 = _2957;
        _3034 = _2958;
        _3036 = _2959;
        _3038 = _2960;
    }
    bool _3245;
    vec4 _3048;
    vec4 _3070;
    float _3072;
    float _3076;
    float _3077;
    float _3078;
    float _3079;
    bool _3089;
    for (;;)
    {
        _3048 = cbMatDynParam._m0[0u];
        float _3050 = roundEven(_3048.y);
        bool _3051 = _3050 == 3.0;
        float _3052 = log2(_3038);
        float _3059 = exp2(_3052 * cbSceneParam._m0[78u].x) * _2929;
        float _3060 = exp2(_3052 * cbSceneParam._m0[78u].y) * _2930;
        float _3061 = exp2(_3052 * cbSceneParam._m0[78u].z) * _2931;
        float _3068 = _748 + (-0.5);
        _3070 = cbMtdParam._m0[1u];
        _3072 = _3070.y * _3068;
        float _3075 = (_3050 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3076 = _3075 * (_3051 ? _3059 : (_3059 + (cbSceneParam._m0[72u].w * _3032)));
        _3077 = _3075 * (_3051 ? _3060 : (_3060 + (cbSceneParam._m0[72u].w * _3034)));
        _3078 = _3075 * (_3051 ? _3061 : (_3061 + (cbSceneParam._m0[72u].w * _3036)));
        _3079 = _3068 * 0.999000012874603271484375;
        _3089 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3089)
        {
            if ((cbInstanceData._m0[_797 + 7u].x + _3079) < 0.5)
            {
                _3245 = true;
                break;
            }
        }
        uint _3186 = _798 + uint(_3048.w);
        if ((cbInstanceData._m0[_3186].w < 1.0) && ((cbInstanceData._m0[_3186].w + _3079) < 0.5))
        {
            _3245 = true;
            break;
        }
        if ((_3072 + 1.0) < _3070.x)
        {
            _3245 = true;
            break;
        }
        _3245 = false;
        break;
    }
    float _3449;
    if (_3245)
    {
        discard_state = true;
        _3449 = 0.0;
    }
    else
    {
        _3449 = cbInstanceData._m0[_2932].w;
    }
    SV_Target.x = _3076;
    SV_Target.y = _3077;
    SV_Target.z = _3078;
    SV_Target.w = _3449;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2932].w;
    discard_exit();
}


