#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1403;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _268 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _268.x * cbMtdParam._m0[10u].x;
    float _275 = _268.y * cbMtdParam._m0[10u].y;
    float _276 = _268.z * cbMtdParam._m0[10u].z;
    vec4 _294 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _344 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _354 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _344)) + 1.0;
    float _3755 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _355 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _362 = (_355 * ((_294.x * cbMtdParam._m0[11u].x) - _274)) + _274;
    float _363 = (_355 * ((_294.y * cbMtdParam._m0[11u].y) - _275)) + _275;
    float _364 = (_355 * ((_294.z * cbMtdParam._m0[11u].z) - _276)) + _276;
    vec4 _382 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _413 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _344)) + 1.0;
    float _3766 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _421 = (_414 * ((_382.x * cbMtdParam._m0[12u].x) - _362)) + _362;
    float _422 = (_414 * ((_382.y * cbMtdParam._m0[12u].y) - _363)) + _363;
    float _423 = (_414 * ((_382.z * cbMtdParam._m0[12u].z) - _364)) + _364;
    vec4 _441 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _466 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _344)) + 1.0;
    float _3777 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _474 = (_467 * ((_441.x * cbMtdParam._m0[13u].x) - _421)) + _421;
    float _475 = (_467 * ((_441.y * cbMtdParam._m0[13u].y) - _422)) + _422;
    float _476 = (_467 * ((_441.z * cbMtdParam._m0[13u].z) - _423)) + _423;
    vec4 _496 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _525 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3788 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _533 = (_526 * ((_496.x * cbMtdParam._m0[14u].x) - _474)) + _474;
    float _534 = (_526 * ((_496.y * cbMtdParam._m0[14u].y) - _475)) + _475;
    float _535 = (_526 * ((_496.z * cbMtdParam._m0[14u].z) - _476)) + _476;
    vec4 _555 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _583 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _3799 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _591 = (_584 * ((_555.x * cbMtdParam._m0[15u].x) - _533)) + _533;
    float _592 = (_584 * ((_555.y * cbMtdParam._m0[15u].y) - _534)) + _534;
    float _593 = (_584 * ((_555.z * cbMtdParam._m0[15u].z) - _535)) + _535;
    vec4 _606 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _608 = _606.x;
    float _626 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _608) * _355) + _608;
    float _644 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _626) * _414) + _626;
    float _661 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _644) * _467) + _644;
    float _663 = _661 - (_661 * TEXCOORD_5.x);
    vec4 _679 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _701 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _703 = _701.x;
    float _704 = _701.y;
    float _707 = cbMtdParam._m0[18u].y * _701.z;
    vec4 _719 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _728 = (((cbMtdParam._m0[18u].x * _719.z) - _707) * _355) + _707;
    vec4 _741 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _752 = (((cbMtdParam._m0[17u].w * _741.z) - _728) * _414) + _728;
    vec4 _765 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _774 = (((cbMtdParam._m0[17u].z * _765.z) - _752) * _467) + _752;
    float _779 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_679.z * cbMtdParam._m0[18u].z) - _774)) + _774;
    vec4 _792 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _806 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_792.z * cbMtdParam._m0[19u].y) - _779)) + _779;
    float _811 = ((_719.x - _703) * _355) + _703;
    float _812 = ((_719.y - _704) * _355) + _704;
    float _817 = ((_741.x - _811) * _414) + _811;
    float _818 = ((_741.y - _812) * _414) + _812;
    float _827 = ((((_765.x - _817) * _467) + _817) * 2.0) + (-1.0);
    float _828 = ((((_765.y - _818) * _467) + _818) * 2.0) + (-1.0);
    float _829 = dot(vec2(_827, _828), vec2(_827, _828));
    float _3810 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _834 = sqrt(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))));
    float _847 = (((((_679.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _827) + ((((_792.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _848 = (((((_679.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _828) + ((((_792.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _851 = fma(_834, _238 * NORMAL.x, fma(_848, _245 * TANGENT.x, (_231 * _223) * _847));
    float _854 = fma(_834, _238 * NORMAL.y, fma(_848, _245 * TANGENT.y, (_231 * _224) * _847));
    float _857 = fma(_834, _238 * NORMAL.z, fma(_848, _245 * TANGENT.z, (_231 * _225) * _847));
    float _861 = inversesqrt(dot(vec3(_851, _854, _857), vec3(_851, _854, _857)));
    float _862 = _861 * _851;
    float _863 = _861 * _854;
    float _864 = _861 * _857;
    float _3821 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _865 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _3843 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _3854 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3865 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _869 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _885 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _935 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _925);
    float _936 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _925);
    float _937 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _925);
    float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
    float _942 = _935 * _941;
    float _943 = _936 * _941;
    float _944 = _937 * _941;
    float _950 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _951 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _969 = fma(_864, cbSceneParam._m0[5u].z, fma(_863, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _862));
    float _972 = fma(_864, cbSceneParam._m0[6u].z, fma(_863, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _862));
    float _975 = fma(_864, cbSceneParam._m0[7u].z, fma(_863, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _862));
    uint _988 = uint(roundEven(NORMAL.w)) * 13u;
    uint _990 = (_988 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _996 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * cbInstanceData._m0[_990].x;
    float _997 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * cbInstanceData._m0[_990].y;
    float _998 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * cbInstanceData._m0[_990].z;
    float _3876 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _3898 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _1002 = 1.0 - _869;
    float _1003 = _999 * _1002;
    float _1004 = _1000 * _1002;
    float _1005 = _1001 * _1002;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _869;
    float _1011 = (_1000 + (-0.039999999105930328369140625)) * _869;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _869;
    float _1013 = _1010 + 0.039999999105930328369140625;
    float _1015 = _1011 + 0.039999999105930328369140625;
    float _1016 = _1012 + 0.039999999105930328369140625;
    vec4 _1025 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _950, cbSceneParam._m0[86u].y * _951));
    float _1028 = _1025.x * TEXCOORD_5.w;
    float _1029 = dot(vec3(_862, _863, _864), vec3(_942, _943, _944));
    float _1032 = _1029 * 2.0;
    float _1036 = (_1032 * _862) - _942;
    float _1037 = (_1032 * _863) - _943;
    float _1038 = (_1032 * _864) - _944;
    float _1042 = abs(dot(vec3(_942, _943, _944), vec3(_862, _863, _864)));
    float _3909 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1044 = sqrt(_865);
    float _1057 = exp2((_1044 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1044 * 3.0));
    float _1063 = (1.0 - _1057) * ((_1044 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1064 = _1057 * _1044;
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1402;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1127 = fma(_1100, cbModelParam._m0[26u].z, fma(_1096, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1092));
        float _1131 = fma(_1100, cbModelParam._m0[27u].z, fma(_1096, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1092));
        float _1135 = fma(_1100, cbModelParam._m0[28u].z, fma(_1096, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1092));
        float _1160 = _1092 + _862;
        float _1161 = _1096 + _863;
        float _1162 = _1100 + _864;
        float _1172 = fma(_1162, cbModelParam._m0[26u].z, fma(_1161, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1160)) - _1127;
        float _1173 = fma(_1162, cbModelParam._m0[27u].z, fma(_1161, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1160)) - _1131;
        float _1174 = fma(_1162, cbModelParam._m0[28u].z, fma(_1161, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1160)) - _1135;
        float _1178 = inversesqrt(dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174)));
        float _1191 = ((_1178 * _1172) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1127 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1178 * _1173) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1131 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1178 * _1174) / cbModelParam._m0[34u].z) + ((((((_1135 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        float _1230 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1196.x + (-0.5));
        float _1232 = _1230 * (_1196.y + (-0.5));
        float _1233 = _1230 * (_1196.z + (-0.5));
        float _1240 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1203.x + (-0.5));
        float _1242 = _1240 * (_1203.y + (-0.5));
        float _1243 = _1240 * (_1203.z + (-0.5));
        float _1250 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1210.x + (-0.5));
        float _1252 = _1250 * (_1210.y + (-0.5));
        float _1253 = _1250 * (_1210.z + (-0.5));
        float _1260 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1217.x + (-0.5));
        float _1262 = _1260 * (_1217.y + (-0.5));
        float _1263 = _1260 * (_1217.z + (-0.5));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = _1231 * 0.5;
        float _1268 = _1241 * 0.5;
        float _1269 = _1251 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1284 = (dot(vec3(_862, _863, _864), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1294 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3957 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1296 + 1.0))) + _1301) * _1264;
        float _1311 = _1232 * 0.5;
        float _1312 = _1242 * 0.5;
        float _1313 = _1252 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_862, _863, _864), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3990 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1338 + 1.0))) + _1343) * _1265;
        float _1353 = _1233 * 0.5;
        float _1354 = _1243 * 0.5;
        float _1355 = _1253 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_862, _863, _864), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4023 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1380 + 1.0))) + _1385) * _1266;
        _1402 = _1233;
        _1404 = _1232;
        _1405 = _1231;
        _1406 = _1243;
        _1407 = _1242;
        _1408 = _1241;
        _1409 = _1253;
        _1410 = _1252;
        _1411 = _1251;
        _1412 = _1266;
        _1413 = _1265;
        _1414 = _1264;
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1403;
        _1404 = _1403;
        _1405 = _1403;
        _1406 = _1403;
        _1407 = _1403;
        _1408 = _1403;
        _1409 = _1403;
        _1410 = _1403;
        _1411 = _1403;
        _1412 = _1403;
        _1413 = _1403;
        _1414 = _1403;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1443 = fma(_1100, cbModelParam._m0[30u].z, fma(_1096, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1092));
        float _1447 = fma(_1100, cbModelParam._m0[31u].z, fma(_1096, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1092));
        float _1451 = fma(_1100, cbModelParam._m0[32u].z, fma(_1096, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1092));
        float _1474 = _1092 + _862;
        float _1475 = _1096 + _863;
        float _1476 = _1100 + _864;
        float _1486 = fma(_1476, cbModelParam._m0[30u].z, fma(_1475, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1474)) - _1443;
        float _1487 = fma(_1476, cbModelParam._m0[31u].z, fma(_1475, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1474)) - _1447;
        float _1488 = fma(_1476, cbModelParam._m0[32u].z, fma(_1475, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1474)) - _1451;
        float _1492 = inversesqrt(dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488)));
        float _1505 = ((_1492 * _1486) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1443 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1492 * _1487) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1447 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1492 * _1488) / cbModelParam._m0[35u].z) + ((((((_1451 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        float _1542 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1509.x + (-0.5));
        float _1544 = _1542 * (_1509.y + (-0.5));
        float _1545 = _1542 * (_1509.z + (-0.5));
        float _1552 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1516.x + (-0.5));
        float _1554 = _1552 * (_1516.y + (-0.5));
        float _1555 = _1552 * (_1516.z + (-0.5));
        float _1562 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1523.x + (-0.5));
        float _1564 = _1562 * (_1523.y + (-0.5));
        float _1565 = _1562 * (_1523.z + (-0.5));
        float _1572 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1530.x + (-0.5));
        float _1574 = _1572 * (_1530.y + (-0.5));
        float _1575 = _1572 * (_1530.z + (-0.5));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = _1543 * 0.5;
        float _1580 = _1553 * 0.5;
        float _1581 = _1563 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_862, _863, _864), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4086 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1606 + 1.0))) + _1611) * _1576;
        float _1621 = _1544 * 0.5;
        float _1622 = _1554 * 0.5;
        float _1623 = _1564 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_862, _863, _864), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4119 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1648 + 1.0))) + _1653) * _1577;
        float _1663 = _1545 * 0.5;
        float _1664 = _1555 * 0.5;
        float _1665 = _1565 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1679 = (dot(vec3(_862, _863, _864), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1688 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4152 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1690 + 1.0))) + _1695) * _1578;
        _1712 = _1545;
        _1713 = _1544;
        _1714 = _1543;
        _1715 = _1555;
        _1716 = _1554;
        _1717 = _1553;
        _1718 = _1565;
        _1719 = _1564;
        _1720 = _1563;
        _1721 = _1578;
        _1722 = _1577;
        _1723 = _1576;
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
    }
    else
    {
        _1712 = _1403;
        _1713 = _1403;
        _1714 = _1403;
        _1715 = _1403;
        _1716 = _1403;
        _1717 = _1403;
        _1718 = _1403;
        _1719 = _1403;
        _1720 = _1403;
        _1721 = _1403;
        _1722 = _1403;
        _1723 = _1403;
        _1724 = 0.0;
        _1725 = 0.0;
        _1726 = 0.0;
    }
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1415)) + _1415;
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1416)) + _1416;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1417)) + _1417;
    float _1759 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1737, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1762 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1737, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1765 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1737, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1736));
    float _1780 = _1036 * 0.5;
    float _1781 = _1037 * 0.5;
    float _1782 = _1038 * 0.5;
    float _1783 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1786 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1789 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1823;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1796 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1402, _1406, _1409, _1412));
        float _1800 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1404, _1407, _1410, _1413));
        float _1804 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1405, _1408, _1411, _1414));
        float _1811 = dot(vec4(cbModelParam._m0[39u]), vec4(_1780, _1781, _1782, 1.0));
        _1823 = dot(vec3(isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1811) ? 0.0 : (isnan(0.0) ? _1811 : max(0.0, _1811))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1823 = 1.0;
    }
    float _1834;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1825 = dot(vec4(cbModelParam._m0[40u]), vec4(_1780, _1781, _1782, 1.0));
        _1834 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1825) ? 0.0 : (isnan(0.0) ? _1825 : max(0.0, _1825))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1834 = 1.0;
    }
    float _1838 = (_1834 * cbModelParam._m0[1u].x) + (_1823 * (1.0 - cbModelParam._m0[1u].x));
    float _1848 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _865);
    float _1849 = isnan(_1848) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1848 : min(cbModelParam._m0[25u].z, _1848));
    float _1929;
    float _1931;
    float _1933;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1896 = fma(_1100, cbModelParam._m0[13u].z, fma(_1096, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1092)) + cbModelParam._m0[13u].w;
        float _1900 = fma(_1100, cbModelParam._m0[14u].z, fma(_1096, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1092)) + cbModelParam._m0[14u].w;
        float _1904 = fma(_1100, cbModelParam._m0[15u].z, fma(_1096, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1092)) + cbModelParam._m0[15u].w;
        float _1907 = fma(_1038, cbModelParam._m0[13u].z, fma(_1037, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1036));
        float _1910 = fma(_1038, cbModelParam._m0[14u].z, fma(_1037, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1036));
        float _1913 = fma(_1038, cbModelParam._m0[15u].z, fma(_1037, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1036));
        float _1941;
        if (_1907 > 0.0)
        {
            _1941 = abs((1.0 - _1896) / _1907);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1896 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1941 = frontier_phi_14_12_ladder;
        }
        float _2165;
        if (_1910 > 0.0)
        {
            _2165 = abs((1.0 - _1900) / _1910);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1900 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2165 = frontier_phi_23_19_ladder;
        }
        float _2422;
        if (_1913 > 0.0)
        {
            _2422 = abs((1.0 - _1904) / _1913);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1904 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2422 = frontier_phi_35_30_ladder;
        }
        float _2424 = isnan(_2165) ? _1941 : (isnan(_1941) ? _2165 : min(_1941, _2165));
        float _2425 = isnan(_2422) ? _2424 : (isnan(_2424) ? _2422 : min(_2424, _2422));
        float _2429 = (_2425 * _1907) + _1896;
        float _2430 = (_2425 * _1910) + _1900;
        float _2431 = (_2425 * _1913) + _1904;
        float _2432 = _2425 * 9.9999997473787516355514526367188e-05;
        float _2434 = (-1.0) - _2432;
        float _2436 = _2432 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2431 > _2436) || ((_2431 < _2434) || ((_2430 > _2436) || ((_2430 < _2434) || ((_2429 < _2434) || (_2429 > _2436))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2431, cbModelParam._m0[9u].z, fma(_2430, cbModelParam._m0[9u].y, _2429 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2431, cbModelParam._m0[10u].z, fma(_2430, cbModelParam._m0[10u].y, _2429 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2431, cbModelParam._m0[11u].z, fma(_2430, cbModelParam._m0[11u].y, _2429 * cbModelParam._m0[11u].x))), _1849);
            frontier_phi_13_35_ladder = _2559.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2559.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2559.x * cbModelParam._m0[1u].y;
        }
        _1929 = frontier_phi_13_35_ladder_2;
        _1931 = frontier_phi_13_35_ladder_1;
        _1933 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1036, _1037, _1038), _1849);
        _1929 = _1917.x * cbModelParam._m0[1u].y;
        _1931 = _1917.y * cbModelParam._m0[1u].y;
        _1933 = _1917.z * cbModelParam._m0[1u].y;
    }
    float _1937 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _865);
    float _1938 = isnan(_1937) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1937 : min(cbModelParam._m0[25u].w, _1937));
    float _2027;
    float _2029;
    float _2031;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1991 = fma(_1100, cbModelParam._m0[21u].z, fma(_1096, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1092)) + cbModelParam._m0[21u].w;
        float _1995 = fma(_1100, cbModelParam._m0[22u].z, fma(_1096, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1092)) + cbModelParam._m0[22u].w;
        float _1999 = fma(_1100, cbModelParam._m0[23u].z, fma(_1096, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1092)) + cbModelParam._m0[23u].w;
        float _2002 = fma(_1038, cbModelParam._m0[21u].z, fma(_1037, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1036));
        float _2005 = fma(_1038, cbModelParam._m0[22u].z, fma(_1037, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1036));
        float _2008 = fma(_1038, cbModelParam._m0[23u].z, fma(_1037, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1036));
        float _2170;
        if (_2002 > 0.0)
        {
            _2170 = abs((1.0 - _1991) / _2002);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1991 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2170 = frontier_phi_25_21_ladder;
        }
        float _2449;
        if (_2005 > 0.0)
        {
            _2449 = abs((1.0 - _1995) / _2005);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1995 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2449 = frontier_phi_37_32_ladder;
        }
        float _2662;
        if (_2008 > 0.0)
        {
            _2662 = abs((1.0 - _1999) / _2008);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1999 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2662 = frontier_phi_46_43_ladder;
        }
        float _2664 = isnan(_2449) ? _2170 : (isnan(_2170) ? _2449 : min(_2170, _2449));
        float _2665 = isnan(_2662) ? _2664 : (isnan(_2664) ? _2662 : min(_2664, _2662));
        float _2669 = (_2665 * _2002) + _1991;
        float _2670 = (_2665 * _2005) + _1995;
        float _2671 = (_2665 * _2008) + _1999;
        float _2672 = _2665 * 9.9999997473787516355514526367188e-05;
        float _2673 = (-1.0) - _2672;
        float _2675 = _2672 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2671 > _2675) || ((_2671 < _2673) || ((_2670 > _2675) || ((_2670 < _2673) || ((_2669 < _2673) || (_2669 > _2675))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2671, cbModelParam._m0[17u].z, fma(_2670, cbModelParam._m0[17u].y, _2669 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2671, cbModelParam._m0[18u].z, fma(_2670, cbModelParam._m0[18u].y, _2669 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2671, cbModelParam._m0[19u].z, fma(_2670, cbModelParam._m0[19u].y, _2669 * cbModelParam._m0[19u].x))), _1938);
            frontier_phi_22_46_ladder = _2870.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2870.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2870.x * cbModelParam._m0[1u].z;
        }
        _2027 = frontier_phi_22_46_ladder_2;
        _2029 = frontier_phi_22_46_ladder_1;
        _2031 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2011 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1036, _1037, _1038), _1938);
        _2027 = _2011.x * cbModelParam._m0[1u].z;
        _2029 = _2011.y * cbModelParam._m0[1u].z;
        _2031 = _2011.z * cbModelParam._m0[1u].z;
    }
    float _2044 = (((_1063 * _1013) + _1064) * _1028) * ((cbModelParam._m0[1u].w * (_2027 - _1929)) + _1929);
    float _2046 = (((_1063 * _1015) + _1064) * _1028) * ((cbModelParam._m0[1u].w * (_2029 - _1931)) + _1931);
    float _2048 = (((_1063 * _1016) + _1064) * _1028) * ((cbModelParam._m0[1u].w * (_2031 - _1933)) + _1933);
    float _2051 = fma(_2048, cbSceneParam._m0[89u].z, fma(_2046, cbSceneParam._m0[89u].y, _2044 * cbSceneParam._m0[89u].x));
    float _2054 = fma(_2048, cbSceneParam._m0[90u].z, fma(_2046, cbSceneParam._m0[90u].y, _2044 * cbSceneParam._m0[90u].x));
    float _2057 = fma(_2048, cbSceneParam._m0[91u].z, fma(_2046, cbSceneParam._m0[91u].y, _2044 * cbSceneParam._m0[91u].x));
    vec4 _2065 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_950, _951));
    float _2067 = _2065.w;
    float _2079 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2067);
    float _2080 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2067);
    float _2081 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2067);
    uvec4 _2085 = floatBitsToUint(cbInstanceData._m0[_988 + 5u]);
    uint _2087 = _2085.x * 14u;
    uint _2088 = _2087 + 13u;
    float _2095 = _1028 + (-1.0);
    float _2100 = (cbLight._m0[_2088].x * _2095) + 1.0;
    float _2101 = (cbLight._m0[_2088].y * _2095) + 1.0;
    float _2102 = (cbLight._m0[_2088].z * _2095) + 1.0;
    float _2103 = (cbLight._m0[_2088].w * _2095) + 1.0;
    uint _2104 = _2087 + 5u;
    float _2110 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
    uint _2114 = _2087 + 4u;
    float _2124 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2128 = _2087 | 1u;
    float _2139 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_862, _863, _864));
    float _2142 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_862, _863, _864));
    float _4288 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _4299 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2147 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * 0.3183098733425140380859375;
    float _2149 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * 0.3183098733425140380859375;
    float _2156 = ((cbLight._m0[_2104].x * _2110) * _2149) + (((cbLight._m0[_2114].x * _2079) * _2124) * _2147);
    float _2157 = ((_2110 * cbLight._m0[_2104].y) * _2149) + (((cbLight._m0[_2114].y * _2080) * _2124) * _2147);
    float _2158 = ((_2110 * cbLight._m0[_2104].z) * _2149) + (((cbLight._m0[_2114].z * _2081) * _2124) * _2147);
    uvec4 _2162 = floatBitsToUint(cbLight._m0[_2087 + 12u]);
    bool _2164 = _2162.x == 0u;
    float _2175;
    float _2177;
    float _2179;
    if (_2164)
    {
        _2175 = _2156;
        _2177 = _2157;
        _2179 = _2158;
    }
    else
    {
        uint _2183 = _2087 + 6u;
        float _2199 = (dot(vec3(cbLight._m0[_2087 + 2u].xyz), vec3(_862, _863, _864)) * 0.5) + 0.5;
        float _2200 = _2199 * _2199;
        float _4310 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2201 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2202 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2175 = (((cbLight._m0[_2183].x * 0.3183098733425140380859375) * _2201) * _2202) + _2156;
        _2177 = (((cbLight._m0[_2183].y * 0.3183098733425140380859375) * _2201) * _2202) + _2157;
        _2179 = (((cbLight._m0[_2183].z * 0.3183098733425140380859375) * _2201) * _2202) + _2158;
    }
    bool _2182 = _2162.y == 0u;
    float _2220;
    float _2222;
    float _2224;
    if (_2182)
    {
        _2220 = _2175;
        _2222 = _2177;
        _2224 = _2179;
    }
    else
    {
        uint _2393 = _2087 + 7u;
        float _2409 = (dot(vec3(cbLight._m0[_2087 + 3u].xyz), vec3(_862, _863, _864)) * 0.5) + 0.5;
        float _2410 = _2409 * _2409;
        float _4326 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2411 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2412 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2220 = (((cbLight._m0[_2393].x * 0.3183098733425140380859375) * _2411) * _2412) + _2175;
        _2222 = (((cbLight._m0[_2393].y * 0.3183098733425140380859375) * _2411) * _2412) + _2177;
        _2224 = (((cbLight._m0[_2393].z * 0.3183098733425140380859375) * _2411) * _2412) + _2179;
    }
    uint _2227 = _2087 + 8u;
    float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _865) * 0.949999988079071044921875);
    float _2241 = _2240 * _2240;
    float _2242 = cbLight._m0[_2087].x + _942;
    float _2243 = cbLight._m0[_2087].y + _943;
    float _2244 = cbLight._m0[_2087].z + _944;
    float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
    float _2249 = _2248 * _2242;
    float _2250 = _2248 * _2243;
    float _2251 = _2248 * _2244;
    float _2252 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2087].xyz));
    float _4342 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _4353 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _2256 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2257 = dot(vec3(_862, _863, _864), vec3(_2249, _2250, _2251));
    float _4364 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2261 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2249, _2250, _2251));
    float _4375 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2265 = _2241 * _2241;
    float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
    float _2277 = exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0);
    float _2278 = 0.959999978542327880859375 - _1010;
    float _2280 = 0.959999978542327880859375 - _1011;
    float _2281 = 0.959999978542327880859375 - _1012;
    float _2288 = 1.0 - _2241;
    float _2299 = (0.5 / (((_2256 * ((_2255 * _2288) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2288) + _2241) * _2255))) * _2255;
    float _4386 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2301 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
    uint _2315 = _2087 + 9u;
    float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _865) * 0.949999988079071044921875);
    float _2327 = _2326 * _2326;
    float _2328 = cbLight._m0[_2128].x + _942;
    float _2329 = cbLight._m0[_2128].y + _943;
    float _2330 = cbLight._m0[_2128].z + _944;
    float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
    float _2335 = _2334 * _2328;
    float _2336 = _2334 * _2329;
    float _2337 = _2334 * _2330;
    float _2338 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2128].xyz));
    float _4397 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2342 = dot(vec3(_862, _863, _864), vec3(_2335, _2336, _2337));
    float _4408 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2345 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2346 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2335, _2336, _2337));
    float _4419 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2350 = _2327 * _2327;
    float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
    float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
    float _2368 = 1.0 - _2327;
    float _2378 = (0.5 / (((_2256 * ((_2341 * _2368) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2368) + _2327) * _2341))) * _2341;
    float _4430 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2380 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
    float _2390 = (((((_2361 * _2278) + _1013) * cbLight._m0[_2315].x) * _2380) * _2110) + ((((cbLight._m0[_2227].x * _2079) * ((_2277 * _2278) + _1013)) * _2301) * _2124);
    float _2391 = (((((_2361 * _2280) + _1015) * cbLight._m0[_2315].y) * _2380) * _2110) + ((((cbLight._m0[_2227].y * _2080) * ((_2277 * _2280) + _1015)) * _2301) * _2124);
    float _2392 = (((((_2361 * _2281) + _1016) * cbLight._m0[_2315].z) * _2380) * _2110) + ((((cbLight._m0[_2227].z * _2081) * ((_2277 * _2281) + _1016)) * _2301) * _2124);
    float _2454;
    float _2456;
    float _2458;
    if (_2164)
    {
        _2454 = _2390;
        _2456 = _2391;
        _2458 = _2392;
    }
    else
    {
        uint _2460 = _2087 + 2u;
        uint _2464 = _2087 + 10u;
        float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2460].w)) * _865) * 0.949999988079071044921875);
        float _2479 = _2478 * _2478;
        float _2480 = cbLight._m0[_2460].x + _942;
        float _2481 = cbLight._m0[_2460].y + _943;
        float _2482 = cbLight._m0[_2460].z + _944;
        float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
        float _2487 = _2486 * _2480;
        float _2488 = _2486 * _2481;
        float _2489 = _2486 * _2482;
        float _2490 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2460].xyz));
        float _4441 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2494 = dot(vec3(_862, _863, _864), vec3(_2487, _2488, _2489));
        float _4452 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2498 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_2487, _2488, _2489));
        float _4463 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2502 = _2479 * _2479;
        float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
        float _2513 = exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0);
        float _2520 = 1.0 - _2479;
        float _2530 = (0.5 / (((_2256 * ((_2493 * _2520) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2520) + _2479) * _2493))) * _2493;
        float _4474 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2532 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
        float _2533 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2454 = (((((_2513 * _2278) + _1013) * cbLight._m0[_2464].x) * _2532) * _2533) + _2390;
        _2456 = (((((_2513 * _2280) + _1015) * cbLight._m0[_2464].y) * _2532) * _2533) + _2391;
        _2458 = (((((_2513 * _2281) + _1016) * cbLight._m0[_2464].z) * _2532) * _2533) + _2392;
    }
    float _2568;
    float _2570;
    float _2572;
    if (_2182)
    {
        _2568 = _2454;
        _2570 = _2456;
        _2572 = _2458;
    }
    else
    {
        uint _2579 = _2087 + 3u;
        uint _2583 = _2087 + 11u;
        float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2579].w)) * _865) * 0.949999988079071044921875);
        float _2598 = _2597 * _2597;
        float _2599 = cbLight._m0[_2579].x + _942;
        float _2600 = cbLight._m0[_2579].y + _943;
        float _2601 = cbLight._m0[_2579].z + _944;
        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
        float _2606 = _2605 * _2599;
        float _2607 = _2605 * _2600;
        float _2608 = _2605 * _2601;
        float _2609 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2579].xyz));
        float _4490 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2613 = dot(vec3(_862, _863, _864), vec3(_2606, _2607, _2608));
        float _4501 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2617 = dot(vec3(cbLight._m0[_2579].xyz), vec3(_2606, _2607, _2608));
        float _4512 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2621 = _2598 * _2598;
        float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
        float _2632 = exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0);
        float _2639 = 1.0 - _2598;
        float _2649 = (0.5 / (((_2256 * ((_2612 * _2639) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2639) + _2598) * _2612))) * _2612;
        float _4523 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2651 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
        float _2652 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2568 = (((((_2632 * _2278) + _1013) * cbLight._m0[_2583].x) * _2651) * _2652) + _2454;
        _2570 = (((((_2632 * _2280) + _1015) * cbLight._m0[_2583].y) * _2651) * _2652) + _2456;
        _2572 = (((((_2632 * _2281) + _1016) * cbLight._m0[_2583].z) * _2651) * _2652) + _2458;
    }
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_2085.y == 0u)
    {
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2727;
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2727;
        float _2730 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2727;
        uvec4 _2742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2743 = _2742.x;
        uint _2754 = uint((float(_2742.y) * floor(float(uint(cbSceneParam._m0[85u].y * _951) / _2743))) + floor(float(uint(cbSceneParam._m0[85u].x * _950) / _2743)));
        float _2764 = (log2(_2730 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2765 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        uint _2768 = uint(isnan(14.0) ? _2765 : (isnan(_2765) ? 14.0 : min(_2765, 14.0)));
        uvec4 _2773 = texelFetch(g_lightClusterGridBuffer, int(((_2768 << 2u) + (_2754 << 6u)) >> 2u));
        uint _2774 = _2773.x;
        uint _2775 = _2742.z;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((((1u << ((_2775 >> 4u) & 15u)) + 4294967295u) & _2774) == 0u) || ((_2775 & 240u) == 0u))
        {
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
        }
        else
        {
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            uint _3026 = 0u;
            uint _3035;
            bool _3036;
            for (;;)
            {
                _3035 = texelFetch(g_lightClassification, int((((_2768 << 5u) + (_2754 << 9u)) + (_3026 << 2u)) >> 2u)).x;
                _3036 = _3035 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3036)
                {
                    frontier_phi_61_pred = _3020;
                    frontier_phi_61_pred_1 = _3025;
                    frontier_phi_61_pred_2 = _3024;
                    frontier_phi_61_pred_3 = _3023;
                    frontier_phi_61_pred_4 = _3022;
                    frontier_phi_61_pred_5 = _3021;
                }
                else
                {
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    uint _3150;
                    _3144 = _3020;
                    _3145 = _3021;
                    _3146 = _3022;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3035;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    for (;;)
                    {
                        uint _3154 = uint(findLSB(_3150)) + (_3026 << 5u);
                        uint _3151 = (_3150 + 4294967295u) & _3150;
                        uint _3156 = _3154 * 48u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3176 = (_3154 * 48u) + 4u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 3u)).x));
                        uint _3195 = (_3154 * 48u) + 8u;
                        vec3 _3206 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x));
                        float _3210 = _3170.x - _2728;
                        float _3211 = _3170.y - _2729;
                        float _3212 = _3170.z - _2730;
                        float _3213 = dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212));
                        float _3216 = inversesqrt(_3213);
                        float _3217 = _3216 * _3210;
                        float _3218 = _3216 * _3211;
                        float _3219 = _3216 * _3212;
                        float _3220 = dot(vec3(_969, _972, _975), vec3(_3217, _3218, _3219));
                        float _3225 = 1.0 - (_3213 * _3170.w);
                        float _4549 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3226 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3227 = sqrt(_3213) * _3189.w;
                        float _3230 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                        float _3231 = _3230 * _3230;
                        float _3234 = ((1.0 - _3231) * _3220) + _3231;
                        float _3237 = _3227 * _3227;
                        float _3241 = ((isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0))) * _3226) / ((_3237 * 0.699999988079071044921875) + 1.0);
                        float _3245 = (-0.0) - _2728;
                        float _3246 = (-0.0) - _2729;
                        float _3247 = (-0.0) - _2730;
                        float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                        float _3252 = _3251 * _3245;
                        float _3253 = _3251 * _3246;
                        float _3254 = _3251 * _3247;
                        float _3262 = exp2(log2(1.0 / ((_3237 * 3.5) + 5.0)) * 0.25);
                        float _3263 = 1.0 - _1044;
                        float _3270 = sqrt(1.0 - ((1.0 - (_3263 * _3263)) * (1.0 - (_3262 * _3262))));
                        float _3271 = _3270 * _3270;
                        float _3272 = _3271 * _3271;
                        float _3273 = _3252 + _3217;
                        float _3274 = _3253 + _3218;
                        float _3275 = _3254 + _3219;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3283 = dot(vec3(_969, _972, _975), vec3(_3252, _3253, _3254));
                        float _4565 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3286 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3287 = dot(vec3(_969, _972, _975), vec3(_3279 * _3273, _3279 * _3274, _3279 * _3275));
                        float _4576 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3290 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3294 = ((_3290 * _3290) * (_3272 + (-1.0))) + 1.0;
                        float _3295 = _3230 * _3271;
                        float _3296 = _3295 * _3295;
                        float _3299 = ((1.0 - _3296) * _3220) + _3296;
                        float _4587 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3300 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3301 = 1.0 - _3271;
                        float _3311 = (0.5 / (((_3300 * ((_3286 * _3301) + _3271)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3271) * _3286))) * _3300;
                        float _4598 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3322 = (((_3272 * 3.1415927410125732421875) * (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) / ((_3294 * _3294) * ((_3237 * 2.1991131305694580078125) + 3.141590118408203125))) * _3226;
                        _3079 = (_3241 * _3189.x) + _3147;
                        _3080 = (_3241 * _3189.y) + _3148;
                        _3081 = (_3241 * _3189.z) + _3149;
                        _3076 = (_3322 * _3206.x) + _3144;
                        _3077 = (_3322 * _3206.y) + _3145;
                        _3078 = (_3322 * _3206.z) + _3146;
                        if (_3151 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3144 = _3076;
                            _3145 = _3077;
                            _3146 = _3078;
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3151;
                        }
                    }
                    frontier_phi_61_pred = _3076;
                    frontier_phi_61_pred_1 = _3081;
                    frontier_phi_61_pred_2 = _3080;
                    frontier_phi_61_pred_3 = _3079;
                    frontier_phi_61_pred_4 = _3078;
                    frontier_phi_61_pred_5 = _3077;
                }
                _2876 = frontier_phi_61_pred;
                _2886 = frontier_phi_61_pred_1;
                _2884 = frontier_phi_61_pred_2;
                _2882 = frontier_phi_61_pred_3;
                _2880 = frontier_phi_61_pred_4;
                _2878 = frontier_phi_61_pred_5;
                uint _3027 = _3026 + 1u;
                if (_3027 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3020 = _2876;
                    _3021 = _2878;
                    _3022 = _2880;
                    _3023 = _2882;
                    _3024 = _2884;
                    _3025 = _2886;
                    _3026 = _3027;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
        }
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.z;
        uint _2892 = (_2890 >> 8u) & 15u;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        if (((4294967295u << _2892) & _2774) == 0u)
        {
            _2988 = _2875;
            _2990 = _2877;
            _2992 = _2879;
            _2994 = _2881;
            _2996 = _2883;
            _2998 = _2885;
        }
        else
        {
            float _3013 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
            float _3014 = _3013 * _2728;
            float _3015 = _3013 * _2729;
            float _3016 = _3013 * _2730;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2892 < ((_2890 >> 12u) & 15u))
            {
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3127 = _2875;
                float _3128 = _2877;
                float _3129 = _2879;
                float _3130 = _2881;
                float _3131 = _2883;
                float _3132 = _2885;
                uint _3133 = _2892;
                uint _3142;
                bool _3143;
                for (;;)
                {
                    _3142 = texelFetch(g_lightClassification, int((((_2768 << 5u) + (_2754 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                    _3143 = _3142 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3143)
                    {
                        frontier_phi_67_pred = _3130;
                        frontier_phi_67_pred_1 = _3131;
                        frontier_phi_67_pred_2 = _3132;
                        frontier_phi_67_pred_3 = _3129;
                        frontier_phi_67_pred_4 = _3128;
                        frontier_phi_67_pred_5 = _3127;
                    }
                    else
                    {
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3340 = _3127;
                        float _3341 = _3128;
                        float _3342 = _3129;
                        float _3343 = _3130;
                        float _3344 = _3131;
                        float _3345 = _3132;
                        uint _3346 = _3142;
                        uint _3347;
                        vec4 _3372;
                        float _3373;
                        vec4 _3388;
                        vec3 _3400;
                        vec4 _3415;
                        vec4 _3430;
                        float _3477;
                        bool _3478;
                        for (;;)
                        {
                            uint _3357 = ((_3133 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3346));
                            _3347 = (_3346 + 4294967295u) & _3346;
                            uint _3359 = _3357 * 40u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            _3373 = _3372.w;
                            uint _3375 = (_3357 * 40u) + 4u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3390 = (_3357 * 40u) + 8u;
                            _3400 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x));
                            uint _3402 = (_3357 * 40u) + 16u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3417 = (_3357 * 40u) + 20u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3433 = (_3357 * 40u) + 24u;
                            vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3452 = (_3357 * 40u) + 28u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3477 = fma(_2730, _3465.z, fma(_2729, _3465.y, _3465.x * _2728)) + _3465.w;
                            _3478 = !((fma(_2730, _3446.z, fma(_2729, _3446.y, _3446.x * _2728)) + _3446.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3478)
                            {
                                float _3505 = _3372.x - _2728;
                                float _3506 = _3372.y - _2729;
                                float _3507 = _3372.z - _2730;
                                float _3508 = dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507));
                                float _3511 = inversesqrt(_3508);
                                float _3512 = _3511 * _3505;
                                float _3513 = _3511 * _3506;
                                float _3514 = _3511 * _3507;
                                float _3518 = 1.0 - (_3508 / (_3373 * _3373));
                                float _4609 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3523 = sqrt(_3508) * _3388.w;
                                float _3525 = 1.39999997615814208984375 / (_3523 + 1.39999997615814208984375);
                                float _3526 = _3525 * _3525;
                                float _3529 = ((1.0 - _3526) * dot(vec3(_3512, _3513, _3514), vec3(_969, _972, _975))) + _3526;
                                float _3532 = _3523 * _3523;
                                float _3536 = (fma(_2730, _3415.z, fma(_2729, _3415.y, _3415.x * _2728)) + _3415.w) / _3477;
                                float _3537 = (fma(_2730, _3430.z, fma(_2729, _3430.y, _3430.x * _2728)) + _3430.w) / _3477;
                                float _3541 = 1.0 - dot(vec2(_3536, _3537), vec2(_3536, _3537));
                                float _4625 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3543 = _3542 * (((isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0))) * _3519) / ((_3532 * 0.699999988079071044921875) + 1.0));
                                float _3555 = exp2(log2(1.0 / ((_3532 * 3.5) + 5.0)) * 0.25);
                                float _3556 = 1.0 - _1044;
                                float _3563 = sqrt(1.0 - ((1.0 - (_3556 * _3556)) * (1.0 - (_3555 * _3555))));
                                float _3564 = _3563 * _3563;
                                float _3565 = _3564 * _3564;
                                float _3566 = _3512 - _3014;
                                float _3567 = _3513 - _3015;
                                float _3568 = _3514 - _3016;
                                float _3572 = inversesqrt(dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568)));
                                float _3576 = dot(vec3(_969, _972, _975), vec3((-0.0) - _3014, (-0.0) - _3015, (-0.0) - _3016));
                                float _4636 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3580 = dot(vec3(_969, _972, _975), vec3(_3572 * _3566, _3572 * _3567, _3572 * _3568));
                                float _4647 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3587 = ((_3583 * _3583) * (_3565 + (-1.0))) + 1.0;
                                float _3588 = _3525 * _3564;
                                float _3589 = _3588 * _3588;
                                float _3595 = ((1.0 - _3589) * dot(vec3(_969, _972, _975), vec3(_3512, _3513, _3514))) + _3589;
                                float _4658 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3597 = 1.0 - _3564;
                                float _3607 = (0.5 / (((_3596 * ((_3579 * _3597) + _3564)) + 9.9999999392252902907785028219223e-09) + (((_3596 * _3597) + _3564) * _3579))) * _3596;
                                float _4669 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3617 = (_3542 * _3519) * (((_3565 * 3.1415927410125732421875) * (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) / ((_3587 * _3587) * ((_3532 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3617 * _3400.x;
                                frontier_phi_73_pred_1 = _3617 * _3400.y;
                                frontier_phi_73_pred_2 = _3543 * _3388.z;
                                frontier_phi_73_pred_3 = _3543 * _3388.y;
                                frontier_phi_73_pred_4 = _3543 * _3388.x;
                                frontier_phi_73_pred_5 = _3617 * _3400.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3621 = frontier_phi_73_pred;
                            _3622 = frontier_phi_73_pred_1;
                            _3626 = frontier_phi_73_pred_2;
                            _3625 = frontier_phi_73_pred_3;
                            _3624 = frontier_phi_73_pred_4;
                            _3623 = frontier_phi_73_pred_5;
                            _3330 = _3624 + _3343;
                            _3331 = _3625 + _3344;
                            _3332 = _3626 + _3345;
                            _3327 = _3621 + _3340;
                            _3328 = _3622 + _3341;
                            _3329 = _3623 + _3342;
                            if (_3347 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3347;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3330;
                        frontier_phi_67_pred_1 = _3331;
                        frontier_phi_67_pred_2 = _3332;
                        frontier_phi_67_pred_3 = _3329;
                        frontier_phi_67_pred_4 = _3328;
                        frontier_phi_67_pred_5 = _3327;
                    }
                    _2995 = frontier_phi_67_pred;
                    _2997 = frontier_phi_67_pred_1;
                    _2999 = frontier_phi_67_pred_2;
                    _2993 = frontier_phi_67_pred_3;
                    _2991 = frontier_phi_67_pred_4;
                    _2989 = frontier_phi_67_pred_5;
                    uint _3134 = _3133 + 1u;
                    if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3127 = _2989;
                        _3128 = _2991;
                        _3129 = _2993;
                        _3130 = _2995;
                        _3131 = _2997;
                        _3132 = _2999;
                        _3133 = _3134;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2997;
                frontier_phi_55_56_ladder_1 = _2999;
                frontier_phi_55_56_ladder_2 = _2995;
                frontier_phi_55_56_ladder_3 = _2993;
                frontier_phi_55_56_ladder_4 = _2991;
                frontier_phi_55_56_ladder_5 = _2989;
            }
            else
            {
                frontier_phi_55_56_ladder = _2883;
                frontier_phi_55_56_ladder_1 = _2885;
                frontier_phi_55_56_ladder_2 = _2881;
                frontier_phi_55_56_ladder_3 = _2879;
                frontier_phi_55_56_ladder_4 = _2877;
                frontier_phi_55_56_ladder_5 = _2875;
            }
            _2988 = frontier_phi_55_56_ladder_5;
            _2990 = frontier_phi_55_56_ladder_4;
            _2992 = frontier_phi_55_56_ladder_3;
            _2994 = frontier_phi_55_56_ladder_2;
            _2996 = frontier_phi_55_56_ladder;
            _2998 = frontier_phi_55_56_ladder_1;
        }
        float _3003 = isnan(1.0) ? _1028 : (isnan(_1028) ? 1.0 : min(_1028, 1.0));
        _2787 = (_3003 * _2994) + _2220;
        _2789 = (_3003 * _2996) + _2222;
        _2791 = (_3003 * _2998) + _2224;
        _2793 = ((_2988 * _1013) * _3003) + _2568;
        _2795 = ((_2990 * _1015) * _3003) + _2570;
        _2797 = ((_2992 * _1016) * _3003) + _2572;
    }
    else
    {
        _2787 = _2220;
        _2789 = _2222;
        _2791 = _2224;
        _2793 = _2568;
        _2795 = _2570;
        _2797 = _2572;
    }
    float _4685 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _4696 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _4707 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    uint _2817 = _988 + 6u;
    float _2825 = _950 / cbSceneParam._m0[86u].x;
    float _2826 = _951 / cbSceneParam._m0[86u].y;
    vec4 _2840 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, (log2((isnan(cbSceneParam._m0[77u].w) ? _885 : (isnan(_885) ? cbSceneParam._m0[77u].w : min(_885, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2842 = _2840.x;
    float _2843 = _2840.y;
    float _2844 = _2840.z;
    float _2845 = _2840.w;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_885 > cbSceneParam._m0[78u].w)
    {
        float _2900 = isnan(_885) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _885 : min(cbSceneParam._m0[80u].w, _885));
        float _2901 = _2900 / _885;
        float _2912 = _2901 * _935;
        float _2913 = _936 * _2901;
        float _2914 = (-0.0) - _2913;
        float _2916 = _2901 * _937;
        float _2918 = (cbSceneParam._m0[77u].w * _2914) / _2900;
        float _2919 = _2918 + cbSceneParam._m0[79u].w;
        float _2920 = cbSceneParam._m0[79u].w - _2913;
        float _2926 = sqrt(((_2912 * _2912) + (_2913 * _2913)) + (_2916 * _2916));
        float _2929 = (1.0 - (cbSceneParam._m0[77u].w / _2900)) * _2926;
        float _2934 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2936 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3089;
        if (abs((_2914 - _2918) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3089 = ((((_2919 > 0.0) ? exp2(_2934 * _2919) : (2.0 - exp2(_2936 * _2919))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2929;
        }
        else
        {
            float _3049 = 1.0 / cbSceneParam._m0[80u].x;
            float _3050 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : max(_2919, _2920));
            float _3051 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : min(_2919, _2920));
            float _3060 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : min(_3050, 0.0));
            float _3061 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : min(_3051, 0.0));
            _3089 = ((abs(_2926 / _2914) * cbSceneParam._m0[80u].y) * ((((_3060 - _3061) * 2.0) - ((exp2(_2934 * (isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0)))) - exp2(_2934 * (isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))))) * _3049)) - ((exp2(_2936 * _3060) - exp2(_2936 * _3061)) * _3049))) + (_2929 * cbSceneParam._m0[80u].z);
        }
        vec4 _3091 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, 1.0), 0.0);
        float _3100 = exp2((_3089 * (-1.44269502162933349609375)) * (1.0 - _3091.w));
        float _3101 = log2(_3100);
        float _3117 = log2(_2845);
        _2938 = (exp2(_3117 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].x)) * _3091.x) / cbSceneParam._m0[78u].x)) + _2842;
        _2940 = (exp2(_3117 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].y)) * _3091.y) / cbSceneParam._m0[78u].y)) + _2843;
        _2942 = (exp2(_3117 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].z)) * _3091.z) / cbSceneParam._m0[78u].z)) + _2844;
        _2944 = _3100 * _2845;
    }
    else
    {
        _2938 = _2842;
        _2940 = _2843;
        _2942 = _2844;
        _2944 = _2845;
    }
    float _2956 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2957 = _2956 == 3.0;
    float _2958 = log2(_2944);
    float _2965 = exp2(_2958 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2787 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1028))) + ((_2793 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1838)) * cbPerFrame._m0[3u].x));
    float _2966 = exp2(_2958 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2789 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1028))) + ((_2795 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1838)) * cbPerFrame._m0[3u].x));
    float _2967 = exp2(_2958 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2791 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1028))) + ((_2797 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1838)) * cbPerFrame._m0[3u].x));
    float _2976 = (_2956 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2976 * (_2957 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2938)));
    SV_Target.y = _2976 * (_2957 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2940)));
    SV_Target.z = _2976 * (_2957 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2942)));
    SV_Target.w = cbInstanceData._m0[_2817].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2817].w;
}


