#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1394;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _270 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _270.x * cbMtdParam._m0[10u].x;
    float _277 = _270.y * cbMtdParam._m0[10u].y;
    float _278 = _270.z * cbMtdParam._m0[10u].z;
    vec4 _296 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _346 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _356 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _346)) + 1.0;
    float _4004 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _357 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _364 = (_357 * ((_296.x * cbMtdParam._m0[11u].x) - _276)) + _276;
    float _365 = (_357 * ((_296.y * cbMtdParam._m0[11u].y) - _277)) + _277;
    float _366 = (_357 * ((_296.z * cbMtdParam._m0[11u].z) - _278)) + _278;
    vec4 _384 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _415 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _346)) + 1.0;
    float _4015 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _423 = (_416 * ((_384.x * cbMtdParam._m0[12u].x) - _364)) + _364;
    float _424 = (_416 * ((_384.y * cbMtdParam._m0[12u].y) - _365)) + _365;
    float _425 = (_416 * ((_384.z * cbMtdParam._m0[12u].z) - _366)) + _366;
    vec4 _443 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _468 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _346)) + 1.0;
    float _4026 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    vec4 _497 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _505 = ((((_469 * ((_443.x * cbMtdParam._m0[13u].x) - _423)) + _423) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _497.x;
    float _508 = ((((_469 * ((_443.y * cbMtdParam._m0[13u].y) - _424)) + _424) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _497.y;
    float _511 = ((((_469 * ((_443.z * cbMtdParam._m0[13u].z) - _425)) + _425) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _497.z;
    vec4 _532 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _561 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _4037 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _569 = (_562 * ((_532.x * cbMtdParam._m0[15u].x) - _505)) + _505;
    float _570 = (_562 * ((_532.y * cbMtdParam._m0[15u].y) - _508)) + _508;
    float _571 = (_562 * ((_532.z * cbMtdParam._m0[15u].z) - _511)) + _511;
    vec4 _584 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _586 = _584.x;
    float _604 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _586) * _357) + _586;
    float _621 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _604) * _416) + _604;
    float _638 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _621) * _469) + _621;
    vec4 _650 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _670 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _672 = _670.x;
    float _673 = _670.y;
    float _679 = cbMtdParam._m0[18u].y * _670.z;
    vec4 _691 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _700 = (((cbMtdParam._m0[18u].x * _691.z) - _679) * _357) + _679;
    vec4 _713 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _724 = (((cbMtdParam._m0[17u].w * _713.z) - _700) * _416) + _700;
    vec4 _737 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _746 = (((cbMtdParam._m0[17u].z * _737.z) - _724) * _469) + _724;
    vec4 _759 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _773 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_759.z * cbMtdParam._m0[19u].y) - _746)) + _746;
    vec4 _786 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _798 = ((_691.x - _672) * _357) + _672;
    float _799 = ((_691.y - _673) * _357) + _673;
    float _804 = ((_713.x - _798) * _416) + _798;
    float _805 = ((_713.y - _799) * _416) + _799;
    float _814 = ((((_737.x - _804) * _469) + _804) * 2.0) + (-1.0);
    float _815 = ((((_737.y - _805) * _469) + _805) * 2.0) + (-1.0);
    float _816 = dot(vec2(_814, _815), vec2(_814, _815));
    float _4048 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _821 = sqrt(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))));
    float _838 = (((((_786.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _814) + ((((_650.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y)) + ((((_759.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _839 = (((((_786.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _815) + ((((_650.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y)) + ((((_759.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _842 = fma(_821, _240 * NORMAL.x, fma(_839, _247 * TANGENT.x, (_233 * _225) * _838));
    float _845 = fma(_821, _240 * NORMAL.y, fma(_839, _247 * TANGENT.y, (_233 * _226) * _838));
    float _848 = fma(_821, _240 * NORMAL.z, fma(_839, _247 * TANGENT.z, (_233 * _227) * _838));
    float _852 = inversesqrt(dot(vec3(_842, _845, _848), vec3(_842, _845, _848)));
    float _853 = _852 * _842;
    float _854 = _852 * _845;
    float _855 = _852 * _848;
    float _4059 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _856 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4081 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _4092 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4103 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _860 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _876 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _926 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _916);
    float _927 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _916);
    float _928 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _916);
    float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
    float _933 = _926 * _932;
    float _934 = _927 * _932;
    float _935 = _928 * _932;
    float _941 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _942 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _960 = fma(_855, cbSceneParam._m0[5u].z, fma(_854, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _853));
    float _963 = fma(_855, cbSceneParam._m0[6u].z, fma(_854, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _853));
    float _966 = fma(_855, cbSceneParam._m0[7u].z, fma(_854, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _853));
    uint _979 = uint(roundEven(NORMAL.w)) * 13u;
    uint _981 = (_979 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _987 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * cbInstanceData._m0[_981].x;
    float _988 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * cbInstanceData._m0[_981].y;
    float _989 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * cbInstanceData._m0[_981].z;
    float _4114 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _991 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _993 = 1.0 - _860;
    float _994 = _990 * _993;
    float _995 = _991 * _993;
    float _996 = _992 * _993;
    float _1001 = (_990 + (-0.039999999105930328369140625)) * _860;
    float _1002 = (_991 + (-0.039999999105930328369140625)) * _860;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _860;
    float _1004 = _1001 + 0.039999999105930328369140625;
    float _1006 = _1002 + 0.039999999105930328369140625;
    float _1007 = _1003 + 0.039999999105930328369140625;
    vec4 _1016 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _941, cbSceneParam._m0[86u].y * _942));
    float _1019 = _1016.x * TEXCOORD_5.w;
    float _1020 = dot(vec3(_853, _854, _855), vec3(_933, _934, _935));
    float _1023 = _1020 * 2.0;
    float _1027 = (_1023 * _853) - _933;
    float _1028 = (_1023 * _854) - _934;
    float _1029 = (_1023 * _855) - _935;
    float _1033 = abs(dot(vec3(_933, _934, _935), vec3(_853, _854, _855)));
    float _4147 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1035 = sqrt(_856);
    float _1048 = exp2((_1035 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1035 * 3.0));
    float _1054 = (1.0 - _1048) * ((_1035 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1055 = _1048 * _1035;
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1393;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1118 = fma(_1091, cbModelParam._m0[26u].z, fma(_1087, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083));
        float _1122 = fma(_1091, cbModelParam._m0[27u].z, fma(_1087, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083));
        float _1126 = fma(_1091, cbModelParam._m0[28u].z, fma(_1087, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083));
        float _1151 = _1083 + _853;
        float _1152 = _1087 + _854;
        float _1153 = _1091 + _855;
        float _1163 = fma(_1153, cbModelParam._m0[26u].z, fma(_1152, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1151)) - _1118;
        float _1164 = fma(_1153, cbModelParam._m0[27u].z, fma(_1152, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1151)) - _1122;
        float _1165 = fma(_1153, cbModelParam._m0[28u].z, fma(_1152, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1151)) - _1126;
        float _1169 = inversesqrt(dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165)));
        float _1182 = ((_1169 * _1163) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1118 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1169 * _1164) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1122 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1169 * _1165) / cbModelParam._m0[34u].z) + ((((((_1126 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        float _1221 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1187.x + (-0.5));
        float _1223 = _1221 * (_1187.y + (-0.5));
        float _1224 = _1221 * (_1187.z + (-0.5));
        float _1231 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1194.x + (-0.5));
        float _1233 = _1231 * (_1194.y + (-0.5));
        float _1234 = _1231 * (_1194.z + (-0.5));
        float _1241 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1201.x + (-0.5));
        float _1243 = _1241 * (_1201.y + (-0.5));
        float _1244 = _1241 * (_1201.z + (-0.5));
        float _1251 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1208.x + (-0.5));
        float _1253 = _1251 * (_1208.y + (-0.5));
        float _1254 = _1251 * (_1208.z + (-0.5));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = _1222 * 0.5;
        float _1259 = _1232 * 0.5;
        float _1260 = _1242 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1275 = (dot(vec3(_853, _854, _855), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1285 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4195 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1287 + 1.0))) + _1292) * _1255;
        float _1302 = _1223 * 0.5;
        float _1303 = _1233 * 0.5;
        float _1304 = _1243 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_853, _854, _855), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4228 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1329 + 1.0))) + _1334) * _1256;
        float _1344 = _1224 * 0.5;
        float _1345 = _1234 * 0.5;
        float _1346 = _1244 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_853, _854, _855), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4261 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1371 + 1.0))) + _1376) * _1257;
        _1393 = _1224;
        _1395 = _1223;
        _1396 = _1222;
        _1397 = _1234;
        _1398 = _1233;
        _1399 = _1232;
        _1400 = _1244;
        _1401 = _1243;
        _1402 = _1242;
        _1403 = _1257;
        _1404 = _1256;
        _1405 = _1255;
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
    }
    else
    {
        _1393 = _1394;
        _1395 = _1394;
        _1396 = _1394;
        _1397 = _1394;
        _1398 = _1394;
        _1399 = _1394;
        _1400 = _1394;
        _1401 = _1394;
        _1402 = _1394;
        _1403 = _1394;
        _1404 = _1394;
        _1405 = _1394;
        _1406 = 0.0;
        _1407 = 0.0;
        _1408 = 0.0;
    }
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1434 = fma(_1091, cbModelParam._m0[30u].z, fma(_1087, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1083));
        float _1438 = fma(_1091, cbModelParam._m0[31u].z, fma(_1087, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1083));
        float _1442 = fma(_1091, cbModelParam._m0[32u].z, fma(_1087, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1083));
        float _1465 = _1083 + _853;
        float _1466 = _1087 + _854;
        float _1467 = _1091 + _855;
        float _1477 = fma(_1467, cbModelParam._m0[30u].z, fma(_1466, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1465)) - _1434;
        float _1478 = fma(_1467, cbModelParam._m0[31u].z, fma(_1466, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1465)) - _1438;
        float _1479 = fma(_1467, cbModelParam._m0[32u].z, fma(_1466, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1465)) - _1442;
        float _1483 = inversesqrt(dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479)));
        float _1496 = ((_1483 * _1477) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1434 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1497 = ((_1483 * _1478) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1438 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1498 = ((_1483 * _1479) / cbModelParam._m0[35u].z) + ((((((_1442 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        float _1533 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1500.x + (-0.5));
        float _1535 = _1533 * (_1500.y + (-0.5));
        float _1536 = _1533 * (_1500.z + (-0.5));
        float _1543 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1507.x + (-0.5));
        float _1545 = _1543 * (_1507.y + (-0.5));
        float _1546 = _1543 * (_1507.z + (-0.5));
        float _1553 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1514.x + (-0.5));
        float _1555 = _1553 * (_1514.y + (-0.5));
        float _1556 = _1553 * (_1514.z + (-0.5));
        float _1563 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1521.x + (-0.5));
        float _1565 = _1563 * (_1521.y + (-0.5));
        float _1566 = _1563 * (_1521.z + (-0.5));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = _1534 * 0.5;
        float _1571 = _1544 * 0.5;
        float _1572 = _1554 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_853, _854, _855), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4324 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1597 + 1.0))) + _1602) * _1567;
        float _1612 = _1535 * 0.5;
        float _1613 = _1545 * 0.5;
        float _1614 = _1555 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_853, _854, _855), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4357 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1639 + 1.0))) + _1644) * _1568;
        float _1654 = _1536 * 0.5;
        float _1655 = _1546 * 0.5;
        float _1656 = _1556 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_853, _854, _855), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4390 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1681 + 1.0))) + _1686) * _1569;
        _1703 = _1536;
        _1704 = _1535;
        _1705 = _1534;
        _1706 = _1546;
        _1707 = _1545;
        _1708 = _1544;
        _1709 = _1556;
        _1710 = _1555;
        _1711 = _1554;
        _1712 = _1569;
        _1713 = _1568;
        _1714 = _1567;
        _1715 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
    }
    else
    {
        _1703 = _1394;
        _1704 = _1394;
        _1705 = _1394;
        _1706 = _1394;
        _1707 = _1394;
        _1708 = _1394;
        _1709 = _1394;
        _1710 = _1394;
        _1711 = _1394;
        _1712 = _1394;
        _1713 = _1394;
        _1714 = _1394;
        _1715 = 0.0;
        _1716 = 0.0;
        _1717 = 0.0;
    }
    float _1727 = (cbModelParam._m0[1u].x * (_1715 - _1406)) + _1406;
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1407)) + _1407;
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1408)) + _1408;
    float _1750 = fma(_1729, cbSceneParam._m0[89u].z, fma(_1728, cbSceneParam._m0[89u].y, _1727 * cbSceneParam._m0[89u].x));
    float _1753 = fma(_1729, cbSceneParam._m0[90u].z, fma(_1728, cbSceneParam._m0[90u].y, _1727 * cbSceneParam._m0[90u].x));
    float _1756 = fma(_1729, cbSceneParam._m0[91u].z, fma(_1728, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1727));
    float _1771 = _1027 * 0.5;
    float _1772 = _1028 * 0.5;
    float _1773 = _1029 * 0.5;
    float _1774 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1777 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1780 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1703, _1706, _1709, _1712));
    float _1814;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1787 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1393, _1397, _1400, _1403));
        float _1791 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1395, _1398, _1401, _1404));
        float _1795 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1396, _1399, _1402, _1405));
        float _1802 = dot(vec4(cbModelParam._m0[39u]), vec4(_1771, _1772, _1773, 1.0));
        _1814 = dot(vec3(isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1814 = 1.0;
    }
    float _1825;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1816 = dot(vec4(cbModelParam._m0[40u]), vec4(_1771, _1772, _1773, 1.0));
        _1825 = dot(vec3(isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1816) ? 0.0 : (isnan(0.0) ? _1816 : max(0.0, _1816))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1825 = 1.0;
    }
    float _1829 = (_1825 * cbModelParam._m0[1u].x) + (_1814 * (1.0 - cbModelParam._m0[1u].x));
    float _1839 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _856);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1839 : min(cbModelParam._m0[25u].z, _1839));
    float _1920;
    float _1922;
    float _1924;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1887 = fma(_1091, cbModelParam._m0[13u].z, fma(_1087, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083)) + cbModelParam._m0[13u].w;
        float _1891 = fma(_1091, cbModelParam._m0[14u].z, fma(_1087, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083)) + cbModelParam._m0[14u].w;
        float _1895 = fma(_1091, cbModelParam._m0[15u].z, fma(_1087, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083)) + cbModelParam._m0[15u].w;
        float _1898 = fma(_1029, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1027));
        float _1901 = fma(_1029, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1027));
        float _1904 = fma(_1029, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1027));
        float _1932;
        if (_1898 > 0.0)
        {
            _1932 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1932 = frontier_phi_14_12_ladder;
        }
        float _2103;
        if (_1901 > 0.0)
        {
            _2103 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2103 = frontier_phi_23_19_ladder;
        }
        float _2398;
        if (_1904 > 0.0)
        {
            _2398 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2398 = frontier_phi_35_30_ladder;
        }
        float _2400 = isnan(_2103) ? _1932 : (isnan(_1932) ? _2103 : min(_1932, _2103));
        float _2401 = isnan(_2398) ? _2400 : (isnan(_2400) ? _2398 : min(_2400, _2398));
        float _2405 = (_2401 * _1898) + _1887;
        float _2406 = (_2401 * _1901) + _1891;
        float _2407 = (_2401 * _1904) + _1895;
        float _2408 = _2401 * 9.9999997473787516355514526367188e-05;
        float _2410 = (-1.0) - _2408;
        float _2412 = _2408 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2407 > _2412) || ((_2407 < _2410) || ((_2406 > _2412) || ((_2406 < _2410) || ((_2405 < _2410) || (_2405 > _2412))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2407, cbModelParam._m0[9u].z, fma(_2406, cbModelParam._m0[9u].y, _2405 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2407, cbModelParam._m0[10u].z, fma(_2406, cbModelParam._m0[10u].y, _2405 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2407, cbModelParam._m0[11u].z, fma(_2406, cbModelParam._m0[11u].y, _2405 * cbModelParam._m0[11u].x))), _1840);
            frontier_phi_13_35_ladder = _2552.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2552.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2552.x * cbModelParam._m0[1u].y;
        }
        _1920 = frontier_phi_13_35_ladder_2;
        _1922 = frontier_phi_13_35_ladder_1;
        _1924 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1027, _1028, _1029), _1840);
        _1920 = _1908.x * cbModelParam._m0[1u].y;
        _1922 = _1908.y * cbModelParam._m0[1u].y;
        _1924 = _1908.z * cbModelParam._m0[1u].y;
    }
    float _1928 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _856);
    float _1929 = isnan(_1928) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1928 : min(cbModelParam._m0[25u].w, _1928));
    float _2018;
    float _2020;
    float _2022;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1982 = fma(_1091, cbModelParam._m0[21u].z, fma(_1087, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083)) + cbModelParam._m0[21u].w;
        float _1986 = fma(_1091, cbModelParam._m0[22u].z, fma(_1087, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083)) + cbModelParam._m0[22u].w;
        float _1990 = fma(_1091, cbModelParam._m0[23u].z, fma(_1087, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083)) + cbModelParam._m0[23u].w;
        float _1993 = fma(_1029, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1027));
        float _1996 = fma(_1029, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1027));
        float _1999 = fma(_1029, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1027));
        float _2108;
        if (_1993 > 0.0)
        {
            _2108 = abs((1.0 - _1982) / _1993);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1982 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2108 = frontier_phi_25_21_ladder;
        }
        float _2425;
        if (_1996 > 0.0)
        {
            _2425 = abs((1.0 - _1986) / _1996);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1986 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2425 = frontier_phi_37_32_ladder;
        }
        float _2763;
        if (_1999 > 0.0)
        {
            _2763 = abs((1.0 - _1990) / _1999);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1990 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2763 = frontier_phi_47_44_ladder;
        }
        float _2765 = isnan(_2425) ? _2108 : (isnan(_2108) ? _2425 : min(_2108, _2425));
        float _2766 = isnan(_2763) ? _2765 : (isnan(_2765) ? _2763 : min(_2765, _2763));
        float _2770 = (_2766 * _1993) + _1982;
        float _2771 = (_2766 * _1996) + _1986;
        float _2772 = (_2766 * _1999) + _1990;
        float _2773 = _2766 * 9.9999997473787516355514526367188e-05;
        float _2774 = (-1.0) - _2773;
        float _2776 = _2773 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2772 > _2776) || ((_2772 < _2774) || ((_2771 > _2776) || ((_2771 < _2774) || ((_2770 < _2774) || (_2770 > _2776))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2894 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2772, cbModelParam._m0[17u].z, fma(_2771, cbModelParam._m0[17u].y, _2770 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2772, cbModelParam._m0[18u].z, fma(_2771, cbModelParam._m0[18u].y, _2770 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2772, cbModelParam._m0[19u].z, fma(_2771, cbModelParam._m0[19u].y, _2770 * cbModelParam._m0[19u].x))), _1929);
            frontier_phi_22_47_ladder = _2894.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2894.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2894.x * cbModelParam._m0[1u].z;
        }
        _2018 = frontier_phi_22_47_ladder_2;
        _2020 = frontier_phi_22_47_ladder_1;
        _2022 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2002 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1027, _1028, _1029), _1929);
        _2018 = _2002.x * cbModelParam._m0[1u].z;
        _2020 = _2002.y * cbModelParam._m0[1u].z;
        _2022 = _2002.z * cbModelParam._m0[1u].z;
    }
    float _2035 = (((_1054 * _1004) + _1055) * _1019) * ((cbModelParam._m0[1u].w * (_2018 - _1920)) + _1920);
    float _2037 = (((_1054 * _1006) + _1055) * _1019) * ((cbModelParam._m0[1u].w * (_2020 - _1922)) + _1922);
    float _2039 = (((_1054 * _1007) + _1055) * _1019) * ((cbModelParam._m0[1u].w * (_2022 - _1924)) + _1924);
    float _2042 = fma(_2039, cbSceneParam._m0[89u].z, fma(_2037, cbSceneParam._m0[89u].y, _2035 * cbSceneParam._m0[89u].x));
    float _2045 = fma(_2039, cbSceneParam._m0[90u].z, fma(_2037, cbSceneParam._m0[90u].y, _2035 * cbSceneParam._m0[90u].x));
    float _2048 = fma(_2039, cbSceneParam._m0[91u].z, fma(_2037, cbSceneParam._m0[91u].y, _2035 * cbSceneParam._m0[91u].x));
    float _2082 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2086 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2090 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2094 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2095 = _2082 / _2094;
    float _2096 = _2086 / _2094;
    float _2097 = _2090 / _2094;
    float _2244;
    float _2245;
    float _2246;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2124 = ((uint(_2097 > cbSceneParam._m0[59u].y) + uint(_2097 > cbSceneParam._m0[59u].x)) + uint(_2097 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2125 = _2124 + 43u;
        uint _2133 = _2124 + 44u;
        uint _2141 = _2124 + 45u;
        uint _2149 = _2124 + 46u;
        float _2160 = fma(_2094, cbSceneParam._m0[_2125].w, fma(_2090, cbSceneParam._m0[_2125].z, fma(_2086, cbSceneParam._m0[_2125].y, _2082 * cbSceneParam._m0[_2125].x)));
        float _2164 = fma(_2094, cbSceneParam._m0[_2133].w, fma(_2090, cbSceneParam._m0[_2133].z, fma(_2086, cbSceneParam._m0[_2133].y, _2082 * cbSceneParam._m0[_2133].x)));
        float _2172 = fma(_2094, cbSceneParam._m0[_2149].w, fma(_2090, cbSceneParam._m0[_2149].z, fma(_2086, cbSceneParam._m0[_2149].y, _2082 * cbSceneParam._m0[_2149].x)));
        float _2177 = cbSceneParam._m0[33u].z * _2172;
        float _2179 = cbSceneParam._m0[33u].w * _2172;
        float _2182 = fma(_2094, cbSceneParam._m0[_2141].w, fma(_2090, cbSceneParam._m0[_2141].z, fma(_2086, cbSceneParam._m0[_2141].y, _2082 * cbSceneParam._m0[_2141].x))) / _2172;
        float _2230 = (cbSceneParam._m0[33u].x - sqrt(((_2096 * _2096) + (_2095 * _2095)) + (_2097 * _2097))) * cbSceneParam._m0[33u].y;
        float _4516 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2237 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2177 + _2160) / _2172, (_2179 + _2164) / _2172), _2182), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2179 + _2160) / _2172, (_2164 - _2177) / _2172), _2182), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2160 - _2177) / _2172, (_2164 - _2179) / _2172), _2182), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2160 - _2179) / _2172, (_2177 + _2164) / _2172), _2182), 0.0)).x), vec4(0.25)));
        _2244 = 1.0 - (_2237 * cbSceneParam._m0[34u].x);
        _2245 = 1.0 - (_2237 * cbSceneParam._m0[34u].y);
        _2246 = 1.0 - (_2237 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2244 = 1.0;
        _2245 = 1.0;
        _2246 = 1.0;
    }
    float _2310;
    float _2312;
    float _2314;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2298 = fma(_2094, cbSceneParam._m0[63u].w, fma(_2090, cbSceneParam._m0[63u].z, fma(_2086, cbSceneParam._m0[63u].y, _2082 * cbSceneParam._m0[63u].x)));
        float _2299 = fma(_2094, cbSceneParam._m0[60u].w, fma(_2090, cbSceneParam._m0[60u].z, fma(_2086, cbSceneParam._m0[60u].y, _2082 * cbSceneParam._m0[60u].x))) / _2298;
        float _2300 = fma(_2094, cbSceneParam._m0[61u].w, fma(_2090, cbSceneParam._m0[61u].z, fma(_2086, cbSceneParam._m0[61u].y, _2082 * cbSceneParam._m0[61u].x))) / _2298;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2299 >= cbSceneParam._m0[64u].x) && (_2300 >= cbSceneParam._m0[64u].y)) && (_2299 <= cbSceneParam._m0[64u].z)) && (_2300 <= cbSceneParam._m0[64u].w))
        {
            float _2438 = fma(_2094, cbSceneParam._m0[62u].w, fma(_2090, cbSceneParam._m0[62u].z, fma(_2086, cbSceneParam._m0[62u].y, _2082 * cbSceneParam._m0[62u].x))) / _2298;
            float _2442 = isnan(cbSceneParam._m0[41u].w) ? _2438 : (isnan(_2438) ? cbSceneParam._m0[41u].w : max(_2438, cbSceneParam._m0[41u].w));
            float _2485 = (cbSceneParam._m0[33u].x - sqrt(((_2096 * _2096) + (_2095 * _2095)) + (_2097 * _2097))) * cbSceneParam._m0[33u].y;
            float _4532 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
            float _2492 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2299, cbSceneParam._m0[33u].w + _2300), _2442), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2299, _2300 - cbSceneParam._m0[33u].z), _2442), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2299 - cbSceneParam._m0[33u].z, _2300 - cbSceneParam._m0[33u].w), _2442), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2299 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2300), _2442), 0.0)).x), vec4(0.25)));
            float _2496 = 1.0 - (_2492 * cbSceneParam._m0[34u].x);
            float _2497 = 1.0 - (_2492 * cbSceneParam._m0[34u].y);
            float _2498 = 1.0 - (_2492 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2498) ? _2246 : (isnan(_2246) ? _2498 : min(_2246, _2498));
            frontier_phi_34_33_ladder_1 = isnan(_2497) ? _2245 : (isnan(_2245) ? _2497 : min(_2245, _2497));
            frontier_phi_34_33_ladder_2 = isnan(_2496) ? _2244 : (isnan(_2244) ? _2496 : min(_2244, _2496));
        }
        else
        {
            frontier_phi_34_33_ladder = _2246;
            frontier_phi_34_33_ladder_1 = _2245;
            frontier_phi_34_33_ladder_2 = _2244;
        }
        _2310 = frontier_phi_34_33_ladder_2;
        _2312 = frontier_phi_34_33_ladder_1;
        _2314 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2310 = _2244;
        _2312 = _2245;
        _2314 = _2246;
    }
    uvec4 _2319 = floatBitsToUint(cbInstanceData._m0[_979 + 5u]);
    uint _2321 = _2319.x * 14u;
    uint _2322 = _2321 + 13u;
    float _2329 = _1019 + (-1.0);
    float _2334 = (cbLight._m0[_2322].x * _2329) + 1.0;
    float _2335 = (cbLight._m0[_2322].y * _2329) + 1.0;
    float _2336 = (cbLight._m0[_2322].z * _2329) + 1.0;
    float _2337 = (cbLight._m0[_2322].w * _2329) + 1.0;
    uint _2338 = _2321 + 5u;
    float _2344 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
    uint _2348 = _2321 + 4u;
    float _2357 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
    uint _2361 = _2321 | 1u;
    float _2372 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_853, _854, _855));
    float _2375 = dot(vec3(cbLight._m0[_2361].xyz), vec3(_853, _854, _855));
    float _4568 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _4579 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2380 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * 0.3183098733425140380859375;
    float _2382 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * 0.3183098733425140380859375;
    float _2389 = ((cbLight._m0[_2338].x * _2344) * _2382) + (((cbLight._m0[_2348].x * _2310) * _2357) * _2380);
    float _2390 = ((_2344 * cbLight._m0[_2338].y) * _2382) + (((cbLight._m0[_2348].y * _2312) * _2357) * _2380);
    float _2391 = ((_2344 * cbLight._m0[_2338].z) * _2382) + (((cbLight._m0[_2348].z * _2314) * _2357) * _2380);
    uvec4 _2395 = floatBitsToUint(cbLight._m0[_2321 + 12u]);
    bool _2397 = _2395.x == 0u;
    float _2499;
    float _2501;
    float _2503;
    if (_2397)
    {
        _2499 = _2389;
        _2501 = _2390;
        _2503 = _2391;
    }
    else
    {
        uint _2507 = _2321 + 6u;
        float _2523 = (dot(vec3(cbLight._m0[_2321 + 2u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2524 = _2523 * _2523;
        float _4590 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2525 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2526 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        _2499 = (((cbLight._m0[_2507].x * 0.3183098733425140380859375) * _2525) * _2526) + _2389;
        _2501 = (((cbLight._m0[_2507].y * 0.3183098733425140380859375) * _2525) * _2526) + _2390;
        _2503 = (((cbLight._m0[_2507].z * 0.3183098733425140380859375) * _2525) * _2526) + _2391;
    }
    bool _2506 = _2395.y == 0u;
    float _2561;
    float _2563;
    float _2565;
    if (_2506)
    {
        _2561 = _2499;
        _2563 = _2501;
        _2565 = _2503;
    }
    else
    {
        uint _2734 = _2321 + 7u;
        float _2750 = (dot(vec3(cbLight._m0[_2321 + 3u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2751 = _2750 * _2750;
        float _4606 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2752 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2753 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
        _2561 = (((cbLight._m0[_2734].x * 0.3183098733425140380859375) * _2752) * _2753) + _2499;
        _2563 = (((cbLight._m0[_2734].y * 0.3183098733425140380859375) * _2752) * _2753) + _2501;
        _2565 = (((cbLight._m0[_2734].z * 0.3183098733425140380859375) * _2752) * _2753) + _2503;
    }
    uint _2568 = _2321 + 8u;
    float _2581 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _856) * 0.949999988079071044921875);
    float _2582 = _2581 * _2581;
    float _2583 = cbLight._m0[_2321].x + _933;
    float _2584 = cbLight._m0[_2321].y + _934;
    float _2585 = cbLight._m0[_2321].z + _935;
    float _2589 = inversesqrt(dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585)));
    float _2590 = _2589 * _2583;
    float _2591 = _2589 * _2584;
    float _2592 = _2589 * _2585;
    float _2593 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2321].xyz));
    float _4622 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2596 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _4633 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _2597 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _2598 = dot(vec3(_853, _854, _855), vec3(_2590, _2591, _2592));
    float _4644 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2601 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2602 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2590, _2591, _2592));
    float _4655 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2606 = _2582 * _2582;
    float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
    float _2618 = exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0);
    float _2619 = 0.959999978542327880859375 - _1001;
    float _2621 = 0.959999978542327880859375 - _1002;
    float _2622 = 0.959999978542327880859375 - _1003;
    float _2629 = 1.0 - _2582;
    float _2640 = (0.5 / (((_2597 * ((_2596 * _2629) + _2582)) + 9.9999999392252902907785028219223e-09) + (((_2597 * _2629) + _2582) * _2596))) * _2596;
    float _4666 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2642 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
    uint _2656 = _2321 + 9u;
    float _2667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2361].w)) * _856) * 0.949999988079071044921875);
    float _2668 = _2667 * _2667;
    float _2669 = cbLight._m0[_2361].x + _933;
    float _2670 = cbLight._m0[_2361].y + _934;
    float _2671 = cbLight._m0[_2361].z + _935;
    float _2675 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
    float _2676 = _2675 * _2669;
    float _2677 = _2675 * _2670;
    float _2678 = _2675 * _2671;
    float _2679 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2361].xyz));
    float _4677 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2682 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _2683 = dot(vec3(_853, _854, _855), vec3(_2676, _2677, _2678));
    float _4688 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2686 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _2687 = dot(vec3(cbLight._m0[_2361].xyz), vec3(_2676, _2677, _2678));
    float _4699 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2691 = _2668 * _2668;
    float _2695 = ((_2686 * _2686) * (_2691 + (-1.0))) + 1.0;
    float _2702 = exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0);
    float _2709 = 1.0 - _2668;
    float _2719 = (0.5 / (((_2597 * ((_2682 * _2709) + _2668)) + 9.9999999392252902907785028219223e-09) + (((_2597 * _2709) + _2668) * _2682))) * _2682;
    float _4710 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2721 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2691 / ((_2695 * _2695) * 3.141590118408203125));
    float _2731 = (((((_2702 * _2619) + _1004) * cbLight._m0[_2656].x) * _2721) * _2344) + ((((cbLight._m0[_2568].x * _2310) * ((_2618 * _2619) + _1004)) * _2642) * _2357);
    float _2732 = (((((_2702 * _2621) + _1006) * cbLight._m0[_2656].y) * _2721) * _2344) + ((((cbLight._m0[_2568].y * _2312) * ((_2618 * _2621) + _1006)) * _2642) * _2357);
    float _2733 = (((((_2702 * _2622) + _1007) * cbLight._m0[_2656].z) * _2721) * _2344) + ((((cbLight._m0[_2568].z * _2314) * ((_2618 * _2622) + _1007)) * _2642) * _2357);
    float _2789;
    float _2791;
    float _2793;
    if (_2397)
    {
        _2789 = _2731;
        _2791 = _2732;
        _2793 = _2733;
    }
    else
    {
        uint _2795 = _2321 + 2u;
        uint _2799 = _2321 + 10u;
        float _2813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2795].w)) * _856) * 0.949999988079071044921875);
        float _2814 = _2813 * _2813;
        float _2815 = cbLight._m0[_2795].x + _933;
        float _2816 = cbLight._m0[_2795].y + _934;
        float _2817 = cbLight._m0[_2795].z + _935;
        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
        float _2822 = _2821 * _2815;
        float _2823 = _2821 * _2816;
        float _2824 = _2821 * _2817;
        float _2825 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2795].xyz));
        float _4721 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2828 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2829 = dot(vec3(_853, _854, _855), vec3(_2822, _2823, _2824));
        float _4732 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2832 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2833 = dot(vec3(cbLight._m0[_2795].xyz), vec3(_2822, _2823, _2824));
        float _4743 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2837 = _2814 * _2814;
        float _2841 = ((_2832 * _2832) * (_2837 + (-1.0))) + 1.0;
        float _2848 = exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0);
        float _2855 = 1.0 - _2814;
        float _2865 = (0.5 / (((_2597 * ((_2828 * _2855) + _2814)) + 9.9999999392252902907785028219223e-09) + (((_2597 * _2855) + _2814) * _2828))) * _2828;
        float _4754 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2867 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2837 / ((_2841 * _2841) * 3.141590118408203125));
        float _2868 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        _2789 = (((((_2848 * _2619) + _1004) * cbLight._m0[_2799].x) * _2867) * _2868) + _2731;
        _2791 = (((((_2848 * _2621) + _1006) * cbLight._m0[_2799].y) * _2867) * _2868) + _2732;
        _2793 = (((((_2848 * _2622) + _1007) * cbLight._m0[_2799].z) * _2867) * _2868) + _2733;
    }
    float _2899;
    float _2901;
    float _2903;
    if (_2506)
    {
        _2899 = _2789;
        _2901 = _2791;
        _2903 = _2793;
    }
    else
    {
        uint _2910 = _2321 + 3u;
        uint _2914 = _2321 + 11u;
        float _2928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2910].w)) * _856) * 0.949999988079071044921875);
        float _2929 = _2928 * _2928;
        float _2930 = cbLight._m0[_2910].x + _933;
        float _2931 = cbLight._m0[_2910].y + _934;
        float _2932 = cbLight._m0[_2910].z + _935;
        float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
        float _2937 = _2936 * _2930;
        float _2938 = _2936 * _2931;
        float _2939 = _2936 * _2932;
        float _2940 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2910].xyz));
        float _4770 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2943 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
        float _2944 = dot(vec3(_853, _854, _855), vec3(_2937, _2938, _2939));
        float _4781 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2947 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2948 = dot(vec3(cbLight._m0[_2910].xyz), vec3(_2937, _2938, _2939));
        float _4792 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2952 = _2929 * _2929;
        float _2956 = ((_2947 * _2947) * (_2952 + (-1.0))) + 1.0;
        float _2963 = exp2(log2(1.0 - (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) * 5.0);
        float _2970 = 1.0 - _2929;
        float _2980 = (0.5 / (((_2597 * ((_2943 * _2970) + _2929)) + 9.9999999392252902907785028219223e-09) + (((_2597 * _2970) + _2929) * _2943))) * _2943;
        float _4803 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        float _2982 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2952 / ((_2956 * _2956) * 3.141590118408203125));
        float _2983 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
        _2899 = (((((_2963 * _2619) + _1004) * cbLight._m0[_2914].x) * _2982) * _2983) + _2789;
        _2901 = (((((_2963 * _2621) + _1006) * cbLight._m0[_2914].y) * _2982) * _2983) + _2791;
        _2903 = (((((_2963 * _2622) + _1007) * cbLight._m0[_2914].z) * _2982) * _2983) + _2793;
    }
    float _3049;
    float _3051;
    float _3053;
    float _3055;
    float _3057;
    float _3059;
    if (_2319.y == 0u)
    {
        uvec4 _3004 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3005 = _3004.x;
        uint _3016 = uint((float(_3004.y) * floor(float(uint(cbSceneParam._m0[85u].y * _942) / _3005))) + floor(float(uint(cbSceneParam._m0[85u].x * _941) / _3005)));
        float _3026 = (log2(_2097 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3027 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
        uint _3030 = uint(isnan(14.0) ? _3027 : (isnan(_3027) ? 14.0 : min(_3027, 14.0)));
        uvec4 _3035 = texelFetch(g_lightClusterGridBuffer, int(((_3030 << 2u) + (_3016 << 6u)) >> 2u));
        uint _3036 = _3035.x;
        uint _3037 = _3004.z;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        if (((((1u << ((_3037 >> 4u) & 15u)) + 4294967295u) & _3036) == 0u) || ((_3037 & 240u) == 0u))
        {
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
            _3122 = 0.0;
            _3124 = 0.0;
            _3126 = 0.0;
        }
        else
        {
            float _3117;
            float _3119;
            float _3121;
            float _3123;
            float _3125;
            float _3127;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            uint _3267 = 0u;
            uint _3276;
            bool _3277;
            for (;;)
            {
                _3276 = texelFetch(g_lightClassification, int((((_3030 << 5u) + (_3016 << 9u)) + (_3267 << 2u)) >> 2u)).x;
                _3277 = _3276 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3277)
                {
                    frontier_phi_66_pred = _3266;
                    frontier_phi_66_pred_1 = _3265;
                    frontier_phi_66_pred_2 = _3264;
                    frontier_phi_66_pred_3 = _3263;
                    frontier_phi_66_pred_4 = _3262;
                    frontier_phi_66_pred_5 = _3261;
                }
                else
                {
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    uint _3391;
                    _3385 = _3261;
                    _3386 = _3262;
                    _3387 = _3263;
                    _3388 = _3264;
                    _3389 = _3265;
                    _3390 = _3266;
                    _3391 = _3276;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    for (;;)
                    {
                        uint _3395 = uint(findLSB(_3391)) + (_3267 << 5u);
                        uint _3392 = (_3391 + 4294967295u) & _3391;
                        uint _3397 = _3395 * 48u;
                        vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 3u)).x));
                        uint _3417 = (_3395 * 48u) + 4u;
                        vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3417)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 3u)).x));
                        uint _3436 = (_3395 * 48u) + 8u;
                        vec3 _3447 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x));
                        float _3451 = _3411.x - _2095;
                        float _3452 = _3411.y - _2096;
                        float _3453 = _3411.z - _2097;
                        float _3454 = dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453));
                        float _3457 = inversesqrt(_3454);
                        float _3458 = _3457 * _3451;
                        float _3459 = _3457 * _3452;
                        float _3460 = _3457 * _3453;
                        float _3461 = dot(vec3(_960, _963, _966), vec3(_3458, _3459, _3460));
                        float _3466 = 1.0 - (_3454 * _3411.w);
                        float _4829 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3467 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3468 = sqrt(_3454) * _3430.w;
                        float _3471 = 1.39999997615814208984375 / (_3468 + 1.39999997615814208984375);
                        float _3472 = _3471 * _3471;
                        float _3475 = ((1.0 - _3472) * _3461) + _3472;
                        float _3478 = _3468 * _3468;
                        float _3482 = ((isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0))) * _3467) / ((_3478 * 0.699999988079071044921875) + 1.0);
                        float _3486 = (-0.0) - _2095;
                        float _3487 = (-0.0) - _2096;
                        float _3488 = (-0.0) - _2097;
                        float _3492 = inversesqrt(dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488)));
                        float _3493 = _3492 * _3486;
                        float _3494 = _3492 * _3487;
                        float _3495 = _3492 * _3488;
                        float _3502 = exp2(log2(1.0 / ((_3478 * 3.5) + 5.0)) * 0.25);
                        float _3503 = 1.0 - _1035;
                        float _3510 = sqrt(1.0 - ((1.0 - (_3503 * _3503)) * (1.0 - (_3502 * _3502))));
                        float _3511 = _3510 * _3510;
                        float _3512 = _3511 * _3511;
                        float _3513 = _3493 + _3458;
                        float _3514 = _3494 + _3459;
                        float _3515 = _3495 + _3460;
                        float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                        float _3523 = dot(vec3(_960, _963, _966), vec3(_3493, _3494, _3495));
                        float _4845 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3526 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                        float _3527 = dot(vec3(_960, _963, _966), vec3(_3519 * _3513, _3519 * _3514, _3519 * _3515));
                        float _4856 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3530 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                        float _3534 = ((_3530 * _3530) * (_3512 + (-1.0))) + 1.0;
                        float _3535 = _3471 * _3511;
                        float _3536 = _3535 * _3535;
                        float _3539 = ((1.0 - _3536) * _3461) + _3536;
                        float _4867 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3540 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                        float _3541 = 1.0 - _3511;
                        float _3551 = (0.5 / (((_3540 * ((_3526 * _3541) + _3511)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3511) * _3526))) * _3540;
                        float _4878 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3562 = (((_3512 * 3.1415927410125732421875) * (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) / ((_3534 * _3534) * ((_3478 * 2.1991131305694580078125) + 3.141590118408203125))) * _3467;
                        _3320 = (_3482 * _3430.x) + _3388;
                        _3321 = (_3482 * _3430.y) + _3389;
                        _3322 = (_3482 * _3430.z) + _3390;
                        _3317 = (_3562 * _3447.x) + _3385;
                        _3318 = (_3562 * _3447.y) + _3386;
                        _3319 = (_3562 * _3447.z) + _3387;
                        if (_3392 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3385 = _3317;
                            _3386 = _3318;
                            _3387 = _3319;
                            _3388 = _3320;
                            _3389 = _3321;
                            _3390 = _3322;
                            _3391 = _3392;
                        }
                    }
                    frontier_phi_66_pred = _3322;
                    frontier_phi_66_pred_1 = _3321;
                    frontier_phi_66_pred_2 = _3320;
                    frontier_phi_66_pred_3 = _3319;
                    frontier_phi_66_pred_4 = _3318;
                    frontier_phi_66_pred_5 = _3317;
                }
                _3127 = frontier_phi_66_pred;
                _3125 = frontier_phi_66_pred_1;
                _3123 = frontier_phi_66_pred_2;
                _3121 = frontier_phi_66_pred_3;
                _3119 = frontier_phi_66_pred_4;
                _3117 = frontier_phi_66_pred_5;
                uint _3268 = _3267 + 1u;
                if (_3268 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3261 = _3117;
                    _3262 = _3119;
                    _3263 = _3121;
                    _3264 = _3123;
                    _3265 = _3125;
                    _3266 = _3127;
                    _3267 = _3268;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
            _3122 = _3123;
            _3124 = _3125;
            _3126 = _3127;
        }
        uvec4 _3130 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3131 = _3130.z;
        uint _3133 = (_3131 >> 8u) & 15u;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        if (((4294967295u << _3133) & _3036) == 0u)
        {
            _3229 = _3116;
            _3231 = _3118;
            _3233 = _3120;
            _3235 = _3122;
            _3237 = _3124;
            _3239 = _3126;
        }
        else
        {
            float _3254 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
            float _3255 = _3254 * _2095;
            float _3256 = _3254 * _2096;
            float _3257 = _3254 * _2097;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3133 < ((_3131 >> 12u) & 15u))
            {
                float _3230;
                float _3232;
                float _3234;
                float _3236;
                float _3238;
                float _3240;
                float _3368 = _3116;
                float _3369 = _3118;
                float _3370 = _3120;
                float _3371 = _3122;
                float _3372 = _3124;
                float _3373 = _3126;
                uint _3374 = _3133;
                uint _3383;
                bool _3384;
                for (;;)
                {
                    _3383 = texelFetch(g_lightClassification, int((((_3030 << 5u) + (_3016 << 9u)) + (_3374 << 2u)) >> 2u)).x;
                    _3384 = _3383 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3384)
                    {
                        frontier_phi_72_pred = _3373;
                        frontier_phi_72_pred_1 = _3372;
                        frontier_phi_72_pred_2 = _3371;
                        frontier_phi_72_pred_3 = _3370;
                        frontier_phi_72_pred_4 = _3369;
                        frontier_phi_72_pred_5 = _3368;
                    }
                    else
                    {
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3580 = _3368;
                        float _3581 = _3369;
                        float _3582 = _3370;
                        float _3583 = _3371;
                        float _3584 = _3372;
                        float _3585 = _3373;
                        uint _3586 = _3383;
                        uint _3587;
                        vec4 _3612;
                        float _3613;
                        vec4 _3628;
                        vec3 _3640;
                        vec4 _3655;
                        vec4 _3670;
                        float _3717;
                        bool _3718;
                        for (;;)
                        {
                            uint _3597 = ((_3374 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3586));
                            _3587 = (_3586 + 4294967295u) & _3586;
                            uint _3599 = _3597 * 40u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            _3613 = _3612.w;
                            uint _3615 = (_3597 * 40u) + 4u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3630 = (_3597 * 40u) + 8u;
                            _3640 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x));
                            uint _3642 = (_3597 * 40u) + 16u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3597 * 40u) + 20u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3673 = (_3597 * 40u) + 24u;
                            vec4 _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3692 = (_3597 * 40u) + 28u;
                            vec4 _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            _3717 = fma(_2097, _3705.z, fma(_2096, _3705.y, _3705.x * _2095)) + _3705.w;
                            _3718 = !((fma(_2097, _3686.z, fma(_2096, _3686.y, _3686.x * _2095)) + _3686.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3718)
                            {
                                float _3745 = _3612.x - _2095;
                                float _3746 = _3612.y - _2096;
                                float _3747 = _3612.z - _2097;
                                float _3748 = dot(vec3(_3745, _3746, _3747), vec3(_3745, _3746, _3747));
                                float _3751 = inversesqrt(_3748);
                                float _3752 = _3751 * _3745;
                                float _3753 = _3751 * _3746;
                                float _3754 = _3751 * _3747;
                                float _3758 = 1.0 - (_3748 / (_3613 * _3613));
                                float _4889 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3763 = sqrt(_3748) * _3628.w;
                                float _3765 = 1.39999997615814208984375 / (_3763 + 1.39999997615814208984375);
                                float _3766 = _3765 * _3765;
                                float _3769 = ((1.0 - _3766) * dot(vec3(_3752, _3753, _3754), vec3(_960, _963, _966))) + _3766;
                                float _3772 = _3763 * _3763;
                                float _3776 = (fma(_2097, _3655.z, fma(_2096, _3655.y, _3655.x * _2095)) + _3655.w) / _3717;
                                float _3777 = (fma(_2097, _3670.z, fma(_2096, _3670.y, _3670.x * _2095)) + _3670.w) / _3717;
                                float _3781 = 1.0 - dot(vec2(_3776, _3777), vec2(_3776, _3777));
                                float _4905 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3783 = _3782 * (((isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0))) * _3759) / ((_3772 * 0.699999988079071044921875) + 1.0));
                                float _3795 = exp2(log2(1.0 / ((_3772 * 3.5) + 5.0)) * 0.25);
                                float _3796 = 1.0 - _1035;
                                float _3803 = sqrt(1.0 - ((1.0 - (_3796 * _3796)) * (1.0 - (_3795 * _3795))));
                                float _3804 = _3803 * _3803;
                                float _3805 = _3804 * _3804;
                                float _3806 = _3752 - _3255;
                                float _3807 = _3753 - _3256;
                                float _3808 = _3754 - _3257;
                                float _3812 = inversesqrt(dot(vec3(_3806, _3807, _3808), vec3(_3806, _3807, _3808)));
                                float _3816 = dot(vec3(_960, _963, _966), vec3((-0.0) - _3255, (-0.0) - _3256, (-0.0) - _3257));
                                float _4916 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                                float _3820 = dot(vec3(_960, _963, _966), vec3(_3812 * _3806, _3812 * _3807, _3812 * _3808));
                                float _4927 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3823 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                                float _3827 = ((_3823 * _3823) * (_3805 + (-1.0))) + 1.0;
                                float _3828 = _3765 * _3804;
                                float _3829 = _3828 * _3828;
                                float _3835 = ((1.0 - _3829) * dot(vec3(_960, _963, _966), vec3(_3752, _3753, _3754))) + _3829;
                                float _4938 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3836 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3837 = 1.0 - _3804;
                                float _3847 = (0.5 / (((_3836 * ((_3819 * _3837) + _3804)) + 9.9999999392252902907785028219223e-09) + (((_3836 * _3837) + _3804) * _3819))) * _3836;
                                float _4949 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3857 = (_3782 * _3759) * (((_3805 * 3.1415927410125732421875) * (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0)))) / ((_3827 * _3827) * ((_3772 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3783 * _3628.y;
                                frontier_phi_78_pred_1 = _3783 * _3628.x;
                                frontier_phi_78_pred_2 = _3857 * _3640.z;
                                frontier_phi_78_pred_3 = _3857 * _3640.y;
                                frontier_phi_78_pred_4 = _3857 * _3640.x;
                                frontier_phi_78_pred_5 = _3783 * _3628.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3865 = frontier_phi_78_pred;
                            _3864 = frontier_phi_78_pred_1;
                            _3863 = frontier_phi_78_pred_2;
                            _3862 = frontier_phi_78_pred_3;
                            _3861 = frontier_phi_78_pred_4;
                            _3866 = frontier_phi_78_pred_5;
                            _3570 = _3864 + _3583;
                            _3571 = _3865 + _3584;
                            _3572 = _3866 + _3585;
                            _3567 = _3861 + _3580;
                            _3568 = _3862 + _3581;
                            _3569 = _3863 + _3582;
                            if (_3587 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3587;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3572;
                        frontier_phi_72_pred_1 = _3571;
                        frontier_phi_72_pred_2 = _3570;
                        frontier_phi_72_pred_3 = _3569;
                        frontier_phi_72_pred_4 = _3568;
                        frontier_phi_72_pred_5 = _3567;
                    }
                    _3240 = frontier_phi_72_pred;
                    _3238 = frontier_phi_72_pred_1;
                    _3236 = frontier_phi_72_pred_2;
                    _3234 = frontier_phi_72_pred_3;
                    _3232 = frontier_phi_72_pred_4;
                    _3230 = frontier_phi_72_pred_5;
                    uint _3375 = _3374 + 1u;
                    if (_3375 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3368 = _3230;
                        _3369 = _3232;
                        _3370 = _3234;
                        _3371 = _3236;
                        _3372 = _3238;
                        _3373 = _3240;
                        _3374 = _3375;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3240;
                frontier_phi_60_61_ladder_1 = _3238;
                frontier_phi_60_61_ladder_2 = _3234;
                frontier_phi_60_61_ladder_3 = _3232;
                frontier_phi_60_61_ladder_4 = _3230;
                frontier_phi_60_61_ladder_5 = _3236;
            }
            else
            {
                frontier_phi_60_61_ladder = _3126;
                frontier_phi_60_61_ladder_1 = _3124;
                frontier_phi_60_61_ladder_2 = _3120;
                frontier_phi_60_61_ladder_3 = _3118;
                frontier_phi_60_61_ladder_4 = _3116;
                frontier_phi_60_61_ladder_5 = _3122;
            }
            _3229 = frontier_phi_60_61_ladder_4;
            _3231 = frontier_phi_60_61_ladder_3;
            _3233 = frontier_phi_60_61_ladder_2;
            _3235 = frontier_phi_60_61_ladder_5;
            _3237 = frontier_phi_60_61_ladder_1;
            _3239 = frontier_phi_60_61_ladder;
        }
        float _3244 = isnan(1.0) ? _1019 : (isnan(_1019) ? 1.0 : min(_1019, 1.0));
        _3049 = (_3244 * _3235) + _2561;
        _3051 = (_3244 * _3237) + _2563;
        _3053 = (_3244 * _3239) + _2565;
        _3055 = ((_3229 * _1004) * _3244) + _2899;
        _3057 = ((_3231 * _1006) * _3244) + _2901;
        _3059 = ((_3233 * _1007) * _3244) + _2903;
    }
    else
    {
        _3049 = _2561;
        _3051 = _2563;
        _3053 = _2565;
        _3055 = _2899;
        _3057 = _2901;
        _3059 = _2903;
    }
    float _4965 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _4976 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _4987 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    uint _3079 = _979 + 6u;
    float _3087 = _941 / cbSceneParam._m0[86u].x;
    float _3088 = _942 / cbSceneParam._m0[86u].y;
    vec4 _3102 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3087, _3088, (log2((isnan(cbSceneParam._m0[77u].w) ? _876 : (isnan(_876) ? cbSceneParam._m0[77u].w : min(_876, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3104 = _3102.x;
    float _3105 = _3102.y;
    float _3106 = _3102.z;
    float _3107 = _3102.w;
    float _3179;
    float _3181;
    float _3183;
    float _3185;
    if (_876 > cbSceneParam._m0[78u].w)
    {
        float _3141 = isnan(_876) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _876 : min(cbSceneParam._m0[80u].w, _876));
        float _3142 = _3141 / _876;
        float _3153 = _3142 * _926;
        float _3154 = _927 * _3142;
        float _3155 = (-0.0) - _3154;
        float _3157 = _3142 * _928;
        float _3159 = (cbSceneParam._m0[77u].w * _3155) / _3141;
        float _3160 = _3159 + cbSceneParam._m0[79u].w;
        float _3161 = cbSceneParam._m0[79u].w - _3154;
        float _3167 = sqrt(((_3153 * _3153) + (_3154 * _3154)) + (_3157 * _3157));
        float _3170 = (1.0 - (cbSceneParam._m0[77u].w / _3141)) * _3167;
        float _3175 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3177 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3330;
        if (abs((_3155 - _3159) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3330 = ((((_3160 > 0.0) ? exp2(_3175 * _3160) : (2.0 - exp2(_3177 * _3160))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3170;
        }
        else
        {
            float _3290 = 1.0 / cbSceneParam._m0[80u].x;
            float _3291 = isnan(_3161) ? _3160 : (isnan(_3160) ? _3161 : max(_3160, _3161));
            float _3292 = isnan(_3161) ? _3160 : (isnan(_3160) ? _3161 : min(_3160, _3161));
            float _3301 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : min(_3291, 0.0));
            float _3302 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : min(_3292, 0.0));
            _3330 = ((abs(_3167 / _3155) * cbSceneParam._m0[80u].y) * ((((_3301 - _3302) * 2.0) - ((exp2(_3175 * (isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0)))) - exp2(_3175 * (isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0))))) * _3290)) - ((exp2(_3177 * _3301) - exp2(_3177 * _3302)) * _3290))) + (_3170 * cbSceneParam._m0[80u].z);
        }
        vec4 _3332 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3087, _3088, 1.0), 0.0);
        float _3341 = exp2((_3330 * (-1.44269502162933349609375)) * (1.0 - _3332.w));
        float _3342 = log2(_3341);
        float _3358 = log2(_3107);
        _3179 = (exp2(_3358 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].x)) * _3332.x) / cbSceneParam._m0[78u].x)) + _3104;
        _3181 = (exp2(_3358 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].y)) * _3332.y) / cbSceneParam._m0[78u].y)) + _3105;
        _3183 = (exp2(_3358 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].z)) * _3332.z) / cbSceneParam._m0[78u].z)) + _3106;
        _3185 = _3341 * _3107;
    }
    else
    {
        _3179 = _3104;
        _3181 = _3105;
        _3183 = _3106;
        _3185 = _3107;
    }
    float _3197 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3198 = _3197 == 3.0;
    float _3199 = log2(_3185);
    float _3206 = exp2(_3199 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0))) * (_3049 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1019))) + ((_3055 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1829)) * cbPerFrame._m0[3u].x));
    float _3207 = exp2(_3199 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * (_3051 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1019))) + ((_3057 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1829)) * cbPerFrame._m0[3u].x));
    float _3208 = exp2(_3199 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * (_3053 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1019))) + ((_3059 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1829)) * cbPerFrame._m0[3u].x));
    float _3217 = (_3197 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3217 * (_3198 ? _3206 : (_3206 + (cbSceneParam._m0[72u].w * _3179)));
    SV_Target.y = _3217 * (_3198 ? _3207 : (_3207 + (cbSceneParam._m0[72u].w * _3181)));
    SV_Target.z = _3217 * (_3198 ? _3208 : (_3208 + (cbSceneParam._m0[72u].w * _3183)));
    SV_Target.w = cbInstanceData._m0[_3079].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3079].w;
}


