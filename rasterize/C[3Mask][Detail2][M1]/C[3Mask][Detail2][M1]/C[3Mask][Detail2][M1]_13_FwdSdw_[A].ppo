#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1404;
float _4069;
float _4070;
float _4071;
float _4072;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _272 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _272.x * cbMtdParam._m0[10u].x;
    float _279 = _272.y * cbMtdParam._m0[10u].y;
    float _280 = _272.z * cbMtdParam._m0[10u].z;
    vec4 _298 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _348 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _358 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _348)) + 1.0;
    float _4081 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _366 = (_359 * ((_298.x * cbMtdParam._m0[11u].x) - _278)) + _278;
    float _367 = (_359 * ((_298.y * cbMtdParam._m0[11u].y) - _279)) + _279;
    float _368 = (_359 * ((_298.z * cbMtdParam._m0[11u].z) - _280)) + _280;
    vec4 _386 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _417 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _348)) + 1.0;
    float _4092 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _425 = (_418 * ((_386.x * cbMtdParam._m0[12u].x) - _366)) + _366;
    float _426 = (_418 * ((_386.y * cbMtdParam._m0[12u].y) - _367)) + _367;
    float _427 = (_418 * ((_386.z * cbMtdParam._m0[12u].z) - _368)) + _368;
    vec4 _445 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _470 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _348)) + 1.0;
    float _4103 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _478 = (_471 * ((_445.x * cbMtdParam._m0[13u].x) - _425)) + _425;
    float _479 = (_471 * ((_445.y * cbMtdParam._m0[13u].y) - _426)) + _426;
    float _480 = (_471 * ((_445.z * cbMtdParam._m0[13u].z) - _427)) + _427;
    vec4 _501 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _530 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _4114 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _531 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _538 = (_531 * ((_501.x * cbMtdParam._m0[15u].x) - _478)) + _478;
    float _539 = (_531 * ((_501.y * cbMtdParam._m0[15u].y) - _479)) + _479;
    float _540 = (_531 * ((_501.z * cbMtdParam._m0[15u].z) - _480)) + _480;
    vec4 _553 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _555 = _553.x;
    float _573 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _555) * _359) + _555;
    float _591 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _573) * _418) + _573;
    float _608 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _591) * _471) + _591;
    vec4 _620 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _640 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _642 = _640.x;
    float _643 = _640.y;
    float _649 = cbMtdParam._m0[18u].y * _640.z;
    vec4 _661 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _670 = (((cbMtdParam._m0[18u].x * _661.z) - _649) * _359) + _649;
    vec4 _683 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _694 = (((cbMtdParam._m0[17u].w * _683.z) - _670) * _418) + _670;
    vec4 _707 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _716 = (((cbMtdParam._m0[17u].z * _707.z) - _694) * _471) + _694;
    vec4 _729 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _743 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_729.z * cbMtdParam._m0[19u].y) - _716)) + _716;
    vec4 _756 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _768 = ((_661.x - _642) * _359) + _642;
    float _769 = ((_661.y - _643) * _359) + _643;
    float _774 = ((_683.x - _768) * _418) + _768;
    float _775 = ((_683.y - _769) * _418) + _769;
    float _784 = ((((_707.x - _774) * _471) + _774) * 2.0) + (-1.0);
    float _785 = ((((_707.y - _775) * _471) + _775) * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _4125 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))));
    float _808 = (((((_756.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _784) + ((((_620.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y)) + ((((_729.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _809 = (((((_756.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _785) + ((((_620.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y)) + ((((_729.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _812 = fma(_791, _242 * NORMAL.x, fma(_809, _249 * TANGENT.x, (_235 * _227) * _808));
    float _815 = fma(_791, _242 * NORMAL.y, fma(_809, _249 * TANGENT.y, (_235 * _228) * _808));
    float _818 = fma(_791, _242 * NORMAL.z, fma(_809, _249 * TANGENT.z, (_235 * _229) * _808));
    float _822 = inversesqrt(dot(vec3(_812, _815, _818), vec3(_812, _815, _818)));
    float _823 = _822 * _812;
    float _824 = _822 * _815;
    float _825 = _822 * _818;
    float _4136 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _826 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _4147 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4158 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4169 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4180 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _830 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _846 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _896 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _886);
    float _897 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _886);
    float _898 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _886);
    float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
    float _903 = _896 * _902;
    float _904 = _897 * _902;
    float _905 = _898 * _902;
    vec4 _910 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _912 = _910.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1084 = sqrt(((_896 * _896) + (_897 * _897)) + (_898 * _898));
        float _1090 = (cbMatDynParam._m0[5u].x * _1084) + cbMatDynParam._m0[5u].y;
        float _4191 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1095 = (cbMatDynParam._m0[5u].z * _1084) + cbMatDynParam._m0[5u].w;
        float _4202 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) - _1091)) + _1091) < ((_912 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _923 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _924 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _942 = fma(_825, cbSceneParam._m0[5u].z, fma(_824, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _823));
    float _945 = fma(_825, cbSceneParam._m0[6u].z, fma(_824, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _823));
    float _948 = fma(_825, cbSceneParam._m0[7u].z, fma(_824, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _823));
    uint _961 = uint(roundEven(NORMAL.w)) * 13u;
    uint _962 = _961 + 9u;
    uint _963 = _962 + uint(cbMatDynParam._m0[0u].w);
    float _969 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * cbInstanceData._m0[_963].x;
    float _970 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * cbInstanceData._m0[_963].y;
    float _971 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * cbInstanceData._m0[_963].z;
    float _4213 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _973 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _4235 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _974 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _975 = 1.0 - _830;
    float _976 = _972 * _975;
    float _977 = _973 * _975;
    float _978 = _974 * _975;
    float _983 = (_972 + (-0.039999999105930328369140625)) * _830;
    float _984 = (_973 + (-0.039999999105930328369140625)) * _830;
    float _985 = (_974 + (-0.039999999105930328369140625)) * _830;
    float _986 = _983 + 0.039999999105930328369140625;
    float _988 = _984 + 0.039999999105930328369140625;
    float _989 = _985 + 0.039999999105930328369140625;
    vec4 _998 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _923, cbSceneParam._m0[86u].y * _924));
    float _1001 = _998.x * TEXCOORD_5.w;
    float _1002 = dot(vec3(_823, _824, _825), vec3(_903, _904, _905));
    float _1005 = _1002 * 2.0;
    float _1009 = (_1005 * _823) - _903;
    float _1010 = (_1005 * _824) - _904;
    float _1011 = (_1005 * _825) - _905;
    float _1015 = abs(dot(vec3(_903, _904, _905), vec3(_823, _824, _825)));
    float _4246 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1017 = sqrt(_826);
    float _1030 = exp2((_1017 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1017 * 3.0));
    float _1036 = (1.0 - _1030) * ((_1017 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1037 = _1030 * _1017;
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1403;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1128 = fma(_1073, cbModelParam._m0[26u].z, fma(_1069, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1065));
        float _1132 = fma(_1073, cbModelParam._m0[27u].z, fma(_1069, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1065));
        float _1136 = fma(_1073, cbModelParam._m0[28u].z, fma(_1069, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1065));
        float _1161 = _1065 + _823;
        float _1162 = _1069 + _824;
        float _1163 = _1073 + _825;
        float _1173 = fma(_1163, cbModelParam._m0[26u].z, fma(_1162, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1161)) - _1128;
        float _1174 = fma(_1163, cbModelParam._m0[27u].z, fma(_1162, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1161)) - _1132;
        float _1175 = fma(_1163, cbModelParam._m0[28u].z, fma(_1162, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1161)) - _1136;
        float _1179 = inversesqrt(dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175)));
        float _1192 = ((_1179 * _1173) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1128 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1179 * _1174) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1132 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1179 * _1175) / cbModelParam._m0[34u].z) + ((((((_1136 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        float _1231 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1197.x + (-0.5));
        float _1233 = _1231 * (_1197.y + (-0.5));
        float _1234 = _1231 * (_1197.z + (-0.5));
        float _1241 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1204.x + (-0.5));
        float _1243 = _1241 * (_1204.y + (-0.5));
        float _1244 = _1241 * (_1204.z + (-0.5));
        float _1251 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1211.x + (-0.5));
        float _1253 = _1251 * (_1211.y + (-0.5));
        float _1254 = _1251 * (_1211.z + (-0.5));
        float _1261 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1218.x + (-0.5));
        float _1263 = _1261 * (_1218.y + (-0.5));
        float _1264 = _1261 * (_1218.z + (-0.5));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = _1232 * 0.5;
        float _1269 = _1242 * 0.5;
        float _1270 = _1252 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1285 = (dot(vec3(_823, _824, _825), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1295 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4294 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1297 + 1.0))) + _1302) * _1265;
        float _1312 = _1233 * 0.5;
        float _1313 = _1243 * 0.5;
        float _1314 = _1253 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_823, _824, _825), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4327 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1339 + 1.0))) + _1344) * _1266;
        float _1354 = _1234 * 0.5;
        float _1355 = _1244 * 0.5;
        float _1356 = _1254 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_823, _824, _825), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4360 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1381 + 1.0))) + _1386) * _1267;
        _1403 = _1234;
        _1405 = _1233;
        _1406 = _1232;
        _1407 = _1244;
        _1408 = _1243;
        _1409 = _1242;
        _1410 = _1254;
        _1411 = _1253;
        _1412 = _1252;
        _1413 = _1267;
        _1414 = _1266;
        _1415 = _1265;
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
    }
    else
    {
        _1403 = _1404;
        _1405 = _1404;
        _1406 = _1404;
        _1407 = _1404;
        _1408 = _1404;
        _1409 = _1404;
        _1410 = _1404;
        _1411 = _1404;
        _1412 = _1404;
        _1413 = _1404;
        _1414 = _1404;
        _1415 = _1404;
        _1416 = 0.0;
        _1417 = 0.0;
        _1418 = 0.0;
    }
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1447 = fma(_1073, cbModelParam._m0[30u].z, fma(_1069, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1065));
        float _1451 = fma(_1073, cbModelParam._m0[31u].z, fma(_1069, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1065));
        float _1455 = fma(_1073, cbModelParam._m0[32u].z, fma(_1069, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1065));
        float _1478 = _1065 + _823;
        float _1479 = _1069 + _824;
        float _1480 = _1073 + _825;
        float _1490 = fma(_1480, cbModelParam._m0[30u].z, fma(_1479, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1478)) - _1447;
        float _1491 = fma(_1480, cbModelParam._m0[31u].z, fma(_1479, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1478)) - _1451;
        float _1492 = fma(_1480, cbModelParam._m0[32u].z, fma(_1479, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1478)) - _1455;
        float _1496 = inversesqrt(dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492)));
        float _1509 = ((_1496 * _1490) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1447 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1510 = ((_1496 * _1491) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1451 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1496 * _1492) / cbModelParam._m0[35u].z) + ((((((_1455 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        float _1546 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1513.x + (-0.5));
        float _1548 = _1546 * (_1513.y + (-0.5));
        float _1549 = _1546 * (_1513.z + (-0.5));
        float _1556 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1520.x + (-0.5));
        float _1558 = _1556 * (_1520.y + (-0.5));
        float _1559 = _1556 * (_1520.z + (-0.5));
        float _1566 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1527.x + (-0.5));
        float _1568 = _1566 * (_1527.y + (-0.5));
        float _1569 = _1566 * (_1527.z + (-0.5));
        float _1576 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1534.x + (-0.5));
        float _1578 = _1576 * (_1534.y + (-0.5));
        float _1579 = _1576 * (_1534.z + (-0.5));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = _1547 * 0.5;
        float _1584 = _1557 * 0.5;
        float _1585 = _1567 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_823, _824, _825), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4401 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4412 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4423 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_1610 + 1.0))) + _1615) * _1580;
        float _1625 = _1548 * 0.5;
        float _1626 = _1558 * 0.5;
        float _1627 = _1568 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_823, _824, _825), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4456 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1652 + 1.0))) + _1657) * _1581;
        float _1667 = _1549 * 0.5;
        float _1668 = _1559 * 0.5;
        float _1669 = _1569 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_823, _824, _825), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4467 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4478 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4489 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_1694 + 1.0))) + _1699) * _1582;
        _1716 = _1549;
        _1717 = _1548;
        _1718 = _1547;
        _1719 = _1559;
        _1720 = _1558;
        _1721 = _1557;
        _1722 = _1569;
        _1723 = _1568;
        _1724 = _1567;
        _1725 = _1582;
        _1726 = _1581;
        _1727 = _1580;
        _1728 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1729 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
    }
    else
    {
        _1716 = _1404;
        _1717 = _1404;
        _1718 = _1404;
        _1719 = _1404;
        _1720 = _1404;
        _1721 = _1404;
        _1722 = _1404;
        _1723 = _1404;
        _1724 = _1404;
        _1725 = _1404;
        _1726 = _1404;
        _1727 = _1404;
        _1728 = 0.0;
        _1729 = 0.0;
        _1730 = 0.0;
    }
    float _1740 = (cbModelParam._m0[1u].x * (_1728 - _1416)) + _1416;
    float _1741 = (cbModelParam._m0[1u].x * (_1729 - _1417)) + _1417;
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1418)) + _1418;
    float _1763 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1741, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1741, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1741, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1740));
    float _1784 = _1009 * 0.5;
    float _1785 = _1010 * 0.5;
    float _1786 = _1011 * 0.5;
    float _1787 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1790 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1717, _1720, _1723, _1726));
    float _1793 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1716, _1719, _1722, _1725));
    float _1827;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1800 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1403, _1407, _1410, _1413));
        float _1804 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1405, _1408, _1411, _1414));
        float _1808 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1406, _1409, _1412, _1415));
        float _1815 = dot(vec4(cbModelParam._m0[39u]), vec4(_1784, _1785, _1786, 1.0));
        _1827 = dot(vec3(isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1815) ? 0.0 : (isnan(0.0) ? _1815 : max(0.0, _1815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1827 = 1.0;
    }
    float _1838;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1829 = dot(vec4(cbModelParam._m0[40u]), vec4(_1784, _1785, _1786, 1.0));
        _1838 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1838 = 1.0;
    }
    float _1842 = (_1838 * cbModelParam._m0[1u].x) + (_1827 * (1.0 - cbModelParam._m0[1u].x));
    float _1852 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _826);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1852 : min(cbModelParam._m0[25u].z, _1852));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1900 = fma(_1073, cbModelParam._m0[13u].z, fma(_1069, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1065)) + cbModelParam._m0[13u].w;
        float _1904 = fma(_1073, cbModelParam._m0[14u].z, fma(_1069, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1065)) + cbModelParam._m0[14u].w;
        float _1908 = fma(_1073, cbModelParam._m0[15u].z, fma(_1069, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1065)) + cbModelParam._m0[15u].w;
        float _1911 = fma(_1011, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009));
        float _1914 = fma(_1011, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009));
        float _1917 = fma(_1011, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009));
        float _1945;
        if (_1911 > 0.0)
        {
            _1945 = abs((1.0 - _1900) / _1911);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1900 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1945 = frontier_phi_17_15_ladder;
        }
        float _2116;
        if (_1914 > 0.0)
        {
            _2116 = abs((1.0 - _1904) / _1914);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1904 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2116 = frontier_phi_26_22_ladder;
        }
        float _2412;
        if (_1917 > 0.0)
        {
            _2412 = abs((1.0 - _1908) / _1917);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1908 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2412 = frontier_phi_38_33_ladder;
        }
        float _2414 = isnan(_2116) ? _1945 : (isnan(_1945) ? _2116 : min(_1945, _2116));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1911) + _1900;
        float _2420 = (_2415 * _1914) + _1904;
        float _2421 = (_2415 * _1917) + _1908;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2422;
        float _2426 = _2422 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 > _2426) || ((_2420 < _2424) || ((_2419 < _2424) || (_2419 > _2426))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2566 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2421, cbModelParam._m0[9u].z, fma(_2420, cbModelParam._m0[9u].y, _2419 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2421, cbModelParam._m0[10u].z, fma(_2420, cbModelParam._m0[10u].y, _2419 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2421, cbModelParam._m0[11u].z, fma(_2420, cbModelParam._m0[11u].y, _2419 * cbModelParam._m0[11u].x))), _1853);
            frontier_phi_16_38_ladder = _2566.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2566.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2566.x * cbModelParam._m0[1u].y;
        }
        _1933 = frontier_phi_16_38_ladder_2;
        _1935 = frontier_phi_16_38_ladder_1;
        _1937 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1921 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1009, _1010, _1011), _1853);
        _1933 = _1921.x * cbModelParam._m0[1u].y;
        _1935 = _1921.y * cbModelParam._m0[1u].y;
        _1937 = _1921.z * cbModelParam._m0[1u].y;
    }
    float _1941 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _826);
    float _1942 = isnan(_1941) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1941 : min(cbModelParam._m0[25u].w, _1941));
    float _2031;
    float _2033;
    float _2035;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1995 = fma(_1073, cbModelParam._m0[21u].z, fma(_1069, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1065)) + cbModelParam._m0[21u].w;
        float _1999 = fma(_1073, cbModelParam._m0[22u].z, fma(_1069, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1065)) + cbModelParam._m0[22u].w;
        float _2003 = fma(_1073, cbModelParam._m0[23u].z, fma(_1069, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1065)) + cbModelParam._m0[23u].w;
        float _2006 = fma(_1011, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009));
        float _2009 = fma(_1011, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009));
        float _2012 = fma(_1011, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009));
        float _2121;
        if (_2006 > 0.0)
        {
            _2121 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2121 = frontier_phi_28_24_ladder;
        }
        float _2439;
        if (_2009 > 0.0)
        {
            _2439 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2439 = frontier_phi_40_35_ladder;
        }
        float _2777;
        if (_2012 > 0.0)
        {
            _2777 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2777 = frontier_phi_50_47_ladder;
        }
        float _2779 = isnan(_2439) ? _2121 : (isnan(_2121) ? _2439 : min(_2121, _2439));
        float _2780 = isnan(_2777) ? _2779 : (isnan(_2779) ? _2777 : min(_2779, _2777));
        float _2784 = (_2780 * _2006) + _1995;
        float _2785 = (_2780 * _2009) + _1999;
        float _2786 = (_2780 * _2012) + _2003;
        float _2787 = _2780 * 9.9999997473787516355514526367188e-05;
        float _2788 = (-1.0) - _2787;
        float _2790 = _2787 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2786 > _2790) || ((_2786 < _2788) || ((_2785 > _2790) || ((_2785 < _2788) || ((_2784 < _2788) || (_2784 > _2790))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2908 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2786, cbModelParam._m0[17u].z, fma(_2785, cbModelParam._m0[17u].y, _2784 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2786, cbModelParam._m0[18u].z, fma(_2785, cbModelParam._m0[18u].y, _2784 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2786, cbModelParam._m0[19u].z, fma(_2785, cbModelParam._m0[19u].y, _2784 * cbModelParam._m0[19u].x))), _1942);
            frontier_phi_25_50_ladder = _2908.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2908.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2908.x * cbModelParam._m0[1u].z;
        }
        _2031 = frontier_phi_25_50_ladder_2;
        _2033 = frontier_phi_25_50_ladder_1;
        _2035 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1009, _1010, _1011), _1942);
        _2031 = _2015.x * cbModelParam._m0[1u].z;
        _2033 = _2015.y * cbModelParam._m0[1u].z;
        _2035 = _2015.z * cbModelParam._m0[1u].z;
    }
    float _2048 = (((_1036 * _986) + _1037) * _1001) * ((cbModelParam._m0[1u].w * (_2031 - _1933)) + _1933);
    float _2050 = (((_1036 * _988) + _1037) * _1001) * ((cbModelParam._m0[1u].w * (_2033 - _1935)) + _1935);
    float _2052 = (((_1036 * _989) + _1037) * _1001) * ((cbModelParam._m0[1u].w * (_2035 - _1937)) + _1937);
    float _2055 = fma(_2052, cbSceneParam._m0[89u].z, fma(_2050, cbSceneParam._m0[89u].y, _2048 * cbSceneParam._m0[89u].x));
    float _2058 = fma(_2052, cbSceneParam._m0[90u].z, fma(_2050, cbSceneParam._m0[90u].y, _2048 * cbSceneParam._m0[90u].x));
    float _2061 = fma(_2052, cbSceneParam._m0[91u].z, fma(_2050, cbSceneParam._m0[91u].y, _2048 * cbSceneParam._m0[91u].x));
    float _2095 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2103 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2107 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2108 = _2095 / _2107;
    float _2109 = _2099 / _2107;
    float _2110 = _2103 / _2107;
    float _2257;
    float _2258;
    float _2259;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2137 = ((uint(_2110 > cbSceneParam._m0[59u].y) + uint(_2110 > cbSceneParam._m0[59u].x)) + uint(_2110 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2138 = _2137 + 43u;
        uint _2146 = _2137 + 44u;
        uint _2154 = _2137 + 45u;
        uint _2162 = _2137 + 46u;
        float _2173 = fma(_2107, cbSceneParam._m0[_2138].w, fma(_2103, cbSceneParam._m0[_2138].z, fma(_2099, cbSceneParam._m0[_2138].y, _2095 * cbSceneParam._m0[_2138].x)));
        float _2177 = fma(_2107, cbSceneParam._m0[_2146].w, fma(_2103, cbSceneParam._m0[_2146].z, fma(_2099, cbSceneParam._m0[_2146].y, _2095 * cbSceneParam._m0[_2146].x)));
        float _2185 = fma(_2107, cbSceneParam._m0[_2162].w, fma(_2103, cbSceneParam._m0[_2162].z, fma(_2099, cbSceneParam._m0[_2162].y, _2095 * cbSceneParam._m0[_2162].x)));
        float _2190 = cbSceneParam._m0[33u].z * _2185;
        float _2192 = cbSceneParam._m0[33u].w * _2185;
        float _2195 = fma(_2107, cbSceneParam._m0[_2154].w, fma(_2103, cbSceneParam._m0[_2154].z, fma(_2099, cbSceneParam._m0[_2154].y, _2095 * cbSceneParam._m0[_2154].x))) / _2185;
        float _2243 = (cbSceneParam._m0[33u].x - sqrt(((_2109 * _2109) + (_2108 * _2108)) + (_2110 * _2110))) * cbSceneParam._m0[33u].y;
        float _4615 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2250 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2190 + _2173) / _2185, (_2192 + _2177) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2192 + _2173) / _2185, (_2177 - _2190) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 - _2190) / _2185, (_2177 - _2192) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 - _2192) / _2185, (_2190 + _2177) / _2185), _2195), 0.0)).x), vec4(0.25)));
        _2257 = 1.0 - (_2250 * cbSceneParam._m0[34u].x);
        _2258 = 1.0 - (_2250 * cbSceneParam._m0[34u].y);
        _2259 = 1.0 - (_2250 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2257 = 1.0;
        _2258 = 1.0;
        _2259 = 1.0;
    }
    float _2323;
    float _2325;
    float _2327;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2311 = fma(_2107, cbSceneParam._m0[63u].w, fma(_2103, cbSceneParam._m0[63u].z, fma(_2099, cbSceneParam._m0[63u].y, _2095 * cbSceneParam._m0[63u].x)));
        float _2312 = fma(_2107, cbSceneParam._m0[60u].w, fma(_2103, cbSceneParam._m0[60u].z, fma(_2099, cbSceneParam._m0[60u].y, _2095 * cbSceneParam._m0[60u].x))) / _2311;
        float _2313 = fma(_2107, cbSceneParam._m0[61u].w, fma(_2103, cbSceneParam._m0[61u].z, fma(_2099, cbSceneParam._m0[61u].y, _2095 * cbSceneParam._m0[61u].x))) / _2311;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2312 >= cbSceneParam._m0[64u].x) && (_2313 >= cbSceneParam._m0[64u].y)) && (_2312 <= cbSceneParam._m0[64u].z)) && (_2313 <= cbSceneParam._m0[64u].w))
        {
            float _2452 = fma(_2107, cbSceneParam._m0[62u].w, fma(_2103, cbSceneParam._m0[62u].z, fma(_2099, cbSceneParam._m0[62u].y, _2095 * cbSceneParam._m0[62u].x))) / _2311;
            float _2456 = isnan(cbSceneParam._m0[41u].w) ? _2452 : (isnan(_2452) ? cbSceneParam._m0[41u].w : max(_2452, cbSceneParam._m0[41u].w));
            float _2499 = (cbSceneParam._m0[33u].x - sqrt(((_2109 * _2109) + (_2108 * _2108)) + (_2110 * _2110))) * cbSceneParam._m0[33u].y;
            float _4631 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
            float _2506 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2312, cbSceneParam._m0[33u].w + _2313), _2456), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2312, _2313 - cbSceneParam._m0[33u].z), _2456), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2312 - cbSceneParam._m0[33u].z, _2313 - cbSceneParam._m0[33u].w), _2456), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2312 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2313), _2456), 0.0)).x), vec4(0.25)));
            float _2510 = 1.0 - (_2506 * cbSceneParam._m0[34u].x);
            float _2511 = 1.0 - (_2506 * cbSceneParam._m0[34u].y);
            float _2512 = 1.0 - (_2506 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2512) ? _2259 : (isnan(_2259) ? _2512 : min(_2259, _2512));
            frontier_phi_37_36_ladder_1 = isnan(_2511) ? _2258 : (isnan(_2258) ? _2511 : min(_2258, _2511));
            frontier_phi_37_36_ladder_2 = isnan(_2510) ? _2257 : (isnan(_2257) ? _2510 : min(_2257, _2510));
        }
        else
        {
            frontier_phi_37_36_ladder = _2259;
            frontier_phi_37_36_ladder_1 = _2258;
            frontier_phi_37_36_ladder_2 = _2257;
        }
        _2323 = frontier_phi_37_36_ladder_2;
        _2325 = frontier_phi_37_36_ladder_1;
        _2327 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2323 = _2257;
        _2325 = _2258;
        _2327 = _2259;
    }
    uvec4 _2332 = floatBitsToUint(cbInstanceData._m0[_961 + 5u]);
    uint _2334 = _2332.x * 14u;
    uint _2335 = _2334 + 13u;
    float _2342 = _1001 + (-1.0);
    float _2347 = (cbLight._m0[_2335].x * _2342) + 1.0;
    float _2348 = (cbLight._m0[_2335].y * _2342) + 1.0;
    float _2349 = (cbLight._m0[_2335].z * _2342) + 1.0;
    float _2350 = (cbLight._m0[_2335].w * _2342) + 1.0;
    uint _2351 = _2334 + 5u;
    float _2357 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
    uint _2361 = _2334 + 4u;
    float _2371 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
    uint _2375 = _2334 | 1u;
    float _2386 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_823, _824, _825));
    float _2389 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_823, _824, _825));
    float _4667 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _4678 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2394 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * 0.3183098733425140380859375;
    float _2396 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * 0.3183098733425140380859375;
    float _2403 = ((cbLight._m0[_2351].x * _2357) * _2396) + (((cbLight._m0[_2361].x * _2323) * _2371) * _2394);
    float _2404 = ((_2357 * cbLight._m0[_2351].y) * _2396) + (((cbLight._m0[_2361].y * _2325) * _2371) * _2394);
    float _2405 = ((_2357 * cbLight._m0[_2351].z) * _2396) + (((cbLight._m0[_2361].z * _2327) * _2371) * _2394);
    uvec4 _2409 = floatBitsToUint(cbLight._m0[_2334 + 12u]);
    bool _2411 = _2409.x == 0u;
    float _2513;
    float _2515;
    float _2517;
    if (_2411)
    {
        _2513 = _2403;
        _2515 = _2404;
        _2517 = _2405;
    }
    else
    {
        uint _2521 = _2334 + 6u;
        float _2537 = (dot(vec3(cbLight._m0[_2334 + 2u].xyz), vec3(_823, _824, _825)) * 0.5) + 0.5;
        float _2538 = _2537 * _2537;
        float _4689 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2539 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2540 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
        _2513 = (((cbLight._m0[_2521].x * 0.3183098733425140380859375) * _2539) * _2540) + _2403;
        _2515 = (((cbLight._m0[_2521].y * 0.3183098733425140380859375) * _2539) * _2540) + _2404;
        _2517 = (((cbLight._m0[_2521].z * 0.3183098733425140380859375) * _2539) * _2540) + _2405;
    }
    bool _2520 = _2409.y == 0u;
    float _2575;
    float _2577;
    float _2579;
    if (_2520)
    {
        _2575 = _2513;
        _2577 = _2515;
        _2579 = _2517;
    }
    else
    {
        uint _2748 = _2334 + 7u;
        float _2764 = (dot(vec3(cbLight._m0[_2334 + 3u].xyz), vec3(_823, _824, _825)) * 0.5) + 0.5;
        float _2765 = _2764 * _2764;
        float _4705 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2766 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2767 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2575 = (((cbLight._m0[_2748].x * 0.3183098733425140380859375) * _2766) * _2767) + _2513;
        _2577 = (((cbLight._m0[_2748].y * 0.3183098733425140380859375) * _2766) * _2767) + _2515;
        _2579 = (((cbLight._m0[_2748].z * 0.3183098733425140380859375) * _2766) * _2767) + _2517;
    }
    uint _2582 = _2334 + 8u;
    float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _826) * 0.949999988079071044921875);
    float _2596 = _2595 * _2595;
    float _2597 = cbLight._m0[_2334].x + _903;
    float _2598 = cbLight._m0[_2334].y + _904;
    float _2599 = cbLight._m0[_2334].z + _905;
    float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
    float _2604 = _2603 * _2597;
    float _2605 = _2603 * _2598;
    float _2606 = _2603 * _2599;
    float _2607 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2334].xyz));
    float _4721 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _4732 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _2611 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2612 = dot(vec3(_823, _824, _825), vec3(_2604, _2605, _2606));
    float _4743 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2615 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
    float _2616 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2604, _2605, _2606));
    float _4754 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2620 = _2596 * _2596;
    float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
    float _2632 = exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0);
    float _2633 = 0.959999978542327880859375 - _983;
    float _2635 = 0.959999978542327880859375 - _984;
    float _2636 = 0.959999978542327880859375 - _985;
    float _2643 = 1.0 - _2596;
    float _2654 = (0.5 / (((_2611 * ((_2610 * _2643) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2643) + _2596) * _2610))) * _2610;
    float _4765 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2656 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
    uint _2670 = _2334 + 9u;
    float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _826) * 0.949999988079071044921875);
    float _2682 = _2681 * _2681;
    float _2683 = cbLight._m0[_2375].x + _903;
    float _2684 = cbLight._m0[_2375].y + _904;
    float _2685 = cbLight._m0[_2375].z + _905;
    float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
    float _2690 = _2689 * _2683;
    float _2691 = _2689 * _2684;
    float _2692 = _2689 * _2685;
    float _2693 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2375].xyz));
    float _4776 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2696 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2697 = dot(vec3(_823, _824, _825), vec3(_2690, _2691, _2692));
    float _4787 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2700 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
    float _2701 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2690, _2691, _2692));
    float _4798 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2705 = _2682 * _2682;
    float _2709 = ((_2700 * _2700) * (_2705 + (-1.0))) + 1.0;
    float _2716 = exp2(log2(1.0 - (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) * 5.0);
    float _2723 = 1.0 - _2682;
    float _2733 = (0.5 / (((_2611 * ((_2696 * _2723) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2723) + _2682) * _2696))) * _2696;
    float _4809 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2735 = (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2705 / ((_2709 * _2709) * 3.141590118408203125));
    float _2745 = (((((_2716 * _2633) + _986) * cbLight._m0[_2670].x) * _2735) * _2357) + ((((cbLight._m0[_2582].x * _2323) * ((_2632 * _2633) + _986)) * _2656) * _2371);
    float _2746 = (((((_2716 * _2635) + _988) * cbLight._m0[_2670].y) * _2735) * _2357) + ((((cbLight._m0[_2582].y * _2325) * ((_2632 * _2635) + _988)) * _2656) * _2371);
    float _2747 = (((((_2716 * _2636) + _989) * cbLight._m0[_2670].z) * _2735) * _2357) + ((((cbLight._m0[_2582].z * _2327) * ((_2632 * _2636) + _989)) * _2656) * _2371);
    float _2803;
    float _2805;
    float _2807;
    if (_2411)
    {
        _2803 = _2745;
        _2805 = _2746;
        _2807 = _2747;
    }
    else
    {
        uint _2809 = _2334 + 2u;
        uint _2813 = _2334 + 10u;
        float _2827 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2809].w)) * _826) * 0.949999988079071044921875);
        float _2828 = _2827 * _2827;
        float _2829 = cbLight._m0[_2809].x + _903;
        float _2830 = cbLight._m0[_2809].y + _904;
        float _2831 = cbLight._m0[_2809].z + _905;
        float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
        float _2836 = _2835 * _2829;
        float _2837 = _2835 * _2830;
        float _2838 = _2835 * _2831;
        float _2839 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2809].xyz));
        float _4820 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2842 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2843 = dot(vec3(_823, _824, _825), vec3(_2836, _2837, _2838));
        float _4831 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2846 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2847 = dot(vec3(cbLight._m0[_2809].xyz), vec3(_2836, _2837, _2838));
        float _4842 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2851 = _2828 * _2828;
        float _2855 = ((_2846 * _2846) * (_2851 + (-1.0))) + 1.0;
        float _2862 = exp2(log2(1.0 - (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) * 5.0);
        float _2869 = 1.0 - _2828;
        float _2879 = (0.5 / (((_2611 * ((_2842 * _2869) + _2828)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2869) + _2828) * _2842))) * _2842;
        float _4853 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        float _2881 = (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2851 / ((_2855 * _2855) * 3.141590118408203125));
        float _2882 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
        _2803 = (((((_2862 * _2633) + _986) * cbLight._m0[_2813].x) * _2881) * _2882) + _2745;
        _2805 = (((((_2862 * _2635) + _988) * cbLight._m0[_2813].y) * _2881) * _2882) + _2746;
        _2807 = (((((_2862 * _2636) + _989) * cbLight._m0[_2813].z) * _2881) * _2882) + _2747;
    }
    float _2913;
    float _2915;
    float _2917;
    if (_2520)
    {
        _2913 = _2803;
        _2915 = _2805;
        _2917 = _2807;
    }
    else
    {
        uint _2924 = _2334 + 3u;
        uint _2928 = _2334 + 11u;
        float _2942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2924].w)) * _826) * 0.949999988079071044921875);
        float _2943 = _2942 * _2942;
        float _2944 = cbLight._m0[_2924].x + _903;
        float _2945 = cbLight._m0[_2924].y + _904;
        float _2946 = cbLight._m0[_2924].z + _905;
        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
        float _2951 = _2950 * _2944;
        float _2952 = _2950 * _2945;
        float _2953 = _2950 * _2946;
        float _2954 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2924].xyz));
        float _4869 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2957 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
        float _2958 = dot(vec3(_823, _824, _825), vec3(_2951, _2952, _2953));
        float _4880 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2961 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
        float _2962 = dot(vec3(cbLight._m0[_2924].xyz), vec3(_2951, _2952, _2953));
        float _4891 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2966 = _2943 * _2943;
        float _2970 = ((_2961 * _2961) * (_2966 + (-1.0))) + 1.0;
        float _2977 = exp2(log2(1.0 - (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) * 5.0);
        float _2984 = 1.0 - _2943;
        float _2994 = (0.5 / (((_2611 * ((_2957 * _2984) + _2943)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2984) + _2943) * _2957))) * _2957;
        float _4902 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
        float _2996 = (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2966 / ((_2970 * _2970) * 3.141590118408203125));
        float _2997 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2913 = (((((_2977 * _2633) + _986) * cbLight._m0[_2928].x) * _2996) * _2997) + _2803;
        _2915 = (((((_2977 * _2635) + _988) * cbLight._m0[_2928].y) * _2996) * _2997) + _2805;
        _2917 = (((((_2977 * _2636) + _989) * cbLight._m0[_2928].z) * _2996) * _2997) + _2807;
    }
    float _3063;
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    if (_2332.y == 0u)
    {
        uvec4 _3018 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3019 = _3018.x;
        uint _3030 = uint((float(_3018.y) * floor(float(uint(cbSceneParam._m0[85u].y * _924) / _3019))) + floor(float(uint(cbSceneParam._m0[85u].x * _923) / _3019)));
        float _3040 = (log2(_2110 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3041 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        uint _3044 = uint(isnan(14.0) ? _3041 : (isnan(_3041) ? 14.0 : min(_3041, 14.0)));
        uvec4 _3049 = texelFetch(g_lightClusterGridBuffer, int(((_3044 << 2u) + (_3030 << 6u)) >> 2u));
        uint _3050 = _3049.x;
        uint _3051 = _3018.z;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        if (((((1u << ((_3051 >> 4u) & 15u)) + 4294967295u) & _3050) == 0u) || ((_3051 & 240u) == 0u))
        {
            _3130 = 0.0;
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
        }
        else
        {
            float _3131;
            float _3133;
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3283 = 0.0;
            float _3284 = 0.0;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            uint _3289 = 0u;
            uint _3298;
            bool _3299;
            for (;;)
            {
                _3298 = texelFetch(g_lightClassification, int((((_3044 << 5u) + (_3030 << 9u)) + (_3289 << 2u)) >> 2u)).x;
                _3299 = _3298 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3299)
                {
                    frontier_phi_71_pred = _3288;
                    frontier_phi_71_pred_1 = _3287;
                    frontier_phi_71_pred_2 = _3286;
                    frontier_phi_71_pred_3 = _3285;
                    frontier_phi_71_pred_4 = _3284;
                    frontier_phi_71_pred_5 = _3283;
                }
                else
                {
                    float _3428;
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    uint _3434;
                    _3428 = _3283;
                    _3429 = _3284;
                    _3430 = _3285;
                    _3431 = _3286;
                    _3432 = _3287;
                    _3433 = _3288;
                    _3434 = _3298;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    for (;;)
                    {
                        uint _3438 = uint(findLSB(_3434)) + (_3289 << 5u);
                        uint _3435 = (_3434 + 4294967295u) & _3434;
                        uint _3440 = _3438 * 48u;
                        vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3440)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 3u)).x));
                        uint _3460 = (_3438 * 48u) + 4u;
                        vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3460)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 3u)).x));
                        uint _3479 = (_3438 * 48u) + 8u;
                        vec3 _3490 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3479)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 2u)).x));
                        float _3494 = _3454.x - _2108;
                        float _3495 = _3454.y - _2109;
                        float _3496 = _3454.z - _2110;
                        float _3497 = dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496));
                        float _3500 = inversesqrt(_3497);
                        float _3501 = _3500 * _3494;
                        float _3502 = _3500 * _3495;
                        float _3503 = _3500 * _3496;
                        float _3504 = dot(vec3(_942, _945, _948), vec3(_3501, _3502, _3503));
                        float _3509 = 1.0 - (_3497 * _3454.w);
                        float _4928 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3510 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                        float _3511 = sqrt(_3497) * _3473.w;
                        float _3514 = 1.39999997615814208984375 / (_3511 + 1.39999997615814208984375);
                        float _3515 = _3514 * _3514;
                        float _3518 = ((1.0 - _3515) * _3504) + _3515;
                        float _3521 = _3511 * _3511;
                        float _3525 = ((isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0))) * _3510) / ((_3521 * 0.699999988079071044921875) + 1.0);
                        float _3529 = (-0.0) - _2108;
                        float _3530 = (-0.0) - _2109;
                        float _3531 = (-0.0) - _2110;
                        float _3535 = inversesqrt(dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531)));
                        float _3536 = _3535 * _3529;
                        float _3537 = _3535 * _3530;
                        float _3538 = _3535 * _3531;
                        float _3545 = exp2(log2(1.0 / ((_3521 * 3.5) + 5.0)) * 0.25);
                        float _3546 = 1.0 - _1017;
                        float _3553 = sqrt(1.0 - ((1.0 - (_3546 * _3546)) * (1.0 - (_3545 * _3545))));
                        float _3554 = _3553 * _3553;
                        float _3555 = _3554 * _3554;
                        float _3556 = _3536 + _3501;
                        float _3557 = _3537 + _3502;
                        float _3558 = _3538 + _3503;
                        float _3562 = inversesqrt(dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558)));
                        float _3566 = dot(vec3(_942, _945, _948), vec3(_3536, _3537, _3538));
                        float _4944 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3569 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3570 = dot(vec3(_942, _945, _948), vec3(_3562 * _3556, _3562 * _3557, _3562 * _3558));
                        float _4955 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3573 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3577 = ((_3573 * _3573) * (_3555 + (-1.0))) + 1.0;
                        float _3578 = _3514 * _3554;
                        float _3579 = _3578 * _3578;
                        float _3582 = ((1.0 - _3579) * _3504) + _3579;
                        float _4966 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3583 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                        float _3584 = 1.0 - _3554;
                        float _3594 = (0.5 / (((_3583 * ((_3569 * _3584) + _3554)) + 9.9999999392252902907785028219223e-09) + (((_3583 * _3584) + _3554) * _3569))) * _3583;
                        float _4977 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3605 = (((_3555 * 3.1415927410125732421875) * (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0)))) / ((_3577 * _3577) * ((_3521 * 2.1991131305694580078125) + 3.141590118408203125))) * _3510;
                        _3358 = (_3525 * _3473.x) + _3431;
                        _3359 = (_3525 * _3473.y) + _3432;
                        _3360 = (_3525 * _3473.z) + _3433;
                        _3355 = (_3605 * _3490.x) + _3428;
                        _3356 = (_3605 * _3490.y) + _3429;
                        _3357 = (_3605 * _3490.z) + _3430;
                        if (_3435 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3428 = _3355;
                            _3429 = _3356;
                            _3430 = _3357;
                            _3431 = _3358;
                            _3432 = _3359;
                            _3433 = _3360;
                            _3434 = _3435;
                        }
                    }
                    frontier_phi_71_pred = _3360;
                    frontier_phi_71_pred_1 = _3359;
                    frontier_phi_71_pred_2 = _3358;
                    frontier_phi_71_pred_3 = _3357;
                    frontier_phi_71_pred_4 = _3356;
                    frontier_phi_71_pred_5 = _3355;
                }
                _3141 = frontier_phi_71_pred;
                _3139 = frontier_phi_71_pred_1;
                _3137 = frontier_phi_71_pred_2;
                _3135 = frontier_phi_71_pred_3;
                _3133 = frontier_phi_71_pred_4;
                _3131 = frontier_phi_71_pred_5;
                uint _3290 = _3289 + 1u;
                if (_3290 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3283 = _3131;
                    _3284 = _3133;
                    _3285 = _3135;
                    _3286 = _3137;
                    _3287 = _3139;
                    _3288 = _3141;
                    _3289 = _3290;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3130 = _3131;
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
        }
        uvec4 _3144 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3145 = _3144.z;
        uint _3147 = (_3145 >> 8u) & 15u;
        float _3251;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        if (((4294967295u << _3147) & _3050) == 0u)
        {
            _3251 = _3130;
            _3253 = _3132;
            _3255 = _3134;
            _3257 = _3136;
            _3259 = _3138;
            _3261 = _3140;
        }
        else
        {
            float _3276 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
            float _3277 = _3276 * _2108;
            float _3278 = _3276 * _2109;
            float _3279 = _3276 * _2110;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3147 < ((_3145 >> 12u) & 15u))
            {
                float _3252;
                float _3254;
                float _3256;
                float _3258;
                float _3260;
                float _3262;
                float _3411 = _3130;
                float _3412 = _3132;
                float _3413 = _3134;
                float _3414 = _3136;
                float _3415 = _3138;
                float _3416 = _3140;
                uint _3417 = _3147;
                uint _3426;
                bool _3427;
                for (;;)
                {
                    _3426 = texelFetch(g_lightClassification, int((((_3044 << 5u) + (_3030 << 9u)) + (_3417 << 2u)) >> 2u)).x;
                    _3427 = _3426 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3427)
                    {
                        frontier_phi_82_pred = _3416;
                        frontier_phi_82_pred_1 = _3415;
                        frontier_phi_82_pred_2 = _3414;
                        frontier_phi_82_pred_3 = _3413;
                        frontier_phi_82_pred_4 = _3412;
                        frontier_phi_82_pred_5 = _3411;
                    }
                    else
                    {
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3913;
                        float _3914;
                        float _3915;
                        float _3916;
                        float _3917;
                        float _3918;
                        float _3632 = _3411;
                        float _3633 = _3412;
                        float _3634 = _3413;
                        float _3635 = _3414;
                        float _3636 = _3415;
                        float _3637 = _3416;
                        uint _3638 = _3426;
                        uint _3639;
                        vec4 _3664;
                        float _3665;
                        vec4 _3680;
                        vec3 _3692;
                        vec4 _3707;
                        vec4 _3722;
                        float _3769;
                        bool _3770;
                        for (;;)
                        {
                            uint _3649 = ((_3417 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3638));
                            _3639 = (_3638 + 4294967295u) & _3638;
                            uint _3651 = _3649 * 40u;
                            _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            _3665 = _3664.w;
                            uint _3667 = (_3649 * 40u) + 4u;
                            _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            uint _3682 = (_3649 * 40u) + 8u;
                            _3692 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x));
                            uint _3694 = (_3649 * 40u) + 16u;
                            _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            uint _3709 = (_3649 * 40u) + 20u;
                            _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            uint _3725 = (_3649 * 40u) + 24u;
                            vec4 _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            uint _3744 = (_3649 * 40u) + 28u;
                            vec4 _3757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 3u)).x));
                            _3769 = fma(_2110, _3757.z, fma(_2109, _3757.y, _3757.x * _2108)) + _3757.w;
                            _3770 = !((fma(_2110, _3738.z, fma(_2109, _3738.y, _3738.x * _2108)) + _3738.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3770)
                            {
                                float _3797 = _3664.x - _2108;
                                float _3798 = _3664.y - _2109;
                                float _3799 = _3664.z - _2110;
                                float _3800 = dot(vec3(_3797, _3798, _3799), vec3(_3797, _3798, _3799));
                                float _3803 = inversesqrt(_3800);
                                float _3804 = _3803 * _3797;
                                float _3805 = _3803 * _3798;
                                float _3806 = _3803 * _3799;
                                float _3810 = 1.0 - (_3800 / (_3665 * _3665));
                                float _4988 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3811 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                                float _3815 = sqrt(_3800) * _3680.w;
                                float _3817 = 1.39999997615814208984375 / (_3815 + 1.39999997615814208984375);
                                float _3818 = _3817 * _3817;
                                float _3821 = ((1.0 - _3818) * dot(vec3(_3804, _3805, _3806), vec3(_942, _945, _948))) + _3818;
                                float _3824 = _3815 * _3815;
                                float _3828 = (fma(_2110, _3707.z, fma(_2109, _3707.y, _3707.x * _2108)) + _3707.w) / _3769;
                                float _3829 = (fma(_2110, _3722.z, fma(_2109, _3722.y, _3722.x * _2108)) + _3722.w) / _3769;
                                float _3833 = 1.0 - dot(vec2(_3828, _3829), vec2(_3828, _3829));
                                float _5004 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3834 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3835 = _3834 * (((isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0))) * _3811) / ((_3824 * 0.699999988079071044921875) + 1.0));
                                float _3847 = exp2(log2(1.0 / ((_3824 * 3.5) + 5.0)) * 0.25);
                                float _3848 = 1.0 - _1017;
                                float _3855 = sqrt(1.0 - ((1.0 - (_3848 * _3848)) * (1.0 - (_3847 * _3847))));
                                float _3856 = _3855 * _3855;
                                float _3857 = _3856 * _3856;
                                float _3858 = _3804 - _3277;
                                float _3859 = _3805 - _3278;
                                float _3860 = _3806 - _3279;
                                float _3864 = inversesqrt(dot(vec3(_3858, _3859, _3860), vec3(_3858, _3859, _3860)));
                                float _3868 = dot(vec3(_942, _945, _948), vec3((-0.0) - _3277, (-0.0) - _3278, (-0.0) - _3279));
                                float _5015 = isnan(0.0) ? _3868 : (isnan(_3868) ? 0.0 : max(_3868, 0.0));
                                float _3871 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3872 = dot(vec3(_942, _945, _948), vec3(_3864 * _3858, _3864 * _3859, _3864 * _3860));
                                float _5026 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3875 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                                float _3879 = ((_3875 * _3875) * (_3857 + (-1.0))) + 1.0;
                                float _3880 = _3817 * _3856;
                                float _3881 = _3880 * _3880;
                                float _3887 = ((1.0 - _3881) * dot(vec3(_942, _945, _948), vec3(_3804, _3805, _3806))) + _3881;
                                float _5037 = isnan(0.0) ? _3887 : (isnan(_3887) ? 0.0 : max(_3887, 0.0));
                                float _3888 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                                float _3889 = 1.0 - _3856;
                                float _3899 = (0.5 / (((_3888 * ((_3871 * _3889) + _3856)) + 9.9999999392252902907785028219223e-09) + (((_3888 * _3889) + _3856) * _3871))) * _3888;
                                float _5048 = isnan(0.0) ? _3899 : (isnan(_3899) ? 0.0 : max(_3899, 0.0));
                                float _3909 = (_3834 * _3811) * (((_3857 * 3.1415927410125732421875) * (isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0)))) / ((_3879 * _3879) * ((_3824 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3835 * _3680.z;
                                frontier_phi_88_pred_1 = _3835 * _3680.y;
                                frontier_phi_88_pred_2 = _3835 * _3680.x;
                                frontier_phi_88_pred_3 = _3909 * _3692.z;
                                frontier_phi_88_pred_4 = _3909 * _3692.y;
                                frontier_phi_88_pred_5 = _3909 * _3692.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3918 = frontier_phi_88_pred;
                            _3917 = frontier_phi_88_pred_1;
                            _3916 = frontier_phi_88_pred_2;
                            _3915 = frontier_phi_88_pred_3;
                            _3914 = frontier_phi_88_pred_4;
                            _3913 = frontier_phi_88_pred_5;
                            _3622 = _3916 + _3635;
                            _3623 = _3917 + _3636;
                            _3624 = _3918 + _3637;
                            _3619 = _3913 + _3632;
                            _3620 = _3914 + _3633;
                            _3621 = _3915 + _3634;
                            if (_3639 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3632 = _3619;
                                _3633 = _3620;
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3639;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3624;
                        frontier_phi_82_pred_1 = _3623;
                        frontier_phi_82_pred_2 = _3622;
                        frontier_phi_82_pred_3 = _3621;
                        frontier_phi_82_pred_4 = _3620;
                        frontier_phi_82_pred_5 = _3619;
                    }
                    _3262 = frontier_phi_82_pred;
                    _3260 = frontier_phi_82_pred_1;
                    _3258 = frontier_phi_82_pred_2;
                    _3256 = frontier_phi_82_pred_3;
                    _3254 = frontier_phi_82_pred_4;
                    _3252 = frontier_phi_82_pred_5;
                    uint _3418 = _3417 + 1u;
                    if (_3418 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3411 = _3252;
                        _3412 = _3254;
                        _3413 = _3256;
                        _3414 = _3258;
                        _3415 = _3260;
                        _3416 = _3262;
                        _3417 = _3418;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3258;
                frontier_phi_63_64_ladder_1 = _3262;
                frontier_phi_63_64_ladder_2 = _3260;
                frontier_phi_63_64_ladder_3 = _3256;
                frontier_phi_63_64_ladder_4 = _3254;
                frontier_phi_63_64_ladder_5 = _3252;
            }
            else
            {
                frontier_phi_63_64_ladder = _3136;
                frontier_phi_63_64_ladder_1 = _3140;
                frontier_phi_63_64_ladder_2 = _3138;
                frontier_phi_63_64_ladder_3 = _3134;
                frontier_phi_63_64_ladder_4 = _3132;
                frontier_phi_63_64_ladder_5 = _3130;
            }
            _3251 = frontier_phi_63_64_ladder_5;
            _3253 = frontier_phi_63_64_ladder_4;
            _3255 = frontier_phi_63_64_ladder_3;
            _3257 = frontier_phi_63_64_ladder;
            _3259 = frontier_phi_63_64_ladder_2;
            _3261 = frontier_phi_63_64_ladder_1;
        }
        float _3266 = isnan(1.0) ? _1001 : (isnan(_1001) ? 1.0 : min(_1001, 1.0));
        _3063 = (_3266 * _3257) + _2575;
        _3065 = (_3266 * _3259) + _2577;
        _3067 = (_3266 * _3261) + _2579;
        _3069 = ((_3251 * _986) * _3266) + _2913;
        _3071 = ((_3253 * _988) * _3266) + _2915;
        _3073 = ((_3255 * _989) * _3266) + _2917;
    }
    else
    {
        _3063 = _2575;
        _3065 = _2577;
        _3067 = _2579;
        _3069 = _2913;
        _3071 = _2915;
        _3073 = _2917;
    }
    float _5064 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _5075 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _5086 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _3090 = ((isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3063 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1001))) + ((_3069 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1842)) * cbPerFrame._m0[3u].x);
    float _3091 = ((isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3065 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1001))) + ((_3071 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1842)) * cbPerFrame._m0[3u].x);
    float _3092 = ((isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0))) * (_3067 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1001))) + ((_3073 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1842)) * cbPerFrame._m0[3u].x);
    uint _3093 = _961 + 6u;
    float _3101 = _923 / cbSceneParam._m0[86u].x;
    float _3102 = _924 / cbSceneParam._m0[86u].y;
    vec4 _3116 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3101, _3102, (log2((isnan(cbSceneParam._m0[77u].w) ? _846 : (isnan(_846) ? cbSceneParam._m0[77u].w : min(_846, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3118 = _3116.x;
    float _3119 = _3116.y;
    float _3120 = _3116.z;
    float _3121 = _3116.w;
    float _3193;
    float _3195;
    float _3197;
    float _3199;
    if (_846 > cbSceneParam._m0[78u].w)
    {
        float _3155 = isnan(_846) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _846 : min(cbSceneParam._m0[80u].w, _846));
        float _3156 = _3155 / _846;
        float _3167 = _3156 * _896;
        float _3168 = _897 * _3156;
        float _3169 = (-0.0) - _3168;
        float _3171 = _3156 * _898;
        float _3173 = (cbSceneParam._m0[77u].w * _3169) / _3155;
        float _3174 = _3173 + cbSceneParam._m0[79u].w;
        float _3175 = cbSceneParam._m0[79u].w - _3168;
        float _3181 = sqrt(((_3167 * _3167) + (_3168 * _3168)) + (_3171 * _3171));
        float _3184 = (1.0 - (cbSceneParam._m0[77u].w / _3155)) * _3181;
        float _3189 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3191 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3368;
        if (abs((_3169 - _3173) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3368 = ((((_3174 > 0.0) ? exp2(_3189 * _3174) : (2.0 - exp2(_3191 * _3174))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3184;
        }
        else
        {
            float _3312 = 1.0 / cbSceneParam._m0[80u].x;
            float _3313 = isnan(_3175) ? _3174 : (isnan(_3174) ? _3175 : max(_3174, _3175));
            float _3314 = isnan(_3175) ? _3174 : (isnan(_3174) ? _3175 : min(_3174, _3175));
            float _3323 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : min(_3313, 0.0));
            float _3324 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : min(_3314, 0.0));
            _3368 = ((abs(_3181 / _3169) * cbSceneParam._m0[80u].y) * ((((_3323 - _3324) * 2.0) - ((exp2(_3189 * (isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0)))) - exp2(_3189 * (isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))))) * _3312)) - ((exp2(_3191 * _3323) - exp2(_3191 * _3324)) * _3312))) + (_3184 * cbSceneParam._m0[80u].z);
        }
        vec4 _3370 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3101, _3102, 1.0), 0.0);
        float _3379 = exp2((_3368 * (-1.44269502162933349609375)) * (1.0 - _3370.w));
        float _3380 = log2(_3379);
        float _3396 = log2(_3121);
        _3193 = (exp2(_3396 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3380 * cbSceneParam._m0[78u].x)) * _3370.x) / cbSceneParam._m0[78u].x)) + _3118;
        _3195 = (exp2(_3396 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3380 * cbSceneParam._m0[78u].y)) * _3370.y) / cbSceneParam._m0[78u].y)) + _3119;
        _3197 = (exp2(_3396 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3380 * cbSceneParam._m0[78u].z)) * _3370.z) / cbSceneParam._m0[78u].z)) + _3120;
        _3199 = _3379 * _3121;
    }
    else
    {
        _3193 = _3118;
        _3195 = _3119;
        _3197 = _3120;
        _3199 = _3121;
    }
    bool _3406;
    vec4 _3209;
    vec4 _3231;
    float _3233;
    float _3237;
    float _3238;
    float _3239;
    float _3240;
    bool _3250;
    for (;;)
    {
        _3209 = cbMatDynParam._m0[0u];
        float _3211 = roundEven(_3209.y);
        bool _3212 = _3211 == 3.0;
        float _3213 = log2(_3199);
        float _3220 = exp2(_3213 * cbSceneParam._m0[78u].x) * _3090;
        float _3221 = exp2(_3213 * cbSceneParam._m0[78u].y) * _3091;
        float _3222 = exp2(_3213 * cbSceneParam._m0[78u].z) * _3092;
        float _3229 = _912 + (-0.5);
        _3231 = cbMtdParam._m0[1u];
        _3233 = _3231.y * _3229;
        float _3236 = (_3211 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3237 = _3236 * (_3212 ? _3220 : (_3220 + (cbSceneParam._m0[72u].w * _3193)));
        _3238 = _3236 * (_3212 ? _3221 : (_3221 + (cbSceneParam._m0[72u].w * _3195)));
        _3239 = _3236 * (_3212 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3197)));
        _3240 = _3229 * 0.999000012874603271484375;
        _3250 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3250)
        {
            if ((cbInstanceData._m0[_961 + 7u].x + _3240) < 0.5)
            {
                _3406 = true;
                break;
            }
        }
        uint _3347 = _962 + uint(_3209.w);
        if ((cbInstanceData._m0[_3347].w < 1.0) && ((cbInstanceData._m0[_3347].w + _3240) < 0.5))
        {
            _3406 = true;
            break;
        }
        if ((_3233 + 1.0) < _3231.x)
        {
            _3406 = true;
            break;
        }
        _3406 = false;
        break;
    }
    float _3610;
    if (_3406)
    {
        discard_state = true;
        _3610 = 0.0;
    }
    else
    {
        _3610 = cbInstanceData._m0[_3093].w;
    }
    SV_Target.x = _3237;
    SV_Target.y = _3238;
    SV_Target.z = _3239;
    SV_Target.w = _3610;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3093].w;
    discard_exit();
}


