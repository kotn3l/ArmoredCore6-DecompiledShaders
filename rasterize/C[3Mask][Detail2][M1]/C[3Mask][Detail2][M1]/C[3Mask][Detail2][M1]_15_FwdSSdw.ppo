#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1332;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _264.x * cbMtdParam._m0[10u].x;
    float _271 = _264.y * cbMtdParam._m0[10u].y;
    float _272 = _264.z * cbMtdParam._m0[10u].z;
    vec4 _290 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _340 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _350 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _340)) + 1.0;
    float _3684 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _358 = (_351 * ((_290.x * cbMtdParam._m0[11u].x) - _270)) + _270;
    float _359 = (_351 * ((_290.y * cbMtdParam._m0[11u].y) - _271)) + _271;
    float _360 = (_351 * ((_290.z * cbMtdParam._m0[11u].z) - _272)) + _272;
    vec4 _378 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _409 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _340)) + 1.0;
    float _3695 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _417 = (_410 * ((_378.x * cbMtdParam._m0[12u].x) - _358)) + _358;
    float _418 = (_410 * ((_378.y * cbMtdParam._m0[12u].y) - _359)) + _359;
    float _419 = (_410 * ((_378.z * cbMtdParam._m0[12u].z) - _360)) + _360;
    vec4 _437 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _462 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _340)) + 1.0;
    float _3706 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _470 = (_463 * ((_437.x * cbMtdParam._m0[13u].x) - _417)) + _417;
    float _471 = (_463 * ((_437.y * cbMtdParam._m0[13u].y) - _418)) + _418;
    float _472 = (_463 * ((_437.z * cbMtdParam._m0[13u].z) - _419)) + _419;
    vec4 _493 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _522 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _3717 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _530 = (_523 * ((_493.x * cbMtdParam._m0[15u].x) - _470)) + _470;
    float _531 = (_523 * ((_493.y * cbMtdParam._m0[15u].y) - _471)) + _471;
    float _532 = (_523 * ((_493.z * cbMtdParam._m0[15u].z) - _472)) + _472;
    vec4 _545 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _547 = _545.x;
    float _565 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _547) * _351) + _547;
    float _583 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _565) * _410) + _565;
    float _600 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _583) * _463) + _583;
    vec4 _612 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _632 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _634 = _632.x;
    float _635 = _632.y;
    float _641 = cbMtdParam._m0[18u].y * _632.z;
    vec4 _653 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _662 = (((cbMtdParam._m0[18u].x * _653.z) - _641) * _351) + _641;
    vec4 _675 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _686 = (((cbMtdParam._m0[17u].w * _675.z) - _662) * _410) + _662;
    vec4 _699 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _708 = (((cbMtdParam._m0[17u].z * _699.z) - _686) * _463) + _686;
    vec4 _721 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _735 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_721.z * cbMtdParam._m0[19u].y) - _708)) + _708;
    float _740 = ((_653.x - _634) * _351) + _634;
    float _741 = ((_653.y - _635) * _351) + _635;
    float _746 = ((_675.x - _740) * _410) + _740;
    float _747 = ((_675.y - _741) * _410) + _741;
    float _756 = ((((_699.x - _746) * _463) + _746) * 2.0) + (-1.0);
    float _757 = ((((_699.y - _747) * _463) + _747) * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _3728 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _763 = sqrt(1.0 - (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))));
    float _776 = (((((_612.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _756) + ((((_721.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _777 = (((((_612.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _757) + ((((_721.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _780 = fma(_763, _234 * NORMAL.x, fma(_777, _241 * TANGENT.x, (_227 * _219) * _776));
    float _783 = fma(_763, _234 * NORMAL.y, fma(_777, _241 * TANGENT.y, (_227 * _220) * _776));
    float _786 = fma(_763, _234 * NORMAL.z, fma(_777, _241 * TANGENT.z, (_227 * _221) * _776));
    float _790 = inversesqrt(dot(vec3(_780, _783, _786), vec3(_780, _783, _786)));
    float _791 = _790 * _780;
    float _792 = _790 * _783;
    float _793 = _790 * _786;
    float _3739 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _794 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _3761 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _3772 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3783 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _798 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _864 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _854);
    float _865 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _854);
    float _866 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _854);
    float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
    float _871 = _864 * _870;
    float _872 = _865 * _870;
    float _873 = _866 * _870;
    float _879 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _880 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _898 = fma(_793, cbSceneParam._m0[5u].z, fma(_792, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _791));
    float _901 = fma(_793, cbSceneParam._m0[6u].z, fma(_792, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _791));
    float _904 = fma(_793, cbSceneParam._m0[7u].z, fma(_792, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _791));
    uint _917 = uint(roundEven(NORMAL.w)) * 13u;
    uint _919 = (_917 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _925 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_919].x;
    float _926 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_919].y;
    float _927 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_919].z;
    float _3794 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _931 = 1.0 - _798;
    float _932 = _928 * _931;
    float _933 = _929 * _931;
    float _934 = _930 * _931;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _798;
    float _940 = (_929 + (-0.039999999105930328369140625)) * _798;
    float _941 = (_930 + (-0.039999999105930328369140625)) * _798;
    float _942 = _939 + 0.039999999105930328369140625;
    float _944 = _940 + 0.039999999105930328369140625;
    float _945 = _941 + 0.039999999105930328369140625;
    vec4 _954 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _879, cbSceneParam._m0[86u].y * _880));
    float _957 = _954.x * TEXCOORD_5.w;
    float _958 = dot(vec3(_791, _792, _793), vec3(_871, _872, _873));
    float _961 = _958 * 2.0;
    float _965 = (_961 * _791) - _871;
    float _966 = (_961 * _792) - _872;
    float _967 = (_961 * _793) - _873;
    float _971 = abs(dot(vec3(_871, _872, _873), vec3(_791, _792, _793)));
    float _3827 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _973 = sqrt(_794);
    float _986 = exp2((_973 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_973 * 3.0));
    float _992 = (1.0 - _986) * ((_973 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _993 = _986 * _973;
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1331;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1056 = fma(_1029, cbModelParam._m0[26u].z, fma(_1025, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1021));
        float _1060 = fma(_1029, cbModelParam._m0[27u].z, fma(_1025, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1021));
        float _1064 = fma(_1029, cbModelParam._m0[28u].z, fma(_1025, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1021));
        float _1089 = _1021 + _791;
        float _1090 = _1025 + _792;
        float _1091 = _1029 + _793;
        float _1101 = fma(_1091, cbModelParam._m0[26u].z, fma(_1090, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089)) - _1056;
        float _1102 = fma(_1091, cbModelParam._m0[27u].z, fma(_1090, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089)) - _1060;
        float _1103 = fma(_1091, cbModelParam._m0[28u].z, fma(_1090, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089)) - _1064;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1056 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1060 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[34u].z) + ((((((_1064 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1159 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1125.x + (-0.5));
        float _1161 = _1159 * (_1125.y + (-0.5));
        float _1162 = _1159 * (_1125.z + (-0.5));
        float _1169 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1132.x + (-0.5));
        float _1171 = _1169 * (_1132.y + (-0.5));
        float _1172 = _1169 * (_1132.z + (-0.5));
        float _1179 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1139.x + (-0.5));
        float _1181 = _1179 * (_1139.y + (-0.5));
        float _1182 = _1179 * (_1139.z + (-0.5));
        float _1189 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1146.x + (-0.5));
        float _1191 = _1189 * (_1146.y + (-0.5));
        float _1192 = _1189 * (_1146.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1213 = (dot(vec3(_791, _792, _793), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1223 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3875 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1225 + 1.0))) + _1230) * _1193;
        float _1240 = _1161 * 0.5;
        float _1241 = _1171 * 0.5;
        float _1242 = _1181 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_791, _792, _793), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3908 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1267 + 1.0))) + _1272) * _1194;
        float _1282 = _1162 * 0.5;
        float _1283 = _1172 * 0.5;
        float _1284 = _1182 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_791, _792, _793), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3941 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1309 + 1.0))) + _1314) * _1195;
        _1331 = _1162;
        _1333 = _1161;
        _1334 = _1160;
        _1335 = _1172;
        _1336 = _1171;
        _1337 = _1170;
        _1338 = _1182;
        _1339 = _1181;
        _1340 = _1180;
        _1341 = _1195;
        _1342 = _1194;
        _1343 = _1193;
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1332;
        _1333 = _1332;
        _1334 = _1332;
        _1335 = _1332;
        _1336 = _1332;
        _1337 = _1332;
        _1338 = _1332;
        _1339 = _1332;
        _1340 = _1332;
        _1341 = _1332;
        _1342 = _1332;
        _1343 = _1332;
        _1344 = 0.0;
        _1345 = 0.0;
        _1346 = 0.0;
    }
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1372 = fma(_1029, cbModelParam._m0[30u].z, fma(_1025, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1021));
        float _1376 = fma(_1029, cbModelParam._m0[31u].z, fma(_1025, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1021));
        float _1380 = fma(_1029, cbModelParam._m0[32u].z, fma(_1025, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1021));
        float _1403 = _1021 + _791;
        float _1404 = _1025 + _792;
        float _1405 = _1029 + _793;
        float _1415 = fma(_1405, cbModelParam._m0[30u].z, fma(_1404, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1403)) - _1372;
        float _1416 = fma(_1405, cbModelParam._m0[31u].z, fma(_1404, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1403)) - _1376;
        float _1417 = fma(_1405, cbModelParam._m0[32u].z, fma(_1404, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1403)) - _1380;
        float _1421 = inversesqrt(dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417)));
        float _1434 = ((_1421 * _1415) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1372 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1421 * _1416) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1376 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1421 * _1417) / cbModelParam._m0[35u].z) + ((((((_1380 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        float _1471 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1438.x + (-0.5));
        float _1473 = _1471 * (_1438.y + (-0.5));
        float _1474 = _1471 * (_1438.z + (-0.5));
        float _1481 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1445.x + (-0.5));
        float _1483 = _1481 * (_1445.y + (-0.5));
        float _1484 = _1481 * (_1445.z + (-0.5));
        float _1491 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1452.x + (-0.5));
        float _1493 = _1491 * (_1452.y + (-0.5));
        float _1494 = _1491 * (_1452.z + (-0.5));
        float _1501 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1459.x + (-0.5));
        float _1503 = _1501 * (_1459.y + (-0.5));
        float _1504 = _1501 * (_1459.z + (-0.5));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = _1472 * 0.5;
        float _1509 = _1482 * 0.5;
        float _1510 = _1492 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_791, _792, _793), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4004 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1535 + 1.0))) + _1540) * _1505;
        float _1550 = _1473 * 0.5;
        float _1551 = _1483 * 0.5;
        float _1552 = _1493 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_791, _792, _793), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4037 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1577 + 1.0))) + _1582) * _1506;
        float _1592 = _1474 * 0.5;
        float _1593 = _1484 * 0.5;
        float _1594 = _1494 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_791, _792, _793), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4070 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1619 + 1.0))) + _1624) * _1507;
        _1641 = _1474;
        _1642 = _1473;
        _1643 = _1472;
        _1644 = _1484;
        _1645 = _1483;
        _1646 = _1482;
        _1647 = _1494;
        _1648 = _1493;
        _1649 = _1492;
        _1650 = _1507;
        _1651 = _1506;
        _1652 = _1505;
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
    }
    else
    {
        _1641 = _1332;
        _1642 = _1332;
        _1643 = _1332;
        _1644 = _1332;
        _1645 = _1332;
        _1646 = _1332;
        _1647 = _1332;
        _1648 = _1332;
        _1649 = _1332;
        _1650 = _1332;
        _1651 = _1332;
        _1652 = _1332;
        _1653 = 0.0;
        _1654 = 0.0;
        _1655 = 0.0;
    }
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1344)) + _1344;
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1345)) + _1345;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1346)) + _1346;
    float _1688 = fma(_1667, cbSceneParam._m0[89u].z, fma(_1666, cbSceneParam._m0[89u].y, _1665 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1667, cbSceneParam._m0[90u].z, fma(_1666, cbSceneParam._m0[90u].y, _1665 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1667, cbSceneParam._m0[91u].z, fma(_1666, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1665));
    float _1709 = _965 * 0.5;
    float _1710 = _966 * 0.5;
    float _1711 = _967 * 0.5;
    float _1712 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1715 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1718 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1752;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1725 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1331, _1335, _1338, _1341));
        float _1729 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1733 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1740 = dot(vec4(cbModelParam._m0[39u]), vec4(_1709, _1710, _1711, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1763;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1754 = dot(vec4(cbModelParam._m0[40u]), vec4(_1709, _1710, _1711, 1.0));
        _1763 = dot(vec3(isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1754) ? 0.0 : (isnan(0.0) ? _1754 : max(0.0, _1754))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1763 = 1.0;
    }
    float _1767 = (_1763 * cbModelParam._m0[1u].x) + (_1752 * (1.0 - cbModelParam._m0[1u].x));
    float _1777 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _794);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1777 : min(cbModelParam._m0[25u].z, _1777));
    float _1858;
    float _1860;
    float _1862;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1825 = fma(_1029, cbModelParam._m0[13u].z, fma(_1025, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1021)) + cbModelParam._m0[13u].w;
        float _1829 = fma(_1029, cbModelParam._m0[14u].z, fma(_1025, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1021)) + cbModelParam._m0[14u].w;
        float _1833 = fma(_1029, cbModelParam._m0[15u].z, fma(_1025, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1021)) + cbModelParam._m0[15u].w;
        float _1836 = fma(_967, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965));
        float _1839 = fma(_967, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965));
        float _1842 = fma(_967, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965));
        float _1870;
        if (_1836 > 0.0)
        {
            _1870 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1870 = frontier_phi_14_12_ladder;
        }
        float _2094;
        if (_1839 > 0.0)
        {
            _2094 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2094 = frontier_phi_23_19_ladder;
        }
        float _2351;
        if (_1842 > 0.0)
        {
            _2351 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2351 = frontier_phi_35_30_ladder;
        }
        float _2353 = isnan(_2094) ? _1870 : (isnan(_1870) ? _2094 : min(_1870, _2094));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1836) + _1825;
        float _2359 = (_2354 * _1839) + _1829;
        float _2360 = (_2354 * _1842) + _1833;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2363 = (-1.0) - _2361;
        float _2365 = _2361 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2360 > _2365) || ((_2360 < _2363) || ((_2359 > _2365) || ((_2359 < _2363) || ((_2358 < _2363) || (_2358 > _2365))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2360, cbModelParam._m0[9u].z, fma(_2359, cbModelParam._m0[9u].y, _2358 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2360, cbModelParam._m0[10u].z, fma(_2359, cbModelParam._m0[10u].y, _2358 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2360, cbModelParam._m0[11u].z, fma(_2359, cbModelParam._m0[11u].y, _2358 * cbModelParam._m0[11u].x))), _1778);
            frontier_phi_13_35_ladder = _2488.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2488.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2488.x * cbModelParam._m0[1u].y;
        }
        _1858 = frontier_phi_13_35_ladder_2;
        _1860 = frontier_phi_13_35_ladder_1;
        _1862 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_965, _966, _967), _1778);
        _1858 = _1846.x * cbModelParam._m0[1u].y;
        _1860 = _1846.y * cbModelParam._m0[1u].y;
        _1862 = _1846.z * cbModelParam._m0[1u].y;
    }
    float _1866 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _794);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1866 : min(cbModelParam._m0[25u].w, _1866));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1920 = fma(_1029, cbModelParam._m0[21u].z, fma(_1025, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1021)) + cbModelParam._m0[21u].w;
        float _1924 = fma(_1029, cbModelParam._m0[22u].z, fma(_1025, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1021)) + cbModelParam._m0[22u].w;
        float _1928 = fma(_1029, cbModelParam._m0[23u].z, fma(_1025, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1021)) + cbModelParam._m0[23u].w;
        float _1931 = fma(_967, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965));
        float _1934 = fma(_967, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965));
        float _1937 = fma(_967, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965));
        float _2099;
        if (_1931 > 0.0)
        {
            _2099 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2099 = frontier_phi_25_21_ladder;
        }
        float _2378;
        if (_1934 > 0.0)
        {
            _2378 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2378 = frontier_phi_37_32_ladder;
        }
        float _2591;
        if (_1937 > 0.0)
        {
            _2591 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2591 = frontier_phi_46_43_ladder;
        }
        float _2593 = isnan(_2378) ? _2099 : (isnan(_2099) ? _2378 : min(_2099, _2378));
        float _2594 = isnan(_2591) ? _2593 : (isnan(_2593) ? _2591 : min(_2593, _2591));
        float _2598 = (_2594 * _1931) + _1920;
        float _2599 = (_2594 * _1934) + _1924;
        float _2600 = (_2594 * _1937) + _1928;
        float _2601 = _2594 * 9.9999997473787516355514526367188e-05;
        float _2602 = (-1.0) - _2601;
        float _2604 = _2601 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2600 > _2604) || ((_2600 < _2602) || ((_2599 > _2604) || ((_2599 < _2602) || ((_2598 < _2602) || (_2598 > _2604))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2600, cbModelParam._m0[17u].z, fma(_2599, cbModelParam._m0[17u].y, _2598 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2600, cbModelParam._m0[18u].z, fma(_2599, cbModelParam._m0[18u].y, _2598 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2600, cbModelParam._m0[19u].z, fma(_2599, cbModelParam._m0[19u].y, _2598 * cbModelParam._m0[19u].x))), _1867);
            frontier_phi_22_46_ladder = _2799.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2799.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2799.x * cbModelParam._m0[1u].z;
        }
        _1956 = frontier_phi_22_46_ladder_2;
        _1958 = frontier_phi_22_46_ladder_1;
        _1960 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1940 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_965, _966, _967), _1867);
        _1956 = _1940.x * cbModelParam._m0[1u].z;
        _1958 = _1940.y * cbModelParam._m0[1u].z;
        _1960 = _1940.z * cbModelParam._m0[1u].z;
    }
    float _1973 = (((_992 * _942) + _993) * _957) * ((cbModelParam._m0[1u].w * (_1956 - _1858)) + _1858);
    float _1975 = (((_992 * _944) + _993) * _957) * ((cbModelParam._m0[1u].w * (_1958 - _1860)) + _1860);
    float _1977 = (((_992 * _945) + _993) * _957) * ((cbModelParam._m0[1u].w * (_1960 - _1862)) + _1862);
    float _1980 = fma(_1977, cbSceneParam._m0[89u].z, fma(_1975, cbSceneParam._m0[89u].y, _1973 * cbSceneParam._m0[89u].x));
    float _1983 = fma(_1977, cbSceneParam._m0[90u].z, fma(_1975, cbSceneParam._m0[90u].y, _1973 * cbSceneParam._m0[90u].x));
    float _1986 = fma(_1977, cbSceneParam._m0[91u].z, fma(_1975, cbSceneParam._m0[91u].y, _1973 * cbSceneParam._m0[91u].x));
    vec4 _1994 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_879, _880));
    float _1996 = _1994.w;
    float _2008 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1996);
    float _2009 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1996);
    float _2010 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1996);
    uvec4 _2014 = floatBitsToUint(cbInstanceData._m0[_917 + 5u]);
    uint _2016 = _2014.x * 14u;
    uint _2017 = _2016 + 13u;
    float _2024 = _957 + (-1.0);
    float _2029 = (cbLight._m0[_2017].x * _2024) + 1.0;
    float _2030 = (cbLight._m0[_2017].y * _2024) + 1.0;
    float _2031 = (cbLight._m0[_2017].z * _2024) + 1.0;
    float _2032 = (cbLight._m0[_2017].w * _2024) + 1.0;
    uint _2033 = _2016 + 5u;
    float _2039 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
    uint _2043 = _2016 + 4u;
    float _2053 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
    uint _2057 = _2016 | 1u;
    float _2068 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_791, _792, _793));
    float _2071 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_791, _792, _793));
    float _4206 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _4217 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2076 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.3183098733425140380859375;
    float _2078 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.3183098733425140380859375;
    float _2085 = ((cbLight._m0[_2033].x * _2039) * _2078) + (((cbLight._m0[_2043].x * _2008) * _2053) * _2076);
    float _2086 = ((_2039 * cbLight._m0[_2033].y) * _2078) + (((cbLight._m0[_2043].y * _2009) * _2053) * _2076);
    float _2087 = ((_2039 * cbLight._m0[_2033].z) * _2078) + (((cbLight._m0[_2043].z * _2010) * _2053) * _2076);
    uvec4 _2091 = floatBitsToUint(cbLight._m0[_2016 + 12u]);
    bool _2093 = _2091.x == 0u;
    float _2104;
    float _2106;
    float _2108;
    if (_2093)
    {
        _2104 = _2085;
        _2106 = _2086;
        _2108 = _2087;
    }
    else
    {
        uint _2112 = _2016 + 6u;
        float _2128 = (dot(vec3(cbLight._m0[_2016 + 2u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2129 = _2128 * _2128;
        float _4228 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2131 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
        _2104 = (((cbLight._m0[_2112].x * 0.3183098733425140380859375) * _2130) * _2131) + _2085;
        _2106 = (((cbLight._m0[_2112].y * 0.3183098733425140380859375) * _2130) * _2131) + _2086;
        _2108 = (((cbLight._m0[_2112].z * 0.3183098733425140380859375) * _2130) * _2131) + _2087;
    }
    bool _2111 = _2091.y == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2111)
    {
        _2149 = _2104;
        _2151 = _2106;
        _2153 = _2108;
    }
    else
    {
        uint _2322 = _2016 + 7u;
        float _2338 = (dot(vec3(cbLight._m0[_2016 + 3u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2339 = _2338 * _2338;
        float _4244 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2340 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2341 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2149 = (((cbLight._m0[_2322].x * 0.3183098733425140380859375) * _2340) * _2341) + _2104;
        _2151 = (((cbLight._m0[_2322].y * 0.3183098733425140380859375) * _2340) * _2341) + _2106;
        _2153 = (((cbLight._m0[_2322].z * 0.3183098733425140380859375) * _2340) * _2341) + _2108;
    }
    uint _2156 = _2016 + 8u;
    float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _794) * 0.949999988079071044921875);
    float _2170 = _2169 * _2169;
    float _2171 = cbLight._m0[_2016].x + _871;
    float _2172 = cbLight._m0[_2016].y + _872;
    float _2173 = cbLight._m0[_2016].z + _873;
    float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
    float _2178 = _2177 * _2171;
    float _2179 = _2177 * _2172;
    float _2180 = _2177 * _2173;
    float _2181 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2016].xyz));
    float _4260 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _4271 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _2185 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2186 = dot(vec3(_791, _792, _793), vec3(_2178, _2179, _2180));
    float _4282 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2178, _2179, _2180));
    float _4293 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2170 * _2170;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2206 = exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0);
    float _2207 = 0.959999978542327880859375 - _939;
    float _2209 = 0.959999978542327880859375 - _940;
    float _2210 = 0.959999978542327880859375 - _941;
    float _2217 = 1.0 - _2170;
    float _2228 = (0.5 / (((_2185 * ((_2184 * _2217) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2217) + _2170) * _2184))) * _2184;
    float _4304 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2230 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    uint _2244 = _2016 + 9u;
    float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _794) * 0.949999988079071044921875);
    float _2256 = _2255 * _2255;
    float _2257 = cbLight._m0[_2057].x + _871;
    float _2258 = cbLight._m0[_2057].y + _872;
    float _2259 = cbLight._m0[_2057].z + _873;
    float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
    float _2264 = _2263 * _2257;
    float _2265 = _2263 * _2258;
    float _2266 = _2263 * _2259;
    float _2267 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2057].xyz));
    float _4315 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2271 = dot(vec3(_791, _792, _793), vec3(_2264, _2265, _2266));
    float _4326 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2275 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2264, _2265, _2266));
    float _4337 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2279 = _2256 * _2256;
    float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
    float _2290 = exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0);
    float _2297 = 1.0 - _2256;
    float _2307 = (0.5 / (((_2185 * ((_2270 * _2297) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2297) + _2256) * _2270))) * _2270;
    float _4348 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2309 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
    float _2319 = (((((_2290 * _2207) + _942) * cbLight._m0[_2244].x) * _2309) * _2039) + ((((cbLight._m0[_2156].x * _2008) * ((_2206 * _2207) + _942)) * _2230) * _2053);
    float _2320 = (((((_2290 * _2209) + _944) * cbLight._m0[_2244].y) * _2309) * _2039) + ((((cbLight._m0[_2156].y * _2009) * ((_2206 * _2209) + _944)) * _2230) * _2053);
    float _2321 = (((((_2290 * _2210) + _945) * cbLight._m0[_2244].z) * _2309) * _2039) + ((((cbLight._m0[_2156].z * _2010) * ((_2206 * _2210) + _945)) * _2230) * _2053);
    float _2383;
    float _2385;
    float _2387;
    if (_2093)
    {
        _2383 = _2319;
        _2385 = _2320;
        _2387 = _2321;
    }
    else
    {
        uint _2389 = _2016 + 2u;
        uint _2393 = _2016 + 10u;
        float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _794) * 0.949999988079071044921875);
        float _2408 = _2407 * _2407;
        float _2409 = cbLight._m0[_2389].x + _871;
        float _2410 = cbLight._m0[_2389].y + _872;
        float _2411 = cbLight._m0[_2389].z + _873;
        float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
        float _2416 = _2415 * _2409;
        float _2417 = _2415 * _2410;
        float _2418 = _2415 * _2411;
        float _2419 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2389].xyz));
        float _4359 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2423 = dot(vec3(_791, _792, _793), vec3(_2416, _2417, _2418));
        float _4370 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2427 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2416, _2417, _2418));
        float _4381 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2431 = _2408 * _2408;
        float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
        float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0);
        float _2449 = 1.0 - _2408;
        float _2459 = (0.5 / (((_2185 * ((_2422 * _2449) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2449) + _2408) * _2422))) * _2422;
        float _4392 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2461 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
        float _2462 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
        _2383 = (((((_2442 * _2207) + _942) * cbLight._m0[_2393].x) * _2461) * _2462) + _2319;
        _2385 = (((((_2442 * _2209) + _944) * cbLight._m0[_2393].y) * _2461) * _2462) + _2320;
        _2387 = (((((_2442 * _2210) + _945) * cbLight._m0[_2393].z) * _2461) * _2462) + _2321;
    }
    float _2497;
    float _2499;
    float _2501;
    if (_2111)
    {
        _2497 = _2383;
        _2499 = _2385;
        _2501 = _2387;
    }
    else
    {
        uint _2508 = _2016 + 3u;
        uint _2512 = _2016 + 11u;
        float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2508].w)) * _794) * 0.949999988079071044921875);
        float _2527 = _2526 * _2526;
        float _2528 = cbLight._m0[_2508].x + _871;
        float _2529 = cbLight._m0[_2508].y + _872;
        float _2530 = cbLight._m0[_2508].z + _873;
        float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
        float _2535 = _2534 * _2528;
        float _2536 = _2534 * _2529;
        float _2537 = _2534 * _2530;
        float _2538 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2508].xyz));
        float _4408 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2542 = dot(vec3(_791, _792, _793), vec3(_2535, _2536, _2537));
        float _4419 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2546 = dot(vec3(cbLight._m0[_2508].xyz), vec3(_2535, _2536, _2537));
        float _4430 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2550 = _2527 * _2527;
        float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
        float _2561 = exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0);
        float _2568 = 1.0 - _2527;
        float _2578 = (0.5 / (((_2185 * ((_2541 * _2568) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2568) + _2527) * _2541))) * _2541;
        float _4441 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2580 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
        float _2581 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2497 = (((((_2561 * _2207) + _942) * cbLight._m0[_2512].x) * _2580) * _2581) + _2383;
        _2499 = (((((_2561 * _2209) + _944) * cbLight._m0[_2512].y) * _2580) * _2581) + _2385;
        _2501 = (((((_2561 * _2210) + _945) * cbLight._m0[_2512].z) * _2580) * _2581) + _2387;
    }
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    if (_2014.y == 0u)
    {
        float _2656 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2657 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2656;
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2656;
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2656;
        uvec4 _2671 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2672 = _2671.x;
        uint _2683 = uint((float(_2671.y) * floor(float(uint(cbSceneParam._m0[85u].y * _880) / _2672))) + floor(float(uint(cbSceneParam._m0[85u].x * _879) / _2672)));
        float _2693 = (log2(_2659 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2694 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        uint _2697 = uint(isnan(14.0) ? _2694 : (isnan(_2694) ? 14.0 : min(_2694, 14.0)));
        uvec4 _2702 = texelFetch(g_lightClusterGridBuffer, int(((_2697 << 2u) + (_2683 << 6u)) >> 2u));
        uint _2703 = _2702.x;
        uint _2704 = _2671.z;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        if (((((1u << ((_2704 >> 4u) & 15u)) + 4294967295u) & _2703) == 0u) || ((_2704 & 240u) == 0u))
        {
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
        }
        else
        {
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            uint _2955 = 0u;
            uint _2964;
            bool _2965;
            for (;;)
            {
                _2964 = texelFetch(g_lightClassification, int((((_2697 << 5u) + (_2683 << 9u)) + (_2955 << 2u)) >> 2u)).x;
                _2965 = _2964 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2965)
                {
                    frontier_phi_61_pred = _2949;
                    frontier_phi_61_pred_1 = _2954;
                    frontier_phi_61_pred_2 = _2953;
                    frontier_phi_61_pred_3 = _2952;
                    frontier_phi_61_pred_4 = _2951;
                    frontier_phi_61_pred_5 = _2950;
                }
                else
                {
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    uint _3079;
                    _3073 = _2949;
                    _3074 = _2950;
                    _3075 = _2951;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2964;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    for (;;)
                    {
                        uint _3083 = uint(findLSB(_3079)) + (_2955 << 5u);
                        uint _3080 = (_3079 + 4294967295u) & _3079;
                        uint _3085 = _3083 * 48u;
                        vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3105 = (_3083 * 48u) + 4u;
                        vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 3u)).x));
                        uint _3124 = (_3083 * 48u) + 8u;
                        vec3 _3135 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x));
                        float _3139 = _3099.x - _2657;
                        float _3140 = _3099.y - _2658;
                        float _3141 = _3099.z - _2659;
                        float _3142 = dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141));
                        float _3145 = inversesqrt(_3142);
                        float _3146 = _3145 * _3139;
                        float _3147 = _3145 * _3140;
                        float _3148 = _3145 * _3141;
                        float _3149 = dot(vec3(_898, _901, _904), vec3(_3146, _3147, _3148));
                        float _3154 = 1.0 - (_3142 * _3099.w);
                        float _4467 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3155 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3156 = sqrt(_3142) * _3118.w;
                        float _3159 = 1.39999997615814208984375 / (_3156 + 1.39999997615814208984375);
                        float _3160 = _3159 * _3159;
                        float _3163 = ((1.0 - _3160) * _3149) + _3160;
                        float _3166 = _3156 * _3156;
                        float _3170 = ((isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))) * _3155) / ((_3166 * 0.699999988079071044921875) + 1.0);
                        float _3174 = (-0.0) - _2657;
                        float _3175 = (-0.0) - _2658;
                        float _3176 = (-0.0) - _2659;
                        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                        float _3181 = _3180 * _3174;
                        float _3182 = _3180 * _3175;
                        float _3183 = _3180 * _3176;
                        float _3191 = exp2(log2(1.0 / ((_3166 * 3.5) + 5.0)) * 0.25);
                        float _3192 = 1.0 - _973;
                        float _3199 = sqrt(1.0 - ((1.0 - (_3192 * _3192)) * (1.0 - (_3191 * _3191))));
                        float _3200 = _3199 * _3199;
                        float _3201 = _3200 * _3200;
                        float _3202 = _3181 + _3146;
                        float _3203 = _3182 + _3147;
                        float _3204 = _3183 + _3148;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3212 = dot(vec3(_898, _901, _904), vec3(_3181, _3182, _3183));
                        float _4483 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3215 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3216 = dot(vec3(_898, _901, _904), vec3(_3208 * _3202, _3208 * _3203, _3208 * _3204));
                        float _4494 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3223 = ((_3219 * _3219) * (_3201 + (-1.0))) + 1.0;
                        float _3224 = _3159 * _3200;
                        float _3225 = _3224 * _3224;
                        float _3228 = ((1.0 - _3225) * _3149) + _3225;
                        float _4505 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3230 = 1.0 - _3200;
                        float _3240 = (0.5 / (((_3229 * ((_3215 * _3230) + _3200)) + 9.9999999392252902907785028219223e-09) + (((_3229 * _3230) + _3200) * _3215))) * _3229;
                        float _4516 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3251 = (((_3201 * 3.1415927410125732421875) * (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) / ((_3223 * _3223) * ((_3166 * 2.1991131305694580078125) + 3.141590118408203125))) * _3155;
                        _3008 = (_3170 * _3118.x) + _3076;
                        _3009 = (_3170 * _3118.y) + _3077;
                        _3010 = (_3170 * _3118.z) + _3078;
                        _3005 = (_3251 * _3135.x) + _3073;
                        _3006 = (_3251 * _3135.y) + _3074;
                        _3007 = (_3251 * _3135.z) + _3075;
                        if (_3080 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3073 = _3005;
                            _3074 = _3006;
                            _3075 = _3007;
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3080;
                        }
                    }
                    frontier_phi_61_pred = _3005;
                    frontier_phi_61_pred_1 = _3010;
                    frontier_phi_61_pred_2 = _3009;
                    frontier_phi_61_pred_3 = _3008;
                    frontier_phi_61_pred_4 = _3007;
                    frontier_phi_61_pred_5 = _3006;
                }
                _2805 = frontier_phi_61_pred;
                _2815 = frontier_phi_61_pred_1;
                _2813 = frontier_phi_61_pred_2;
                _2811 = frontier_phi_61_pred_3;
                _2809 = frontier_phi_61_pred_4;
                _2807 = frontier_phi_61_pred_5;
                uint _2956 = _2955 + 1u;
                if (_2956 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2949 = _2805;
                    _2950 = _2807;
                    _2951 = _2809;
                    _2952 = _2811;
                    _2953 = _2813;
                    _2954 = _2815;
                    _2955 = _2956;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
        }
        uvec4 _2818 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2819 = _2818.z;
        uint _2821 = (_2819 >> 8u) & 15u;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        if (((4294967295u << _2821) & _2703) == 0u)
        {
            _2917 = _2804;
            _2919 = _2806;
            _2921 = _2808;
            _2923 = _2810;
            _2925 = _2812;
            _2927 = _2814;
        }
        else
        {
            float _2942 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
            float _2943 = _2942 * _2657;
            float _2944 = _2942 * _2658;
            float _2945 = _2942 * _2659;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2821 < ((_2819 >> 12u) & 15u))
            {
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _3056 = _2804;
                float _3057 = _2806;
                float _3058 = _2808;
                float _3059 = _2810;
                float _3060 = _2812;
                float _3061 = _2814;
                uint _3062 = _2821;
                uint _3071;
                bool _3072;
                for (;;)
                {
                    _3071 = texelFetch(g_lightClassification, int((((_2697 << 5u) + (_2683 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                    _3072 = _3071 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3072)
                    {
                        frontier_phi_67_pred = _3059;
                        frontier_phi_67_pred_1 = _3060;
                        frontier_phi_67_pred_2 = _3061;
                        frontier_phi_67_pred_3 = _3058;
                        frontier_phi_67_pred_4 = _3057;
                        frontier_phi_67_pred_5 = _3056;
                    }
                    else
                    {
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3269 = _3056;
                        float _3270 = _3057;
                        float _3271 = _3058;
                        float _3272 = _3059;
                        float _3273 = _3060;
                        float _3274 = _3061;
                        uint _3275 = _3071;
                        uint _3276;
                        vec4 _3301;
                        float _3302;
                        vec4 _3317;
                        vec3 _3329;
                        vec4 _3344;
                        vec4 _3359;
                        float _3406;
                        bool _3407;
                        for (;;)
                        {
                            uint _3286 = ((_3062 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3275));
                            _3276 = (_3275 + 4294967295u) & _3275;
                            uint _3288 = _3286 * 40u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            _3302 = _3301.w;
                            uint _3304 = (_3286 * 40u) + 4u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3319 = (_3286 * 40u) + 8u;
                            _3329 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x));
                            uint _3331 = (_3286 * 40u) + 16u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3346 = (_3286 * 40u) + 20u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            uint _3362 = (_3286 * 40u) + 24u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3381 = (_3286 * 40u) + 28u;
                            vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            _3406 = fma(_2659, _3394.z, fma(_2658, _3394.y, _3394.x * _2657)) + _3394.w;
                            _3407 = !((fma(_2659, _3375.z, fma(_2658, _3375.y, _3375.x * _2657)) + _3375.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3407)
                            {
                                float _3434 = _3301.x - _2657;
                                float _3435 = _3301.y - _2658;
                                float _3436 = _3301.z - _2659;
                                float _3437 = dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436));
                                float _3440 = inversesqrt(_3437);
                                float _3441 = _3440 * _3434;
                                float _3442 = _3440 * _3435;
                                float _3443 = _3440 * _3436;
                                float _3447 = 1.0 - (_3437 / (_3302 * _3302));
                                float _4527 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3452 = sqrt(_3437) * _3317.w;
                                float _3454 = 1.39999997615814208984375 / (_3452 + 1.39999997615814208984375);
                                float _3455 = _3454 * _3454;
                                float _3458 = ((1.0 - _3455) * dot(vec3(_3441, _3442, _3443), vec3(_898, _901, _904))) + _3455;
                                float _3461 = _3452 * _3452;
                                float _3465 = (fma(_2659, _3344.z, fma(_2658, _3344.y, _3344.x * _2657)) + _3344.w) / _3406;
                                float _3466 = (fma(_2659, _3359.z, fma(_2658, _3359.y, _3359.x * _2657)) + _3359.w) / _3406;
                                float _3470 = 1.0 - dot(vec2(_3465, _3466), vec2(_3465, _3466));
                                float _4543 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3471 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3472 = _3471 * (((isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0))) * _3448) / ((_3461 * 0.699999988079071044921875) + 1.0));
                                float _3484 = exp2(log2(1.0 / ((_3461 * 3.5) + 5.0)) * 0.25);
                                float _3485 = 1.0 - _973;
                                float _3492 = sqrt(1.0 - ((1.0 - (_3485 * _3485)) * (1.0 - (_3484 * _3484))));
                                float _3493 = _3492 * _3492;
                                float _3494 = _3493 * _3493;
                                float _3495 = _3441 - _2943;
                                float _3496 = _3442 - _2944;
                                float _3497 = _3443 - _2945;
                                float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                                float _3505 = dot(vec3(_898, _901, _904), vec3((-0.0) - _2943, (-0.0) - _2944, (-0.0) - _2945));
                                float _4554 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3508 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3509 = dot(vec3(_898, _901, _904), vec3(_3501 * _3495, _3501 * _3496, _3501 * _3497));
                                float _4565 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3512 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3516 = ((_3512 * _3512) * (_3494 + (-1.0))) + 1.0;
                                float _3517 = _3454 * _3493;
                                float _3518 = _3517 * _3517;
                                float _3524 = ((1.0 - _3518) * dot(vec3(_898, _901, _904), vec3(_3441, _3442, _3443))) + _3518;
                                float _4576 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3526 = 1.0 - _3493;
                                float _3536 = (0.5 / (((_3525 * ((_3508 * _3526) + _3493)) + 9.9999999392252902907785028219223e-09) + (((_3525 * _3526) + _3493) * _3508))) * _3525;
                                float _4587 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3546 = (_3471 * _3448) * (((_3494 * 3.1415927410125732421875) * (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) / ((_3516 * _3516) * ((_3461 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3546 * _3329.x;
                                frontier_phi_73_pred_1 = _3546 * _3329.y;
                                frontier_phi_73_pred_2 = _3472 * _3317.z;
                                frontier_phi_73_pred_3 = _3472 * _3317.y;
                                frontier_phi_73_pred_4 = _3472 * _3317.x;
                                frontier_phi_73_pred_5 = _3546 * _3329.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3550 = frontier_phi_73_pred;
                            _3551 = frontier_phi_73_pred_1;
                            _3555 = frontier_phi_73_pred_2;
                            _3554 = frontier_phi_73_pred_3;
                            _3553 = frontier_phi_73_pred_4;
                            _3552 = frontier_phi_73_pred_5;
                            _3259 = _3553 + _3272;
                            _3260 = _3554 + _3273;
                            _3261 = _3555 + _3274;
                            _3256 = _3550 + _3269;
                            _3257 = _3551 + _3270;
                            _3258 = _3552 + _3271;
                            if (_3276 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3276;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3259;
                        frontier_phi_67_pred_1 = _3260;
                        frontier_phi_67_pred_2 = _3261;
                        frontier_phi_67_pred_3 = _3258;
                        frontier_phi_67_pred_4 = _3257;
                        frontier_phi_67_pred_5 = _3256;
                    }
                    _2924 = frontier_phi_67_pred;
                    _2926 = frontier_phi_67_pred_1;
                    _2928 = frontier_phi_67_pred_2;
                    _2922 = frontier_phi_67_pred_3;
                    _2920 = frontier_phi_67_pred_4;
                    _2918 = frontier_phi_67_pred_5;
                    uint _3063 = _3062 + 1u;
                    if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3056 = _2918;
                        _3057 = _2920;
                        _3058 = _2922;
                        _3059 = _2924;
                        _3060 = _2926;
                        _3061 = _2928;
                        _3062 = _3063;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2926;
                frontier_phi_55_56_ladder_1 = _2928;
                frontier_phi_55_56_ladder_2 = _2924;
                frontier_phi_55_56_ladder_3 = _2922;
                frontier_phi_55_56_ladder_4 = _2920;
                frontier_phi_55_56_ladder_5 = _2918;
            }
            else
            {
                frontier_phi_55_56_ladder = _2812;
                frontier_phi_55_56_ladder_1 = _2814;
                frontier_phi_55_56_ladder_2 = _2810;
                frontier_phi_55_56_ladder_3 = _2808;
                frontier_phi_55_56_ladder_4 = _2806;
                frontier_phi_55_56_ladder_5 = _2804;
            }
            _2917 = frontier_phi_55_56_ladder_5;
            _2919 = frontier_phi_55_56_ladder_4;
            _2921 = frontier_phi_55_56_ladder_3;
            _2923 = frontier_phi_55_56_ladder_2;
            _2925 = frontier_phi_55_56_ladder;
            _2927 = frontier_phi_55_56_ladder_1;
        }
        float _2932 = isnan(1.0) ? _957 : (isnan(_957) ? 1.0 : min(_957, 1.0));
        _2716 = (_2932 * _2923) + _2149;
        _2718 = (_2932 * _2925) + _2151;
        _2720 = (_2932 * _2927) + _2153;
        _2722 = ((_2917 * _942) * _2932) + _2497;
        _2724 = ((_2919 * _944) * _2932) + _2499;
        _2726 = ((_2921 * _945) * _2932) + _2501;
    }
    else
    {
        _2716 = _2149;
        _2718 = _2151;
        _2720 = _2153;
        _2722 = _2497;
        _2724 = _2499;
        _2726 = _2501;
    }
    float _4603 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4614 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4625 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    uint _2746 = _917 + 6u;
    float _2754 = _879 / cbSceneParam._m0[86u].x;
    float _2755 = _880 / cbSceneParam._m0[86u].y;
    vec4 _2769 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2754, _2755, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2771 = _2769.x;
    float _2772 = _2769.y;
    float _2773 = _2769.z;
    float _2774 = _2769.w;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _2829 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _2830 = _2829 / _814;
        float _2841 = _2830 * _864;
        float _2842 = _865 * _2830;
        float _2843 = (-0.0) - _2842;
        float _2845 = _2830 * _866;
        float _2847 = (cbSceneParam._m0[77u].w * _2843) / _2829;
        float _2848 = _2847 + cbSceneParam._m0[79u].w;
        float _2849 = cbSceneParam._m0[79u].w - _2842;
        float _2855 = sqrt(((_2841 * _2841) + (_2842 * _2842)) + (_2845 * _2845));
        float _2858 = (1.0 - (cbSceneParam._m0[77u].w / _2829)) * _2855;
        float _2863 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2865 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3018;
        if (abs((_2843 - _2847) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3018 = ((((_2848 > 0.0) ? exp2(_2863 * _2848) : (2.0 - exp2(_2865 * _2848))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2858;
        }
        else
        {
            float _2978 = 1.0 / cbSceneParam._m0[80u].x;
            float _2979 = isnan(_2849) ? _2848 : (isnan(_2848) ? _2849 : max(_2848, _2849));
            float _2980 = isnan(_2849) ? _2848 : (isnan(_2848) ? _2849 : min(_2848, _2849));
            float _2989 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : min(_2979, 0.0));
            float _2990 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : min(_2980, 0.0));
            _3018 = ((abs(_2855 / _2843) * cbSceneParam._m0[80u].y) * ((((_2989 - _2990) * 2.0) - ((exp2(_2863 * (isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0)))) - exp2(_2863 * (isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))))) * _2978)) - ((exp2(_2865 * _2989) - exp2(_2865 * _2990)) * _2978))) + (_2858 * cbSceneParam._m0[80u].z);
        }
        vec4 _3020 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2754, _2755, 1.0), 0.0);
        float _3029 = exp2((_3018 * (-1.44269502162933349609375)) * (1.0 - _3020.w));
        float _3030 = log2(_3029);
        float _3046 = log2(_2774);
        _2867 = (exp2(_3046 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3030 * cbSceneParam._m0[78u].x)) * _3020.x) / cbSceneParam._m0[78u].x)) + _2771;
        _2869 = (exp2(_3046 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3030 * cbSceneParam._m0[78u].y)) * _3020.y) / cbSceneParam._m0[78u].y)) + _2772;
        _2871 = (exp2(_3046 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3030 * cbSceneParam._m0[78u].z)) * _3020.z) / cbSceneParam._m0[78u].z)) + _2773;
        _2873 = _3029 * _2774;
    }
    else
    {
        _2867 = _2771;
        _2869 = _2772;
        _2871 = _2773;
        _2873 = _2774;
    }
    float _2885 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2886 = _2885 == 3.0;
    float _2887 = log2(_2873);
    float _2894 = exp2(_2887 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2716 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _957))) + ((_2722 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1767)) * cbPerFrame._m0[3u].x));
    float _2895 = exp2(_2887 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2718 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _957))) + ((_2724 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1767)) * cbPerFrame._m0[3u].x));
    float _2896 = exp2(_2887 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2720 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _957))) + ((_2726 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1767)) * cbPerFrame._m0[3u].x));
    float _2905 = (_2885 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2905 * (_2886 ? _2894 : (_2894 + (cbSceneParam._m0[72u].w * _2867)));
    SV_Target.y = _2905 * (_2886 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2869)));
    SV_Target.z = _2905 * (_2886 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2871)));
    SV_Target.w = cbInstanceData._m0[_2746].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2746].w;
}


