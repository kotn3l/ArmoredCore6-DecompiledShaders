#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1429;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _270 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _270.x * cbMtdParam._m0[10u].x;
    float _277 = _270.y * cbMtdParam._m0[10u].y;
    float _278 = _270.z * cbMtdParam._m0[10u].z;
    vec4 _296 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _346 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _356 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _346)) + 1.0;
    float _3781 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _357 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _364 = (_357 * ((_296.x * cbMtdParam._m0[11u].x) - _276)) + _276;
    float _365 = (_357 * ((_296.y * cbMtdParam._m0[11u].y) - _277)) + _277;
    float _366 = (_357 * ((_296.z * cbMtdParam._m0[11u].z) - _278)) + _278;
    vec4 _384 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _415 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _346)) + 1.0;
    float _3792 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _423 = (_416 * ((_384.x * cbMtdParam._m0[12u].x) - _364)) + _364;
    float _424 = (_416 * ((_384.y * cbMtdParam._m0[12u].y) - _365)) + _365;
    float _425 = (_416 * ((_384.z * cbMtdParam._m0[12u].z) - _366)) + _366;
    vec4 _443 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _468 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _346)) + 1.0;
    float _3803 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _476 = (_469 * ((_443.x * cbMtdParam._m0[13u].x) - _423)) + _423;
    float _477 = (_469 * ((_443.y * cbMtdParam._m0[13u].y) - _424)) + _424;
    float _478 = (_469 * ((_443.z * cbMtdParam._m0[13u].z) - _425)) + _425;
    vec4 _498 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _527 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3814 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _535 = (_528 * ((_498.x * cbMtdParam._m0[14u].x) - _476)) + _476;
    float _536 = (_528 * ((_498.y * cbMtdParam._m0[14u].y) - _477)) + _477;
    float _537 = (_528 * ((_498.z * cbMtdParam._m0[14u].z) - _478)) + _478;
    vec4 _557 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _585 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _3825 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _593 = (_586 * ((_557.x * cbMtdParam._m0[15u].x) - _535)) + _535;
    float _594 = (_586 * ((_557.y * cbMtdParam._m0[15u].y) - _536)) + _536;
    float _595 = (_586 * ((_557.z * cbMtdParam._m0[15u].z) - _537)) + _537;
    vec4 _608 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _610 = _608.x;
    float _628 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _610) * _357) + _610;
    float _646 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _628) * _416) + _628;
    float _663 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _646) * _469) + _646;
    float _665 = _663 - (_663 * TEXCOORD_5.x);
    vec4 _681 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _703 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _705 = _703.x;
    float _706 = _703.y;
    float _709 = cbMtdParam._m0[18u].y * _703.z;
    vec4 _721 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _730 = (((cbMtdParam._m0[18u].x * _721.z) - _709) * _357) + _709;
    vec4 _743 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _754 = (((cbMtdParam._m0[17u].w * _743.z) - _730) * _416) + _730;
    vec4 _767 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _776 = (((cbMtdParam._m0[17u].z * _767.z) - _754) * _469) + _754;
    float _781 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_681.z * cbMtdParam._m0[18u].z) - _776)) + _776;
    vec4 _794 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _808 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_794.z * cbMtdParam._m0[19u].y) - _781)) + _781;
    vec4 _821 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _833 = ((_721.x - _705) * _357) + _705;
    float _834 = ((_721.y - _706) * _357) + _706;
    float _839 = ((_743.x - _833) * _416) + _833;
    float _840 = ((_743.y - _834) * _416) + _834;
    float _849 = ((((_767.x - _839) * _469) + _839) * 2.0) + (-1.0);
    float _850 = ((((_767.y - _840) * _469) + _840) * 2.0) + (-1.0);
    float _851 = dot(vec2(_849, _850), vec2(_849, _850));
    float _3836 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _856 = sqrt(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))));
    float _873 = (((((_821.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _849) + ((((_681.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y)) + ((((_794.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _874 = (((((_821.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _850) + ((((_681.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y)) + ((((_794.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _877 = fma(_856, _240 * NORMAL.x, fma(_874, _247 * TANGENT.x, (_233 * _225) * _873));
    float _880 = fma(_856, _240 * NORMAL.y, fma(_874, _247 * TANGENT.y, (_233 * _226) * _873));
    float _883 = fma(_856, _240 * NORMAL.z, fma(_874, _247 * TANGENT.z, (_233 * _227) * _873));
    float _887 = inversesqrt(dot(vec3(_877, _880, _883), vec3(_877, _880, _883)));
    float _888 = _887 * _877;
    float _889 = _887 * _880;
    float _890 = _887 * _883;
    float _3847 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _891 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3869 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3880 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3891 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _895 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _911 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _961 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _951);
    float _962 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _951);
    float _963 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _951);
    float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
    float _968 = _961 * _967;
    float _969 = _962 * _967;
    float _970 = _963 * _967;
    float _976 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _977 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _995 = fma(_890, cbSceneParam._m0[5u].z, fma(_889, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _888));
    float _998 = fma(_890, cbSceneParam._m0[6u].z, fma(_889, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _888));
    float _1001 = fma(_890, cbSceneParam._m0[7u].z, fma(_889, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _888));
    uint _1014 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1016 = (_1014 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1022 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * cbInstanceData._m0[_1016].x;
    float _1023 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * cbInstanceData._m0[_1016].y;
    float _1024 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * cbInstanceData._m0[_1016].z;
    float _3902 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1026 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1027 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _1028 = 1.0 - _895;
    float _1029 = _1025 * _1028;
    float _1030 = _1026 * _1028;
    float _1031 = _1027 * _1028;
    float _1036 = (_1025 + (-0.039999999105930328369140625)) * _895;
    float _1037 = (_1026 + (-0.039999999105930328369140625)) * _895;
    float _1038 = (_1027 + (-0.039999999105930328369140625)) * _895;
    float _1039 = _1036 + 0.039999999105930328369140625;
    float _1041 = _1037 + 0.039999999105930328369140625;
    float _1042 = _1038 + 0.039999999105930328369140625;
    vec4 _1051 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _976, cbSceneParam._m0[86u].y * _977));
    float _1054 = _1051.x * TEXCOORD_5.w;
    float _1055 = dot(vec3(_888, _889, _890), vec3(_968, _969, _970));
    float _1058 = _1055 * 2.0;
    float _1062 = (_1058 * _888) - _968;
    float _1063 = (_1058 * _889) - _969;
    float _1064 = (_1058 * _890) - _970;
    float _1068 = abs(dot(vec3(_968, _969, _970), vec3(_888, _889, _890)));
    float _3935 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1070 = sqrt(_891);
    float _1083 = exp2((_1070 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1070 * 3.0));
    float _1089 = (1.0 - _1083) * ((_1070 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1090 = _1083 * _1070;
    float _1118 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1428;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1153 = fma(_1126, cbModelParam._m0[26u].z, fma(_1122, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1118));
        float _1157 = fma(_1126, cbModelParam._m0[27u].z, fma(_1122, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1118));
        float _1161 = fma(_1126, cbModelParam._m0[28u].z, fma(_1122, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1118));
        float _1186 = _1118 + _888;
        float _1187 = _1122 + _889;
        float _1188 = _1126 + _890;
        float _1198 = fma(_1188, cbModelParam._m0[26u].z, fma(_1187, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1186)) - _1153;
        float _1199 = fma(_1188, cbModelParam._m0[27u].z, fma(_1187, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1186)) - _1157;
        float _1200 = fma(_1188, cbModelParam._m0[28u].z, fma(_1187, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1186)) - _1161;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1217 = ((_1204 * _1198) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1153 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1199) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1157 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1204 * _1200) / cbModelParam._m0[34u].z) + ((((((_1161 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        float _1256 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1222.x + (-0.5));
        float _1258 = _1256 * (_1222.y + (-0.5));
        float _1259 = _1256 * (_1222.z + (-0.5));
        float _1266 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1229.x + (-0.5));
        float _1268 = _1266 * (_1229.y + (-0.5));
        float _1269 = _1266 * (_1229.z + (-0.5));
        float _1276 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1236.x + (-0.5));
        float _1278 = _1276 * (_1236.y + (-0.5));
        float _1279 = _1276 * (_1236.z + (-0.5));
        float _1286 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1243.x + (-0.5));
        float _1288 = _1286 * (_1243.y + (-0.5));
        float _1289 = _1286 * (_1243.z + (-0.5));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = _1257 * 0.5;
        float _1294 = _1267 * 0.5;
        float _1295 = _1277 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1310 = (dot(vec3(_888, _889, _890), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1320 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3983 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1322 + 1.0))) + _1327) * _1290;
        float _1337 = _1258 * 0.5;
        float _1338 = _1268 * 0.5;
        float _1339 = _1278 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_888, _889, _890), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4016 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1364 + 1.0))) + _1369) * _1291;
        float _1379 = _1259 * 0.5;
        float _1380 = _1269 * 0.5;
        float _1381 = _1279 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_888, _889, _890), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4049 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1406 + 1.0))) + _1411) * _1292;
        _1428 = _1259;
        _1430 = _1258;
        _1431 = _1257;
        _1432 = _1269;
        _1433 = _1268;
        _1434 = _1267;
        _1435 = _1279;
        _1436 = _1278;
        _1437 = _1277;
        _1438 = _1292;
        _1439 = _1291;
        _1440 = _1290;
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
    }
    else
    {
        _1428 = _1429;
        _1430 = _1429;
        _1431 = _1429;
        _1432 = _1429;
        _1433 = _1429;
        _1434 = _1429;
        _1435 = _1429;
        _1436 = _1429;
        _1437 = _1429;
        _1438 = _1429;
        _1439 = _1429;
        _1440 = _1429;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1469 = fma(_1126, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118));
        float _1473 = fma(_1126, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118));
        float _1477 = fma(_1126, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118));
        float _1500 = _1118 + _888;
        float _1501 = _1122 + _889;
        float _1502 = _1126 + _890;
        float _1512 = fma(_1502, cbModelParam._m0[30u].z, fma(_1501, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1500)) - _1469;
        float _1513 = fma(_1502, cbModelParam._m0[31u].z, fma(_1501, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1500)) - _1473;
        float _1514 = fma(_1502, cbModelParam._m0[32u].z, fma(_1501, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1500)) - _1477;
        float _1518 = inversesqrt(dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514)));
        float _1531 = ((_1518 * _1512) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1469 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1532 = ((_1518 * _1513) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1473 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1518 * _1514) / cbModelParam._m0[35u].z) + ((((((_1477 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        float _1568 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1535.x + (-0.5));
        float _1570 = _1568 * (_1535.y + (-0.5));
        float _1571 = _1568 * (_1535.z + (-0.5));
        float _1578 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1542.x + (-0.5));
        float _1580 = _1578 * (_1542.y + (-0.5));
        float _1581 = _1578 * (_1542.z + (-0.5));
        float _1588 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1549.x + (-0.5));
        float _1590 = _1588 * (_1549.y + (-0.5));
        float _1591 = _1588 * (_1549.z + (-0.5));
        float _1598 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1556.x + (-0.5));
        float _1600 = _1598 * (_1556.y + (-0.5));
        float _1601 = _1598 * (_1556.z + (-0.5));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = _1569 * 0.5;
        float _1606 = _1579 * 0.5;
        float _1607 = _1589 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_888, _889, _890), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4112 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1632 + 1.0))) + _1637) * _1602;
        float _1647 = _1570 * 0.5;
        float _1648 = _1580 * 0.5;
        float _1649 = _1590 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_888, _889, _890), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4145 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1674 + 1.0))) + _1679) * _1603;
        float _1689 = _1571 * 0.5;
        float _1690 = _1581 * 0.5;
        float _1691 = _1591 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_888, _889, _890), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4178 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1716 + 1.0))) + _1721) * _1604;
        _1738 = _1571;
        _1739 = _1570;
        _1740 = _1569;
        _1741 = _1581;
        _1742 = _1580;
        _1743 = _1579;
        _1744 = _1591;
        _1745 = _1590;
        _1746 = _1589;
        _1747 = _1604;
        _1748 = _1603;
        _1749 = _1602;
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
    }
    else
    {
        _1738 = _1429;
        _1739 = _1429;
        _1740 = _1429;
        _1741 = _1429;
        _1742 = _1429;
        _1743 = _1429;
        _1744 = _1429;
        _1745 = _1429;
        _1746 = _1429;
        _1747 = _1429;
        _1748 = _1429;
        _1749 = _1429;
        _1750 = 0.0;
        _1751 = 0.0;
        _1752 = 0.0;
    }
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1441)) + _1441;
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1442)) + _1442;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1443)) + _1443;
    float _1785 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1763, cbSceneParam._m0[89u].y, _1762 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1763, cbSceneParam._m0[90u].y, _1762 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1763, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1762));
    float _1806 = _1062 * 0.5;
    float _1807 = _1063 * 0.5;
    float _1808 = _1064 * 0.5;
    float _1809 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1812 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1815 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1849;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1822 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1428, _1432, _1435, _1438));
        float _1826 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1430, _1433, _1436, _1439));
        float _1830 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1431, _1434, _1437, _1440));
        float _1837 = dot(vec4(cbModelParam._m0[39u]), vec4(_1806, _1807, _1808, 1.0));
        _1849 = dot(vec3(isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1837) ? 0.0 : (isnan(0.0) ? _1837 : max(0.0, _1837))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1849 = 1.0;
    }
    float _1860;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1851 = dot(vec4(cbModelParam._m0[40u]), vec4(_1806, _1807, _1808, 1.0));
        _1860 = dot(vec3(isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1851) ? 0.0 : (isnan(0.0) ? _1851 : max(0.0, _1851))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1860 = 1.0;
    }
    float _1864 = (_1860 * cbModelParam._m0[1u].x) + (_1849 * (1.0 - cbModelParam._m0[1u].x));
    float _1874 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _891);
    float _1875 = isnan(_1874) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1874 : min(cbModelParam._m0[25u].z, _1874));
    float _1955;
    float _1957;
    float _1959;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1922 = fma(_1126, cbModelParam._m0[13u].z, fma(_1122, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1118)) + cbModelParam._m0[13u].w;
        float _1926 = fma(_1126, cbModelParam._m0[14u].z, fma(_1122, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1118)) + cbModelParam._m0[14u].w;
        float _1930 = fma(_1126, cbModelParam._m0[15u].z, fma(_1122, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1118)) + cbModelParam._m0[15u].w;
        float _1933 = fma(_1064, cbModelParam._m0[13u].z, fma(_1063, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1062));
        float _1936 = fma(_1064, cbModelParam._m0[14u].z, fma(_1063, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1062));
        float _1939 = fma(_1064, cbModelParam._m0[15u].z, fma(_1063, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1062));
        float _1967;
        if (_1933 > 0.0)
        {
            _1967 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1967 = frontier_phi_14_12_ladder;
        }
        float _2191;
        if (_1936 > 0.0)
        {
            _2191 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2191 = frontier_phi_23_19_ladder;
        }
        float _2448;
        if (_1939 > 0.0)
        {
            _2448 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2448 = frontier_phi_35_30_ladder;
        }
        float _2450 = isnan(_2191) ? _1967 : (isnan(_1967) ? _2191 : min(_1967, _2191));
        float _2451 = isnan(_2448) ? _2450 : (isnan(_2450) ? _2448 : min(_2450, _2448));
        float _2455 = (_2451 * _1933) + _1922;
        float _2456 = (_2451 * _1936) + _1926;
        float _2457 = (_2451 * _1939) + _1930;
        float _2458 = _2451 * 9.9999997473787516355514526367188e-05;
        float _2460 = (-1.0) - _2458;
        float _2462 = _2458 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2457 > _2462) || ((_2457 < _2460) || ((_2456 > _2462) || ((_2456 < _2460) || ((_2455 < _2460) || (_2455 > _2462))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2585 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2457, cbModelParam._m0[9u].z, fma(_2456, cbModelParam._m0[9u].y, _2455 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2457, cbModelParam._m0[10u].z, fma(_2456, cbModelParam._m0[10u].y, _2455 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2457, cbModelParam._m0[11u].z, fma(_2456, cbModelParam._m0[11u].y, _2455 * cbModelParam._m0[11u].x))), _1875);
            frontier_phi_13_35_ladder = _2585.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2585.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2585.x * cbModelParam._m0[1u].y;
        }
        _1955 = frontier_phi_13_35_ladder_2;
        _1957 = frontier_phi_13_35_ladder_1;
        _1959 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1943 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1062, _1063, _1064), _1875);
        _1955 = _1943.x * cbModelParam._m0[1u].y;
        _1957 = _1943.y * cbModelParam._m0[1u].y;
        _1959 = _1943.z * cbModelParam._m0[1u].y;
    }
    float _1963 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _891);
    float _1964 = isnan(_1963) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1963 : min(cbModelParam._m0[25u].w, _1963));
    float _2053;
    float _2055;
    float _2057;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2017 = fma(_1126, cbModelParam._m0[21u].z, fma(_1122, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1118)) + cbModelParam._m0[21u].w;
        float _2021 = fma(_1126, cbModelParam._m0[22u].z, fma(_1122, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1118)) + cbModelParam._m0[22u].w;
        float _2025 = fma(_1126, cbModelParam._m0[23u].z, fma(_1122, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1118)) + cbModelParam._m0[23u].w;
        float _2028 = fma(_1064, cbModelParam._m0[21u].z, fma(_1063, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1062));
        float _2031 = fma(_1064, cbModelParam._m0[22u].z, fma(_1063, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1062));
        float _2034 = fma(_1064, cbModelParam._m0[23u].z, fma(_1063, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1062));
        float _2196;
        if (_2028 > 0.0)
        {
            _2196 = abs((1.0 - _2017) / _2028);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2017 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2196 = frontier_phi_25_21_ladder;
        }
        float _2475;
        if (_2031 > 0.0)
        {
            _2475 = abs((1.0 - _2021) / _2031);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2021 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2475 = frontier_phi_37_32_ladder;
        }
        float _2688;
        if (_2034 > 0.0)
        {
            _2688 = abs((1.0 - _2025) / _2034);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2025 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2688 = frontier_phi_46_43_ladder;
        }
        float _2690 = isnan(_2475) ? _2196 : (isnan(_2196) ? _2475 : min(_2196, _2475));
        float _2691 = isnan(_2688) ? _2690 : (isnan(_2690) ? _2688 : min(_2690, _2688));
        float _2695 = (_2691 * _2028) + _2017;
        float _2696 = (_2691 * _2031) + _2021;
        float _2697 = (_2691 * _2034) + _2025;
        float _2698 = _2691 * 9.9999997473787516355514526367188e-05;
        float _2699 = (-1.0) - _2698;
        float _2701 = _2698 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2697 > _2701) || ((_2697 < _2699) || ((_2696 > _2701) || ((_2696 < _2699) || ((_2695 < _2699) || (_2695 > _2701))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2697, cbModelParam._m0[17u].z, fma(_2696, cbModelParam._m0[17u].y, _2695 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2697, cbModelParam._m0[18u].z, fma(_2696, cbModelParam._m0[18u].y, _2695 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2697, cbModelParam._m0[19u].z, fma(_2696, cbModelParam._m0[19u].y, _2695 * cbModelParam._m0[19u].x))), _1964);
            frontier_phi_22_46_ladder = _2896.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2896.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2896.x * cbModelParam._m0[1u].z;
        }
        _2053 = frontier_phi_22_46_ladder_2;
        _2055 = frontier_phi_22_46_ladder_1;
        _2057 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2037 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1062, _1063, _1064), _1964);
        _2053 = _2037.x * cbModelParam._m0[1u].z;
        _2055 = _2037.y * cbModelParam._m0[1u].z;
        _2057 = _2037.z * cbModelParam._m0[1u].z;
    }
    float _2070 = (((_1089 * _1039) + _1090) * _1054) * ((cbModelParam._m0[1u].w * (_2053 - _1955)) + _1955);
    float _2072 = (((_1089 * _1041) + _1090) * _1054) * ((cbModelParam._m0[1u].w * (_2055 - _1957)) + _1957);
    float _2074 = (((_1089 * _1042) + _1090) * _1054) * ((cbModelParam._m0[1u].w * (_2057 - _1959)) + _1959);
    float _2077 = fma(_2074, cbSceneParam._m0[89u].z, fma(_2072, cbSceneParam._m0[89u].y, _2070 * cbSceneParam._m0[89u].x));
    float _2080 = fma(_2074, cbSceneParam._m0[90u].z, fma(_2072, cbSceneParam._m0[90u].y, _2070 * cbSceneParam._m0[90u].x));
    float _2083 = fma(_2074, cbSceneParam._m0[91u].z, fma(_2072, cbSceneParam._m0[91u].y, _2070 * cbSceneParam._m0[91u].x));
    vec4 _2091 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_976, _977));
    float _2093 = _2091.w;
    float _2105 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2093);
    float _2106 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2093);
    float _2107 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2093);
    uvec4 _2111 = floatBitsToUint(cbInstanceData._m0[_1014 + 5u]);
    uint _2113 = _2111.x * 14u;
    uint _2114 = _2113 + 13u;
    float _2121 = _1054 + (-1.0);
    float _2126 = (cbLight._m0[_2114].x * _2121) + 1.0;
    float _2127 = (cbLight._m0[_2114].y * _2121) + 1.0;
    float _2128 = (cbLight._m0[_2114].z * _2121) + 1.0;
    float _2129 = (cbLight._m0[_2114].w * _2121) + 1.0;
    uint _2130 = _2113 + 5u;
    float _2136 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2140 = _2113 + 4u;
    float _2150 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2154 = _2113 | 1u;
    float _2165 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_888, _889, _890));
    float _2168 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_888, _889, _890));
    float _4314 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _4325 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2173 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * 0.3183098733425140380859375;
    float _2175 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * 0.3183098733425140380859375;
    float _2182 = ((cbLight._m0[_2130].x * _2136) * _2175) + (((cbLight._m0[_2140].x * _2105) * _2150) * _2173);
    float _2183 = ((_2136 * cbLight._m0[_2130].y) * _2175) + (((cbLight._m0[_2140].y * _2106) * _2150) * _2173);
    float _2184 = ((_2136 * cbLight._m0[_2130].z) * _2175) + (((cbLight._m0[_2140].z * _2107) * _2150) * _2173);
    uvec4 _2188 = floatBitsToUint(cbLight._m0[_2113 + 12u]);
    bool _2190 = _2188.x == 0u;
    float _2201;
    float _2203;
    float _2205;
    if (_2190)
    {
        _2201 = _2182;
        _2203 = _2183;
        _2205 = _2184;
    }
    else
    {
        uint _2209 = _2113 + 6u;
        float _2225 = (dot(vec3(cbLight._m0[_2113 + 2u].xyz), vec3(_888, _889, _890)) * 0.5) + 0.5;
        float _2226 = _2225 * _2225;
        float _4336 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2227 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2228 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2201 = (((cbLight._m0[_2209].x * 0.3183098733425140380859375) * _2227) * _2228) + _2182;
        _2203 = (((cbLight._m0[_2209].y * 0.3183098733425140380859375) * _2227) * _2228) + _2183;
        _2205 = (((cbLight._m0[_2209].z * 0.3183098733425140380859375) * _2227) * _2228) + _2184;
    }
    bool _2208 = _2188.y == 0u;
    float _2246;
    float _2248;
    float _2250;
    if (_2208)
    {
        _2246 = _2201;
        _2248 = _2203;
        _2250 = _2205;
    }
    else
    {
        uint _2419 = _2113 + 7u;
        float _2435 = (dot(vec3(cbLight._m0[_2113 + 3u].xyz), vec3(_888, _889, _890)) * 0.5) + 0.5;
        float _2436 = _2435 * _2435;
        float _4352 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2437 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2438 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2246 = (((cbLight._m0[_2419].x * 0.3183098733425140380859375) * _2437) * _2438) + _2201;
        _2248 = (((cbLight._m0[_2419].y * 0.3183098733425140380859375) * _2437) * _2438) + _2203;
        _2250 = (((cbLight._m0[_2419].z * 0.3183098733425140380859375) * _2437) * _2438) + _2205;
    }
    uint _2253 = _2113 + 8u;
    float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _891) * 0.949999988079071044921875);
    float _2267 = _2266 * _2266;
    float _2268 = cbLight._m0[_2113].x + _968;
    float _2269 = cbLight._m0[_2113].y + _969;
    float _2270 = cbLight._m0[_2113].z + _970;
    float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
    float _2275 = _2274 * _2268;
    float _2276 = _2274 * _2269;
    float _2277 = _2274 * _2270;
    float _2278 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2113].xyz));
    float _4368 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _4379 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _2282 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2283 = dot(vec3(_888, _889, _890), vec3(_2275, _2276, _2277));
    float _4390 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2287 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2275, _2276, _2277));
    float _4401 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2291 = _2267 * _2267;
    float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
    float _2303 = exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0);
    float _2304 = 0.959999978542327880859375 - _1036;
    float _2306 = 0.959999978542327880859375 - _1037;
    float _2307 = 0.959999978542327880859375 - _1038;
    float _2314 = 1.0 - _2267;
    float _2325 = (0.5 / (((_2282 * ((_2281 * _2314) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2314) + _2267) * _2281))) * _2281;
    float _4412 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2327 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
    uint _2341 = _2113 + 9u;
    float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _891) * 0.949999988079071044921875);
    float _2353 = _2352 * _2352;
    float _2354 = cbLight._m0[_2154].x + _968;
    float _2355 = cbLight._m0[_2154].y + _969;
    float _2356 = cbLight._m0[_2154].z + _970;
    float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
    float _2361 = _2360 * _2354;
    float _2362 = _2360 * _2355;
    float _2363 = _2360 * _2356;
    float _2364 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2154].xyz));
    float _4423 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2368 = dot(vec3(_888, _889, _890), vec3(_2361, _2362, _2363));
    float _4434 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2371 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2372 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2361, _2362, _2363));
    float _4445 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2376 = _2353 * _2353;
    float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
    float _2387 = exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0);
    float _2394 = 1.0 - _2353;
    float _2404 = (0.5 / (((_2282 * ((_2367 * _2394) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2394) + _2353) * _2367))) * _2367;
    float _4456 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2406 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
    float _2416 = (((((_2387 * _2304) + _1039) * cbLight._m0[_2341].x) * _2406) * _2136) + ((((cbLight._m0[_2253].x * _2105) * ((_2303 * _2304) + _1039)) * _2327) * _2150);
    float _2417 = (((((_2387 * _2306) + _1041) * cbLight._m0[_2341].y) * _2406) * _2136) + ((((cbLight._m0[_2253].y * _2106) * ((_2303 * _2306) + _1041)) * _2327) * _2150);
    float _2418 = (((((_2387 * _2307) + _1042) * cbLight._m0[_2341].z) * _2406) * _2136) + ((((cbLight._m0[_2253].z * _2107) * ((_2303 * _2307) + _1042)) * _2327) * _2150);
    float _2480;
    float _2482;
    float _2484;
    if (_2190)
    {
        _2480 = _2416;
        _2482 = _2417;
        _2484 = _2418;
    }
    else
    {
        uint _2486 = _2113 + 2u;
        uint _2490 = _2113 + 10u;
        float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2486].w)) * _891) * 0.949999988079071044921875);
        float _2505 = _2504 * _2504;
        float _2506 = cbLight._m0[_2486].x + _968;
        float _2507 = cbLight._m0[_2486].y + _969;
        float _2508 = cbLight._m0[_2486].z + _970;
        float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
        float _2513 = _2512 * _2506;
        float _2514 = _2512 * _2507;
        float _2515 = _2512 * _2508;
        float _2516 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2486].xyz));
        float _4467 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2520 = dot(vec3(_888, _889, _890), vec3(_2513, _2514, _2515));
        float _4478 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2524 = dot(vec3(cbLight._m0[_2486].xyz), vec3(_2513, _2514, _2515));
        float _4489 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2528 = _2505 * _2505;
        float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
        float _2539 = exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0);
        float _2546 = 1.0 - _2505;
        float _2556 = (0.5 / (((_2282 * ((_2519 * _2546) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2546) + _2505) * _2519))) * _2519;
        float _4500 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2558 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
        float _2559 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2480 = (((((_2539 * _2304) + _1039) * cbLight._m0[_2490].x) * _2558) * _2559) + _2416;
        _2482 = (((((_2539 * _2306) + _1041) * cbLight._m0[_2490].y) * _2558) * _2559) + _2417;
        _2484 = (((((_2539 * _2307) + _1042) * cbLight._m0[_2490].z) * _2558) * _2559) + _2418;
    }
    float _2594;
    float _2596;
    float _2598;
    if (_2208)
    {
        _2594 = _2480;
        _2596 = _2482;
        _2598 = _2484;
    }
    else
    {
        uint _2605 = _2113 + 3u;
        uint _2609 = _2113 + 11u;
        float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2605].w)) * _891) * 0.949999988079071044921875);
        float _2624 = _2623 * _2623;
        float _2625 = cbLight._m0[_2605].x + _968;
        float _2626 = cbLight._m0[_2605].y + _969;
        float _2627 = cbLight._m0[_2605].z + _970;
        float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
        float _2632 = _2631 * _2625;
        float _2633 = _2631 * _2626;
        float _2634 = _2631 * _2627;
        float _2635 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2605].xyz));
        float _4516 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2639 = dot(vec3(_888, _889, _890), vec3(_2632, _2633, _2634));
        float _4527 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2643 = dot(vec3(cbLight._m0[_2605].xyz), vec3(_2632, _2633, _2634));
        float _4538 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2647 = _2624 * _2624;
        float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
        float _2658 = exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0);
        float _2665 = 1.0 - _2624;
        float _2675 = (0.5 / (((_2282 * ((_2638 * _2665) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2665) + _2624) * _2638))) * _2638;
        float _4549 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2677 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
        float _2678 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2594 = (((((_2658 * _2304) + _1039) * cbLight._m0[_2609].x) * _2677) * _2678) + _2480;
        _2596 = (((((_2658 * _2306) + _1041) * cbLight._m0[_2609].y) * _2677) * _2678) + _2482;
        _2598 = (((((_2658 * _2307) + _1042) * cbLight._m0[_2609].z) * _2677) * _2678) + _2484;
    }
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    if (_2111.y == 0u)
    {
        float _2753 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2754 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2753;
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2753;
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2753;
        uvec4 _2768 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2769 = _2768.x;
        uint _2780 = uint((float(_2768.y) * floor(float(uint(cbSceneParam._m0[85u].y * _977) / _2769))) + floor(float(uint(cbSceneParam._m0[85u].x * _976) / _2769)));
        float _2790 = (log2(_2756 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2791 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        uint _2794 = uint(isnan(14.0) ? _2791 : (isnan(_2791) ? 14.0 : min(_2791, 14.0)));
        uvec4 _2799 = texelFetch(g_lightClusterGridBuffer, int(((_2794 << 2u) + (_2780 << 6u)) >> 2u));
        uint _2800 = _2799.x;
        uint _2801 = _2768.z;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        if (((((1u << ((_2801 >> 4u) & 15u)) + 4294967295u) & _2800) == 0u) || ((_2801 & 240u) == 0u))
        {
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
        }
        else
        {
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            uint _3052 = 0u;
            uint _3061;
            bool _3062;
            for (;;)
            {
                _3061 = texelFetch(g_lightClassification, int((((_2794 << 5u) + (_2780 << 9u)) + (_3052 << 2u)) >> 2u)).x;
                _3062 = _3061 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3062)
                {
                    frontier_phi_61_pred = _3046;
                    frontier_phi_61_pred_1 = _3051;
                    frontier_phi_61_pred_2 = _3050;
                    frontier_phi_61_pred_3 = _3049;
                    frontier_phi_61_pred_4 = _3048;
                    frontier_phi_61_pred_5 = _3047;
                }
                else
                {
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    uint _3176;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3050;
                    _3175 = _3051;
                    _3176 = _3061;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    for (;;)
                    {
                        uint _3180 = uint(findLSB(_3176)) + (_3052 << 5u);
                        uint _3177 = (_3176 + 4294967295u) & _3176;
                        uint _3182 = _3180 * 48u;
                        vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 3u)).x));
                        uint _3202 = (_3180 * 48u) + 4u;
                        vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 3u)).x));
                        uint _3221 = (_3180 * 48u) + 8u;
                        vec3 _3232 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x));
                        float _3236 = _3196.x - _2754;
                        float _3237 = _3196.y - _2755;
                        float _3238 = _3196.z - _2756;
                        float _3239 = dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238));
                        float _3242 = inversesqrt(_3239);
                        float _3243 = _3242 * _3236;
                        float _3244 = _3242 * _3237;
                        float _3245 = _3242 * _3238;
                        float _3246 = dot(vec3(_995, _998, _1001), vec3(_3243, _3244, _3245));
                        float _3251 = 1.0 - (_3239 * _3196.w);
                        float _4575 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3252 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3253 = sqrt(_3239) * _3215.w;
                        float _3256 = 1.39999997615814208984375 / (_3253 + 1.39999997615814208984375);
                        float _3257 = _3256 * _3256;
                        float _3260 = ((1.0 - _3257) * _3246) + _3257;
                        float _3263 = _3253 * _3253;
                        float _3267 = ((isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0))) * _3252) / ((_3263 * 0.699999988079071044921875) + 1.0);
                        float _3271 = (-0.0) - _2754;
                        float _3272 = (-0.0) - _2755;
                        float _3273 = (-0.0) - _2756;
                        float _3277 = inversesqrt(dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273)));
                        float _3278 = _3277 * _3271;
                        float _3279 = _3277 * _3272;
                        float _3280 = _3277 * _3273;
                        float _3288 = exp2(log2(1.0 / ((_3263 * 3.5) + 5.0)) * 0.25);
                        float _3289 = 1.0 - _1070;
                        float _3296 = sqrt(1.0 - ((1.0 - (_3289 * _3289)) * (1.0 - (_3288 * _3288))));
                        float _3297 = _3296 * _3296;
                        float _3298 = _3297 * _3297;
                        float _3299 = _3278 + _3243;
                        float _3300 = _3279 + _3244;
                        float _3301 = _3280 + _3245;
                        float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                        float _3309 = dot(vec3(_995, _998, _1001), vec3(_3278, _3279, _3280));
                        float _4591 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                        float _3313 = dot(vec3(_995, _998, _1001), vec3(_3305 * _3299, _3305 * _3300, _3305 * _3301));
                        float _4602 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3316 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3320 = ((_3316 * _3316) * (_3298 + (-1.0))) + 1.0;
                        float _3321 = _3256 * _3297;
                        float _3322 = _3321 * _3321;
                        float _3325 = ((1.0 - _3322) * _3246) + _3322;
                        float _4613 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3326 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                        float _3327 = 1.0 - _3297;
                        float _3337 = (0.5 / (((_3326 * ((_3312 * _3327) + _3297)) + 9.9999999392252902907785028219223e-09) + (((_3326 * _3327) + _3297) * _3312))) * _3326;
                        float _4624 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3348 = (((_3298 * 3.1415927410125732421875) * (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) / ((_3320 * _3320) * ((_3263 * 2.1991131305694580078125) + 3.141590118408203125))) * _3252;
                        _3105 = (_3267 * _3215.x) + _3173;
                        _3106 = (_3267 * _3215.y) + _3174;
                        _3107 = (_3267 * _3215.z) + _3175;
                        _3102 = (_3348 * _3232.x) + _3170;
                        _3103 = (_3348 * _3232.y) + _3171;
                        _3104 = (_3348 * _3232.z) + _3172;
                        if (_3177 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3106;
                            _3175 = _3107;
                            _3176 = _3177;
                        }
                    }
                    frontier_phi_61_pred = _3102;
                    frontier_phi_61_pred_1 = _3107;
                    frontier_phi_61_pred_2 = _3106;
                    frontier_phi_61_pred_3 = _3105;
                    frontier_phi_61_pred_4 = _3104;
                    frontier_phi_61_pred_5 = _3103;
                }
                _2902 = frontier_phi_61_pred;
                _2912 = frontier_phi_61_pred_1;
                _2910 = frontier_phi_61_pred_2;
                _2908 = frontier_phi_61_pred_3;
                _2906 = frontier_phi_61_pred_4;
                _2904 = frontier_phi_61_pred_5;
                uint _3053 = _3052 + 1u;
                if (_3053 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3046 = _2902;
                    _3047 = _2904;
                    _3048 = _2906;
                    _3049 = _2908;
                    _3050 = _2910;
                    _3051 = _2912;
                    _3052 = _3053;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
        }
        uvec4 _2915 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2916 = _2915.z;
        uint _2918 = (_2916 >> 8u) & 15u;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        if (((4294967295u << _2918) & _2800) == 0u)
        {
            _3014 = _2901;
            _3016 = _2903;
            _3018 = _2905;
            _3020 = _2907;
            _3022 = _2909;
            _3024 = _2911;
        }
        else
        {
            float _3039 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
            float _3040 = _3039 * _2754;
            float _3041 = _3039 * _2755;
            float _3042 = _3039 * _2756;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2918 < ((_2916 >> 12u) & 15u))
            {
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3153 = _2901;
                float _3154 = _2903;
                float _3155 = _2905;
                float _3156 = _2907;
                float _3157 = _2909;
                float _3158 = _2911;
                uint _3159 = _2918;
                uint _3168;
                bool _3169;
                for (;;)
                {
                    _3168 = texelFetch(g_lightClassification, int((((_2794 << 5u) + (_2780 << 9u)) + (_3159 << 2u)) >> 2u)).x;
                    _3169 = _3168 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3169)
                    {
                        frontier_phi_67_pred = _3156;
                        frontier_phi_67_pred_1 = _3157;
                        frontier_phi_67_pred_2 = _3158;
                        frontier_phi_67_pred_3 = _3155;
                        frontier_phi_67_pred_4 = _3154;
                        frontier_phi_67_pred_5 = _3153;
                    }
                    else
                    {
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3366 = _3153;
                        float _3367 = _3154;
                        float _3368 = _3155;
                        float _3369 = _3156;
                        float _3370 = _3157;
                        float _3371 = _3158;
                        uint _3372 = _3168;
                        uint _3373;
                        vec4 _3398;
                        float _3399;
                        vec4 _3414;
                        vec3 _3426;
                        vec4 _3441;
                        vec4 _3456;
                        float _3503;
                        bool _3504;
                        for (;;)
                        {
                            uint _3383 = ((_3159 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3372));
                            _3373 = (_3372 + 4294967295u) & _3372;
                            uint _3385 = _3383 * 40u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            _3399 = _3398.w;
                            uint _3401 = (_3383 * 40u) + 4u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3416 = (_3383 * 40u) + 8u;
                            _3426 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x));
                            uint _3428 = (_3383 * 40u) + 16u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3383 * 40u) + 20u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3459 = (_3383 * 40u) + 24u;
                            vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3478 = (_3383 * 40u) + 28u;
                            vec4 _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            _3503 = fma(_2756, _3491.z, fma(_2755, _3491.y, _3491.x * _2754)) + _3491.w;
                            _3504 = !((fma(_2756, _3472.z, fma(_2755, _3472.y, _3472.x * _2754)) + _3472.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3504)
                            {
                                float _3531 = _3398.x - _2754;
                                float _3532 = _3398.y - _2755;
                                float _3533 = _3398.z - _2756;
                                float _3534 = dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533));
                                float _3537 = inversesqrt(_3534);
                                float _3538 = _3537 * _3531;
                                float _3539 = _3537 * _3532;
                                float _3540 = _3537 * _3533;
                                float _3544 = 1.0 - (_3534 / (_3399 * _3399));
                                float _4635 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3549 = sqrt(_3534) * _3414.w;
                                float _3551 = 1.39999997615814208984375 / (_3549 + 1.39999997615814208984375);
                                float _3552 = _3551 * _3551;
                                float _3555 = ((1.0 - _3552) * dot(vec3(_3538, _3539, _3540), vec3(_995, _998, _1001))) + _3552;
                                float _3558 = _3549 * _3549;
                                float _3562 = (fma(_2756, _3441.z, fma(_2755, _3441.y, _3441.x * _2754)) + _3441.w) / _3503;
                                float _3563 = (fma(_2756, _3456.z, fma(_2755, _3456.y, _3456.x * _2754)) + _3456.w) / _3503;
                                float _3567 = 1.0 - dot(vec2(_3562, _3563), vec2(_3562, _3563));
                                float _4651 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3568 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3569 = _3568 * (((isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0))) * _3545) / ((_3558 * 0.699999988079071044921875) + 1.0));
                                float _3581 = exp2(log2(1.0 / ((_3558 * 3.5) + 5.0)) * 0.25);
                                float _3582 = 1.0 - _1070;
                                float _3589 = sqrt(1.0 - ((1.0 - (_3582 * _3582)) * (1.0 - (_3581 * _3581))));
                                float _3590 = _3589 * _3589;
                                float _3591 = _3590 * _3590;
                                float _3592 = _3538 - _3040;
                                float _3593 = _3539 - _3041;
                                float _3594 = _3540 - _3042;
                                float _3598 = inversesqrt(dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594)));
                                float _3602 = dot(vec3(_995, _998, _1001), vec3((-0.0) - _3040, (-0.0) - _3041, (-0.0) - _3042));
                                float _4662 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3605 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3606 = dot(vec3(_995, _998, _1001), vec3(_3598 * _3592, _3598 * _3593, _3598 * _3594));
                                float _4673 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3609 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3613 = ((_3609 * _3609) * (_3591 + (-1.0))) + 1.0;
                                float _3614 = _3551 * _3590;
                                float _3615 = _3614 * _3614;
                                float _3621 = ((1.0 - _3615) * dot(vec3(_995, _998, _1001), vec3(_3538, _3539, _3540))) + _3615;
                                float _4684 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3622 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3623 = 1.0 - _3590;
                                float _3633 = (0.5 / (((_3622 * ((_3605 * _3623) + _3590)) + 9.9999999392252902907785028219223e-09) + (((_3622 * _3623) + _3590) * _3605))) * _3622;
                                float _4695 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3643 = (_3568 * _3545) * (((_3591 * 3.1415927410125732421875) * (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) / ((_3613 * _3613) * ((_3558 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3643 * _3426.x;
                                frontier_phi_73_pred_1 = _3643 * _3426.y;
                                frontier_phi_73_pred_2 = _3569 * _3414.z;
                                frontier_phi_73_pred_3 = _3569 * _3414.y;
                                frontier_phi_73_pred_4 = _3569 * _3414.x;
                                frontier_phi_73_pred_5 = _3643 * _3426.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3647 = frontier_phi_73_pred;
                            _3648 = frontier_phi_73_pred_1;
                            _3652 = frontier_phi_73_pred_2;
                            _3651 = frontier_phi_73_pred_3;
                            _3650 = frontier_phi_73_pred_4;
                            _3649 = frontier_phi_73_pred_5;
                            _3356 = _3650 + _3369;
                            _3357 = _3651 + _3370;
                            _3358 = _3652 + _3371;
                            _3353 = _3647 + _3366;
                            _3354 = _3648 + _3367;
                            _3355 = _3649 + _3368;
                            if (_3373 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3373;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3356;
                        frontier_phi_67_pred_1 = _3357;
                        frontier_phi_67_pred_2 = _3358;
                        frontier_phi_67_pred_3 = _3355;
                        frontier_phi_67_pred_4 = _3354;
                        frontier_phi_67_pred_5 = _3353;
                    }
                    _3021 = frontier_phi_67_pred;
                    _3023 = frontier_phi_67_pred_1;
                    _3025 = frontier_phi_67_pred_2;
                    _3019 = frontier_phi_67_pred_3;
                    _3017 = frontier_phi_67_pred_4;
                    _3015 = frontier_phi_67_pred_5;
                    uint _3160 = _3159 + 1u;
                    if (_3160 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3153 = _3015;
                        _3154 = _3017;
                        _3155 = _3019;
                        _3156 = _3021;
                        _3157 = _3023;
                        _3158 = _3025;
                        _3159 = _3160;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3023;
                frontier_phi_55_56_ladder_1 = _3025;
                frontier_phi_55_56_ladder_2 = _3021;
                frontier_phi_55_56_ladder_3 = _3019;
                frontier_phi_55_56_ladder_4 = _3017;
                frontier_phi_55_56_ladder_5 = _3015;
            }
            else
            {
                frontier_phi_55_56_ladder = _2909;
                frontier_phi_55_56_ladder_1 = _2911;
                frontier_phi_55_56_ladder_2 = _2907;
                frontier_phi_55_56_ladder_3 = _2905;
                frontier_phi_55_56_ladder_4 = _2903;
                frontier_phi_55_56_ladder_5 = _2901;
            }
            _3014 = frontier_phi_55_56_ladder_5;
            _3016 = frontier_phi_55_56_ladder_4;
            _3018 = frontier_phi_55_56_ladder_3;
            _3020 = frontier_phi_55_56_ladder_2;
            _3022 = frontier_phi_55_56_ladder;
            _3024 = frontier_phi_55_56_ladder_1;
        }
        float _3029 = isnan(1.0) ? _1054 : (isnan(_1054) ? 1.0 : min(_1054, 1.0));
        _2813 = (_3029 * _3020) + _2246;
        _2815 = (_3029 * _3022) + _2248;
        _2817 = (_3029 * _3024) + _2250;
        _2819 = ((_3014 * _1039) * _3029) + _2594;
        _2821 = ((_3016 * _1041) * _3029) + _2596;
        _2823 = ((_3018 * _1042) * _3029) + _2598;
    }
    else
    {
        _2813 = _2246;
        _2815 = _2248;
        _2817 = _2250;
        _2819 = _2594;
        _2821 = _2596;
        _2823 = _2598;
    }
    float _4711 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _4722 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _4733 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    uint _2843 = _1014 + 6u;
    float _2851 = _976 / cbSceneParam._m0[86u].x;
    float _2852 = _977 / cbSceneParam._m0[86u].y;
    vec4 _2866 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2851, _2852, (log2((isnan(cbSceneParam._m0[77u].w) ? _911 : (isnan(_911) ? cbSceneParam._m0[77u].w : min(_911, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2868 = _2866.x;
    float _2869 = _2866.y;
    float _2870 = _2866.z;
    float _2871 = _2866.w;
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    if (_911 > cbSceneParam._m0[78u].w)
    {
        float _2926 = isnan(_911) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _911 : min(cbSceneParam._m0[80u].w, _911));
        float _2927 = _2926 / _911;
        float _2938 = _2927 * _961;
        float _2939 = _962 * _2927;
        float _2940 = (-0.0) - _2939;
        float _2942 = _2927 * _963;
        float _2944 = (cbSceneParam._m0[77u].w * _2940) / _2926;
        float _2945 = _2944 + cbSceneParam._m0[79u].w;
        float _2946 = cbSceneParam._m0[79u].w - _2939;
        float _2952 = sqrt(((_2938 * _2938) + (_2939 * _2939)) + (_2942 * _2942));
        float _2955 = (1.0 - (cbSceneParam._m0[77u].w / _2926)) * _2952;
        float _2960 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2962 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3115;
        if (abs((_2940 - _2944) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3115 = ((((_2945 > 0.0) ? exp2(_2960 * _2945) : (2.0 - exp2(_2962 * _2945))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2955;
        }
        else
        {
            float _3075 = 1.0 / cbSceneParam._m0[80u].x;
            float _3076 = isnan(_2946) ? _2945 : (isnan(_2945) ? _2946 : max(_2945, _2946));
            float _3077 = isnan(_2946) ? _2945 : (isnan(_2945) ? _2946 : min(_2945, _2946));
            float _3086 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : min(_3076, 0.0));
            float _3087 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : min(_3077, 0.0));
            _3115 = ((abs(_2952 / _2940) * cbSceneParam._m0[80u].y) * ((((_3086 - _3087) * 2.0) - ((exp2(_2960 * (isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0)))) - exp2(_2960 * (isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))))) * _3075)) - ((exp2(_2962 * _3086) - exp2(_2962 * _3087)) * _3075))) + (_2955 * cbSceneParam._m0[80u].z);
        }
        vec4 _3117 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2851, _2852, 1.0), 0.0);
        float _3126 = exp2((_3115 * (-1.44269502162933349609375)) * (1.0 - _3117.w));
        float _3127 = log2(_3126);
        float _3143 = log2(_2871);
        _2964 = (exp2(_3143 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3127 * cbSceneParam._m0[78u].x)) * _3117.x) / cbSceneParam._m0[78u].x)) + _2868;
        _2966 = (exp2(_3143 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3127 * cbSceneParam._m0[78u].y)) * _3117.y) / cbSceneParam._m0[78u].y)) + _2869;
        _2968 = (exp2(_3143 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3127 * cbSceneParam._m0[78u].z)) * _3117.z) / cbSceneParam._m0[78u].z)) + _2870;
        _2970 = _3126 * _2871;
    }
    else
    {
        _2964 = _2868;
        _2966 = _2869;
        _2968 = _2870;
        _2970 = _2871;
    }
    float _2982 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2983 = _2982 == 3.0;
    float _2984 = log2(_2970);
    float _2991 = exp2(_2984 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2813 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1054))) + ((_2819 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1864)) * cbPerFrame._m0[3u].x));
    float _2992 = exp2(_2984 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2815 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1054))) + ((_2821 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1864)) * cbPerFrame._m0[3u].x));
    float _2993 = exp2(_2984 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2817 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1054))) + ((_2823 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1864)) * cbPerFrame._m0[3u].x));
    float _3002 = (_2982 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3002 * (_2983 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2964)));
    SV_Target.y = _3002 * (_2983 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2966)));
    SV_Target.z = _3002 * (_2983 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2968)));
    SV_Target.w = cbInstanceData._m0[_2843].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2843].w;
}


