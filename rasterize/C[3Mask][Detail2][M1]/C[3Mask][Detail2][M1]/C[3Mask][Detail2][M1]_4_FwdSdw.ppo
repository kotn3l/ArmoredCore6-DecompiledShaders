#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1256;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _252 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _252.x * cbMtdParam._m0[10u].x;
    float _259 = _252.y * cbMtdParam._m0[10u].y;
    float _260 = _252.z * cbMtdParam._m0[10u].z;
    vec4 _278 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _328 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _338 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _328)) + 1.0;
    float _3868 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _339 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _346 = (_339 * ((_278.x * cbMtdParam._m0[11u].x) - _258)) + _258;
    float _347 = (_339 * ((_278.y * cbMtdParam._m0[11u].y) - _259)) + _259;
    float _348 = (_339 * ((_278.z * cbMtdParam._m0[11u].z) - _260)) + _260;
    vec4 _366 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _397 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _328)) + 1.0;
    float _3879 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _405 = (_398 * ((_366.x * cbMtdParam._m0[12u].x) - _346)) + _346;
    float _406 = (_398 * ((_366.y * cbMtdParam._m0[12u].y) - _347)) + _347;
    float _407 = (_398 * ((_366.z * cbMtdParam._m0[12u].z) - _348)) + _348;
    vec4 _425 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _450 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _328)) + 1.0;
    float _3890 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    vec4 _479 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _487 = ((((_451 * ((_425.x * cbMtdParam._m0[13u].x) - _405)) + _405) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _479.x;
    float _490 = ((((_451 * ((_425.y * cbMtdParam._m0[13u].y) - _406)) + _406) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _479.y;
    float _493 = ((((_451 * ((_425.z * cbMtdParam._m0[13u].z) - _407)) + _407) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _479.z;
    vec4 _506 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _508 = _506.x;
    float _526 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _508) * _339) + _508;
    float _543 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _526) * _398) + _526;
    float _560 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _543) * _451) + _543;
    vec4 _572 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _574 = _572.x;
    float _575 = _572.y;
    float _581 = cbMtdParam._m0[18u].y * _572.z;
    vec4 _593 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _602 = (((cbMtdParam._m0[18u].x * _593.z) - _581) * _339) + _581;
    vec4 _615 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _626 = (((cbMtdParam._m0[17u].w * _615.z) - _602) * _398) + _602;
    vec4 _639 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _648 = (((cbMtdParam._m0[17u].z * _639.z) - _626) * _451) + _626;
    vec4 _661 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _674 = ((_593.x - _574) * _339) + _574;
    float _675 = ((_593.y - _575) * _339) + _575;
    float _680 = ((_615.x - _674) * _398) + _674;
    float _681 = ((_615.y - _675) * _398) + _675;
    float _690 = ((((_639.x - _680) * _451) + _680) * 2.0) + (-1.0);
    float _691 = ((((_639.y - _681) * _451) + _681) * 2.0) + (-1.0);
    float _692 = dot(vec2(_690, _691), vec2(_690, _691));
    float _3901 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _697 = sqrt(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))));
    float _700 = (((_661.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _690;
    float _701 = (((_661.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _691;
    float _704 = fma(_697, _222 * NORMAL.x, fma(_701, _229 * TANGENT.x, (_215 * _207) * _700));
    float _707 = fma(_697, _222 * NORMAL.y, fma(_701, _229 * TANGENT.y, (_215 * _208) * _700));
    float _710 = fma(_697, _222 * NORMAL.z, fma(_701, _229 * TANGENT.z, (_215 * _209) * _700));
    float _714 = inversesqrt(dot(vec3(_704, _707, _710), vec3(_704, _707, _710)));
    float _715 = _714 * _704;
    float _716 = _714 * _707;
    float _717 = _714 * _710;
    float _3912 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _718 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3934 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3945 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3956 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _722 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _738 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _788 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _778);
    float _789 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _778);
    float _790 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _778);
    float _794 = inversesqrt(dot(vec3(_788, _789, _790), vec3(_788, _789, _790)));
    float _795 = _788 * _794;
    float _796 = _789 * _794;
    float _797 = _790 * _794;
    float _803 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _804 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _822 = fma(_717, cbSceneParam._m0[5u].z, fma(_716, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _715));
    float _825 = fma(_717, cbSceneParam._m0[6u].z, fma(_716, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _715));
    float _828 = fma(_717, cbSceneParam._m0[7u].z, fma(_716, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _715));
    uint _841 = uint(roundEven(NORMAL.w)) * 13u;
    uint _843 = (_841 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _849 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_843].x;
    float _850 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_843].y;
    float _851 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * cbInstanceData._m0[_843].z;
    float _3967 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _855 = 1.0 - _722;
    float _856 = _852 * _855;
    float _857 = _853 * _855;
    float _858 = _854 * _855;
    float _863 = (_852 + (-0.039999999105930328369140625)) * _722;
    float _864 = (_853 + (-0.039999999105930328369140625)) * _722;
    float _865 = (_854 + (-0.039999999105930328369140625)) * _722;
    float _866 = _863 + 0.039999999105930328369140625;
    float _868 = _864 + 0.039999999105930328369140625;
    float _869 = _865 + 0.039999999105930328369140625;
    vec4 _878 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _803, cbSceneParam._m0[86u].y * _804));
    float _881 = _878.x * TEXCOORD_5.w;
    float _882 = dot(vec3(_715, _716, _717), vec3(_795, _796, _797));
    float _885 = _882 * 2.0;
    float _889 = (_885 * _715) - _795;
    float _890 = (_885 * _716) - _796;
    float _891 = (_885 * _717) - _797;
    float _895 = abs(dot(vec3(_795, _796, _797), vec3(_715, _716, _717)));
    float _4000 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _897 = sqrt(_718);
    float _910 = exp2((_897 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_897 * 3.0));
    float _916 = (1.0 - _910) * ((_897 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _917 = _910 * _897;
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1255;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _980 = fma(_953, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945));
        float _984 = fma(_953, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945));
        float _988 = fma(_953, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945));
        float _1013 = _945 + _715;
        float _1014 = _949 + _716;
        float _1015 = _953 + _717;
        float _1025 = fma(_1015, cbModelParam._m0[26u].z, fma(_1014, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1013)) - _980;
        float _1026 = fma(_1015, cbModelParam._m0[27u].z, fma(_1014, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1013)) - _984;
        float _1027 = fma(_1015, cbModelParam._m0[28u].z, fma(_1014, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1013)) - _988;
        float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
        float _1044 = ((_1031 * _1025) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_980 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1031 * _1026) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_984 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1031 * _1027) / cbModelParam._m0[34u].z) + ((((((_988 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        float _1083 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1049.x + (-0.5));
        float _1085 = _1083 * (_1049.y + (-0.5));
        float _1086 = _1083 * (_1049.z + (-0.5));
        float _1093 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1056.x + (-0.5));
        float _1095 = _1093 * (_1056.y + (-0.5));
        float _1096 = _1093 * (_1056.z + (-0.5));
        float _1103 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1063.x + (-0.5));
        float _1105 = _1103 * (_1063.y + (-0.5));
        float _1106 = _1103 * (_1063.z + (-0.5));
        float _1113 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1070.x + (-0.5));
        float _1115 = _1113 * (_1070.y + (-0.5));
        float _1116 = _1113 * (_1070.z + (-0.5));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = _1084 * 0.5;
        float _1121 = _1094 * 0.5;
        float _1122 = _1104 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1137 = (dot(vec3(_715, _716, _717), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1147 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _4048 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1149 + 1.0))) + _1154) * _1117;
        float _1164 = _1085 * 0.5;
        float _1165 = _1095 * 0.5;
        float _1166 = _1105 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_715, _716, _717), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _4081 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1191 + 1.0))) + _1196) * _1118;
        float _1206 = _1086 * 0.5;
        float _1207 = _1096 * 0.5;
        float _1208 = _1106 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_715, _716, _717), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _4114 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1233 + 1.0))) + _1238) * _1119;
        _1255 = _1086;
        _1257 = _1085;
        _1258 = _1084;
        _1259 = _1096;
        _1260 = _1095;
        _1261 = _1094;
        _1262 = _1106;
        _1263 = _1105;
        _1264 = _1104;
        _1265 = _1119;
        _1266 = _1118;
        _1267 = _1117;
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
    }
    else
    {
        _1255 = _1256;
        _1257 = _1256;
        _1258 = _1256;
        _1259 = _1256;
        _1260 = _1256;
        _1261 = _1256;
        _1262 = _1256;
        _1263 = _1256;
        _1264 = _1256;
        _1265 = _1256;
        _1266 = _1256;
        _1267 = _1256;
        _1268 = 0.0;
        _1269 = 0.0;
        _1270 = 0.0;
    }
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1296 = fma(_953, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945));
        float _1300 = fma(_953, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945));
        float _1304 = fma(_953, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945));
        float _1327 = _945 + _715;
        float _1328 = _949 + _716;
        float _1329 = _953 + _717;
        float _1339 = fma(_1329, cbModelParam._m0[30u].z, fma(_1328, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1327)) - _1296;
        float _1340 = fma(_1329, cbModelParam._m0[31u].z, fma(_1328, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1327)) - _1300;
        float _1341 = fma(_1329, cbModelParam._m0[32u].z, fma(_1328, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1327)) - _1304;
        float _1345 = inversesqrt(dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341)));
        float _1358 = ((_1345 * _1339) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1296 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1345 * _1340) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1300 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1345 * _1341) / cbModelParam._m0[35u].z) + ((((((_1304 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        float _1395 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1362.x + (-0.5));
        float _1397 = _1395 * (_1362.y + (-0.5));
        float _1398 = _1395 * (_1362.z + (-0.5));
        float _1405 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1369.x + (-0.5));
        float _1407 = _1405 * (_1369.y + (-0.5));
        float _1408 = _1405 * (_1369.z + (-0.5));
        float _1415 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1376.x + (-0.5));
        float _1417 = _1415 * (_1376.y + (-0.5));
        float _1418 = _1415 * (_1376.z + (-0.5));
        float _1425 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1383.x + (-0.5));
        float _1427 = _1425 * (_1383.y + (-0.5));
        float _1428 = _1425 * (_1383.z + (-0.5));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = _1396 * 0.5;
        float _1433 = _1406 * 0.5;
        float _1434 = _1416 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_715, _716, _717), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4177 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1459 + 1.0))) + _1464) * _1429;
        float _1474 = _1397 * 0.5;
        float _1475 = _1407 * 0.5;
        float _1476 = _1417 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_715, _716, _717), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4210 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1501 + 1.0))) + _1506) * _1430;
        float _1516 = _1398 * 0.5;
        float _1517 = _1408 * 0.5;
        float _1518 = _1418 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_715, _716, _717), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4243 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1543 + 1.0))) + _1548) * _1431;
        _1565 = _1398;
        _1566 = _1397;
        _1567 = _1396;
        _1568 = _1408;
        _1569 = _1407;
        _1570 = _1406;
        _1571 = _1418;
        _1572 = _1417;
        _1573 = _1416;
        _1574 = _1431;
        _1575 = _1430;
        _1576 = _1429;
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
    }
    else
    {
        _1565 = _1256;
        _1566 = _1256;
        _1567 = _1256;
        _1568 = _1256;
        _1569 = _1256;
        _1570 = _1256;
        _1571 = _1256;
        _1572 = _1256;
        _1573 = _1256;
        _1574 = _1256;
        _1575 = _1256;
        _1576 = _1256;
        _1577 = 0.0;
        _1578 = 0.0;
        _1579 = 0.0;
    }
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1268)) + _1268;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1269)) + _1269;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1270)) + _1270;
    float _1612 = fma(_1591, cbSceneParam._m0[89u].z, fma(_1590, cbSceneParam._m0[89u].y, _1589 * cbSceneParam._m0[89u].x));
    float _1615 = fma(_1591, cbSceneParam._m0[90u].z, fma(_1590, cbSceneParam._m0[90u].y, _1589 * cbSceneParam._m0[90u].x));
    float _1618 = fma(_1591, cbSceneParam._m0[91u].z, fma(_1590, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1589));
    float _1633 = _889 * 0.5;
    float _1634 = _890 * 0.5;
    float _1635 = _891 * 0.5;
    float _1636 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1639 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1642 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1676;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1649 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1255, _1259, _1262, _1265));
        float _1653 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1257, _1260, _1263, _1266));
        float _1657 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1664 = dot(vec4(cbModelParam._m0[39u]), vec4(_1633, _1634, _1635, 1.0));
        _1676 = dot(vec3(isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1676 = 1.0;
    }
    float _1687;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1678 = dot(vec4(cbModelParam._m0[40u]), vec4(_1633, _1634, _1635, 1.0));
        _1687 = dot(vec3(isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1687 = 1.0;
    }
    float _1691 = (_1687 * cbModelParam._m0[1u].x) + (_1676 * (1.0 - cbModelParam._m0[1u].x));
    float _1701 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _718);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1701 : min(cbModelParam._m0[25u].z, _1701));
    float _1784;
    float _1786;
    float _1788;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1751 = fma(_953, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945)) + cbModelParam._m0[13u].w;
        float _1755 = fma(_953, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945)) + cbModelParam._m0[14u].w;
        float _1759 = fma(_953, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945)) + cbModelParam._m0[15u].w;
        float _1762 = fma(_891, cbModelParam._m0[13u].z, fma(_890, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889));
        float _1765 = fma(_891, cbModelParam._m0[14u].z, fma(_890, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889));
        float _1768 = fma(_891, cbModelParam._m0[15u].z, fma(_890, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889));
        float _1796;
        if (_1762 > 0.0)
        {
            _1796 = abs((1.0 - _1751) / _1762);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1751 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1796 = frontier_phi_14_12_ladder;
        }
        float _1967;
        if (_1765 > 0.0)
        {
            _1967 = abs((1.0 - _1755) / _1765);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1755 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1967 = frontier_phi_23_19_ladder;
        }
        float _2262;
        if (_1768 > 0.0)
        {
            _2262 = abs((1.0 - _1759) / _1768);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1759 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2262 = frontier_phi_35_30_ladder;
        }
        float _2264 = isnan(_1967) ? _1796 : (isnan(_1796) ? _1967 : min(_1796, _1967));
        float _2265 = isnan(_2262) ? _2264 : (isnan(_2264) ? _2262 : min(_2264, _2262));
        float _2269 = (_2265 * _1762) + _1751;
        float _2270 = (_2265 * _1765) + _1755;
        float _2271 = (_2265 * _1768) + _1759;
        float _2272 = _2265 * 9.9999997473787516355514526367188e-05;
        float _2274 = (-1.0) - _2272;
        float _2276 = _2272 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2271 > _2276) || ((_2271 < _2274) || ((_2270 > _2276) || ((_2270 < _2274) || ((_2269 < _2274) || (_2269 > _2276))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2416 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2271, cbModelParam._m0[9u].z, fma(_2270, cbModelParam._m0[9u].y, _2269 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2271, cbModelParam._m0[10u].z, fma(_2270, cbModelParam._m0[10u].y, _2269 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2271, cbModelParam._m0[11u].z, fma(_2270, cbModelParam._m0[11u].y, _2269 * cbModelParam._m0[11u].x))), _1702);
            frontier_phi_13_35_ladder = _2416.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2416.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2416.x * cbModelParam._m0[1u].y;
        }
        _1784 = frontier_phi_13_35_ladder_2;
        _1786 = frontier_phi_13_35_ladder_1;
        _1788 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1772 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_889, _890, _891), _1702);
        _1784 = _1772.x * cbModelParam._m0[1u].y;
        _1786 = _1772.y * cbModelParam._m0[1u].y;
        _1788 = _1772.z * cbModelParam._m0[1u].y;
    }
    float _1792 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _718);
    float _1793 = isnan(_1792) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1792 : min(cbModelParam._m0[25u].w, _1792));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1846 = fma(_953, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945)) + cbModelParam._m0[21u].w;
        float _1850 = fma(_953, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945)) + cbModelParam._m0[22u].w;
        float _1854 = fma(_953, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945)) + cbModelParam._m0[23u].w;
        float _1857 = fma(_891, cbModelParam._m0[21u].z, fma(_890, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889));
        float _1860 = fma(_891, cbModelParam._m0[22u].z, fma(_890, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889));
        float _1863 = fma(_891, cbModelParam._m0[23u].z, fma(_890, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889));
        float _1972;
        if (_1857 > 0.0)
        {
            _1972 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1972 = frontier_phi_25_21_ladder;
        }
        float _2289;
        if (_1860 > 0.0)
        {
            _2289 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2289 = frontier_phi_37_32_ladder;
        }
        float _2627;
        if (_1863 > 0.0)
        {
            _2627 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2627 = frontier_phi_47_44_ladder;
        }
        float _2629 = isnan(_2289) ? _1972 : (isnan(_1972) ? _2289 : min(_1972, _2289));
        float _2630 = isnan(_2627) ? _2629 : (isnan(_2629) ? _2627 : min(_2629, _2627));
        float _2634 = (_2630 * _1857) + _1846;
        float _2635 = (_2630 * _1860) + _1850;
        float _2636 = (_2630 * _1863) + _1854;
        float _2637 = _2630 * 9.9999997473787516355514526367188e-05;
        float _2638 = (-1.0) - _2637;
        float _2640 = _2637 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2636 > _2640) || ((_2636 < _2638) || ((_2635 > _2640) || ((_2635 < _2638) || ((_2634 < _2638) || (_2634 > _2640))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2758 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2636, cbModelParam._m0[17u].z, fma(_2635, cbModelParam._m0[17u].y, _2634 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2636, cbModelParam._m0[18u].z, fma(_2635, cbModelParam._m0[18u].y, _2634 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2636, cbModelParam._m0[19u].z, fma(_2635, cbModelParam._m0[19u].y, _2634 * cbModelParam._m0[19u].x))), _1793);
            frontier_phi_22_47_ladder = _2758.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2758.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2758.x * cbModelParam._m0[1u].z;
        }
        _1882 = frontier_phi_22_47_ladder_2;
        _1884 = frontier_phi_22_47_ladder_1;
        _1886 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_889, _890, _891), _1793);
        _1882 = _1866.x * cbModelParam._m0[1u].z;
        _1884 = _1866.y * cbModelParam._m0[1u].z;
        _1886 = _1866.z * cbModelParam._m0[1u].z;
    }
    float _1899 = (((_916 * _866) + _917) * _881) * ((cbModelParam._m0[1u].w * (_1882 - _1784)) + _1784);
    float _1901 = (((_916 * _868) + _917) * _881) * ((cbModelParam._m0[1u].w * (_1884 - _1786)) + _1786);
    float _1903 = (((_916 * _869) + _917) * _881) * ((cbModelParam._m0[1u].w * (_1886 - _1788)) + _1788);
    float _1906 = fma(_1903, cbSceneParam._m0[89u].z, fma(_1901, cbSceneParam._m0[89u].y, _1899 * cbSceneParam._m0[89u].x));
    float _1909 = fma(_1903, cbSceneParam._m0[90u].z, fma(_1901, cbSceneParam._m0[90u].y, _1899 * cbSceneParam._m0[90u].x));
    float _1912 = fma(_1903, cbSceneParam._m0[91u].z, fma(_1901, cbSceneParam._m0[91u].y, _1899 * cbSceneParam._m0[91u].x));
    float _1946 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1950 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1954 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1958 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1959 = _1946 / _1958;
    float _1960 = _1950 / _1958;
    float _1961 = _1954 / _1958;
    float _2108;
    float _2109;
    float _2110;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1988 = ((uint(_1961 > cbSceneParam._m0[59u].y) + uint(_1961 > cbSceneParam._m0[59u].x)) + uint(_1961 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1989 = _1988 + 43u;
        uint _1997 = _1988 + 44u;
        uint _2005 = _1988 + 45u;
        uint _2013 = _1988 + 46u;
        float _2024 = fma(_1958, cbSceneParam._m0[_1989].w, fma(_1954, cbSceneParam._m0[_1989].z, fma(_1950, cbSceneParam._m0[_1989].y, _1946 * cbSceneParam._m0[_1989].x)));
        float _2028 = fma(_1958, cbSceneParam._m0[_1997].w, fma(_1954, cbSceneParam._m0[_1997].z, fma(_1950, cbSceneParam._m0[_1997].y, _1946 * cbSceneParam._m0[_1997].x)));
        float _2036 = fma(_1958, cbSceneParam._m0[_2013].w, fma(_1954, cbSceneParam._m0[_2013].z, fma(_1950, cbSceneParam._m0[_2013].y, _1946 * cbSceneParam._m0[_2013].x)));
        float _2041 = cbSceneParam._m0[33u].z * _2036;
        float _2043 = cbSceneParam._m0[33u].w * _2036;
        float _2046 = fma(_1958, cbSceneParam._m0[_2005].w, fma(_1954, cbSceneParam._m0[_2005].z, fma(_1950, cbSceneParam._m0[_2005].y, _1946 * cbSceneParam._m0[_2005].x))) / _2036;
        float _2094 = (cbSceneParam._m0[33u].x - sqrt(((_1960 * _1960) + (_1959 * _1959)) + (_1961 * _1961))) * cbSceneParam._m0[33u].y;
        float _4369 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2101 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2041 + _2024) / _2036, (_2043 + _2028) / _2036), _2046), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2043 + _2024) / _2036, (_2028 - _2041) / _2036), _2046), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2024 - _2041) / _2036, (_2028 - _2043) / _2036), _2046), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2024 - _2043) / _2036, (_2041 + _2028) / _2036), _2046), 0.0)).x), vec4(0.25)));
        _2108 = 1.0 - (_2101 * cbSceneParam._m0[34u].x);
        _2109 = 1.0 - (_2101 * cbSceneParam._m0[34u].y);
        _2110 = 1.0 - (_2101 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2108 = 1.0;
        _2109 = 1.0;
        _2110 = 1.0;
    }
    float _2174;
    float _2176;
    float _2178;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2162 = fma(_1958, cbSceneParam._m0[63u].w, fma(_1954, cbSceneParam._m0[63u].z, fma(_1950, cbSceneParam._m0[63u].y, _1946 * cbSceneParam._m0[63u].x)));
        float _2163 = fma(_1958, cbSceneParam._m0[60u].w, fma(_1954, cbSceneParam._m0[60u].z, fma(_1950, cbSceneParam._m0[60u].y, _1946 * cbSceneParam._m0[60u].x))) / _2162;
        float _2164 = fma(_1958, cbSceneParam._m0[61u].w, fma(_1954, cbSceneParam._m0[61u].z, fma(_1950, cbSceneParam._m0[61u].y, _1946 * cbSceneParam._m0[61u].x))) / _2162;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2163 >= cbSceneParam._m0[64u].x) && (_2164 >= cbSceneParam._m0[64u].y)) && (_2163 <= cbSceneParam._m0[64u].z)) && (_2164 <= cbSceneParam._m0[64u].w))
        {
            float _2302 = fma(_1958, cbSceneParam._m0[62u].w, fma(_1954, cbSceneParam._m0[62u].z, fma(_1950, cbSceneParam._m0[62u].y, _1946 * cbSceneParam._m0[62u].x))) / _2162;
            float _2306 = isnan(cbSceneParam._m0[41u].w) ? _2302 : (isnan(_2302) ? cbSceneParam._m0[41u].w : max(_2302, cbSceneParam._m0[41u].w));
            float _2349 = (cbSceneParam._m0[33u].x - sqrt(((_1960 * _1960) + (_1959 * _1959)) + (_1961 * _1961))) * cbSceneParam._m0[33u].y;
            float _4385 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
            float _2356 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2163, cbSceneParam._m0[33u].w + _2164), _2306), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2163, _2164 - cbSceneParam._m0[33u].z), _2306), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2163 - cbSceneParam._m0[33u].z, _2164 - cbSceneParam._m0[33u].w), _2306), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2163 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2164), _2306), 0.0)).x), vec4(0.25)));
            float _2360 = 1.0 - (_2356 * cbSceneParam._m0[34u].x);
            float _2361 = 1.0 - (_2356 * cbSceneParam._m0[34u].y);
            float _2362 = 1.0 - (_2356 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2362) ? _2110 : (isnan(_2110) ? _2362 : min(_2110, _2362));
            frontier_phi_34_33_ladder_1 = isnan(_2361) ? _2109 : (isnan(_2109) ? _2361 : min(_2109, _2361));
            frontier_phi_34_33_ladder_2 = isnan(_2360) ? _2108 : (isnan(_2108) ? _2360 : min(_2108, _2360));
        }
        else
        {
            frontier_phi_34_33_ladder = _2110;
            frontier_phi_34_33_ladder_1 = _2109;
            frontier_phi_34_33_ladder_2 = _2108;
        }
        _2174 = frontier_phi_34_33_ladder_2;
        _2176 = frontier_phi_34_33_ladder_1;
        _2178 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2174 = _2108;
        _2176 = _2109;
        _2178 = _2110;
    }
    uvec4 _2183 = floatBitsToUint(cbInstanceData._m0[_841 + 5u]);
    uint _2185 = _2183.x * 14u;
    uint _2186 = _2185 + 13u;
    float _2193 = _881 + (-1.0);
    float _2198 = (cbLight._m0[_2186].x * _2193) + 1.0;
    float _2199 = (cbLight._m0[_2186].y * _2193) + 1.0;
    float _2200 = (cbLight._m0[_2186].z * _2193) + 1.0;
    float _2201 = (cbLight._m0[_2186].w * _2193) + 1.0;
    uint _2202 = _2185 + 5u;
    float _2208 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
    uint _2212 = _2185 + 4u;
    float _2221 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
    uint _2225 = _2185 | 1u;
    float _2236 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_715, _716, _717));
    float _2239 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_715, _716, _717));
    float _4421 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _4432 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2244 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * 0.3183098733425140380859375;
    float _2246 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * 0.3183098733425140380859375;
    float _2253 = ((cbLight._m0[_2202].x * _2208) * _2246) + (((cbLight._m0[_2212].x * _2174) * _2221) * _2244);
    float _2254 = ((_2208 * cbLight._m0[_2202].y) * _2246) + (((cbLight._m0[_2212].y * _2176) * _2221) * _2244);
    float _2255 = ((_2208 * cbLight._m0[_2202].z) * _2246) + (((cbLight._m0[_2212].z * _2178) * _2221) * _2244);
    uvec4 _2259 = floatBitsToUint(cbLight._m0[_2185 + 12u]);
    bool _2261 = _2259.x == 0u;
    float _2363;
    float _2365;
    float _2367;
    if (_2261)
    {
        _2363 = _2253;
        _2365 = _2254;
        _2367 = _2255;
    }
    else
    {
        uint _2371 = _2185 + 6u;
        float _2387 = (dot(vec3(cbLight._m0[_2185 + 2u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2388 = _2387 * _2387;
        float _4443 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2389 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2390 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2363 = (((cbLight._m0[_2371].x * 0.3183098733425140380859375) * _2389) * _2390) + _2253;
        _2365 = (((cbLight._m0[_2371].y * 0.3183098733425140380859375) * _2389) * _2390) + _2254;
        _2367 = (((cbLight._m0[_2371].z * 0.3183098733425140380859375) * _2389) * _2390) + _2255;
    }
    bool _2370 = _2259.y == 0u;
    float _2425;
    float _2427;
    float _2429;
    if (_2370)
    {
        _2425 = _2363;
        _2427 = _2365;
        _2429 = _2367;
    }
    else
    {
        uint _2598 = _2185 + 7u;
        float _2614 = (dot(vec3(cbLight._m0[_2185 + 3u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2615 = _2614 * _2614;
        float _4459 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2616 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2617 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2425 = (((cbLight._m0[_2598].x * 0.3183098733425140380859375) * _2616) * _2617) + _2363;
        _2427 = (((cbLight._m0[_2598].y * 0.3183098733425140380859375) * _2616) * _2617) + _2365;
        _2429 = (((cbLight._m0[_2598].z * 0.3183098733425140380859375) * _2616) * _2617) + _2367;
    }
    uint _2432 = _2185 + 8u;
    float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _718) * 0.949999988079071044921875);
    float _2446 = _2445 * _2445;
    float _2447 = cbLight._m0[_2185].x + _795;
    float _2448 = cbLight._m0[_2185].y + _796;
    float _2449 = cbLight._m0[_2185].z + _797;
    float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
    float _2454 = _2453 * _2447;
    float _2455 = _2453 * _2448;
    float _2456 = _2453 * _2449;
    float _2457 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2185].xyz));
    float _4475 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _4486 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2461 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2462 = dot(vec3(_715, _716, _717), vec3(_2454, _2455, _2456));
    float _4497 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2465 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2466 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2454, _2455, _2456));
    float _4508 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2470 = _2446 * _2446;
    float _2474 = ((_2465 * _2465) * (_2470 + (-1.0))) + 1.0;
    float _2482 = exp2(log2(1.0 - (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) * 5.0);
    float _2483 = 0.959999978542327880859375 - _863;
    float _2485 = 0.959999978542327880859375 - _864;
    float _2486 = 0.959999978542327880859375 - _865;
    float _2493 = 1.0 - _2446;
    float _2504 = (0.5 / (((_2461 * ((_2460 * _2493) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2461 * _2493) + _2446) * _2460))) * _2460;
    float _4519 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2506 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2470 / ((_2474 * _2474) * 3.141590118408203125));
    uint _2520 = _2185 + 9u;
    float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _718) * 0.949999988079071044921875);
    float _2532 = _2531 * _2531;
    float _2533 = cbLight._m0[_2225].x + _795;
    float _2534 = cbLight._m0[_2225].y + _796;
    float _2535 = cbLight._m0[_2225].z + _797;
    float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
    float _2540 = _2539 * _2533;
    float _2541 = _2539 * _2534;
    float _2542 = _2539 * _2535;
    float _2543 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2225].xyz));
    float _4530 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2546 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2547 = dot(vec3(_715, _716, _717), vec3(_2540, _2541, _2542));
    float _4541 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2550 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2551 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2540, _2541, _2542));
    float _4552 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2555 = _2532 * _2532;
    float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
    float _2566 = exp2(log2(1.0 - (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) * 5.0);
    float _2573 = 1.0 - _2532;
    float _2583 = (0.5 / (((_2461 * ((_2546 * _2573) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2461 * _2573) + _2532) * _2546))) * _2546;
    float _4563 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2585 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
    float _2595 = (((((_2566 * _2483) + _866) * cbLight._m0[_2520].x) * _2585) * _2208) + ((((cbLight._m0[_2432].x * _2174) * ((_2482 * _2483) + _866)) * _2506) * _2221);
    float _2596 = (((((_2566 * _2485) + _868) * cbLight._m0[_2520].y) * _2585) * _2208) + ((((cbLight._m0[_2432].y * _2176) * ((_2482 * _2485) + _868)) * _2506) * _2221);
    float _2597 = (((((_2566 * _2486) + _869) * cbLight._m0[_2520].z) * _2585) * _2208) + ((((cbLight._m0[_2432].z * _2178) * ((_2482 * _2486) + _869)) * _2506) * _2221);
    float _2653;
    float _2655;
    float _2657;
    if (_2261)
    {
        _2653 = _2595;
        _2655 = _2596;
        _2657 = _2597;
    }
    else
    {
        uint _2659 = _2185 + 2u;
        uint _2663 = _2185 + 10u;
        float _2677 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2659].w)) * _718) * 0.949999988079071044921875);
        float _2678 = _2677 * _2677;
        float _2679 = cbLight._m0[_2659].x + _795;
        float _2680 = cbLight._m0[_2659].y + _796;
        float _2681 = cbLight._m0[_2659].z + _797;
        float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
        float _2686 = _2685 * _2679;
        float _2687 = _2685 * _2680;
        float _2688 = _2685 * _2681;
        float _2689 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2659].xyz));
        float _4574 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2693 = dot(vec3(_715, _716, _717), vec3(_2686, _2687, _2688));
        float _4585 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2697 = dot(vec3(cbLight._m0[_2659].xyz), vec3(_2686, _2687, _2688));
        float _4596 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2701 = _2678 * _2678;
        float _2705 = ((_2696 * _2696) * (_2701 + (-1.0))) + 1.0;
        float _2712 = exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0);
        float _2719 = 1.0 - _2678;
        float _2729 = (0.5 / (((_2461 * ((_2692 * _2719) + _2678)) + 9.9999999392252902907785028219223e-09) + (((_2461 * _2719) + _2678) * _2692))) * _2692;
        float _4607 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2731 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2701 / ((_2705 * _2705) * 3.141590118408203125));
        float _2732 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2653 = (((((_2712 * _2483) + _866) * cbLight._m0[_2663].x) * _2731) * _2732) + _2595;
        _2655 = (((((_2712 * _2485) + _868) * cbLight._m0[_2663].y) * _2731) * _2732) + _2596;
        _2657 = (((((_2712 * _2486) + _869) * cbLight._m0[_2663].z) * _2731) * _2732) + _2597;
    }
    float _2763;
    float _2765;
    float _2767;
    if (_2370)
    {
        _2763 = _2653;
        _2765 = _2655;
        _2767 = _2657;
    }
    else
    {
        uint _2774 = _2185 + 3u;
        uint _2778 = _2185 + 11u;
        float _2792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2774].w)) * _718) * 0.949999988079071044921875);
        float _2793 = _2792 * _2792;
        float _2794 = cbLight._m0[_2774].x + _795;
        float _2795 = cbLight._m0[_2774].y + _796;
        float _2796 = cbLight._m0[_2774].z + _797;
        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
        float _2801 = _2800 * _2794;
        float _2802 = _2800 * _2795;
        float _2803 = _2800 * _2796;
        float _2804 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2774].xyz));
        float _4623 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2807 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2808 = dot(vec3(_715, _716, _717), vec3(_2801, _2802, _2803));
        float _4634 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2812 = dot(vec3(cbLight._m0[_2774].xyz), vec3(_2801, _2802, _2803));
        float _4645 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2816 = _2793 * _2793;
        float _2820 = ((_2811 * _2811) * (_2816 + (-1.0))) + 1.0;
        float _2827 = exp2(log2(1.0 - (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) * 5.0);
        float _2834 = 1.0 - _2793;
        float _2844 = (0.5 / (((_2461 * ((_2807 * _2834) + _2793)) + 9.9999999392252902907785028219223e-09) + (((_2461 * _2834) + _2793) * _2807))) * _2807;
        float _4656 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2846 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2816 / ((_2820 * _2820) * 3.141590118408203125));
        float _2847 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2763 = (((((_2827 * _2483) + _866) * cbLight._m0[_2778].x) * _2846) * _2847) + _2653;
        _2765 = (((((_2827 * _2485) + _868) * cbLight._m0[_2778].y) * _2846) * _2847) + _2655;
        _2767 = (((((_2827 * _2486) + _869) * cbLight._m0[_2778].z) * _2846) * _2847) + _2657;
    }
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    if (_2183.y == 0u)
    {
        uvec4 _2868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2869 = _2868.x;
        uint _2880 = uint((float(_2868.y) * floor(float(uint(cbSceneParam._m0[85u].y * _804) / _2869))) + floor(float(uint(cbSceneParam._m0[85u].x * _803) / _2869)));
        float _2890 = (log2(_1961 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2891 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        uint _2894 = uint(isnan(14.0) ? _2891 : (isnan(_2891) ? 14.0 : min(_2891, 14.0)));
        uvec4 _2899 = texelFetch(g_lightClusterGridBuffer, int(((_2894 << 2u) + (_2880 << 6u)) >> 2u));
        uint _2900 = _2899.x;
        uint _2901 = _2868.z;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        if (((((1u << ((_2901 >> 4u) & 15u)) + 4294967295u) & _2900) == 0u) || ((_2901 & 240u) == 0u))
        {
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
        }
        else
        {
            float _2981;
            float _2983;
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            uint _3131 = 0u;
            uint _3140;
            bool _3141;
            for (;;)
            {
                _3140 = texelFetch(g_lightClassification, int((((_2894 << 5u) + (_2880 << 9u)) + (_3131 << 2u)) >> 2u)).x;
                _3141 = _3140 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3141)
                {
                    frontier_phi_66_pred = _3130;
                    frontier_phi_66_pred_1 = _3129;
                    frontier_phi_66_pred_2 = _3128;
                    frontier_phi_66_pred_3 = _3127;
                    frontier_phi_66_pred_4 = _3126;
                    frontier_phi_66_pred_5 = _3125;
                }
                else
                {
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    uint _3255;
                    _3249 = _3125;
                    _3250 = _3126;
                    _3251 = _3127;
                    _3252 = _3128;
                    _3253 = _3129;
                    _3254 = _3130;
                    _3255 = _3140;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    for (;;)
                    {
                        uint _3259 = uint(findLSB(_3255)) + (_3131 << 5u);
                        uint _3256 = (_3255 + 4294967295u) & _3255;
                        uint _3261 = _3259 * 48u;
                        vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 3u)).x));
                        uint _3281 = (_3259 * 48u) + 4u;
                        vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3281)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 3u)).x));
                        uint _3300 = (_3259 * 48u) + 8u;
                        vec3 _3311 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x));
                        float _3315 = _3275.x - _1959;
                        float _3316 = _3275.y - _1960;
                        float _3317 = _3275.z - _1961;
                        float _3318 = dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317));
                        float _3321 = inversesqrt(_3318);
                        float _3322 = _3321 * _3315;
                        float _3323 = _3321 * _3316;
                        float _3324 = _3321 * _3317;
                        float _3325 = dot(vec3(_822, _825, _828), vec3(_3322, _3323, _3324));
                        float _3330 = 1.0 - (_3318 * _3275.w);
                        float _4682 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3331 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3332 = sqrt(_3318) * _3294.w;
                        float _3335 = 1.39999997615814208984375 / (_3332 + 1.39999997615814208984375);
                        float _3336 = _3335 * _3335;
                        float _3339 = ((1.0 - _3336) * _3325) + _3336;
                        float _3342 = _3332 * _3332;
                        float _3346 = ((isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0))) * _3331) / ((_3342 * 0.699999988079071044921875) + 1.0);
                        float _3350 = (-0.0) - _1959;
                        float _3351 = (-0.0) - _1960;
                        float _3352 = (-0.0) - _1961;
                        float _3356 = inversesqrt(dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352)));
                        float _3357 = _3356 * _3350;
                        float _3358 = _3356 * _3351;
                        float _3359 = _3356 * _3352;
                        float _3366 = exp2(log2(1.0 / ((_3342 * 3.5) + 5.0)) * 0.25);
                        float _3367 = 1.0 - _897;
                        float _3374 = sqrt(1.0 - ((1.0 - (_3367 * _3367)) * (1.0 - (_3366 * _3366))));
                        float _3375 = _3374 * _3374;
                        float _3376 = _3375 * _3375;
                        float _3377 = _3357 + _3322;
                        float _3378 = _3358 + _3323;
                        float _3379 = _3359 + _3324;
                        float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                        float _3387 = dot(vec3(_822, _825, _828), vec3(_3357, _3358, _3359));
                        float _4698 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3390 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3391 = dot(vec3(_822, _825, _828), vec3(_3383 * _3377, _3383 * _3378, _3383 * _3379));
                        float _4709 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3398 = ((_3394 * _3394) * (_3376 + (-1.0))) + 1.0;
                        float _3399 = _3335 * _3375;
                        float _3400 = _3399 * _3399;
                        float _3403 = ((1.0 - _3400) * _3325) + _3400;
                        float _4720 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3404 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                        float _3405 = 1.0 - _3375;
                        float _3415 = (0.5 / (((_3404 * ((_3390 * _3405) + _3375)) + 9.9999999392252902907785028219223e-09) + (((_3404 * _3405) + _3375) * _3390))) * _3404;
                        float _4731 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3426 = (((_3376 * 3.1415927410125732421875) * (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) / ((_3398 * _3398) * ((_3342 * 2.1991131305694580078125) + 3.141590118408203125))) * _3331;
                        _3184 = (_3346 * _3294.x) + _3252;
                        _3185 = (_3346 * _3294.y) + _3253;
                        _3186 = (_3346 * _3294.z) + _3254;
                        _3181 = (_3426 * _3311.x) + _3249;
                        _3182 = (_3426 * _3311.y) + _3250;
                        _3183 = (_3426 * _3311.z) + _3251;
                        if (_3256 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3249 = _3181;
                            _3250 = _3182;
                            _3251 = _3183;
                            _3252 = _3184;
                            _3253 = _3185;
                            _3254 = _3186;
                            _3255 = _3256;
                        }
                    }
                    frontier_phi_66_pred = _3186;
                    frontier_phi_66_pred_1 = _3185;
                    frontier_phi_66_pred_2 = _3184;
                    frontier_phi_66_pred_3 = _3183;
                    frontier_phi_66_pred_4 = _3182;
                    frontier_phi_66_pred_5 = _3181;
                }
                _2991 = frontier_phi_66_pred;
                _2989 = frontier_phi_66_pred_1;
                _2987 = frontier_phi_66_pred_2;
                _2985 = frontier_phi_66_pred_3;
                _2983 = frontier_phi_66_pred_4;
                _2981 = frontier_phi_66_pred_5;
                uint _3132 = _3131 + 1u;
                if (_3132 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3125 = _2981;
                    _3126 = _2983;
                    _3127 = _2985;
                    _3128 = _2987;
                    _3129 = _2989;
                    _3130 = _2991;
                    _3131 = _3132;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
        }
        uvec4 _2994 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2995 = _2994.z;
        uint _2997 = (_2995 >> 8u) & 15u;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        if (((4294967295u << _2997) & _2900) == 0u)
        {
            _3093 = _2980;
            _3095 = _2982;
            _3097 = _2984;
            _3099 = _2986;
            _3101 = _2988;
            _3103 = _2990;
        }
        else
        {
            float _3118 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
            float _3119 = _3118 * _1959;
            float _3120 = _3118 * _1960;
            float _3121 = _3118 * _1961;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2997 < ((_2995 >> 12u) & 15u))
            {
                float _3094;
                float _3096;
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3232 = _2980;
                float _3233 = _2982;
                float _3234 = _2984;
                float _3235 = _2986;
                float _3236 = _2988;
                float _3237 = _2990;
                uint _3238 = _2997;
                uint _3247;
                bool _3248;
                for (;;)
                {
                    _3247 = texelFetch(g_lightClassification, int((((_2894 << 5u) + (_2880 << 9u)) + (_3238 << 2u)) >> 2u)).x;
                    _3248 = _3247 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3248)
                    {
                        frontier_phi_72_pred = _3237;
                        frontier_phi_72_pred_1 = _3236;
                        frontier_phi_72_pred_2 = _3235;
                        frontier_phi_72_pred_3 = _3234;
                        frontier_phi_72_pred_4 = _3233;
                        frontier_phi_72_pred_5 = _3232;
                    }
                    else
                    {
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3444 = _3232;
                        float _3445 = _3233;
                        float _3446 = _3234;
                        float _3447 = _3235;
                        float _3448 = _3236;
                        float _3449 = _3237;
                        uint _3450 = _3247;
                        uint _3451;
                        vec4 _3476;
                        float _3477;
                        vec4 _3492;
                        vec3 _3504;
                        vec4 _3519;
                        vec4 _3534;
                        float _3581;
                        bool _3582;
                        for (;;)
                        {
                            uint _3461 = ((_3238 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3450));
                            _3451 = (_3450 + 4294967295u) & _3450;
                            uint _3463 = _3461 * 40u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            _3477 = _3476.w;
                            uint _3479 = (_3461 * 40u) + 4u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3494 = (_3461 * 40u) + 8u;
                            _3504 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x));
                            uint _3506 = (_3461 * 40u) + 16u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3521 = (_3461 * 40u) + 20u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3537 = (_3461 * 40u) + 24u;
                            vec4 _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3556 = (_3461 * 40u) + 28u;
                            vec4 _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            _3581 = fma(_1961, _3569.z, fma(_1960, _3569.y, _3569.x * _1959)) + _3569.w;
                            _3582 = !((fma(_1961, _3550.z, fma(_1960, _3550.y, _3550.x * _1959)) + _3550.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3582)
                            {
                                float _3609 = _3476.x - _1959;
                                float _3610 = _3476.y - _1960;
                                float _3611 = _3476.z - _1961;
                                float _3612 = dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611));
                                float _3615 = inversesqrt(_3612);
                                float _3616 = _3615 * _3609;
                                float _3617 = _3615 * _3610;
                                float _3618 = _3615 * _3611;
                                float _3622 = 1.0 - (_3612 / (_3477 * _3477));
                                float _4742 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3627 = sqrt(_3612) * _3492.w;
                                float _3629 = 1.39999997615814208984375 / (_3627 + 1.39999997615814208984375);
                                float _3630 = _3629 * _3629;
                                float _3633 = ((1.0 - _3630) * dot(vec3(_3616, _3617, _3618), vec3(_822, _825, _828))) + _3630;
                                float _3636 = _3627 * _3627;
                                float _3640 = (fma(_1961, _3519.z, fma(_1960, _3519.y, _3519.x * _1959)) + _3519.w) / _3581;
                                float _3641 = (fma(_1961, _3534.z, fma(_1960, _3534.y, _3534.x * _1959)) + _3534.w) / _3581;
                                float _3645 = 1.0 - dot(vec2(_3640, _3641), vec2(_3640, _3641));
                                float _4758 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3647 = _3646 * (((isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0))) * _3623) / ((_3636 * 0.699999988079071044921875) + 1.0));
                                float _3659 = exp2(log2(1.0 / ((_3636 * 3.5) + 5.0)) * 0.25);
                                float _3660 = 1.0 - _897;
                                float _3667 = sqrt(1.0 - ((1.0 - (_3660 * _3660)) * (1.0 - (_3659 * _3659))));
                                float _3668 = _3667 * _3667;
                                float _3669 = _3668 * _3668;
                                float _3670 = _3616 - _3119;
                                float _3671 = _3617 - _3120;
                                float _3672 = _3618 - _3121;
                                float _3676 = inversesqrt(dot(vec3(_3670, _3671, _3672), vec3(_3670, _3671, _3672)));
                                float _3680 = dot(vec3(_822, _825, _828), vec3((-0.0) - _3119, (-0.0) - _3120, (-0.0) - _3121));
                                float _4769 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3684 = dot(vec3(_822, _825, _828), vec3(_3676 * _3670, _3676 * _3671, _3676 * _3672));
                                float _4780 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3687 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3691 = ((_3687 * _3687) * (_3669 + (-1.0))) + 1.0;
                                float _3692 = _3629 * _3668;
                                float _3693 = _3692 * _3692;
                                float _3699 = ((1.0 - _3693) * dot(vec3(_822, _825, _828), vec3(_3616, _3617, _3618))) + _3693;
                                float _4791 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3701 = 1.0 - _3668;
                                float _3711 = (0.5 / (((_3700 * ((_3683 * _3701) + _3668)) + 9.9999999392252902907785028219223e-09) + (((_3700 * _3701) + _3668) * _3683))) * _3700;
                                float _4802 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3721 = (_3646 * _3623) * (((_3669 * 3.1415927410125732421875) * (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) / ((_3691 * _3691) * ((_3636 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3647 * _3492.y;
                                frontier_phi_78_pred_1 = _3647 * _3492.x;
                                frontier_phi_78_pred_2 = _3721 * _3504.z;
                                frontier_phi_78_pred_3 = _3721 * _3504.y;
                                frontier_phi_78_pred_4 = _3721 * _3504.x;
                                frontier_phi_78_pred_5 = _3647 * _3492.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3729 = frontier_phi_78_pred;
                            _3728 = frontier_phi_78_pred_1;
                            _3727 = frontier_phi_78_pred_2;
                            _3726 = frontier_phi_78_pred_3;
                            _3725 = frontier_phi_78_pred_4;
                            _3730 = frontier_phi_78_pred_5;
                            _3434 = _3728 + _3447;
                            _3435 = _3729 + _3448;
                            _3436 = _3730 + _3449;
                            _3431 = _3725 + _3444;
                            _3432 = _3726 + _3445;
                            _3433 = _3727 + _3446;
                            if (_3451 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3451;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3436;
                        frontier_phi_72_pred_1 = _3435;
                        frontier_phi_72_pred_2 = _3434;
                        frontier_phi_72_pred_3 = _3433;
                        frontier_phi_72_pred_4 = _3432;
                        frontier_phi_72_pred_5 = _3431;
                    }
                    _3104 = frontier_phi_72_pred;
                    _3102 = frontier_phi_72_pred_1;
                    _3100 = frontier_phi_72_pred_2;
                    _3098 = frontier_phi_72_pred_3;
                    _3096 = frontier_phi_72_pred_4;
                    _3094 = frontier_phi_72_pred_5;
                    uint _3239 = _3238 + 1u;
                    if (_3239 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3232 = _3094;
                        _3233 = _3096;
                        _3234 = _3098;
                        _3235 = _3100;
                        _3236 = _3102;
                        _3237 = _3104;
                        _3238 = _3239;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3104;
                frontier_phi_60_61_ladder_1 = _3102;
                frontier_phi_60_61_ladder_2 = _3098;
                frontier_phi_60_61_ladder_3 = _3096;
                frontier_phi_60_61_ladder_4 = _3094;
                frontier_phi_60_61_ladder_5 = _3100;
            }
            else
            {
                frontier_phi_60_61_ladder = _2990;
                frontier_phi_60_61_ladder_1 = _2988;
                frontier_phi_60_61_ladder_2 = _2984;
                frontier_phi_60_61_ladder_3 = _2982;
                frontier_phi_60_61_ladder_4 = _2980;
                frontier_phi_60_61_ladder_5 = _2986;
            }
            _3093 = frontier_phi_60_61_ladder_4;
            _3095 = frontier_phi_60_61_ladder_3;
            _3097 = frontier_phi_60_61_ladder_2;
            _3099 = frontier_phi_60_61_ladder_5;
            _3101 = frontier_phi_60_61_ladder_1;
            _3103 = frontier_phi_60_61_ladder;
        }
        float _3108 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
        _2913 = (_3108 * _3099) + _2425;
        _2915 = (_3108 * _3101) + _2427;
        _2917 = (_3108 * _3103) + _2429;
        _2919 = ((_3093 * _866) * _3108) + _2763;
        _2921 = ((_3095 * _868) * _3108) + _2765;
        _2923 = ((_3097 * _869) * _3108) + _2767;
    }
    else
    {
        _2913 = _2425;
        _2915 = _2427;
        _2917 = _2429;
        _2919 = _2763;
        _2921 = _2765;
        _2923 = _2767;
    }
    float _4818 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4829 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4840 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    uint _2943 = _841 + 6u;
    float _2951 = _803 / cbSceneParam._m0[86u].x;
    float _2952 = _804 / cbSceneParam._m0[86u].y;
    vec4 _2966 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2951, _2952, (log2((isnan(cbSceneParam._m0[77u].w) ? _738 : (isnan(_738) ? cbSceneParam._m0[77u].w : min(_738, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2968 = _2966.x;
    float _2969 = _2966.y;
    float _2970 = _2966.z;
    float _2971 = _2966.w;
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    if (_738 > cbSceneParam._m0[78u].w)
    {
        float _3005 = isnan(_738) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _738 : min(cbSceneParam._m0[80u].w, _738));
        float _3006 = _3005 / _738;
        float _3017 = _3006 * _788;
        float _3018 = _789 * _3006;
        float _3019 = (-0.0) - _3018;
        float _3021 = _3006 * _790;
        float _3023 = (cbSceneParam._m0[77u].w * _3019) / _3005;
        float _3024 = _3023 + cbSceneParam._m0[79u].w;
        float _3025 = cbSceneParam._m0[79u].w - _3018;
        float _3031 = sqrt(((_3017 * _3017) + (_3018 * _3018)) + (_3021 * _3021));
        float _3034 = (1.0 - (cbSceneParam._m0[77u].w / _3005)) * _3031;
        float _3039 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3041 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3194;
        if (abs((_3019 - _3023) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3194 = ((((_3024 > 0.0) ? exp2(_3039 * _3024) : (2.0 - exp2(_3041 * _3024))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3034;
        }
        else
        {
            float _3154 = 1.0 / cbSceneParam._m0[80u].x;
            float _3155 = isnan(_3025) ? _3024 : (isnan(_3024) ? _3025 : max(_3024, _3025));
            float _3156 = isnan(_3025) ? _3024 : (isnan(_3024) ? _3025 : min(_3024, _3025));
            float _3165 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : min(_3155, 0.0));
            float _3166 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : min(_3156, 0.0));
            _3194 = ((abs(_3031 / _3019) * cbSceneParam._m0[80u].y) * ((((_3165 - _3166) * 2.0) - ((exp2(_3039 * (isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0)))) - exp2(_3039 * (isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))))) * _3154)) - ((exp2(_3041 * _3165) - exp2(_3041 * _3166)) * _3154))) + (_3034 * cbSceneParam._m0[80u].z);
        }
        vec4 _3196 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2951, _2952, 1.0), 0.0);
        float _3205 = exp2((_3194 * (-1.44269502162933349609375)) * (1.0 - _3196.w));
        float _3206 = log2(_3205);
        float _3222 = log2(_2971);
        _3043 = (exp2(_3222 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3206 * cbSceneParam._m0[78u].x)) * _3196.x) / cbSceneParam._m0[78u].x)) + _2968;
        _3045 = (exp2(_3222 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3206 * cbSceneParam._m0[78u].y)) * _3196.y) / cbSceneParam._m0[78u].y)) + _2969;
        _3047 = (exp2(_3222 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3206 * cbSceneParam._m0[78u].z)) * _3196.z) / cbSceneParam._m0[78u].z)) + _2970;
        _3049 = _3205 * _2971;
    }
    else
    {
        _3043 = _2968;
        _3045 = _2969;
        _3047 = _2970;
        _3049 = _2971;
    }
    float _3061 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3062 = _3061 == 3.0;
    float _3063 = log2(_3049);
    float _3070 = exp2(_3063 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2913 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _881))) + ((_2919 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1691)) * cbPerFrame._m0[3u].x));
    float _3071 = exp2(_3063 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2915 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _881))) + ((_2921 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1691)) * cbPerFrame._m0[3u].x));
    float _3072 = exp2(_3063 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2917 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _881))) + ((_2923 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1691)) * cbPerFrame._m0[3u].x));
    float _3081 = (_3061 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3081 * (_3062 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3043)));
    SV_Target.y = _3081 * (_3062 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3045)));
    SV_Target.z = _3081 * (_3062 ? _3072 : (_3072 + (cbSceneParam._m0[72u].w * _3047)));
    SV_Target.w = cbInstanceData._m0[_2943].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2943].w;
}


