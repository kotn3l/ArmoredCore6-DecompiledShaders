#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1405;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _270 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _270.x * cbMtdParam._m0[10u].x;
    float _277 = _270.y * cbMtdParam._m0[10u].y;
    float _278 = _270.z * cbMtdParam._m0[10u].z;
    vec4 _296 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _346 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _356 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _346)) + 1.0;
    float _4016 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _357 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _364 = (_357 * ((_296.x * cbMtdParam._m0[11u].x) - _276)) + _276;
    float _365 = (_357 * ((_296.y * cbMtdParam._m0[11u].y) - _277)) + _277;
    float _366 = (_357 * ((_296.z * cbMtdParam._m0[11u].z) - _278)) + _278;
    vec4 _384 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _415 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _346)) + 1.0;
    float _4027 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _423 = (_416 * ((_384.x * cbMtdParam._m0[12u].x) - _364)) + _364;
    float _424 = (_416 * ((_384.y * cbMtdParam._m0[12u].y) - _365)) + _365;
    float _425 = (_416 * ((_384.z * cbMtdParam._m0[12u].z) - _366)) + _366;
    vec4 _443 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _468 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _346)) + 1.0;
    float _4038 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _476 = (_469 * ((_443.x * cbMtdParam._m0[13u].x) - _423)) + _423;
    float _477 = (_469 * ((_443.y * cbMtdParam._m0[13u].y) - _424)) + _424;
    float _478 = (_469 * ((_443.z * cbMtdParam._m0[13u].z) - _425)) + _425;
    vec4 _498 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _527 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _4049 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _535 = (_528 * ((_498.x * cbMtdParam._m0[14u].x) - _476)) + _476;
    float _536 = (_528 * ((_498.y * cbMtdParam._m0[14u].y) - _477)) + _477;
    float _537 = (_528 * ((_498.z * cbMtdParam._m0[14u].z) - _478)) + _478;
    vec4 _557 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _585 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _4060 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _593 = (_586 * ((_557.x * cbMtdParam._m0[15u].x) - _535)) + _535;
    float _594 = (_586 * ((_557.y * cbMtdParam._m0[15u].y) - _536)) + _536;
    float _595 = (_586 * ((_557.z * cbMtdParam._m0[15u].z) - _537)) + _537;
    vec4 _608 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _610 = _608.x;
    float _628 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _610) * _357) + _610;
    float _646 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _628) * _416) + _628;
    float _663 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _646) * _469) + _646;
    float _665 = _663 - (_663 * TEXCOORD_5.x);
    vec4 _681 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _703 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _705 = _703.x;
    float _706 = _703.y;
    float _709 = cbMtdParam._m0[18u].y * _703.z;
    vec4 _721 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _730 = (((cbMtdParam._m0[18u].x * _721.z) - _709) * _357) + _709;
    vec4 _743 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _754 = (((cbMtdParam._m0[17u].w * _743.z) - _730) * _416) + _730;
    vec4 _767 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _776 = (((cbMtdParam._m0[17u].z * _767.z) - _754) * _469) + _754;
    float _781 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_681.z * cbMtdParam._m0[18u].z) - _776)) + _776;
    vec4 _794 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _808 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_794.z * cbMtdParam._m0[19u].y) - _781)) + _781;
    float _813 = ((_721.x - _705) * _357) + _705;
    float _814 = ((_721.y - _706) * _357) + _706;
    float _819 = ((_743.x - _813) * _416) + _813;
    float _820 = ((_743.y - _814) * _416) + _814;
    float _829 = ((((_767.x - _819) * _469) + _819) * 2.0) + (-1.0);
    float _830 = ((((_767.y - _820) * _469) + _820) * 2.0) + (-1.0);
    float _831 = dot(vec2(_829, _830), vec2(_829, _830));
    float _4071 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _836 = sqrt(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))));
    float _849 = (((((_681.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _829) + ((((_794.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _850 = (((((_681.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _830) + ((((_794.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _853 = fma(_836, _240 * NORMAL.x, fma(_850, _247 * TANGENT.x, (_233 * _225) * _849));
    float _856 = fma(_836, _240 * NORMAL.y, fma(_850, _247 * TANGENT.y, (_233 * _226) * _849));
    float _859 = fma(_836, _240 * NORMAL.z, fma(_850, _247 * TANGENT.z, (_233 * _227) * _849));
    float _863 = inversesqrt(dot(vec3(_853, _856, _859), vec3(_853, _856, _859)));
    float _864 = _863 * _853;
    float _865 = _863 * _856;
    float _866 = _863 * _859;
    float _4082 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _867 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _4104 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _4115 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4126 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _871 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _887 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _937 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _927);
    float _938 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _927);
    float _939 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _927);
    float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
    float _944 = _937 * _943;
    float _945 = _938 * _943;
    float _946 = _939 * _943;
    float _952 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _953 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _971 = fma(_866, cbSceneParam._m0[5u].z, fma(_865, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _864));
    float _974 = fma(_866, cbSceneParam._m0[6u].z, fma(_865, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _864));
    float _977 = fma(_866, cbSceneParam._m0[7u].z, fma(_865, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _864));
    uint _990 = uint(roundEven(NORMAL.w)) * 13u;
    uint _992 = (_990 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _998 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * cbInstanceData._m0[_992].x;
    float _999 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * cbInstanceData._m0[_992].y;
    float _1000 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * cbInstanceData._m0[_992].z;
    float _4137 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _4148 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _4159 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _1004 = 1.0 - _871;
    float _1005 = _1001 * _1004;
    float _1006 = _1002 * _1004;
    float _1007 = _1003 * _1004;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _871;
    float _1013 = (_1002 + (-0.039999999105930328369140625)) * _871;
    float _1014 = (_1003 + (-0.039999999105930328369140625)) * _871;
    float _1015 = _1012 + 0.039999999105930328369140625;
    float _1017 = _1013 + 0.039999999105930328369140625;
    float _1018 = _1014 + 0.039999999105930328369140625;
    vec4 _1027 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _952, cbSceneParam._m0[86u].y * _953));
    float _1030 = _1027.x * TEXCOORD_5.w;
    float _1031 = dot(vec3(_864, _865, _866), vec3(_944, _945, _946));
    float _1034 = _1031 * 2.0;
    float _1038 = (_1034 * _864) - _944;
    float _1039 = (_1034 * _865) - _945;
    float _1040 = (_1034 * _866) - _946;
    float _1044 = abs(dot(vec3(_944, _945, _946), vec3(_864, _865, _866)));
    float _4170 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1046 = sqrt(_867);
    float _1059 = exp2((_1046 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1046 * 3.0));
    float _1065 = (1.0 - _1059) * ((_1046 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1066 = _1059 * _1046;
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1098 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1404;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1129 = fma(_1102, cbModelParam._m0[26u].z, fma(_1098, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1094));
        float _1133 = fma(_1102, cbModelParam._m0[27u].z, fma(_1098, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1094));
        float _1137 = fma(_1102, cbModelParam._m0[28u].z, fma(_1098, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1094));
        float _1162 = _1094 + _864;
        float _1163 = _1098 + _865;
        float _1164 = _1102 + _866;
        float _1174 = fma(_1164, cbModelParam._m0[26u].z, fma(_1163, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1162)) - _1129;
        float _1175 = fma(_1164, cbModelParam._m0[27u].z, fma(_1163, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1162)) - _1133;
        float _1176 = fma(_1164, cbModelParam._m0[28u].z, fma(_1163, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1162)) - _1137;
        float _1180 = inversesqrt(dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176)));
        float _1193 = ((_1180 * _1174) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1129 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1180 * _1175) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1133 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1180 * _1176) / cbModelParam._m0[34u].z) + ((((((_1137 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        float _1232 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1198.x + (-0.5));
        float _1234 = _1232 * (_1198.y + (-0.5));
        float _1235 = _1232 * (_1198.z + (-0.5));
        float _1242 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1205.x + (-0.5));
        float _1244 = _1242 * (_1205.y + (-0.5));
        float _1245 = _1242 * (_1205.z + (-0.5));
        float _1252 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1212.x + (-0.5));
        float _1254 = _1252 * (_1212.y + (-0.5));
        float _1255 = _1252 * (_1212.z + (-0.5));
        float _1262 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1219.x + (-0.5));
        float _1264 = _1262 * (_1219.y + (-0.5));
        float _1265 = _1262 * (_1219.z + (-0.5));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = _1233 * 0.5;
        float _1270 = _1243 * 0.5;
        float _1271 = _1253 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1286 = (dot(vec3(_864, _865, _866), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1296 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4218 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1298 + 1.0))) + _1303) * _1266;
        float _1313 = _1234 * 0.5;
        float _1314 = _1244 * 0.5;
        float _1315 = _1254 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_864, _865, _866), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4251 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1340 + 1.0))) + _1345) * _1267;
        float _1355 = _1235 * 0.5;
        float _1356 = _1245 * 0.5;
        float _1357 = _1255 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_864, _865, _866), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4284 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1382 + 1.0))) + _1387) * _1268;
        _1404 = _1235;
        _1406 = _1234;
        _1407 = _1233;
        _1408 = _1245;
        _1409 = _1244;
        _1410 = _1243;
        _1411 = _1255;
        _1412 = _1254;
        _1413 = _1253;
        _1414 = _1268;
        _1415 = _1267;
        _1416 = _1266;
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
    }
    else
    {
        _1404 = _1405;
        _1406 = _1405;
        _1407 = _1405;
        _1408 = _1405;
        _1409 = _1405;
        _1410 = _1405;
        _1411 = _1405;
        _1412 = _1405;
        _1413 = _1405;
        _1414 = _1405;
        _1415 = _1405;
        _1416 = _1405;
        _1417 = 0.0;
        _1418 = 0.0;
        _1419 = 0.0;
    }
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1445 = fma(_1102, cbModelParam._m0[30u].z, fma(_1098, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1094));
        float _1449 = fma(_1102, cbModelParam._m0[31u].z, fma(_1098, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1094));
        float _1453 = fma(_1102, cbModelParam._m0[32u].z, fma(_1098, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1094));
        float _1476 = _1094 + _864;
        float _1477 = _1098 + _865;
        float _1478 = _1102 + _866;
        float _1488 = fma(_1478, cbModelParam._m0[30u].z, fma(_1477, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1476)) - _1445;
        float _1489 = fma(_1478, cbModelParam._m0[31u].z, fma(_1477, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1476)) - _1449;
        float _1490 = fma(_1478, cbModelParam._m0[32u].z, fma(_1477, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1476)) - _1453;
        float _1494 = inversesqrt(dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490)));
        float _1507 = ((_1494 * _1488) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1445 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1494 * _1489) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1449 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1509 = ((_1494 * _1490) / cbModelParam._m0[35u].z) + ((((((_1453 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        float _1544 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1511.x + (-0.5));
        float _1546 = _1544 * (_1511.y + (-0.5));
        float _1547 = _1544 * (_1511.z + (-0.5));
        float _1554 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1518.x + (-0.5));
        float _1556 = _1554 * (_1518.y + (-0.5));
        float _1557 = _1554 * (_1518.z + (-0.5));
        float _1564 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1525.x + (-0.5));
        float _1566 = _1564 * (_1525.y + (-0.5));
        float _1567 = _1564 * (_1525.z + (-0.5));
        float _1574 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1532.x + (-0.5));
        float _1576 = _1574 * (_1532.y + (-0.5));
        float _1577 = _1574 * (_1532.z + (-0.5));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = _1545 * 0.5;
        float _1582 = _1555 * 0.5;
        float _1583 = _1565 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_864, _865, _866), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4347 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1608 + 1.0))) + _1613) * _1578;
        float _1623 = _1546 * 0.5;
        float _1624 = _1556 * 0.5;
        float _1625 = _1566 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_864, _865, _866), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4358 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4369 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4380 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_1650 + 1.0))) + _1655) * _1579;
        float _1665 = _1547 * 0.5;
        float _1666 = _1557 * 0.5;
        float _1667 = _1567 * 0.5;
        float _1668 = dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667));
        float _1673 = (_1668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1668);
        float _1681 = (dot(vec3(_864, _865, _866), vec3(_1673 * _1665, _1673 * _1666, _1673 * _1667)) + 1.0) * 0.5;
        float _4391 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1690 = sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4402 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1692 = _1691 * 2.0;
        float _1696 = (1.0 - _1691) / (_1691 + 1.0);
        float _4413 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1706 = ((((1.0 - _1697) * (_1692 + 2.0)) * exp2(log2(isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_1692 + 1.0))) + _1697) * _1580;
        _1714 = _1547;
        _1715 = _1546;
        _1716 = _1545;
        _1717 = _1557;
        _1718 = _1556;
        _1719 = _1555;
        _1720 = _1567;
        _1721 = _1566;
        _1722 = _1565;
        _1723 = _1580;
        _1724 = _1579;
        _1725 = _1578;
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
        _1728 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)));
    }
    else
    {
        _1714 = _1405;
        _1715 = _1405;
        _1716 = _1405;
        _1717 = _1405;
        _1718 = _1405;
        _1719 = _1405;
        _1720 = _1405;
        _1721 = _1405;
        _1722 = _1405;
        _1723 = _1405;
        _1724 = _1405;
        _1725 = _1405;
        _1726 = 0.0;
        _1727 = 0.0;
        _1728 = 0.0;
    }
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1417)) + _1417;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1418)) + _1418;
    float _1740 = (cbModelParam._m0[1u].x * (_1728 - _1419)) + _1419;
    float _1761 = fma(_1740, cbSceneParam._m0[89u].z, fma(_1739, cbSceneParam._m0[89u].y, _1738 * cbSceneParam._m0[89u].x));
    float _1764 = fma(_1740, cbSceneParam._m0[90u].z, fma(_1739, cbSceneParam._m0[90u].y, _1738 * cbSceneParam._m0[90u].x));
    float _1767 = fma(_1740, cbSceneParam._m0[91u].z, fma(_1739, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1738));
    float _1782 = _1038 * 0.5;
    float _1783 = _1039 * 0.5;
    float _1784 = _1040 * 0.5;
    float _1785 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1716, _1719, _1722, _1725));
    float _1788 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1791 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1825;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1798 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1404, _1408, _1411, _1414));
        float _1802 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1406, _1409, _1412, _1415));
        float _1806 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1407, _1410, _1413, _1416));
        float _1813 = dot(vec4(cbModelParam._m0[39u]), vec4(_1782, _1783, _1784, 1.0));
        _1825 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1813) ? 0.0 : (isnan(0.0) ? _1813 : max(0.0, _1813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1825 = 1.0;
    }
    float _1836;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1827 = dot(vec4(cbModelParam._m0[40u]), vec4(_1782, _1783, _1784, 1.0));
        _1836 = dot(vec3(isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1827) ? 0.0 : (isnan(0.0) ? _1827 : max(0.0, _1827))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1836 = 1.0;
    }
    float _1840 = (_1836 * cbModelParam._m0[1u].x) + (_1825 * (1.0 - cbModelParam._m0[1u].x));
    float _1850 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _867);
    float _1851 = isnan(_1850) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1850 : min(cbModelParam._m0[25u].z, _1850));
    float _1931;
    float _1933;
    float _1935;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1898 = fma(_1102, cbModelParam._m0[13u].z, fma(_1098, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1094)) + cbModelParam._m0[13u].w;
        float _1902 = fma(_1102, cbModelParam._m0[14u].z, fma(_1098, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1094)) + cbModelParam._m0[14u].w;
        float _1906 = fma(_1102, cbModelParam._m0[15u].z, fma(_1098, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1094)) + cbModelParam._m0[15u].w;
        float _1909 = fma(_1040, cbModelParam._m0[13u].z, fma(_1039, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1038));
        float _1912 = fma(_1040, cbModelParam._m0[14u].z, fma(_1039, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1038));
        float _1915 = fma(_1040, cbModelParam._m0[15u].z, fma(_1039, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1038));
        float _1943;
        if (_1909 > 0.0)
        {
            _1943 = abs((1.0 - _1898) / _1909);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1898 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1943 = frontier_phi_14_12_ladder;
        }
        float _2114;
        if (_1912 > 0.0)
        {
            _2114 = abs((1.0 - _1902) / _1912);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1902 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2114 = frontier_phi_23_19_ladder;
        }
        float _2410;
        if (_1915 > 0.0)
        {
            _2410 = abs((1.0 - _1906) / _1915);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1906 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2410 = frontier_phi_35_30_ladder;
        }
        float _2412 = isnan(_2114) ? _1943 : (isnan(_1943) ? _2114 : min(_1943, _2114));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1909) + _1898;
        float _2418 = (_2413 * _1912) + _1902;
        float _2419 = (_2413 * _1915) + _1906;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2422 = (-1.0) - _2420;
        float _2424 = _2420 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2419 > _2424) || ((_2419 < _2422) || ((_2418 > _2424) || ((_2418 < _2422) || ((_2417 < _2422) || (_2417 > _2424))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2564 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2419, cbModelParam._m0[9u].z, fma(_2418, cbModelParam._m0[9u].y, _2417 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2419, cbModelParam._m0[10u].z, fma(_2418, cbModelParam._m0[10u].y, _2417 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2419, cbModelParam._m0[11u].z, fma(_2418, cbModelParam._m0[11u].y, _2417 * cbModelParam._m0[11u].x))), _1851);
            frontier_phi_13_35_ladder = _2564.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2564.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2564.x * cbModelParam._m0[1u].y;
        }
        _1931 = frontier_phi_13_35_ladder_2;
        _1933 = frontier_phi_13_35_ladder_1;
        _1935 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1919 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1038, _1039, _1040), _1851);
        _1931 = _1919.x * cbModelParam._m0[1u].y;
        _1933 = _1919.y * cbModelParam._m0[1u].y;
        _1935 = _1919.z * cbModelParam._m0[1u].y;
    }
    float _1939 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _867);
    float _1940 = isnan(_1939) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1939 : min(cbModelParam._m0[25u].w, _1939));
    float _2029;
    float _2031;
    float _2033;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1993 = fma(_1102, cbModelParam._m0[21u].z, fma(_1098, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1094)) + cbModelParam._m0[21u].w;
        float _1997 = fma(_1102, cbModelParam._m0[22u].z, fma(_1098, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1094)) + cbModelParam._m0[22u].w;
        float _2001 = fma(_1102, cbModelParam._m0[23u].z, fma(_1098, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1094)) + cbModelParam._m0[23u].w;
        float _2004 = fma(_1040, cbModelParam._m0[21u].z, fma(_1039, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1038));
        float _2007 = fma(_1040, cbModelParam._m0[22u].z, fma(_1039, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1038));
        float _2010 = fma(_1040, cbModelParam._m0[23u].z, fma(_1039, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1038));
        float _2119;
        if (_2004 > 0.0)
        {
            _2119 = abs((1.0 - _1993) / _2004);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1993 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2119 = frontier_phi_25_21_ladder;
        }
        float _2437;
        if (_2007 > 0.0)
        {
            _2437 = abs((1.0 - _1997) / _2007);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1997 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2437 = frontier_phi_37_32_ladder;
        }
        float _2775;
        if (_2010 > 0.0)
        {
            _2775 = abs((1.0 - _2001) / _2010);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2001 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2775 = frontier_phi_47_44_ladder;
        }
        float _2777 = isnan(_2437) ? _2119 : (isnan(_2119) ? _2437 : min(_2119, _2437));
        float _2778 = isnan(_2775) ? _2777 : (isnan(_2777) ? _2775 : min(_2777, _2775));
        float _2782 = (_2778 * _2004) + _1993;
        float _2783 = (_2778 * _2007) + _1997;
        float _2784 = (_2778 * _2010) + _2001;
        float _2785 = _2778 * 9.9999997473787516355514526367188e-05;
        float _2786 = (-1.0) - _2785;
        float _2788 = _2785 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2784 > _2788) || ((_2784 < _2786) || ((_2783 > _2788) || ((_2783 < _2786) || ((_2782 < _2786) || (_2782 > _2788))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2784, cbModelParam._m0[17u].z, fma(_2783, cbModelParam._m0[17u].y, _2782 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2784, cbModelParam._m0[18u].z, fma(_2783, cbModelParam._m0[18u].y, _2782 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2784, cbModelParam._m0[19u].z, fma(_2783, cbModelParam._m0[19u].y, _2782 * cbModelParam._m0[19u].x))), _1940);
            frontier_phi_22_47_ladder = _2906.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2906.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2906.x * cbModelParam._m0[1u].z;
        }
        _2029 = frontier_phi_22_47_ladder_2;
        _2031 = frontier_phi_22_47_ladder_1;
        _2033 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2013 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1038, _1039, _1040), _1940);
        _2029 = _2013.x * cbModelParam._m0[1u].z;
        _2031 = _2013.y * cbModelParam._m0[1u].z;
        _2033 = _2013.z * cbModelParam._m0[1u].z;
    }
    float _2046 = (((_1065 * _1015) + _1066) * _1030) * ((cbModelParam._m0[1u].w * (_2029 - _1931)) + _1931);
    float _2048 = (((_1065 * _1017) + _1066) * _1030) * ((cbModelParam._m0[1u].w * (_2031 - _1933)) + _1933);
    float _2050 = (((_1065 * _1018) + _1066) * _1030) * ((cbModelParam._m0[1u].w * (_2033 - _1935)) + _1935);
    float _2053 = fma(_2050, cbSceneParam._m0[89u].z, fma(_2048, cbSceneParam._m0[89u].y, _2046 * cbSceneParam._m0[89u].x));
    float _2056 = fma(_2050, cbSceneParam._m0[90u].z, fma(_2048, cbSceneParam._m0[90u].y, _2046 * cbSceneParam._m0[90u].x));
    float _2059 = fma(_2050, cbSceneParam._m0[91u].z, fma(_2048, cbSceneParam._m0[91u].y, _2046 * cbSceneParam._m0[91u].x));
    float _2093 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2097 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2101 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2105 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2106 = _2093 / _2105;
    float _2107 = _2097 / _2105;
    float _2108 = _2101 / _2105;
    float _2255;
    float _2256;
    float _2257;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2135 = ((uint(_2108 > cbSceneParam._m0[59u].y) + uint(_2108 > cbSceneParam._m0[59u].x)) + uint(_2108 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2136 = _2135 + 43u;
        uint _2144 = _2135 + 44u;
        uint _2152 = _2135 + 45u;
        uint _2160 = _2135 + 46u;
        float _2171 = fma(_2105, cbSceneParam._m0[_2136].w, fma(_2101, cbSceneParam._m0[_2136].z, fma(_2097, cbSceneParam._m0[_2136].y, _2093 * cbSceneParam._m0[_2136].x)));
        float _2175 = fma(_2105, cbSceneParam._m0[_2144].w, fma(_2101, cbSceneParam._m0[_2144].z, fma(_2097, cbSceneParam._m0[_2144].y, _2093 * cbSceneParam._m0[_2144].x)));
        float _2183 = fma(_2105, cbSceneParam._m0[_2160].w, fma(_2101, cbSceneParam._m0[_2160].z, fma(_2097, cbSceneParam._m0[_2160].y, _2093 * cbSceneParam._m0[_2160].x)));
        float _2188 = cbSceneParam._m0[33u].z * _2183;
        float _2190 = cbSceneParam._m0[33u].w * _2183;
        float _2193 = fma(_2105, cbSceneParam._m0[_2152].w, fma(_2101, cbSceneParam._m0[_2152].z, fma(_2097, cbSceneParam._m0[_2152].y, _2093 * cbSceneParam._m0[_2152].x))) / _2183;
        float _2241 = (cbSceneParam._m0[33u].x - sqrt(((_2107 * _2107) + (_2106 * _2106)) + (_2108 * _2108))) * cbSceneParam._m0[33u].y;
        float _4539 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2248 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2188 + _2171) / _2183, (_2190 + _2175) / _2183), _2193), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2190 + _2171) / _2183, (_2175 - _2188) / _2183), _2193), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2171 - _2188) / _2183, (_2175 - _2190) / _2183), _2193), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2171 - _2190) / _2183, (_2188 + _2175) / _2183), _2193), 0.0)).x), vec4(0.25)));
        _2255 = 1.0 - (_2248 * cbSceneParam._m0[34u].x);
        _2256 = 1.0 - (_2248 * cbSceneParam._m0[34u].y);
        _2257 = 1.0 - (_2248 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2255 = 1.0;
        _2256 = 1.0;
        _2257 = 1.0;
    }
    float _2321;
    float _2323;
    float _2325;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2309 = fma(_2105, cbSceneParam._m0[63u].w, fma(_2101, cbSceneParam._m0[63u].z, fma(_2097, cbSceneParam._m0[63u].y, _2093 * cbSceneParam._m0[63u].x)));
        float _2310 = fma(_2105, cbSceneParam._m0[60u].w, fma(_2101, cbSceneParam._m0[60u].z, fma(_2097, cbSceneParam._m0[60u].y, _2093 * cbSceneParam._m0[60u].x))) / _2309;
        float _2311 = fma(_2105, cbSceneParam._m0[61u].w, fma(_2101, cbSceneParam._m0[61u].z, fma(_2097, cbSceneParam._m0[61u].y, _2093 * cbSceneParam._m0[61u].x))) / _2309;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2310 >= cbSceneParam._m0[64u].x) && (_2311 >= cbSceneParam._m0[64u].y)) && (_2310 <= cbSceneParam._m0[64u].z)) && (_2311 <= cbSceneParam._m0[64u].w))
        {
            float _2450 = fma(_2105, cbSceneParam._m0[62u].w, fma(_2101, cbSceneParam._m0[62u].z, fma(_2097, cbSceneParam._m0[62u].y, _2093 * cbSceneParam._m0[62u].x))) / _2309;
            float _2454 = isnan(cbSceneParam._m0[41u].w) ? _2450 : (isnan(_2450) ? cbSceneParam._m0[41u].w : max(_2450, cbSceneParam._m0[41u].w));
            float _2497 = (cbSceneParam._m0[33u].x - sqrt(((_2107 * _2107) + (_2106 * _2106)) + (_2108 * _2108))) * cbSceneParam._m0[33u].y;
            float _4555 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
            float _2504 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2310, cbSceneParam._m0[33u].w + _2311), _2454), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2310, _2311 - cbSceneParam._m0[33u].z), _2454), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2310 - cbSceneParam._m0[33u].z, _2311 - cbSceneParam._m0[33u].w), _2454), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2310 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2311), _2454), 0.0)).x), vec4(0.25)));
            float _2508 = 1.0 - (_2504 * cbSceneParam._m0[34u].x);
            float _2509 = 1.0 - (_2504 * cbSceneParam._m0[34u].y);
            float _2510 = 1.0 - (_2504 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2510) ? _2257 : (isnan(_2257) ? _2510 : min(_2257, _2510));
            frontier_phi_34_33_ladder_1 = isnan(_2509) ? _2256 : (isnan(_2256) ? _2509 : min(_2256, _2509));
            frontier_phi_34_33_ladder_2 = isnan(_2508) ? _2255 : (isnan(_2255) ? _2508 : min(_2255, _2508));
        }
        else
        {
            frontier_phi_34_33_ladder = _2257;
            frontier_phi_34_33_ladder_1 = _2256;
            frontier_phi_34_33_ladder_2 = _2255;
        }
        _2321 = frontier_phi_34_33_ladder_2;
        _2323 = frontier_phi_34_33_ladder_1;
        _2325 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2321 = _2255;
        _2323 = _2256;
        _2325 = _2257;
    }
    uvec4 _2330 = floatBitsToUint(cbInstanceData._m0[_990 + 5u]);
    uint _2332 = _2330.x * 14u;
    uint _2333 = _2332 + 13u;
    float _2340 = _1030 + (-1.0);
    float _2345 = (cbLight._m0[_2333].x * _2340) + 1.0;
    float _2346 = (cbLight._m0[_2333].y * _2340) + 1.0;
    float _2347 = (cbLight._m0[_2333].z * _2340) + 1.0;
    float _2348 = (cbLight._m0[_2333].w * _2340) + 1.0;
    uint _2349 = _2332 + 5u;
    float _2355 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
    uint _2359 = _2332 + 4u;
    float _2369 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
    uint _2373 = _2332 | 1u;
    float _2384 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_864, _865, _866));
    float _2387 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_864, _865, _866));
    float _4591 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _4602 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2392 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * 0.3183098733425140380859375;
    float _2394 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * 0.3183098733425140380859375;
    float _2401 = ((cbLight._m0[_2349].x * _2355) * _2394) + (((cbLight._m0[_2359].x * _2321) * _2369) * _2392);
    float _2402 = ((_2355 * cbLight._m0[_2349].y) * _2394) + (((cbLight._m0[_2359].y * _2323) * _2369) * _2392);
    float _2403 = ((_2355 * cbLight._m0[_2349].z) * _2394) + (((cbLight._m0[_2359].z * _2325) * _2369) * _2392);
    uvec4 _2407 = floatBitsToUint(cbLight._m0[_2332 + 12u]);
    bool _2409 = _2407.x == 0u;
    float _2511;
    float _2513;
    float _2515;
    if (_2409)
    {
        _2511 = _2401;
        _2513 = _2402;
        _2515 = _2403;
    }
    else
    {
        uint _2519 = _2332 + 6u;
        float _2535 = (dot(vec3(cbLight._m0[_2332 + 2u].xyz), vec3(_864, _865, _866)) * 0.5) + 0.5;
        float _2536 = _2535 * _2535;
        float _4613 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2537 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2538 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
        _2511 = (((cbLight._m0[_2519].x * 0.3183098733425140380859375) * _2537) * _2538) + _2401;
        _2513 = (((cbLight._m0[_2519].y * 0.3183098733425140380859375) * _2537) * _2538) + _2402;
        _2515 = (((cbLight._m0[_2519].z * 0.3183098733425140380859375) * _2537) * _2538) + _2403;
    }
    bool _2518 = _2407.y == 0u;
    float _2573;
    float _2575;
    float _2577;
    if (_2518)
    {
        _2573 = _2511;
        _2575 = _2513;
        _2577 = _2515;
    }
    else
    {
        uint _2746 = _2332 + 7u;
        float _2762 = (dot(vec3(cbLight._m0[_2332 + 3u].xyz), vec3(_864, _865, _866)) * 0.5) + 0.5;
        float _2763 = _2762 * _2762;
        float _4629 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2764 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2765 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
        _2573 = (((cbLight._m0[_2746].x * 0.3183098733425140380859375) * _2764) * _2765) + _2511;
        _2575 = (((cbLight._m0[_2746].y * 0.3183098733425140380859375) * _2764) * _2765) + _2513;
        _2577 = (((cbLight._m0[_2746].z * 0.3183098733425140380859375) * _2764) * _2765) + _2515;
    }
    uint _2580 = _2332 + 8u;
    float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _867) * 0.949999988079071044921875);
    float _2594 = _2593 * _2593;
    float _2595 = cbLight._m0[_2332].x + _944;
    float _2596 = cbLight._m0[_2332].y + _945;
    float _2597 = cbLight._m0[_2332].z + _946;
    float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
    float _2602 = _2601 * _2595;
    float _2603 = _2601 * _2596;
    float _2604 = _2601 * _2597;
    float _2605 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2332].xyz));
    float _4645 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2608 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _4656 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _2609 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _2610 = dot(vec3(_864, _865, _866), vec3(_2602, _2603, _2604));
    float _4667 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _2614 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2602, _2603, _2604));
    float _4678 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2618 = _2594 * _2594;
    float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
    float _2630 = exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0);
    float _2631 = 0.959999978542327880859375 - _1012;
    float _2633 = 0.959999978542327880859375 - _1013;
    float _2634 = 0.959999978542327880859375 - _1014;
    float _2641 = 1.0 - _2594;
    float _2652 = (0.5 / (((_2609 * ((_2608 * _2641) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2609 * _2641) + _2594) * _2608))) * _2608;
    float _4689 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2654 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
    uint _2668 = _2332 + 9u;
    float _2679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _867) * 0.949999988079071044921875);
    float _2680 = _2679 * _2679;
    float _2681 = cbLight._m0[_2373].x + _944;
    float _2682 = cbLight._m0[_2373].y + _945;
    float _2683 = cbLight._m0[_2373].z + _946;
    float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
    float _2688 = _2687 * _2681;
    float _2689 = _2687 * _2682;
    float _2690 = _2687 * _2683;
    float _2691 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2373].xyz));
    float _4700 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2694 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
    float _2695 = dot(vec3(_864, _865, _866), vec3(_2688, _2689, _2690));
    float _4711 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2698 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
    float _2699 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2688, _2689, _2690));
    float _4722 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2703 = _2680 * _2680;
    float _2707 = ((_2698 * _2698) * (_2703 + (-1.0))) + 1.0;
    float _2714 = exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0);
    float _2721 = 1.0 - _2680;
    float _2731 = (0.5 / (((_2609 * ((_2694 * _2721) + _2680)) + 9.9999999392252902907785028219223e-09) + (((_2609 * _2721) + _2680) * _2694))) * _2694;
    float _4733 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2733 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2703 / ((_2707 * _2707) * 3.141590118408203125));
    float _2743 = (((((_2714 * _2631) + _1015) * cbLight._m0[_2668].x) * _2733) * _2355) + ((((cbLight._m0[_2580].x * _2321) * ((_2630 * _2631) + _1015)) * _2654) * _2369);
    float _2744 = (((((_2714 * _2633) + _1017) * cbLight._m0[_2668].y) * _2733) * _2355) + ((((cbLight._m0[_2580].y * _2323) * ((_2630 * _2633) + _1017)) * _2654) * _2369);
    float _2745 = (((((_2714 * _2634) + _1018) * cbLight._m0[_2668].z) * _2733) * _2355) + ((((cbLight._m0[_2580].z * _2325) * ((_2630 * _2634) + _1018)) * _2654) * _2369);
    float _2801;
    float _2803;
    float _2805;
    if (_2409)
    {
        _2801 = _2743;
        _2803 = _2744;
        _2805 = _2745;
    }
    else
    {
        uint _2807 = _2332 + 2u;
        uint _2811 = _2332 + 10u;
        float _2825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2807].w)) * _867) * 0.949999988079071044921875);
        float _2826 = _2825 * _2825;
        float _2827 = cbLight._m0[_2807].x + _944;
        float _2828 = cbLight._m0[_2807].y + _945;
        float _2829 = cbLight._m0[_2807].z + _946;
        float _2833 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
        float _2834 = _2833 * _2827;
        float _2835 = _2833 * _2828;
        float _2836 = _2833 * _2829;
        float _2837 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2807].xyz));
        float _4744 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2840 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2841 = dot(vec3(_864, _865, _866), vec3(_2834, _2835, _2836));
        float _4755 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2845 = dot(vec3(cbLight._m0[_2807].xyz), vec3(_2834, _2835, _2836));
        float _4766 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2849 = _2826 * _2826;
        float _2853 = ((_2844 * _2844) * (_2849 + (-1.0))) + 1.0;
        float _2860 = exp2(log2(1.0 - (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) * 5.0);
        float _2867 = 1.0 - _2826;
        float _2877 = (0.5 / (((_2609 * ((_2840 * _2867) + _2826)) + 9.9999999392252902907785028219223e-09) + (((_2609 * _2867) + _2826) * _2840))) * _2840;
        float _4777 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2879 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2849 / ((_2853 * _2853) * 3.141590118408203125));
        float _2880 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
        _2801 = (((((_2860 * _2631) + _1015) * cbLight._m0[_2811].x) * _2879) * _2880) + _2743;
        _2803 = (((((_2860 * _2633) + _1017) * cbLight._m0[_2811].y) * _2879) * _2880) + _2744;
        _2805 = (((((_2860 * _2634) + _1018) * cbLight._m0[_2811].z) * _2879) * _2880) + _2745;
    }
    float _2911;
    float _2913;
    float _2915;
    if (_2518)
    {
        _2911 = _2801;
        _2913 = _2803;
        _2915 = _2805;
    }
    else
    {
        uint _2922 = _2332 + 3u;
        uint _2926 = _2332 + 11u;
        float _2940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2922].w)) * _867) * 0.949999988079071044921875);
        float _2941 = _2940 * _2940;
        float _2942 = cbLight._m0[_2922].x + _944;
        float _2943 = cbLight._m0[_2922].y + _945;
        float _2944 = cbLight._m0[_2922].z + _946;
        float _2948 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
        float _2949 = _2948 * _2942;
        float _2950 = _2948 * _2943;
        float _2951 = _2948 * _2944;
        float _2952 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2922].xyz));
        float _4793 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2955 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
        float _2956 = dot(vec3(_864, _865, _866), vec3(_2949, _2950, _2951));
        float _4804 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2959 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2960 = dot(vec3(cbLight._m0[_2922].xyz), vec3(_2949, _2950, _2951));
        float _4815 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2964 = _2941 * _2941;
        float _2968 = ((_2959 * _2959) * (_2964 + (-1.0))) + 1.0;
        float _2975 = exp2(log2(1.0 - (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0)))) * 5.0);
        float _2982 = 1.0 - _2941;
        float _2992 = (0.5 / (((_2609 * ((_2955 * _2982) + _2941)) + 9.9999999392252902907785028219223e-09) + (((_2609 * _2982) + _2941) * _2955))) * _2955;
        float _4826 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        float _2994 = (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (_2964 / ((_2968 * _2968) * 3.141590118408203125));
        float _2995 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
        _2911 = (((((_2975 * _2631) + _1015) * cbLight._m0[_2926].x) * _2994) * _2995) + _2801;
        _2913 = (((((_2975 * _2633) + _1017) * cbLight._m0[_2926].y) * _2994) * _2995) + _2803;
        _2915 = (((((_2975 * _2634) + _1018) * cbLight._m0[_2926].z) * _2994) * _2995) + _2805;
    }
    float _3061;
    float _3063;
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    if (_2330.y == 0u)
    {
        uvec4 _3016 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3017 = _3016.x;
        uint _3028 = uint((float(_3016.y) * floor(float(uint(cbSceneParam._m0[85u].y * _953) / _3017))) + floor(float(uint(cbSceneParam._m0[85u].x * _952) / _3017)));
        float _3038 = (log2(_2108 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3039 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
        uint _3042 = uint(isnan(14.0) ? _3039 : (isnan(_3039) ? 14.0 : min(_3039, 14.0)));
        uvec4 _3047 = texelFetch(g_lightClusterGridBuffer, int(((_3042 << 2u) + (_3028 << 6u)) >> 2u));
        uint _3048 = _3047.x;
        uint _3049 = _3016.z;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        if (((((1u << ((_3049 >> 4u) & 15u)) + 4294967295u) & _3048) == 0u) || ((_3049 & 240u) == 0u))
        {
            _3128 = 0.0;
            _3130 = 0.0;
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
        }
        else
        {
            float _3129;
            float _3131;
            float _3133;
            float _3135;
            float _3137;
            float _3139;
            float _3273 = 0.0;
            float _3274 = 0.0;
            float _3275 = 0.0;
            float _3276 = 0.0;
            float _3277 = 0.0;
            float _3278 = 0.0;
            uint _3279 = 0u;
            uint _3288;
            bool _3289;
            for (;;)
            {
                _3288 = texelFetch(g_lightClassification, int((((_3042 << 5u) + (_3028 << 9u)) + (_3279 << 2u)) >> 2u)).x;
                _3289 = _3288 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3289)
                {
                    frontier_phi_66_pred = _3278;
                    frontier_phi_66_pred_1 = _3277;
                    frontier_phi_66_pred_2 = _3276;
                    frontier_phi_66_pred_3 = _3275;
                    frontier_phi_66_pred_4 = _3274;
                    frontier_phi_66_pred_5 = _3273;
                }
                else
                {
                    float _3397;
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    uint _3403;
                    _3397 = _3273;
                    _3398 = _3274;
                    _3399 = _3275;
                    _3400 = _3276;
                    _3401 = _3277;
                    _3402 = _3278;
                    _3403 = _3288;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    for (;;)
                    {
                        uint _3407 = uint(findLSB(_3403)) + (_3279 << 5u);
                        uint _3404 = (_3403 + 4294967295u) & _3403;
                        uint _3409 = _3407 * 48u;
                        vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3409)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 3u)).x));
                        uint _3429 = (_3407 * 48u) + 4u;
                        vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3429)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 3u)).x));
                        uint _3448 = (_3407 * 48u) + 8u;
                        vec3 _3459 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3448)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 2u)).x));
                        float _3463 = _3423.x - _2106;
                        float _3464 = _3423.y - _2107;
                        float _3465 = _3423.z - _2108;
                        float _3466 = dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465));
                        float _3469 = inversesqrt(_3466);
                        float _3470 = _3469 * _3463;
                        float _3471 = _3469 * _3464;
                        float _3472 = _3469 * _3465;
                        float _3473 = dot(vec3(_971, _974, _977), vec3(_3470, _3471, _3472));
                        float _3478 = 1.0 - (_3466 * _3423.w);
                        float _4852 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3479 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                        float _3480 = sqrt(_3466) * _3442.w;
                        float _3483 = 1.39999997615814208984375 / (_3480 + 1.39999997615814208984375);
                        float _3484 = _3483 * _3483;
                        float _3487 = ((1.0 - _3484) * _3473) + _3484;
                        float _3490 = _3480 * _3480;
                        float _3494 = ((isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0))) * _3479) / ((_3490 * 0.699999988079071044921875) + 1.0);
                        float _3498 = (-0.0) - _2106;
                        float _3499 = (-0.0) - _2107;
                        float _3500 = (-0.0) - _2108;
                        float _3504 = inversesqrt(dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500)));
                        float _3505 = _3504 * _3498;
                        float _3506 = _3504 * _3499;
                        float _3507 = _3504 * _3500;
                        float _3514 = exp2(log2(1.0 / ((_3490 * 3.5) + 5.0)) * 0.25);
                        float _3515 = 1.0 - _1046;
                        float _3522 = sqrt(1.0 - ((1.0 - (_3515 * _3515)) * (1.0 - (_3514 * _3514))));
                        float _3523 = _3522 * _3522;
                        float _3524 = _3523 * _3523;
                        float _3525 = _3505 + _3470;
                        float _3526 = _3506 + _3471;
                        float _3527 = _3507 + _3472;
                        float _3531 = inversesqrt(dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527)));
                        float _3535 = dot(vec3(_971, _974, _977), vec3(_3505, _3506, _3507));
                        float _4868 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                        float _3538 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                        float _3539 = dot(vec3(_971, _974, _977), vec3(_3531 * _3525, _3531 * _3526, _3531 * _3527));
                        float _4879 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3542 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                        float _3546 = ((_3542 * _3542) * (_3524 + (-1.0))) + 1.0;
                        float _3547 = _3483 * _3523;
                        float _3548 = _3547 * _3547;
                        float _3551 = ((1.0 - _3548) * _3473) + _3548;
                        float _4890 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3552 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                        float _3553 = 1.0 - _3523;
                        float _3563 = (0.5 / (((_3552 * ((_3538 * _3553) + _3523)) + 9.9999999392252902907785028219223e-09) + (((_3552 * _3553) + _3523) * _3538))) * _3552;
                        float _4901 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3574 = (((_3524 * 3.1415927410125732421875) * (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) / ((_3546 * _3546) * ((_3490 * 2.1991131305694580078125) + 3.141590118408203125))) * _3479;
                        _3332 = (_3494 * _3442.x) + _3400;
                        _3333 = (_3494 * _3442.y) + _3401;
                        _3334 = (_3494 * _3442.z) + _3402;
                        _3329 = (_3574 * _3459.x) + _3397;
                        _3330 = (_3574 * _3459.y) + _3398;
                        _3331 = (_3574 * _3459.z) + _3399;
                        if (_3404 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3397 = _3329;
                            _3398 = _3330;
                            _3399 = _3331;
                            _3400 = _3332;
                            _3401 = _3333;
                            _3402 = _3334;
                            _3403 = _3404;
                        }
                    }
                    frontier_phi_66_pred = _3334;
                    frontier_phi_66_pred_1 = _3333;
                    frontier_phi_66_pred_2 = _3332;
                    frontier_phi_66_pred_3 = _3331;
                    frontier_phi_66_pred_4 = _3330;
                    frontier_phi_66_pred_5 = _3329;
                }
                _3139 = frontier_phi_66_pred;
                _3137 = frontier_phi_66_pred_1;
                _3135 = frontier_phi_66_pred_2;
                _3133 = frontier_phi_66_pred_3;
                _3131 = frontier_phi_66_pred_4;
                _3129 = frontier_phi_66_pred_5;
                uint _3280 = _3279 + 1u;
                if (_3280 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3273 = _3129;
                    _3274 = _3131;
                    _3275 = _3133;
                    _3276 = _3135;
                    _3277 = _3137;
                    _3278 = _3139;
                    _3279 = _3280;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3128 = _3129;
            _3130 = _3131;
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
        }
        uvec4 _3142 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3143 = _3142.z;
        uint _3145 = (_3143 >> 8u) & 15u;
        float _3241;
        float _3243;
        float _3245;
        float _3247;
        float _3249;
        float _3251;
        if (((4294967295u << _3145) & _3048) == 0u)
        {
            _3241 = _3128;
            _3243 = _3130;
            _3245 = _3132;
            _3247 = _3134;
            _3249 = _3136;
            _3251 = _3138;
        }
        else
        {
            float _3266 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
            float _3267 = _3266 * _2106;
            float _3268 = _3266 * _2107;
            float _3269 = _3266 * _2108;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3145 < ((_3143 >> 12u) & 15u))
            {
                float _3242;
                float _3244;
                float _3246;
                float _3248;
                float _3250;
                float _3252;
                float _3380 = _3128;
                float _3381 = _3130;
                float _3382 = _3132;
                float _3383 = _3134;
                float _3384 = _3136;
                float _3385 = _3138;
                uint _3386 = _3145;
                uint _3395;
                bool _3396;
                for (;;)
                {
                    _3395 = texelFetch(g_lightClassification, int((((_3042 << 5u) + (_3028 << 9u)) + (_3386 << 2u)) >> 2u)).x;
                    _3396 = _3395 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3396)
                    {
                        frontier_phi_72_pred = _3385;
                        frontier_phi_72_pred_1 = _3384;
                        frontier_phi_72_pred_2 = _3383;
                        frontier_phi_72_pred_3 = _3382;
                        frontier_phi_72_pred_4 = _3381;
                        frontier_phi_72_pred_5 = _3380;
                    }
                    else
                    {
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3873;
                        float _3874;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3592 = _3380;
                        float _3593 = _3381;
                        float _3594 = _3382;
                        float _3595 = _3383;
                        float _3596 = _3384;
                        float _3597 = _3385;
                        uint _3598 = _3395;
                        uint _3599;
                        vec4 _3624;
                        float _3625;
                        vec4 _3640;
                        vec3 _3652;
                        vec4 _3667;
                        vec4 _3682;
                        float _3729;
                        bool _3730;
                        for (;;)
                        {
                            uint _3609 = ((_3386 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3598));
                            _3599 = (_3598 + 4294967295u) & _3598;
                            uint _3611 = _3609 * 40u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            _3625 = _3624.w;
                            uint _3627 = (_3609 * 40u) + 4u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3642 = (_3609 * 40u) + 8u;
                            _3652 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x));
                            uint _3654 = (_3609 * 40u) + 16u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3669 = (_3609 * 40u) + 20u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3685 = (_3609 * 40u) + 24u;
                            vec4 _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3704 = (_3609 * 40u) + 28u;
                            vec4 _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            _3729 = fma(_2108, _3717.z, fma(_2107, _3717.y, _3717.x * _2106)) + _3717.w;
                            _3730 = !((fma(_2108, _3698.z, fma(_2107, _3698.y, _3698.x * _2106)) + _3698.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3730)
                            {
                                float _3757 = _3624.x - _2106;
                                float _3758 = _3624.y - _2107;
                                float _3759 = _3624.z - _2108;
                                float _3760 = dot(vec3(_3757, _3758, _3759), vec3(_3757, _3758, _3759));
                                float _3763 = inversesqrt(_3760);
                                float _3764 = _3763 * _3757;
                                float _3765 = _3763 * _3758;
                                float _3766 = _3763 * _3759;
                                float _3770 = 1.0 - (_3760 / (_3625 * _3625));
                                float _4912 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3771 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3775 = sqrt(_3760) * _3640.w;
                                float _3777 = 1.39999997615814208984375 / (_3775 + 1.39999997615814208984375);
                                float _3778 = _3777 * _3777;
                                float _3781 = ((1.0 - _3778) * dot(vec3(_3764, _3765, _3766), vec3(_971, _974, _977))) + _3778;
                                float _3784 = _3775 * _3775;
                                float _3788 = (fma(_2108, _3667.z, fma(_2107, _3667.y, _3667.x * _2106)) + _3667.w) / _3729;
                                float _3789 = (fma(_2108, _3682.z, fma(_2107, _3682.y, _3682.x * _2106)) + _3682.w) / _3729;
                                float _3793 = 1.0 - dot(vec2(_3788, _3789), vec2(_3788, _3789));
                                float _4928 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3794 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                                float _3795 = _3794 * (((isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0))) * _3771) / ((_3784 * 0.699999988079071044921875) + 1.0));
                                float _3807 = exp2(log2(1.0 / ((_3784 * 3.5) + 5.0)) * 0.25);
                                float _3808 = 1.0 - _1046;
                                float _3815 = sqrt(1.0 - ((1.0 - (_3808 * _3808)) * (1.0 - (_3807 * _3807))));
                                float _3816 = _3815 * _3815;
                                float _3817 = _3816 * _3816;
                                float _3818 = _3764 - _3267;
                                float _3819 = _3765 - _3268;
                                float _3820 = _3766 - _3269;
                                float _3824 = inversesqrt(dot(vec3(_3818, _3819, _3820), vec3(_3818, _3819, _3820)));
                                float _3828 = dot(vec3(_971, _974, _977), vec3((-0.0) - _3267, (-0.0) - _3268, (-0.0) - _3269));
                                float _4939 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3831 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                                float _3832 = dot(vec3(_971, _974, _977), vec3(_3824 * _3818, _3824 * _3819, _3824 * _3820));
                                float _4950 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3835 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                                float _3839 = ((_3835 * _3835) * (_3817 + (-1.0))) + 1.0;
                                float _3840 = _3777 * _3816;
                                float _3841 = _3840 * _3840;
                                float _3847 = ((1.0 - _3841) * dot(vec3(_971, _974, _977), vec3(_3764, _3765, _3766))) + _3841;
                                float _4961 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3848 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3849 = 1.0 - _3816;
                                float _3859 = (0.5 / (((_3848 * ((_3831 * _3849) + _3816)) + 9.9999999392252902907785028219223e-09) + (((_3848 * _3849) + _3816) * _3831))) * _3848;
                                float _4972 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3869 = (_3794 * _3771) * (((_3817 * 3.1415927410125732421875) * (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0)))) / ((_3839 * _3839) * ((_3784 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3795 * _3640.y;
                                frontier_phi_78_pred_1 = _3795 * _3640.x;
                                frontier_phi_78_pred_2 = _3869 * _3652.z;
                                frontier_phi_78_pred_3 = _3869 * _3652.y;
                                frontier_phi_78_pred_4 = _3869 * _3652.x;
                                frontier_phi_78_pred_5 = _3795 * _3640.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3877 = frontier_phi_78_pred;
                            _3876 = frontier_phi_78_pred_1;
                            _3875 = frontier_phi_78_pred_2;
                            _3874 = frontier_phi_78_pred_3;
                            _3873 = frontier_phi_78_pred_4;
                            _3878 = frontier_phi_78_pred_5;
                            _3582 = _3876 + _3595;
                            _3583 = _3877 + _3596;
                            _3584 = _3878 + _3597;
                            _3579 = _3873 + _3592;
                            _3580 = _3874 + _3593;
                            _3581 = _3875 + _3594;
                            if (_3599 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3599;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3584;
                        frontier_phi_72_pred_1 = _3583;
                        frontier_phi_72_pred_2 = _3582;
                        frontier_phi_72_pred_3 = _3581;
                        frontier_phi_72_pred_4 = _3580;
                        frontier_phi_72_pred_5 = _3579;
                    }
                    _3252 = frontier_phi_72_pred;
                    _3250 = frontier_phi_72_pred_1;
                    _3248 = frontier_phi_72_pred_2;
                    _3246 = frontier_phi_72_pred_3;
                    _3244 = frontier_phi_72_pred_4;
                    _3242 = frontier_phi_72_pred_5;
                    uint _3387 = _3386 + 1u;
                    if (_3387 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3380 = _3242;
                        _3381 = _3244;
                        _3382 = _3246;
                        _3383 = _3248;
                        _3384 = _3250;
                        _3385 = _3252;
                        _3386 = _3387;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3252;
                frontier_phi_60_61_ladder_1 = _3250;
                frontier_phi_60_61_ladder_2 = _3246;
                frontier_phi_60_61_ladder_3 = _3244;
                frontier_phi_60_61_ladder_4 = _3242;
                frontier_phi_60_61_ladder_5 = _3248;
            }
            else
            {
                frontier_phi_60_61_ladder = _3138;
                frontier_phi_60_61_ladder_1 = _3136;
                frontier_phi_60_61_ladder_2 = _3132;
                frontier_phi_60_61_ladder_3 = _3130;
                frontier_phi_60_61_ladder_4 = _3128;
                frontier_phi_60_61_ladder_5 = _3134;
            }
            _3241 = frontier_phi_60_61_ladder_4;
            _3243 = frontier_phi_60_61_ladder_3;
            _3245 = frontier_phi_60_61_ladder_2;
            _3247 = frontier_phi_60_61_ladder_5;
            _3249 = frontier_phi_60_61_ladder_1;
            _3251 = frontier_phi_60_61_ladder;
        }
        float _3256 = isnan(1.0) ? _1030 : (isnan(_1030) ? 1.0 : min(_1030, 1.0));
        _3061 = (_3256 * _3247) + _2573;
        _3063 = (_3256 * _3249) + _2575;
        _3065 = (_3256 * _3251) + _2577;
        _3067 = ((_3241 * _1015) * _3256) + _2911;
        _3069 = ((_3243 * _1017) * _3256) + _2913;
        _3071 = ((_3245 * _1018) * _3256) + _2915;
    }
    else
    {
        _3061 = _2573;
        _3063 = _2575;
        _3065 = _2577;
        _3067 = _2911;
        _3069 = _2913;
        _3071 = _2915;
    }
    float _4988 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _4999 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _5010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    uint _3091 = _990 + 6u;
    float _3099 = _952 / cbSceneParam._m0[86u].x;
    float _3100 = _953 / cbSceneParam._m0[86u].y;
    vec4 _3114 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3099, _3100, (log2((isnan(cbSceneParam._m0[77u].w) ? _887 : (isnan(_887) ? cbSceneParam._m0[77u].w : min(_887, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3116 = _3114.x;
    float _3117 = _3114.y;
    float _3118 = _3114.z;
    float _3119 = _3114.w;
    float _3191;
    float _3193;
    float _3195;
    float _3197;
    if (_887 > cbSceneParam._m0[78u].w)
    {
        float _3153 = isnan(_887) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _887 : min(cbSceneParam._m0[80u].w, _887));
        float _3154 = _3153 / _887;
        float _3165 = _3154 * _937;
        float _3166 = _938 * _3154;
        float _3167 = (-0.0) - _3166;
        float _3169 = _3154 * _939;
        float _3171 = (cbSceneParam._m0[77u].w * _3167) / _3153;
        float _3172 = _3171 + cbSceneParam._m0[79u].w;
        float _3173 = cbSceneParam._m0[79u].w - _3166;
        float _3179 = sqrt(((_3165 * _3165) + (_3166 * _3166)) + (_3169 * _3169));
        float _3182 = (1.0 - (cbSceneParam._m0[77u].w / _3153)) * _3179;
        float _3187 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3189 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3342;
        if (abs((_3167 - _3171) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3342 = ((((_3172 > 0.0) ? exp2(_3187 * _3172) : (2.0 - exp2(_3189 * _3172))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3182;
        }
        else
        {
            float _3302 = 1.0 / cbSceneParam._m0[80u].x;
            float _3303 = isnan(_3173) ? _3172 : (isnan(_3172) ? _3173 : max(_3172, _3173));
            float _3304 = isnan(_3173) ? _3172 : (isnan(_3172) ? _3173 : min(_3172, _3173));
            float _3313 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : min(_3303, 0.0));
            float _3314 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : min(_3304, 0.0));
            _3342 = ((abs(_3179 / _3167) * cbSceneParam._m0[80u].y) * ((((_3313 - _3314) * 2.0) - ((exp2(_3187 * (isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0)))) - exp2(_3187 * (isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0))))) * _3302)) - ((exp2(_3189 * _3313) - exp2(_3189 * _3314)) * _3302))) + (_3182 * cbSceneParam._m0[80u].z);
        }
        vec4 _3344 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3099, _3100, 1.0), 0.0);
        float _3353 = exp2((_3342 * (-1.44269502162933349609375)) * (1.0 - _3344.w));
        float _3354 = log2(_3353);
        float _3370 = log2(_3119);
        _3191 = (exp2(_3370 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3354 * cbSceneParam._m0[78u].x)) * _3344.x) / cbSceneParam._m0[78u].x)) + _3116;
        _3193 = (exp2(_3370 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3354 * cbSceneParam._m0[78u].y)) * _3344.y) / cbSceneParam._m0[78u].y)) + _3117;
        _3195 = (exp2(_3370 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3354 * cbSceneParam._m0[78u].z)) * _3344.z) / cbSceneParam._m0[78u].z)) + _3118;
        _3197 = _3353 * _3119;
    }
    else
    {
        _3191 = _3116;
        _3193 = _3117;
        _3195 = _3118;
        _3197 = _3119;
    }
    float _3209 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3210 = _3209 == 3.0;
    float _3211 = log2(_3197);
    float _3218 = exp2(_3211 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0))) * (_3061 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1030))) + ((_3067 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1840)) * cbPerFrame._m0[3u].x));
    float _3219 = exp2(_3211 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0))) * (_3063 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1030))) + ((_3069 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1840)) * cbPerFrame._m0[3u].x));
    float _3220 = exp2(_3211 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0))) * (_3065 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1030))) + ((_3071 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1840)) * cbPerFrame._m0[3u].x));
    float _3229 = (_3209 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3229 * (_3210 ? _3218 : (_3218 + (cbSceneParam._m0[72u].w * _3191)));
    SV_Target.y = _3229 * (_3210 ? _3219 : (_3219 + (cbSceneParam._m0[72u].w * _3193)));
    SV_Target.z = _3229 * (_3210 ? _3220 : (_3220 + (cbSceneParam._m0[72u].w * _3195)));
    SV_Target.w = cbInstanceData._m0[_3091].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3091].w;
}


