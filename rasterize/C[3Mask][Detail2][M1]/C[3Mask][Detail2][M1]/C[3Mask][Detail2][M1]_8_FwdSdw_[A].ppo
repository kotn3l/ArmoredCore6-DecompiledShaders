#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1509;
float _4173;
float _4174;
float _4175;
float _4176;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _278 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.x * cbMtdParam._m0[10u].x;
    float _285 = _278.y * cbMtdParam._m0[10u].y;
    float _286 = _278.z * cbMtdParam._m0[10u].z;
    vec4 _304 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _354 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _364 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _354)) + 1.0;
    float _4185 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _372 = (_365 * ((_304.x * cbMtdParam._m0[11u].x) - _284)) + _284;
    float _373 = (_365 * ((_304.y * cbMtdParam._m0[11u].y) - _285)) + _285;
    float _374 = (_365 * ((_304.z * cbMtdParam._m0[11u].z) - _286)) + _286;
    vec4 _392 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _423 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _354)) + 1.0;
    float _4196 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _431 = (_424 * ((_392.x * cbMtdParam._m0[12u].x) - _372)) + _372;
    float _432 = (_424 * ((_392.y * cbMtdParam._m0[12u].y) - _373)) + _373;
    float _433 = (_424 * ((_392.z * cbMtdParam._m0[12u].z) - _374)) + _374;
    vec4 _451 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _476 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _354)) + 1.0;
    float _4207 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    vec4 _505 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _513 = ((((_477 * ((_451.x * cbMtdParam._m0[13u].x) - _431)) + _431) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _505.x;
    float _516 = ((((_477 * ((_451.y * cbMtdParam._m0[13u].y) - _432)) + _432) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _505.y;
    float _519 = ((((_477 * ((_451.z * cbMtdParam._m0[13u].z) - _433)) + _433) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _505.z;
    vec4 _539 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _568 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _4218 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _576 = (_569 * ((_539.x * cbMtdParam._m0[14u].x) - _513)) + _513;
    float _577 = (_569 * ((_539.y * cbMtdParam._m0[14u].y) - _516)) + _516;
    float _578 = (_569 * ((_539.z * cbMtdParam._m0[14u].z) - _519)) + _519;
    vec4 _598 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _626 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _4229 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _627 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _634 = (_627 * ((_598.x * cbMtdParam._m0[15u].x) - _576)) + _576;
    float _635 = (_627 * ((_598.y * cbMtdParam._m0[15u].y) - _577)) + _577;
    float _636 = (_627 * ((_598.z * cbMtdParam._m0[15u].z) - _578)) + _578;
    vec4 _649 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _651 = _649.x;
    float _669 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _651) * _365) + _651;
    float _686 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _669) * _424) + _669;
    float _703 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _686) * _477) + _686;
    float _705 = _703 - (_703 * TEXCOORD_5.x);
    vec4 _721 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _743 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _745 = _743.x;
    float _746 = _743.y;
    float _749 = cbMtdParam._m0[18u].y * _743.z;
    vec4 _761 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _770 = (((cbMtdParam._m0[18u].x * _761.z) - _749) * _365) + _749;
    vec4 _783 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _794 = (((cbMtdParam._m0[17u].w * _783.z) - _770) * _424) + _770;
    vec4 _807 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _816 = (((cbMtdParam._m0[17u].z * _807.z) - _794) * _477) + _794;
    float _821 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_721.z * cbMtdParam._m0[18u].z) - _816)) + _816;
    vec4 _834 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _848 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_834.z * cbMtdParam._m0[19u].y) - _821)) + _821;
    vec4 _861 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _873 = ((_761.x - _745) * _365) + _745;
    float _874 = ((_761.y - _746) * _365) + _746;
    float _879 = ((_783.x - _873) * _424) + _873;
    float _880 = ((_783.y - _874) * _424) + _874;
    float _889 = ((((_807.x - _879) * _477) + _879) * 2.0) + (-1.0);
    float _890 = ((((_807.y - _880) * _477) + _880) * 2.0) + (-1.0);
    float _891 = dot(vec2(_889, _890), vec2(_889, _890));
    float _4240 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _896 = sqrt(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))));
    float _913 = (((((_861.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _889) + ((((_721.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y)) + ((((_834.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _914 = (((((_861.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _890) + ((((_721.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y)) + ((((_834.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _917 = fma(_896, _248 * NORMAL.x, fma(_914, _255 * TANGENT.x, (_241 * _233) * _913));
    float _920 = fma(_896, _248 * NORMAL.y, fma(_914, _255 * TANGENT.y, (_241 * _234) * _913));
    float _923 = fma(_896, _248 * NORMAL.z, fma(_914, _255 * TANGENT.z, (_241 * _235) * _913));
    float _927 = inversesqrt(dot(vec3(_917, _920, _923), vec3(_917, _920, _923)));
    float _928 = _927 * _917;
    float _929 = _927 * _920;
    float _930 = _927 * _923;
    float _4251 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _931 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4273 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4284 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4295 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _935 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _951 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1001 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _991);
    float _1002 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _991);
    float _1003 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _991);
    float _1007 = inversesqrt(dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003)));
    float _1008 = _1001 * _1007;
    float _1009 = _1002 * _1007;
    float _1010 = _1003 * _1007;
    vec4 _1015 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1017 = _1015.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1189 = sqrt(((_1001 * _1001) + (_1002 * _1002)) + (_1003 * _1003));
        float _1195 = (cbMatDynParam._m0[5u].x * _1189) + cbMatDynParam._m0[5u].y;
        float _4306 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1200 = (cbMatDynParam._m0[5u].z * _1189) + cbMatDynParam._m0[5u].w;
        float _4317 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) - _1196)) + _1196) < ((_1017 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1028 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1029 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1047 = fma(_930, cbSceneParam._m0[5u].z, fma(_929, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _928));
    float _1050 = fma(_930, cbSceneParam._m0[6u].z, fma(_929, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _928));
    float _1053 = fma(_930, cbSceneParam._m0[7u].z, fma(_929, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _928));
    uint _1066 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1067 = _1066 + 9u;
    uint _1068 = _1067 + uint(cbMatDynParam._m0[0u].w);
    float _1074 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * cbInstanceData._m0[_1068].x;
    float _1075 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * cbInstanceData._m0[_1068].y;
    float _1076 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * cbInstanceData._m0[_1068].z;
    float _4328 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _4339 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _4350 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _1080 = 1.0 - _935;
    float _1081 = _1077 * _1080;
    float _1082 = _1078 * _1080;
    float _1083 = _1079 * _1080;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _935;
    float _1089 = (_1078 + (-0.039999999105930328369140625)) * _935;
    float _1090 = (_1079 + (-0.039999999105930328369140625)) * _935;
    float _1091 = _1088 + 0.039999999105930328369140625;
    float _1093 = _1089 + 0.039999999105930328369140625;
    float _1094 = _1090 + 0.039999999105930328369140625;
    vec4 _1103 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1028, cbSceneParam._m0[86u].y * _1029));
    float _1106 = _1103.x * TEXCOORD_5.w;
    float _1107 = dot(vec3(_928, _929, _930), vec3(_1008, _1009, _1010));
    float _1110 = _1107 * 2.0;
    float _1114 = (_1110 * _928) - _1008;
    float _1115 = (_1110 * _929) - _1009;
    float _1116 = (_1110 * _930) - _1010;
    float _1120 = abs(dot(vec3(_1008, _1009, _1010), vec3(_928, _929, _930)));
    float _4361 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1122 = sqrt(_931);
    float _1135 = exp2((_1122 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1122 * 3.0));
    float _1141 = (1.0 - _1135) * ((_1122 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1142 = _1135 * _1122;
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1508;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1233 = fma(_1178, cbModelParam._m0[26u].z, fma(_1174, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1170));
        float _1237 = fma(_1178, cbModelParam._m0[27u].z, fma(_1174, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1170));
        float _1241 = fma(_1178, cbModelParam._m0[28u].z, fma(_1174, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1170));
        float _1266 = _1170 + _928;
        float _1267 = _1174 + _929;
        float _1268 = _1178 + _930;
        float _1278 = fma(_1268, cbModelParam._m0[26u].z, fma(_1267, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1266)) - _1233;
        float _1279 = fma(_1268, cbModelParam._m0[27u].z, fma(_1267, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1266)) - _1237;
        float _1280 = fma(_1268, cbModelParam._m0[28u].z, fma(_1267, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1266)) - _1241;
        float _1284 = inversesqrt(dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280)));
        float _1297 = ((_1284 * _1278) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1233 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1284 * _1279) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1237 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1284 * _1280) / cbModelParam._m0[34u].z) + ((((((_1241 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        float _1336 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1302.x + (-0.5));
        float _1338 = _1336 * (_1302.y + (-0.5));
        float _1339 = _1336 * (_1302.z + (-0.5));
        float _1346 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1309.x + (-0.5));
        float _1348 = _1346 * (_1309.y + (-0.5));
        float _1349 = _1346 * (_1309.z + (-0.5));
        float _1356 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1316.x + (-0.5));
        float _1358 = _1356 * (_1316.y + (-0.5));
        float _1359 = _1356 * (_1316.z + (-0.5));
        float _1366 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1323.x + (-0.5));
        float _1368 = _1366 * (_1323.y + (-0.5));
        float _1369 = _1366 * (_1323.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1390 = (dot(vec3(_928, _929, _930), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1400 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1402 + 1.0))) + _1407) * _1370;
        float _1417 = _1338 * 0.5;
        float _1418 = _1348 * 0.5;
        float _1419 = _1358 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_928, _929, _930), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4442 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1444 + 1.0))) + _1449) * _1371;
        float _1459 = _1339 * 0.5;
        float _1460 = _1349 * 0.5;
        float _1461 = _1359 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_928, _929, _930), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4475 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1486 + 1.0))) + _1491) * _1372;
        _1508 = _1339;
        _1510 = _1338;
        _1511 = _1337;
        _1512 = _1349;
        _1513 = _1348;
        _1514 = _1347;
        _1515 = _1359;
        _1516 = _1358;
        _1517 = _1357;
        _1518 = _1372;
        _1519 = _1371;
        _1520 = _1370;
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
    }
    else
    {
        _1508 = _1509;
        _1510 = _1509;
        _1511 = _1509;
        _1512 = _1509;
        _1513 = _1509;
        _1514 = _1509;
        _1515 = _1509;
        _1516 = _1509;
        _1517 = _1509;
        _1518 = _1509;
        _1519 = _1509;
        _1520 = _1509;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1552 = fma(_1178, cbModelParam._m0[30u].z, fma(_1174, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1170));
        float _1556 = fma(_1178, cbModelParam._m0[31u].z, fma(_1174, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1170));
        float _1560 = fma(_1178, cbModelParam._m0[32u].z, fma(_1174, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1170));
        float _1583 = _1170 + _928;
        float _1584 = _1174 + _929;
        float _1585 = _1178 + _930;
        float _1595 = fma(_1585, cbModelParam._m0[30u].z, fma(_1584, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1583)) - _1552;
        float _1596 = fma(_1585, cbModelParam._m0[31u].z, fma(_1584, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1583)) - _1556;
        float _1597 = fma(_1585, cbModelParam._m0[32u].z, fma(_1584, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1583)) - _1560;
        float _1601 = inversesqrt(dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597)));
        float _1614 = ((_1601 * _1595) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1552 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1615 = ((_1601 * _1596) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1556 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1616 = ((_1601 * _1597) / cbModelParam._m0[35u].z) + ((((((_1560 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        float _1651 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1618.x + (-0.5));
        float _1653 = _1651 * (_1618.y + (-0.5));
        float _1654 = _1651 * (_1618.z + (-0.5));
        float _1661 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1625.x + (-0.5));
        float _1663 = _1661 * (_1625.y + (-0.5));
        float _1664 = _1661 * (_1625.z + (-0.5));
        float _1671 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1632.x + (-0.5));
        float _1673 = _1671 * (_1632.y + (-0.5));
        float _1674 = _1671 * (_1632.z + (-0.5));
        float _1681 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1639.x + (-0.5));
        float _1683 = _1681 * (_1639.y + (-0.5));
        float _1684 = _1681 * (_1639.z + (-0.5));
        float _1685 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1686 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1687 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1688 = _1652 * 0.5;
        float _1689 = _1662 * 0.5;
        float _1690 = _1672 * 0.5;
        float _1691 = dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690));
        float _1696 = (_1691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1691);
        float _1704 = (dot(vec3(_928, _929, _930), vec3(_1696 * _1688, _1696 * _1689, _1696 * _1690)) + 1.0) * 0.5;
        float _4516 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1713 = sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690)) / (_1685 + 9.9999997473787516355514526367188e-06);
        float _4527 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _1715 = _1714 * 2.0;
        float _1719 = (1.0 - _1714) / (_1714 + 1.0);
        float _4538 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1729 = ((((1.0 - _1720) * (_1715 + 2.0)) * exp2(log2(isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_1715 + 1.0))) + _1720) * _1685;
        float _1730 = _1653 * 0.5;
        float _1731 = _1663 * 0.5;
        float _1732 = _1673 * 0.5;
        float _1733 = dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732));
        float _1738 = (_1733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1733);
        float _1746 = (dot(vec3(_928, _929, _930), vec3(_1738 * _1730, _1738 * _1731, _1738 * _1732)) + 1.0) * 0.5;
        float _4549 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1755 = sqrt(((_1731 * _1731) + (_1730 * _1730)) + (_1732 * _1732)) / (_1686 + 9.9999997473787516355514526367188e-06);
        float _4560 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _1757 = _1756 * 2.0;
        float _1761 = (1.0 - _1756) / (_1756 + 1.0);
        float _4571 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1771 = ((((1.0 - _1762) * (_1757 + 2.0)) * exp2(log2(isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_1757 + 1.0))) + _1762) * _1686;
        float _1772 = _1654 * 0.5;
        float _1773 = _1664 * 0.5;
        float _1774 = _1674 * 0.5;
        float _1775 = dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774));
        float _1780 = (_1775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1775);
        float _1788 = (dot(vec3(_928, _929, _930), vec3(_1780 * _1772, _1780 * _1773, _1780 * _1774)) + 1.0) * 0.5;
        float _4582 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1797 = sqrt(((_1773 * _1773) + (_1772 * _1772)) + (_1774 * _1774)) / (_1687 + 9.9999997473787516355514526367188e-06);
        float _4593 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _1799 = _1798 * 2.0;
        float _1803 = (1.0 - _1798) / (_1798 + 1.0);
        float _4604 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1813 = ((((1.0 - _1804) * (_1799 + 2.0)) * exp2(log2(isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_1799 + 1.0))) + _1804) * _1687;
        _1821 = _1654;
        _1822 = _1653;
        _1823 = _1652;
        _1824 = _1664;
        _1825 = _1663;
        _1826 = _1662;
        _1827 = _1674;
        _1828 = _1673;
        _1829 = _1672;
        _1830 = _1687;
        _1831 = _1686;
        _1832 = _1685;
        _1833 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)));
        _1834 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)));
        _1835 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)));
    }
    else
    {
        _1821 = _1509;
        _1822 = _1509;
        _1823 = _1509;
        _1824 = _1509;
        _1825 = _1509;
        _1826 = _1509;
        _1827 = _1509;
        _1828 = _1509;
        _1829 = _1509;
        _1830 = _1509;
        _1831 = _1509;
        _1832 = _1509;
        _1833 = 0.0;
        _1834 = 0.0;
        _1835 = 0.0;
    }
    float _1845 = (cbModelParam._m0[1u].x * (_1833 - _1521)) + _1521;
    float _1846 = (cbModelParam._m0[1u].x * (_1834 - _1522)) + _1522;
    float _1847 = (cbModelParam._m0[1u].x * (_1835 - _1523)) + _1523;
    float _1868 = fma(_1847, cbSceneParam._m0[89u].z, fma(_1846, cbSceneParam._m0[89u].y, _1845 * cbSceneParam._m0[89u].x));
    float _1871 = fma(_1847, cbSceneParam._m0[90u].z, fma(_1846, cbSceneParam._m0[90u].y, _1845 * cbSceneParam._m0[90u].x));
    float _1874 = fma(_1847, cbSceneParam._m0[91u].z, fma(_1846, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1845));
    float _1889 = _1114 * 0.5;
    float _1890 = _1115 * 0.5;
    float _1891 = _1116 * 0.5;
    float _1892 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1823, _1826, _1829, _1832));
    float _1895 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1822, _1825, _1828, _1831));
    float _1898 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1821, _1824, _1827, _1830));
    float _1932;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1905 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1508, _1512, _1515, _1518));
        float _1909 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1913 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1511, _1514, _1517, _1520));
        float _1920 = dot(vec4(cbModelParam._m0[39u]), vec4(_1889, _1890, _1891, 1.0));
        _1932 = dot(vec3(isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1920) ? 0.0 : (isnan(0.0) ? _1920 : max(0.0, _1920))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1932 = 1.0;
    }
    float _1943;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1934 = dot(vec4(cbModelParam._m0[40u]), vec4(_1889, _1890, _1891, 1.0));
        _1943 = dot(vec3(isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1934) ? 0.0 : (isnan(0.0) ? _1934 : max(0.0, _1934))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1943 = 1.0;
    }
    float _1947 = (_1943 * cbModelParam._m0[1u].x) + (_1932 * (1.0 - cbModelParam._m0[1u].x));
    float _1957 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _931);
    float _1958 = isnan(_1957) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1957 : min(cbModelParam._m0[25u].z, _1957));
    float _2038;
    float _2040;
    float _2042;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2005 = fma(_1178, cbModelParam._m0[13u].z, fma(_1174, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1170)) + cbModelParam._m0[13u].w;
        float _2009 = fma(_1178, cbModelParam._m0[14u].z, fma(_1174, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1170)) + cbModelParam._m0[14u].w;
        float _2013 = fma(_1178, cbModelParam._m0[15u].z, fma(_1174, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1170)) + cbModelParam._m0[15u].w;
        float _2016 = fma(_1116, cbModelParam._m0[13u].z, fma(_1115, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1114));
        float _2019 = fma(_1116, cbModelParam._m0[14u].z, fma(_1115, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1114));
        float _2022 = fma(_1116, cbModelParam._m0[15u].z, fma(_1115, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1114));
        float _2050;
        if (_2016 > 0.0)
        {
            _2050 = abs((1.0 - _2005) / _2016);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2005 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2050 = frontier_phi_17_15_ladder;
        }
        float _2221;
        if (_2019 > 0.0)
        {
            _2221 = abs((1.0 - _2009) / _2019);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2009 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2221 = frontier_phi_26_22_ladder;
        }
        float _2516;
        if (_2022 > 0.0)
        {
            _2516 = abs((1.0 - _2013) / _2022);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2013 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2516 = frontier_phi_38_33_ladder;
        }
        float _2518 = isnan(_2221) ? _2050 : (isnan(_2050) ? _2221 : min(_2050, _2221));
        float _2519 = isnan(_2516) ? _2518 : (isnan(_2518) ? _2516 : min(_2518, _2516));
        float _2523 = (_2519 * _2016) + _2005;
        float _2524 = (_2519 * _2019) + _2009;
        float _2525 = (_2519 * _2022) + _2013;
        float _2526 = _2519 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2526;
        float _2530 = _2526 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 > _2530) || ((_2524 < _2528) || ((_2523 < _2528) || (_2523 > _2530))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2670 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2525, cbModelParam._m0[9u].z, fma(_2524, cbModelParam._m0[9u].y, _2523 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2525, cbModelParam._m0[10u].z, fma(_2524, cbModelParam._m0[10u].y, _2523 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2525, cbModelParam._m0[11u].z, fma(_2524, cbModelParam._m0[11u].y, _2523 * cbModelParam._m0[11u].x))), _1958);
            frontier_phi_16_38_ladder = _2670.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2670.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2670.x * cbModelParam._m0[1u].y;
        }
        _2038 = frontier_phi_16_38_ladder_2;
        _2040 = frontier_phi_16_38_ladder_1;
        _2042 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2026 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1114, _1115, _1116), _1958);
        _2038 = _2026.x * cbModelParam._m0[1u].y;
        _2040 = _2026.y * cbModelParam._m0[1u].y;
        _2042 = _2026.z * cbModelParam._m0[1u].y;
    }
    float _2046 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _931);
    float _2047 = isnan(_2046) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2046 : min(cbModelParam._m0[25u].w, _2046));
    float _2136;
    float _2138;
    float _2140;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2100 = fma(_1178, cbModelParam._m0[21u].z, fma(_1174, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1170)) + cbModelParam._m0[21u].w;
        float _2104 = fma(_1178, cbModelParam._m0[22u].z, fma(_1174, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1170)) + cbModelParam._m0[22u].w;
        float _2108 = fma(_1178, cbModelParam._m0[23u].z, fma(_1174, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1170)) + cbModelParam._m0[23u].w;
        float _2111 = fma(_1116, cbModelParam._m0[21u].z, fma(_1115, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1114));
        float _2114 = fma(_1116, cbModelParam._m0[22u].z, fma(_1115, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1114));
        float _2117 = fma(_1116, cbModelParam._m0[23u].z, fma(_1115, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1114));
        float _2226;
        if (_2111 > 0.0)
        {
            _2226 = abs((1.0 - _2100) / _2111);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2100 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2226 = frontier_phi_28_24_ladder;
        }
        float _2543;
        if (_2114 > 0.0)
        {
            _2543 = abs((1.0 - _2104) / _2114);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2104 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2543 = frontier_phi_40_35_ladder;
        }
        float _2881;
        if (_2117 > 0.0)
        {
            _2881 = abs((1.0 - _2108) / _2117);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2108 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2881 = frontier_phi_50_47_ladder;
        }
        float _2883 = isnan(_2543) ? _2226 : (isnan(_2226) ? _2543 : min(_2226, _2543));
        float _2884 = isnan(_2881) ? _2883 : (isnan(_2883) ? _2881 : min(_2883, _2881));
        float _2888 = (_2884 * _2111) + _2100;
        float _2889 = (_2884 * _2114) + _2104;
        float _2890 = (_2884 * _2117) + _2108;
        float _2891 = _2884 * 9.9999997473787516355514526367188e-05;
        float _2892 = (-1.0) - _2891;
        float _2894 = _2891 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2890 > _2894) || ((_2890 < _2892) || ((_2889 > _2894) || ((_2889 < _2892) || ((_2888 < _2892) || (_2888 > _2894))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3012 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2890, cbModelParam._m0[17u].z, fma(_2889, cbModelParam._m0[17u].y, _2888 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2890, cbModelParam._m0[18u].z, fma(_2889, cbModelParam._m0[18u].y, _2888 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2890, cbModelParam._m0[19u].z, fma(_2889, cbModelParam._m0[19u].y, _2888 * cbModelParam._m0[19u].x))), _2047);
            frontier_phi_25_50_ladder = _3012.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3012.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3012.x * cbModelParam._m0[1u].z;
        }
        _2136 = frontier_phi_25_50_ladder_2;
        _2138 = frontier_phi_25_50_ladder_1;
        _2140 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2120 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1114, _1115, _1116), _2047);
        _2136 = _2120.x * cbModelParam._m0[1u].z;
        _2138 = _2120.y * cbModelParam._m0[1u].z;
        _2140 = _2120.z * cbModelParam._m0[1u].z;
    }
    float _2153 = (((_1141 * _1091) + _1142) * _1106) * ((cbModelParam._m0[1u].w * (_2136 - _2038)) + _2038);
    float _2155 = (((_1141 * _1093) + _1142) * _1106) * ((cbModelParam._m0[1u].w * (_2138 - _2040)) + _2040);
    float _2157 = (((_1141 * _1094) + _1142) * _1106) * ((cbModelParam._m0[1u].w * (_2140 - _2042)) + _2042);
    float _2160 = fma(_2157, cbSceneParam._m0[89u].z, fma(_2155, cbSceneParam._m0[89u].y, _2153 * cbSceneParam._m0[89u].x));
    float _2163 = fma(_2157, cbSceneParam._m0[90u].z, fma(_2155, cbSceneParam._m0[90u].y, _2153 * cbSceneParam._m0[90u].x));
    float _2166 = fma(_2157, cbSceneParam._m0[91u].z, fma(_2155, cbSceneParam._m0[91u].y, _2153 * cbSceneParam._m0[91u].x));
    float _2200 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2204 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2208 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2212 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2213 = _2200 / _2212;
    float _2214 = _2204 / _2212;
    float _2215 = _2208 / _2212;
    float _2362;
    float _2363;
    float _2364;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2242 = ((uint(_2215 > cbSceneParam._m0[59u].y) + uint(_2215 > cbSceneParam._m0[59u].x)) + uint(_2215 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2243 = _2242 + 43u;
        uint _2251 = _2242 + 44u;
        uint _2259 = _2242 + 45u;
        uint _2267 = _2242 + 46u;
        float _2278 = fma(_2212, cbSceneParam._m0[_2243].w, fma(_2208, cbSceneParam._m0[_2243].z, fma(_2204, cbSceneParam._m0[_2243].y, _2200 * cbSceneParam._m0[_2243].x)));
        float _2282 = fma(_2212, cbSceneParam._m0[_2251].w, fma(_2208, cbSceneParam._m0[_2251].z, fma(_2204, cbSceneParam._m0[_2251].y, _2200 * cbSceneParam._m0[_2251].x)));
        float _2290 = fma(_2212, cbSceneParam._m0[_2267].w, fma(_2208, cbSceneParam._m0[_2267].z, fma(_2204, cbSceneParam._m0[_2267].y, _2200 * cbSceneParam._m0[_2267].x)));
        float _2295 = cbSceneParam._m0[33u].z * _2290;
        float _2297 = cbSceneParam._m0[33u].w * _2290;
        float _2300 = fma(_2212, cbSceneParam._m0[_2259].w, fma(_2208, cbSceneParam._m0[_2259].z, fma(_2204, cbSceneParam._m0[_2259].y, _2200 * cbSceneParam._m0[_2259].x))) / _2290;
        float _2348 = (cbSceneParam._m0[33u].x - sqrt(((_2214 * _2214) + (_2213 * _2213)) + (_2215 * _2215))) * cbSceneParam._m0[33u].y;
        float _4730 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2355 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2295 + _2278) / _2290, (_2297 + _2282) / _2290), _2300), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2297 + _2278) / _2290, (_2282 - _2295) / _2290), _2300), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2278 - _2295) / _2290, (_2282 - _2297) / _2290), _2300), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2278 - _2297) / _2290, (_2295 + _2282) / _2290), _2300), 0.0)).x), vec4(0.25)));
        _2362 = 1.0 - (_2355 * cbSceneParam._m0[34u].x);
        _2363 = 1.0 - (_2355 * cbSceneParam._m0[34u].y);
        _2364 = 1.0 - (_2355 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2362 = 1.0;
        _2363 = 1.0;
        _2364 = 1.0;
    }
    float _2428;
    float _2430;
    float _2432;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2416 = fma(_2212, cbSceneParam._m0[63u].w, fma(_2208, cbSceneParam._m0[63u].z, fma(_2204, cbSceneParam._m0[63u].y, _2200 * cbSceneParam._m0[63u].x)));
        float _2417 = fma(_2212, cbSceneParam._m0[60u].w, fma(_2208, cbSceneParam._m0[60u].z, fma(_2204, cbSceneParam._m0[60u].y, _2200 * cbSceneParam._m0[60u].x))) / _2416;
        float _2418 = fma(_2212, cbSceneParam._m0[61u].w, fma(_2208, cbSceneParam._m0[61u].z, fma(_2204, cbSceneParam._m0[61u].y, _2200 * cbSceneParam._m0[61u].x))) / _2416;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2417 >= cbSceneParam._m0[64u].x) && (_2418 >= cbSceneParam._m0[64u].y)) && (_2417 <= cbSceneParam._m0[64u].z)) && (_2418 <= cbSceneParam._m0[64u].w))
        {
            float _2556 = fma(_2212, cbSceneParam._m0[62u].w, fma(_2208, cbSceneParam._m0[62u].z, fma(_2204, cbSceneParam._m0[62u].y, _2200 * cbSceneParam._m0[62u].x))) / _2416;
            float _2560 = isnan(cbSceneParam._m0[41u].w) ? _2556 : (isnan(_2556) ? cbSceneParam._m0[41u].w : max(_2556, cbSceneParam._m0[41u].w));
            float _2603 = (cbSceneParam._m0[33u].x - sqrt(((_2214 * _2214) + (_2213 * _2213)) + (_2215 * _2215))) * cbSceneParam._m0[33u].y;
            float _4746 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
            float _2610 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2417, cbSceneParam._m0[33u].w + _2418), _2560), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2417, _2418 - cbSceneParam._m0[33u].z), _2560), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2417 - cbSceneParam._m0[33u].z, _2418 - cbSceneParam._m0[33u].w), _2560), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2417 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2418), _2560), 0.0)).x), vec4(0.25)));
            float _2614 = 1.0 - (_2610 * cbSceneParam._m0[34u].x);
            float _2615 = 1.0 - (_2610 * cbSceneParam._m0[34u].y);
            float _2616 = 1.0 - (_2610 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2616) ? _2364 : (isnan(_2364) ? _2616 : min(_2364, _2616));
            frontier_phi_37_36_ladder_1 = isnan(_2615) ? _2363 : (isnan(_2363) ? _2615 : min(_2363, _2615));
            frontier_phi_37_36_ladder_2 = isnan(_2614) ? _2362 : (isnan(_2362) ? _2614 : min(_2362, _2614));
        }
        else
        {
            frontier_phi_37_36_ladder = _2364;
            frontier_phi_37_36_ladder_1 = _2363;
            frontier_phi_37_36_ladder_2 = _2362;
        }
        _2428 = frontier_phi_37_36_ladder_2;
        _2430 = frontier_phi_37_36_ladder_1;
        _2432 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2428 = _2362;
        _2430 = _2363;
        _2432 = _2364;
    }
    uvec4 _2437 = floatBitsToUint(cbInstanceData._m0[_1066 + 5u]);
    uint _2439 = _2437.x * 14u;
    uint _2440 = _2439 + 13u;
    float _2447 = _1106 + (-1.0);
    float _2452 = (cbLight._m0[_2440].x * _2447) + 1.0;
    float _2453 = (cbLight._m0[_2440].y * _2447) + 1.0;
    float _2454 = (cbLight._m0[_2440].z * _2447) + 1.0;
    float _2455 = (cbLight._m0[_2440].w * _2447) + 1.0;
    uint _2456 = _2439 + 5u;
    float _2462 = isnan(1.0) ? _2453 : (isnan(_2453) ? 1.0 : min(_2453, 1.0));
    uint _2466 = _2439 + 4u;
    float _2475 = isnan(1.0) ? _2452 : (isnan(_2452) ? 1.0 : min(_2452, 1.0));
    uint _2479 = _2439 | 1u;
    float _2490 = dot(vec3(cbLight._m0[_2439].xyz), vec3(_928, _929, _930));
    float _2493 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_928, _929, _930));
    float _4782 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _4793 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2498 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * 0.3183098733425140380859375;
    float _2500 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * 0.3183098733425140380859375;
    float _2507 = ((cbLight._m0[_2456].x * _2462) * _2500) + (((cbLight._m0[_2466].x * _2428) * _2475) * _2498);
    float _2508 = ((_2462 * cbLight._m0[_2456].y) * _2500) + (((cbLight._m0[_2466].y * _2430) * _2475) * _2498);
    float _2509 = ((_2462 * cbLight._m0[_2456].z) * _2500) + (((cbLight._m0[_2466].z * _2432) * _2475) * _2498);
    uvec4 _2513 = floatBitsToUint(cbLight._m0[_2439 + 12u]);
    bool _2515 = _2513.x == 0u;
    float _2617;
    float _2619;
    float _2621;
    if (_2515)
    {
        _2617 = _2507;
        _2619 = _2508;
        _2621 = _2509;
    }
    else
    {
        uint _2625 = _2439 + 6u;
        float _2641 = (dot(vec3(cbLight._m0[_2439 + 2u].xyz), vec3(_928, _929, _930)) * 0.5) + 0.5;
        float _2642 = _2641 * _2641;
        float _4804 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2643 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2644 = isnan(1.0) ? _2454 : (isnan(_2454) ? 1.0 : min(_2454, 1.0));
        _2617 = (((cbLight._m0[_2625].x * 0.3183098733425140380859375) * _2643) * _2644) + _2507;
        _2619 = (((cbLight._m0[_2625].y * 0.3183098733425140380859375) * _2643) * _2644) + _2508;
        _2621 = (((cbLight._m0[_2625].z * 0.3183098733425140380859375) * _2643) * _2644) + _2509;
    }
    bool _2624 = _2513.y == 0u;
    float _2679;
    float _2681;
    float _2683;
    if (_2624)
    {
        _2679 = _2617;
        _2681 = _2619;
        _2683 = _2621;
    }
    else
    {
        uint _2852 = _2439 + 7u;
        float _2868 = (dot(vec3(cbLight._m0[_2439 + 3u].xyz), vec3(_928, _929, _930)) * 0.5) + 0.5;
        float _2869 = _2868 * _2868;
        float _4820 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2870 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2871 = isnan(1.0) ? _2455 : (isnan(_2455) ? 1.0 : min(_2455, 1.0));
        _2679 = (((cbLight._m0[_2852].x * 0.3183098733425140380859375) * _2870) * _2871) + _2617;
        _2681 = (((cbLight._m0[_2852].y * 0.3183098733425140380859375) * _2870) * _2871) + _2619;
        _2683 = (((cbLight._m0[_2852].z * 0.3183098733425140380859375) * _2870) * _2871) + _2621;
    }
    uint _2686 = _2439 + 8u;
    float _2699 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2439].w)) * _931) * 0.949999988079071044921875);
    float _2700 = _2699 * _2699;
    float _2701 = cbLight._m0[_2439].x + _1008;
    float _2702 = cbLight._m0[_2439].y + _1009;
    float _2703 = cbLight._m0[_2439].z + _1010;
    float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
    float _2708 = _2707 * _2701;
    float _2709 = _2707 * _2702;
    float _2710 = _2707 * _2703;
    float _2711 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2439].xyz));
    float _4836 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2714 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
    float _4847 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _2715 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
    float _2716 = dot(vec3(_928, _929, _930), vec3(_2708, _2709, _2710));
    float _4858 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2719 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
    float _2720 = dot(vec3(cbLight._m0[_2439].xyz), vec3(_2708, _2709, _2710));
    float _4869 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2724 = _2700 * _2700;
    float _2728 = ((_2719 * _2719) * (_2724 + (-1.0))) + 1.0;
    float _2736 = exp2(log2(1.0 - (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) * 5.0);
    float _2737 = 0.959999978542327880859375 - _1088;
    float _2739 = 0.959999978542327880859375 - _1089;
    float _2740 = 0.959999978542327880859375 - _1090;
    float _2747 = 1.0 - _2700;
    float _2758 = (0.5 / (((_2715 * ((_2714 * _2747) + _2700)) + 9.9999999392252902907785028219223e-09) + (((_2715 * _2747) + _2700) * _2714))) * _2714;
    float _4880 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
    float _2760 = (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2724 / ((_2728 * _2728) * 3.141590118408203125));
    uint _2774 = _2439 + 9u;
    float _2785 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _931) * 0.949999988079071044921875);
    float _2786 = _2785 * _2785;
    float _2787 = cbLight._m0[_2479].x + _1008;
    float _2788 = cbLight._m0[_2479].y + _1009;
    float _2789 = cbLight._m0[_2479].z + _1010;
    float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
    float _2794 = _2793 * _2787;
    float _2795 = _2793 * _2788;
    float _2796 = _2793 * _2789;
    float _2797 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2479].xyz));
    float _4891 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
    float _2800 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
    float _2801 = dot(vec3(_928, _929, _930), vec3(_2794, _2795, _2796));
    float _4902 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
    float _2804 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
    float _2805 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2794, _2795, _2796));
    float _4913 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
    float _2809 = _2786 * _2786;
    float _2813 = ((_2804 * _2804) * (_2809 + (-1.0))) + 1.0;
    float _2820 = exp2(log2(1.0 - (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0)))) * 5.0);
    float _2827 = 1.0 - _2786;
    float _2837 = (0.5 / (((_2715 * ((_2800 * _2827) + _2786)) + 9.9999999392252902907785028219223e-09) + (((_2715 * _2827) + _2786) * _2800))) * _2800;
    float _4924 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
    float _2839 = (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2809 / ((_2813 * _2813) * 3.141590118408203125));
    float _2849 = (((((_2820 * _2737) + _1091) * cbLight._m0[_2774].x) * _2839) * _2462) + ((((cbLight._m0[_2686].x * _2428) * ((_2736 * _2737) + _1091)) * _2760) * _2475);
    float _2850 = (((((_2820 * _2739) + _1093) * cbLight._m0[_2774].y) * _2839) * _2462) + ((((cbLight._m0[_2686].y * _2430) * ((_2736 * _2739) + _1093)) * _2760) * _2475);
    float _2851 = (((((_2820 * _2740) + _1094) * cbLight._m0[_2774].z) * _2839) * _2462) + ((((cbLight._m0[_2686].z * _2432) * ((_2736 * _2740) + _1094)) * _2760) * _2475);
    float _2907;
    float _2909;
    float _2911;
    if (_2515)
    {
        _2907 = _2849;
        _2909 = _2850;
        _2911 = _2851;
    }
    else
    {
        uint _2913 = _2439 + 2u;
        uint _2917 = _2439 + 10u;
        float _2931 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2913].w)) * _931) * 0.949999988079071044921875);
        float _2932 = _2931 * _2931;
        float _2933 = cbLight._m0[_2913].x + _1008;
        float _2934 = cbLight._m0[_2913].y + _1009;
        float _2935 = cbLight._m0[_2913].z + _1010;
        float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
        float _2940 = _2939 * _2933;
        float _2941 = _2939 * _2934;
        float _2942 = _2939 * _2935;
        float _2943 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2913].xyz));
        float _4935 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2946 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
        float _2947 = dot(vec3(_928, _929, _930), vec3(_2940, _2941, _2942));
        float _4946 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        float _2950 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
        float _2951 = dot(vec3(cbLight._m0[_2913].xyz), vec3(_2940, _2941, _2942));
        float _4957 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2955 = _2932 * _2932;
        float _2959 = ((_2950 * _2950) * (_2955 + (-1.0))) + 1.0;
        float _2966 = exp2(log2(1.0 - (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)))) * 5.0);
        float _2973 = 1.0 - _2932;
        float _2983 = (0.5 / (((_2715 * ((_2946 * _2973) + _2932)) + 9.9999999392252902907785028219223e-09) + (((_2715 * _2973) + _2932) * _2946))) * _2946;
        float _4968 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        float _2985 = (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2955 / ((_2959 * _2959) * 3.141590118408203125));
        float _2986 = isnan(1.0) ? _2454 : (isnan(_2454) ? 1.0 : min(_2454, 1.0));
        _2907 = (((((_2966 * _2737) + _1091) * cbLight._m0[_2917].x) * _2985) * _2986) + _2849;
        _2909 = (((((_2966 * _2739) + _1093) * cbLight._m0[_2917].y) * _2985) * _2986) + _2850;
        _2911 = (((((_2966 * _2740) + _1094) * cbLight._m0[_2917].z) * _2985) * _2986) + _2851;
    }
    float _3017;
    float _3019;
    float _3021;
    if (_2624)
    {
        _3017 = _2907;
        _3019 = _2909;
        _3021 = _2911;
    }
    else
    {
        uint _3028 = _2439 + 3u;
        uint _3032 = _2439 + 11u;
        float _3046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3028].w)) * _931) * 0.949999988079071044921875);
        float _3047 = _3046 * _3046;
        float _3048 = cbLight._m0[_3028].x + _1008;
        float _3049 = cbLight._m0[_3028].y + _1009;
        float _3050 = cbLight._m0[_3028].z + _1010;
        float _3054 = inversesqrt(dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050)));
        float _3055 = _3054 * _3048;
        float _3056 = _3054 * _3049;
        float _3057 = _3054 * _3050;
        float _3058 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_3028].xyz));
        float _4984 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
        float _3061 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
        float _3062 = dot(vec3(_928, _929, _930), vec3(_3055, _3056, _3057));
        float _4995 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
        float _3065 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
        float _3066 = dot(vec3(cbLight._m0[_3028].xyz), vec3(_3055, _3056, _3057));
        float _5006 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
        float _3070 = _3047 * _3047;
        float _3074 = ((_3065 * _3065) * (_3070 + (-1.0))) + 1.0;
        float _3081 = exp2(log2(1.0 - (isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0)))) * 5.0);
        float _3088 = 1.0 - _3047;
        float _3098 = (0.5 / (((_2715 * ((_3061 * _3088) + _3047)) + 9.9999999392252902907785028219223e-09) + (((_2715 * _3088) + _3047) * _3061))) * _3061;
        float _5017 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
        float _3100 = (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_3070 / ((_3074 * _3074) * 3.141590118408203125));
        float _3101 = isnan(1.0) ? _2455 : (isnan(_2455) ? 1.0 : min(_2455, 1.0));
        _3017 = (((((_3081 * _2737) + _1091) * cbLight._m0[_3032].x) * _3100) * _3101) + _2907;
        _3019 = (((((_3081 * _2739) + _1093) * cbLight._m0[_3032].y) * _3100) * _3101) + _2909;
        _3021 = (((((_3081 * _2740) + _1094) * cbLight._m0[_3032].z) * _3100) * _3101) + _2911;
    }
    float _3167;
    float _3169;
    float _3171;
    float _3173;
    float _3175;
    float _3177;
    if (_2437.y == 0u)
    {
        uvec4 _3122 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3123 = _3122.x;
        uint _3134 = uint((float(_3122.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1029) / _3123))) + floor(float(uint(cbSceneParam._m0[85u].x * _1028) / _3123)));
        float _3144 = (log2(_2215 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3145 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
        uint _3148 = uint(isnan(14.0) ? _3145 : (isnan(_3145) ? 14.0 : min(_3145, 14.0)));
        uvec4 _3153 = texelFetch(g_lightClusterGridBuffer, int(((_3148 << 2u) + (_3134 << 6u)) >> 2u));
        uint _3154 = _3153.x;
        uint _3155 = _3122.z;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        float _3244;
        if (((((1u << ((_3155 >> 4u) & 15u)) + 4294967295u) & _3154) == 0u) || ((_3155 & 240u) == 0u))
        {
            _3234 = 0.0;
            _3236 = 0.0;
            _3238 = 0.0;
            _3240 = 0.0;
            _3242 = 0.0;
            _3244 = 0.0;
        }
        else
        {
            float _3235;
            float _3237;
            float _3239;
            float _3241;
            float _3243;
            float _3245;
            float _3387 = 0.0;
            float _3388 = 0.0;
            float _3389 = 0.0;
            float _3390 = 0.0;
            float _3391 = 0.0;
            float _3392 = 0.0;
            uint _3393 = 0u;
            uint _3402;
            bool _3403;
            for (;;)
            {
                _3402 = texelFetch(g_lightClassification, int((((_3148 << 5u) + (_3134 << 9u)) + (_3393 << 2u)) >> 2u)).x;
                _3403 = _3402 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3403)
                {
                    frontier_phi_71_pred = _3392;
                    frontier_phi_71_pred_1 = _3391;
                    frontier_phi_71_pred_2 = _3390;
                    frontier_phi_71_pred_3 = _3389;
                    frontier_phi_71_pred_4 = _3388;
                    frontier_phi_71_pred_5 = _3387;
                }
                else
                {
                    float _3532;
                    float _3533;
                    float _3534;
                    float _3535;
                    float _3536;
                    float _3537;
                    uint _3538;
                    _3532 = _3387;
                    _3533 = _3388;
                    _3534 = _3389;
                    _3535 = _3390;
                    _3536 = _3391;
                    _3537 = _3392;
                    _3538 = _3402;
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    float _3463;
                    float _3464;
                    for (;;)
                    {
                        uint _3542 = uint(findLSB(_3538)) + (_3393 << 5u);
                        uint _3539 = (_3538 + 4294967295u) & _3538;
                        uint _3544 = _3542 * 48u;
                        vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3544)).x, texelFetch(g_PointLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3544 + 3u)).x));
                        uint _3564 = (_3542 * 48u) + 4u;
                        vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3564)).x, texelFetch(g_PointLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3564 + 3u)).x));
                        uint _3583 = (_3542 * 48u) + 8u;
                        vec3 _3594 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3583)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 2u)).x));
                        float _3598 = _3558.x - _2213;
                        float _3599 = _3558.y - _2214;
                        float _3600 = _3558.z - _2215;
                        float _3601 = dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600));
                        float _3604 = inversesqrt(_3601);
                        float _3605 = _3604 * _3598;
                        float _3606 = _3604 * _3599;
                        float _3607 = _3604 * _3600;
                        float _3608 = dot(vec3(_1047, _1050, _1053), vec3(_3605, _3606, _3607));
                        float _3613 = 1.0 - (_3601 * _3558.w);
                        float _5043 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                        float _3614 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                        float _3615 = sqrt(_3601) * _3577.w;
                        float _3618 = 1.39999997615814208984375 / (_3615 + 1.39999997615814208984375);
                        float _3619 = _3618 * _3618;
                        float _3622 = ((1.0 - _3619) * _3608) + _3619;
                        float _3625 = _3615 * _3615;
                        float _3629 = ((isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0))) * _3614) / ((_3625 * 0.699999988079071044921875) + 1.0);
                        float _3633 = (-0.0) - _2213;
                        float _3634 = (-0.0) - _2214;
                        float _3635 = (-0.0) - _2215;
                        float _3639 = inversesqrt(dot(vec3(_3633, _3634, _3635), vec3(_3633, _3634, _3635)));
                        float _3640 = _3639 * _3633;
                        float _3641 = _3639 * _3634;
                        float _3642 = _3639 * _3635;
                        float _3649 = exp2(log2(1.0 / ((_3625 * 3.5) + 5.0)) * 0.25);
                        float _3650 = 1.0 - _1122;
                        float _3657 = sqrt(1.0 - ((1.0 - (_3650 * _3650)) * (1.0 - (_3649 * _3649))));
                        float _3658 = _3657 * _3657;
                        float _3659 = _3658 * _3658;
                        float _3660 = _3640 + _3605;
                        float _3661 = _3641 + _3606;
                        float _3662 = _3642 + _3607;
                        float _3666 = inversesqrt(dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662)));
                        float _3670 = dot(vec3(_1047, _1050, _1053), vec3(_3640, _3641, _3642));
                        float _5059 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                        float _3673 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                        float _3674 = dot(vec3(_1047, _1050, _1053), vec3(_3666 * _3660, _3666 * _3661, _3666 * _3662));
                        float _5070 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                        float _3677 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                        float _3681 = ((_3677 * _3677) * (_3659 + (-1.0))) + 1.0;
                        float _3682 = _3618 * _3658;
                        float _3683 = _3682 * _3682;
                        float _3686 = ((1.0 - _3683) * _3608) + _3683;
                        float _5081 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                        float _3687 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                        float _3688 = 1.0 - _3658;
                        float _3698 = (0.5 / (((_3687 * ((_3673 * _3688) + _3658)) + 9.9999999392252902907785028219223e-09) + (((_3687 * _3688) + _3658) * _3673))) * _3687;
                        float _5092 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                        float _3709 = (((_3659 * 3.1415927410125732421875) * (isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0)))) / ((_3681 * _3681) * ((_3625 * 2.1991131305694580078125) + 3.141590118408203125))) * _3614;
                        _3462 = (_3629 * _3577.x) + _3535;
                        _3463 = (_3629 * _3577.y) + _3536;
                        _3464 = (_3629 * _3577.z) + _3537;
                        _3459 = (_3709 * _3594.x) + _3532;
                        _3460 = (_3709 * _3594.y) + _3533;
                        _3461 = (_3709 * _3594.z) + _3534;
                        if (_3539 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3532 = _3459;
                            _3533 = _3460;
                            _3534 = _3461;
                            _3535 = _3462;
                            _3536 = _3463;
                            _3537 = _3464;
                            _3538 = _3539;
                        }
                    }
                    frontier_phi_71_pred = _3464;
                    frontier_phi_71_pred_1 = _3463;
                    frontier_phi_71_pred_2 = _3462;
                    frontier_phi_71_pred_3 = _3461;
                    frontier_phi_71_pred_4 = _3460;
                    frontier_phi_71_pred_5 = _3459;
                }
                _3245 = frontier_phi_71_pred;
                _3243 = frontier_phi_71_pred_1;
                _3241 = frontier_phi_71_pred_2;
                _3239 = frontier_phi_71_pred_3;
                _3237 = frontier_phi_71_pred_4;
                _3235 = frontier_phi_71_pred_5;
                uint _3394 = _3393 + 1u;
                if (_3394 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3387 = _3235;
                    _3388 = _3237;
                    _3389 = _3239;
                    _3390 = _3241;
                    _3391 = _3243;
                    _3392 = _3245;
                    _3393 = _3394;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3234 = _3235;
            _3236 = _3237;
            _3238 = _3239;
            _3240 = _3241;
            _3242 = _3243;
            _3244 = _3245;
        }
        uvec4 _3248 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3249 = _3248.z;
        uint _3251 = (_3249 >> 8u) & 15u;
        float _3355;
        float _3357;
        float _3359;
        float _3361;
        float _3363;
        float _3365;
        if (((4294967295u << _3251) & _3154) == 0u)
        {
            _3355 = _3234;
            _3357 = _3236;
            _3359 = _3238;
            _3361 = _3240;
            _3363 = _3242;
            _3365 = _3244;
        }
        else
        {
            float _3380 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
            float _3381 = _3380 * _2213;
            float _3382 = _3380 * _2214;
            float _3383 = _3380 * _2215;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3251 < ((_3249 >> 12u) & 15u))
            {
                float _3356;
                float _3358;
                float _3360;
                float _3362;
                float _3364;
                float _3366;
                float _3515 = _3234;
                float _3516 = _3236;
                float _3517 = _3238;
                float _3518 = _3240;
                float _3519 = _3242;
                float _3520 = _3244;
                uint _3521 = _3251;
                uint _3530;
                bool _3531;
                for (;;)
                {
                    _3530 = texelFetch(g_lightClassification, int((((_3148 << 5u) + (_3134 << 9u)) + (_3521 << 2u)) >> 2u)).x;
                    _3531 = _3530 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3531)
                    {
                        frontier_phi_82_pred = _3520;
                        frontier_phi_82_pred_1 = _3519;
                        frontier_phi_82_pred_2 = _3518;
                        frontier_phi_82_pred_3 = _3517;
                        frontier_phi_82_pred_4 = _3516;
                        frontier_phi_82_pred_5 = _3515;
                    }
                    else
                    {
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _4017;
                        float _4018;
                        float _4019;
                        float _4020;
                        float _4021;
                        float _4022;
                        float _3736 = _3515;
                        float _3737 = _3516;
                        float _3738 = _3517;
                        float _3739 = _3518;
                        float _3740 = _3519;
                        float _3741 = _3520;
                        uint _3742 = _3530;
                        uint _3743;
                        vec4 _3768;
                        float _3769;
                        vec4 _3784;
                        vec3 _3796;
                        vec4 _3811;
                        vec4 _3826;
                        float _3873;
                        bool _3874;
                        for (;;)
                        {
                            uint _3753 = ((_3521 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3742));
                            _3743 = (_3742 + 4294967295u) & _3742;
                            uint _3755 = _3753 * 40u;
                            _3768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 3u)).x));
                            _3769 = _3768.w;
                            uint _3771 = (_3753 * 40u) + 4u;
                            _3784 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 3u)).x));
                            uint _3786 = (_3753 * 40u) + 8u;
                            _3796 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 2u)).x));
                            uint _3798 = (_3753 * 40u) + 16u;
                            _3811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 3u)).x));
                            uint _3813 = (_3753 * 40u) + 20u;
                            _3826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 3u)).x));
                            uint _3829 = (_3753 * 40u) + 24u;
                            vec4 _3842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 3u)).x));
                            uint _3848 = (_3753 * 40u) + 28u;
                            vec4 _3861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 3u)).x));
                            _3873 = fma(_2215, _3861.z, fma(_2214, _3861.y, _3861.x * _2213)) + _3861.w;
                            _3874 = !((fma(_2215, _3842.z, fma(_2214, _3842.y, _3842.x * _2213)) + _3842.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3874)
                            {
                                float _3901 = _3768.x - _2213;
                                float _3902 = _3768.y - _2214;
                                float _3903 = _3768.z - _2215;
                                float _3904 = dot(vec3(_3901, _3902, _3903), vec3(_3901, _3902, _3903));
                                float _3907 = inversesqrt(_3904);
                                float _3908 = _3907 * _3901;
                                float _3909 = _3907 * _3902;
                                float _3910 = _3907 * _3903;
                                float _3914 = 1.0 - (_3904 / (_3769 * _3769));
                                float _5103 = isnan(0.0) ? _3914 : (isnan(_3914) ? 0.0 : max(_3914, 0.0));
                                float _3915 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
                                float _3919 = sqrt(_3904) * _3784.w;
                                float _3921 = 1.39999997615814208984375 / (_3919 + 1.39999997615814208984375);
                                float _3922 = _3921 * _3921;
                                float _3925 = ((1.0 - _3922) * dot(vec3(_3908, _3909, _3910), vec3(_1047, _1050, _1053))) + _3922;
                                float _3928 = _3919 * _3919;
                                float _3932 = (fma(_2215, _3811.z, fma(_2214, _3811.y, _3811.x * _2213)) + _3811.w) / _3873;
                                float _3933 = (fma(_2215, _3826.z, fma(_2214, _3826.y, _3826.x * _2213)) + _3826.w) / _3873;
                                float _3937 = 1.0 - dot(vec2(_3932, _3933), vec2(_3932, _3933));
                                float _5119 = isnan(0.0) ? _3937 : (isnan(_3937) ? 0.0 : max(_3937, 0.0));
                                float _3938 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                                float _3939 = _3938 * (((isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0))) * _3915) / ((_3928 * 0.699999988079071044921875) + 1.0));
                                float _3951 = exp2(log2(1.0 / ((_3928 * 3.5) + 5.0)) * 0.25);
                                float _3952 = 1.0 - _1122;
                                float _3959 = sqrt(1.0 - ((1.0 - (_3952 * _3952)) * (1.0 - (_3951 * _3951))));
                                float _3960 = _3959 * _3959;
                                float _3961 = _3960 * _3960;
                                float _3962 = _3908 - _3381;
                                float _3963 = _3909 - _3382;
                                float _3964 = _3910 - _3383;
                                float _3968 = inversesqrt(dot(vec3(_3962, _3963, _3964), vec3(_3962, _3963, _3964)));
                                float _3972 = dot(vec3(_1047, _1050, _1053), vec3((-0.0) - _3381, (-0.0) - _3382, (-0.0) - _3383));
                                float _5130 = isnan(0.0) ? _3972 : (isnan(_3972) ? 0.0 : max(_3972, 0.0));
                                float _3975 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
                                float _3976 = dot(vec3(_1047, _1050, _1053), vec3(_3968 * _3962, _3968 * _3963, _3968 * _3964));
                                float _5141 = isnan(0.0) ? _3976 : (isnan(_3976) ? 0.0 : max(_3976, 0.0));
                                float _3979 = isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0));
                                float _3983 = ((_3979 * _3979) * (_3961 + (-1.0))) + 1.0;
                                float _3984 = _3921 * _3960;
                                float _3985 = _3984 * _3984;
                                float _3991 = ((1.0 - _3985) * dot(vec3(_1047, _1050, _1053), vec3(_3908, _3909, _3910))) + _3985;
                                float _5152 = isnan(0.0) ? _3991 : (isnan(_3991) ? 0.0 : max(_3991, 0.0));
                                float _3992 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
                                float _3993 = 1.0 - _3960;
                                float _4003 = (0.5 / (((_3992 * ((_3975 * _3993) + _3960)) + 9.9999999392252902907785028219223e-09) + (((_3992 * _3993) + _3960) * _3975))) * _3992;
                                float _5163 = isnan(0.0) ? _4003 : (isnan(_4003) ? 0.0 : max(_4003, 0.0));
                                float _4013 = (_3938 * _3915) * (((_3961 * 3.1415927410125732421875) * (isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0)))) / ((_3983 * _3983) * ((_3928 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3939 * _3784.z;
                                frontier_phi_88_pred_1 = _3939 * _3784.y;
                                frontier_phi_88_pred_2 = _3939 * _3784.x;
                                frontier_phi_88_pred_3 = _4013 * _3796.z;
                                frontier_phi_88_pred_4 = _4013 * _3796.y;
                                frontier_phi_88_pred_5 = _4013 * _3796.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4022 = frontier_phi_88_pred;
                            _4021 = frontier_phi_88_pred_1;
                            _4020 = frontier_phi_88_pred_2;
                            _4019 = frontier_phi_88_pred_3;
                            _4018 = frontier_phi_88_pred_4;
                            _4017 = frontier_phi_88_pred_5;
                            _3726 = _4020 + _3739;
                            _3727 = _4021 + _3740;
                            _3728 = _4022 + _3741;
                            _3723 = _4017 + _3736;
                            _3724 = _4018 + _3737;
                            _3725 = _4019 + _3738;
                            if (_3743 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3725;
                                _3739 = _3726;
                                _3740 = _3727;
                                _3741 = _3728;
                                _3742 = _3743;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3728;
                        frontier_phi_82_pred_1 = _3727;
                        frontier_phi_82_pred_2 = _3726;
                        frontier_phi_82_pred_3 = _3725;
                        frontier_phi_82_pred_4 = _3724;
                        frontier_phi_82_pred_5 = _3723;
                    }
                    _3366 = frontier_phi_82_pred;
                    _3364 = frontier_phi_82_pred_1;
                    _3362 = frontier_phi_82_pred_2;
                    _3360 = frontier_phi_82_pred_3;
                    _3358 = frontier_phi_82_pred_4;
                    _3356 = frontier_phi_82_pred_5;
                    uint _3522 = _3521 + 1u;
                    if (_3522 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3515 = _3356;
                        _3516 = _3358;
                        _3517 = _3360;
                        _3518 = _3362;
                        _3519 = _3364;
                        _3520 = _3366;
                        _3521 = _3522;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3362;
                frontier_phi_63_64_ladder_1 = _3366;
                frontier_phi_63_64_ladder_2 = _3364;
                frontier_phi_63_64_ladder_3 = _3360;
                frontier_phi_63_64_ladder_4 = _3358;
                frontier_phi_63_64_ladder_5 = _3356;
            }
            else
            {
                frontier_phi_63_64_ladder = _3240;
                frontier_phi_63_64_ladder_1 = _3244;
                frontier_phi_63_64_ladder_2 = _3242;
                frontier_phi_63_64_ladder_3 = _3238;
                frontier_phi_63_64_ladder_4 = _3236;
                frontier_phi_63_64_ladder_5 = _3234;
            }
            _3355 = frontier_phi_63_64_ladder_5;
            _3357 = frontier_phi_63_64_ladder_4;
            _3359 = frontier_phi_63_64_ladder_3;
            _3361 = frontier_phi_63_64_ladder;
            _3363 = frontier_phi_63_64_ladder_2;
            _3365 = frontier_phi_63_64_ladder_1;
        }
        float _3370 = isnan(1.0) ? _1106 : (isnan(_1106) ? 1.0 : min(_1106, 1.0));
        _3167 = (_3370 * _3361) + _2679;
        _3169 = (_3370 * _3363) + _2681;
        _3171 = (_3370 * _3365) + _2683;
        _3173 = ((_3355 * _1091) * _3370) + _3017;
        _3175 = ((_3357 * _1093) * _3370) + _3019;
        _3177 = ((_3359 * _1094) * _3370) + _3021;
    }
    else
    {
        _3167 = _2679;
        _3169 = _2681;
        _3171 = _2683;
        _3173 = _3017;
        _3175 = _3019;
        _3177 = _3021;
    }
    float _5179 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _5190 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _5201 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _3194 = ((isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0))) * (_3167 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1106))) + ((_3173 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1947)) * cbPerFrame._m0[3u].x);
    float _3195 = ((isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0))) * (_3169 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1106))) + ((_3175 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1947)) * cbPerFrame._m0[3u].x);
    float _3196 = ((isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0))) * (_3171 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1106))) + ((_3177 + ((isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0))) * _1947)) * cbPerFrame._m0[3u].x);
    uint _3197 = _1066 + 6u;
    float _3205 = _1028 / cbSceneParam._m0[86u].x;
    float _3206 = _1029 / cbSceneParam._m0[86u].y;
    vec4 _3220 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3205, _3206, (log2((isnan(cbSceneParam._m0[77u].w) ? _951 : (isnan(_951) ? cbSceneParam._m0[77u].w : min(_951, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3222 = _3220.x;
    float _3223 = _3220.y;
    float _3224 = _3220.z;
    float _3225 = _3220.w;
    float _3297;
    float _3299;
    float _3301;
    float _3303;
    if (_951 > cbSceneParam._m0[78u].w)
    {
        float _3259 = isnan(_951) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _951 : min(cbSceneParam._m0[80u].w, _951));
        float _3260 = _3259 / _951;
        float _3271 = _3260 * _1001;
        float _3272 = _1002 * _3260;
        float _3273 = (-0.0) - _3272;
        float _3275 = _3260 * _1003;
        float _3277 = (cbSceneParam._m0[77u].w * _3273) / _3259;
        float _3278 = _3277 + cbSceneParam._m0[79u].w;
        float _3279 = cbSceneParam._m0[79u].w - _3272;
        float _3285 = sqrt(((_3271 * _3271) + (_3272 * _3272)) + (_3275 * _3275));
        float _3288 = (1.0 - (cbSceneParam._m0[77u].w / _3259)) * _3285;
        float _3293 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3295 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3472;
        if (abs((_3273 - _3277) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3472 = ((((_3278 > 0.0) ? exp2(_3293 * _3278) : (2.0 - exp2(_3295 * _3278))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3288;
        }
        else
        {
            float _3416 = 1.0 / cbSceneParam._m0[80u].x;
            float _3417 = isnan(_3279) ? _3278 : (isnan(_3278) ? _3279 : max(_3278, _3279));
            float _3418 = isnan(_3279) ? _3278 : (isnan(_3278) ? _3279 : min(_3278, _3279));
            float _3427 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : min(_3417, 0.0));
            float _3428 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : min(_3418, 0.0));
            _3472 = ((abs(_3285 / _3273) * cbSceneParam._m0[80u].y) * ((((_3427 - _3428) * 2.0) - ((exp2(_3293 * (isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0)))) - exp2(_3293 * (isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0))))) * _3416)) - ((exp2(_3295 * _3427) - exp2(_3295 * _3428)) * _3416))) + (_3288 * cbSceneParam._m0[80u].z);
        }
        vec4 _3474 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3205, _3206, 1.0), 0.0);
        float _3483 = exp2((_3472 * (-1.44269502162933349609375)) * (1.0 - _3474.w));
        float _3484 = log2(_3483);
        float _3500 = log2(_3225);
        _3297 = (exp2(_3500 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3484 * cbSceneParam._m0[78u].x)) * _3474.x) / cbSceneParam._m0[78u].x)) + _3222;
        _3299 = (exp2(_3500 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3484 * cbSceneParam._m0[78u].y)) * _3474.y) / cbSceneParam._m0[78u].y)) + _3223;
        _3301 = (exp2(_3500 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3484 * cbSceneParam._m0[78u].z)) * _3474.z) / cbSceneParam._m0[78u].z)) + _3224;
        _3303 = _3483 * _3225;
    }
    else
    {
        _3297 = _3222;
        _3299 = _3223;
        _3301 = _3224;
        _3303 = _3225;
    }
    bool _3510;
    vec4 _3313;
    vec4 _3335;
    float _3337;
    float _3341;
    float _3342;
    float _3343;
    float _3344;
    bool _3354;
    for (;;)
    {
        _3313 = cbMatDynParam._m0[0u];
        float _3315 = roundEven(_3313.y);
        bool _3316 = _3315 == 3.0;
        float _3317 = log2(_3303);
        float _3324 = exp2(_3317 * cbSceneParam._m0[78u].x) * _3194;
        float _3325 = exp2(_3317 * cbSceneParam._m0[78u].y) * _3195;
        float _3326 = exp2(_3317 * cbSceneParam._m0[78u].z) * _3196;
        float _3333 = _1017 + (-0.5);
        _3335 = cbMtdParam._m0[1u];
        _3337 = _3335.y * _3333;
        float _3340 = (_3315 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3341 = _3340 * (_3316 ? _3324 : (_3324 + (cbSceneParam._m0[72u].w * _3297)));
        _3342 = _3340 * (_3316 ? _3325 : (_3325 + (cbSceneParam._m0[72u].w * _3299)));
        _3343 = _3340 * (_3316 ? _3326 : (_3326 + (cbSceneParam._m0[72u].w * _3301)));
        _3344 = _3333 * 0.999000012874603271484375;
        _3354 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3354)
        {
            if ((cbInstanceData._m0[_1066 + 7u].x + _3344) < 0.5)
            {
                _3510 = true;
                break;
            }
        }
        uint _3451 = _1067 + uint(_3313.w);
        if ((cbInstanceData._m0[_3451].w < 1.0) && ((cbInstanceData._m0[_3451].w + _3344) < 0.5))
        {
            _3510 = true;
            break;
        }
        if ((_3337 + 1.0) < _3335.x)
        {
            _3510 = true;
            break;
        }
        _3510 = false;
        break;
    }
    float _3714;
    if (_3510)
    {
        discard_state = true;
        _3714 = 0.0;
    }
    else
    {
        _3714 = cbInstanceData._m0[_3197].w;
    }
    SV_Target.x = _3341;
    SV_Target.y = _3342;
    SV_Target.z = _3343;
    SV_Target.w = _3714;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3197].w;
    discard_exit();
}


