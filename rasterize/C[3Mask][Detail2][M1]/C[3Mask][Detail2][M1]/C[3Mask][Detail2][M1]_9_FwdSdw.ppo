#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1431;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _272 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _272.x * cbMtdParam._m0[10u].x;
    float _279 = _272.y * cbMtdParam._m0[10u].y;
    float _280 = _272.z * cbMtdParam._m0[10u].z;
    vec4 _298 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _348 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _358 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _348)) + 1.0;
    float _4042 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _366 = (_359 * ((_298.x * cbMtdParam._m0[11u].x) - _278)) + _278;
    float _367 = (_359 * ((_298.y * cbMtdParam._m0[11u].y) - _279)) + _279;
    float _368 = (_359 * ((_298.z * cbMtdParam._m0[11u].z) - _280)) + _280;
    vec4 _386 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _417 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _348)) + 1.0;
    float _4053 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _425 = (_418 * ((_386.x * cbMtdParam._m0[12u].x) - _366)) + _366;
    float _426 = (_418 * ((_386.y * cbMtdParam._m0[12u].y) - _367)) + _367;
    float _427 = (_418 * ((_386.z * cbMtdParam._m0[12u].z) - _368)) + _368;
    vec4 _445 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _470 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _348)) + 1.0;
    float _4064 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _478 = (_471 * ((_445.x * cbMtdParam._m0[13u].x) - _425)) + _425;
    float _479 = (_471 * ((_445.y * cbMtdParam._m0[13u].y) - _426)) + _426;
    float _480 = (_471 * ((_445.z * cbMtdParam._m0[13u].z) - _427)) + _427;
    vec4 _500 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _529 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _4075 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _537 = (_530 * ((_500.x * cbMtdParam._m0[14u].x) - _478)) + _478;
    float _538 = (_530 * ((_500.y * cbMtdParam._m0[14u].y) - _479)) + _479;
    float _539 = (_530 * ((_500.z * cbMtdParam._m0[14u].z) - _480)) + _480;
    vec4 _559 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _587 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _4086 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _595 = (_588 * ((_559.x * cbMtdParam._m0[15u].x) - _537)) + _537;
    float _596 = (_588 * ((_559.y * cbMtdParam._m0[15u].y) - _538)) + _538;
    float _597 = (_588 * ((_559.z * cbMtdParam._m0[15u].z) - _539)) + _539;
    vec4 _610 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _612 = _610.x;
    float _630 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _612) * _359) + _612;
    float _648 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _630) * _418) + _630;
    float _665 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _648) * _471) + _648;
    float _667 = _665 - (_665 * TEXCOORD_5.x);
    vec4 _683 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _705 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _707 = _705.x;
    float _708 = _705.y;
    float _711 = cbMtdParam._m0[18u].y * _705.z;
    vec4 _723 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _732 = (((cbMtdParam._m0[18u].x * _723.z) - _711) * _359) + _711;
    vec4 _745 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _756 = (((cbMtdParam._m0[17u].w * _745.z) - _732) * _418) + _732;
    vec4 _769 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _778 = (((cbMtdParam._m0[17u].z * _769.z) - _756) * _471) + _756;
    float _783 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_683.z * cbMtdParam._m0[18u].z) - _778)) + _778;
    vec4 _796 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _810 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_796.z * cbMtdParam._m0[19u].y) - _783)) + _783;
    vec4 _823 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _835 = ((_723.x - _707) * _359) + _707;
    float _836 = ((_723.y - _708) * _359) + _708;
    float _841 = ((_745.x - _835) * _418) + _835;
    float _842 = ((_745.y - _836) * _418) + _836;
    float _851 = ((((_769.x - _841) * _471) + _841) * 2.0) + (-1.0);
    float _852 = ((((_769.y - _842) * _471) + _842) * 2.0) + (-1.0);
    float _853 = dot(vec2(_851, _852), vec2(_851, _852));
    float _4097 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _858 = sqrt(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))));
    float _875 = (((((_823.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _851) + ((((_683.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y)) + ((((_796.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _876 = (((((_823.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _852) + ((((_683.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y)) + ((((_796.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _879 = fma(_858, _242 * NORMAL.x, fma(_876, _249 * TANGENT.x, (_235 * _227) * _875));
    float _882 = fma(_858, _242 * NORMAL.y, fma(_876, _249 * TANGENT.y, (_235 * _228) * _875));
    float _885 = fma(_858, _242 * NORMAL.z, fma(_876, _249 * TANGENT.z, (_235 * _229) * _875));
    float _889 = inversesqrt(dot(vec3(_879, _882, _885), vec3(_879, _882, _885)));
    float _890 = _889 * _879;
    float _891 = _889 * _882;
    float _892 = _889 * _885;
    float _4108 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _893 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4130 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4141 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4152 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _897 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _913 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _963 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _953);
    float _964 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _953);
    float _965 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _953);
    float _969 = inversesqrt(dot(vec3(_963, _964, _965), vec3(_963, _964, _965)));
    float _970 = _963 * _969;
    float _971 = _964 * _969;
    float _972 = _965 * _969;
    float _978 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _979 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _997 = fma(_892, cbSceneParam._m0[5u].z, fma(_891, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _890));
    float _1000 = fma(_892, cbSceneParam._m0[6u].z, fma(_891, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _890));
    float _1003 = fma(_892, cbSceneParam._m0[7u].z, fma(_891, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _890));
    uint _1016 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1018 = (_1016 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1024 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * cbInstanceData._m0[_1018].x;
    float _1025 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * cbInstanceData._m0[_1018].y;
    float _1026 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * cbInstanceData._m0[_1018].z;
    float _4163 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1027 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1028 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _4185 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1029 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _1030 = 1.0 - _897;
    float _1031 = _1027 * _1030;
    float _1032 = _1028 * _1030;
    float _1033 = _1029 * _1030;
    float _1038 = (_1027 + (-0.039999999105930328369140625)) * _897;
    float _1039 = (_1028 + (-0.039999999105930328369140625)) * _897;
    float _1040 = (_1029 + (-0.039999999105930328369140625)) * _897;
    float _1041 = _1038 + 0.039999999105930328369140625;
    float _1043 = _1039 + 0.039999999105930328369140625;
    float _1044 = _1040 + 0.039999999105930328369140625;
    vec4 _1053 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _978, cbSceneParam._m0[86u].y * _979));
    float _1056 = _1053.x * TEXCOORD_5.w;
    float _1057 = dot(vec3(_890, _891, _892), vec3(_970, _971, _972));
    float _1060 = _1057 * 2.0;
    float _1064 = (_1060 * _890) - _970;
    float _1065 = (_1060 * _891) - _971;
    float _1066 = (_1060 * _892) - _972;
    float _1070 = abs(dot(vec3(_970, _971, _972), vec3(_890, _891, _892)));
    float _4196 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1072 = sqrt(_893);
    float _1085 = exp2((_1072 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1072 * 3.0));
    float _1091 = (1.0 - _1085) * ((_1072 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1092 = _1085 * _1072;
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1430;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1155 = fma(_1128, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120));
        float _1159 = fma(_1128, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120));
        float _1163 = fma(_1128, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120));
        float _1188 = _1120 + _890;
        float _1189 = _1124 + _891;
        float _1190 = _1128 + _892;
        float _1200 = fma(_1190, cbModelParam._m0[26u].z, fma(_1189, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1188)) - _1155;
        float _1201 = fma(_1190, cbModelParam._m0[27u].z, fma(_1189, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1188)) - _1159;
        float _1202 = fma(_1190, cbModelParam._m0[28u].z, fma(_1189, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1188)) - _1163;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1155 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1159 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[34u].z) + ((((((_1163 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1258 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1224.x + (-0.5));
        float _1260 = _1258 * (_1224.y + (-0.5));
        float _1261 = _1258 * (_1224.z + (-0.5));
        float _1268 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1231.x + (-0.5));
        float _1270 = _1268 * (_1231.y + (-0.5));
        float _1271 = _1268 * (_1231.z + (-0.5));
        float _1278 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1238.x + (-0.5));
        float _1280 = _1278 * (_1238.y + (-0.5));
        float _1281 = _1278 * (_1238.z + (-0.5));
        float _1288 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1245.x + (-0.5));
        float _1290 = _1288 * (_1245.y + (-0.5));
        float _1291 = _1288 * (_1245.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1312 = (dot(vec3(_890, _891, _892), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1322 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4244 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1324 + 1.0))) + _1329) * _1292;
        float _1339 = _1260 * 0.5;
        float _1340 = _1270 * 0.5;
        float _1341 = _1280 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_890, _891, _892), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4277 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1366 + 1.0))) + _1371) * _1293;
        float _1381 = _1261 * 0.5;
        float _1382 = _1271 * 0.5;
        float _1383 = _1281 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_890, _891, _892), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4310 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1408 + 1.0))) + _1413) * _1294;
        _1430 = _1261;
        _1432 = _1260;
        _1433 = _1259;
        _1434 = _1271;
        _1435 = _1270;
        _1436 = _1269;
        _1437 = _1281;
        _1438 = _1280;
        _1439 = _1279;
        _1440 = _1294;
        _1441 = _1293;
        _1442 = _1292;
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1431;
        _1432 = _1431;
        _1433 = _1431;
        _1434 = _1431;
        _1435 = _1431;
        _1436 = _1431;
        _1437 = _1431;
        _1438 = _1431;
        _1439 = _1431;
        _1440 = _1431;
        _1441 = _1431;
        _1442 = _1431;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1471 = fma(_1128, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1120));
        float _1475 = fma(_1128, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1120));
        float _1479 = fma(_1128, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1120));
        float _1502 = _1120 + _890;
        float _1503 = _1124 + _891;
        float _1504 = _1128 + _892;
        float _1514 = fma(_1504, cbModelParam._m0[30u].z, fma(_1503, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1502)) - _1471;
        float _1515 = fma(_1504, cbModelParam._m0[31u].z, fma(_1503, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1502)) - _1475;
        float _1516 = fma(_1504, cbModelParam._m0[32u].z, fma(_1503, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1502)) - _1479;
        float _1520 = inversesqrt(dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516)));
        float _1533 = ((_1520 * _1514) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1471 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1520 * _1515) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1475 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1535 = ((_1520 * _1516) / cbModelParam._m0[35u].z) + ((((((_1479 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        float _1570 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1537.x + (-0.5));
        float _1572 = _1570 * (_1537.y + (-0.5));
        float _1573 = _1570 * (_1537.z + (-0.5));
        float _1580 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1544.x + (-0.5));
        float _1582 = _1580 * (_1544.y + (-0.5));
        float _1583 = _1580 * (_1544.z + (-0.5));
        float _1590 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1551.x + (-0.5));
        float _1592 = _1590 * (_1551.y + (-0.5));
        float _1593 = _1590 * (_1551.z + (-0.5));
        float _1600 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1558.x + (-0.5));
        float _1602 = _1600 * (_1558.y + (-0.5));
        float _1603 = _1600 * (_1558.z + (-0.5));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = _1571 * 0.5;
        float _1608 = _1581 * 0.5;
        float _1609 = _1591 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_890, _891, _892), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4351 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4362 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4373 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_1634 + 1.0))) + _1639) * _1604;
        float _1649 = _1572 * 0.5;
        float _1650 = _1582 * 0.5;
        float _1651 = _1592 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_890, _891, _892), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4406 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1676 + 1.0))) + _1681) * _1605;
        float _1691 = _1573 * 0.5;
        float _1692 = _1583 * 0.5;
        float _1693 = _1593 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_890, _891, _892), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4439 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1718 + 1.0))) + _1723) * _1606;
        _1740 = _1573;
        _1741 = _1572;
        _1742 = _1571;
        _1743 = _1583;
        _1744 = _1582;
        _1745 = _1581;
        _1746 = _1593;
        _1747 = _1592;
        _1748 = _1591;
        _1749 = _1606;
        _1750 = _1605;
        _1751 = _1604;
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
    }
    else
    {
        _1740 = _1431;
        _1741 = _1431;
        _1742 = _1431;
        _1743 = _1431;
        _1744 = _1431;
        _1745 = _1431;
        _1746 = _1431;
        _1747 = _1431;
        _1748 = _1431;
        _1749 = _1431;
        _1750 = _1431;
        _1751 = _1431;
        _1752 = 0.0;
        _1753 = 0.0;
        _1754 = 0.0;
    }
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1443)) + _1443;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1444)) + _1444;
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1445)) + _1445;
    float _1787 = fma(_1766, cbSceneParam._m0[89u].z, fma(_1765, cbSceneParam._m0[89u].y, _1764 * cbSceneParam._m0[89u].x));
    float _1790 = fma(_1766, cbSceneParam._m0[90u].z, fma(_1765, cbSceneParam._m0[90u].y, _1764 * cbSceneParam._m0[90u].x));
    float _1793 = fma(_1766, cbSceneParam._m0[91u].z, fma(_1765, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1764));
    float _1808 = _1064 * 0.5;
    float _1809 = _1065 * 0.5;
    float _1810 = _1066 * 0.5;
    float _1811 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1814 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1817 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1851;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1824 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1430, _1434, _1437, _1440));
        float _1828 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1832 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1839 = dot(vec4(cbModelParam._m0[39u]), vec4(_1808, _1809, _1810, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1839) ? 0.0 : (isnan(0.0) ? _1839 : max(0.0, _1839))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1862;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1853 = dot(vec4(cbModelParam._m0[40u]), vec4(_1808, _1809, _1810, 1.0));
        _1862 = dot(vec3(isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1853) ? 0.0 : (isnan(0.0) ? _1853 : max(0.0, _1853))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1862 = 1.0;
    }
    float _1866 = (_1862 * cbModelParam._m0[1u].x) + (_1851 * (1.0 - cbModelParam._m0[1u].x));
    float _1876 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _893);
    float _1877 = isnan(_1876) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1876 : min(cbModelParam._m0[25u].z, _1876));
    float _1957;
    float _1959;
    float _1961;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1924 = fma(_1128, cbModelParam._m0[13u].z, fma(_1124, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120)) + cbModelParam._m0[13u].w;
        float _1928 = fma(_1128, cbModelParam._m0[14u].z, fma(_1124, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120)) + cbModelParam._m0[14u].w;
        float _1932 = fma(_1128, cbModelParam._m0[15u].z, fma(_1124, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120)) + cbModelParam._m0[15u].w;
        float _1935 = fma(_1066, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1064));
        float _1938 = fma(_1066, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1064));
        float _1941 = fma(_1066, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1064));
        float _1969;
        if (_1935 > 0.0)
        {
            _1969 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1969 = frontier_phi_14_12_ladder;
        }
        float _2140;
        if (_1938 > 0.0)
        {
            _2140 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2140 = frontier_phi_23_19_ladder;
        }
        float _2436;
        if (_1941 > 0.0)
        {
            _2436 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2436 = frontier_phi_35_30_ladder;
        }
        float _2438 = isnan(_2140) ? _1969 : (isnan(_1969) ? _2140 : min(_1969, _2140));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1935) + _1924;
        float _2444 = (_2439 * _1938) + _1928;
        float _2445 = (_2439 * _1941) + _1932;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2446;
        float _2450 = _2446 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 > _2450) || ((_2444 < _2448) || ((_2443 < _2448) || (_2443 > _2450))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2590 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2445, cbModelParam._m0[9u].z, fma(_2444, cbModelParam._m0[9u].y, _2443 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2445, cbModelParam._m0[10u].z, fma(_2444, cbModelParam._m0[10u].y, _2443 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2445, cbModelParam._m0[11u].z, fma(_2444, cbModelParam._m0[11u].y, _2443 * cbModelParam._m0[11u].x))), _1877);
            frontier_phi_13_35_ladder = _2590.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2590.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2590.x * cbModelParam._m0[1u].y;
        }
        _1957 = frontier_phi_13_35_ladder_2;
        _1959 = frontier_phi_13_35_ladder_1;
        _1961 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1945 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1064, _1065, _1066), _1877);
        _1957 = _1945.x * cbModelParam._m0[1u].y;
        _1959 = _1945.y * cbModelParam._m0[1u].y;
        _1961 = _1945.z * cbModelParam._m0[1u].y;
    }
    float _1965 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _893);
    float _1966 = isnan(_1965) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1965 : min(cbModelParam._m0[25u].w, _1965));
    float _2055;
    float _2057;
    float _2059;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2019 = fma(_1128, cbModelParam._m0[21u].z, fma(_1124, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120)) + cbModelParam._m0[21u].w;
        float _2023 = fma(_1128, cbModelParam._m0[22u].z, fma(_1124, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120)) + cbModelParam._m0[22u].w;
        float _2027 = fma(_1128, cbModelParam._m0[23u].z, fma(_1124, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120)) + cbModelParam._m0[23u].w;
        float _2030 = fma(_1066, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1064));
        float _2033 = fma(_1066, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1064));
        float _2036 = fma(_1066, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1064));
        float _2145;
        if (_2030 > 0.0)
        {
            _2145 = abs((1.0 - _2019) / _2030);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2019 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2145 = frontier_phi_25_21_ladder;
        }
        float _2463;
        if (_2033 > 0.0)
        {
            _2463 = abs((1.0 - _2023) / _2033);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2023 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2463 = frontier_phi_37_32_ladder;
        }
        float _2801;
        if (_2036 > 0.0)
        {
            _2801 = abs((1.0 - _2027) / _2036);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2027 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2801 = frontier_phi_47_44_ladder;
        }
        float _2803 = isnan(_2463) ? _2145 : (isnan(_2145) ? _2463 : min(_2145, _2463));
        float _2804 = isnan(_2801) ? _2803 : (isnan(_2803) ? _2801 : min(_2803, _2801));
        float _2808 = (_2804 * _2030) + _2019;
        float _2809 = (_2804 * _2033) + _2023;
        float _2810 = (_2804 * _2036) + _2027;
        float _2811 = _2804 * 9.9999997473787516355514526367188e-05;
        float _2812 = (-1.0) - _2811;
        float _2814 = _2811 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2810 > _2814) || ((_2810 < _2812) || ((_2809 > _2814) || ((_2809 < _2812) || ((_2808 < _2812) || (_2808 > _2814))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2810, cbModelParam._m0[17u].z, fma(_2809, cbModelParam._m0[17u].y, _2808 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2810, cbModelParam._m0[18u].z, fma(_2809, cbModelParam._m0[18u].y, _2808 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2810, cbModelParam._m0[19u].z, fma(_2809, cbModelParam._m0[19u].y, _2808 * cbModelParam._m0[19u].x))), _1966);
            frontier_phi_22_47_ladder = _2932.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2932.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2932.x * cbModelParam._m0[1u].z;
        }
        _2055 = frontier_phi_22_47_ladder_2;
        _2057 = frontier_phi_22_47_ladder_1;
        _2059 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2039 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1064, _1065, _1066), _1966);
        _2055 = _2039.x * cbModelParam._m0[1u].z;
        _2057 = _2039.y * cbModelParam._m0[1u].z;
        _2059 = _2039.z * cbModelParam._m0[1u].z;
    }
    float _2072 = (((_1091 * _1041) + _1092) * _1056) * ((cbModelParam._m0[1u].w * (_2055 - _1957)) + _1957);
    float _2074 = (((_1091 * _1043) + _1092) * _1056) * ((cbModelParam._m0[1u].w * (_2057 - _1959)) + _1959);
    float _2076 = (((_1091 * _1044) + _1092) * _1056) * ((cbModelParam._m0[1u].w * (_2059 - _1961)) + _1961);
    float _2079 = fma(_2076, cbSceneParam._m0[89u].z, fma(_2074, cbSceneParam._m0[89u].y, _2072 * cbSceneParam._m0[89u].x));
    float _2082 = fma(_2076, cbSceneParam._m0[90u].z, fma(_2074, cbSceneParam._m0[90u].y, _2072 * cbSceneParam._m0[90u].x));
    float _2085 = fma(_2076, cbSceneParam._m0[91u].z, fma(_2074, cbSceneParam._m0[91u].y, _2072 * cbSceneParam._m0[91u].x));
    float _2119 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2123 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2127 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2131 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2132 = _2119 / _2131;
    float _2133 = _2123 / _2131;
    float _2134 = _2127 / _2131;
    float _2281;
    float _2282;
    float _2283;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2161 = ((uint(_2134 > cbSceneParam._m0[59u].y) + uint(_2134 > cbSceneParam._m0[59u].x)) + uint(_2134 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2162 = _2161 + 43u;
        uint _2170 = _2161 + 44u;
        uint _2178 = _2161 + 45u;
        uint _2186 = _2161 + 46u;
        float _2197 = fma(_2131, cbSceneParam._m0[_2162].w, fma(_2127, cbSceneParam._m0[_2162].z, fma(_2123, cbSceneParam._m0[_2162].y, _2119 * cbSceneParam._m0[_2162].x)));
        float _2201 = fma(_2131, cbSceneParam._m0[_2170].w, fma(_2127, cbSceneParam._m0[_2170].z, fma(_2123, cbSceneParam._m0[_2170].y, _2119 * cbSceneParam._m0[_2170].x)));
        float _2209 = fma(_2131, cbSceneParam._m0[_2186].w, fma(_2127, cbSceneParam._m0[_2186].z, fma(_2123, cbSceneParam._m0[_2186].y, _2119 * cbSceneParam._m0[_2186].x)));
        float _2214 = cbSceneParam._m0[33u].z * _2209;
        float _2216 = cbSceneParam._m0[33u].w * _2209;
        float _2219 = fma(_2131, cbSceneParam._m0[_2178].w, fma(_2127, cbSceneParam._m0[_2178].z, fma(_2123, cbSceneParam._m0[_2178].y, _2119 * cbSceneParam._m0[_2178].x))) / _2209;
        float _2267 = (cbSceneParam._m0[33u].x - sqrt(((_2133 * _2133) + (_2132 * _2132)) + (_2134 * _2134))) * cbSceneParam._m0[33u].y;
        float _4565 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2274 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2214 + _2197) / _2209, (_2216 + _2201) / _2209), _2219), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2216 + _2197) / _2209, (_2201 - _2214) / _2209), _2219), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2197 - _2214) / _2209, (_2201 - _2216) / _2209), _2219), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2197 - _2216) / _2209, (_2214 + _2201) / _2209), _2219), 0.0)).x), vec4(0.25)));
        _2281 = 1.0 - (_2274 * cbSceneParam._m0[34u].x);
        _2282 = 1.0 - (_2274 * cbSceneParam._m0[34u].y);
        _2283 = 1.0 - (_2274 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2281 = 1.0;
        _2282 = 1.0;
        _2283 = 1.0;
    }
    float _2347;
    float _2349;
    float _2351;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2335 = fma(_2131, cbSceneParam._m0[63u].w, fma(_2127, cbSceneParam._m0[63u].z, fma(_2123, cbSceneParam._m0[63u].y, _2119 * cbSceneParam._m0[63u].x)));
        float _2336 = fma(_2131, cbSceneParam._m0[60u].w, fma(_2127, cbSceneParam._m0[60u].z, fma(_2123, cbSceneParam._m0[60u].y, _2119 * cbSceneParam._m0[60u].x))) / _2335;
        float _2337 = fma(_2131, cbSceneParam._m0[61u].w, fma(_2127, cbSceneParam._m0[61u].z, fma(_2123, cbSceneParam._m0[61u].y, _2119 * cbSceneParam._m0[61u].x))) / _2335;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2336 >= cbSceneParam._m0[64u].x) && (_2337 >= cbSceneParam._m0[64u].y)) && (_2336 <= cbSceneParam._m0[64u].z)) && (_2337 <= cbSceneParam._m0[64u].w))
        {
            float _2476 = fma(_2131, cbSceneParam._m0[62u].w, fma(_2127, cbSceneParam._m0[62u].z, fma(_2123, cbSceneParam._m0[62u].y, _2119 * cbSceneParam._m0[62u].x))) / _2335;
            float _2480 = isnan(cbSceneParam._m0[41u].w) ? _2476 : (isnan(_2476) ? cbSceneParam._m0[41u].w : max(_2476, cbSceneParam._m0[41u].w));
            float _2523 = (cbSceneParam._m0[33u].x - sqrt(((_2133 * _2133) + (_2132 * _2132)) + (_2134 * _2134))) * cbSceneParam._m0[33u].y;
            float _4581 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
            float _2530 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2336, cbSceneParam._m0[33u].w + _2337), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2336, _2337 - cbSceneParam._m0[33u].z), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2336 - cbSceneParam._m0[33u].z, _2337 - cbSceneParam._m0[33u].w), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2336 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2337), _2480), 0.0)).x), vec4(0.25)));
            float _2534 = 1.0 - (_2530 * cbSceneParam._m0[34u].x);
            float _2535 = 1.0 - (_2530 * cbSceneParam._m0[34u].y);
            float _2536 = 1.0 - (_2530 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2536) ? _2283 : (isnan(_2283) ? _2536 : min(_2283, _2536));
            frontier_phi_34_33_ladder_1 = isnan(_2535) ? _2282 : (isnan(_2282) ? _2535 : min(_2282, _2535));
            frontier_phi_34_33_ladder_2 = isnan(_2534) ? _2281 : (isnan(_2281) ? _2534 : min(_2281, _2534));
        }
        else
        {
            frontier_phi_34_33_ladder = _2283;
            frontier_phi_34_33_ladder_1 = _2282;
            frontier_phi_34_33_ladder_2 = _2281;
        }
        _2347 = frontier_phi_34_33_ladder_2;
        _2349 = frontier_phi_34_33_ladder_1;
        _2351 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2347 = _2281;
        _2349 = _2282;
        _2351 = _2283;
    }
    uvec4 _2356 = floatBitsToUint(cbInstanceData._m0[_1016 + 5u]);
    uint _2358 = _2356.x * 14u;
    uint _2359 = _2358 + 13u;
    float _2366 = _1056 + (-1.0);
    float _2371 = (cbLight._m0[_2359].x * _2366) + 1.0;
    float _2372 = (cbLight._m0[_2359].y * _2366) + 1.0;
    float _2373 = (cbLight._m0[_2359].z * _2366) + 1.0;
    float _2374 = (cbLight._m0[_2359].w * _2366) + 1.0;
    uint _2375 = _2358 + 5u;
    float _2381 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
    uint _2385 = _2358 + 4u;
    float _2395 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
    uint _2399 = _2358 | 1u;
    float _2410 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_890, _891, _892));
    float _2413 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_890, _891, _892));
    float _4617 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _4628 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2418 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * 0.3183098733425140380859375;
    float _2420 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * 0.3183098733425140380859375;
    float _2427 = ((cbLight._m0[_2375].x * _2381) * _2420) + (((cbLight._m0[_2385].x * _2347) * _2395) * _2418);
    float _2428 = ((_2381 * cbLight._m0[_2375].y) * _2420) + (((cbLight._m0[_2385].y * _2349) * _2395) * _2418);
    float _2429 = ((_2381 * cbLight._m0[_2375].z) * _2420) + (((cbLight._m0[_2385].z * _2351) * _2395) * _2418);
    uvec4 _2433 = floatBitsToUint(cbLight._m0[_2358 + 12u]);
    bool _2435 = _2433.x == 0u;
    float _2537;
    float _2539;
    float _2541;
    if (_2435)
    {
        _2537 = _2427;
        _2539 = _2428;
        _2541 = _2429;
    }
    else
    {
        uint _2545 = _2358 + 6u;
        float _2561 = (dot(vec3(cbLight._m0[_2358 + 2u].xyz), vec3(_890, _891, _892)) * 0.5) + 0.5;
        float _2562 = _2561 * _2561;
        float _4639 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2563 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2564 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
        _2537 = (((cbLight._m0[_2545].x * 0.3183098733425140380859375) * _2563) * _2564) + _2427;
        _2539 = (((cbLight._m0[_2545].y * 0.3183098733425140380859375) * _2563) * _2564) + _2428;
        _2541 = (((cbLight._m0[_2545].z * 0.3183098733425140380859375) * _2563) * _2564) + _2429;
    }
    bool _2544 = _2433.y == 0u;
    float _2599;
    float _2601;
    float _2603;
    if (_2544)
    {
        _2599 = _2537;
        _2601 = _2539;
        _2603 = _2541;
    }
    else
    {
        uint _2772 = _2358 + 7u;
        float _2788 = (dot(vec3(cbLight._m0[_2358 + 3u].xyz), vec3(_890, _891, _892)) * 0.5) + 0.5;
        float _2789 = _2788 * _2788;
        float _4655 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2790 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2791 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
        _2599 = (((cbLight._m0[_2772].x * 0.3183098733425140380859375) * _2790) * _2791) + _2537;
        _2601 = (((cbLight._m0[_2772].y * 0.3183098733425140380859375) * _2790) * _2791) + _2539;
        _2603 = (((cbLight._m0[_2772].z * 0.3183098733425140380859375) * _2790) * _2791) + _2541;
    }
    uint _2606 = _2358 + 8u;
    float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2358].w)) * _893) * 0.949999988079071044921875);
    float _2620 = _2619 * _2619;
    float _2621 = cbLight._m0[_2358].x + _970;
    float _2622 = cbLight._m0[_2358].y + _971;
    float _2623 = cbLight._m0[_2358].z + _972;
    float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
    float _2628 = _2627 * _2621;
    float _2629 = _2627 * _2622;
    float _2630 = _2627 * _2623;
    float _2631 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2358].xyz));
    float _4671 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
    float _4682 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _2635 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _2636 = dot(vec3(_890, _891, _892), vec3(_2628, _2629, _2630));
    float _4693 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2639 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _2640 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_2628, _2629, _2630));
    float _4704 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2644 = _2620 * _2620;
    float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
    float _2656 = exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0);
    float _2657 = 0.959999978542327880859375 - _1038;
    float _2659 = 0.959999978542327880859375 - _1039;
    float _2660 = 0.959999978542327880859375 - _1040;
    float _2667 = 1.0 - _2620;
    float _2678 = (0.5 / (((_2635 * ((_2634 * _2667) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2667) + _2620) * _2634))) * _2634;
    float _4715 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2680 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
    uint _2694 = _2358 + 9u;
    float _2705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2399].w)) * _893) * 0.949999988079071044921875);
    float _2706 = _2705 * _2705;
    float _2707 = cbLight._m0[_2399].x + _970;
    float _2708 = cbLight._m0[_2399].y + _971;
    float _2709 = cbLight._m0[_2399].z + _972;
    float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
    float _2714 = _2713 * _2707;
    float _2715 = _2713 * _2708;
    float _2716 = _2713 * _2709;
    float _2717 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2399].xyz));
    float _4726 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2720 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2721 = dot(vec3(_890, _891, _892), vec3(_2714, _2715, _2716));
    float _4737 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2724 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2725 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_2714, _2715, _2716));
    float _4748 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2729 = _2706 * _2706;
    float _2733 = ((_2724 * _2724) * (_2729 + (-1.0))) + 1.0;
    float _2740 = exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0);
    float _2747 = 1.0 - _2706;
    float _2757 = (0.5 / (((_2635 * ((_2720 * _2747) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2747) + _2706) * _2720))) * _2720;
    float _4759 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
    float _2759 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2729 / ((_2733 * _2733) * 3.141590118408203125));
    float _2769 = (((((_2740 * _2657) + _1041) * cbLight._m0[_2694].x) * _2759) * _2381) + ((((cbLight._m0[_2606].x * _2347) * ((_2656 * _2657) + _1041)) * _2680) * _2395);
    float _2770 = (((((_2740 * _2659) + _1043) * cbLight._m0[_2694].y) * _2759) * _2381) + ((((cbLight._m0[_2606].y * _2349) * ((_2656 * _2659) + _1043)) * _2680) * _2395);
    float _2771 = (((((_2740 * _2660) + _1044) * cbLight._m0[_2694].z) * _2759) * _2381) + ((((cbLight._m0[_2606].z * _2351) * ((_2656 * _2660) + _1044)) * _2680) * _2395);
    float _2827;
    float _2829;
    float _2831;
    if (_2435)
    {
        _2827 = _2769;
        _2829 = _2770;
        _2831 = _2771;
    }
    else
    {
        uint _2833 = _2358 + 2u;
        uint _2837 = _2358 + 10u;
        float _2851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2833].w)) * _893) * 0.949999988079071044921875);
        float _2852 = _2851 * _2851;
        float _2853 = cbLight._m0[_2833].x + _970;
        float _2854 = cbLight._m0[_2833].y + _971;
        float _2855 = cbLight._m0[_2833].z + _972;
        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
        float _2860 = _2859 * _2853;
        float _2861 = _2859 * _2854;
        float _2862 = _2859 * _2855;
        float _2863 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2833].xyz));
        float _4770 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2866 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
        float _2867 = dot(vec3(_890, _891, _892), vec3(_2860, _2861, _2862));
        float _4781 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2870 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2871 = dot(vec3(cbLight._m0[_2833].xyz), vec3(_2860, _2861, _2862));
        float _4792 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2875 = _2852 * _2852;
        float _2879 = ((_2870 * _2870) * (_2875 + (-1.0))) + 1.0;
        float _2886 = exp2(log2(1.0 - (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) * 5.0);
        float _2893 = 1.0 - _2852;
        float _2903 = (0.5 / (((_2635 * ((_2866 * _2893) + _2852)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2893) + _2852) * _2866))) * _2866;
        float _4803 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2905 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2875 / ((_2879 * _2879) * 3.141590118408203125));
        float _2906 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
        _2827 = (((((_2886 * _2657) + _1041) * cbLight._m0[_2837].x) * _2905) * _2906) + _2769;
        _2829 = (((((_2886 * _2659) + _1043) * cbLight._m0[_2837].y) * _2905) * _2906) + _2770;
        _2831 = (((((_2886 * _2660) + _1044) * cbLight._m0[_2837].z) * _2905) * _2906) + _2771;
    }
    float _2937;
    float _2939;
    float _2941;
    if (_2544)
    {
        _2937 = _2827;
        _2939 = _2829;
        _2941 = _2831;
    }
    else
    {
        uint _2948 = _2358 + 3u;
        uint _2952 = _2358 + 11u;
        float _2966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2948].w)) * _893) * 0.949999988079071044921875);
        float _2967 = _2966 * _2966;
        float _2968 = cbLight._m0[_2948].x + _970;
        float _2969 = cbLight._m0[_2948].y + _971;
        float _2970 = cbLight._m0[_2948].z + _972;
        float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
        float _2975 = _2974 * _2968;
        float _2976 = _2974 * _2969;
        float _2977 = _2974 * _2970;
        float _2978 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2948].xyz));
        float _4819 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2981 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
        float _2982 = dot(vec3(_890, _891, _892), vec3(_2975, _2976, _2977));
        float _4830 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2985 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2986 = dot(vec3(cbLight._m0[_2948].xyz), vec3(_2975, _2976, _2977));
        float _4841 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
        float _2990 = _2967 * _2967;
        float _2994 = ((_2985 * _2985) * (_2990 + (-1.0))) + 1.0;
        float _3001 = exp2(log2(1.0 - (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) * 5.0);
        float _3008 = 1.0 - _2967;
        float _3018 = (0.5 / (((_2635 * ((_2981 * _3008) + _2967)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _3008) + _2967) * _2981))) * _2981;
        float _4852 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3020 = (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2990 / ((_2994 * _2994) * 3.141590118408203125));
        float _3021 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
        _2937 = (((((_3001 * _2657) + _1041) * cbLight._m0[_2952].x) * _3020) * _3021) + _2827;
        _2939 = (((((_3001 * _2659) + _1043) * cbLight._m0[_2952].y) * _3020) * _3021) + _2829;
        _2941 = (((((_3001 * _2660) + _1044) * cbLight._m0[_2952].z) * _3020) * _3021) + _2831;
    }
    float _3087;
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    float _3097;
    if (_2356.y == 0u)
    {
        uvec4 _3042 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3043 = _3042.x;
        uint _3054 = uint((float(_3042.y) * floor(float(uint(cbSceneParam._m0[85u].y * _979) / _3043))) + floor(float(uint(cbSceneParam._m0[85u].x * _978) / _3043)));
        float _3064 = (log2(_2134 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3065 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
        uint _3068 = uint(isnan(14.0) ? _3065 : (isnan(_3065) ? 14.0 : min(_3065, 14.0)));
        uvec4 _3073 = texelFetch(g_lightClusterGridBuffer, int(((_3068 << 2u) + (_3054 << 6u)) >> 2u));
        uint _3074 = _3073.x;
        uint _3075 = _3042.z;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        if (((((1u << ((_3075 >> 4u) & 15u)) + 4294967295u) & _3074) == 0u) || ((_3075 & 240u) == 0u))
        {
            _3154 = 0.0;
            _3156 = 0.0;
            _3158 = 0.0;
            _3160 = 0.0;
            _3162 = 0.0;
            _3164 = 0.0;
        }
        else
        {
            float _3155;
            float _3157;
            float _3159;
            float _3161;
            float _3163;
            float _3165;
            float _3299 = 0.0;
            float _3300 = 0.0;
            float _3301 = 0.0;
            float _3302 = 0.0;
            float _3303 = 0.0;
            float _3304 = 0.0;
            uint _3305 = 0u;
            uint _3314;
            bool _3315;
            for (;;)
            {
                _3314 = texelFetch(g_lightClassification, int((((_3068 << 5u) + (_3054 << 9u)) + (_3305 << 2u)) >> 2u)).x;
                _3315 = _3314 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3315)
                {
                    frontier_phi_66_pred = _3304;
                    frontier_phi_66_pred_1 = _3303;
                    frontier_phi_66_pred_2 = _3302;
                    frontier_phi_66_pred_3 = _3301;
                    frontier_phi_66_pred_4 = _3300;
                    frontier_phi_66_pred_5 = _3299;
                }
                else
                {
                    float _3423;
                    float _3424;
                    float _3425;
                    float _3426;
                    float _3427;
                    float _3428;
                    uint _3429;
                    _3423 = _3299;
                    _3424 = _3300;
                    _3425 = _3301;
                    _3426 = _3302;
                    _3427 = _3303;
                    _3428 = _3304;
                    _3429 = _3314;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    for (;;)
                    {
                        uint _3433 = uint(findLSB(_3429)) + (_3305 << 5u);
                        uint _3430 = (_3429 + 4294967295u) & _3429;
                        uint _3435 = _3433 * 48u;
                        vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3435)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 3u)).x));
                        uint _3455 = (_3433 * 48u) + 4u;
                        vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3455)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 3u)).x));
                        uint _3474 = (_3433 * 48u) + 8u;
                        vec3 _3485 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3474)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 2u)).x));
                        float _3489 = _3449.x - _2132;
                        float _3490 = _3449.y - _2133;
                        float _3491 = _3449.z - _2134;
                        float _3492 = dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491));
                        float _3495 = inversesqrt(_3492);
                        float _3496 = _3495 * _3489;
                        float _3497 = _3495 * _3490;
                        float _3498 = _3495 * _3491;
                        float _3499 = dot(vec3(_997, _1000, _1003), vec3(_3496, _3497, _3498));
                        float _3504 = 1.0 - (_3492 * _3449.w);
                        float _4878 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3505 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3506 = sqrt(_3492) * _3468.w;
                        float _3509 = 1.39999997615814208984375 / (_3506 + 1.39999997615814208984375);
                        float _3510 = _3509 * _3509;
                        float _3513 = ((1.0 - _3510) * _3499) + _3510;
                        float _3516 = _3506 * _3506;
                        float _3520 = ((isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0))) * _3505) / ((_3516 * 0.699999988079071044921875) + 1.0);
                        float _3524 = (-0.0) - _2132;
                        float _3525 = (-0.0) - _2133;
                        float _3526 = (-0.0) - _2134;
                        float _3530 = inversesqrt(dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526)));
                        float _3531 = _3530 * _3524;
                        float _3532 = _3530 * _3525;
                        float _3533 = _3530 * _3526;
                        float _3540 = exp2(log2(1.0 / ((_3516 * 3.5) + 5.0)) * 0.25);
                        float _3541 = 1.0 - _1072;
                        float _3548 = sqrt(1.0 - ((1.0 - (_3541 * _3541)) * (1.0 - (_3540 * _3540))));
                        float _3549 = _3548 * _3548;
                        float _3550 = _3549 * _3549;
                        float _3551 = _3531 + _3496;
                        float _3552 = _3532 + _3497;
                        float _3553 = _3533 + _3498;
                        float _3557 = inversesqrt(dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553)));
                        float _3561 = dot(vec3(_997, _1000, _1003), vec3(_3531, _3532, _3533));
                        float _4894 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3564 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                        float _3565 = dot(vec3(_997, _1000, _1003), vec3(_3557 * _3551, _3557 * _3552, _3557 * _3553));
                        float _4905 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3568 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                        float _3572 = ((_3568 * _3568) * (_3550 + (-1.0))) + 1.0;
                        float _3573 = _3509 * _3549;
                        float _3574 = _3573 * _3573;
                        float _3577 = ((1.0 - _3574) * _3499) + _3574;
                        float _4916 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                        float _3578 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3579 = 1.0 - _3549;
                        float _3589 = (0.5 / (((_3578 * ((_3564 * _3579) + _3549)) + 9.9999999392252902907785028219223e-09) + (((_3578 * _3579) + _3549) * _3564))) * _3578;
                        float _4927 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                        float _3600 = (((_3550 * 3.1415927410125732421875) * (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) / ((_3572 * _3572) * ((_3516 * 2.1991131305694580078125) + 3.141590118408203125))) * _3505;
                        _3358 = (_3520 * _3468.x) + _3426;
                        _3359 = (_3520 * _3468.y) + _3427;
                        _3360 = (_3520 * _3468.z) + _3428;
                        _3355 = (_3600 * _3485.x) + _3423;
                        _3356 = (_3600 * _3485.y) + _3424;
                        _3357 = (_3600 * _3485.z) + _3425;
                        if (_3430 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3423 = _3355;
                            _3424 = _3356;
                            _3425 = _3357;
                            _3426 = _3358;
                            _3427 = _3359;
                            _3428 = _3360;
                            _3429 = _3430;
                        }
                    }
                    frontier_phi_66_pred = _3360;
                    frontier_phi_66_pred_1 = _3359;
                    frontier_phi_66_pred_2 = _3358;
                    frontier_phi_66_pred_3 = _3357;
                    frontier_phi_66_pred_4 = _3356;
                    frontier_phi_66_pred_5 = _3355;
                }
                _3165 = frontier_phi_66_pred;
                _3163 = frontier_phi_66_pred_1;
                _3161 = frontier_phi_66_pred_2;
                _3159 = frontier_phi_66_pred_3;
                _3157 = frontier_phi_66_pred_4;
                _3155 = frontier_phi_66_pred_5;
                uint _3306 = _3305 + 1u;
                if (_3306 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3299 = _3155;
                    _3300 = _3157;
                    _3301 = _3159;
                    _3302 = _3161;
                    _3303 = _3163;
                    _3304 = _3165;
                    _3305 = _3306;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3154 = _3155;
            _3156 = _3157;
            _3158 = _3159;
            _3160 = _3161;
            _3162 = _3163;
            _3164 = _3165;
        }
        uvec4 _3168 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3169 = _3168.z;
        uint _3171 = (_3169 >> 8u) & 15u;
        float _3267;
        float _3269;
        float _3271;
        float _3273;
        float _3275;
        float _3277;
        if (((4294967295u << _3171) & _3074) == 0u)
        {
            _3267 = _3154;
            _3269 = _3156;
            _3271 = _3158;
            _3273 = _3160;
            _3275 = _3162;
            _3277 = _3164;
        }
        else
        {
            float _3292 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
            float _3293 = _3292 * _2132;
            float _3294 = _3292 * _2133;
            float _3295 = _3292 * _2134;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3171 < ((_3169 >> 12u) & 15u))
            {
                float _3268;
                float _3270;
                float _3272;
                float _3274;
                float _3276;
                float _3278;
                float _3406 = _3154;
                float _3407 = _3156;
                float _3408 = _3158;
                float _3409 = _3160;
                float _3410 = _3162;
                float _3411 = _3164;
                uint _3412 = _3171;
                uint _3421;
                bool _3422;
                for (;;)
                {
                    _3421 = texelFetch(g_lightClassification, int((((_3068 << 5u) + (_3054 << 9u)) + (_3412 << 2u)) >> 2u)).x;
                    _3422 = _3421 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3422)
                    {
                        frontier_phi_72_pred = _3411;
                        frontier_phi_72_pred_1 = _3410;
                        frontier_phi_72_pred_2 = _3409;
                        frontier_phi_72_pred_3 = _3408;
                        frontier_phi_72_pred_4 = _3407;
                        frontier_phi_72_pred_5 = _3406;
                    }
                    else
                    {
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3899;
                        float _3900;
                        float _3901;
                        float _3902;
                        float _3903;
                        float _3904;
                        float _3618 = _3406;
                        float _3619 = _3407;
                        float _3620 = _3408;
                        float _3621 = _3409;
                        float _3622 = _3410;
                        float _3623 = _3411;
                        uint _3624 = _3421;
                        uint _3625;
                        vec4 _3650;
                        float _3651;
                        vec4 _3666;
                        vec3 _3678;
                        vec4 _3693;
                        vec4 _3708;
                        float _3755;
                        bool _3756;
                        for (;;)
                        {
                            uint _3635 = ((_3412 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3624));
                            _3625 = (_3624 + 4294967295u) & _3624;
                            uint _3637 = _3635 * 40u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            _3651 = _3650.w;
                            uint _3653 = (_3635 * 40u) + 4u;
                            _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3668 = (_3635 * 40u) + 8u;
                            _3678 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x));
                            uint _3680 = (_3635 * 40u) + 16u;
                            _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            uint _3695 = (_3635 * 40u) + 20u;
                            _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            uint _3711 = (_3635 * 40u) + 24u;
                            vec4 _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            uint _3730 = (_3635 * 40u) + 28u;
                            vec4 _3743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 3u)).x));
                            _3755 = fma(_2134, _3743.z, fma(_2133, _3743.y, _3743.x * _2132)) + _3743.w;
                            _3756 = !((fma(_2134, _3724.z, fma(_2133, _3724.y, _3724.x * _2132)) + _3724.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3756)
                            {
                                float _3783 = _3650.x - _2132;
                                float _3784 = _3650.y - _2133;
                                float _3785 = _3650.z - _2134;
                                float _3786 = dot(vec3(_3783, _3784, _3785), vec3(_3783, _3784, _3785));
                                float _3789 = inversesqrt(_3786);
                                float _3790 = _3789 * _3783;
                                float _3791 = _3789 * _3784;
                                float _3792 = _3789 * _3785;
                                float _3796 = 1.0 - (_3786 / (_3651 * _3651));
                                float _4938 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3797 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3801 = sqrt(_3786) * _3666.w;
                                float _3803 = 1.39999997615814208984375 / (_3801 + 1.39999997615814208984375);
                                float _3804 = _3803 * _3803;
                                float _3807 = ((1.0 - _3804) * dot(vec3(_3790, _3791, _3792), vec3(_997, _1000, _1003))) + _3804;
                                float _3810 = _3801 * _3801;
                                float _3814 = (fma(_2134, _3693.z, fma(_2133, _3693.y, _3693.x * _2132)) + _3693.w) / _3755;
                                float _3815 = (fma(_2134, _3708.z, fma(_2133, _3708.y, _3708.x * _2132)) + _3708.w) / _3755;
                                float _3819 = 1.0 - dot(vec2(_3814, _3815), vec2(_3814, _3815));
                                float _4954 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3820 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3821 = _3820 * (((isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0))) * _3797) / ((_3810 * 0.699999988079071044921875) + 1.0));
                                float _3833 = exp2(log2(1.0 / ((_3810 * 3.5) + 5.0)) * 0.25);
                                float _3834 = 1.0 - _1072;
                                float _3841 = sqrt(1.0 - ((1.0 - (_3834 * _3834)) * (1.0 - (_3833 * _3833))));
                                float _3842 = _3841 * _3841;
                                float _3843 = _3842 * _3842;
                                float _3844 = _3790 - _3293;
                                float _3845 = _3791 - _3294;
                                float _3846 = _3792 - _3295;
                                float _3850 = inversesqrt(dot(vec3(_3844, _3845, _3846), vec3(_3844, _3845, _3846)));
                                float _3854 = dot(vec3(_997, _1000, _1003), vec3((-0.0) - _3293, (-0.0) - _3294, (-0.0) - _3295));
                                float _4965 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3857 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3858 = dot(vec3(_997, _1000, _1003), vec3(_3850 * _3844, _3850 * _3845, _3850 * _3846));
                                float _4976 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3861 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3865 = ((_3861 * _3861) * (_3843 + (-1.0))) + 1.0;
                                float _3866 = _3803 * _3842;
                                float _3867 = _3866 * _3866;
                                float _3873 = ((1.0 - _3867) * dot(vec3(_997, _1000, _1003), vec3(_3790, _3791, _3792))) + _3867;
                                float _4987 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3874 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3875 = 1.0 - _3842;
                                float _3885 = (0.5 / (((_3874 * ((_3857 * _3875) + _3842)) + 9.9999999392252902907785028219223e-09) + (((_3874 * _3875) + _3842) * _3857))) * _3874;
                                float _4998 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3895 = (_3820 * _3797) * (((_3843 * 3.1415927410125732421875) * (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0)))) / ((_3865 * _3865) * ((_3810 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3821 * _3666.y;
                                frontier_phi_78_pred_1 = _3821 * _3666.x;
                                frontier_phi_78_pred_2 = _3895 * _3678.z;
                                frontier_phi_78_pred_3 = _3895 * _3678.y;
                                frontier_phi_78_pred_4 = _3895 * _3678.x;
                                frontier_phi_78_pred_5 = _3821 * _3666.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3903 = frontier_phi_78_pred;
                            _3902 = frontier_phi_78_pred_1;
                            _3901 = frontier_phi_78_pred_2;
                            _3900 = frontier_phi_78_pred_3;
                            _3899 = frontier_phi_78_pred_4;
                            _3904 = frontier_phi_78_pred_5;
                            _3608 = _3902 + _3621;
                            _3609 = _3903 + _3622;
                            _3610 = _3904 + _3623;
                            _3605 = _3899 + _3618;
                            _3606 = _3900 + _3619;
                            _3607 = _3901 + _3620;
                            if (_3625 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3618 = _3605;
                                _3619 = _3606;
                                _3620 = _3607;
                                _3621 = _3608;
                                _3622 = _3609;
                                _3623 = _3610;
                                _3624 = _3625;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3610;
                        frontier_phi_72_pred_1 = _3609;
                        frontier_phi_72_pred_2 = _3608;
                        frontier_phi_72_pred_3 = _3607;
                        frontier_phi_72_pred_4 = _3606;
                        frontier_phi_72_pred_5 = _3605;
                    }
                    _3278 = frontier_phi_72_pred;
                    _3276 = frontier_phi_72_pred_1;
                    _3274 = frontier_phi_72_pred_2;
                    _3272 = frontier_phi_72_pred_3;
                    _3270 = frontier_phi_72_pred_4;
                    _3268 = frontier_phi_72_pred_5;
                    uint _3413 = _3412 + 1u;
                    if (_3413 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3406 = _3268;
                        _3407 = _3270;
                        _3408 = _3272;
                        _3409 = _3274;
                        _3410 = _3276;
                        _3411 = _3278;
                        _3412 = _3413;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3278;
                frontier_phi_60_61_ladder_1 = _3276;
                frontier_phi_60_61_ladder_2 = _3272;
                frontier_phi_60_61_ladder_3 = _3270;
                frontier_phi_60_61_ladder_4 = _3268;
                frontier_phi_60_61_ladder_5 = _3274;
            }
            else
            {
                frontier_phi_60_61_ladder = _3164;
                frontier_phi_60_61_ladder_1 = _3162;
                frontier_phi_60_61_ladder_2 = _3158;
                frontier_phi_60_61_ladder_3 = _3156;
                frontier_phi_60_61_ladder_4 = _3154;
                frontier_phi_60_61_ladder_5 = _3160;
            }
            _3267 = frontier_phi_60_61_ladder_4;
            _3269 = frontier_phi_60_61_ladder_3;
            _3271 = frontier_phi_60_61_ladder_2;
            _3273 = frontier_phi_60_61_ladder_5;
            _3275 = frontier_phi_60_61_ladder_1;
            _3277 = frontier_phi_60_61_ladder;
        }
        float _3282 = isnan(1.0) ? _1056 : (isnan(_1056) ? 1.0 : min(_1056, 1.0));
        _3087 = (_3282 * _3273) + _2599;
        _3089 = (_3282 * _3275) + _2601;
        _3091 = (_3282 * _3277) + _2603;
        _3093 = ((_3267 * _1041) * _3282) + _2937;
        _3095 = ((_3269 * _1043) * _3282) + _2939;
        _3097 = ((_3271 * _1044) * _3282) + _2941;
    }
    else
    {
        _3087 = _2599;
        _3089 = _2601;
        _3091 = _2603;
        _3093 = _2937;
        _3095 = _2939;
        _3097 = _2941;
    }
    float _5014 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _5025 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _5036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    uint _3117 = _1016 + 6u;
    float _3125 = _978 / cbSceneParam._m0[86u].x;
    float _3126 = _979 / cbSceneParam._m0[86u].y;
    vec4 _3140 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3125, _3126, (log2((isnan(cbSceneParam._m0[77u].w) ? _913 : (isnan(_913) ? cbSceneParam._m0[77u].w : min(_913, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3142 = _3140.x;
    float _3143 = _3140.y;
    float _3144 = _3140.z;
    float _3145 = _3140.w;
    float _3217;
    float _3219;
    float _3221;
    float _3223;
    if (_913 > cbSceneParam._m0[78u].w)
    {
        float _3179 = isnan(_913) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _913 : min(cbSceneParam._m0[80u].w, _913));
        float _3180 = _3179 / _913;
        float _3191 = _3180 * _963;
        float _3192 = _964 * _3180;
        float _3193 = (-0.0) - _3192;
        float _3195 = _3180 * _965;
        float _3197 = (cbSceneParam._m0[77u].w * _3193) / _3179;
        float _3198 = _3197 + cbSceneParam._m0[79u].w;
        float _3199 = cbSceneParam._m0[79u].w - _3192;
        float _3205 = sqrt(((_3191 * _3191) + (_3192 * _3192)) + (_3195 * _3195));
        float _3208 = (1.0 - (cbSceneParam._m0[77u].w / _3179)) * _3205;
        float _3213 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3215 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3368;
        if (abs((_3193 - _3197) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3368 = ((((_3198 > 0.0) ? exp2(_3213 * _3198) : (2.0 - exp2(_3215 * _3198))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3208;
        }
        else
        {
            float _3328 = 1.0 / cbSceneParam._m0[80u].x;
            float _3329 = isnan(_3199) ? _3198 : (isnan(_3198) ? _3199 : max(_3198, _3199));
            float _3330 = isnan(_3199) ? _3198 : (isnan(_3198) ? _3199 : min(_3198, _3199));
            float _3339 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : min(_3329, 0.0));
            float _3340 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : min(_3330, 0.0));
            _3368 = ((abs(_3205 / _3193) * cbSceneParam._m0[80u].y) * ((((_3339 - _3340) * 2.0) - ((exp2(_3213 * (isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0)))) - exp2(_3213 * (isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0))))) * _3328)) - ((exp2(_3215 * _3339) - exp2(_3215 * _3340)) * _3328))) + (_3208 * cbSceneParam._m0[80u].z);
        }
        vec4 _3370 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3125, _3126, 1.0), 0.0);
        float _3379 = exp2((_3368 * (-1.44269502162933349609375)) * (1.0 - _3370.w));
        float _3380 = log2(_3379);
        float _3396 = log2(_3145);
        _3217 = (exp2(_3396 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3380 * cbSceneParam._m0[78u].x)) * _3370.x) / cbSceneParam._m0[78u].x)) + _3142;
        _3219 = (exp2(_3396 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3380 * cbSceneParam._m0[78u].y)) * _3370.y) / cbSceneParam._m0[78u].y)) + _3143;
        _3221 = (exp2(_3396 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3380 * cbSceneParam._m0[78u].z)) * _3370.z) / cbSceneParam._m0[78u].z)) + _3144;
        _3223 = _3379 * _3145;
    }
    else
    {
        _3217 = _3142;
        _3219 = _3143;
        _3221 = _3144;
        _3223 = _3145;
    }
    float _3235 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3236 = _3235 == 3.0;
    float _3237 = log2(_3223);
    float _3244 = exp2(_3237 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0))) * (_3087 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1056))) + ((_3093 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1866)) * cbPerFrame._m0[3u].x));
    float _3245 = exp2(_3237 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_3089 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1056))) + ((_3095 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1866)) * cbPerFrame._m0[3u].x));
    float _3246 = exp2(_3237 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_3091 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1056))) + ((_3097 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1866)) * cbPerFrame._m0[3u].x));
    float _3255 = (_3235 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3255 * (_3236 ? _3244 : (_3244 + (cbSceneParam._m0[72u].w * _3217)));
    SV_Target.y = _3255 * (_3236 ? _3245 : (_3245 + (cbSceneParam._m0[72u].w * _3219)));
    SV_Target.z = _3255 * (_3236 ? _3246 : (_3246 + (cbSceneParam._m0[72u].w * _3221)));
    SV_Target.w = cbInstanceData._m0[_3117].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3117].w;
}


