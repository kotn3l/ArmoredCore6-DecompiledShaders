#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1463;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _272 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _272.x * cbMtdParam._m0[10u].x;
    float _279 = _272.y * cbMtdParam._m0[10u].y;
    float _280 = _272.z * cbMtdParam._m0[10u].z;
    vec4 _298 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _348 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _358 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _348)) + 1.0;
    float _3814 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _366 = (_359 * ((_298.x * cbMtdParam._m0[11u].x) - _278)) + _278;
    float _367 = (_359 * ((_298.y * cbMtdParam._m0[11u].y) - _279)) + _279;
    float _368 = (_359 * ((_298.z * cbMtdParam._m0[11u].z) - _280)) + _280;
    vec4 _386 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _417 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _348)) + 1.0;
    float _3825 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _425 = (_418 * ((_386.x * cbMtdParam._m0[12u].x) - _366)) + _366;
    float _426 = (_418 * ((_386.y * cbMtdParam._m0[12u].y) - _367)) + _367;
    float _427 = (_418 * ((_386.z * cbMtdParam._m0[12u].z) - _368)) + _368;
    vec4 _445 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _470 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _348)) + 1.0;
    float _3836 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    vec4 _499 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _507 = ((((_471 * ((_445.x * cbMtdParam._m0[13u].x) - _425)) + _425) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _499.x;
    float _510 = ((((_471 * ((_445.y * cbMtdParam._m0[13u].y) - _426)) + _426) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _499.y;
    float _513 = ((((_471 * ((_445.z * cbMtdParam._m0[13u].z) - _427)) + _427) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _499.z;
    vec4 _533 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _562 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3847 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _570 = (_563 * ((_533.x * cbMtdParam._m0[14u].x) - _507)) + _507;
    float _571 = (_563 * ((_533.y * cbMtdParam._m0[14u].y) - _510)) + _510;
    float _572 = (_563 * ((_533.z * cbMtdParam._m0[14u].z) - _513)) + _513;
    vec4 _592 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _620 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _3858 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _628 = (_621 * ((_592.x * cbMtdParam._m0[15u].x) - _570)) + _570;
    float _629 = (_621 * ((_592.y * cbMtdParam._m0[15u].y) - _571)) + _571;
    float _630 = (_621 * ((_592.z * cbMtdParam._m0[15u].z) - _572)) + _572;
    vec4 _643 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _645 = _643.x;
    float _663 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _645) * _359) + _645;
    float _680 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _663) * _418) + _663;
    float _697 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _680) * _471) + _680;
    float _699 = _697 - (_697 * TEXCOORD_5.x);
    vec4 _715 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _737 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _739 = _737.x;
    float _740 = _737.y;
    float _743 = cbMtdParam._m0[18u].y * _737.z;
    vec4 _755 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _764 = (((cbMtdParam._m0[18u].x * _755.z) - _743) * _359) + _743;
    vec4 _777 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _788 = (((cbMtdParam._m0[17u].w * _777.z) - _764) * _418) + _764;
    vec4 _801 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _810 = (((cbMtdParam._m0[17u].z * _801.z) - _788) * _471) + _788;
    float _815 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_715.z * cbMtdParam._m0[18u].z) - _810)) + _810;
    vec4 _828 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _842 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_828.z * cbMtdParam._m0[19u].y) - _815)) + _815;
    vec4 _855 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _867 = ((_755.x - _739) * _359) + _739;
    float _868 = ((_755.y - _740) * _359) + _740;
    float _873 = ((_777.x - _867) * _418) + _867;
    float _874 = ((_777.y - _868) * _418) + _868;
    float _883 = ((((_801.x - _873) * _471) + _873) * 2.0) + (-1.0);
    float _884 = ((((_801.y - _874) * _471) + _874) * 2.0) + (-1.0);
    float _885 = dot(vec2(_883, _884), vec2(_883, _884));
    float _3869 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _890 = sqrt(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))));
    float _907 = (((((_855.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _883) + ((((_715.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y)) + ((((_828.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _908 = (((((_855.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _884) + ((((_715.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y)) + ((((_828.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _911 = fma(_890, _242 * NORMAL.x, fma(_908, _249 * TANGENT.x, (_235 * _227) * _907));
    float _914 = fma(_890, _242 * NORMAL.y, fma(_908, _249 * TANGENT.y, (_235 * _228) * _907));
    float _917 = fma(_890, _242 * NORMAL.z, fma(_908, _249 * TANGENT.z, (_235 * _229) * _907));
    float _921 = inversesqrt(dot(vec3(_911, _914, _917), vec3(_911, _914, _917)));
    float _922 = _921 * _911;
    float _923 = _921 * _914;
    float _924 = _921 * _917;
    float _3880 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _925 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3902 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3913 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3924 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _929 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _945 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _995 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _985);
    float _996 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _985);
    float _997 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _985);
    float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
    float _1002 = _995 * _1001;
    float _1003 = _996 * _1001;
    float _1004 = _997 * _1001;
    float _1010 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1011 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1029 = fma(_924, cbSceneParam._m0[5u].z, fma(_923, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _922));
    float _1032 = fma(_924, cbSceneParam._m0[6u].z, fma(_923, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _922));
    float _1035 = fma(_924, cbSceneParam._m0[7u].z, fma(_923, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _922));
    uint _1048 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1050 = (_1048 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1056 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_1050].x;
    float _1057 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_1050].y;
    float _1058 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_1050].z;
    float _3935 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1059 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1060 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1061 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _1062 = 1.0 - _929;
    float _1063 = _1059 * _1062;
    float _1064 = _1060 * _1062;
    float _1065 = _1061 * _1062;
    float _1070 = (_1059 + (-0.039999999105930328369140625)) * _929;
    float _1071 = (_1060 + (-0.039999999105930328369140625)) * _929;
    float _1072 = (_1061 + (-0.039999999105930328369140625)) * _929;
    float _1073 = _1070 + 0.039999999105930328369140625;
    float _1075 = _1071 + 0.039999999105930328369140625;
    float _1076 = _1072 + 0.039999999105930328369140625;
    vec4 _1085 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1010, cbSceneParam._m0[86u].y * _1011));
    float _1088 = _1085.x * TEXCOORD_5.w;
    float _1089 = dot(vec3(_922, _923, _924), vec3(_1002, _1003, _1004));
    float _1092 = _1089 * 2.0;
    float _1096 = (_1092 * _922) - _1002;
    float _1097 = (_1092 * _923) - _1003;
    float _1098 = (_1092 * _924) - _1004;
    float _1102 = abs(dot(vec3(_1002, _1003, _1004), vec3(_922, _923, _924)));
    float _3968 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1104 = sqrt(_925);
    float _1117 = exp2((_1104 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1104 * 3.0));
    float _1123 = (1.0 - _1117) * ((_1104 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1124 = _1117 * _1104;
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1462;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1187 = fma(_1160, cbModelParam._m0[26u].z, fma(_1156, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1152));
        float _1191 = fma(_1160, cbModelParam._m0[27u].z, fma(_1156, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1152));
        float _1195 = fma(_1160, cbModelParam._m0[28u].z, fma(_1156, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1152));
        float _1220 = _1152 + _922;
        float _1221 = _1156 + _923;
        float _1222 = _1160 + _924;
        float _1232 = fma(_1222, cbModelParam._m0[26u].z, fma(_1221, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1220)) - _1187;
        float _1233 = fma(_1222, cbModelParam._m0[27u].z, fma(_1221, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1220)) - _1191;
        float _1234 = fma(_1222, cbModelParam._m0[28u].z, fma(_1221, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1220)) - _1195;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1187 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1191 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[34u].z) + ((((((_1195 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1290 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1256.x + (-0.5));
        float _1292 = _1290 * (_1256.y + (-0.5));
        float _1293 = _1290 * (_1256.z + (-0.5));
        float _1300 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1263.x + (-0.5));
        float _1302 = _1300 * (_1263.y + (-0.5));
        float _1303 = _1300 * (_1263.z + (-0.5));
        float _1310 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1270.x + (-0.5));
        float _1312 = _1310 * (_1270.y + (-0.5));
        float _1313 = _1310 * (_1270.z + (-0.5));
        float _1320 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1277.x + (-0.5));
        float _1322 = _1320 * (_1277.y + (-0.5));
        float _1323 = _1320 * (_1277.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1344 = (dot(vec3(_922, _923, _924), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1354 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4016 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1356 + 1.0))) + _1361) * _1324;
        float _1371 = _1292 * 0.5;
        float _1372 = _1302 * 0.5;
        float _1373 = _1312 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_922, _923, _924), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4049 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1398 + 1.0))) + _1403) * _1325;
        float _1413 = _1293 * 0.5;
        float _1414 = _1303 * 0.5;
        float _1415 = _1313 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_922, _923, _924), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4082 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1440 + 1.0))) + _1445) * _1326;
        _1462 = _1293;
        _1464 = _1292;
        _1465 = _1291;
        _1466 = _1303;
        _1467 = _1302;
        _1468 = _1301;
        _1469 = _1313;
        _1470 = _1312;
        _1471 = _1311;
        _1472 = _1326;
        _1473 = _1325;
        _1474 = _1324;
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1463;
        _1464 = _1463;
        _1465 = _1463;
        _1466 = _1463;
        _1467 = _1463;
        _1468 = _1463;
        _1469 = _1463;
        _1470 = _1463;
        _1471 = _1463;
        _1472 = _1463;
        _1473 = _1463;
        _1474 = _1463;
        _1475 = 0.0;
        _1476 = 0.0;
        _1477 = 0.0;
    }
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1503 = fma(_1160, cbModelParam._m0[30u].z, fma(_1156, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152));
        float _1507 = fma(_1160, cbModelParam._m0[31u].z, fma(_1156, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152));
        float _1511 = fma(_1160, cbModelParam._m0[32u].z, fma(_1156, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152));
        float _1534 = _1152 + _922;
        float _1535 = _1156 + _923;
        float _1536 = _1160 + _924;
        float _1546 = fma(_1536, cbModelParam._m0[30u].z, fma(_1535, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1534)) - _1503;
        float _1547 = fma(_1536, cbModelParam._m0[31u].z, fma(_1535, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1534)) - _1507;
        float _1548 = fma(_1536, cbModelParam._m0[32u].z, fma(_1535, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1534)) - _1511;
        float _1552 = inversesqrt(dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548)));
        float _1565 = ((_1552 * _1546) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1503 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1566 = ((_1552 * _1547) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1507 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1567 = ((_1552 * _1548) / cbModelParam._m0[35u].z) + ((((((_1511 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        float _1602 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1569.x + (-0.5));
        float _1604 = _1602 * (_1569.y + (-0.5));
        float _1605 = _1602 * (_1569.z + (-0.5));
        float _1612 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1576.x + (-0.5));
        float _1614 = _1612 * (_1576.y + (-0.5));
        float _1615 = _1612 * (_1576.z + (-0.5));
        float _1622 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1583.x + (-0.5));
        float _1624 = _1622 * (_1583.y + (-0.5));
        float _1625 = _1622 * (_1583.z + (-0.5));
        float _1632 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1590.x + (-0.5));
        float _1634 = _1632 * (_1590.y + (-0.5));
        float _1635 = _1632 * (_1590.z + (-0.5));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = _1603 * 0.5;
        float _1640 = _1613 * 0.5;
        float _1641 = _1623 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_922, _923, _924), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4145 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1666 + 1.0))) + _1671) * _1636;
        float _1681 = _1604 * 0.5;
        float _1682 = _1614 * 0.5;
        float _1683 = _1624 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_922, _923, _924), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4178 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1708 + 1.0))) + _1713) * _1637;
        float _1723 = _1605 * 0.5;
        float _1724 = _1615 * 0.5;
        float _1725 = _1625 * 0.5;
        float _1726 = dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725));
        float _1731 = (_1726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1726);
        float _1739 = (dot(vec3(_922, _923, _924), vec3(_1731 * _1723, _1731 * _1724, _1731 * _1725)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1748 = sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1750 = _1749 * 2.0;
        float _1754 = (1.0 - _1749) / (_1749 + 1.0);
        float _4211 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1764 = ((((1.0 - _1755) * (_1750 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1750 + 1.0))) + _1755) * _1638;
        _1772 = _1605;
        _1773 = _1604;
        _1774 = _1603;
        _1775 = _1615;
        _1776 = _1614;
        _1777 = _1613;
        _1778 = _1625;
        _1779 = _1624;
        _1780 = _1623;
        _1781 = _1638;
        _1782 = _1637;
        _1783 = _1636;
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
        _1786 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)));
    }
    else
    {
        _1772 = _1463;
        _1773 = _1463;
        _1774 = _1463;
        _1775 = _1463;
        _1776 = _1463;
        _1777 = _1463;
        _1778 = _1463;
        _1779 = _1463;
        _1780 = _1463;
        _1781 = _1463;
        _1782 = _1463;
        _1783 = _1463;
        _1784 = 0.0;
        _1785 = 0.0;
        _1786 = 0.0;
    }
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1475)) + _1475;
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1476)) + _1476;
    float _1798 = (cbModelParam._m0[1u].x * (_1786 - _1477)) + _1477;
    float _1819 = fma(_1798, cbSceneParam._m0[89u].z, fma(_1797, cbSceneParam._m0[89u].y, _1796 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1798, cbSceneParam._m0[90u].z, fma(_1797, cbSceneParam._m0[90u].y, _1796 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1798, cbSceneParam._m0[91u].z, fma(_1797, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1796));
    float _1840 = _1096 * 0.5;
    float _1841 = _1097 * 0.5;
    float _1842 = _1098 * 0.5;
    float _1843 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1846 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1849 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1883;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1856 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1462, _1466, _1469, _1472));
        float _1860 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1864 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1465, _1468, _1471, _1474));
        float _1871 = dot(vec4(cbModelParam._m0[39u]), vec4(_1840, _1841, _1842, 1.0));
        _1883 = dot(vec3(isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1871) ? 0.0 : (isnan(0.0) ? _1871 : max(0.0, _1871))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1883 = 1.0;
    }
    float _1894;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1885 = dot(vec4(cbModelParam._m0[40u]), vec4(_1840, _1841, _1842, 1.0));
        _1894 = dot(vec3(isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1885) ? 0.0 : (isnan(0.0) ? _1885 : max(0.0, _1885))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1894 = 1.0;
    }
    float _1898 = (_1894 * cbModelParam._m0[1u].x) + (_1883 * (1.0 - cbModelParam._m0[1u].x));
    float _1908 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _925);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1908 : min(cbModelParam._m0[25u].z, _1908));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1956 = fma(_1160, cbModelParam._m0[13u].z, fma(_1156, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1152)) + cbModelParam._m0[13u].w;
        float _1960 = fma(_1160, cbModelParam._m0[14u].z, fma(_1156, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1152)) + cbModelParam._m0[14u].w;
        float _1964 = fma(_1160, cbModelParam._m0[15u].z, fma(_1156, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1152)) + cbModelParam._m0[15u].w;
        float _1967 = fma(_1098, cbModelParam._m0[13u].z, fma(_1097, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1096));
        float _1970 = fma(_1098, cbModelParam._m0[14u].z, fma(_1097, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1096));
        float _1973 = fma(_1098, cbModelParam._m0[15u].z, fma(_1097, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1096));
        float _2001;
        if (_1967 > 0.0)
        {
            _2001 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2001 = frontier_phi_14_12_ladder;
        }
        float _2224;
        if (_1970 > 0.0)
        {
            _2224 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2224 = frontier_phi_23_19_ladder;
        }
        float _2481;
        if (_1973 > 0.0)
        {
            _2481 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2481 = frontier_phi_35_30_ladder;
        }
        float _2483 = isnan(_2224) ? _2001 : (isnan(_2001) ? _2224 : min(_2001, _2224));
        float _2484 = isnan(_2481) ? _2483 : (isnan(_2483) ? _2481 : min(_2483, _2481));
        float _2488 = (_2484 * _1967) + _1956;
        float _2489 = (_2484 * _1970) + _1960;
        float _2490 = (_2484 * _1973) + _1964;
        float _2491 = _2484 * 9.9999997473787516355514526367188e-05;
        float _2493 = (-1.0) - _2491;
        float _2495 = _2491 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2490 > _2495) || ((_2490 < _2493) || ((_2489 > _2495) || ((_2489 < _2493) || ((_2488 < _2493) || (_2488 > _2495))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2618 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2490, cbModelParam._m0[9u].z, fma(_2489, cbModelParam._m0[9u].y, _2488 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2490, cbModelParam._m0[10u].z, fma(_2489, cbModelParam._m0[10u].y, _2488 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2490, cbModelParam._m0[11u].z, fma(_2489, cbModelParam._m0[11u].y, _2488 * cbModelParam._m0[11u].x))), _1909);
            frontier_phi_13_35_ladder = _2618.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2618.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2618.x * cbModelParam._m0[1u].y;
        }
        _1989 = frontier_phi_13_35_ladder_2;
        _1991 = frontier_phi_13_35_ladder_1;
        _1993 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1977 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1096, _1097, _1098), _1909);
        _1989 = _1977.x * cbModelParam._m0[1u].y;
        _1991 = _1977.y * cbModelParam._m0[1u].y;
        _1993 = _1977.z * cbModelParam._m0[1u].y;
    }
    float _1997 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _925);
    float _1998 = isnan(_1997) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1997 : min(cbModelParam._m0[25u].w, _1997));
    float _2087;
    float _2089;
    float _2091;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2051 = fma(_1160, cbModelParam._m0[21u].z, fma(_1156, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1152)) + cbModelParam._m0[21u].w;
        float _2055 = fma(_1160, cbModelParam._m0[22u].z, fma(_1156, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1152)) + cbModelParam._m0[22u].w;
        float _2059 = fma(_1160, cbModelParam._m0[23u].z, fma(_1156, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1152)) + cbModelParam._m0[23u].w;
        float _2062 = fma(_1098, cbModelParam._m0[21u].z, fma(_1097, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1096));
        float _2065 = fma(_1098, cbModelParam._m0[22u].z, fma(_1097, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1096));
        float _2068 = fma(_1098, cbModelParam._m0[23u].z, fma(_1097, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1096));
        float _2229;
        if (_2062 > 0.0)
        {
            _2229 = abs((1.0 - _2051) / _2062);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2051 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2229 = frontier_phi_25_21_ladder;
        }
        float _2508;
        if (_2065 > 0.0)
        {
            _2508 = abs((1.0 - _2055) / _2065);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2055 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2508 = frontier_phi_37_32_ladder;
        }
        float _2721;
        if (_2068 > 0.0)
        {
            _2721 = abs((1.0 - _2059) / _2068);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2059 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2721 = frontier_phi_46_43_ladder;
        }
        float _2723 = isnan(_2508) ? _2229 : (isnan(_2229) ? _2508 : min(_2229, _2508));
        float _2724 = isnan(_2721) ? _2723 : (isnan(_2723) ? _2721 : min(_2723, _2721));
        float _2728 = (_2724 * _2062) + _2051;
        float _2729 = (_2724 * _2065) + _2055;
        float _2730 = (_2724 * _2068) + _2059;
        float _2731 = _2724 * 9.9999997473787516355514526367188e-05;
        float _2732 = (-1.0) - _2731;
        float _2734 = _2731 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2730 > _2734) || ((_2730 < _2732) || ((_2729 > _2734) || ((_2729 < _2732) || ((_2728 < _2732) || (_2728 > _2734))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2929 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2730, cbModelParam._m0[17u].z, fma(_2729, cbModelParam._m0[17u].y, _2728 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2730, cbModelParam._m0[18u].z, fma(_2729, cbModelParam._m0[18u].y, _2728 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2730, cbModelParam._m0[19u].z, fma(_2729, cbModelParam._m0[19u].y, _2728 * cbModelParam._m0[19u].x))), _1998);
            frontier_phi_22_46_ladder = _2929.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2929.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2929.x * cbModelParam._m0[1u].z;
        }
        _2087 = frontier_phi_22_46_ladder_2;
        _2089 = frontier_phi_22_46_ladder_1;
        _2091 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2071 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1096, _1097, _1098), _1998);
        _2087 = _2071.x * cbModelParam._m0[1u].z;
        _2089 = _2071.y * cbModelParam._m0[1u].z;
        _2091 = _2071.z * cbModelParam._m0[1u].z;
    }
    float _2104 = (((_1123 * _1073) + _1124) * _1088) * ((cbModelParam._m0[1u].w * (_2087 - _1989)) + _1989);
    float _2106 = (((_1123 * _1075) + _1124) * _1088) * ((cbModelParam._m0[1u].w * (_2089 - _1991)) + _1991);
    float _2108 = (((_1123 * _1076) + _1124) * _1088) * ((cbModelParam._m0[1u].w * (_2091 - _1993)) + _1993);
    float _2111 = fma(_2108, cbSceneParam._m0[89u].z, fma(_2106, cbSceneParam._m0[89u].y, _2104 * cbSceneParam._m0[89u].x));
    float _2114 = fma(_2108, cbSceneParam._m0[90u].z, fma(_2106, cbSceneParam._m0[90u].y, _2104 * cbSceneParam._m0[90u].x));
    float _2117 = fma(_2108, cbSceneParam._m0[91u].z, fma(_2106, cbSceneParam._m0[91u].y, _2104 * cbSceneParam._m0[91u].x));
    vec4 _2125 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1010, _1011));
    float _2127 = _2125.w;
    float _2139 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2127);
    float _2140 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2127);
    float _2141 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2127);
    uvec4 _2145 = floatBitsToUint(cbInstanceData._m0[_1048 + 5u]);
    uint _2147 = _2145.x * 14u;
    uint _2148 = _2147 + 13u;
    float _2155 = _1088 + (-1.0);
    float _2160 = (cbLight._m0[_2148].x * _2155) + 1.0;
    float _2161 = (cbLight._m0[_2148].y * _2155) + 1.0;
    float _2162 = (cbLight._m0[_2148].z * _2155) + 1.0;
    float _2163 = (cbLight._m0[_2148].w * _2155) + 1.0;
    uint _2164 = _2147 + 5u;
    float _2170 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
    uint _2174 = _2147 + 4u;
    float _2183 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
    uint _2187 = _2147 | 1u;
    float _2198 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_922, _923, _924));
    float _2201 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_922, _923, _924));
    float _4347 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _4358 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2206 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * 0.3183098733425140380859375;
    float _2208 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.3183098733425140380859375;
    float _2215 = ((cbLight._m0[_2164].x * _2170) * _2208) + (((cbLight._m0[_2174].x * _2139) * _2183) * _2206);
    float _2216 = ((_2170 * cbLight._m0[_2164].y) * _2208) + (((cbLight._m0[_2174].y * _2140) * _2183) * _2206);
    float _2217 = ((_2170 * cbLight._m0[_2164].z) * _2208) + (((cbLight._m0[_2174].z * _2141) * _2183) * _2206);
    uvec4 _2221 = floatBitsToUint(cbLight._m0[_2147 + 12u]);
    bool _2223 = _2221.x == 0u;
    float _2234;
    float _2236;
    float _2238;
    if (_2223)
    {
        _2234 = _2215;
        _2236 = _2216;
        _2238 = _2217;
    }
    else
    {
        uint _2242 = _2147 + 6u;
        float _2258 = (dot(vec3(cbLight._m0[_2147 + 2u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2259 = _2258 * _2258;
        float _4369 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2260 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2261 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2234 = (((cbLight._m0[_2242].x * 0.3183098733425140380859375) * _2260) * _2261) + _2215;
        _2236 = (((cbLight._m0[_2242].y * 0.3183098733425140380859375) * _2260) * _2261) + _2216;
        _2238 = (((cbLight._m0[_2242].z * 0.3183098733425140380859375) * _2260) * _2261) + _2217;
    }
    bool _2241 = _2221.y == 0u;
    float _2279;
    float _2281;
    float _2283;
    if (_2241)
    {
        _2279 = _2234;
        _2281 = _2236;
        _2283 = _2238;
    }
    else
    {
        uint _2452 = _2147 + 7u;
        float _2468 = (dot(vec3(cbLight._m0[_2147 + 3u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2469 = _2468 * _2468;
        float _4385 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2470 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2471 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2279 = (((cbLight._m0[_2452].x * 0.3183098733425140380859375) * _2470) * _2471) + _2234;
        _2281 = (((cbLight._m0[_2452].y * 0.3183098733425140380859375) * _2470) * _2471) + _2236;
        _2283 = (((cbLight._m0[_2452].z * 0.3183098733425140380859375) * _2470) * _2471) + _2238;
    }
    uint _2286 = _2147 + 8u;
    float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _925) * 0.949999988079071044921875);
    float _2300 = _2299 * _2299;
    float _2301 = cbLight._m0[_2147].x + _1002;
    float _2302 = cbLight._m0[_2147].y + _1003;
    float _2303 = cbLight._m0[_2147].z + _1004;
    float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
    float _2308 = _2307 * _2301;
    float _2309 = _2307 * _2302;
    float _2310 = _2307 * _2303;
    float _2311 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2147].xyz));
    float _4401 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _4412 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _2315 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2316 = dot(vec3(_922, _923, _924), vec3(_2308, _2309, _2310));
    float _4423 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2320 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2308, _2309, _2310));
    float _4434 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2324 = _2300 * _2300;
    float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
    float _2336 = exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0);
    float _2337 = 0.959999978542327880859375 - _1070;
    float _2339 = 0.959999978542327880859375 - _1071;
    float _2340 = 0.959999978542327880859375 - _1072;
    float _2347 = 1.0 - _2300;
    float _2358 = (0.5 / (((_2315 * ((_2314 * _2347) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2347) + _2300) * _2314))) * _2314;
    float _4445 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2360 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
    uint _2374 = _2147 + 9u;
    float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _925) * 0.949999988079071044921875);
    float _2386 = _2385 * _2385;
    float _2387 = cbLight._m0[_2187].x + _1002;
    float _2388 = cbLight._m0[_2187].y + _1003;
    float _2389 = cbLight._m0[_2187].z + _1004;
    float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
    float _2394 = _2393 * _2387;
    float _2395 = _2393 * _2388;
    float _2396 = _2393 * _2389;
    float _2397 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2187].xyz));
    float _4456 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2401 = dot(vec3(_922, _923, _924), vec3(_2394, _2395, _2396));
    float _4467 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2405 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2394, _2395, _2396));
    float _4478 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2409 = _2386 * _2386;
    float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
    float _2420 = exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0);
    float _2427 = 1.0 - _2386;
    float _2437 = (0.5 / (((_2315 * ((_2400 * _2427) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2427) + _2386) * _2400))) * _2400;
    float _4489 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2439 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
    float _2449 = (((((_2420 * _2337) + _1073) * cbLight._m0[_2374].x) * _2439) * _2170) + ((((cbLight._m0[_2286].x * _2139) * ((_2336 * _2337) + _1073)) * _2360) * _2183);
    float _2450 = (((((_2420 * _2339) + _1075) * cbLight._m0[_2374].y) * _2439) * _2170) + ((((cbLight._m0[_2286].y * _2140) * ((_2336 * _2339) + _1075)) * _2360) * _2183);
    float _2451 = (((((_2420 * _2340) + _1076) * cbLight._m0[_2374].z) * _2439) * _2170) + ((((cbLight._m0[_2286].z * _2141) * ((_2336 * _2340) + _1076)) * _2360) * _2183);
    float _2513;
    float _2515;
    float _2517;
    if (_2223)
    {
        _2513 = _2449;
        _2515 = _2450;
        _2517 = _2451;
    }
    else
    {
        uint _2519 = _2147 + 2u;
        uint _2523 = _2147 + 10u;
        float _2537 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2519].w)) * _925) * 0.949999988079071044921875);
        float _2538 = _2537 * _2537;
        float _2539 = cbLight._m0[_2519].x + _1002;
        float _2540 = cbLight._m0[_2519].y + _1003;
        float _2541 = cbLight._m0[_2519].z + _1004;
        float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
        float _2546 = _2545 * _2539;
        float _2547 = _2545 * _2540;
        float _2548 = _2545 * _2541;
        float _2549 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2519].xyz));
        float _4500 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2553 = dot(vec3(_922, _923, _924), vec3(_2546, _2547, _2548));
        float _4511 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2557 = dot(vec3(cbLight._m0[_2519].xyz), vec3(_2546, _2547, _2548));
        float _4522 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2561 = _2538 * _2538;
        float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
        float _2572 = exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0);
        float _2579 = 1.0 - _2538;
        float _2589 = (0.5 / (((_2315 * ((_2552 * _2579) + _2538)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2579) + _2538) * _2552))) * _2552;
        float _4533 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2591 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
        float _2592 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2513 = (((((_2572 * _2337) + _1073) * cbLight._m0[_2523].x) * _2591) * _2592) + _2449;
        _2515 = (((((_2572 * _2339) + _1075) * cbLight._m0[_2523].y) * _2591) * _2592) + _2450;
        _2517 = (((((_2572 * _2340) + _1076) * cbLight._m0[_2523].z) * _2591) * _2592) + _2451;
    }
    float _2627;
    float _2629;
    float _2631;
    if (_2241)
    {
        _2627 = _2513;
        _2629 = _2515;
        _2631 = _2517;
    }
    else
    {
        uint _2638 = _2147 + 3u;
        uint _2642 = _2147 + 11u;
        float _2656 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2638].w)) * _925) * 0.949999988079071044921875);
        float _2657 = _2656 * _2656;
        float _2658 = cbLight._m0[_2638].x + _1002;
        float _2659 = cbLight._m0[_2638].y + _1003;
        float _2660 = cbLight._m0[_2638].z + _1004;
        float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
        float _2665 = _2664 * _2658;
        float _2666 = _2664 * _2659;
        float _2667 = _2664 * _2660;
        float _2668 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2638].xyz));
        float _4549 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2672 = dot(vec3(_922, _923, _924), vec3(_2665, _2666, _2667));
        float _4560 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2675 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2676 = dot(vec3(cbLight._m0[_2638].xyz), vec3(_2665, _2666, _2667));
        float _4571 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2680 = _2657 * _2657;
        float _2684 = ((_2675 * _2675) * (_2680 + (-1.0))) + 1.0;
        float _2691 = exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0);
        float _2698 = 1.0 - _2657;
        float _2708 = (0.5 / (((_2315 * ((_2671 * _2698) + _2657)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2698) + _2657) * _2671))) * _2671;
        float _4582 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2710 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2680 / ((_2684 * _2684) * 3.141590118408203125));
        float _2711 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2627 = (((((_2691 * _2337) + _1073) * cbLight._m0[_2642].x) * _2710) * _2711) + _2513;
        _2629 = (((((_2691 * _2339) + _1075) * cbLight._m0[_2642].y) * _2710) * _2711) + _2515;
        _2631 = (((((_2691 * _2340) + _1076) * cbLight._m0[_2642].z) * _2710) * _2711) + _2517;
    }
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    if (_2145.y == 0u)
    {
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2786;
        float _2788 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2786;
        float _2789 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2786;
        uvec4 _2801 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2802 = _2801.x;
        uint _2813 = uint((float(_2801.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1011) / _2802))) + floor(float(uint(cbSceneParam._m0[85u].x * _1010) / _2802)));
        float _2823 = (log2(_2789 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2824 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        uint _2827 = uint(isnan(14.0) ? _2824 : (isnan(_2824) ? 14.0 : min(_2824, 14.0)));
        uvec4 _2832 = texelFetch(g_lightClusterGridBuffer, int(((_2827 << 2u) + (_2813 << 6u)) >> 2u));
        uint _2833 = _2832.x;
        uint _2834 = _2801.z;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        if (((((1u << ((_2834 >> 4u) & 15u)) + 4294967295u) & _2833) == 0u) || ((_2834 & 240u) == 0u))
        {
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
        }
        else
        {
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            uint _3085 = 0u;
            uint _3094;
            bool _3095;
            for (;;)
            {
                _3094 = texelFetch(g_lightClassification, int((((_2827 << 5u) + (_2813 << 9u)) + (_3085 << 2u)) >> 2u)).x;
                _3095 = _3094 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3095)
                {
                    frontier_phi_61_pred = _3079;
                    frontier_phi_61_pred_1 = _3084;
                    frontier_phi_61_pred_2 = _3083;
                    frontier_phi_61_pred_3 = _3082;
                    frontier_phi_61_pred_4 = _3081;
                    frontier_phi_61_pred_5 = _3080;
                }
                else
                {
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    uint _3209;
                    _3203 = _3079;
                    _3204 = _3080;
                    _3205 = _3081;
                    _3206 = _3082;
                    _3207 = _3083;
                    _3208 = _3084;
                    _3209 = _3094;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    for (;;)
                    {
                        uint _3213 = uint(findLSB(_3209)) + (_3085 << 5u);
                        uint _3210 = (_3209 + 4294967295u) & _3209;
                        uint _3215 = _3213 * 48u;
                        vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3235 = (_3213 * 48u) + 4u;
                        vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 3u)).x));
                        uint _3254 = (_3213 * 48u) + 8u;
                        vec3 _3265 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x));
                        float _3269 = _3229.x - _2787;
                        float _3270 = _3229.y - _2788;
                        float _3271 = _3229.z - _2789;
                        float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                        float _3275 = inversesqrt(_3272);
                        float _3276 = _3275 * _3269;
                        float _3277 = _3275 * _3270;
                        float _3278 = _3275 * _3271;
                        float _3279 = dot(vec3(_1029, _1032, _1035), vec3(_3276, _3277, _3278));
                        float _3284 = 1.0 - (_3272 * _3229.w);
                        float _4608 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3285 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3286 = sqrt(_3272) * _3248.w;
                        float _3289 = 1.39999997615814208984375 / (_3286 + 1.39999997615814208984375);
                        float _3290 = _3289 * _3289;
                        float _3293 = ((1.0 - _3290) * _3279) + _3290;
                        float _3296 = _3286 * _3286;
                        float _3300 = ((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3285) / ((_3296 * 0.699999988079071044921875) + 1.0);
                        float _3304 = (-0.0) - _2787;
                        float _3305 = (-0.0) - _2788;
                        float _3306 = (-0.0) - _2789;
                        float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                        float _3311 = _3310 * _3304;
                        float _3312 = _3310 * _3305;
                        float _3313 = _3310 * _3306;
                        float _3321 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                        float _3322 = 1.0 - _1104;
                        float _3329 = sqrt(1.0 - ((1.0 - (_3322 * _3322)) * (1.0 - (_3321 * _3321))));
                        float _3330 = _3329 * _3329;
                        float _3331 = _3330 * _3330;
                        float _3332 = _3311 + _3276;
                        float _3333 = _3312 + _3277;
                        float _3334 = _3313 + _3278;
                        float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                        float _3342 = dot(vec3(_1029, _1032, _1035), vec3(_3311, _3312, _3313));
                        float _4624 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3345 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3346 = dot(vec3(_1029, _1032, _1035), vec3(_3338 * _3332, _3338 * _3333, _3338 * _3334));
                        float _4635 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3349 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3353 = ((_3349 * _3349) * (_3331 + (-1.0))) + 1.0;
                        float _3354 = _3289 * _3330;
                        float _3355 = _3354 * _3354;
                        float _3358 = ((1.0 - _3355) * _3279) + _3355;
                        float _4646 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3359 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3360 = 1.0 - _3330;
                        float _3370 = (0.5 / (((_3359 * ((_3345 * _3360) + _3330)) + 9.9999999392252902907785028219223e-09) + (((_3359 * _3360) + _3330) * _3345))) * _3359;
                        float _4657 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3381 = (((_3331 * 3.1415927410125732421875) * (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) / ((_3353 * _3353) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125))) * _3285;
                        _3138 = (_3300 * _3248.x) + _3206;
                        _3139 = (_3300 * _3248.y) + _3207;
                        _3140 = (_3300 * _3248.z) + _3208;
                        _3135 = (_3381 * _3265.x) + _3203;
                        _3136 = (_3381 * _3265.y) + _3204;
                        _3137 = (_3381 * _3265.z) + _3205;
                        if (_3210 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3203 = _3135;
                            _3204 = _3136;
                            _3205 = _3137;
                            _3206 = _3138;
                            _3207 = _3139;
                            _3208 = _3140;
                            _3209 = _3210;
                        }
                    }
                    frontier_phi_61_pred = _3135;
                    frontier_phi_61_pred_1 = _3140;
                    frontier_phi_61_pred_2 = _3139;
                    frontier_phi_61_pred_3 = _3138;
                    frontier_phi_61_pred_4 = _3137;
                    frontier_phi_61_pred_5 = _3136;
                }
                _2935 = frontier_phi_61_pred;
                _2945 = frontier_phi_61_pred_1;
                _2943 = frontier_phi_61_pred_2;
                _2941 = frontier_phi_61_pred_3;
                _2939 = frontier_phi_61_pred_4;
                _2937 = frontier_phi_61_pred_5;
                uint _3086 = _3085 + 1u;
                if (_3086 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3079 = _2935;
                    _3080 = _2937;
                    _3081 = _2939;
                    _3082 = _2941;
                    _3083 = _2943;
                    _3084 = _2945;
                    _3085 = _3086;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
        }
        uvec4 _2948 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2949 = _2948.z;
        uint _2951 = (_2949 >> 8u) & 15u;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        if (((4294967295u << _2951) & _2833) == 0u)
        {
            _3047 = _2934;
            _3049 = _2936;
            _3051 = _2938;
            _3053 = _2940;
            _3055 = _2942;
            _3057 = _2944;
        }
        else
        {
            float _3072 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
            float _3073 = _3072 * _2787;
            float _3074 = _3072 * _2788;
            float _3075 = _3072 * _2789;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2951 < ((_2949 >> 12u) & 15u))
            {
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3186 = _2934;
                float _3187 = _2936;
                float _3188 = _2938;
                float _3189 = _2940;
                float _3190 = _2942;
                float _3191 = _2944;
                uint _3192 = _2951;
                uint _3201;
                bool _3202;
                for (;;)
                {
                    _3201 = texelFetch(g_lightClassification, int((((_2827 << 5u) + (_2813 << 9u)) + (_3192 << 2u)) >> 2u)).x;
                    _3202 = _3201 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3202)
                    {
                        frontier_phi_67_pred = _3189;
                        frontier_phi_67_pred_1 = _3190;
                        frontier_phi_67_pred_2 = _3191;
                        frontier_phi_67_pred_3 = _3188;
                        frontier_phi_67_pred_4 = _3187;
                        frontier_phi_67_pred_5 = _3186;
                    }
                    else
                    {
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3399 = _3186;
                        float _3400 = _3187;
                        float _3401 = _3188;
                        float _3402 = _3189;
                        float _3403 = _3190;
                        float _3404 = _3191;
                        uint _3405 = _3201;
                        uint _3406;
                        vec4 _3431;
                        float _3432;
                        vec4 _3447;
                        vec3 _3459;
                        vec4 _3474;
                        vec4 _3489;
                        float _3536;
                        bool _3537;
                        for (;;)
                        {
                            uint _3416 = ((_3192 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3405));
                            _3406 = (_3405 + 4294967295u) & _3405;
                            uint _3418 = _3416 * 40u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            _3432 = _3431.w;
                            uint _3434 = (_3416 * 40u) + 4u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3449 = (_3416 * 40u) + 8u;
                            _3459 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x));
                            uint _3461 = (_3416 * 40u) + 16u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3476 = (_3416 * 40u) + 20u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3492 = (_3416 * 40u) + 24u;
                            vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3511 = (_3416 * 40u) + 28u;
                            vec4 _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            _3536 = fma(_2789, _3524.z, fma(_2788, _3524.y, _3524.x * _2787)) + _3524.w;
                            _3537 = !((fma(_2789, _3505.z, fma(_2788, _3505.y, _3505.x * _2787)) + _3505.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3537)
                            {
                                float _3564 = _3431.x - _2787;
                                float _3565 = _3431.y - _2788;
                                float _3566 = _3431.z - _2789;
                                float _3567 = dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566));
                                float _3570 = inversesqrt(_3567);
                                float _3571 = _3570 * _3564;
                                float _3572 = _3570 * _3565;
                                float _3573 = _3570 * _3566;
                                float _3577 = 1.0 - (_3567 / (_3432 * _3432));
                                float _4668 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3582 = sqrt(_3567) * _3447.w;
                                float _3584 = 1.39999997615814208984375 / (_3582 + 1.39999997615814208984375);
                                float _3585 = _3584 * _3584;
                                float _3588 = ((1.0 - _3585) * dot(vec3(_3571, _3572, _3573), vec3(_1029, _1032, _1035))) + _3585;
                                float _3591 = _3582 * _3582;
                                float _3595 = (fma(_2789, _3474.z, fma(_2788, _3474.y, _3474.x * _2787)) + _3474.w) / _3536;
                                float _3596 = (fma(_2789, _3489.z, fma(_2788, _3489.y, _3489.x * _2787)) + _3489.w) / _3536;
                                float _3600 = 1.0 - dot(vec2(_3595, _3596), vec2(_3595, _3596));
                                float _4684 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3601 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3602 = _3601 * (((isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0))) * _3578) / ((_3591 * 0.699999988079071044921875) + 1.0));
                                float _3614 = exp2(log2(1.0 / ((_3591 * 3.5) + 5.0)) * 0.25);
                                float _3615 = 1.0 - _1104;
                                float _3622 = sqrt(1.0 - ((1.0 - (_3615 * _3615)) * (1.0 - (_3614 * _3614))));
                                float _3623 = _3622 * _3622;
                                float _3624 = _3623 * _3623;
                                float _3625 = _3571 - _3073;
                                float _3626 = _3572 - _3074;
                                float _3627 = _3573 - _3075;
                                float _3631 = inversesqrt(dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627)));
                                float _3635 = dot(vec3(_1029, _1032, _1035), vec3((-0.0) - _3073, (-0.0) - _3074, (-0.0) - _3075));
                                float _4695 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3638 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3639 = dot(vec3(_1029, _1032, _1035), vec3(_3631 * _3625, _3631 * _3626, _3631 * _3627));
                                float _4706 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3642 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3646 = ((_3642 * _3642) * (_3624 + (-1.0))) + 1.0;
                                float _3647 = _3584 * _3623;
                                float _3648 = _3647 * _3647;
                                float _3654 = ((1.0 - _3648) * dot(vec3(_1029, _1032, _1035), vec3(_3571, _3572, _3573))) + _3648;
                                float _4717 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3656 = 1.0 - _3623;
                                float _3666 = (0.5 / (((_3655 * ((_3638 * _3656) + _3623)) + 9.9999999392252902907785028219223e-09) + (((_3655 * _3656) + _3623) * _3638))) * _3655;
                                float _4728 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3676 = (_3601 * _3578) * (((_3624 * 3.1415927410125732421875) * (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) / ((_3646 * _3646) * ((_3591 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3676 * _3459.x;
                                frontier_phi_73_pred_1 = _3676 * _3459.y;
                                frontier_phi_73_pred_2 = _3602 * _3447.z;
                                frontier_phi_73_pred_3 = _3602 * _3447.y;
                                frontier_phi_73_pred_4 = _3602 * _3447.x;
                                frontier_phi_73_pred_5 = _3676 * _3459.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3680 = frontier_phi_73_pred;
                            _3681 = frontier_phi_73_pred_1;
                            _3685 = frontier_phi_73_pred_2;
                            _3684 = frontier_phi_73_pred_3;
                            _3683 = frontier_phi_73_pred_4;
                            _3682 = frontier_phi_73_pred_5;
                            _3389 = _3683 + _3402;
                            _3390 = _3684 + _3403;
                            _3391 = _3685 + _3404;
                            _3386 = _3680 + _3399;
                            _3387 = _3681 + _3400;
                            _3388 = _3682 + _3401;
                            if (_3406 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3406;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3389;
                        frontier_phi_67_pred_1 = _3390;
                        frontier_phi_67_pred_2 = _3391;
                        frontier_phi_67_pred_3 = _3388;
                        frontier_phi_67_pred_4 = _3387;
                        frontier_phi_67_pred_5 = _3386;
                    }
                    _3054 = frontier_phi_67_pred;
                    _3056 = frontier_phi_67_pred_1;
                    _3058 = frontier_phi_67_pred_2;
                    _3052 = frontier_phi_67_pred_3;
                    _3050 = frontier_phi_67_pred_4;
                    _3048 = frontier_phi_67_pred_5;
                    uint _3193 = _3192 + 1u;
                    if (_3193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3186 = _3048;
                        _3187 = _3050;
                        _3188 = _3052;
                        _3189 = _3054;
                        _3190 = _3056;
                        _3191 = _3058;
                        _3192 = _3193;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3056;
                frontier_phi_55_56_ladder_1 = _3058;
                frontier_phi_55_56_ladder_2 = _3054;
                frontier_phi_55_56_ladder_3 = _3052;
                frontier_phi_55_56_ladder_4 = _3050;
                frontier_phi_55_56_ladder_5 = _3048;
            }
            else
            {
                frontier_phi_55_56_ladder = _2942;
                frontier_phi_55_56_ladder_1 = _2944;
                frontier_phi_55_56_ladder_2 = _2940;
                frontier_phi_55_56_ladder_3 = _2938;
                frontier_phi_55_56_ladder_4 = _2936;
                frontier_phi_55_56_ladder_5 = _2934;
            }
            _3047 = frontier_phi_55_56_ladder_5;
            _3049 = frontier_phi_55_56_ladder_4;
            _3051 = frontier_phi_55_56_ladder_3;
            _3053 = frontier_phi_55_56_ladder_2;
            _3055 = frontier_phi_55_56_ladder;
            _3057 = frontier_phi_55_56_ladder_1;
        }
        float _3062 = isnan(1.0) ? _1088 : (isnan(_1088) ? 1.0 : min(_1088, 1.0));
        _2846 = (_3062 * _3053) + _2279;
        _2848 = (_3062 * _3055) + _2281;
        _2850 = (_3062 * _3057) + _2283;
        _2852 = ((_3047 * _1073) * _3062) + _2627;
        _2854 = ((_3049 * _1075) * _3062) + _2629;
        _2856 = ((_3051 * _1076) * _3062) + _2631;
    }
    else
    {
        _2846 = _2279;
        _2848 = _2281;
        _2850 = _2283;
        _2852 = _2627;
        _2854 = _2629;
        _2856 = _2631;
    }
    float _4744 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _4755 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _4766 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    uint _2876 = _1048 + 6u;
    float _2884 = _1010 / cbSceneParam._m0[86u].x;
    float _2885 = _1011 / cbSceneParam._m0[86u].y;
    vec4 _2899 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2884, _2885, (log2((isnan(cbSceneParam._m0[77u].w) ? _945 : (isnan(_945) ? cbSceneParam._m0[77u].w : min(_945, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2901 = _2899.x;
    float _2902 = _2899.y;
    float _2903 = _2899.z;
    float _2904 = _2899.w;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    if (_945 > cbSceneParam._m0[78u].w)
    {
        float _2959 = isnan(_945) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _945 : min(cbSceneParam._m0[80u].w, _945));
        float _2960 = _2959 / _945;
        float _2971 = _2960 * _995;
        float _2972 = _996 * _2960;
        float _2973 = (-0.0) - _2972;
        float _2975 = _2960 * _997;
        float _2977 = (cbSceneParam._m0[77u].w * _2973) / _2959;
        float _2978 = _2977 + cbSceneParam._m0[79u].w;
        float _2979 = cbSceneParam._m0[79u].w - _2972;
        float _2985 = sqrt(((_2971 * _2971) + (_2972 * _2972)) + (_2975 * _2975));
        float _2988 = (1.0 - (cbSceneParam._m0[77u].w / _2959)) * _2985;
        float _2993 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2995 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3148;
        if (abs((_2973 - _2977) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3148 = ((((_2978 > 0.0) ? exp2(_2993 * _2978) : (2.0 - exp2(_2995 * _2978))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2988;
        }
        else
        {
            float _3108 = 1.0 / cbSceneParam._m0[80u].x;
            float _3109 = isnan(_2979) ? _2978 : (isnan(_2978) ? _2979 : max(_2978, _2979));
            float _3110 = isnan(_2979) ? _2978 : (isnan(_2978) ? _2979 : min(_2978, _2979));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            float _3120 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : min(_3110, 0.0));
            _3148 = ((abs(_2985 / _2973) * cbSceneParam._m0[80u].y) * ((((_3119 - _3120) * 2.0) - ((exp2(_2993 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0)))) - exp2(_2993 * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))))) * _3108)) - ((exp2(_2995 * _3119) - exp2(_2995 * _3120)) * _3108))) + (_2988 * cbSceneParam._m0[80u].z);
        }
        vec4 _3150 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2884, _2885, 1.0), 0.0);
        float _3159 = exp2((_3148 * (-1.44269502162933349609375)) * (1.0 - _3150.w));
        float _3160 = log2(_3159);
        float _3176 = log2(_2904);
        _2997 = (exp2(_3176 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].x)) * _3150.x) / cbSceneParam._m0[78u].x)) + _2901;
        _2999 = (exp2(_3176 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].y)) * _3150.y) / cbSceneParam._m0[78u].y)) + _2902;
        _3001 = (exp2(_3176 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].z)) * _3150.z) / cbSceneParam._m0[78u].z)) + _2903;
        _3003 = _3159 * _2904;
    }
    else
    {
        _2997 = _2901;
        _2999 = _2902;
        _3001 = _2903;
        _3003 = _2904;
    }
    float _3015 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3016 = _3015 == 3.0;
    float _3017 = log2(_3003);
    float _3024 = exp2(_3017 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2846 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1088))) + ((_2852 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1898)) * cbPerFrame._m0[3u].x));
    float _3025 = exp2(_3017 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2848 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1088))) + ((_2854 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1898)) * cbPerFrame._m0[3u].x));
    float _3026 = exp2(_3017 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2850 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1088))) + ((_2856 + ((isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0))) * _1898)) * cbPerFrame._m0[3u].x));
    float _3035 = (_3015 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3035 * (_3016 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2997)));
    SV_Target.y = _3035 * (_3016 ? _3025 : (_3025 + (cbSceneParam._m0[72u].w * _2999)));
    SV_Target.z = _3035 * (_3016 ? _3026 : (_3026 + (cbSceneParam._m0[72u].w * _3001)));
    SV_Target.w = cbInstanceData._m0[_2876].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2876].w;
}


