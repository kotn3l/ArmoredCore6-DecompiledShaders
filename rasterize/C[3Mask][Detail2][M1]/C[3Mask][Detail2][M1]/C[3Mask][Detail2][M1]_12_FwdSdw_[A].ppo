#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1438;
float _4102;
float _4103;
float _4104;
float _4105;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _274 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _274.x * cbMtdParam._m0[10u].x;
    float _281 = _274.y * cbMtdParam._m0[10u].y;
    float _282 = _274.z * cbMtdParam._m0[10u].z;
    vec4 _300 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _350 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _360 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _350)) + 1.0;
    float _4114 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _361 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _368 = (_361 * ((_300.x * cbMtdParam._m0[11u].x) - _280)) + _280;
    float _369 = (_361 * ((_300.y * cbMtdParam._m0[11u].y) - _281)) + _281;
    float _370 = (_361 * ((_300.z * cbMtdParam._m0[11u].z) - _282)) + _282;
    vec4 _388 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _419 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _350)) + 1.0;
    float _4125 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _427 = (_420 * ((_388.x * cbMtdParam._m0[12u].x) - _368)) + _368;
    float _428 = (_420 * ((_388.y * cbMtdParam._m0[12u].y) - _369)) + _369;
    float _429 = (_420 * ((_388.z * cbMtdParam._m0[12u].z) - _370)) + _370;
    vec4 _447 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _472 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _350)) + 1.0;
    float _4136 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    vec4 _501 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _509 = ((((_473 * ((_447.x * cbMtdParam._m0[13u].x) - _427)) + _427) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _501.x;
    float _512 = ((((_473 * ((_447.y * cbMtdParam._m0[13u].y) - _428)) + _428) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _501.y;
    float _515 = ((((_473 * ((_447.z * cbMtdParam._m0[13u].z) - _429)) + _429) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _501.z;
    vec4 _536 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _565 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _4147 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _573 = (_566 * ((_536.x * cbMtdParam._m0[15u].x) - _509)) + _509;
    float _574 = (_566 * ((_536.y * cbMtdParam._m0[15u].y) - _512)) + _512;
    float _575 = (_566 * ((_536.z * cbMtdParam._m0[15u].z) - _515)) + _515;
    vec4 _588 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _590 = _588.x;
    float _608 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _590) * _361) + _590;
    float _625 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _608) * _420) + _608;
    float _642 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _625) * _473) + _625;
    vec4 _654 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _674 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _676 = _674.x;
    float _677 = _674.y;
    float _683 = cbMtdParam._m0[18u].y * _674.z;
    vec4 _695 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _704 = (((cbMtdParam._m0[18u].x * _695.z) - _683) * _361) + _683;
    vec4 _717 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _728 = (((cbMtdParam._m0[17u].w * _717.z) - _704) * _420) + _704;
    vec4 _741 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _750 = (((cbMtdParam._m0[17u].z * _741.z) - _728) * _473) + _728;
    vec4 _763 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _777 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_763.z * cbMtdParam._m0[19u].y) - _750)) + _750;
    vec4 _790 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _802 = ((_695.x - _676) * _361) + _676;
    float _803 = ((_695.y - _677) * _361) + _677;
    float _808 = ((_717.x - _802) * _420) + _802;
    float _809 = ((_717.y - _803) * _420) + _803;
    float _818 = ((((_741.x - _808) * _473) + _808) * 2.0) + (-1.0);
    float _819 = ((((_741.y - _809) * _473) + _809) * 2.0) + (-1.0);
    float _820 = dot(vec2(_818, _819), vec2(_818, _819));
    float _4158 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _825 = sqrt(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))));
    float _842 = (((((_790.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _818) + ((((_654.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y)) + ((((_763.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _843 = (((((_790.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _819) + ((((_654.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y)) + ((((_763.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _846 = fma(_825, _244 * NORMAL.x, fma(_843, _251 * TANGENT.x, (_237 * _229) * _842));
    float _849 = fma(_825, _244 * NORMAL.y, fma(_843, _251 * TANGENT.y, (_237 * _230) * _842));
    float _852 = fma(_825, _244 * NORMAL.z, fma(_843, _251 * TANGENT.z, (_237 * _231) * _842));
    float _856 = inversesqrt(dot(vec3(_846, _849, _852), vec3(_846, _849, _852)));
    float _857 = _856 * _846;
    float _858 = _856 * _849;
    float _859 = _856 * _852;
    float _4169 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _860 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _4180 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4191 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4202 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4213 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _864 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _880 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _930 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _920);
    float _931 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _920);
    float _932 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _920);
    float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
    float _937 = _930 * _936;
    float _938 = _931 * _936;
    float _939 = _932 * _936;
    vec4 _944 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _946 = _944.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1118 = sqrt(((_930 * _930) + (_931 * _931)) + (_932 * _932));
        float _1124 = (cbMatDynParam._m0[5u].x * _1118) + cbMatDynParam._m0[5u].y;
        float _4224 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1129 = (cbMatDynParam._m0[5u].z * _1118) + cbMatDynParam._m0[5u].w;
        float _4235 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) - _1125)) + _1125) < ((_946 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _957 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _958 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _976 = fma(_859, cbSceneParam._m0[5u].z, fma(_858, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _857));
    float _979 = fma(_859, cbSceneParam._m0[6u].z, fma(_858, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _857));
    float _982 = fma(_859, cbSceneParam._m0[7u].z, fma(_858, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _857));
    uint _995 = uint(roundEven(NORMAL.w)) * 13u;
    uint _996 = _995 + 9u;
    uint _997 = _996 + uint(cbMatDynParam._m0[0u].w);
    float _1003 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * cbInstanceData._m0[_997].x;
    float _1004 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * cbInstanceData._m0[_997].y;
    float _1005 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * cbInstanceData._m0[_997].z;
    float _4246 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _4257 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _4268 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _1009 = 1.0 - _864;
    float _1010 = _1006 * _1009;
    float _1011 = _1007 * _1009;
    float _1012 = _1008 * _1009;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _864;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _864;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _864;
    float _1020 = _1017 + 0.039999999105930328369140625;
    float _1022 = _1018 + 0.039999999105930328369140625;
    float _1023 = _1019 + 0.039999999105930328369140625;
    vec4 _1032 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _957, cbSceneParam._m0[86u].y * _958));
    float _1035 = _1032.x * TEXCOORD_5.w;
    float _1036 = dot(vec3(_857, _858, _859), vec3(_937, _938, _939));
    float _1039 = _1036 * 2.0;
    float _1043 = (_1039 * _857) - _937;
    float _1044 = (_1039 * _858) - _938;
    float _1045 = (_1039 * _859) - _939;
    float _1049 = abs(dot(vec3(_937, _938, _939), vec3(_857, _858, _859)));
    float _4279 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1051 = sqrt(_860);
    float _1064 = exp2((_1051 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1051 * 3.0));
    float _1070 = (1.0 - _1064) * ((_1051 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1071 = _1064 * _1051;
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1437;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1162 = fma(_1107, cbModelParam._m0[26u].z, fma(_1103, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1099));
        float _1166 = fma(_1107, cbModelParam._m0[27u].z, fma(_1103, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1099));
        float _1170 = fma(_1107, cbModelParam._m0[28u].z, fma(_1103, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1099));
        float _1195 = _1099 + _857;
        float _1196 = _1103 + _858;
        float _1197 = _1107 + _859;
        float _1207 = fma(_1197, cbModelParam._m0[26u].z, fma(_1196, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1195)) - _1162;
        float _1208 = fma(_1197, cbModelParam._m0[27u].z, fma(_1196, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1195)) - _1166;
        float _1209 = fma(_1197, cbModelParam._m0[28u].z, fma(_1196, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1195)) - _1170;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1162 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1166 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[34u].z) + ((((((_1170 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1265 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1231.x + (-0.5));
        float _1267 = _1265 * (_1231.y + (-0.5));
        float _1268 = _1265 * (_1231.z + (-0.5));
        float _1275 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1238.x + (-0.5));
        float _1277 = _1275 * (_1238.y + (-0.5));
        float _1278 = _1275 * (_1238.z + (-0.5));
        float _1285 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1245.x + (-0.5));
        float _1287 = _1285 * (_1245.y + (-0.5));
        float _1288 = _1285 * (_1245.z + (-0.5));
        float _1295 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1252.x + (-0.5));
        float _1297 = _1295 * (_1252.y + (-0.5));
        float _1298 = _1295 * (_1252.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1319 = (dot(vec3(_857, _858, _859), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1329 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4327 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1331 + 1.0))) + _1336) * _1299;
        float _1346 = _1267 * 0.5;
        float _1347 = _1277 * 0.5;
        float _1348 = _1287 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_857, _858, _859), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4360 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1373 + 1.0))) + _1378) * _1300;
        float _1388 = _1268 * 0.5;
        float _1389 = _1278 * 0.5;
        float _1390 = _1288 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_857, _858, _859), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4393 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1415 + 1.0))) + _1420) * _1301;
        _1437 = _1268;
        _1439 = _1267;
        _1440 = _1266;
        _1441 = _1278;
        _1442 = _1277;
        _1443 = _1276;
        _1444 = _1288;
        _1445 = _1287;
        _1446 = _1286;
        _1447 = _1301;
        _1448 = _1300;
        _1449 = _1299;
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1438;
        _1439 = _1438;
        _1440 = _1438;
        _1441 = _1438;
        _1442 = _1438;
        _1443 = _1438;
        _1444 = _1438;
        _1445 = _1438;
        _1446 = _1438;
        _1447 = _1438;
        _1448 = _1438;
        _1449 = _1438;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1481 = fma(_1107, cbModelParam._m0[30u].z, fma(_1103, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1099));
        float _1485 = fma(_1107, cbModelParam._m0[31u].z, fma(_1103, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1099));
        float _1489 = fma(_1107, cbModelParam._m0[32u].z, fma(_1103, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1099));
        float _1512 = _1099 + _857;
        float _1513 = _1103 + _858;
        float _1514 = _1107 + _859;
        float _1524 = fma(_1514, cbModelParam._m0[30u].z, fma(_1513, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1512)) - _1481;
        float _1525 = fma(_1514, cbModelParam._m0[31u].z, fma(_1513, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1512)) - _1485;
        float _1526 = fma(_1514, cbModelParam._m0[32u].z, fma(_1513, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1512)) - _1489;
        float _1530 = inversesqrt(dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526)));
        float _1543 = ((_1530 * _1524) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1481 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1544 = ((_1530 * _1525) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1485 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1545 = ((_1530 * _1526) / cbModelParam._m0[35u].z) + ((((((_1489 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        float _1580 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1547.x + (-0.5));
        float _1582 = _1580 * (_1547.y + (-0.5));
        float _1583 = _1580 * (_1547.z + (-0.5));
        float _1590 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1554.x + (-0.5));
        float _1592 = _1590 * (_1554.y + (-0.5));
        float _1593 = _1590 * (_1554.z + (-0.5));
        float _1600 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1561.x + (-0.5));
        float _1602 = _1600 * (_1561.y + (-0.5));
        float _1603 = _1600 * (_1561.z + (-0.5));
        float _1610 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1568.x + (-0.5));
        float _1612 = _1610 * (_1568.y + (-0.5));
        float _1613 = _1610 * (_1568.z + (-0.5));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = _1581 * 0.5;
        float _1618 = _1591 * 0.5;
        float _1619 = _1601 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_857, _858, _859), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4456 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1644 + 1.0))) + _1649) * _1614;
        float _1659 = _1582 * 0.5;
        float _1660 = _1592 * 0.5;
        float _1661 = _1602 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1675 = (dot(vec3(_857, _858, _859), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4467 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1684 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4478 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1686 = _1685 * 2.0;
        float _1690 = (1.0 - _1685) / (_1685 + 1.0);
        float _4489 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1700 = ((((1.0 - _1691) * (_1686 + 2.0)) * exp2(log2(isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_1686 + 1.0))) + _1691) * _1615;
        float _1701 = _1583 * 0.5;
        float _1702 = _1593 * 0.5;
        float _1703 = _1603 * 0.5;
        float _1704 = dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703));
        float _1709 = (_1704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1704);
        float _1717 = (dot(vec3(_857, _858, _859), vec3(_1709 * _1701, _1709 * _1702, _1709 * _1703)) + 1.0) * 0.5;
        float _4500 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4511 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1728 = _1727 * 2.0;
        float _1732 = (1.0 - _1727) / (_1727 + 1.0);
        float _4522 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _1742 = ((((1.0 - _1733) * (_1728 + 2.0)) * exp2(log2(isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_1728 + 1.0))) + _1733) * _1616;
        _1750 = _1583;
        _1751 = _1582;
        _1752 = _1581;
        _1753 = _1593;
        _1754 = _1592;
        _1755 = _1591;
        _1756 = _1603;
        _1757 = _1602;
        _1758 = _1601;
        _1759 = _1616;
        _1760 = _1615;
        _1761 = _1614;
        _1762 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
        _1763 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)));
        _1764 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)));
    }
    else
    {
        _1750 = _1438;
        _1751 = _1438;
        _1752 = _1438;
        _1753 = _1438;
        _1754 = _1438;
        _1755 = _1438;
        _1756 = _1438;
        _1757 = _1438;
        _1758 = _1438;
        _1759 = _1438;
        _1760 = _1438;
        _1761 = _1438;
        _1762 = 0.0;
        _1763 = 0.0;
        _1764 = 0.0;
    }
    float _1774 = (cbModelParam._m0[1u].x * (_1762 - _1450)) + _1450;
    float _1775 = (cbModelParam._m0[1u].x * (_1763 - _1451)) + _1451;
    float _1776 = (cbModelParam._m0[1u].x * (_1764 - _1452)) + _1452;
    float _1797 = fma(_1776, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1774 * cbSceneParam._m0[89u].x));
    float _1800 = fma(_1776, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1774 * cbSceneParam._m0[90u].x));
    float _1803 = fma(_1776, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1774));
    float _1818 = _1043 * 0.5;
    float _1819 = _1044 * 0.5;
    float _1820 = _1045 * 0.5;
    float _1821 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1752, _1755, _1758, _1761));
    float _1824 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1751, _1754, _1757, _1760));
    float _1827 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1750, _1753, _1756, _1759));
    float _1861;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1834 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1437, _1441, _1444, _1447));
        float _1838 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1842 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1440, _1443, _1446, _1449));
        float _1849 = dot(vec4(cbModelParam._m0[39u]), vec4(_1818, _1819, _1820, 1.0));
        _1861 = dot(vec3(isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1849) ? 0.0 : (isnan(0.0) ? _1849 : max(0.0, _1849))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1861 = 1.0;
    }
    float _1872;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1863 = dot(vec4(cbModelParam._m0[40u]), vec4(_1818, _1819, _1820, 1.0));
        _1872 = dot(vec3(isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1863) ? 0.0 : (isnan(0.0) ? _1863 : max(0.0, _1863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1872 = 1.0;
    }
    float _1876 = (_1872 * cbModelParam._m0[1u].x) + (_1861 * (1.0 - cbModelParam._m0[1u].x));
    float _1886 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _860);
    float _1887 = isnan(_1886) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1886 : min(cbModelParam._m0[25u].z, _1886));
    float _1967;
    float _1969;
    float _1971;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1934 = fma(_1107, cbModelParam._m0[13u].z, fma(_1103, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1099)) + cbModelParam._m0[13u].w;
        float _1938 = fma(_1107, cbModelParam._m0[14u].z, fma(_1103, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1099)) + cbModelParam._m0[14u].w;
        float _1942 = fma(_1107, cbModelParam._m0[15u].z, fma(_1103, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1099)) + cbModelParam._m0[15u].w;
        float _1945 = fma(_1045, cbModelParam._m0[13u].z, fma(_1044, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1043));
        float _1948 = fma(_1045, cbModelParam._m0[14u].z, fma(_1044, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1043));
        float _1951 = fma(_1045, cbModelParam._m0[15u].z, fma(_1044, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1043));
        float _1979;
        if (_1945 > 0.0)
        {
            _1979 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1979 = frontier_phi_17_15_ladder;
        }
        float _2150;
        if (_1948 > 0.0)
        {
            _2150 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2150 = frontier_phi_26_22_ladder;
        }
        float _2445;
        if (_1951 > 0.0)
        {
            _2445 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2445 = frontier_phi_38_33_ladder;
        }
        float _2447 = isnan(_2150) ? _1979 : (isnan(_1979) ? _2150 : min(_1979, _2150));
        float _2448 = isnan(_2445) ? _2447 : (isnan(_2447) ? _2445 : min(_2447, _2445));
        float _2452 = (_2448 * _1945) + _1934;
        float _2453 = (_2448 * _1948) + _1938;
        float _2454 = (_2448 * _1951) + _1942;
        float _2455 = _2448 * 9.9999997473787516355514526367188e-05;
        float _2457 = (-1.0) - _2455;
        float _2459 = _2455 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2454 > _2459) || ((_2454 < _2457) || ((_2453 > _2459) || ((_2453 < _2457) || ((_2452 < _2457) || (_2452 > _2459))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2454, cbModelParam._m0[9u].z, fma(_2453, cbModelParam._m0[9u].y, _2452 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2454, cbModelParam._m0[10u].z, fma(_2453, cbModelParam._m0[10u].y, _2452 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2454, cbModelParam._m0[11u].z, fma(_2453, cbModelParam._m0[11u].y, _2452 * cbModelParam._m0[11u].x))), _1887);
            frontier_phi_16_38_ladder = _2599.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2599.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2599.x * cbModelParam._m0[1u].y;
        }
        _1967 = frontier_phi_16_38_ladder_2;
        _1969 = frontier_phi_16_38_ladder_1;
        _1971 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1955 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1043, _1044, _1045), _1887);
        _1967 = _1955.x * cbModelParam._m0[1u].y;
        _1969 = _1955.y * cbModelParam._m0[1u].y;
        _1971 = _1955.z * cbModelParam._m0[1u].y;
    }
    float _1975 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _860);
    float _1976 = isnan(_1975) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1975 : min(cbModelParam._m0[25u].w, _1975));
    float _2065;
    float _2067;
    float _2069;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2029 = fma(_1107, cbModelParam._m0[21u].z, fma(_1103, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1099)) + cbModelParam._m0[21u].w;
        float _2033 = fma(_1107, cbModelParam._m0[22u].z, fma(_1103, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1099)) + cbModelParam._m0[22u].w;
        float _2037 = fma(_1107, cbModelParam._m0[23u].z, fma(_1103, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1099)) + cbModelParam._m0[23u].w;
        float _2040 = fma(_1045, cbModelParam._m0[21u].z, fma(_1044, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1043));
        float _2043 = fma(_1045, cbModelParam._m0[22u].z, fma(_1044, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1043));
        float _2046 = fma(_1045, cbModelParam._m0[23u].z, fma(_1044, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1043));
        float _2155;
        if (_2040 > 0.0)
        {
            _2155 = abs((1.0 - _2029) / _2040);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2029 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2155 = frontier_phi_28_24_ladder;
        }
        float _2472;
        if (_2043 > 0.0)
        {
            _2472 = abs((1.0 - _2033) / _2043);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2033 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2472 = frontier_phi_40_35_ladder;
        }
        float _2810;
        if (_2046 > 0.0)
        {
            _2810 = abs((1.0 - _2037) / _2046);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2037 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2810 = frontier_phi_50_47_ladder;
        }
        float _2812 = isnan(_2472) ? _2155 : (isnan(_2155) ? _2472 : min(_2155, _2472));
        float _2813 = isnan(_2810) ? _2812 : (isnan(_2812) ? _2810 : min(_2812, _2810));
        float _2817 = (_2813 * _2040) + _2029;
        float _2818 = (_2813 * _2043) + _2033;
        float _2819 = (_2813 * _2046) + _2037;
        float _2820 = _2813 * 9.9999997473787516355514526367188e-05;
        float _2821 = (-1.0) - _2820;
        float _2823 = _2820 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2819 > _2823) || ((_2819 < _2821) || ((_2818 > _2823) || ((_2818 < _2821) || ((_2817 < _2821) || (_2817 > _2823))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2941 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2819, cbModelParam._m0[17u].z, fma(_2818, cbModelParam._m0[17u].y, _2817 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2819, cbModelParam._m0[18u].z, fma(_2818, cbModelParam._m0[18u].y, _2817 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2819, cbModelParam._m0[19u].z, fma(_2818, cbModelParam._m0[19u].y, _2817 * cbModelParam._m0[19u].x))), _1976);
            frontier_phi_25_50_ladder = _2941.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2941.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2941.x * cbModelParam._m0[1u].z;
        }
        _2065 = frontier_phi_25_50_ladder_2;
        _2067 = frontier_phi_25_50_ladder_1;
        _2069 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2049 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1043, _1044, _1045), _1976);
        _2065 = _2049.x * cbModelParam._m0[1u].z;
        _2067 = _2049.y * cbModelParam._m0[1u].z;
        _2069 = _2049.z * cbModelParam._m0[1u].z;
    }
    float _2082 = (((_1070 * _1020) + _1071) * _1035) * ((cbModelParam._m0[1u].w * (_2065 - _1967)) + _1967);
    float _2084 = (((_1070 * _1022) + _1071) * _1035) * ((cbModelParam._m0[1u].w * (_2067 - _1969)) + _1969);
    float _2086 = (((_1070 * _1023) + _1071) * _1035) * ((cbModelParam._m0[1u].w * (_2069 - _1971)) + _1971);
    float _2089 = fma(_2086, cbSceneParam._m0[89u].z, fma(_2084, cbSceneParam._m0[89u].y, _2082 * cbSceneParam._m0[89u].x));
    float _2092 = fma(_2086, cbSceneParam._m0[90u].z, fma(_2084, cbSceneParam._m0[90u].y, _2082 * cbSceneParam._m0[90u].x));
    float _2095 = fma(_2086, cbSceneParam._m0[91u].z, fma(_2084, cbSceneParam._m0[91u].y, _2082 * cbSceneParam._m0[91u].x));
    float _2129 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2133 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2137 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2141 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2142 = _2129 / _2141;
    float _2143 = _2133 / _2141;
    float _2144 = _2137 / _2141;
    float _2291;
    float _2292;
    float _2293;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2171 = ((uint(_2144 > cbSceneParam._m0[59u].y) + uint(_2144 > cbSceneParam._m0[59u].x)) + uint(_2144 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2172 = _2171 + 43u;
        uint _2180 = _2171 + 44u;
        uint _2188 = _2171 + 45u;
        uint _2196 = _2171 + 46u;
        float _2207 = fma(_2141, cbSceneParam._m0[_2172].w, fma(_2137, cbSceneParam._m0[_2172].z, fma(_2133, cbSceneParam._m0[_2172].y, _2129 * cbSceneParam._m0[_2172].x)));
        float _2211 = fma(_2141, cbSceneParam._m0[_2180].w, fma(_2137, cbSceneParam._m0[_2180].z, fma(_2133, cbSceneParam._m0[_2180].y, _2129 * cbSceneParam._m0[_2180].x)));
        float _2219 = fma(_2141, cbSceneParam._m0[_2196].w, fma(_2137, cbSceneParam._m0[_2196].z, fma(_2133, cbSceneParam._m0[_2196].y, _2129 * cbSceneParam._m0[_2196].x)));
        float _2224 = cbSceneParam._m0[33u].z * _2219;
        float _2226 = cbSceneParam._m0[33u].w * _2219;
        float _2229 = fma(_2141, cbSceneParam._m0[_2188].w, fma(_2137, cbSceneParam._m0[_2188].z, fma(_2133, cbSceneParam._m0[_2188].y, _2129 * cbSceneParam._m0[_2188].x))) / _2219;
        float _2277 = (cbSceneParam._m0[33u].x - sqrt(((_2143 * _2143) + (_2142 * _2142)) + (_2144 * _2144))) * cbSceneParam._m0[33u].y;
        float _4648 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2284 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2224 + _2207) / _2219, (_2226 + _2211) / _2219), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2226 + _2207) / _2219, (_2211 - _2224) / _2219), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2207 - _2224) / _2219, (_2211 - _2226) / _2219), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2207 - _2226) / _2219, (_2224 + _2211) / _2219), _2229), 0.0)).x), vec4(0.25)));
        _2291 = 1.0 - (_2284 * cbSceneParam._m0[34u].x);
        _2292 = 1.0 - (_2284 * cbSceneParam._m0[34u].y);
        _2293 = 1.0 - (_2284 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2291 = 1.0;
        _2292 = 1.0;
        _2293 = 1.0;
    }
    float _2357;
    float _2359;
    float _2361;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2345 = fma(_2141, cbSceneParam._m0[63u].w, fma(_2137, cbSceneParam._m0[63u].z, fma(_2133, cbSceneParam._m0[63u].y, _2129 * cbSceneParam._m0[63u].x)));
        float _2346 = fma(_2141, cbSceneParam._m0[60u].w, fma(_2137, cbSceneParam._m0[60u].z, fma(_2133, cbSceneParam._m0[60u].y, _2129 * cbSceneParam._m0[60u].x))) / _2345;
        float _2347 = fma(_2141, cbSceneParam._m0[61u].w, fma(_2137, cbSceneParam._m0[61u].z, fma(_2133, cbSceneParam._m0[61u].y, _2129 * cbSceneParam._m0[61u].x))) / _2345;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2346 >= cbSceneParam._m0[64u].x) && (_2347 >= cbSceneParam._m0[64u].y)) && (_2346 <= cbSceneParam._m0[64u].z)) && (_2347 <= cbSceneParam._m0[64u].w))
        {
            float _2485 = fma(_2141, cbSceneParam._m0[62u].w, fma(_2137, cbSceneParam._m0[62u].z, fma(_2133, cbSceneParam._m0[62u].y, _2129 * cbSceneParam._m0[62u].x))) / _2345;
            float _2489 = isnan(cbSceneParam._m0[41u].w) ? _2485 : (isnan(_2485) ? cbSceneParam._m0[41u].w : max(_2485, cbSceneParam._m0[41u].w));
            float _2532 = (cbSceneParam._m0[33u].x - sqrt(((_2143 * _2143) + (_2142 * _2142)) + (_2144 * _2144))) * cbSceneParam._m0[33u].y;
            float _4664 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
            float _2539 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2346, cbSceneParam._m0[33u].w + _2347), _2489), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2346, _2347 - cbSceneParam._m0[33u].z), _2489), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2346 - cbSceneParam._m0[33u].z, _2347 - cbSceneParam._m0[33u].w), _2489), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2346 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2347), _2489), 0.0)).x), vec4(0.25)));
            float _2543 = 1.0 - (_2539 * cbSceneParam._m0[34u].x);
            float _2544 = 1.0 - (_2539 * cbSceneParam._m0[34u].y);
            float _2545 = 1.0 - (_2539 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2545) ? _2293 : (isnan(_2293) ? _2545 : min(_2293, _2545));
            frontier_phi_37_36_ladder_1 = isnan(_2544) ? _2292 : (isnan(_2292) ? _2544 : min(_2292, _2544));
            frontier_phi_37_36_ladder_2 = isnan(_2543) ? _2291 : (isnan(_2291) ? _2543 : min(_2291, _2543));
        }
        else
        {
            frontier_phi_37_36_ladder = _2293;
            frontier_phi_37_36_ladder_1 = _2292;
            frontier_phi_37_36_ladder_2 = _2291;
        }
        _2357 = frontier_phi_37_36_ladder_2;
        _2359 = frontier_phi_37_36_ladder_1;
        _2361 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2357 = _2291;
        _2359 = _2292;
        _2361 = _2293;
    }
    uvec4 _2366 = floatBitsToUint(cbInstanceData._m0[_995 + 5u]);
    uint _2368 = _2366.x * 14u;
    uint _2369 = _2368 + 13u;
    float _2376 = _1035 + (-1.0);
    float _2381 = (cbLight._m0[_2369].x * _2376) + 1.0;
    float _2382 = (cbLight._m0[_2369].y * _2376) + 1.0;
    float _2383 = (cbLight._m0[_2369].z * _2376) + 1.0;
    float _2384 = (cbLight._m0[_2369].w * _2376) + 1.0;
    uint _2385 = _2368 + 5u;
    float _2391 = isnan(1.0) ? _2382 : (isnan(_2382) ? 1.0 : min(_2382, 1.0));
    uint _2395 = _2368 + 4u;
    float _2404 = isnan(1.0) ? _2381 : (isnan(_2381) ? 1.0 : min(_2381, 1.0));
    uint _2408 = _2368 | 1u;
    float _2419 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_857, _858, _859));
    float _2422 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_857, _858, _859));
    float _4700 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _4711 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2427 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * 0.3183098733425140380859375;
    float _2429 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * 0.3183098733425140380859375;
    float _2436 = ((cbLight._m0[_2385].x * _2391) * _2429) + (((cbLight._m0[_2395].x * _2357) * _2404) * _2427);
    float _2437 = ((_2391 * cbLight._m0[_2385].y) * _2429) + (((cbLight._m0[_2395].y * _2359) * _2404) * _2427);
    float _2438 = ((_2391 * cbLight._m0[_2385].z) * _2429) + (((cbLight._m0[_2395].z * _2361) * _2404) * _2427);
    uvec4 _2442 = floatBitsToUint(cbLight._m0[_2368 + 12u]);
    bool _2444 = _2442.x == 0u;
    float _2546;
    float _2548;
    float _2550;
    if (_2444)
    {
        _2546 = _2436;
        _2548 = _2437;
        _2550 = _2438;
    }
    else
    {
        uint _2554 = _2368 + 6u;
        float _2570 = (dot(vec3(cbLight._m0[_2368 + 2u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2571 = _2570 * _2570;
        float _4722 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2572 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2573 = isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0));
        _2546 = (((cbLight._m0[_2554].x * 0.3183098733425140380859375) * _2572) * _2573) + _2436;
        _2548 = (((cbLight._m0[_2554].y * 0.3183098733425140380859375) * _2572) * _2573) + _2437;
        _2550 = (((cbLight._m0[_2554].z * 0.3183098733425140380859375) * _2572) * _2573) + _2438;
    }
    bool _2553 = _2442.y == 0u;
    float _2608;
    float _2610;
    float _2612;
    if (_2553)
    {
        _2608 = _2546;
        _2610 = _2548;
        _2612 = _2550;
    }
    else
    {
        uint _2781 = _2368 + 7u;
        float _2797 = (dot(vec3(cbLight._m0[_2368 + 3u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2798 = _2797 * _2797;
        float _4738 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2799 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2800 = isnan(1.0) ? _2384 : (isnan(_2384) ? 1.0 : min(_2384, 1.0));
        _2608 = (((cbLight._m0[_2781].x * 0.3183098733425140380859375) * _2799) * _2800) + _2546;
        _2610 = (((cbLight._m0[_2781].y * 0.3183098733425140380859375) * _2799) * _2800) + _2548;
        _2612 = (((cbLight._m0[_2781].z * 0.3183098733425140380859375) * _2799) * _2800) + _2550;
    }
    uint _2615 = _2368 + 8u;
    float _2628 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2368].w)) * _860) * 0.949999988079071044921875);
    float _2629 = _2628 * _2628;
    float _2630 = cbLight._m0[_2368].x + _937;
    float _2631 = cbLight._m0[_2368].y + _938;
    float _2632 = cbLight._m0[_2368].z + _939;
    float _2636 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
    float _2637 = _2636 * _2630;
    float _2638 = _2636 * _2631;
    float _2639 = _2636 * _2632;
    float _2640 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2368].xyz));
    float _4754 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2643 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
    float _4765 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _2644 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
    float _2645 = dot(vec3(_857, _858, _859), vec3(_2637, _2638, _2639));
    float _4776 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2648 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2649 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_2637, _2638, _2639));
    float _4787 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2653 = _2629 * _2629;
    float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
    float _2665 = exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0);
    float _2666 = 0.959999978542327880859375 - _1017;
    float _2668 = 0.959999978542327880859375 - _1018;
    float _2669 = 0.959999978542327880859375 - _1019;
    float _2676 = 1.0 - _2629;
    float _2687 = (0.5 / (((_2644 * ((_2643 * _2676) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2644 * _2676) + _2629) * _2643))) * _2643;
    float _4798 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2689 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
    uint _2703 = _2368 + 9u;
    float _2714 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2408].w)) * _860) * 0.949999988079071044921875);
    float _2715 = _2714 * _2714;
    float _2716 = cbLight._m0[_2408].x + _937;
    float _2717 = cbLight._m0[_2408].y + _938;
    float _2718 = cbLight._m0[_2408].z + _939;
    float _2722 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
    float _2723 = _2722 * _2716;
    float _2724 = _2722 * _2717;
    float _2725 = _2722 * _2718;
    float _2726 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2408].xyz));
    float _4809 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
    float _2729 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
    float _2730 = dot(vec3(_857, _858, _859), vec3(_2723, _2724, _2725));
    float _4820 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
    float _2733 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
    float _2734 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_2723, _2724, _2725));
    float _4831 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2738 = _2715 * _2715;
    float _2742 = ((_2733 * _2733) * (_2738 + (-1.0))) + 1.0;
    float _2749 = exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0);
    float _2756 = 1.0 - _2715;
    float _2766 = (0.5 / (((_2644 * ((_2729 * _2756) + _2715)) + 9.9999999392252902907785028219223e-09) + (((_2644 * _2756) + _2715) * _2729))) * _2729;
    float _4842 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
    float _2768 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2738 / ((_2742 * _2742) * 3.141590118408203125));
    float _2778 = (((((_2749 * _2666) + _1020) * cbLight._m0[_2703].x) * _2768) * _2391) + ((((cbLight._m0[_2615].x * _2357) * ((_2665 * _2666) + _1020)) * _2689) * _2404);
    float _2779 = (((((_2749 * _2668) + _1022) * cbLight._m0[_2703].y) * _2768) * _2391) + ((((cbLight._m0[_2615].y * _2359) * ((_2665 * _2668) + _1022)) * _2689) * _2404);
    float _2780 = (((((_2749 * _2669) + _1023) * cbLight._m0[_2703].z) * _2768) * _2391) + ((((cbLight._m0[_2615].z * _2361) * ((_2665 * _2669) + _1023)) * _2689) * _2404);
    float _2836;
    float _2838;
    float _2840;
    if (_2444)
    {
        _2836 = _2778;
        _2838 = _2779;
        _2840 = _2780;
    }
    else
    {
        uint _2842 = _2368 + 2u;
        uint _2846 = _2368 + 10u;
        float _2860 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2842].w)) * _860) * 0.949999988079071044921875);
        float _2861 = _2860 * _2860;
        float _2862 = cbLight._m0[_2842].x + _937;
        float _2863 = cbLight._m0[_2842].y + _938;
        float _2864 = cbLight._m0[_2842].z + _939;
        float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
        float _2869 = _2868 * _2862;
        float _2870 = _2868 * _2863;
        float _2871 = _2868 * _2864;
        float _2872 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2842].xyz));
        float _4853 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2875 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
        float _2876 = dot(vec3(_857, _858, _859), vec3(_2869, _2870, _2871));
        float _4864 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2879 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
        float _2880 = dot(vec3(cbLight._m0[_2842].xyz), vec3(_2869, _2870, _2871));
        float _4875 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2884 = _2861 * _2861;
        float _2888 = ((_2879 * _2879) * (_2884 + (-1.0))) + 1.0;
        float _2895 = exp2(log2(1.0 - (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) * 5.0);
        float _2902 = 1.0 - _2861;
        float _2912 = (0.5 / (((_2644 * ((_2875 * _2902) + _2861)) + 9.9999999392252902907785028219223e-09) + (((_2644 * _2902) + _2861) * _2875))) * _2875;
        float _4886 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2914 = (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2884 / ((_2888 * _2888) * 3.141590118408203125));
        float _2915 = isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0));
        _2836 = (((((_2895 * _2666) + _1020) * cbLight._m0[_2846].x) * _2914) * _2915) + _2778;
        _2838 = (((((_2895 * _2668) + _1022) * cbLight._m0[_2846].y) * _2914) * _2915) + _2779;
        _2840 = (((((_2895 * _2669) + _1023) * cbLight._m0[_2846].z) * _2914) * _2915) + _2780;
    }
    float _2946;
    float _2948;
    float _2950;
    if (_2553)
    {
        _2946 = _2836;
        _2948 = _2838;
        _2950 = _2840;
    }
    else
    {
        uint _2957 = _2368 + 3u;
        uint _2961 = _2368 + 11u;
        float _2975 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2957].w)) * _860) * 0.949999988079071044921875);
        float _2976 = _2975 * _2975;
        float _2977 = cbLight._m0[_2957].x + _937;
        float _2978 = cbLight._m0[_2957].y + _938;
        float _2979 = cbLight._m0[_2957].z + _939;
        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
        float _2984 = _2983 * _2977;
        float _2985 = _2983 * _2978;
        float _2986 = _2983 * _2979;
        float _2987 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2957].xyz));
        float _4902 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        float _2990 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
        float _2991 = dot(vec3(_857, _858, _859), vec3(_2984, _2985, _2986));
        float _4913 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
        float _2994 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
        float _2995 = dot(vec3(cbLight._m0[_2957].xyz), vec3(_2984, _2985, _2986));
        float _4924 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        float _2999 = _2976 * _2976;
        float _3003 = ((_2994 * _2994) * (_2999 + (-1.0))) + 1.0;
        float _3010 = exp2(log2(1.0 - (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) * 5.0);
        float _3017 = 1.0 - _2976;
        float _3027 = (0.5 / (((_2644 * ((_2990 * _3017) + _2976)) + 9.9999999392252902907785028219223e-09) + (((_2644 * _3017) + _2976) * _2990))) * _2990;
        float _4935 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        float _3029 = (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2999 / ((_3003 * _3003) * 3.141590118408203125));
        float _3030 = isnan(1.0) ? _2384 : (isnan(_2384) ? 1.0 : min(_2384, 1.0));
        _2946 = (((((_3010 * _2666) + _1020) * cbLight._m0[_2961].x) * _3029) * _3030) + _2836;
        _2948 = (((((_3010 * _2668) + _1022) * cbLight._m0[_2961].y) * _3029) * _3030) + _2838;
        _2950 = (((((_3010 * _2669) + _1023) * cbLight._m0[_2961].z) * _3029) * _3030) + _2840;
    }
    float _3096;
    float _3098;
    float _3100;
    float _3102;
    float _3104;
    float _3106;
    if (_2366.y == 0u)
    {
        uvec4 _3051 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3052 = _3051.x;
        uint _3063 = uint((float(_3051.y) * floor(float(uint(cbSceneParam._m0[85u].y * _958) / _3052))) + floor(float(uint(cbSceneParam._m0[85u].x * _957) / _3052)));
        float _3073 = (log2(_2144 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3074 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
        uint _3077 = uint(isnan(14.0) ? _3074 : (isnan(_3074) ? 14.0 : min(_3074, 14.0)));
        uvec4 _3082 = texelFetch(g_lightClusterGridBuffer, int(((_3077 << 2u) + (_3063 << 6u)) >> 2u));
        uint _3083 = _3082.x;
        uint _3084 = _3051.z;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        if (((((1u << ((_3084 >> 4u) & 15u)) + 4294967295u) & _3083) == 0u) || ((_3084 & 240u) == 0u))
        {
            _3163 = 0.0;
            _3165 = 0.0;
            _3167 = 0.0;
            _3169 = 0.0;
            _3171 = 0.0;
            _3173 = 0.0;
        }
        else
        {
            float _3164;
            float _3166;
            float _3168;
            float _3170;
            float _3172;
            float _3174;
            float _3316 = 0.0;
            float _3317 = 0.0;
            float _3318 = 0.0;
            float _3319 = 0.0;
            float _3320 = 0.0;
            float _3321 = 0.0;
            uint _3322 = 0u;
            uint _3331;
            bool _3332;
            for (;;)
            {
                _3331 = texelFetch(g_lightClassification, int((((_3077 << 5u) + (_3063 << 9u)) + (_3322 << 2u)) >> 2u)).x;
                _3332 = _3331 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3332)
                {
                    frontier_phi_71_pred = _3321;
                    frontier_phi_71_pred_1 = _3320;
                    frontier_phi_71_pred_2 = _3319;
                    frontier_phi_71_pred_3 = _3318;
                    frontier_phi_71_pred_4 = _3317;
                    frontier_phi_71_pred_5 = _3316;
                }
                else
                {
                    float _3461;
                    float _3462;
                    float _3463;
                    float _3464;
                    float _3465;
                    float _3466;
                    uint _3467;
                    _3461 = _3316;
                    _3462 = _3317;
                    _3463 = _3318;
                    _3464 = _3319;
                    _3465 = _3320;
                    _3466 = _3321;
                    _3467 = _3331;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    for (;;)
                    {
                        uint _3471 = uint(findLSB(_3467)) + (_3322 << 5u);
                        uint _3468 = (_3467 + 4294967295u) & _3467;
                        uint _3473 = _3471 * 48u;
                        vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3473)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 3u)).x));
                        uint _3493 = (_3471 * 48u) + 4u;
                        vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3493)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 3u)).x));
                        uint _3512 = (_3471 * 48u) + 8u;
                        vec3 _3523 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3512)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 2u)).x));
                        float _3527 = _3487.x - _2142;
                        float _3528 = _3487.y - _2143;
                        float _3529 = _3487.z - _2144;
                        float _3530 = dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529));
                        float _3533 = inversesqrt(_3530);
                        float _3534 = _3533 * _3527;
                        float _3535 = _3533 * _3528;
                        float _3536 = _3533 * _3529;
                        float _3537 = dot(vec3(_976, _979, _982), vec3(_3534, _3535, _3536));
                        float _3542 = 1.0 - (_3530 * _3487.w);
                        float _4961 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3543 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                        float _3544 = sqrt(_3530) * _3506.w;
                        float _3547 = 1.39999997615814208984375 / (_3544 + 1.39999997615814208984375);
                        float _3548 = _3547 * _3547;
                        float _3551 = ((1.0 - _3548) * _3537) + _3548;
                        float _3554 = _3544 * _3544;
                        float _3558 = ((isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0))) * _3543) / ((_3554 * 0.699999988079071044921875) + 1.0);
                        float _3562 = (-0.0) - _2142;
                        float _3563 = (-0.0) - _2143;
                        float _3564 = (-0.0) - _2144;
                        float _3568 = inversesqrt(dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564)));
                        float _3569 = _3568 * _3562;
                        float _3570 = _3568 * _3563;
                        float _3571 = _3568 * _3564;
                        float _3578 = exp2(log2(1.0 / ((_3554 * 3.5) + 5.0)) * 0.25);
                        float _3579 = 1.0 - _1051;
                        float _3586 = sqrt(1.0 - ((1.0 - (_3579 * _3579)) * (1.0 - (_3578 * _3578))));
                        float _3587 = _3586 * _3586;
                        float _3588 = _3587 * _3587;
                        float _3589 = _3569 + _3534;
                        float _3590 = _3570 + _3535;
                        float _3591 = _3571 + _3536;
                        float _3595 = inversesqrt(dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591)));
                        float _3599 = dot(vec3(_976, _979, _982), vec3(_3569, _3570, _3571));
                        float _4977 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                        float _3602 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                        float _3603 = dot(vec3(_976, _979, _982), vec3(_3595 * _3589, _3595 * _3590, _3595 * _3591));
                        float _4988 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                        float _3606 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                        float _3610 = ((_3606 * _3606) * (_3588 + (-1.0))) + 1.0;
                        float _3611 = _3547 * _3587;
                        float _3612 = _3611 * _3611;
                        float _3615 = ((1.0 - _3612) * _3537) + _3612;
                        float _4999 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                        float _3616 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                        float _3617 = 1.0 - _3587;
                        float _3627 = (0.5 / (((_3616 * ((_3602 * _3617) + _3587)) + 9.9999999392252902907785028219223e-09) + (((_3616 * _3617) + _3587) * _3602))) * _3616;
                        float _5010 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                        float _3638 = (((_3588 * 3.1415927410125732421875) * (isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0)))) / ((_3610 * _3610) * ((_3554 * 2.1991131305694580078125) + 3.141590118408203125))) * _3543;
                        _3391 = (_3558 * _3506.x) + _3464;
                        _3392 = (_3558 * _3506.y) + _3465;
                        _3393 = (_3558 * _3506.z) + _3466;
                        _3388 = (_3638 * _3523.x) + _3461;
                        _3389 = (_3638 * _3523.y) + _3462;
                        _3390 = (_3638 * _3523.z) + _3463;
                        if (_3468 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3461 = _3388;
                            _3462 = _3389;
                            _3463 = _3390;
                            _3464 = _3391;
                            _3465 = _3392;
                            _3466 = _3393;
                            _3467 = _3468;
                        }
                    }
                    frontier_phi_71_pred = _3393;
                    frontier_phi_71_pred_1 = _3392;
                    frontier_phi_71_pred_2 = _3391;
                    frontier_phi_71_pred_3 = _3390;
                    frontier_phi_71_pred_4 = _3389;
                    frontier_phi_71_pred_5 = _3388;
                }
                _3174 = frontier_phi_71_pred;
                _3172 = frontier_phi_71_pred_1;
                _3170 = frontier_phi_71_pred_2;
                _3168 = frontier_phi_71_pred_3;
                _3166 = frontier_phi_71_pred_4;
                _3164 = frontier_phi_71_pred_5;
                uint _3323 = _3322 + 1u;
                if (_3323 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3316 = _3164;
                    _3317 = _3166;
                    _3318 = _3168;
                    _3319 = _3170;
                    _3320 = _3172;
                    _3321 = _3174;
                    _3322 = _3323;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3163 = _3164;
            _3165 = _3166;
            _3167 = _3168;
            _3169 = _3170;
            _3171 = _3172;
            _3173 = _3174;
        }
        uvec4 _3177 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3178 = _3177.z;
        uint _3180 = (_3178 >> 8u) & 15u;
        float _3284;
        float _3286;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        if (((4294967295u << _3180) & _3083) == 0u)
        {
            _3284 = _3163;
            _3286 = _3165;
            _3288 = _3167;
            _3290 = _3169;
            _3292 = _3171;
            _3294 = _3173;
        }
        else
        {
            float _3309 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
            float _3310 = _3309 * _2142;
            float _3311 = _3309 * _2143;
            float _3312 = _3309 * _2144;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3180 < ((_3178 >> 12u) & 15u))
            {
                float _3285;
                float _3287;
                float _3289;
                float _3291;
                float _3293;
                float _3295;
                float _3444 = _3163;
                float _3445 = _3165;
                float _3446 = _3167;
                float _3447 = _3169;
                float _3448 = _3171;
                float _3449 = _3173;
                uint _3450 = _3180;
                uint _3459;
                bool _3460;
                for (;;)
                {
                    _3459 = texelFetch(g_lightClassification, int((((_3077 << 5u) + (_3063 << 9u)) + (_3450 << 2u)) >> 2u)).x;
                    _3460 = _3459 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3460)
                    {
                        frontier_phi_82_pred = _3449;
                        frontier_phi_82_pred_1 = _3448;
                        frontier_phi_82_pred_2 = _3447;
                        frontier_phi_82_pred_3 = _3446;
                        frontier_phi_82_pred_4 = _3445;
                        frontier_phi_82_pred_5 = _3444;
                    }
                    else
                    {
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3946;
                        float _3947;
                        float _3948;
                        float _3949;
                        float _3950;
                        float _3951;
                        float _3665 = _3444;
                        float _3666 = _3445;
                        float _3667 = _3446;
                        float _3668 = _3447;
                        float _3669 = _3448;
                        float _3670 = _3449;
                        uint _3671 = _3459;
                        uint _3672;
                        vec4 _3697;
                        float _3698;
                        vec4 _3713;
                        vec3 _3725;
                        vec4 _3740;
                        vec4 _3755;
                        float _3802;
                        bool _3803;
                        for (;;)
                        {
                            uint _3682 = ((_3450 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3671));
                            _3672 = (_3671 + 4294967295u) & _3671;
                            uint _3684 = _3682 * 40u;
                            _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            _3698 = _3697.w;
                            uint _3700 = (_3682 * 40u) + 4u;
                            _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            uint _3715 = (_3682 * 40u) + 8u;
                            _3725 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x));
                            uint _3727 = (_3682 * 40u) + 16u;
                            _3740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 3u)).x));
                            uint _3742 = (_3682 * 40u) + 20u;
                            _3755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 3u)).x));
                            uint _3758 = (_3682 * 40u) + 24u;
                            vec4 _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            uint _3777 = (_3682 * 40u) + 28u;
                            vec4 _3790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 3u)).x));
                            _3802 = fma(_2144, _3790.z, fma(_2143, _3790.y, _3790.x * _2142)) + _3790.w;
                            _3803 = !((fma(_2144, _3771.z, fma(_2143, _3771.y, _3771.x * _2142)) + _3771.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3803)
                            {
                                float _3830 = _3697.x - _2142;
                                float _3831 = _3697.y - _2143;
                                float _3832 = _3697.z - _2144;
                                float _3833 = dot(vec3(_3830, _3831, _3832), vec3(_3830, _3831, _3832));
                                float _3836 = inversesqrt(_3833);
                                float _3837 = _3836 * _3830;
                                float _3838 = _3836 * _3831;
                                float _3839 = _3836 * _3832;
                                float _3843 = 1.0 - (_3833 / (_3698 * _3698));
                                float _5021 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3844 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                                float _3848 = sqrt(_3833) * _3713.w;
                                float _3850 = 1.39999997615814208984375 / (_3848 + 1.39999997615814208984375);
                                float _3851 = _3850 * _3850;
                                float _3854 = ((1.0 - _3851) * dot(vec3(_3837, _3838, _3839), vec3(_976, _979, _982))) + _3851;
                                float _3857 = _3848 * _3848;
                                float _3861 = (fma(_2144, _3740.z, fma(_2143, _3740.y, _3740.x * _2142)) + _3740.w) / _3802;
                                float _3862 = (fma(_2144, _3755.z, fma(_2143, _3755.y, _3755.x * _2142)) + _3755.w) / _3802;
                                float _3866 = 1.0 - dot(vec2(_3861, _3862), vec2(_3861, _3862));
                                float _5037 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3867 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                                float _3868 = _3867 * (((isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0))) * _3844) / ((_3857 * 0.699999988079071044921875) + 1.0));
                                float _3880 = exp2(log2(1.0 / ((_3857 * 3.5) + 5.0)) * 0.25);
                                float _3881 = 1.0 - _1051;
                                float _3888 = sqrt(1.0 - ((1.0 - (_3881 * _3881)) * (1.0 - (_3880 * _3880))));
                                float _3889 = _3888 * _3888;
                                float _3890 = _3889 * _3889;
                                float _3891 = _3837 - _3310;
                                float _3892 = _3838 - _3311;
                                float _3893 = _3839 - _3312;
                                float _3897 = inversesqrt(dot(vec3(_3891, _3892, _3893), vec3(_3891, _3892, _3893)));
                                float _3901 = dot(vec3(_976, _979, _982), vec3((-0.0) - _3310, (-0.0) - _3311, (-0.0) - _3312));
                                float _5048 = isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0));
                                float _3904 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                                float _3905 = dot(vec3(_976, _979, _982), vec3(_3897 * _3891, _3897 * _3892, _3897 * _3893));
                                float _5059 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3908 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                                float _3912 = ((_3908 * _3908) * (_3890 + (-1.0))) + 1.0;
                                float _3913 = _3850 * _3889;
                                float _3914 = _3913 * _3913;
                                float _3920 = ((1.0 - _3914) * dot(vec3(_976, _979, _982), vec3(_3837, _3838, _3839))) + _3914;
                                float _5070 = isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0));
                                float _3921 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                                float _3922 = 1.0 - _3889;
                                float _3932 = (0.5 / (((_3921 * ((_3904 * _3922) + _3889)) + 9.9999999392252902907785028219223e-09) + (((_3921 * _3922) + _3889) * _3904))) * _3921;
                                float _5081 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3942 = (_3867 * _3844) * (((_3890 * 3.1415927410125732421875) * (isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0)))) / ((_3912 * _3912) * ((_3857 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3868 * _3713.z;
                                frontier_phi_88_pred_1 = _3868 * _3713.y;
                                frontier_phi_88_pred_2 = _3868 * _3713.x;
                                frontier_phi_88_pred_3 = _3942 * _3725.z;
                                frontier_phi_88_pred_4 = _3942 * _3725.y;
                                frontier_phi_88_pred_5 = _3942 * _3725.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3951 = frontier_phi_88_pred;
                            _3950 = frontier_phi_88_pred_1;
                            _3949 = frontier_phi_88_pred_2;
                            _3948 = frontier_phi_88_pred_3;
                            _3947 = frontier_phi_88_pred_4;
                            _3946 = frontier_phi_88_pred_5;
                            _3655 = _3949 + _3668;
                            _3656 = _3950 + _3669;
                            _3657 = _3951 + _3670;
                            _3652 = _3946 + _3665;
                            _3653 = _3947 + _3666;
                            _3654 = _3948 + _3667;
                            if (_3672 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3665 = _3652;
                                _3666 = _3653;
                                _3667 = _3654;
                                _3668 = _3655;
                                _3669 = _3656;
                                _3670 = _3657;
                                _3671 = _3672;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3657;
                        frontier_phi_82_pred_1 = _3656;
                        frontier_phi_82_pred_2 = _3655;
                        frontier_phi_82_pred_3 = _3654;
                        frontier_phi_82_pred_4 = _3653;
                        frontier_phi_82_pred_5 = _3652;
                    }
                    _3295 = frontier_phi_82_pred;
                    _3293 = frontier_phi_82_pred_1;
                    _3291 = frontier_phi_82_pred_2;
                    _3289 = frontier_phi_82_pred_3;
                    _3287 = frontier_phi_82_pred_4;
                    _3285 = frontier_phi_82_pred_5;
                    uint _3451 = _3450 + 1u;
                    if (_3451 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3444 = _3285;
                        _3445 = _3287;
                        _3446 = _3289;
                        _3447 = _3291;
                        _3448 = _3293;
                        _3449 = _3295;
                        _3450 = _3451;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3291;
                frontier_phi_63_64_ladder_1 = _3295;
                frontier_phi_63_64_ladder_2 = _3293;
                frontier_phi_63_64_ladder_3 = _3289;
                frontier_phi_63_64_ladder_4 = _3287;
                frontier_phi_63_64_ladder_5 = _3285;
            }
            else
            {
                frontier_phi_63_64_ladder = _3169;
                frontier_phi_63_64_ladder_1 = _3173;
                frontier_phi_63_64_ladder_2 = _3171;
                frontier_phi_63_64_ladder_3 = _3167;
                frontier_phi_63_64_ladder_4 = _3165;
                frontier_phi_63_64_ladder_5 = _3163;
            }
            _3284 = frontier_phi_63_64_ladder_5;
            _3286 = frontier_phi_63_64_ladder_4;
            _3288 = frontier_phi_63_64_ladder_3;
            _3290 = frontier_phi_63_64_ladder;
            _3292 = frontier_phi_63_64_ladder_2;
            _3294 = frontier_phi_63_64_ladder_1;
        }
        float _3299 = isnan(1.0) ? _1035 : (isnan(_1035) ? 1.0 : min(_1035, 1.0));
        _3096 = (_3299 * _3290) + _2608;
        _3098 = (_3299 * _3292) + _2610;
        _3100 = (_3299 * _3294) + _2612;
        _3102 = ((_3284 * _1020) * _3299) + _2946;
        _3104 = ((_3286 * _1022) * _3299) + _2948;
        _3106 = ((_3288 * _1023) * _3299) + _2950;
    }
    else
    {
        _3096 = _2608;
        _3098 = _2610;
        _3100 = _2612;
        _3102 = _2946;
        _3104 = _2948;
        _3106 = _2950;
    }
    float _5097 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _5108 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _5119 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _3123 = ((isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0))) * (_3096 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1035))) + ((_3102 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1876)) * cbPerFrame._m0[3u].x);
    float _3124 = ((isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0))) * (_3098 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1035))) + ((_3104 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1876)) * cbPerFrame._m0[3u].x);
    float _3125 = ((isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0))) * (_3100 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1035))) + ((_3106 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1876)) * cbPerFrame._m0[3u].x);
    uint _3126 = _995 + 6u;
    float _3134 = _957 / cbSceneParam._m0[86u].x;
    float _3135 = _958 / cbSceneParam._m0[86u].y;
    vec4 _3149 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3134, _3135, (log2((isnan(cbSceneParam._m0[77u].w) ? _880 : (isnan(_880) ? cbSceneParam._m0[77u].w : min(_880, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3151 = _3149.x;
    float _3152 = _3149.y;
    float _3153 = _3149.z;
    float _3154 = _3149.w;
    float _3226;
    float _3228;
    float _3230;
    float _3232;
    if (_880 > cbSceneParam._m0[78u].w)
    {
        float _3188 = isnan(_880) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _880 : min(cbSceneParam._m0[80u].w, _880));
        float _3189 = _3188 / _880;
        float _3200 = _3189 * _930;
        float _3201 = _931 * _3189;
        float _3202 = (-0.0) - _3201;
        float _3204 = _3189 * _932;
        float _3206 = (cbSceneParam._m0[77u].w * _3202) / _3188;
        float _3207 = _3206 + cbSceneParam._m0[79u].w;
        float _3208 = cbSceneParam._m0[79u].w - _3201;
        float _3214 = sqrt(((_3200 * _3200) + (_3201 * _3201)) + (_3204 * _3204));
        float _3217 = (1.0 - (cbSceneParam._m0[77u].w / _3188)) * _3214;
        float _3222 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3224 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3401;
        if (abs((_3202 - _3206) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3401 = ((((_3207 > 0.0) ? exp2(_3222 * _3207) : (2.0 - exp2(_3224 * _3207))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3217;
        }
        else
        {
            float _3345 = 1.0 / cbSceneParam._m0[80u].x;
            float _3346 = isnan(_3208) ? _3207 : (isnan(_3207) ? _3208 : max(_3207, _3208));
            float _3347 = isnan(_3208) ? _3207 : (isnan(_3207) ? _3208 : min(_3207, _3208));
            float _3356 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : min(_3346, 0.0));
            float _3357 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : min(_3347, 0.0));
            _3401 = ((abs(_3214 / _3202) * cbSceneParam._m0[80u].y) * ((((_3356 - _3357) * 2.0) - ((exp2(_3222 * (isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0)))) - exp2(_3222 * (isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0))))) * _3345)) - ((exp2(_3224 * _3356) - exp2(_3224 * _3357)) * _3345))) + (_3217 * cbSceneParam._m0[80u].z);
        }
        vec4 _3403 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3134, _3135, 1.0), 0.0);
        float _3412 = exp2((_3401 * (-1.44269502162933349609375)) * (1.0 - _3403.w));
        float _3413 = log2(_3412);
        float _3429 = log2(_3154);
        _3226 = (exp2(_3429 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3413 * cbSceneParam._m0[78u].x)) * _3403.x) / cbSceneParam._m0[78u].x)) + _3151;
        _3228 = (exp2(_3429 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3413 * cbSceneParam._m0[78u].y)) * _3403.y) / cbSceneParam._m0[78u].y)) + _3152;
        _3230 = (exp2(_3429 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3413 * cbSceneParam._m0[78u].z)) * _3403.z) / cbSceneParam._m0[78u].z)) + _3153;
        _3232 = _3412 * _3154;
    }
    else
    {
        _3226 = _3151;
        _3228 = _3152;
        _3230 = _3153;
        _3232 = _3154;
    }
    bool _3439;
    vec4 _3242;
    vec4 _3264;
    float _3266;
    float _3270;
    float _3271;
    float _3272;
    float _3273;
    bool _3283;
    for (;;)
    {
        _3242 = cbMatDynParam._m0[0u];
        float _3244 = roundEven(_3242.y);
        bool _3245 = _3244 == 3.0;
        float _3246 = log2(_3232);
        float _3253 = exp2(_3246 * cbSceneParam._m0[78u].x) * _3123;
        float _3254 = exp2(_3246 * cbSceneParam._m0[78u].y) * _3124;
        float _3255 = exp2(_3246 * cbSceneParam._m0[78u].z) * _3125;
        float _3262 = _946 + (-0.5);
        _3264 = cbMtdParam._m0[1u];
        _3266 = _3264.y * _3262;
        float _3269 = (_3244 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3270 = _3269 * (_3245 ? _3253 : (_3253 + (cbSceneParam._m0[72u].w * _3226)));
        _3271 = _3269 * (_3245 ? _3254 : (_3254 + (cbSceneParam._m0[72u].w * _3228)));
        _3272 = _3269 * (_3245 ? _3255 : (_3255 + (cbSceneParam._m0[72u].w * _3230)));
        _3273 = _3262 * 0.999000012874603271484375;
        _3283 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3283)
        {
            if ((cbInstanceData._m0[_995 + 7u].x + _3273) < 0.5)
            {
                _3439 = true;
                break;
            }
        }
        uint _3380 = _996 + uint(_3242.w);
        if ((cbInstanceData._m0[_3380].w < 1.0) && ((cbInstanceData._m0[_3380].w + _3273) < 0.5))
        {
            _3439 = true;
            break;
        }
        if ((_3266 + 1.0) < _3264.x)
        {
            _3439 = true;
            break;
        }
        _3439 = false;
        break;
    }
    float _3643;
    if (_3439)
    {
        discard_state = true;
        _3643 = 0.0;
    }
    else
    {
        _3643 = cbInstanceData._m0[_3126].w;
    }
    SV_Target.x = _3270;
    SV_Target.y = _3271;
    SV_Target.z = _3272;
    SV_Target.w = _3643;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3126].w;
    discard_exit();
}


