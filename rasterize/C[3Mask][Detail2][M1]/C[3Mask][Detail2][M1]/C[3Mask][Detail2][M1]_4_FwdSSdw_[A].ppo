#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1299;
float _3706;
float _3707;
float _3708;
float _3709;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _254 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _260 = _254.x * cbMtdParam._m0[10u].x;
    float _261 = _254.y * cbMtdParam._m0[10u].y;
    float _262 = _254.z * cbMtdParam._m0[10u].z;
    vec4 _280 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _330 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _340 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _330)) + 1.0;
    float _3718 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _341 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _348 = (_341 * ((_280.x * cbMtdParam._m0[11u].x) - _260)) + _260;
    float _349 = (_341 * ((_280.y * cbMtdParam._m0[11u].y) - _261)) + _261;
    float _350 = (_341 * ((_280.z * cbMtdParam._m0[11u].z) - _262)) + _262;
    vec4 _368 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _399 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _330)) + 1.0;
    float _3729 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _407 = (_400 * ((_368.x * cbMtdParam._m0[12u].x) - _348)) + _348;
    float _408 = (_400 * ((_368.y * cbMtdParam._m0[12u].y) - _349)) + _349;
    float _409 = (_400 * ((_368.z * cbMtdParam._m0[12u].z) - _350)) + _350;
    vec4 _427 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _452 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _330)) + 1.0;
    float _3740 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    vec4 _481 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _489 = ((((_453 * ((_427.x * cbMtdParam._m0[13u].x) - _407)) + _407) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _481.x;
    float _492 = ((((_453 * ((_427.y * cbMtdParam._m0[13u].y) - _408)) + _408) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _481.y;
    float _495 = ((((_453 * ((_427.z * cbMtdParam._m0[13u].z) - _409)) + _409) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _481.z;
    vec4 _508 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _510 = _508.x;
    float _528 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _510) * _341) + _510;
    float _545 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _528) * _400) + _528;
    float _562 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _545) * _453) + _545;
    vec4 _574 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _576 = _574.x;
    float _577 = _574.y;
    float _583 = cbMtdParam._m0[18u].y * _574.z;
    vec4 _595 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _604 = (((cbMtdParam._m0[18u].x * _595.z) - _583) * _341) + _583;
    vec4 _617 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _628 = (((cbMtdParam._m0[17u].w * _617.z) - _604) * _400) + _604;
    vec4 _641 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _650 = (((cbMtdParam._m0[17u].z * _641.z) - _628) * _453) + _628;
    vec4 _663 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _676 = ((_595.x - _576) * _341) + _576;
    float _677 = ((_595.y - _577) * _341) + _577;
    float _682 = ((_617.x - _676) * _400) + _676;
    float _683 = ((_617.y - _677) * _400) + _677;
    float _692 = ((((_641.x - _682) * _453) + _682) * 2.0) + (-1.0);
    float _693 = ((((_641.y - _683) * _453) + _683) * 2.0) + (-1.0);
    float _694 = dot(vec2(_692, _693), vec2(_692, _693));
    float _3751 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _699 = sqrt(1.0 - (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))));
    float _702 = (((_663.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _692;
    float _703 = (((_663.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _693;
    float _706 = fma(_699, _224 * NORMAL.x, fma(_703, _231 * TANGENT.x, (_217 * _209) * _702));
    float _709 = fma(_699, _224 * NORMAL.y, fma(_703, _231 * TANGENT.y, (_217 * _210) * _702));
    float _712 = fma(_699, _224 * NORMAL.z, fma(_703, _231 * TANGENT.z, (_217 * _211) * _702));
    float _716 = inversesqrt(dot(vec3(_706, _709, _712), vec3(_706, _709, _712)));
    float _717 = _716 * _706;
    float _718 = _716 * _709;
    float _719 = _716 * _712;
    float _3762 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _720 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _3773 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3784 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3795 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3806 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _724 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _740 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _790 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _780);
    float _791 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _780);
    float _792 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _780);
    float _796 = inversesqrt(dot(vec3(_790, _791, _792), vec3(_790, _791, _792)));
    float _797 = _790 * _796;
    float _798 = _791 * _796;
    float _799 = _792 * _796;
    vec4 _804 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _806 = _804.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _978 = sqrt(((_790 * _790) + (_791 * _791)) + (_792 * _792));
        float _984 = (cbMatDynParam._m0[5u].x * _978) + cbMatDynParam._m0[5u].y;
        float _3817 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _989 = (cbMatDynParam._m0[5u].z * _978) + cbMatDynParam._m0[5u].w;
        float _3828 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) - _985)) + _985) < ((_806 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _817 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _818 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _836 = fma(_719, cbSceneParam._m0[5u].z, fma(_718, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _717));
    float _839 = fma(_719, cbSceneParam._m0[6u].z, fma(_718, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _717));
    float _842 = fma(_719, cbSceneParam._m0[7u].z, fma(_718, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _717));
    uint _855 = uint(roundEven(NORMAL.w)) * 13u;
    uint _856 = _855 + 9u;
    uint _857 = _856 + uint(cbMatDynParam._m0[0u].w);
    float _863 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_857].x;
    float _864 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_857].y;
    float _865 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) * cbInstanceData._m0[_857].z;
    float _3839 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _869 = 1.0 - _724;
    float _870 = _866 * _869;
    float _871 = _867 * _869;
    float _872 = _868 * _869;
    float _877 = (_866 + (-0.039999999105930328369140625)) * _724;
    float _878 = (_867 + (-0.039999999105930328369140625)) * _724;
    float _879 = (_868 + (-0.039999999105930328369140625)) * _724;
    float _880 = _877 + 0.039999999105930328369140625;
    float _882 = _878 + 0.039999999105930328369140625;
    float _883 = _879 + 0.039999999105930328369140625;
    vec4 _892 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _817, cbSceneParam._m0[86u].y * _818));
    float _895 = _892.x * TEXCOORD_5.w;
    float _896 = dot(vec3(_717, _718, _719), vec3(_797, _798, _799));
    float _899 = _896 * 2.0;
    float _903 = (_899 * _717) - _797;
    float _904 = (_899 * _718) - _798;
    float _905 = (_899 * _719) - _799;
    float _909 = abs(dot(vec3(_797, _798, _799), vec3(_717, _718, _719)));
    float _3872 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _911 = sqrt(_720);
    float _924 = exp2((_911 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_911 * 3.0));
    float _930 = (1.0 - _924) * ((_911 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _931 = _924 * _911;
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1298;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1023 = fma(_967, cbModelParam._m0[26u].z, fma(_963, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _959));
        float _1027 = fma(_967, cbModelParam._m0[27u].z, fma(_963, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _959));
        float _1031 = fma(_967, cbModelParam._m0[28u].z, fma(_963, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _959));
        float _1056 = _959 + _717;
        float _1057 = _963 + _718;
        float _1058 = _967 + _719;
        float _1068 = fma(_1058, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056)) - _1023;
        float _1069 = fma(_1058, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056)) - _1027;
        float _1070 = fma(_1058, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056)) - _1031;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1087 = ((_1074 * _1068) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1023 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1074 * _1069) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1027 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1074 * _1070) / cbModelParam._m0[34u].z) + ((((((_1031 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        float _1126 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1092.x + (-0.5));
        float _1128 = _1126 * (_1092.y + (-0.5));
        float _1129 = _1126 * (_1092.z + (-0.5));
        float _1136 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1099.x + (-0.5));
        float _1138 = _1136 * (_1099.y + (-0.5));
        float _1139 = _1136 * (_1099.z + (-0.5));
        float _1146 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1106.x + (-0.5));
        float _1148 = _1146 * (_1106.y + (-0.5));
        float _1149 = _1146 * (_1106.z + (-0.5));
        float _1156 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1113.x + (-0.5));
        float _1158 = _1156 * (_1113.y + (-0.5));
        float _1159 = _1156 * (_1113.z + (-0.5));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = _1127 * 0.5;
        float _1164 = _1137 * 0.5;
        float _1165 = _1147 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1180 = (dot(vec3(_717, _718, _719), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1190 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3920 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1192 + 1.0))) + _1197) * _1160;
        float _1207 = _1128 * 0.5;
        float _1208 = _1138 * 0.5;
        float _1209 = _1148 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_717, _718, _719), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3953 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1234 + 1.0))) + _1239) * _1161;
        float _1249 = _1129 * 0.5;
        float _1250 = _1139 * 0.5;
        float _1251 = _1149 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_717, _718, _719), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3986 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1276 + 1.0))) + _1281) * _1162;
        _1298 = _1129;
        _1300 = _1128;
        _1301 = _1127;
        _1302 = _1139;
        _1303 = _1138;
        _1304 = _1137;
        _1305 = _1149;
        _1306 = _1148;
        _1307 = _1147;
        _1308 = _1162;
        _1309 = _1161;
        _1310 = _1160;
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
    }
    else
    {
        _1298 = _1299;
        _1300 = _1299;
        _1301 = _1299;
        _1302 = _1299;
        _1303 = _1299;
        _1304 = _1299;
        _1305 = _1299;
        _1306 = _1299;
        _1307 = _1299;
        _1308 = _1299;
        _1309 = _1299;
        _1310 = _1299;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1342 = fma(_967, cbModelParam._m0[30u].z, fma(_963, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _959));
        float _1346 = fma(_967, cbModelParam._m0[31u].z, fma(_963, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _959));
        float _1350 = fma(_967, cbModelParam._m0[32u].z, fma(_963, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _959));
        float _1373 = _959 + _717;
        float _1374 = _963 + _718;
        float _1375 = _967 + _719;
        float _1385 = fma(_1375, cbModelParam._m0[30u].z, fma(_1374, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1373)) - _1342;
        float _1386 = fma(_1375, cbModelParam._m0[31u].z, fma(_1374, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1373)) - _1346;
        float _1387 = fma(_1375, cbModelParam._m0[32u].z, fma(_1374, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1373)) - _1350;
        float _1391 = inversesqrt(dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387)));
        float _1404 = ((_1391 * _1385) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1342 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1391 * _1386) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1346 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1391 * _1387) / cbModelParam._m0[35u].z) + ((((((_1350 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        float _1441 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1408.x + (-0.5));
        float _1443 = _1441 * (_1408.y + (-0.5));
        float _1444 = _1441 * (_1408.z + (-0.5));
        float _1451 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1415.x + (-0.5));
        float _1453 = _1451 * (_1415.y + (-0.5));
        float _1454 = _1451 * (_1415.z + (-0.5));
        float _1461 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1422.x + (-0.5));
        float _1463 = _1461 * (_1422.y + (-0.5));
        float _1464 = _1461 * (_1422.z + (-0.5));
        float _1471 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1429.x + (-0.5));
        float _1473 = _1471 * (_1429.y + (-0.5));
        float _1474 = _1471 * (_1429.z + (-0.5));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = _1442 * 0.5;
        float _1479 = _1452 * 0.5;
        float _1480 = _1462 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_717, _718, _719), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4049 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1505 + 1.0))) + _1510) * _1475;
        float _1520 = _1443 * 0.5;
        float _1521 = _1453 * 0.5;
        float _1522 = _1463 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_717, _718, _719), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4082 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1547 + 1.0))) + _1552) * _1476;
        float _1562 = _1444 * 0.5;
        float _1563 = _1454 * 0.5;
        float _1564 = _1464 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_717, _718, _719), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4115 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1589 + 1.0))) + _1594) * _1477;
        _1611 = _1444;
        _1612 = _1443;
        _1613 = _1442;
        _1614 = _1454;
        _1615 = _1453;
        _1616 = _1452;
        _1617 = _1464;
        _1618 = _1463;
        _1619 = _1462;
        _1620 = _1477;
        _1621 = _1476;
        _1622 = _1475;
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
    }
    else
    {
        _1611 = _1299;
        _1612 = _1299;
        _1613 = _1299;
        _1614 = _1299;
        _1615 = _1299;
        _1616 = _1299;
        _1617 = _1299;
        _1618 = _1299;
        _1619 = _1299;
        _1620 = _1299;
        _1621 = _1299;
        _1622 = _1299;
        _1623 = 0.0;
        _1624 = 0.0;
        _1625 = 0.0;
    }
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1311)) + _1311;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1312)) + _1312;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1313)) + _1313;
    float _1658 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1636, cbSceneParam._m0[89u].y, _1635 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1636, cbSceneParam._m0[90u].y, _1635 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1636, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1635));
    float _1679 = _903 * 0.5;
    float _1680 = _904 * 0.5;
    float _1681 = _905 * 0.5;
    float _1682 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1685 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1688 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1722;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1695 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1298, _1302, _1305, _1308));
        float _1699 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1703 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1710 = dot(vec4(cbModelParam._m0[39u]), vec4(_1679, _1680, _1681, 1.0));
        _1722 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1722 = 1.0;
    }
    float _1733;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1724 = dot(vec4(cbModelParam._m0[40u]), vec4(_1679, _1680, _1681, 1.0));
        _1733 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1724) ? 0.0 : (isnan(0.0) ? _1724 : max(0.0, _1724))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1733 = 1.0;
    }
    float _1737 = (_1733 * cbModelParam._m0[1u].x) + (_1722 * (1.0 - cbModelParam._m0[1u].x));
    float _1747 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _720);
    float _1748 = isnan(_1747) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1747 : min(cbModelParam._m0[25u].z, _1747));
    float _1830;
    float _1832;
    float _1834;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1797 = fma(_967, cbModelParam._m0[13u].z, fma(_963, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959)) + cbModelParam._m0[13u].w;
        float _1801 = fma(_967, cbModelParam._m0[14u].z, fma(_963, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959)) + cbModelParam._m0[14u].w;
        float _1805 = fma(_967, cbModelParam._m0[15u].z, fma(_963, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959)) + cbModelParam._m0[15u].w;
        float _1808 = fma(_905, cbModelParam._m0[13u].z, fma(_904, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _903));
        float _1811 = fma(_905, cbModelParam._m0[14u].z, fma(_904, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _903));
        float _1814 = fma(_905, cbModelParam._m0[15u].z, fma(_904, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _903));
        float _1842;
        if (_1808 > 0.0)
        {
            _1842 = abs((1.0 - _1797) / _1808);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1797 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1842 = frontier_phi_17_15_ladder;
        }
        float _2065;
        if (_1811 > 0.0)
        {
            _2065 = abs((1.0 - _1801) / _1811);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1801 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2065 = frontier_phi_26_22_ladder;
        }
        float _2322;
        if (_1814 > 0.0)
        {
            _2322 = abs((1.0 - _1805) / _1814);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1805 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2322 = frontier_phi_38_33_ladder;
        }
        float _2324 = isnan(_2065) ? _1842 : (isnan(_1842) ? _2065 : min(_1842, _2065));
        float _2325 = isnan(_2322) ? _2324 : (isnan(_2324) ? _2322 : min(_2324, _2322));
        float _2329 = (_2325 * _1808) + _1797;
        float _2330 = (_2325 * _1811) + _1801;
        float _2331 = (_2325 * _1814) + _1805;
        float _2332 = _2325 * 9.9999997473787516355514526367188e-05;
        float _2334 = (-1.0) - _2332;
        float _2336 = _2332 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2331 > _2336) || ((_2331 < _2334) || ((_2330 > _2336) || ((_2330 < _2334) || ((_2329 < _2334) || (_2329 > _2336))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2331, cbModelParam._m0[9u].z, fma(_2330, cbModelParam._m0[9u].y, _2329 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2331, cbModelParam._m0[10u].z, fma(_2330, cbModelParam._m0[10u].y, _2329 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2331, cbModelParam._m0[11u].z, fma(_2330, cbModelParam._m0[11u].y, _2329 * cbModelParam._m0[11u].x))), _1748);
            frontier_phi_16_38_ladder = _2459.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2459.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2459.x * cbModelParam._m0[1u].y;
        }
        _1830 = frontier_phi_16_38_ladder_2;
        _1832 = frontier_phi_16_38_ladder_1;
        _1834 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1818 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_903, _904, _905), _1748);
        _1830 = _1818.x * cbModelParam._m0[1u].y;
        _1832 = _1818.y * cbModelParam._m0[1u].y;
        _1834 = _1818.z * cbModelParam._m0[1u].y;
    }
    float _1838 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _720);
    float _1839 = isnan(_1838) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1838 : min(cbModelParam._m0[25u].w, _1838));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1892 = fma(_967, cbModelParam._m0[21u].z, fma(_963, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959)) + cbModelParam._m0[21u].w;
        float _1896 = fma(_967, cbModelParam._m0[22u].z, fma(_963, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959)) + cbModelParam._m0[22u].w;
        float _1900 = fma(_967, cbModelParam._m0[23u].z, fma(_963, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959)) + cbModelParam._m0[23u].w;
        float _1903 = fma(_905, cbModelParam._m0[21u].z, fma(_904, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _903));
        float _1906 = fma(_905, cbModelParam._m0[22u].z, fma(_904, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _903));
        float _1909 = fma(_905, cbModelParam._m0[23u].z, fma(_904, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _903));
        float _2070;
        if (_1903 > 0.0)
        {
            _2070 = abs((1.0 - _1892) / _1903);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1892 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2070 = frontier_phi_28_24_ladder;
        }
        float _2349;
        if (_1906 > 0.0)
        {
            _2349 = abs((1.0 - _1896) / _1906);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1896 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2349 = frontier_phi_40_35_ladder;
        }
        float _2562;
        if (_1909 > 0.0)
        {
            _2562 = abs((1.0 - _1900) / _1909);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1900 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2562 = frontier_phi_49_46_ladder;
        }
        float _2564 = isnan(_2349) ? _2070 : (isnan(_2070) ? _2349 : min(_2070, _2349));
        float _2565 = isnan(_2562) ? _2564 : (isnan(_2564) ? _2562 : min(_2564, _2562));
        float _2569 = (_2565 * _1903) + _1892;
        float _2570 = (_2565 * _1906) + _1896;
        float _2571 = (_2565 * _1909) + _1900;
        float _2572 = _2565 * 9.9999997473787516355514526367188e-05;
        float _2573 = (-1.0) - _2572;
        float _2575 = _2572 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2571 > _2575) || ((_2571 < _2573) || ((_2570 > _2575) || ((_2570 < _2573) || ((_2569 < _2573) || (_2569 > _2575))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2770 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2571, cbModelParam._m0[17u].z, fma(_2570, cbModelParam._m0[17u].y, _2569 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2571, cbModelParam._m0[18u].z, fma(_2570, cbModelParam._m0[18u].y, _2569 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2571, cbModelParam._m0[19u].z, fma(_2570, cbModelParam._m0[19u].y, _2569 * cbModelParam._m0[19u].x))), _1839);
            frontier_phi_25_49_ladder = _2770.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2770.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2770.x * cbModelParam._m0[1u].z;
        }
        _1928 = frontier_phi_25_49_ladder_2;
        _1930 = frontier_phi_25_49_ladder_1;
        _1932 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_903, _904, _905), _1839);
        _1928 = _1912.x * cbModelParam._m0[1u].z;
        _1930 = _1912.y * cbModelParam._m0[1u].z;
        _1932 = _1912.z * cbModelParam._m0[1u].z;
    }
    float _1945 = (((_930 * _880) + _931) * _895) * ((cbModelParam._m0[1u].w * (_1928 - _1830)) + _1830);
    float _1947 = (((_930 * _882) + _931) * _895) * ((cbModelParam._m0[1u].w * (_1930 - _1832)) + _1832);
    float _1949 = (((_930 * _883) + _931) * _895) * ((cbModelParam._m0[1u].w * (_1932 - _1834)) + _1834);
    float _1952 = fma(_1949, cbSceneParam._m0[89u].z, fma(_1947, cbSceneParam._m0[89u].y, _1945 * cbSceneParam._m0[89u].x));
    float _1955 = fma(_1949, cbSceneParam._m0[90u].z, fma(_1947, cbSceneParam._m0[90u].y, _1945 * cbSceneParam._m0[90u].x));
    float _1958 = fma(_1949, cbSceneParam._m0[91u].z, fma(_1947, cbSceneParam._m0[91u].y, _1945 * cbSceneParam._m0[91u].x));
    vec4 _1966 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_817, _818));
    float _1968 = _1966.w;
    float _1980 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1968);
    float _1981 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1968);
    float _1982 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1968);
    uvec4 _1986 = floatBitsToUint(cbInstanceData._m0[_855 + 5u]);
    uint _1988 = _1986.x * 14u;
    uint _1989 = _1988 + 13u;
    float _1996 = _895 + (-1.0);
    float _2001 = (cbLight._m0[_1989].x * _1996) + 1.0;
    float _2002 = (cbLight._m0[_1989].y * _1996) + 1.0;
    float _2003 = (cbLight._m0[_1989].z * _1996) + 1.0;
    float _2004 = (cbLight._m0[_1989].w * _1996) + 1.0;
    uint _2005 = _1988 + 5u;
    float _2011 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2015 = _1988 + 4u;
    float _2024 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
    uint _2028 = _1988 | 1u;
    float _2039 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_717, _718, _719));
    float _2042 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_717, _718, _719));
    float _4251 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _4262 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2047 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.3183098733425140380859375;
    float _2049 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * 0.3183098733425140380859375;
    float _2056 = ((cbLight._m0[_2005].x * _2011) * _2049) + (((cbLight._m0[_2015].x * _1980) * _2024) * _2047);
    float _2057 = ((_2011 * cbLight._m0[_2005].y) * _2049) + (((cbLight._m0[_2015].y * _1981) * _2024) * _2047);
    float _2058 = ((_2011 * cbLight._m0[_2005].z) * _2049) + (((cbLight._m0[_2015].z * _1982) * _2024) * _2047);
    uvec4 _2062 = floatBitsToUint(cbLight._m0[_1988 + 12u]);
    bool _2064 = _2062.x == 0u;
    float _2075;
    float _2077;
    float _2079;
    if (_2064)
    {
        _2075 = _2056;
        _2077 = _2057;
        _2079 = _2058;
    }
    else
    {
        uint _2083 = _1988 + 6u;
        float _2099 = (dot(vec3(cbLight._m0[_1988 + 2u].xyz), vec3(_717, _718, _719)) * 0.5) + 0.5;
        float _2100 = _2099 * _2099;
        float _4273 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2101 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2102 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2075 = (((cbLight._m0[_2083].x * 0.3183098733425140380859375) * _2101) * _2102) + _2056;
        _2077 = (((cbLight._m0[_2083].y * 0.3183098733425140380859375) * _2101) * _2102) + _2057;
        _2079 = (((cbLight._m0[_2083].z * 0.3183098733425140380859375) * _2101) * _2102) + _2058;
    }
    bool _2082 = _2062.y == 0u;
    float _2120;
    float _2122;
    float _2124;
    if (_2082)
    {
        _2120 = _2075;
        _2122 = _2077;
        _2124 = _2079;
    }
    else
    {
        uint _2293 = _1988 + 7u;
        float _2309 = (dot(vec3(cbLight._m0[_1988 + 3u].xyz), vec3(_717, _718, _719)) * 0.5) + 0.5;
        float _2310 = _2309 * _2309;
        float _4289 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2311 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2312 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2120 = (((cbLight._m0[_2293].x * 0.3183098733425140380859375) * _2311) * _2312) + _2075;
        _2122 = (((cbLight._m0[_2293].y * 0.3183098733425140380859375) * _2311) * _2312) + _2077;
        _2124 = (((cbLight._m0[_2293].z * 0.3183098733425140380859375) * _2311) * _2312) + _2079;
    }
    uint _2127 = _1988 + 8u;
    float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _720) * 0.949999988079071044921875);
    float _2141 = _2140 * _2140;
    float _2142 = cbLight._m0[_1988].x + _797;
    float _2143 = cbLight._m0[_1988].y + _798;
    float _2144 = cbLight._m0[_1988].z + _799;
    float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
    float _2149 = _2148 * _2142;
    float _2150 = _2148 * _2143;
    float _2151 = _2148 * _2144;
    float _2152 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_1988].xyz));
    float _4305 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _4316 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _2156 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2157 = dot(vec3(_717, _718, _719), vec3(_2149, _2150, _2151));
    float _4327 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2161 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2149, _2150, _2151));
    float _4338 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2165 = _2141 * _2141;
    float _2169 = ((_2160 * _2160) * (_2165 + (-1.0))) + 1.0;
    float _2177 = exp2(log2(1.0 - (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) * 5.0);
    float _2178 = 0.959999978542327880859375 - _877;
    float _2180 = 0.959999978542327880859375 - _878;
    float _2181 = 0.959999978542327880859375 - _879;
    float _2188 = 1.0 - _2141;
    float _2199 = (0.5 / (((_2156 * ((_2155 * _2188) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2188) + _2141) * _2155))) * _2155;
    float _4349 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2201 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2165 / ((_2169 * _2169) * 3.141590118408203125));
    uint _2215 = _1988 + 9u;
    float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _720) * 0.949999988079071044921875);
    float _2227 = _2226 * _2226;
    float _2228 = cbLight._m0[_2028].x + _797;
    float _2229 = cbLight._m0[_2028].y + _798;
    float _2230 = cbLight._m0[_2028].z + _799;
    float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
    float _2235 = _2234 * _2228;
    float _2236 = _2234 * _2229;
    float _2237 = _2234 * _2230;
    float _2238 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2028].xyz));
    float _4360 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _2242 = dot(vec3(_717, _718, _719), vec3(_2235, _2236, _2237));
    float _4371 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2245 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _2246 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2235, _2236, _2237));
    float _4382 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2250 = _2227 * _2227;
    float _2254 = ((_2245 * _2245) * (_2250 + (-1.0))) + 1.0;
    float _2261 = exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0);
    float _2268 = 1.0 - _2227;
    float _2278 = (0.5 / (((_2156 * ((_2241 * _2268) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2268) + _2227) * _2241))) * _2241;
    float _4393 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2280 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2250 / ((_2254 * _2254) * 3.141590118408203125));
    float _2290 = (((((_2261 * _2178) + _880) * cbLight._m0[_2215].x) * _2280) * _2011) + ((((cbLight._m0[_2127].x * _1980) * ((_2177 * _2178) + _880)) * _2201) * _2024);
    float _2291 = (((((_2261 * _2180) + _882) * cbLight._m0[_2215].y) * _2280) * _2011) + ((((cbLight._m0[_2127].y * _1981) * ((_2177 * _2180) + _882)) * _2201) * _2024);
    float _2292 = (((((_2261 * _2181) + _883) * cbLight._m0[_2215].z) * _2280) * _2011) + ((((cbLight._m0[_2127].z * _1982) * ((_2177 * _2181) + _883)) * _2201) * _2024);
    float _2354;
    float _2356;
    float _2358;
    if (_2064)
    {
        _2354 = _2290;
        _2356 = _2291;
        _2358 = _2292;
    }
    else
    {
        uint _2360 = _1988 + 2u;
        uint _2364 = _1988 + 10u;
        float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _720) * 0.949999988079071044921875);
        float _2379 = _2378 * _2378;
        float _2380 = cbLight._m0[_2360].x + _797;
        float _2381 = cbLight._m0[_2360].y + _798;
        float _2382 = cbLight._m0[_2360].z + _799;
        float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
        float _2387 = _2386 * _2380;
        float _2388 = _2386 * _2381;
        float _2389 = _2386 * _2382;
        float _2390 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2360].xyz));
        float _4404 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2394 = dot(vec3(_717, _718, _719), vec3(_2387, _2388, _2389));
        float _4415 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2398 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2387, _2388, _2389));
        float _4426 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2402 = _2379 * _2379;
        float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
        float _2413 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
        float _2420 = 1.0 - _2379;
        float _2430 = (0.5 / (((_2156 * ((_2393 * _2420) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2420) + _2379) * _2393))) * _2393;
        float _4437 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2432 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
        float _2433 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2354 = (((((_2413 * _2178) + _880) * cbLight._m0[_2364].x) * _2432) * _2433) + _2290;
        _2356 = (((((_2413 * _2180) + _882) * cbLight._m0[_2364].y) * _2432) * _2433) + _2291;
        _2358 = (((((_2413 * _2181) + _883) * cbLight._m0[_2364].z) * _2432) * _2433) + _2292;
    }
    float _2468;
    float _2470;
    float _2472;
    if (_2082)
    {
        _2468 = _2354;
        _2470 = _2356;
        _2472 = _2358;
    }
    else
    {
        uint _2479 = _1988 + 3u;
        uint _2483 = _1988 + 11u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _720) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _797;
        float _2500 = cbLight._m0[_2479].y + _798;
        float _2501 = cbLight._m0[_2479].z + _799;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2479].xyz));
        float _4453 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2513 = dot(vec3(_717, _718, _719), vec3(_2506, _2507, _2508));
        float _4464 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4475 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2532 = exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0);
        float _2539 = 1.0 - _2498;
        float _2549 = (0.5 / (((_2156 * ((_2512 * _2539) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2156 * _2539) + _2498) * _2512))) * _2512;
        float _4486 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2551 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2552 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2468 = (((((_2532 * _2178) + _880) * cbLight._m0[_2483].x) * _2551) * _2552) + _2354;
        _2470 = (((((_2532 * _2180) + _882) * cbLight._m0[_2483].y) * _2551) * _2552) + _2356;
        _2472 = (((((_2532 * _2181) + _883) * cbLight._m0[_2483].z) * _2551) * _2552) + _2358;
    }
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    if (_1986.y == 0u)
    {
        float _2627 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2628 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2627;
        float _2629 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2627;
        float _2630 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2627;
        uvec4 _2642 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2643 = _2642.x;
        uint _2654 = uint((float(_2642.y) * floor(float(uint(cbSceneParam._m0[85u].y * _818) / _2643))) + floor(float(uint(cbSceneParam._m0[85u].x * _817) / _2643)));
        float _2664 = (log2(_2630 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2665 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        uint _2668 = uint(isnan(14.0) ? _2665 : (isnan(_2665) ? 14.0 : min(_2665, 14.0)));
        uvec4 _2673 = texelFetch(g_lightClusterGridBuffer, int(((_2668 << 2u) + (_2654 << 6u)) >> 2u));
        uint _2674 = _2673.x;
        uint _2675 = _2642.z;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        if (((((1u << ((_2675 >> 4u) & 15u)) + 4294967295u) & _2674) == 0u) || ((_2675 & 240u) == 0u))
        {
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
        }
        else
        {
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            uint _2934 = 0u;
            uint _2943;
            bool _2944;
            for (;;)
            {
                _2943 = texelFetch(g_lightClassification, int((((_2668 << 5u) + (_2654 << 9u)) + (_2934 << 2u)) >> 2u)).x;
                _2944 = _2943 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2944)
                {
                    frontier_phi_66_pred = _2928;
                    frontier_phi_66_pred_1 = _2933;
                    frontier_phi_66_pred_2 = _2932;
                    frontier_phi_66_pred_3 = _2931;
                    frontier_phi_66_pred_4 = _2930;
                    frontier_phi_66_pred_5 = _2929;
                }
                else
                {
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    uint _3079;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2943;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    for (;;)
                    {
                        uint _3083 = uint(findLSB(_3079)) + (_2934 << 5u);
                        uint _3080 = (_3079 + 4294967295u) & _3079;
                        uint _3085 = _3083 * 48u;
                        vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3105 = (_3083 * 48u) + 4u;
                        vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 3u)).x));
                        uint _3124 = (_3083 * 48u) + 8u;
                        vec3 _3135 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x));
                        float _3139 = _3099.x - _2628;
                        float _3140 = _3099.y - _2629;
                        float _3141 = _3099.z - _2630;
                        float _3142 = dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141));
                        float _3145 = inversesqrt(_3142);
                        float _3146 = _3145 * _3139;
                        float _3147 = _3145 * _3140;
                        float _3148 = _3145 * _3141;
                        float _3149 = dot(vec3(_836, _839, _842), vec3(_3146, _3147, _3148));
                        float _3154 = 1.0 - (_3142 * _3099.w);
                        float _4512 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3155 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3156 = sqrt(_3142) * _3118.w;
                        float _3159 = 1.39999997615814208984375 / (_3156 + 1.39999997615814208984375);
                        float _3160 = _3159 * _3159;
                        float _3163 = ((1.0 - _3160) * _3149) + _3160;
                        float _3166 = _3156 * _3156;
                        float _3170 = ((isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))) * _3155) / ((_3166 * 0.699999988079071044921875) + 1.0);
                        float _3174 = (-0.0) - _2628;
                        float _3175 = (-0.0) - _2629;
                        float _3176 = (-0.0) - _2630;
                        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                        float _3181 = _3180 * _3174;
                        float _3182 = _3180 * _3175;
                        float _3183 = _3180 * _3176;
                        float _3191 = exp2(log2(1.0 / ((_3166 * 3.5) + 5.0)) * 0.25);
                        float _3192 = 1.0 - _911;
                        float _3199 = sqrt(1.0 - ((1.0 - (_3192 * _3192)) * (1.0 - (_3191 * _3191))));
                        float _3200 = _3199 * _3199;
                        float _3201 = _3200 * _3200;
                        float _3202 = _3181 + _3146;
                        float _3203 = _3182 + _3147;
                        float _3204 = _3183 + _3148;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3212 = dot(vec3(_836, _839, _842), vec3(_3181, _3182, _3183));
                        float _4528 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3215 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3216 = dot(vec3(_836, _839, _842), vec3(_3208 * _3202, _3208 * _3203, _3208 * _3204));
                        float _4539 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3223 = ((_3219 * _3219) * (_3201 + (-1.0))) + 1.0;
                        float _3224 = _3159 * _3200;
                        float _3225 = _3224 * _3224;
                        float _3228 = ((1.0 - _3225) * _3149) + _3225;
                        float _4550 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3230 = 1.0 - _3200;
                        float _3240 = (0.5 / (((_3229 * ((_3215 * _3230) + _3200)) + 9.9999999392252902907785028219223e-09) + (((_3229 * _3230) + _3200) * _3215))) * _3229;
                        float _4561 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3251 = (((_3201 * 3.1415927410125732421875) * (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) / ((_3223 * _3223) * ((_3166 * 2.1991131305694580078125) + 3.141590118408203125))) * _3155;
                        _3003 = (_3170 * _3118.x) + _3076;
                        _3004 = (_3170 * _3118.y) + _3077;
                        _3005 = (_3170 * _3118.z) + _3078;
                        _3000 = (_3251 * _3135.x) + _3073;
                        _3001 = (_3251 * _3135.y) + _3074;
                        _3002 = (_3251 * _3135.z) + _3075;
                        if (_3080 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3080;
                        }
                    }
                    frontier_phi_66_pred = _3000;
                    frontier_phi_66_pred_1 = _3005;
                    frontier_phi_66_pred_2 = _3004;
                    frontier_phi_66_pred_3 = _3003;
                    frontier_phi_66_pred_4 = _3002;
                    frontier_phi_66_pred_5 = _3001;
                }
                _2776 = frontier_phi_66_pred;
                _2786 = frontier_phi_66_pred_1;
                _2784 = frontier_phi_66_pred_2;
                _2782 = frontier_phi_66_pred_3;
                _2780 = frontier_phi_66_pred_4;
                _2778 = frontier_phi_66_pred_5;
                uint _2935 = _2934 + 1u;
                if (_2935 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2928 = _2776;
                    _2929 = _2778;
                    _2930 = _2780;
                    _2931 = _2782;
                    _2932 = _2784;
                    _2933 = _2786;
                    _2934 = _2935;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
        }
        uvec4 _2789 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2790 = _2789.z;
        uint _2792 = (_2790 >> 8u) & 15u;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((4294967295u << _2792) & _2674) == 0u)
        {
            _2896 = _2775;
            _2898 = _2777;
            _2900 = _2779;
            _2902 = _2781;
            _2904 = _2783;
            _2906 = _2785;
        }
        else
        {
            float _2921 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
            float _2922 = _2921 * _2628;
            float _2923 = _2921 * _2629;
            float _2924 = _2921 * _2630;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2792 < ((_2790 >> 12u) & 15u))
            {
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _3056 = _2775;
                float _3057 = _2777;
                float _3058 = _2779;
                float _3059 = _2781;
                float _3060 = _2783;
                float _3061 = _2785;
                uint _3062 = _2792;
                uint _3071;
                bool _3072;
                for (;;)
                {
                    _3071 = texelFetch(g_lightClassification, int((((_2668 << 5u) + (_2654 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                    _3072 = _3071 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3072)
                    {
                        frontier_phi_77_pred = _3061;
                        frontier_phi_77_pred_1 = _3060;
                        frontier_phi_77_pred_2 = _3059;
                        frontier_phi_77_pred_3 = _3058;
                        frontier_phi_77_pred_4 = _3057;
                        frontier_phi_77_pred_5 = _3056;
                    }
                    else
                    {
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3278 = _3056;
                        float _3279 = _3057;
                        float _3280 = _3058;
                        float _3281 = _3059;
                        float _3282 = _3060;
                        float _3283 = _3061;
                        uint _3284 = _3071;
                        uint _3285;
                        vec4 _3310;
                        float _3311;
                        vec4 _3326;
                        vec3 _3338;
                        vec4 _3353;
                        vec4 _3368;
                        float _3415;
                        bool _3416;
                        for (;;)
                        {
                            uint _3295 = ((_3062 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3284));
                            _3285 = (_3284 + 4294967295u) & _3284;
                            uint _3297 = _3295 * 40u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3311 = _3310.w;
                            uint _3313 = (_3295 * 40u) + 4u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3295 * 40u) + 8u;
                            _3338 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x));
                            uint _3340 = (_3295 * 40u) + 16u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3355 = (_3295 * 40u) + 20u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3371 = (_3295 * 40u) + 24u;
                            vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3390 = (_3295 * 40u) + 28u;
                            vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3415 = fma(_2630, _3403.z, fma(_2629, _3403.y, _3403.x * _2628)) + _3403.w;
                            _3416 = !((fma(_2630, _3384.z, fma(_2629, _3384.y, _3384.x * _2628)) + _3384.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3416)
                            {
                                float _3443 = _3310.x - _2628;
                                float _3444 = _3310.y - _2629;
                                float _3445 = _3310.z - _2630;
                                float _3446 = dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445));
                                float _3449 = inversesqrt(_3446);
                                float _3450 = _3449 * _3443;
                                float _3451 = _3449 * _3444;
                                float _3452 = _3449 * _3445;
                                float _3456 = 1.0 - (_3446 / (_3311 * _3311));
                                float _4572 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3461 = sqrt(_3446) * _3326.w;
                                float _3463 = 1.39999997615814208984375 / (_3461 + 1.39999997615814208984375);
                                float _3464 = _3463 * _3463;
                                float _3467 = ((1.0 - _3464) * dot(vec3(_3450, _3451, _3452), vec3(_836, _839, _842))) + _3464;
                                float _3470 = _3461 * _3461;
                                float _3474 = (fma(_2630, _3353.z, fma(_2629, _3353.y, _3353.x * _2628)) + _3353.w) / _3415;
                                float _3475 = (fma(_2630, _3368.z, fma(_2629, _3368.y, _3368.x * _2628)) + _3368.w) / _3415;
                                float _3479 = 1.0 - dot(vec2(_3474, _3475), vec2(_3474, _3475));
                                float _4588 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3481 = _3480 * (((isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0))) * _3457) / ((_3470 * 0.699999988079071044921875) + 1.0));
                                float _3493 = exp2(log2(1.0 / ((_3470 * 3.5) + 5.0)) * 0.25);
                                float _3494 = 1.0 - _911;
                                float _3501 = sqrt(1.0 - ((1.0 - (_3494 * _3494)) * (1.0 - (_3493 * _3493))));
                                float _3502 = _3501 * _3501;
                                float _3503 = _3502 * _3502;
                                float _3504 = _3450 - _2922;
                                float _3505 = _3451 - _2923;
                                float _3506 = _3452 - _2924;
                                float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                                float _3514 = dot(vec3(_836, _839, _842), vec3((-0.0) - _2922, (-0.0) - _2923, (-0.0) - _2924));
                                float _4599 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3517 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3518 = dot(vec3(_836, _839, _842), vec3(_3510 * _3504, _3510 * _3505, _3510 * _3506));
                                float _4610 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3521 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3525 = ((_3521 * _3521) * (_3503 + (-1.0))) + 1.0;
                                float _3526 = _3463 * _3502;
                                float _3527 = _3526 * _3526;
                                float _3533 = ((1.0 - _3527) * dot(vec3(_836, _839, _842), vec3(_3450, _3451, _3452))) + _3527;
                                float _4621 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3534 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3535 = 1.0 - _3502;
                                float _3545 = (0.5 / (((_3534 * ((_3517 * _3535) + _3502)) + 9.9999999392252902907785028219223e-09) + (((_3534 * _3535) + _3502) * _3517))) * _3534;
                                float _4632 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3555 = (_3480 * _3457) * (((_3503 * 3.1415927410125732421875) * (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) / ((_3525 * _3525) * ((_3470 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3481 * _3326.y;
                                frontier_phi_83_pred_1 = _3481 * _3326.x;
                                frontier_phi_83_pred_2 = _3555 * _3338.z;
                                frontier_phi_83_pred_3 = _3555 * _3338.y;
                                frontier_phi_83_pred_4 = _3555 * _3338.x;
                                frontier_phi_83_pred_5 = _3481 * _3326.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3563 = frontier_phi_83_pred;
                            _3562 = frontier_phi_83_pred_1;
                            _3561 = frontier_phi_83_pred_2;
                            _3560 = frontier_phi_83_pred_3;
                            _3559 = frontier_phi_83_pred_4;
                            _3564 = frontier_phi_83_pred_5;
                            _3268 = _3562 + _3281;
                            _3269 = _3563 + _3282;
                            _3270 = _3564 + _3283;
                            _3265 = _3559 + _3278;
                            _3266 = _3560 + _3279;
                            _3267 = _3561 + _3280;
                            if (_3285 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3285;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3270;
                        frontier_phi_77_pred_1 = _3269;
                        frontier_phi_77_pred_2 = _3268;
                        frontier_phi_77_pred_3 = _3267;
                        frontier_phi_77_pred_4 = _3266;
                        frontier_phi_77_pred_5 = _3265;
                    }
                    _2907 = frontier_phi_77_pred;
                    _2905 = frontier_phi_77_pred_1;
                    _2903 = frontier_phi_77_pred_2;
                    _2901 = frontier_phi_77_pred_3;
                    _2899 = frontier_phi_77_pred_4;
                    _2897 = frontier_phi_77_pred_5;
                    uint _3063 = _3062 + 1u;
                    if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3056 = _2897;
                        _3057 = _2899;
                        _3058 = _2901;
                        _3059 = _2903;
                        _3060 = _2905;
                        _3061 = _2907;
                        _3062 = _3063;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2901;
                frontier_phi_58_59_ladder_1 = _2907;
                frontier_phi_58_59_ladder_2 = _2905;
                frontier_phi_58_59_ladder_3 = _2903;
                frontier_phi_58_59_ladder_4 = _2899;
                frontier_phi_58_59_ladder_5 = _2897;
            }
            else
            {
                frontier_phi_58_59_ladder = _2779;
                frontier_phi_58_59_ladder_1 = _2785;
                frontier_phi_58_59_ladder_2 = _2783;
                frontier_phi_58_59_ladder_3 = _2781;
                frontier_phi_58_59_ladder_4 = _2777;
                frontier_phi_58_59_ladder_5 = _2775;
            }
            _2896 = frontier_phi_58_59_ladder_5;
            _2898 = frontier_phi_58_59_ladder_4;
            _2900 = frontier_phi_58_59_ladder;
            _2902 = frontier_phi_58_59_ladder_3;
            _2904 = frontier_phi_58_59_ladder_2;
            _2906 = frontier_phi_58_59_ladder_1;
        }
        float _2911 = isnan(1.0) ? _895 : (isnan(_895) ? 1.0 : min(_895, 1.0));
        _2687 = (_2911 * _2902) + _2120;
        _2689 = (_2911 * _2904) + _2122;
        _2691 = (_2911 * _2906) + _2124;
        _2693 = ((_2896 * _880) * _2911) + _2468;
        _2695 = ((_2898 * _882) * _2911) + _2470;
        _2697 = ((_2900 * _883) * _2911) + _2472;
    }
    else
    {
        _2687 = _2120;
        _2689 = _2122;
        _2691 = _2124;
        _2693 = _2468;
        _2695 = _2470;
        _2697 = _2472;
    }
    float _4648 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4659 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4670 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _2714 = ((isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2687 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _895))) + ((_2693 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    float _2715 = ((isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2689 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _895))) + ((_2695 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    float _2716 = ((isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2691 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _895))) + ((_2697 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    uint _2717 = _855 + 6u;
    float _2725 = _817 / cbSceneParam._m0[86u].x;
    float _2726 = _818 / cbSceneParam._m0[86u].y;
    vec4 _2740 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2725, _2726, (log2((isnan(cbSceneParam._m0[77u].w) ? _740 : (isnan(_740) ? cbSceneParam._m0[77u].w : min(_740, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2742 = _2740.x;
    float _2743 = _2740.y;
    float _2744 = _2740.z;
    float _2745 = _2740.w;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    if (_740 > cbSceneParam._m0[78u].w)
    {
        float _2800 = isnan(_740) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _740 : min(cbSceneParam._m0[80u].w, _740));
        float _2801 = _2800 / _740;
        float _2812 = _2801 * _790;
        float _2813 = _791 * _2801;
        float _2814 = (-0.0) - _2813;
        float _2816 = _2801 * _792;
        float _2818 = (cbSceneParam._m0[77u].w * _2814) / _2800;
        float _2819 = _2818 + cbSceneParam._m0[79u].w;
        float _2820 = cbSceneParam._m0[79u].w - _2813;
        float _2826 = sqrt(((_2812 * _2812) + (_2813 * _2813)) + (_2816 * _2816));
        float _2829 = (1.0 - (cbSceneParam._m0[77u].w / _2800)) * _2826;
        float _2834 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2836 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3013;
        if (abs((_2814 - _2818) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3013 = ((((_2819 > 0.0) ? exp2(_2834 * _2819) : (2.0 - exp2(_2836 * _2819))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2829;
        }
        else
        {
            float _2957 = 1.0 / cbSceneParam._m0[80u].x;
            float _2958 = isnan(_2820) ? _2819 : (isnan(_2819) ? _2820 : max(_2819, _2820));
            float _2959 = isnan(_2820) ? _2819 : (isnan(_2819) ? _2820 : min(_2819, _2820));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            float _2969 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : min(_2959, 0.0));
            _3013 = ((abs(_2826 / _2814) * cbSceneParam._m0[80u].y) * ((((_2968 - _2969) * 2.0) - ((exp2(_2834 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0)))) - exp2(_2834 * (isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))))) * _2957)) - ((exp2(_2836 * _2968) - exp2(_2836 * _2969)) * _2957))) + (_2829 * cbSceneParam._m0[80u].z);
        }
        vec4 _3015 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2725, _2726, 1.0), 0.0);
        float _3024 = exp2((_3013 * (-1.44269502162933349609375)) * (1.0 - _3015.w));
        float _3025 = log2(_3024);
        float _3041 = log2(_2745);
        _2838 = (exp2(_3041 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].x)) * _3015.x) / cbSceneParam._m0[78u].x)) + _2742;
        _2840 = (exp2(_3041 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].y)) * _3015.y) / cbSceneParam._m0[78u].y)) + _2743;
        _2842 = (exp2(_3041 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].z)) * _3015.z) / cbSceneParam._m0[78u].z)) + _2744;
        _2844 = _3024 * _2745;
    }
    else
    {
        _2838 = _2742;
        _2840 = _2743;
        _2842 = _2744;
        _2844 = _2745;
    }
    bool _3051;
    vec4 _2854;
    vec4 _2876;
    float _2878;
    float _2882;
    float _2883;
    float _2884;
    float _2885;
    bool _2895;
    for (;;)
    {
        _2854 = cbMatDynParam._m0[0u];
        float _2856 = roundEven(_2854.y);
        bool _2857 = _2856 == 3.0;
        float _2858 = log2(_2844);
        float _2865 = exp2(_2858 * cbSceneParam._m0[78u].x) * _2714;
        float _2866 = exp2(_2858 * cbSceneParam._m0[78u].y) * _2715;
        float _2867 = exp2(_2858 * cbSceneParam._m0[78u].z) * _2716;
        float _2874 = _806 + (-0.5);
        _2876 = cbMtdParam._m0[1u];
        _2878 = _2876.y * _2874;
        float _2881 = (_2856 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2882 = _2881 * (_2857 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2838)));
        _2883 = _2881 * (_2857 ? _2866 : (_2866 + (cbSceneParam._m0[72u].w * _2840)));
        _2884 = _2881 * (_2857 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2842)));
        _2885 = _2874 * 0.999000012874603271484375;
        _2895 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2895)
        {
            if ((cbInstanceData._m0[_855 + 7u].x + _2885) < 0.5)
            {
                _3051 = true;
                break;
            }
        }
        uint _2992 = _856 + uint(_2854.w);
        if ((cbInstanceData._m0[_2992].w < 1.0) && ((cbInstanceData._m0[_2992].w + _2885) < 0.5))
        {
            _3051 = true;
            break;
        }
        if ((_2878 + 1.0) < _2876.x)
        {
            _3051 = true;
            break;
        }
        _3051 = false;
        break;
    }
    float _3256;
    if (_3051)
    {
        discard_state = true;
        _3256 = 0.0;
    }
    else
    {
        _3256 = cbInstanceData._m0[_2717].w;
    }
    SV_Target.x = _2882;
    SV_Target.y = _2883;
    SV_Target.z = _2884;
    SV_Target.w = _3256;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2717].w;
    discard_exit();
}


