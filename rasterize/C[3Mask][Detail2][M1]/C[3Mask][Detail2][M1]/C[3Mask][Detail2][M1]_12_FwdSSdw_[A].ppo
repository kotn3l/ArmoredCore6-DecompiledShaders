#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1436;
float _3841;
float _3842;
float _3843;
float _3844;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _272 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _272.x * cbMtdParam._m0[10u].x;
    float _279 = _272.y * cbMtdParam._m0[10u].y;
    float _280 = _272.z * cbMtdParam._m0[10u].z;
    vec4 _298 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _348 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _358 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _348)) + 1.0;
    float _3853 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _366 = (_359 * ((_298.x * cbMtdParam._m0[11u].x) - _278)) + _278;
    float _367 = (_359 * ((_298.y * cbMtdParam._m0[11u].y) - _279)) + _279;
    float _368 = (_359 * ((_298.z * cbMtdParam._m0[11u].z) - _280)) + _280;
    vec4 _386 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _417 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _348)) + 1.0;
    float _3864 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _425 = (_418 * ((_386.x * cbMtdParam._m0[12u].x) - _366)) + _366;
    float _426 = (_418 * ((_386.y * cbMtdParam._m0[12u].y) - _367)) + _367;
    float _427 = (_418 * ((_386.z * cbMtdParam._m0[12u].z) - _368)) + _368;
    vec4 _445 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _470 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _348)) + 1.0;
    float _3875 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    vec4 _499 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _507 = ((((_471 * ((_445.x * cbMtdParam._m0[13u].x) - _425)) + _425) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _499.x;
    float _510 = ((((_471 * ((_445.y * cbMtdParam._m0[13u].y) - _426)) + _426) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _499.y;
    float _513 = ((((_471 * ((_445.z * cbMtdParam._m0[13u].z) - _427)) + _427) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _499.z;
    vec4 _534 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _563 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _3886 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _564 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _571 = (_564 * ((_534.x * cbMtdParam._m0[15u].x) - _507)) + _507;
    float _572 = (_564 * ((_534.y * cbMtdParam._m0[15u].y) - _510)) + _510;
    float _573 = (_564 * ((_534.z * cbMtdParam._m0[15u].z) - _513)) + _513;
    vec4 _586 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _588 = _586.x;
    float _606 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _588) * _359) + _588;
    float _623 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _606) * _418) + _606;
    float _640 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _623) * _471) + _623;
    vec4 _652 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _672 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _674 = _672.x;
    float _675 = _672.y;
    float _681 = cbMtdParam._m0[18u].y * _672.z;
    vec4 _693 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _702 = (((cbMtdParam._m0[18u].x * _693.z) - _681) * _359) + _681;
    vec4 _715 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _726 = (((cbMtdParam._m0[17u].w * _715.z) - _702) * _418) + _702;
    vec4 _739 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _748 = (((cbMtdParam._m0[17u].z * _739.z) - _726) * _471) + _726;
    vec4 _761 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _775 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_761.z * cbMtdParam._m0[19u].y) - _748)) + _748;
    vec4 _788 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _800 = ((_693.x - _674) * _359) + _674;
    float _801 = ((_693.y - _675) * _359) + _675;
    float _806 = ((_715.x - _800) * _418) + _800;
    float _807 = ((_715.y - _801) * _418) + _801;
    float _816 = ((((_739.x - _806) * _471) + _806) * 2.0) + (-1.0);
    float _817 = ((((_739.y - _807) * _471) + _807) * 2.0) + (-1.0);
    float _818 = dot(vec2(_816, _817), vec2(_816, _817));
    float _3897 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _823 = sqrt(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))));
    float _840 = (((((_788.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _816) + ((((_652.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y)) + ((((_761.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _841 = (((((_788.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _817) + ((((_652.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y)) + ((((_761.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _844 = fma(_823, _242 * NORMAL.x, fma(_841, _249 * TANGENT.x, (_235 * _227) * _840));
    float _847 = fma(_823, _242 * NORMAL.y, fma(_841, _249 * TANGENT.y, (_235 * _228) * _840));
    float _850 = fma(_823, _242 * NORMAL.z, fma(_841, _249 * TANGENT.z, (_235 * _229) * _840));
    float _854 = inversesqrt(dot(vec3(_844, _847, _850), vec3(_844, _847, _850)));
    float _855 = _854 * _844;
    float _856 = _854 * _847;
    float _857 = _854 * _850;
    float _3908 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _858 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3930 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3941 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3952 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _862 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _878 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _928 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _918);
    float _929 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _918);
    float _930 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _918);
    float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
    float _935 = _928 * _934;
    float _936 = _929 * _934;
    float _937 = _930 * _934;
    vec4 _942 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _944 = _942.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1116 = sqrt(((_928 * _928) + (_929 * _929)) + (_930 * _930));
        float _1122 = (cbMatDynParam._m0[5u].x * _1116) + cbMatDynParam._m0[5u].y;
        float _3963 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1127 = (cbMatDynParam._m0[5u].z * _1116) + cbMatDynParam._m0[5u].w;
        float _3974 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) - _1123)) + _1123) < ((_944 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _955 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _956 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _974 = fma(_857, cbSceneParam._m0[5u].z, fma(_856, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _855));
    float _977 = fma(_857, cbSceneParam._m0[6u].z, fma(_856, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _855));
    float _980 = fma(_857, cbSceneParam._m0[7u].z, fma(_856, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _855));
    uint _993 = uint(roundEven(NORMAL.w)) * 13u;
    uint _994 = _993 + 9u;
    uint _995 = _994 + uint(cbMatDynParam._m0[0u].w);
    float _1001 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * cbInstanceData._m0[_995].x;
    float _1002 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * cbInstanceData._m0[_995].y;
    float _1003 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * cbInstanceData._m0[_995].z;
    float _3985 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _1007 = 1.0 - _862;
    float _1008 = _1004 * _1007;
    float _1009 = _1005 * _1007;
    float _1010 = _1006 * _1007;
    float _1015 = (_1004 + (-0.039999999105930328369140625)) * _862;
    float _1016 = (_1005 + (-0.039999999105930328369140625)) * _862;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _862;
    float _1018 = _1015 + 0.039999999105930328369140625;
    float _1020 = _1016 + 0.039999999105930328369140625;
    float _1021 = _1017 + 0.039999999105930328369140625;
    vec4 _1030 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _955, cbSceneParam._m0[86u].y * _956));
    float _1033 = _1030.x * TEXCOORD_5.w;
    float _1034 = dot(vec3(_855, _856, _857), vec3(_935, _936, _937));
    float _1037 = _1034 * 2.0;
    float _1041 = (_1037 * _855) - _935;
    float _1042 = (_1037 * _856) - _936;
    float _1043 = (_1037 * _857) - _937;
    float _1047 = abs(dot(vec3(_935, _936, _937), vec3(_855, _856, _857)));
    float _4018 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1049 = sqrt(_858);
    float _1062 = exp2((_1049 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1049 * 3.0));
    float _1068 = (1.0 - _1062) * ((_1049 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1069 = _1062 * _1049;
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1435;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1160 = fma(_1105, cbModelParam._m0[26u].z, fma(_1101, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1097));
        float _1164 = fma(_1105, cbModelParam._m0[27u].z, fma(_1101, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1097));
        float _1168 = fma(_1105, cbModelParam._m0[28u].z, fma(_1101, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1097));
        float _1193 = _1097 + _855;
        float _1194 = _1101 + _856;
        float _1195 = _1105 + _857;
        float _1205 = fma(_1195, cbModelParam._m0[26u].z, fma(_1194, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1193)) - _1160;
        float _1206 = fma(_1195, cbModelParam._m0[27u].z, fma(_1194, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1193)) - _1164;
        float _1207 = fma(_1195, cbModelParam._m0[28u].z, fma(_1194, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1193)) - _1168;
        float _1211 = inversesqrt(dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207)));
        float _1224 = ((_1211 * _1205) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1160 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1211 * _1206) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1164 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1211 * _1207) / cbModelParam._m0[34u].z) + ((((((_1168 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        float _1263 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1229.x + (-0.5));
        float _1265 = _1263 * (_1229.y + (-0.5));
        float _1266 = _1263 * (_1229.z + (-0.5));
        float _1273 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1236.x + (-0.5));
        float _1275 = _1273 * (_1236.y + (-0.5));
        float _1276 = _1273 * (_1236.z + (-0.5));
        float _1283 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1243.x + (-0.5));
        float _1285 = _1283 * (_1243.y + (-0.5));
        float _1286 = _1283 * (_1243.z + (-0.5));
        float _1293 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1250.x + (-0.5));
        float _1295 = _1293 * (_1250.y + (-0.5));
        float _1296 = _1293 * (_1250.z + (-0.5));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = _1264 * 0.5;
        float _1301 = _1274 * 0.5;
        float _1302 = _1284 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1317 = (dot(vec3(_855, _856, _857), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1327 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4066 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1329 + 1.0))) + _1334) * _1297;
        float _1344 = _1265 * 0.5;
        float _1345 = _1275 * 0.5;
        float _1346 = _1285 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_855, _856, _857), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4099 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1371 + 1.0))) + _1376) * _1298;
        float _1386 = _1266 * 0.5;
        float _1387 = _1276 * 0.5;
        float _1388 = _1286 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_855, _856, _857), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4132 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1413 + 1.0))) + _1418) * _1299;
        _1435 = _1266;
        _1437 = _1265;
        _1438 = _1264;
        _1439 = _1276;
        _1440 = _1275;
        _1441 = _1274;
        _1442 = _1286;
        _1443 = _1285;
        _1444 = _1284;
        _1445 = _1299;
        _1446 = _1298;
        _1447 = _1297;
        _1448 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
    }
    else
    {
        _1435 = _1436;
        _1437 = _1436;
        _1438 = _1436;
        _1439 = _1436;
        _1440 = _1436;
        _1441 = _1436;
        _1442 = _1436;
        _1443 = _1436;
        _1444 = _1436;
        _1445 = _1436;
        _1446 = _1436;
        _1447 = _1436;
        _1448 = 0.0;
        _1449 = 0.0;
        _1450 = 0.0;
    }
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1479 = fma(_1105, cbModelParam._m0[30u].z, fma(_1101, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1097));
        float _1483 = fma(_1105, cbModelParam._m0[31u].z, fma(_1101, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1097));
        float _1487 = fma(_1105, cbModelParam._m0[32u].z, fma(_1101, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1097));
        float _1510 = _1097 + _855;
        float _1511 = _1101 + _856;
        float _1512 = _1105 + _857;
        float _1522 = fma(_1512, cbModelParam._m0[30u].z, fma(_1511, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1510)) - _1479;
        float _1523 = fma(_1512, cbModelParam._m0[31u].z, fma(_1511, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1510)) - _1483;
        float _1524 = fma(_1512, cbModelParam._m0[32u].z, fma(_1511, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1510)) - _1487;
        float _1528 = inversesqrt(dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524)));
        float _1541 = ((_1528 * _1522) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1479 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1542 = ((_1528 * _1523) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1483 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1543 = ((_1528 * _1524) / cbModelParam._m0[35u].z) + ((((((_1487 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1541, _1542, _1543), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1541, _1542, _1543), 0.0);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1541, _1542, _1543), 0.0);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1541, _1542, _1543), 0.0);
        float _1578 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1545.x + (-0.5));
        float _1580 = _1578 * (_1545.y + (-0.5));
        float _1581 = _1578 * (_1545.z + (-0.5));
        float _1588 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1552.x + (-0.5));
        float _1590 = _1588 * (_1552.y + (-0.5));
        float _1591 = _1588 * (_1552.z + (-0.5));
        float _1598 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1559.x + (-0.5));
        float _1600 = _1598 * (_1559.y + (-0.5));
        float _1601 = _1598 * (_1559.z + (-0.5));
        float _1608 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1566.x + (-0.5));
        float _1610 = _1608 * (_1566.y + (-0.5));
        float _1611 = _1608 * (_1566.z + (-0.5));
        float _1612 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = _1579 * 0.5;
        float _1616 = _1589 * 0.5;
        float _1617 = _1599 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_855, _856, _857), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1612 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4195 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1642 + 1.0))) + _1647) * _1612;
        float _1657 = _1580 * 0.5;
        float _1658 = _1590 * 0.5;
        float _1659 = _1600 * 0.5;
        float _1660 = dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659));
        float _1665 = (_1660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1660);
        float _1673 = (dot(vec3(_855, _856, _857), vec3(_1665 * _1657, _1665 * _1658, _1665 * _1659)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1682 = sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1684 = _1683 * 2.0;
        float _1688 = (1.0 - _1683) / (_1683 + 1.0);
        float _4228 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1698 = ((((1.0 - _1689) * (_1684 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1684 + 1.0))) + _1689) * _1613;
        float _1699 = _1581 * 0.5;
        float _1700 = _1591 * 0.5;
        float _1701 = _1601 * 0.5;
        float _1702 = dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701));
        float _1707 = (_1702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1702);
        float _1715 = (dot(vec3(_855, _856, _857), vec3(_1707 * _1699, _1707 * _1700, _1707 * _1701)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1724 = sqrt(((_1700 * _1700) + (_1699 * _1699)) + (_1701 * _1701)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1726 = _1725 * 2.0;
        float _1730 = (1.0 - _1725) / (_1725 + 1.0);
        float _4261 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1740 = ((((1.0 - _1731) * (_1726 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1726 + 1.0))) + _1731) * _1614;
        _1748 = _1581;
        _1749 = _1580;
        _1750 = _1579;
        _1751 = _1591;
        _1752 = _1590;
        _1753 = _1589;
        _1754 = _1601;
        _1755 = _1600;
        _1756 = _1599;
        _1757 = _1614;
        _1758 = _1613;
        _1759 = _1612;
        _1760 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
        _1761 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)));
        _1762 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)));
    }
    else
    {
        _1748 = _1436;
        _1749 = _1436;
        _1750 = _1436;
        _1751 = _1436;
        _1752 = _1436;
        _1753 = _1436;
        _1754 = _1436;
        _1755 = _1436;
        _1756 = _1436;
        _1757 = _1436;
        _1758 = _1436;
        _1759 = _1436;
        _1760 = 0.0;
        _1761 = 0.0;
        _1762 = 0.0;
    }
    float _1772 = (cbModelParam._m0[1u].x * (_1760 - _1448)) + _1448;
    float _1773 = (cbModelParam._m0[1u].x * (_1761 - _1449)) + _1449;
    float _1774 = (cbModelParam._m0[1u].x * (_1762 - _1450)) + _1450;
    float _1795 = fma(_1774, cbSceneParam._m0[89u].z, fma(_1773, cbSceneParam._m0[89u].y, _1772 * cbSceneParam._m0[89u].x));
    float _1798 = fma(_1774, cbSceneParam._m0[90u].z, fma(_1773, cbSceneParam._m0[90u].y, _1772 * cbSceneParam._m0[90u].x));
    float _1801 = fma(_1774, cbSceneParam._m0[91u].z, fma(_1773, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1772));
    float _1816 = _1041 * 0.5;
    float _1817 = _1042 * 0.5;
    float _1818 = _1043 * 0.5;
    float _1819 = dot(vec4(_1816, _1817, _1818, 1.0), vec4(_1750, _1753, _1756, _1759));
    float _1822 = dot(vec4(_1816, _1817, _1818, 1.0), vec4(_1749, _1752, _1755, _1758));
    float _1825 = dot(vec4(_1816, _1817, _1818, 1.0), vec4(_1748, _1751, _1754, _1757));
    float _1859;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1832 = dot(vec4(_1816, _1817, _1818, 1.0), vec4(_1435, _1439, _1442, _1445));
        float _1836 = dot(vec4(_1816, _1817, _1818, 1.0), vec4(_1437, _1440, _1443, _1446));
        float _1840 = dot(vec4(_1816, _1817, _1818, 1.0), vec4(_1438, _1441, _1444, _1447));
        float _1847 = dot(vec4(cbModelParam._m0[39u]), vec4(_1816, _1817, _1818, 1.0));
        _1859 = dot(vec3(isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1847) ? 0.0 : (isnan(0.0) ? _1847 : max(0.0, _1847))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1859 = 1.0;
    }
    float _1870;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1861 = dot(vec4(cbModelParam._m0[40u]), vec4(_1816, _1817, _1818, 1.0));
        _1870 = dot(vec3(isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1861) ? 0.0 : (isnan(0.0) ? _1861 : max(0.0, _1861))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1870 = 1.0;
    }
    float _1874 = (_1870 * cbModelParam._m0[1u].x) + (_1859 * (1.0 - cbModelParam._m0[1u].x));
    float _1884 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _858);
    float _1885 = isnan(_1884) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1884 : min(cbModelParam._m0[25u].z, _1884));
    float _1965;
    float _1967;
    float _1969;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1932 = fma(_1105, cbModelParam._m0[13u].z, fma(_1101, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1097)) + cbModelParam._m0[13u].w;
        float _1936 = fma(_1105, cbModelParam._m0[14u].z, fma(_1101, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1097)) + cbModelParam._m0[14u].w;
        float _1940 = fma(_1105, cbModelParam._m0[15u].z, fma(_1101, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1097)) + cbModelParam._m0[15u].w;
        float _1943 = fma(_1043, cbModelParam._m0[13u].z, fma(_1042, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1041));
        float _1946 = fma(_1043, cbModelParam._m0[14u].z, fma(_1042, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1041));
        float _1949 = fma(_1043, cbModelParam._m0[15u].z, fma(_1042, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1041));
        float _1977;
        if (_1943 > 0.0)
        {
            _1977 = abs((1.0 - _1932) / _1943);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1932 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1977 = frontier_phi_17_15_ladder;
        }
        float _2200;
        if (_1946 > 0.0)
        {
            _2200 = abs((1.0 - _1936) / _1946);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1936 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2200 = frontier_phi_26_22_ladder;
        }
        float _2457;
        if (_1949 > 0.0)
        {
            _2457 = abs((1.0 - _1940) / _1949);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1940 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2457 = frontier_phi_38_33_ladder;
        }
        float _2459 = isnan(_2200) ? _1977 : (isnan(_1977) ? _2200 : min(_1977, _2200));
        float _2460 = isnan(_2457) ? _2459 : (isnan(_2459) ? _2457 : min(_2459, _2457));
        float _2464 = (_2460 * _1943) + _1932;
        float _2465 = (_2460 * _1946) + _1936;
        float _2466 = (_2460 * _1949) + _1940;
        float _2467 = _2460 * 9.9999997473787516355514526367188e-05;
        float _2469 = (-1.0) - _2467;
        float _2471 = _2467 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2466 > _2471) || ((_2466 < _2469) || ((_2465 > _2471) || ((_2465 < _2469) || ((_2464 < _2469) || (_2464 > _2471))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2594 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2466, cbModelParam._m0[9u].z, fma(_2465, cbModelParam._m0[9u].y, _2464 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2466, cbModelParam._m0[10u].z, fma(_2465, cbModelParam._m0[10u].y, _2464 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2466, cbModelParam._m0[11u].z, fma(_2465, cbModelParam._m0[11u].y, _2464 * cbModelParam._m0[11u].x))), _1885);
            frontier_phi_16_38_ladder = _2594.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2594.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2594.x * cbModelParam._m0[1u].y;
        }
        _1965 = frontier_phi_16_38_ladder_2;
        _1967 = frontier_phi_16_38_ladder_1;
        _1969 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1953 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1041, _1042, _1043), _1885);
        _1965 = _1953.x * cbModelParam._m0[1u].y;
        _1967 = _1953.y * cbModelParam._m0[1u].y;
        _1969 = _1953.z * cbModelParam._m0[1u].y;
    }
    float _1973 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _858);
    float _1974 = isnan(_1973) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1973 : min(cbModelParam._m0[25u].w, _1973));
    float _2063;
    float _2065;
    float _2067;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2027 = fma(_1105, cbModelParam._m0[21u].z, fma(_1101, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1097)) + cbModelParam._m0[21u].w;
        float _2031 = fma(_1105, cbModelParam._m0[22u].z, fma(_1101, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1097)) + cbModelParam._m0[22u].w;
        float _2035 = fma(_1105, cbModelParam._m0[23u].z, fma(_1101, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1097)) + cbModelParam._m0[23u].w;
        float _2038 = fma(_1043, cbModelParam._m0[21u].z, fma(_1042, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1041));
        float _2041 = fma(_1043, cbModelParam._m0[22u].z, fma(_1042, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1041));
        float _2044 = fma(_1043, cbModelParam._m0[23u].z, fma(_1042, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1041));
        float _2205;
        if (_2038 > 0.0)
        {
            _2205 = abs((1.0 - _2027) / _2038);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2027 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2205 = frontier_phi_28_24_ladder;
        }
        float _2484;
        if (_2041 > 0.0)
        {
            _2484 = abs((1.0 - _2031) / _2041);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2031 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2484 = frontier_phi_40_35_ladder;
        }
        float _2697;
        if (_2044 > 0.0)
        {
            _2697 = abs((1.0 - _2035) / _2044);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2035 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2697 = frontier_phi_49_46_ladder;
        }
        float _2699 = isnan(_2484) ? _2205 : (isnan(_2205) ? _2484 : min(_2205, _2484));
        float _2700 = isnan(_2697) ? _2699 : (isnan(_2699) ? _2697 : min(_2699, _2697));
        float _2704 = (_2700 * _2038) + _2027;
        float _2705 = (_2700 * _2041) + _2031;
        float _2706 = (_2700 * _2044) + _2035;
        float _2707 = _2700 * 9.9999997473787516355514526367188e-05;
        float _2708 = (-1.0) - _2707;
        float _2710 = _2707 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2706 > _2710) || ((_2706 < _2708) || ((_2705 > _2710) || ((_2705 < _2708) || ((_2704 < _2708) || (_2704 > _2710))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2905 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2706, cbModelParam._m0[17u].z, fma(_2705, cbModelParam._m0[17u].y, _2704 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2706, cbModelParam._m0[18u].z, fma(_2705, cbModelParam._m0[18u].y, _2704 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2706, cbModelParam._m0[19u].z, fma(_2705, cbModelParam._m0[19u].y, _2704 * cbModelParam._m0[19u].x))), _1974);
            frontier_phi_25_49_ladder = _2905.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2905.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2905.x * cbModelParam._m0[1u].z;
        }
        _2063 = frontier_phi_25_49_ladder_2;
        _2065 = frontier_phi_25_49_ladder_1;
        _2067 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2047 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1041, _1042, _1043), _1974);
        _2063 = _2047.x * cbModelParam._m0[1u].z;
        _2065 = _2047.y * cbModelParam._m0[1u].z;
        _2067 = _2047.z * cbModelParam._m0[1u].z;
    }
    float _2080 = (((_1068 * _1018) + _1069) * _1033) * ((cbModelParam._m0[1u].w * (_2063 - _1965)) + _1965);
    float _2082 = (((_1068 * _1020) + _1069) * _1033) * ((cbModelParam._m0[1u].w * (_2065 - _1967)) + _1967);
    float _2084 = (((_1068 * _1021) + _1069) * _1033) * ((cbModelParam._m0[1u].w * (_2067 - _1969)) + _1969);
    float _2087 = fma(_2084, cbSceneParam._m0[89u].z, fma(_2082, cbSceneParam._m0[89u].y, _2080 * cbSceneParam._m0[89u].x));
    float _2090 = fma(_2084, cbSceneParam._m0[90u].z, fma(_2082, cbSceneParam._m0[90u].y, _2080 * cbSceneParam._m0[90u].x));
    float _2093 = fma(_2084, cbSceneParam._m0[91u].z, fma(_2082, cbSceneParam._m0[91u].y, _2080 * cbSceneParam._m0[91u].x));
    vec4 _2101 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_955, _956));
    float _2103 = _2101.w;
    float _2115 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2103);
    float _2116 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2103);
    float _2117 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2103);
    uvec4 _2121 = floatBitsToUint(cbInstanceData._m0[_993 + 5u]);
    uint _2123 = _2121.x * 14u;
    uint _2124 = _2123 + 13u;
    float _2131 = _1033 + (-1.0);
    float _2136 = (cbLight._m0[_2124].x * _2131) + 1.0;
    float _2137 = (cbLight._m0[_2124].y * _2131) + 1.0;
    float _2138 = (cbLight._m0[_2124].z * _2131) + 1.0;
    float _2139 = (cbLight._m0[_2124].w * _2131) + 1.0;
    uint _2140 = _2123 + 5u;
    float _2146 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
    uint _2150 = _2123 + 4u;
    float _2159 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
    uint _2163 = _2123 | 1u;
    float _2174 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_855, _856, _857));
    float _2177 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_855, _856, _857));
    float _4397 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _4408 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2182 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * 0.3183098733425140380859375;
    float _2184 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * 0.3183098733425140380859375;
    float _2191 = ((cbLight._m0[_2140].x * _2146) * _2184) + (((cbLight._m0[_2150].x * _2115) * _2159) * _2182);
    float _2192 = ((_2146 * cbLight._m0[_2140].y) * _2184) + (((cbLight._m0[_2150].y * _2116) * _2159) * _2182);
    float _2193 = ((_2146 * cbLight._m0[_2140].z) * _2184) + (((cbLight._m0[_2150].z * _2117) * _2159) * _2182);
    uvec4 _2197 = floatBitsToUint(cbLight._m0[_2123 + 12u]);
    bool _2199 = _2197.x == 0u;
    float _2210;
    float _2212;
    float _2214;
    if (_2199)
    {
        _2210 = _2191;
        _2212 = _2192;
        _2214 = _2193;
    }
    else
    {
        uint _2218 = _2123 + 6u;
        float _2234 = (dot(vec3(cbLight._m0[_2123 + 2u].xyz), vec3(_855, _856, _857)) * 0.5) + 0.5;
        float _2235 = _2234 * _2234;
        float _4419 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2236 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2237 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2210 = (((cbLight._m0[_2218].x * 0.3183098733425140380859375) * _2236) * _2237) + _2191;
        _2212 = (((cbLight._m0[_2218].y * 0.3183098733425140380859375) * _2236) * _2237) + _2192;
        _2214 = (((cbLight._m0[_2218].z * 0.3183098733425140380859375) * _2236) * _2237) + _2193;
    }
    bool _2217 = _2197.y == 0u;
    float _2255;
    float _2257;
    float _2259;
    if (_2217)
    {
        _2255 = _2210;
        _2257 = _2212;
        _2259 = _2214;
    }
    else
    {
        uint _2428 = _2123 + 7u;
        float _2444 = (dot(vec3(cbLight._m0[_2123 + 3u].xyz), vec3(_855, _856, _857)) * 0.5) + 0.5;
        float _2445 = _2444 * _2444;
        float _4435 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2446 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2447 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2255 = (((cbLight._m0[_2428].x * 0.3183098733425140380859375) * _2446) * _2447) + _2210;
        _2257 = (((cbLight._m0[_2428].y * 0.3183098733425140380859375) * _2446) * _2447) + _2212;
        _2259 = (((cbLight._m0[_2428].z * 0.3183098733425140380859375) * _2446) * _2447) + _2214;
    }
    uint _2262 = _2123 + 8u;
    float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _858) * 0.949999988079071044921875);
    float _2276 = _2275 * _2275;
    float _2277 = cbLight._m0[_2123].x + _935;
    float _2278 = cbLight._m0[_2123].y + _936;
    float _2279 = cbLight._m0[_2123].z + _937;
    float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
    float _2284 = _2283 * _2277;
    float _2285 = _2283 * _2278;
    float _2286 = _2283 * _2279;
    float _2287 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2123].xyz));
    float _4451 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _4462 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _2291 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2292 = dot(vec3(_855, _856, _857), vec3(_2284, _2285, _2286));
    float _4473 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2296 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2284, _2285, _2286));
    float _4484 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2300 = _2276 * _2276;
    float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
    float _2312 = exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0);
    float _2313 = 0.959999978542327880859375 - _1015;
    float _2315 = 0.959999978542327880859375 - _1016;
    float _2316 = 0.959999978542327880859375 - _1017;
    float _2323 = 1.0 - _2276;
    float _2334 = (0.5 / (((_2291 * ((_2290 * _2323) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2323) + _2276) * _2290))) * _2290;
    float _4495 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2336 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
    uint _2350 = _2123 + 9u;
    float _2361 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2163].w)) * _858) * 0.949999988079071044921875);
    float _2362 = _2361 * _2361;
    float _2363 = cbLight._m0[_2163].x + _935;
    float _2364 = cbLight._m0[_2163].y + _936;
    float _2365 = cbLight._m0[_2163].z + _937;
    float _2369 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
    float _2370 = _2369 * _2363;
    float _2371 = _2369 * _2364;
    float _2372 = _2369 * _2365;
    float _2373 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2163].xyz));
    float _4506 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2377 = dot(vec3(_855, _856, _857), vec3(_2370, _2371, _2372));
    float _4517 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2381 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_2370, _2371, _2372));
    float _4528 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2385 = _2362 * _2362;
    float _2389 = ((_2380 * _2380) * (_2385 + (-1.0))) + 1.0;
    float _2396 = exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0);
    float _2403 = 1.0 - _2362;
    float _2413 = (0.5 / (((_2291 * ((_2376 * _2403) + _2362)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2403) + _2362) * _2376))) * _2376;
    float _4539 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2415 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2385 / ((_2389 * _2389) * 3.141590118408203125));
    float _2425 = (((((_2396 * _2313) + _1018) * cbLight._m0[_2350].x) * _2415) * _2146) + ((((cbLight._m0[_2262].x * _2115) * ((_2312 * _2313) + _1018)) * _2336) * _2159);
    float _2426 = (((((_2396 * _2315) + _1020) * cbLight._m0[_2350].y) * _2415) * _2146) + ((((cbLight._m0[_2262].y * _2116) * ((_2312 * _2315) + _1020)) * _2336) * _2159);
    float _2427 = (((((_2396 * _2316) + _1021) * cbLight._m0[_2350].z) * _2415) * _2146) + ((((cbLight._m0[_2262].z * _2117) * ((_2312 * _2316) + _1021)) * _2336) * _2159);
    float _2489;
    float _2491;
    float _2493;
    if (_2199)
    {
        _2489 = _2425;
        _2491 = _2426;
        _2493 = _2427;
    }
    else
    {
        uint _2495 = _2123 + 2u;
        uint _2499 = _2123 + 10u;
        float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2495].w)) * _858) * 0.949999988079071044921875);
        float _2514 = _2513 * _2513;
        float _2515 = cbLight._m0[_2495].x + _935;
        float _2516 = cbLight._m0[_2495].y + _936;
        float _2517 = cbLight._m0[_2495].z + _937;
        float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
        float _2522 = _2521 * _2515;
        float _2523 = _2521 * _2516;
        float _2524 = _2521 * _2517;
        float _2525 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2495].xyz));
        float _4550 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2528 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2529 = dot(vec3(_855, _856, _857), vec3(_2522, _2523, _2524));
        float _4561 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2533 = dot(vec3(cbLight._m0[_2495].xyz), vec3(_2522, _2523, _2524));
        float _4572 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2537 = _2514 * _2514;
        float _2541 = ((_2532 * _2532) * (_2537 + (-1.0))) + 1.0;
        float _2548 = exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0);
        float _2555 = 1.0 - _2514;
        float _2565 = (0.5 / (((_2291 * ((_2528 * _2555) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2555) + _2514) * _2528))) * _2528;
        float _4583 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2567 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2537 / ((_2541 * _2541) * 3.141590118408203125));
        float _2568 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2489 = (((((_2548 * _2313) + _1018) * cbLight._m0[_2499].x) * _2567) * _2568) + _2425;
        _2491 = (((((_2548 * _2315) + _1020) * cbLight._m0[_2499].y) * _2567) * _2568) + _2426;
        _2493 = (((((_2548 * _2316) + _1021) * cbLight._m0[_2499].z) * _2567) * _2568) + _2427;
    }
    float _2603;
    float _2605;
    float _2607;
    if (_2217)
    {
        _2603 = _2489;
        _2605 = _2491;
        _2607 = _2493;
    }
    else
    {
        uint _2614 = _2123 + 3u;
        uint _2618 = _2123 + 11u;
        float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2614].w)) * _858) * 0.949999988079071044921875);
        float _2633 = _2632 * _2632;
        float _2634 = cbLight._m0[_2614].x + _935;
        float _2635 = cbLight._m0[_2614].y + _936;
        float _2636 = cbLight._m0[_2614].z + _937;
        float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
        float _2641 = _2640 * _2634;
        float _2642 = _2640 * _2635;
        float _2643 = _2640 * _2636;
        float _2644 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2614].xyz));
        float _4599 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2648 = dot(vec3(_855, _856, _857), vec3(_2641, _2642, _2643));
        float _4610 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2652 = dot(vec3(cbLight._m0[_2614].xyz), vec3(_2641, _2642, _2643));
        float _4621 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2656 = _2633 * _2633;
        float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
        float _2667 = exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0);
        float _2674 = 1.0 - _2633;
        float _2684 = (0.5 / (((_2291 * ((_2647 * _2674) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2674) + _2633) * _2647))) * _2647;
        float _4632 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2686 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
        float _2687 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2603 = (((((_2667 * _2313) + _1018) * cbLight._m0[_2618].x) * _2686) * _2687) + _2489;
        _2605 = (((((_2667 * _2315) + _1020) * cbLight._m0[_2618].y) * _2686) * _2687) + _2491;
        _2607 = (((((_2667 * _2316) + _1021) * cbLight._m0[_2618].z) * _2686) * _2687) + _2493;
    }
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    if (_2121.y == 0u)
    {
        float _2762 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2762;
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2762;
        float _2765 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2762;
        uvec4 _2777 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2778 = _2777.x;
        uint _2789 = uint((float(_2777.y) * floor(float(uint(cbSceneParam._m0[85u].y * _956) / _2778))) + floor(float(uint(cbSceneParam._m0[85u].x * _955) / _2778)));
        float _2799 = (log2(_2765 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2800 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        uint _2803 = uint(isnan(14.0) ? _2800 : (isnan(_2800) ? 14.0 : min(_2800, 14.0)));
        uvec4 _2808 = texelFetch(g_lightClusterGridBuffer, int(((_2803 << 2u) + (_2789 << 6u)) >> 2u));
        uint _2809 = _2808.x;
        uint _2810 = _2777.z;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        if (((((1u << ((_2810 >> 4u) & 15u)) + 4294967295u) & _2809) == 0u) || ((_2810 & 240u) == 0u))
        {
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
        }
        else
        {
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            uint _3069 = 0u;
            uint _3078;
            bool _3079;
            for (;;)
            {
                _3078 = texelFetch(g_lightClassification, int((((_2803 << 5u) + (_2789 << 9u)) + (_3069 << 2u)) >> 2u)).x;
                _3079 = _3078 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3079)
                {
                    frontier_phi_66_pred = _3063;
                    frontier_phi_66_pred_1 = _3068;
                    frontier_phi_66_pred_2 = _3067;
                    frontier_phi_66_pred_3 = _3066;
                    frontier_phi_66_pred_4 = _3065;
                    frontier_phi_66_pred_5 = _3064;
                }
                else
                {
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    uint _3214;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3068;
                    _3214 = _3078;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    for (;;)
                    {
                        uint _3218 = uint(findLSB(_3214)) + (_3069 << 5u);
                        uint _3215 = (_3214 + 4294967295u) & _3214;
                        uint _3220 = _3218 * 48u;
                        vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 3u)).x));
                        uint _3240 = (_3218 * 48u) + 4u;
                        vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 3u)).x));
                        uint _3259 = (_3218 * 48u) + 8u;
                        vec3 _3270 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x));
                        float _3274 = _3234.x - _2763;
                        float _3275 = _3234.y - _2764;
                        float _3276 = _3234.z - _2765;
                        float _3277 = dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276));
                        float _3280 = inversesqrt(_3277);
                        float _3281 = _3280 * _3274;
                        float _3282 = _3280 * _3275;
                        float _3283 = _3280 * _3276;
                        float _3284 = dot(vec3(_974, _977, _980), vec3(_3281, _3282, _3283));
                        float _3289 = 1.0 - (_3277 * _3234.w);
                        float _4658 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3290 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3291 = sqrt(_3277) * _3253.w;
                        float _3294 = 1.39999997615814208984375 / (_3291 + 1.39999997615814208984375);
                        float _3295 = _3294 * _3294;
                        float _3298 = ((1.0 - _3295) * _3284) + _3295;
                        float _3301 = _3291 * _3291;
                        float _3305 = ((isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))) * _3290) / ((_3301 * 0.699999988079071044921875) + 1.0);
                        float _3309 = (-0.0) - _2763;
                        float _3310 = (-0.0) - _2764;
                        float _3311 = (-0.0) - _2765;
                        float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                        float _3316 = _3315 * _3309;
                        float _3317 = _3315 * _3310;
                        float _3318 = _3315 * _3311;
                        float _3326 = exp2(log2(1.0 / ((_3301 * 3.5) + 5.0)) * 0.25);
                        float _3327 = 1.0 - _1049;
                        float _3334 = sqrt(1.0 - ((1.0 - (_3327 * _3327)) * (1.0 - (_3326 * _3326))));
                        float _3335 = _3334 * _3334;
                        float _3336 = _3335 * _3335;
                        float _3337 = _3316 + _3281;
                        float _3338 = _3317 + _3282;
                        float _3339 = _3318 + _3283;
                        float _3343 = inversesqrt(dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339)));
                        float _3347 = dot(vec3(_974, _977, _980), vec3(_3316, _3317, _3318));
                        float _4674 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3350 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3351 = dot(vec3(_974, _977, _980), vec3(_3343 * _3337, _3343 * _3338, _3343 * _3339));
                        float _4685 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3354 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3358 = ((_3354 * _3354) * (_3336 + (-1.0))) + 1.0;
                        float _3359 = _3294 * _3335;
                        float _3360 = _3359 * _3359;
                        float _3363 = ((1.0 - _3360) * _3284) + _3360;
                        float _4696 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3364 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                        float _3365 = 1.0 - _3335;
                        float _3375 = (0.5 / (((_3364 * ((_3350 * _3365) + _3335)) + 9.9999999392252902907785028219223e-09) + (((_3364 * _3365) + _3335) * _3350))) * _3364;
                        float _4707 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3386 = (((_3336 * 3.1415927410125732421875) * (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) / ((_3358 * _3358) * ((_3301 * 2.1991131305694580078125) + 3.141590118408203125))) * _3290;
                        _3138 = (_3305 * _3253.x) + _3211;
                        _3139 = (_3305 * _3253.y) + _3212;
                        _3140 = (_3305 * _3253.z) + _3213;
                        _3135 = (_3386 * _3270.x) + _3208;
                        _3136 = (_3386 * _3270.y) + _3209;
                        _3137 = (_3386 * _3270.z) + _3210;
                        if (_3215 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3140;
                            _3214 = _3215;
                        }
                    }
                    frontier_phi_66_pred = _3135;
                    frontier_phi_66_pred_1 = _3140;
                    frontier_phi_66_pred_2 = _3139;
                    frontier_phi_66_pred_3 = _3138;
                    frontier_phi_66_pred_4 = _3137;
                    frontier_phi_66_pred_5 = _3136;
                }
                _2911 = frontier_phi_66_pred;
                _2921 = frontier_phi_66_pred_1;
                _2919 = frontier_phi_66_pred_2;
                _2917 = frontier_phi_66_pred_3;
                _2915 = frontier_phi_66_pred_4;
                _2913 = frontier_phi_66_pred_5;
                uint _3070 = _3069 + 1u;
                if (_3070 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3063 = _2911;
                    _3064 = _2913;
                    _3065 = _2915;
                    _3066 = _2917;
                    _3067 = _2919;
                    _3068 = _2921;
                    _3069 = _3070;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
        }
        uvec4 _2924 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2925 = _2924.z;
        uint _2927 = (_2925 >> 8u) & 15u;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        if (((4294967295u << _2927) & _2809) == 0u)
        {
            _3031 = _2910;
            _3033 = _2912;
            _3035 = _2914;
            _3037 = _2916;
            _3039 = _2918;
            _3041 = _2920;
        }
        else
        {
            float _3056 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
            float _3057 = _3056 * _2763;
            float _3058 = _3056 * _2764;
            float _3059 = _3056 * _2765;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2927 < ((_2925 >> 12u) & 15u))
            {
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3191 = _2910;
                float _3192 = _2912;
                float _3193 = _2914;
                float _3194 = _2916;
                float _3195 = _2918;
                float _3196 = _2920;
                uint _3197 = _2927;
                uint _3206;
                bool _3207;
                for (;;)
                {
                    _3206 = texelFetch(g_lightClassification, int((((_2803 << 5u) + (_2789 << 9u)) + (_3197 << 2u)) >> 2u)).x;
                    _3207 = _3206 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3207)
                    {
                        frontier_phi_77_pred = _3196;
                        frontier_phi_77_pred_1 = _3195;
                        frontier_phi_77_pred_2 = _3194;
                        frontier_phi_77_pred_3 = _3193;
                        frontier_phi_77_pred_4 = _3192;
                        frontier_phi_77_pred_5 = _3191;
                    }
                    else
                    {
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3413 = _3191;
                        float _3414 = _3192;
                        float _3415 = _3193;
                        float _3416 = _3194;
                        float _3417 = _3195;
                        float _3418 = _3196;
                        uint _3419 = _3206;
                        uint _3420;
                        vec4 _3445;
                        float _3446;
                        vec4 _3461;
                        vec3 _3473;
                        vec4 _3488;
                        vec4 _3503;
                        float _3550;
                        bool _3551;
                        for (;;)
                        {
                            uint _3430 = ((_3197 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3419));
                            _3420 = (_3419 + 4294967295u) & _3419;
                            uint _3432 = _3430 * 40u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            _3446 = _3445.w;
                            uint _3448 = (_3430 * 40u) + 4u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3463 = (_3430 * 40u) + 8u;
                            _3473 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x));
                            uint _3475 = (_3430 * 40u) + 16u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3490 = (_3430 * 40u) + 20u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3506 = (_3430 * 40u) + 24u;
                            vec4 _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3525 = (_3430 * 40u) + 28u;
                            vec4 _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            _3550 = fma(_2765, _3538.z, fma(_2764, _3538.y, _3538.x * _2763)) + _3538.w;
                            _3551 = !((fma(_2765, _3519.z, fma(_2764, _3519.y, _3519.x * _2763)) + _3519.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3551)
                            {
                                float _3578 = _3445.x - _2763;
                                float _3579 = _3445.y - _2764;
                                float _3580 = _3445.z - _2765;
                                float _3581 = dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580));
                                float _3584 = inversesqrt(_3581);
                                float _3585 = _3584 * _3578;
                                float _3586 = _3584 * _3579;
                                float _3587 = _3584 * _3580;
                                float _3591 = 1.0 - (_3581 / (_3446 * _3446));
                                float _4718 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3596 = sqrt(_3581) * _3461.w;
                                float _3598 = 1.39999997615814208984375 / (_3596 + 1.39999997615814208984375);
                                float _3599 = _3598 * _3598;
                                float _3602 = ((1.0 - _3599) * dot(vec3(_3585, _3586, _3587), vec3(_974, _977, _980))) + _3599;
                                float _3605 = _3596 * _3596;
                                float _3609 = (fma(_2765, _3488.z, fma(_2764, _3488.y, _3488.x * _2763)) + _3488.w) / _3550;
                                float _3610 = (fma(_2765, _3503.z, fma(_2764, _3503.y, _3503.x * _2763)) + _3503.w) / _3550;
                                float _3614 = 1.0 - dot(vec2(_3609, _3610), vec2(_3609, _3610));
                                float _4734 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3615 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3616 = _3615 * (((isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0))) * _3592) / ((_3605 * 0.699999988079071044921875) + 1.0));
                                float _3628 = exp2(log2(1.0 / ((_3605 * 3.5) + 5.0)) * 0.25);
                                float _3629 = 1.0 - _1049;
                                float _3636 = sqrt(1.0 - ((1.0 - (_3629 * _3629)) * (1.0 - (_3628 * _3628))));
                                float _3637 = _3636 * _3636;
                                float _3638 = _3637 * _3637;
                                float _3639 = _3585 - _3057;
                                float _3640 = _3586 - _3058;
                                float _3641 = _3587 - _3059;
                                float _3645 = inversesqrt(dot(vec3(_3639, _3640, _3641), vec3(_3639, _3640, _3641)));
                                float _3649 = dot(vec3(_974, _977, _980), vec3((-0.0) - _3057, (-0.0) - _3058, (-0.0) - _3059));
                                float _4745 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3652 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3653 = dot(vec3(_974, _977, _980), vec3(_3645 * _3639, _3645 * _3640, _3645 * _3641));
                                float _4756 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3656 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3660 = ((_3656 * _3656) * (_3638 + (-1.0))) + 1.0;
                                float _3661 = _3598 * _3637;
                                float _3662 = _3661 * _3661;
                                float _3668 = ((1.0 - _3662) * dot(vec3(_974, _977, _980), vec3(_3585, _3586, _3587))) + _3662;
                                float _4767 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                                float _3670 = 1.0 - _3637;
                                float _3680 = (0.5 / (((_3669 * ((_3652 * _3670) + _3637)) + 9.9999999392252902907785028219223e-09) + (((_3669 * _3670) + _3637) * _3652))) * _3669;
                                float _4778 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3690 = (_3615 * _3592) * (((_3638 * 3.1415927410125732421875) * (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) / ((_3660 * _3660) * ((_3605 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3616 * _3461.y;
                                frontier_phi_83_pred_1 = _3616 * _3461.x;
                                frontier_phi_83_pred_2 = _3690 * _3473.z;
                                frontier_phi_83_pred_3 = _3690 * _3473.y;
                                frontier_phi_83_pred_4 = _3690 * _3473.x;
                                frontier_phi_83_pred_5 = _3616 * _3461.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3698 = frontier_phi_83_pred;
                            _3697 = frontier_phi_83_pred_1;
                            _3696 = frontier_phi_83_pred_2;
                            _3695 = frontier_phi_83_pred_3;
                            _3694 = frontier_phi_83_pred_4;
                            _3699 = frontier_phi_83_pred_5;
                            _3403 = _3697 + _3416;
                            _3404 = _3698 + _3417;
                            _3405 = _3699 + _3418;
                            _3400 = _3694 + _3413;
                            _3401 = _3695 + _3414;
                            _3402 = _3696 + _3415;
                            if (_3420 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3420;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3405;
                        frontier_phi_77_pred_1 = _3404;
                        frontier_phi_77_pred_2 = _3403;
                        frontier_phi_77_pred_3 = _3402;
                        frontier_phi_77_pred_4 = _3401;
                        frontier_phi_77_pred_5 = _3400;
                    }
                    _3042 = frontier_phi_77_pred;
                    _3040 = frontier_phi_77_pred_1;
                    _3038 = frontier_phi_77_pred_2;
                    _3036 = frontier_phi_77_pred_3;
                    _3034 = frontier_phi_77_pred_4;
                    _3032 = frontier_phi_77_pred_5;
                    uint _3198 = _3197 + 1u;
                    if (_3198 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3191 = _3032;
                        _3192 = _3034;
                        _3193 = _3036;
                        _3194 = _3038;
                        _3195 = _3040;
                        _3196 = _3042;
                        _3197 = _3198;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3036;
                frontier_phi_58_59_ladder_1 = _3042;
                frontier_phi_58_59_ladder_2 = _3040;
                frontier_phi_58_59_ladder_3 = _3038;
                frontier_phi_58_59_ladder_4 = _3034;
                frontier_phi_58_59_ladder_5 = _3032;
            }
            else
            {
                frontier_phi_58_59_ladder = _2914;
                frontier_phi_58_59_ladder_1 = _2920;
                frontier_phi_58_59_ladder_2 = _2918;
                frontier_phi_58_59_ladder_3 = _2916;
                frontier_phi_58_59_ladder_4 = _2912;
                frontier_phi_58_59_ladder_5 = _2910;
            }
            _3031 = frontier_phi_58_59_ladder_5;
            _3033 = frontier_phi_58_59_ladder_4;
            _3035 = frontier_phi_58_59_ladder;
            _3037 = frontier_phi_58_59_ladder_3;
            _3039 = frontier_phi_58_59_ladder_2;
            _3041 = frontier_phi_58_59_ladder_1;
        }
        float _3046 = isnan(1.0) ? _1033 : (isnan(_1033) ? 1.0 : min(_1033, 1.0));
        _2822 = (_3046 * _3037) + _2255;
        _2824 = (_3046 * _3039) + _2257;
        _2826 = (_3046 * _3041) + _2259;
        _2828 = ((_3031 * _1018) * _3046) + _2603;
        _2830 = ((_3033 * _1020) * _3046) + _2605;
        _2832 = ((_3035 * _1021) * _3046) + _2607;
    }
    else
    {
        _2822 = _2255;
        _2824 = _2257;
        _2826 = _2259;
        _2828 = _2603;
        _2830 = _2605;
        _2832 = _2607;
    }
    float _4794 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _4805 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _4816 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _2849 = ((isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2822 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1033))) + ((_2828 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1874)) * cbPerFrame._m0[3u].x);
    float _2850 = ((isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2824 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1033))) + ((_2830 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1874)) * cbPerFrame._m0[3u].x);
    float _2851 = ((isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2826 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1033))) + ((_2832 + ((isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0))) * _1874)) * cbPerFrame._m0[3u].x);
    uint _2852 = _993 + 6u;
    float _2860 = _955 / cbSceneParam._m0[86u].x;
    float _2861 = _956 / cbSceneParam._m0[86u].y;
    vec4 _2875 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2860, _2861, (log2((isnan(cbSceneParam._m0[77u].w) ? _878 : (isnan(_878) ? cbSceneParam._m0[77u].w : min(_878, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2877 = _2875.x;
    float _2878 = _2875.y;
    float _2879 = _2875.z;
    float _2880 = _2875.w;
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    if (_878 > cbSceneParam._m0[78u].w)
    {
        float _2935 = isnan(_878) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _878 : min(cbSceneParam._m0[80u].w, _878));
        float _2936 = _2935 / _878;
        float _2947 = _2936 * _928;
        float _2948 = _929 * _2936;
        float _2949 = (-0.0) - _2948;
        float _2951 = _2936 * _930;
        float _2953 = (cbSceneParam._m0[77u].w * _2949) / _2935;
        float _2954 = _2953 + cbSceneParam._m0[79u].w;
        float _2955 = cbSceneParam._m0[79u].w - _2948;
        float _2961 = sqrt(((_2947 * _2947) + (_2948 * _2948)) + (_2951 * _2951));
        float _2964 = (1.0 - (cbSceneParam._m0[77u].w / _2935)) * _2961;
        float _2969 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2971 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3148;
        if (abs((_2949 - _2953) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3148 = ((((_2954 > 0.0) ? exp2(_2969 * _2954) : (2.0 - exp2(_2971 * _2954))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2964;
        }
        else
        {
            float _3092 = 1.0 / cbSceneParam._m0[80u].x;
            float _3093 = isnan(_2955) ? _2954 : (isnan(_2954) ? _2955 : max(_2954, _2955));
            float _3094 = isnan(_2955) ? _2954 : (isnan(_2954) ? _2955 : min(_2954, _2955));
            float _3103 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : min(_3093, 0.0));
            float _3104 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : min(_3094, 0.0));
            _3148 = ((abs(_2961 / _2949) * cbSceneParam._m0[80u].y) * ((((_3103 - _3104) * 2.0) - ((exp2(_2969 * (isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0)))) - exp2(_2969 * (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))))) * _3092)) - ((exp2(_2971 * _3103) - exp2(_2971 * _3104)) * _3092))) + (_2964 * cbSceneParam._m0[80u].z);
        }
        vec4 _3150 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2860, _2861, 1.0), 0.0);
        float _3159 = exp2((_3148 * (-1.44269502162933349609375)) * (1.0 - _3150.w));
        float _3160 = log2(_3159);
        float _3176 = log2(_2880);
        _2973 = (exp2(_3176 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].x)) * _3150.x) / cbSceneParam._m0[78u].x)) + _2877;
        _2975 = (exp2(_3176 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].y)) * _3150.y) / cbSceneParam._m0[78u].y)) + _2878;
        _2977 = (exp2(_3176 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].z)) * _3150.z) / cbSceneParam._m0[78u].z)) + _2879;
        _2979 = _3159 * _2880;
    }
    else
    {
        _2973 = _2877;
        _2975 = _2878;
        _2977 = _2879;
        _2979 = _2880;
    }
    bool _3186;
    vec4 _2989;
    vec4 _3011;
    float _3013;
    float _3017;
    float _3018;
    float _3019;
    float _3020;
    bool _3030;
    for (;;)
    {
        _2989 = cbMatDynParam._m0[0u];
        float _2991 = roundEven(_2989.y);
        bool _2992 = _2991 == 3.0;
        float _2993 = log2(_2979);
        float _3000 = exp2(_2993 * cbSceneParam._m0[78u].x) * _2849;
        float _3001 = exp2(_2993 * cbSceneParam._m0[78u].y) * _2850;
        float _3002 = exp2(_2993 * cbSceneParam._m0[78u].z) * _2851;
        float _3009 = _944 + (-0.5);
        _3011 = cbMtdParam._m0[1u];
        _3013 = _3011.y * _3009;
        float _3016 = (_2991 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3017 = _3016 * (_2992 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2973)));
        _3018 = _3016 * (_2992 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2975)));
        _3019 = _3016 * (_2992 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2977)));
        _3020 = _3009 * 0.999000012874603271484375;
        _3030 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3030)
        {
            if ((cbInstanceData._m0[_993 + 7u].x + _3020) < 0.5)
            {
                _3186 = true;
                break;
            }
        }
        uint _3127 = _994 + uint(_2989.w);
        if ((cbInstanceData._m0[_3127].w < 1.0) && ((cbInstanceData._m0[_3127].w + _3020) < 0.5))
        {
            _3186 = true;
            break;
        }
        if ((_3013 + 1.0) < _3011.x)
        {
            _3186 = true;
            break;
        }
        _3186 = false;
        break;
    }
    float _3391;
    if (_3186)
    {
        discard_state = true;
        _3391 = 0.0;
    }
    else
    {
        _3391 = cbInstanceData._m0[_2852].w;
    }
    SV_Target.x = _3017;
    SV_Target.y = _3018;
    SV_Target.z = _3019;
    SV_Target.w = _3391;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2852].w;
    discard_exit();
}


