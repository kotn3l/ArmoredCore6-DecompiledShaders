#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1449;
float _4114;
float _4115;
float _4116;
float _4117;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _274 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _274.x * cbMtdParam._m0[10u].x;
    float _281 = _274.y * cbMtdParam._m0[10u].y;
    float _282 = _274.z * cbMtdParam._m0[10u].z;
    vec4 _300 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _350 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _360 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _350)) + 1.0;
    float _4126 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _361 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _368 = (_361 * ((_300.x * cbMtdParam._m0[11u].x) - _280)) + _280;
    float _369 = (_361 * ((_300.y * cbMtdParam._m0[11u].y) - _281)) + _281;
    float _370 = (_361 * ((_300.z * cbMtdParam._m0[11u].z) - _282)) + _282;
    vec4 _388 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _419 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _350)) + 1.0;
    float _4137 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _427 = (_420 * ((_388.x * cbMtdParam._m0[12u].x) - _368)) + _368;
    float _428 = (_420 * ((_388.y * cbMtdParam._m0[12u].y) - _369)) + _369;
    float _429 = (_420 * ((_388.z * cbMtdParam._m0[12u].z) - _370)) + _370;
    vec4 _447 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _472 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _350)) + 1.0;
    float _4148 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _480 = (_473 * ((_447.x * cbMtdParam._m0[13u].x) - _427)) + _427;
    float _481 = (_473 * ((_447.y * cbMtdParam._m0[13u].y) - _428)) + _428;
    float _482 = (_473 * ((_447.z * cbMtdParam._m0[13u].z) - _429)) + _429;
    vec4 _502 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _531 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _4159 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _539 = (_532 * ((_502.x * cbMtdParam._m0[14u].x) - _480)) + _480;
    float _540 = (_532 * ((_502.y * cbMtdParam._m0[14u].y) - _481)) + _481;
    float _541 = (_532 * ((_502.z * cbMtdParam._m0[14u].z) - _482)) + _482;
    vec4 _561 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _589 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _4170 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _597 = (_590 * ((_561.x * cbMtdParam._m0[15u].x) - _539)) + _539;
    float _598 = (_590 * ((_561.y * cbMtdParam._m0[15u].y) - _540)) + _540;
    float _599 = (_590 * ((_561.z * cbMtdParam._m0[15u].z) - _541)) + _541;
    vec4 _612 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _614 = _612.x;
    float _632 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _614) * _361) + _614;
    float _650 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _632) * _420) + _632;
    float _667 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _650) * _473) + _650;
    float _669 = _667 - (_667 * TEXCOORD_5.x);
    vec4 _685 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _707 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _709 = _707.x;
    float _710 = _707.y;
    float _713 = cbMtdParam._m0[18u].y * _707.z;
    vec4 _725 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _734 = (((cbMtdParam._m0[18u].x * _725.z) - _713) * _361) + _713;
    vec4 _747 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _758 = (((cbMtdParam._m0[17u].w * _747.z) - _734) * _420) + _734;
    vec4 _771 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _780 = (((cbMtdParam._m0[17u].z * _771.z) - _758) * _473) + _758;
    float _785 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_685.z * cbMtdParam._m0[18u].z) - _780)) + _780;
    vec4 _798 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _812 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_798.z * cbMtdParam._m0[19u].y) - _785)) + _785;
    float _817 = ((_725.x - _709) * _361) + _709;
    float _818 = ((_725.y - _710) * _361) + _710;
    float _823 = ((_747.x - _817) * _420) + _817;
    float _824 = ((_747.y - _818) * _420) + _818;
    float _833 = ((((_771.x - _823) * _473) + _823) * 2.0) + (-1.0);
    float _834 = ((((_771.y - _824) * _473) + _824) * 2.0) + (-1.0);
    float _835 = dot(vec2(_833, _834), vec2(_833, _834));
    float _4181 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _840 = sqrt(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))));
    float _853 = (((((_685.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _833) + ((((_798.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _854 = (((((_685.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _834) + ((((_798.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _857 = fma(_840, _244 * NORMAL.x, fma(_854, _251 * TANGENT.x, (_237 * _229) * _853));
    float _860 = fma(_840, _244 * NORMAL.y, fma(_854, _251 * TANGENT.y, (_237 * _230) * _853));
    float _863 = fma(_840, _244 * NORMAL.z, fma(_854, _251 * TANGENT.z, (_237 * _231) * _853));
    float _867 = inversesqrt(dot(vec3(_857, _860, _863), vec3(_857, _860, _863)));
    float _868 = _867 * _857;
    float _869 = _867 * _860;
    float _870 = _867 * _863;
    float _4192 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _871 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _4203 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4214 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4225 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4236 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _875 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _891 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _941 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _931);
    float _942 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _931);
    float _943 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _931);
    float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
    float _948 = _941 * _947;
    float _949 = _942 * _947;
    float _950 = _943 * _947;
    vec4 _955 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _957 = _955.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1129 = sqrt(((_941 * _941) + (_942 * _942)) + (_943 * _943));
        float _1135 = (cbMatDynParam._m0[5u].x * _1129) + cbMatDynParam._m0[5u].y;
        float _4247 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1140 = (cbMatDynParam._m0[5u].z * _1129) + cbMatDynParam._m0[5u].w;
        float _4258 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) - _1136)) + _1136) < ((_957 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _968 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _969 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _987 = fma(_870, cbSceneParam._m0[5u].z, fma(_869, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _868));
    float _990 = fma(_870, cbSceneParam._m0[6u].z, fma(_869, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _868));
    float _993 = fma(_870, cbSceneParam._m0[7u].z, fma(_869, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _868));
    uint _1006 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1007 = _1006 + 9u;
    uint _1008 = _1007 + uint(cbMatDynParam._m0[0u].w);
    float _1014 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * cbInstanceData._m0[_1008].x;
    float _1015 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * cbInstanceData._m0[_1008].y;
    float _1016 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * cbInstanceData._m0[_1008].z;
    float _4269 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _4280 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1018 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _4291 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1019 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _1020 = 1.0 - _875;
    float _1021 = _1017 * _1020;
    float _1022 = _1018 * _1020;
    float _1023 = _1019 * _1020;
    float _1028 = (_1017 + (-0.039999999105930328369140625)) * _875;
    float _1029 = (_1018 + (-0.039999999105930328369140625)) * _875;
    float _1030 = (_1019 + (-0.039999999105930328369140625)) * _875;
    float _1031 = _1028 + 0.039999999105930328369140625;
    float _1033 = _1029 + 0.039999999105930328369140625;
    float _1034 = _1030 + 0.039999999105930328369140625;
    vec4 _1043 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _968, cbSceneParam._m0[86u].y * _969));
    float _1046 = _1043.x * TEXCOORD_5.w;
    float _1047 = dot(vec3(_868, _869, _870), vec3(_948, _949, _950));
    float _1050 = _1047 * 2.0;
    float _1054 = (_1050 * _868) - _948;
    float _1055 = (_1050 * _869) - _949;
    float _1056 = (_1050 * _870) - _950;
    float _1060 = abs(dot(vec3(_948, _949, _950), vec3(_868, _869, _870)));
    float _4302 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1062 = sqrt(_871);
    float _1075 = exp2((_1062 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1062 * 3.0));
    float _1081 = (1.0 - _1075) * ((_1062 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1082 = _1075 * _1062;
    float _1110 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1114 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1118 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1448;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1173 = fma(_1118, cbModelParam._m0[26u].z, fma(_1114, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1110));
        float _1177 = fma(_1118, cbModelParam._m0[27u].z, fma(_1114, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1110));
        float _1181 = fma(_1118, cbModelParam._m0[28u].z, fma(_1114, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1110));
        float _1206 = _1110 + _868;
        float _1207 = _1114 + _869;
        float _1208 = _1118 + _870;
        float _1218 = fma(_1208, cbModelParam._m0[26u].z, fma(_1207, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1206)) - _1173;
        float _1219 = fma(_1208, cbModelParam._m0[27u].z, fma(_1207, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1206)) - _1177;
        float _1220 = fma(_1208, cbModelParam._m0[28u].z, fma(_1207, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1206)) - _1181;
        float _1224 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
        float _1237 = ((_1224 * _1218) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1173 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1224 * _1219) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1177 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1224 * _1220) / cbModelParam._m0[34u].z) + ((((((_1181 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        float _1276 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1242.x + (-0.5));
        float _1278 = _1276 * (_1242.y + (-0.5));
        float _1279 = _1276 * (_1242.z + (-0.5));
        float _1286 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1249.x + (-0.5));
        float _1288 = _1286 * (_1249.y + (-0.5));
        float _1289 = _1286 * (_1249.z + (-0.5));
        float _1296 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1256.x + (-0.5));
        float _1298 = _1296 * (_1256.y + (-0.5));
        float _1299 = _1296 * (_1256.z + (-0.5));
        float _1306 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1263.x + (-0.5));
        float _1308 = _1306 * (_1263.y + (-0.5));
        float _1309 = _1306 * (_1263.z + (-0.5));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = _1277 * 0.5;
        float _1314 = _1287 * 0.5;
        float _1315 = _1297 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1330 = (dot(vec3(_868, _869, _870), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4328 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1340 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4339 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4350 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_1342 + 1.0))) + _1347) * _1310;
        float _1357 = _1278 * 0.5;
        float _1358 = _1288 * 0.5;
        float _1359 = _1298 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_868, _869, _870), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4383 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1384 + 1.0))) + _1389) * _1311;
        float _1399 = _1279 * 0.5;
        float _1400 = _1289 * 0.5;
        float _1401 = _1299 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_868, _869, _870), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4416 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1426 + 1.0))) + _1431) * _1312;
        _1448 = _1279;
        _1450 = _1278;
        _1451 = _1277;
        _1452 = _1289;
        _1453 = _1288;
        _1454 = _1287;
        _1455 = _1299;
        _1456 = _1298;
        _1457 = _1297;
        _1458 = _1312;
        _1459 = _1311;
        _1460 = _1310;
        _1461 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
    }
    else
    {
        _1448 = _1449;
        _1450 = _1449;
        _1451 = _1449;
        _1452 = _1449;
        _1453 = _1449;
        _1454 = _1449;
        _1455 = _1449;
        _1456 = _1449;
        _1457 = _1449;
        _1458 = _1449;
        _1459 = _1449;
        _1460 = _1449;
        _1461 = 0.0;
        _1462 = 0.0;
        _1463 = 0.0;
    }
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1492 = fma(_1118, cbModelParam._m0[30u].z, fma(_1114, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1110));
        float _1496 = fma(_1118, cbModelParam._m0[31u].z, fma(_1114, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1110));
        float _1500 = fma(_1118, cbModelParam._m0[32u].z, fma(_1114, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1110));
        float _1523 = _1110 + _868;
        float _1524 = _1114 + _869;
        float _1525 = _1118 + _870;
        float _1535 = fma(_1525, cbModelParam._m0[30u].z, fma(_1524, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1523)) - _1492;
        float _1536 = fma(_1525, cbModelParam._m0[31u].z, fma(_1524, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1523)) - _1496;
        float _1537 = fma(_1525, cbModelParam._m0[32u].z, fma(_1524, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1523)) - _1500;
        float _1541 = inversesqrt(dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537)));
        float _1554 = ((_1541 * _1535) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1492 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1555 = ((_1541 * _1536) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1496 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1556 = ((_1541 * _1537) / cbModelParam._m0[35u].z) + ((((((_1500 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        float _1591 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1558.x + (-0.5));
        float _1593 = _1591 * (_1558.y + (-0.5));
        float _1594 = _1591 * (_1558.z + (-0.5));
        float _1601 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1565.x + (-0.5));
        float _1603 = _1601 * (_1565.y + (-0.5));
        float _1604 = _1601 * (_1565.z + (-0.5));
        float _1611 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1572.x + (-0.5));
        float _1613 = _1611 * (_1572.y + (-0.5));
        float _1614 = _1611 * (_1572.z + (-0.5));
        float _1621 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1579.x + (-0.5));
        float _1623 = _1621 * (_1579.y + (-0.5));
        float _1624 = _1621 * (_1579.z + (-0.5));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = _1592 * 0.5;
        float _1629 = _1602 * 0.5;
        float _1630 = _1612 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_868, _869, _870), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4457 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4468 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4479 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_1655 + 1.0))) + _1660) * _1625;
        float _1670 = _1593 * 0.5;
        float _1671 = _1603 * 0.5;
        float _1672 = _1613 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_868, _869, _870), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4490 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4501 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4512 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_1697 + 1.0))) + _1702) * _1626;
        float _1712 = _1594 * 0.5;
        float _1713 = _1604 * 0.5;
        float _1714 = _1614 * 0.5;
        float _1715 = dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714));
        float _1720 = (_1715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1715);
        float _1728 = (dot(vec3(_868, _869, _870), vec3(_1720 * _1712, _1720 * _1713, _1720 * _1714)) + 1.0) * 0.5;
        float _4523 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1737 = sqrt(((_1713 * _1713) + (_1712 * _1712)) + (_1714 * _1714)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4534 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1739 = _1738 * 2.0;
        float _1743 = (1.0 - _1738) / (_1738 + 1.0);
        float _4545 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _1753 = ((((1.0 - _1744) * (_1739 + 2.0)) * exp2(log2(isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_1739 + 1.0))) + _1744) * _1627;
        _1761 = _1594;
        _1762 = _1593;
        _1763 = _1592;
        _1764 = _1604;
        _1765 = _1603;
        _1766 = _1602;
        _1767 = _1614;
        _1768 = _1613;
        _1769 = _1612;
        _1770 = _1627;
        _1771 = _1626;
        _1772 = _1625;
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)));
    }
    else
    {
        _1761 = _1449;
        _1762 = _1449;
        _1763 = _1449;
        _1764 = _1449;
        _1765 = _1449;
        _1766 = _1449;
        _1767 = _1449;
        _1768 = _1449;
        _1769 = _1449;
        _1770 = _1449;
        _1771 = _1449;
        _1772 = _1449;
        _1773 = 0.0;
        _1774 = 0.0;
        _1775 = 0.0;
    }
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1461)) + _1461;
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1462)) + _1462;
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1463)) + _1463;
    float _1808 = fma(_1787, cbSceneParam._m0[89u].z, fma(_1786, cbSceneParam._m0[89u].y, _1785 * cbSceneParam._m0[89u].x));
    float _1811 = fma(_1787, cbSceneParam._m0[90u].z, fma(_1786, cbSceneParam._m0[90u].y, _1785 * cbSceneParam._m0[90u].x));
    float _1814 = fma(_1787, cbSceneParam._m0[91u].z, fma(_1786, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1785));
    float _1829 = _1054 * 0.5;
    float _1830 = _1055 * 0.5;
    float _1831 = _1056 * 0.5;
    float _1832 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1835 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1838 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1872;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1845 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1448, _1452, _1455, _1458));
        float _1849 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1450, _1453, _1456, _1459));
        float _1853 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1451, _1454, _1457, _1460));
        float _1860 = dot(vec4(cbModelParam._m0[39u]), vec4(_1829, _1830, _1831, 1.0));
        _1872 = dot(vec3(isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1860) ? 0.0 : (isnan(0.0) ? _1860 : max(0.0, _1860))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1872 = 1.0;
    }
    float _1883;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1874 = dot(vec4(cbModelParam._m0[40u]), vec4(_1829, _1830, _1831, 1.0));
        _1883 = dot(vec3(isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1874) ? 0.0 : (isnan(0.0) ? _1874 : max(0.0, _1874))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1883 = 1.0;
    }
    float _1887 = (_1883 * cbModelParam._m0[1u].x) + (_1872 * (1.0 - cbModelParam._m0[1u].x));
    float _1897 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _871);
    float _1898 = isnan(_1897) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1897 : min(cbModelParam._m0[25u].z, _1897));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1945 = fma(_1118, cbModelParam._m0[13u].z, fma(_1114, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1110)) + cbModelParam._m0[13u].w;
        float _1949 = fma(_1118, cbModelParam._m0[14u].z, fma(_1114, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1110)) + cbModelParam._m0[14u].w;
        float _1953 = fma(_1118, cbModelParam._m0[15u].z, fma(_1114, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1110)) + cbModelParam._m0[15u].w;
        float _1956 = fma(_1056, cbModelParam._m0[13u].z, fma(_1055, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1054));
        float _1959 = fma(_1056, cbModelParam._m0[14u].z, fma(_1055, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1054));
        float _1962 = fma(_1056, cbModelParam._m0[15u].z, fma(_1055, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1054));
        float _1990;
        if (_1956 > 0.0)
        {
            _1990 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1990 = frontier_phi_17_15_ladder;
        }
        float _2161;
        if (_1959 > 0.0)
        {
            _2161 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2161 = frontier_phi_26_22_ladder;
        }
        float _2457;
        if (_1962 > 0.0)
        {
            _2457 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2457 = frontier_phi_38_33_ladder;
        }
        float _2459 = isnan(_2161) ? _1990 : (isnan(_1990) ? _2161 : min(_1990, _2161));
        float _2460 = isnan(_2457) ? _2459 : (isnan(_2459) ? _2457 : min(_2459, _2457));
        float _2464 = (_2460 * _1956) + _1945;
        float _2465 = (_2460 * _1959) + _1949;
        float _2466 = (_2460 * _1962) + _1953;
        float _2467 = _2460 * 9.9999997473787516355514526367188e-05;
        float _2469 = (-1.0) - _2467;
        float _2471 = _2467 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2466 > _2471) || ((_2466 < _2469) || ((_2465 > _2471) || ((_2465 < _2469) || ((_2464 < _2469) || (_2464 > _2471))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2611 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2466, cbModelParam._m0[9u].z, fma(_2465, cbModelParam._m0[9u].y, _2464 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2466, cbModelParam._m0[10u].z, fma(_2465, cbModelParam._m0[10u].y, _2464 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2466, cbModelParam._m0[11u].z, fma(_2465, cbModelParam._m0[11u].y, _2464 * cbModelParam._m0[11u].x))), _1898);
            frontier_phi_16_38_ladder = _2611.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2611.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2611.x * cbModelParam._m0[1u].y;
        }
        _1978 = frontier_phi_16_38_ladder_2;
        _1980 = frontier_phi_16_38_ladder_1;
        _1982 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1966 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1054, _1055, _1056), _1898);
        _1978 = _1966.x * cbModelParam._m0[1u].y;
        _1980 = _1966.y * cbModelParam._m0[1u].y;
        _1982 = _1966.z * cbModelParam._m0[1u].y;
    }
    float _1986 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _871);
    float _1987 = isnan(_1986) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1986 : min(cbModelParam._m0[25u].w, _1986));
    float _2076;
    float _2078;
    float _2080;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2040 = fma(_1118, cbModelParam._m0[21u].z, fma(_1114, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1110)) + cbModelParam._m0[21u].w;
        float _2044 = fma(_1118, cbModelParam._m0[22u].z, fma(_1114, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1110)) + cbModelParam._m0[22u].w;
        float _2048 = fma(_1118, cbModelParam._m0[23u].z, fma(_1114, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1110)) + cbModelParam._m0[23u].w;
        float _2051 = fma(_1056, cbModelParam._m0[21u].z, fma(_1055, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1054));
        float _2054 = fma(_1056, cbModelParam._m0[22u].z, fma(_1055, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1054));
        float _2057 = fma(_1056, cbModelParam._m0[23u].z, fma(_1055, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1054));
        float _2166;
        if (_2051 > 0.0)
        {
            _2166 = abs((1.0 - _2040) / _2051);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2040 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2166 = frontier_phi_28_24_ladder;
        }
        float _2484;
        if (_2054 > 0.0)
        {
            _2484 = abs((1.0 - _2044) / _2054);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2044 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2484 = frontier_phi_40_35_ladder;
        }
        float _2822;
        if (_2057 > 0.0)
        {
            _2822 = abs((1.0 - _2048) / _2057);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2048 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2822 = frontier_phi_50_47_ladder;
        }
        float _2824 = isnan(_2484) ? _2166 : (isnan(_2166) ? _2484 : min(_2166, _2484));
        float _2825 = isnan(_2822) ? _2824 : (isnan(_2824) ? _2822 : min(_2824, _2822));
        float _2829 = (_2825 * _2051) + _2040;
        float _2830 = (_2825 * _2054) + _2044;
        float _2831 = (_2825 * _2057) + _2048;
        float _2832 = _2825 * 9.9999997473787516355514526367188e-05;
        float _2833 = (-1.0) - _2832;
        float _2835 = _2832 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2831 > _2835) || ((_2831 < _2833) || ((_2830 > _2835) || ((_2830 < _2833) || ((_2829 < _2833) || (_2829 > _2835))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2831, cbModelParam._m0[17u].z, fma(_2830, cbModelParam._m0[17u].y, _2829 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2831, cbModelParam._m0[18u].z, fma(_2830, cbModelParam._m0[18u].y, _2829 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2831, cbModelParam._m0[19u].z, fma(_2830, cbModelParam._m0[19u].y, _2829 * cbModelParam._m0[19u].x))), _1987);
            frontier_phi_25_50_ladder = _2953.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2953.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2953.x * cbModelParam._m0[1u].z;
        }
        _2076 = frontier_phi_25_50_ladder_2;
        _2078 = frontier_phi_25_50_ladder_1;
        _2080 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2060 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1054, _1055, _1056), _1987);
        _2076 = _2060.x * cbModelParam._m0[1u].z;
        _2078 = _2060.y * cbModelParam._m0[1u].z;
        _2080 = _2060.z * cbModelParam._m0[1u].z;
    }
    float _2093 = (((_1081 * _1031) + _1082) * _1046) * ((cbModelParam._m0[1u].w * (_2076 - _1978)) + _1978);
    float _2095 = (((_1081 * _1033) + _1082) * _1046) * ((cbModelParam._m0[1u].w * (_2078 - _1980)) + _1980);
    float _2097 = (((_1081 * _1034) + _1082) * _1046) * ((cbModelParam._m0[1u].w * (_2080 - _1982)) + _1982);
    float _2100 = fma(_2097, cbSceneParam._m0[89u].z, fma(_2095, cbSceneParam._m0[89u].y, _2093 * cbSceneParam._m0[89u].x));
    float _2103 = fma(_2097, cbSceneParam._m0[90u].z, fma(_2095, cbSceneParam._m0[90u].y, _2093 * cbSceneParam._m0[90u].x));
    float _2106 = fma(_2097, cbSceneParam._m0[91u].z, fma(_2095, cbSceneParam._m0[91u].y, _2093 * cbSceneParam._m0[91u].x));
    float _2140 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2144 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2148 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2152 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2153 = _2140 / _2152;
    float _2154 = _2144 / _2152;
    float _2155 = _2148 / _2152;
    float _2302;
    float _2303;
    float _2304;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2182 = ((uint(_2155 > cbSceneParam._m0[59u].y) + uint(_2155 > cbSceneParam._m0[59u].x)) + uint(_2155 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2183 = _2182 + 43u;
        uint _2191 = _2182 + 44u;
        uint _2199 = _2182 + 45u;
        uint _2207 = _2182 + 46u;
        float _2218 = fma(_2152, cbSceneParam._m0[_2183].w, fma(_2148, cbSceneParam._m0[_2183].z, fma(_2144, cbSceneParam._m0[_2183].y, _2140 * cbSceneParam._m0[_2183].x)));
        float _2222 = fma(_2152, cbSceneParam._m0[_2191].w, fma(_2148, cbSceneParam._m0[_2191].z, fma(_2144, cbSceneParam._m0[_2191].y, _2140 * cbSceneParam._m0[_2191].x)));
        float _2230 = fma(_2152, cbSceneParam._m0[_2207].w, fma(_2148, cbSceneParam._m0[_2207].z, fma(_2144, cbSceneParam._m0[_2207].y, _2140 * cbSceneParam._m0[_2207].x)));
        float _2235 = cbSceneParam._m0[33u].z * _2230;
        float _2237 = cbSceneParam._m0[33u].w * _2230;
        float _2240 = fma(_2152, cbSceneParam._m0[_2199].w, fma(_2148, cbSceneParam._m0[_2199].z, fma(_2144, cbSceneParam._m0[_2199].y, _2140 * cbSceneParam._m0[_2199].x))) / _2230;
        float _2288 = (cbSceneParam._m0[33u].x - sqrt(((_2154 * _2154) + (_2153 * _2153)) + (_2155 * _2155))) * cbSceneParam._m0[33u].y;
        float _4671 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2295 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2235 + _2218) / _2230, (_2237 + _2222) / _2230), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2237 + _2218) / _2230, (_2222 - _2235) / _2230), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2218 - _2235) / _2230, (_2222 - _2237) / _2230), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2218 - _2237) / _2230, (_2235 + _2222) / _2230), _2240), 0.0)).x), vec4(0.25)));
        _2302 = 1.0 - (_2295 * cbSceneParam._m0[34u].x);
        _2303 = 1.0 - (_2295 * cbSceneParam._m0[34u].y);
        _2304 = 1.0 - (_2295 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2302 = 1.0;
        _2303 = 1.0;
        _2304 = 1.0;
    }
    float _2368;
    float _2370;
    float _2372;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2356 = fma(_2152, cbSceneParam._m0[63u].w, fma(_2148, cbSceneParam._m0[63u].z, fma(_2144, cbSceneParam._m0[63u].y, _2140 * cbSceneParam._m0[63u].x)));
        float _2357 = fma(_2152, cbSceneParam._m0[60u].w, fma(_2148, cbSceneParam._m0[60u].z, fma(_2144, cbSceneParam._m0[60u].y, _2140 * cbSceneParam._m0[60u].x))) / _2356;
        float _2358 = fma(_2152, cbSceneParam._m0[61u].w, fma(_2148, cbSceneParam._m0[61u].z, fma(_2144, cbSceneParam._m0[61u].y, _2140 * cbSceneParam._m0[61u].x))) / _2356;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2357 >= cbSceneParam._m0[64u].x) && (_2358 >= cbSceneParam._m0[64u].y)) && (_2357 <= cbSceneParam._m0[64u].z)) && (_2358 <= cbSceneParam._m0[64u].w))
        {
            float _2497 = fma(_2152, cbSceneParam._m0[62u].w, fma(_2148, cbSceneParam._m0[62u].z, fma(_2144, cbSceneParam._m0[62u].y, _2140 * cbSceneParam._m0[62u].x))) / _2356;
            float _2501 = isnan(cbSceneParam._m0[41u].w) ? _2497 : (isnan(_2497) ? cbSceneParam._m0[41u].w : max(_2497, cbSceneParam._m0[41u].w));
            float _2544 = (cbSceneParam._m0[33u].x - sqrt(((_2154 * _2154) + (_2153 * _2153)) + (_2155 * _2155))) * cbSceneParam._m0[33u].y;
            float _4687 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
            float _2551 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2357, cbSceneParam._m0[33u].w + _2358), _2501), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2357, _2358 - cbSceneParam._m0[33u].z), _2501), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2357 - cbSceneParam._m0[33u].z, _2358 - cbSceneParam._m0[33u].w), _2501), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2357 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2358), _2501), 0.0)).x), vec4(0.25)));
            float _2555 = 1.0 - (_2551 * cbSceneParam._m0[34u].x);
            float _2556 = 1.0 - (_2551 * cbSceneParam._m0[34u].y);
            float _2557 = 1.0 - (_2551 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2557) ? _2304 : (isnan(_2304) ? _2557 : min(_2304, _2557));
            frontier_phi_37_36_ladder_1 = isnan(_2556) ? _2303 : (isnan(_2303) ? _2556 : min(_2303, _2556));
            frontier_phi_37_36_ladder_2 = isnan(_2555) ? _2302 : (isnan(_2302) ? _2555 : min(_2302, _2555));
        }
        else
        {
            frontier_phi_37_36_ladder = _2304;
            frontier_phi_37_36_ladder_1 = _2303;
            frontier_phi_37_36_ladder_2 = _2302;
        }
        _2368 = frontier_phi_37_36_ladder_2;
        _2370 = frontier_phi_37_36_ladder_1;
        _2372 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2368 = _2302;
        _2370 = _2303;
        _2372 = _2304;
    }
    uvec4 _2377 = floatBitsToUint(cbInstanceData._m0[_1006 + 5u]);
    uint _2379 = _2377.x * 14u;
    uint _2380 = _2379 + 13u;
    float _2387 = _1046 + (-1.0);
    float _2392 = (cbLight._m0[_2380].x * _2387) + 1.0;
    float _2393 = (cbLight._m0[_2380].y * _2387) + 1.0;
    float _2394 = (cbLight._m0[_2380].z * _2387) + 1.0;
    float _2395 = (cbLight._m0[_2380].w * _2387) + 1.0;
    uint _2396 = _2379 + 5u;
    float _2402 = isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0));
    uint _2406 = _2379 + 4u;
    float _2416 = isnan(1.0) ? _2392 : (isnan(_2392) ? 1.0 : min(_2392, 1.0));
    uint _2420 = _2379 | 1u;
    float _2431 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_868, _869, _870));
    float _2434 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_868, _869, _870));
    float _4723 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _4734 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2439 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * 0.3183098733425140380859375;
    float _2441 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * 0.3183098733425140380859375;
    float _2448 = ((cbLight._m0[_2396].x * _2402) * _2441) + (((cbLight._m0[_2406].x * _2368) * _2416) * _2439);
    float _2449 = ((_2402 * cbLight._m0[_2396].y) * _2441) + (((cbLight._m0[_2406].y * _2370) * _2416) * _2439);
    float _2450 = ((_2402 * cbLight._m0[_2396].z) * _2441) + (((cbLight._m0[_2406].z * _2372) * _2416) * _2439);
    uvec4 _2454 = floatBitsToUint(cbLight._m0[_2379 + 12u]);
    bool _2456 = _2454.x == 0u;
    float _2558;
    float _2560;
    float _2562;
    if (_2456)
    {
        _2558 = _2448;
        _2560 = _2449;
        _2562 = _2450;
    }
    else
    {
        uint _2566 = _2379 + 6u;
        float _2582 = (dot(vec3(cbLight._m0[_2379 + 2u].xyz), vec3(_868, _869, _870)) * 0.5) + 0.5;
        float _2583 = _2582 * _2582;
        float _4745 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2584 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2585 = isnan(1.0) ? _2394 : (isnan(_2394) ? 1.0 : min(_2394, 1.0));
        _2558 = (((cbLight._m0[_2566].x * 0.3183098733425140380859375) * _2584) * _2585) + _2448;
        _2560 = (((cbLight._m0[_2566].y * 0.3183098733425140380859375) * _2584) * _2585) + _2449;
        _2562 = (((cbLight._m0[_2566].z * 0.3183098733425140380859375) * _2584) * _2585) + _2450;
    }
    bool _2565 = _2454.y == 0u;
    float _2620;
    float _2622;
    float _2624;
    if (_2565)
    {
        _2620 = _2558;
        _2622 = _2560;
        _2624 = _2562;
    }
    else
    {
        uint _2793 = _2379 + 7u;
        float _2809 = (dot(vec3(cbLight._m0[_2379 + 3u].xyz), vec3(_868, _869, _870)) * 0.5) + 0.5;
        float _2810 = _2809 * _2809;
        float _4761 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2811 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _2812 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
        _2620 = (((cbLight._m0[_2793].x * 0.3183098733425140380859375) * _2811) * _2812) + _2558;
        _2622 = (((cbLight._m0[_2793].y * 0.3183098733425140380859375) * _2811) * _2812) + _2560;
        _2624 = (((cbLight._m0[_2793].z * 0.3183098733425140380859375) * _2811) * _2812) + _2562;
    }
    uint _2627 = _2379 + 8u;
    float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2379].w)) * _871) * 0.949999988079071044921875);
    float _2641 = _2640 * _2640;
    float _2642 = cbLight._m0[_2379].x + _948;
    float _2643 = cbLight._m0[_2379].y + _949;
    float _2644 = cbLight._m0[_2379].z + _950;
    float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
    float _2649 = _2648 * _2642;
    float _2650 = _2648 * _2643;
    float _2651 = _2648 * _2644;
    float _2652 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2379].xyz));
    float _4777 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2655 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
    float _4788 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _2656 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
    float _2657 = dot(vec3(_868, _869, _870), vec3(_2649, _2650, _2651));
    float _4799 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
    float _2661 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_2649, _2650, _2651));
    float _4810 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2665 = _2641 * _2641;
    float _2669 = ((_2660 * _2660) * (_2665 + (-1.0))) + 1.0;
    float _2677 = exp2(log2(1.0 - (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) * 5.0);
    float _2678 = 0.959999978542327880859375 - _1028;
    float _2680 = 0.959999978542327880859375 - _1029;
    float _2681 = 0.959999978542327880859375 - _1030;
    float _2688 = 1.0 - _2641;
    float _2699 = (0.5 / (((_2656 * ((_2655 * _2688) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2656 * _2688) + _2641) * _2655))) * _2655;
    float _4821 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2701 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2665 / ((_2669 * _2669) * 3.141590118408203125));
    uint _2715 = _2379 + 9u;
    float _2726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _871) * 0.949999988079071044921875);
    float _2727 = _2726 * _2726;
    float _2728 = cbLight._m0[_2420].x + _948;
    float _2729 = cbLight._m0[_2420].y + _949;
    float _2730 = cbLight._m0[_2420].z + _950;
    float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
    float _2735 = _2734 * _2728;
    float _2736 = _2734 * _2729;
    float _2737 = _2734 * _2730;
    float _2738 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2420].xyz));
    float _4832 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2741 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
    float _2742 = dot(vec3(_868, _869, _870), vec3(_2735, _2736, _2737));
    float _4843 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2745 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
    float _2746 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2735, _2736, _2737));
    float _4854 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
    float _2750 = _2727 * _2727;
    float _2754 = ((_2745 * _2745) * (_2750 + (-1.0))) + 1.0;
    float _2761 = exp2(log2(1.0 - (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) * 5.0);
    float _2768 = 1.0 - _2727;
    float _2778 = (0.5 / (((_2656 * ((_2741 * _2768) + _2727)) + 9.9999999392252902907785028219223e-09) + (((_2656 * _2768) + _2727) * _2741))) * _2741;
    float _4865 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
    float _2780 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2750 / ((_2754 * _2754) * 3.141590118408203125));
    float _2790 = (((((_2761 * _2678) + _1031) * cbLight._m0[_2715].x) * _2780) * _2402) + ((((cbLight._m0[_2627].x * _2368) * ((_2677 * _2678) + _1031)) * _2701) * _2416);
    float _2791 = (((((_2761 * _2680) + _1033) * cbLight._m0[_2715].y) * _2780) * _2402) + ((((cbLight._m0[_2627].y * _2370) * ((_2677 * _2680) + _1033)) * _2701) * _2416);
    float _2792 = (((((_2761 * _2681) + _1034) * cbLight._m0[_2715].z) * _2780) * _2402) + ((((cbLight._m0[_2627].z * _2372) * ((_2677 * _2681) + _1034)) * _2701) * _2416);
    float _2848;
    float _2850;
    float _2852;
    if (_2456)
    {
        _2848 = _2790;
        _2850 = _2791;
        _2852 = _2792;
    }
    else
    {
        uint _2854 = _2379 + 2u;
        uint _2858 = _2379 + 10u;
        float _2872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2854].w)) * _871) * 0.949999988079071044921875);
        float _2873 = _2872 * _2872;
        float _2874 = cbLight._m0[_2854].x + _948;
        float _2875 = cbLight._m0[_2854].y + _949;
        float _2876 = cbLight._m0[_2854].z + _950;
        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
        float _2881 = _2880 * _2874;
        float _2882 = _2880 * _2875;
        float _2883 = _2880 * _2876;
        float _2884 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2854].xyz));
        float _4876 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2887 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _2888 = dot(vec3(_868, _869, _870), vec3(_2881, _2882, _2883));
        float _4887 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2891 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
        float _2892 = dot(vec3(cbLight._m0[_2854].xyz), vec3(_2881, _2882, _2883));
        float _4898 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2896 = _2873 * _2873;
        float _2900 = ((_2891 * _2891) * (_2896 + (-1.0))) + 1.0;
        float _2907 = exp2(log2(1.0 - (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) * 5.0);
        float _2914 = 1.0 - _2873;
        float _2924 = (0.5 / (((_2656 * ((_2887 * _2914) + _2873)) + 9.9999999392252902907785028219223e-09) + (((_2656 * _2914) + _2873) * _2887))) * _2887;
        float _4909 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2926 = (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2896 / ((_2900 * _2900) * 3.141590118408203125));
        float _2927 = isnan(1.0) ? _2394 : (isnan(_2394) ? 1.0 : min(_2394, 1.0));
        _2848 = (((((_2907 * _2678) + _1031) * cbLight._m0[_2858].x) * _2926) * _2927) + _2790;
        _2850 = (((((_2907 * _2680) + _1033) * cbLight._m0[_2858].y) * _2926) * _2927) + _2791;
        _2852 = (((((_2907 * _2681) + _1034) * cbLight._m0[_2858].z) * _2926) * _2927) + _2792;
    }
    float _2958;
    float _2960;
    float _2962;
    if (_2565)
    {
        _2958 = _2848;
        _2960 = _2850;
        _2962 = _2852;
    }
    else
    {
        uint _2969 = _2379 + 3u;
        uint _2973 = _2379 + 11u;
        float _2987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2969].w)) * _871) * 0.949999988079071044921875);
        float _2988 = _2987 * _2987;
        float _2989 = cbLight._m0[_2969].x + _948;
        float _2990 = cbLight._m0[_2969].y + _949;
        float _2991 = cbLight._m0[_2969].z + _950;
        float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
        float _2996 = _2995 * _2989;
        float _2997 = _2995 * _2990;
        float _2998 = _2995 * _2991;
        float _2999 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2969].xyz));
        float _4925 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
        float _3002 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
        float _3003 = dot(vec3(_868, _869, _870), vec3(_2996, _2997, _2998));
        float _4936 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3006 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
        float _3007 = dot(vec3(cbLight._m0[_2969].xyz), vec3(_2996, _2997, _2998));
        float _4947 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        float _3011 = _2988 * _2988;
        float _3015 = ((_3006 * _3006) * (_3011 + (-1.0))) + 1.0;
        float _3022 = exp2(log2(1.0 - (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0)))) * 5.0);
        float _3029 = 1.0 - _2988;
        float _3039 = (0.5 / (((_2656 * ((_3002 * _3029) + _2988)) + 9.9999999392252902907785028219223e-09) + (((_2656 * _3029) + _2988) * _3002))) * _3002;
        float _4958 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
        float _3041 = (isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_3011 / ((_3015 * _3015) * 3.141590118408203125));
        float _3042 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
        _2958 = (((((_3022 * _2678) + _1031) * cbLight._m0[_2973].x) * _3041) * _3042) + _2848;
        _2960 = (((((_3022 * _2680) + _1033) * cbLight._m0[_2973].y) * _3041) * _3042) + _2850;
        _2962 = (((((_3022 * _2681) + _1034) * cbLight._m0[_2973].z) * _3041) * _3042) + _2852;
    }
    float _3108;
    float _3110;
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    if (_2377.y == 0u)
    {
        uvec4 _3063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3064 = _3063.x;
        uint _3075 = uint((float(_3063.y) * floor(float(uint(cbSceneParam._m0[85u].y * _969) / _3064))) + floor(float(uint(cbSceneParam._m0[85u].x * _968) / _3064)));
        float _3085 = (log2(_2155 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3086 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
        uint _3089 = uint(isnan(14.0) ? _3086 : (isnan(_3086) ? 14.0 : min(_3086, 14.0)));
        uvec4 _3094 = texelFetch(g_lightClusterGridBuffer, int(((_3089 << 2u) + (_3075 << 6u)) >> 2u));
        uint _3095 = _3094.x;
        uint _3096 = _3063.z;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        if (((((1u << ((_3096 >> 4u) & 15u)) + 4294967295u) & _3095) == 0u) || ((_3096 & 240u) == 0u))
        {
            _3175 = 0.0;
            _3177 = 0.0;
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
            _3185 = 0.0;
        }
        else
        {
            float _3176;
            float _3178;
            float _3180;
            float _3182;
            float _3184;
            float _3186;
            float _3328 = 0.0;
            float _3329 = 0.0;
            float _3330 = 0.0;
            float _3331 = 0.0;
            float _3332 = 0.0;
            float _3333 = 0.0;
            uint _3334 = 0u;
            uint _3343;
            bool _3344;
            for (;;)
            {
                _3343 = texelFetch(g_lightClassification, int((((_3089 << 5u) + (_3075 << 9u)) + (_3334 << 2u)) >> 2u)).x;
                _3344 = _3343 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3344)
                {
                    frontier_phi_71_pred = _3333;
                    frontier_phi_71_pred_1 = _3332;
                    frontier_phi_71_pred_2 = _3331;
                    frontier_phi_71_pred_3 = _3330;
                    frontier_phi_71_pred_4 = _3329;
                    frontier_phi_71_pred_5 = _3328;
                }
                else
                {
                    float _3473;
                    float _3474;
                    float _3475;
                    float _3476;
                    float _3477;
                    float _3478;
                    uint _3479;
                    _3473 = _3328;
                    _3474 = _3329;
                    _3475 = _3330;
                    _3476 = _3331;
                    _3477 = _3332;
                    _3478 = _3333;
                    _3479 = _3343;
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    float _3404;
                    float _3405;
                    for (;;)
                    {
                        uint _3483 = uint(findLSB(_3479)) + (_3334 << 5u);
                        uint _3480 = (_3479 + 4294967295u) & _3479;
                        uint _3485 = _3483 * 48u;
                        vec4 _3499 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3485)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 3u)).x));
                        uint _3505 = (_3483 * 48u) + 4u;
                        vec4 _3518 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3505)).x, texelFetch(g_PointLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3505 + 3u)).x));
                        uint _3524 = (_3483 * 48u) + 8u;
                        vec3 _3535 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3524)).x, texelFetch(g_PointLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3524 + 2u)).x));
                        float _3539 = _3499.x - _2153;
                        float _3540 = _3499.y - _2154;
                        float _3541 = _3499.z - _2155;
                        float _3542 = dot(vec3(_3539, _3540, _3541), vec3(_3539, _3540, _3541));
                        float _3545 = inversesqrt(_3542);
                        float _3546 = _3545 * _3539;
                        float _3547 = _3545 * _3540;
                        float _3548 = _3545 * _3541;
                        float _3549 = dot(vec3(_987, _990, _993), vec3(_3546, _3547, _3548));
                        float _3554 = 1.0 - (_3542 * _3499.w);
                        float _4984 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3555 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                        float _3556 = sqrt(_3542) * _3518.w;
                        float _3559 = 1.39999997615814208984375 / (_3556 + 1.39999997615814208984375);
                        float _3560 = _3559 * _3559;
                        float _3563 = ((1.0 - _3560) * _3549) + _3560;
                        float _3566 = _3556 * _3556;
                        float _3570 = ((isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0))) * _3555) / ((_3566 * 0.699999988079071044921875) + 1.0);
                        float _3574 = (-0.0) - _2153;
                        float _3575 = (-0.0) - _2154;
                        float _3576 = (-0.0) - _2155;
                        float _3580 = inversesqrt(dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576)));
                        float _3581 = _3580 * _3574;
                        float _3582 = _3580 * _3575;
                        float _3583 = _3580 * _3576;
                        float _3590 = exp2(log2(1.0 / ((_3566 * 3.5) + 5.0)) * 0.25);
                        float _3591 = 1.0 - _1062;
                        float _3598 = sqrt(1.0 - ((1.0 - (_3591 * _3591)) * (1.0 - (_3590 * _3590))));
                        float _3599 = _3598 * _3598;
                        float _3600 = _3599 * _3599;
                        float _3601 = _3581 + _3546;
                        float _3602 = _3582 + _3547;
                        float _3603 = _3583 + _3548;
                        float _3607 = inversesqrt(dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603)));
                        float _3611 = dot(vec3(_987, _990, _993), vec3(_3581, _3582, _3583));
                        float _5000 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                        float _3614 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                        float _3615 = dot(vec3(_987, _990, _993), vec3(_3607 * _3601, _3607 * _3602, _3607 * _3603));
                        float _5011 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                        float _3618 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                        float _3622 = ((_3618 * _3618) * (_3600 + (-1.0))) + 1.0;
                        float _3623 = _3559 * _3599;
                        float _3624 = _3623 * _3623;
                        float _3627 = ((1.0 - _3624) * _3549) + _3624;
                        float _5022 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                        float _3628 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                        float _3629 = 1.0 - _3599;
                        float _3639 = (0.5 / (((_3628 * ((_3614 * _3629) + _3599)) + 9.9999999392252902907785028219223e-09) + (((_3628 * _3629) + _3599) * _3614))) * _3628;
                        float _5033 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                        float _3650 = (((_3600 * 3.1415927410125732421875) * (isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0)))) / ((_3622 * _3622) * ((_3566 * 2.1991131305694580078125) + 3.141590118408203125))) * _3555;
                        _3403 = (_3570 * _3518.x) + _3476;
                        _3404 = (_3570 * _3518.y) + _3477;
                        _3405 = (_3570 * _3518.z) + _3478;
                        _3400 = (_3650 * _3535.x) + _3473;
                        _3401 = (_3650 * _3535.y) + _3474;
                        _3402 = (_3650 * _3535.z) + _3475;
                        if (_3480 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3473 = _3400;
                            _3474 = _3401;
                            _3475 = _3402;
                            _3476 = _3403;
                            _3477 = _3404;
                            _3478 = _3405;
                            _3479 = _3480;
                        }
                    }
                    frontier_phi_71_pred = _3405;
                    frontier_phi_71_pred_1 = _3404;
                    frontier_phi_71_pred_2 = _3403;
                    frontier_phi_71_pred_3 = _3402;
                    frontier_phi_71_pred_4 = _3401;
                    frontier_phi_71_pred_5 = _3400;
                }
                _3186 = frontier_phi_71_pred;
                _3184 = frontier_phi_71_pred_1;
                _3182 = frontier_phi_71_pred_2;
                _3180 = frontier_phi_71_pred_3;
                _3178 = frontier_phi_71_pred_4;
                _3176 = frontier_phi_71_pred_5;
                uint _3335 = _3334 + 1u;
                if (_3335 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3328 = _3176;
                    _3329 = _3178;
                    _3330 = _3180;
                    _3331 = _3182;
                    _3332 = _3184;
                    _3333 = _3186;
                    _3334 = _3335;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3175 = _3176;
            _3177 = _3178;
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
            _3185 = _3186;
        }
        uvec4 _3189 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3190 = _3189.z;
        uint _3192 = (_3190 >> 8u) & 15u;
        float _3296;
        float _3298;
        float _3300;
        float _3302;
        float _3304;
        float _3306;
        if (((4294967295u << _3192) & _3095) == 0u)
        {
            _3296 = _3175;
            _3298 = _3177;
            _3300 = _3179;
            _3302 = _3181;
            _3304 = _3183;
            _3306 = _3185;
        }
        else
        {
            float _3321 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
            float _3322 = _3321 * _2153;
            float _3323 = _3321 * _2154;
            float _3324 = _3321 * _2155;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3192 < ((_3190 >> 12u) & 15u))
            {
                float _3297;
                float _3299;
                float _3301;
                float _3303;
                float _3305;
                float _3307;
                float _3456 = _3175;
                float _3457 = _3177;
                float _3458 = _3179;
                float _3459 = _3181;
                float _3460 = _3183;
                float _3461 = _3185;
                uint _3462 = _3192;
                uint _3471;
                bool _3472;
                for (;;)
                {
                    _3471 = texelFetch(g_lightClassification, int((((_3089 << 5u) + (_3075 << 9u)) + (_3462 << 2u)) >> 2u)).x;
                    _3472 = _3471 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3472)
                    {
                        frontier_phi_82_pred = _3461;
                        frontier_phi_82_pred_1 = _3460;
                        frontier_phi_82_pred_2 = _3459;
                        frontier_phi_82_pred_3 = _3458;
                        frontier_phi_82_pred_4 = _3457;
                        frontier_phi_82_pred_5 = _3456;
                    }
                    else
                    {
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3958;
                        float _3959;
                        float _3960;
                        float _3961;
                        float _3962;
                        float _3963;
                        float _3677 = _3456;
                        float _3678 = _3457;
                        float _3679 = _3458;
                        float _3680 = _3459;
                        float _3681 = _3460;
                        float _3682 = _3461;
                        uint _3683 = _3471;
                        uint _3684;
                        vec4 _3709;
                        float _3710;
                        vec4 _3725;
                        vec3 _3737;
                        vec4 _3752;
                        vec4 _3767;
                        float _3814;
                        bool _3815;
                        for (;;)
                        {
                            uint _3694 = ((_3462 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3683));
                            _3684 = (_3683 + 4294967295u) & _3683;
                            uint _3696 = _3694 * 40u;
                            _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            _3710 = _3709.w;
                            uint _3712 = (_3694 * 40u) + 4u;
                            _3725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 3u)).x));
                            uint _3727 = (_3694 * 40u) + 8u;
                            _3737 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x));
                            uint _3739 = (_3694 * 40u) + 16u;
                            _3752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 3u)).x));
                            uint _3754 = (_3694 * 40u) + 20u;
                            _3767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 3u)).x));
                            uint _3770 = (_3694 * 40u) + 24u;
                            vec4 _3783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 3u)).x));
                            uint _3789 = (_3694 * 40u) + 28u;
                            vec4 _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            _3814 = fma(_2155, _3802.z, fma(_2154, _3802.y, _3802.x * _2153)) + _3802.w;
                            _3815 = !((fma(_2155, _3783.z, fma(_2154, _3783.y, _3783.x * _2153)) + _3783.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3815)
                            {
                                float _3842 = _3709.x - _2153;
                                float _3843 = _3709.y - _2154;
                                float _3844 = _3709.z - _2155;
                                float _3845 = dot(vec3(_3842, _3843, _3844), vec3(_3842, _3843, _3844));
                                float _3848 = inversesqrt(_3845);
                                float _3849 = _3848 * _3842;
                                float _3850 = _3848 * _3843;
                                float _3851 = _3848 * _3844;
                                float _3855 = 1.0 - (_3845 / (_3710 * _3710));
                                float _5044 = isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0));
                                float _3856 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                                float _3860 = sqrt(_3845) * _3725.w;
                                float _3862 = 1.39999997615814208984375 / (_3860 + 1.39999997615814208984375);
                                float _3863 = _3862 * _3862;
                                float _3866 = ((1.0 - _3863) * dot(vec3(_3849, _3850, _3851), vec3(_987, _990, _993))) + _3863;
                                float _3869 = _3860 * _3860;
                                float _3873 = (fma(_2155, _3752.z, fma(_2154, _3752.y, _3752.x * _2153)) + _3752.w) / _3814;
                                float _3874 = (fma(_2155, _3767.z, fma(_2154, _3767.y, _3767.x * _2153)) + _3767.w) / _3814;
                                float _3878 = 1.0 - dot(vec2(_3873, _3874), vec2(_3873, _3874));
                                float _5060 = isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0));
                                float _3879 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                                float _3880 = _3879 * (((isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0))) * _3856) / ((_3869 * 0.699999988079071044921875) + 1.0));
                                float _3892 = exp2(log2(1.0 / ((_3869 * 3.5) + 5.0)) * 0.25);
                                float _3893 = 1.0 - _1062;
                                float _3900 = sqrt(1.0 - ((1.0 - (_3893 * _3893)) * (1.0 - (_3892 * _3892))));
                                float _3901 = _3900 * _3900;
                                float _3902 = _3901 * _3901;
                                float _3903 = _3849 - _3322;
                                float _3904 = _3850 - _3323;
                                float _3905 = _3851 - _3324;
                                float _3909 = inversesqrt(dot(vec3(_3903, _3904, _3905), vec3(_3903, _3904, _3905)));
                                float _3913 = dot(vec3(_987, _990, _993), vec3((-0.0) - _3322, (-0.0) - _3323, (-0.0) - _3324));
                                float _5071 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3916 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                                float _3917 = dot(vec3(_987, _990, _993), vec3(_3909 * _3903, _3909 * _3904, _3909 * _3905));
                                float _5082 = isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0));
                                float _3920 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                                float _3924 = ((_3920 * _3920) * (_3902 + (-1.0))) + 1.0;
                                float _3925 = _3862 * _3901;
                                float _3926 = _3925 * _3925;
                                float _3932 = ((1.0 - _3926) * dot(vec3(_987, _990, _993), vec3(_3849, _3850, _3851))) + _3926;
                                float _5093 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3933 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
                                float _3934 = 1.0 - _3901;
                                float _3944 = (0.5 / (((_3933 * ((_3916 * _3934) + _3901)) + 9.9999999392252902907785028219223e-09) + (((_3933 * _3934) + _3901) * _3916))) * _3933;
                                float _5104 = isnan(0.0) ? _3944 : (isnan(_3944) ? 0.0 : max(_3944, 0.0));
                                float _3954 = (_3879 * _3856) * (((_3902 * 3.1415927410125732421875) * (isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0)))) / ((_3924 * _3924) * ((_3869 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3880 * _3725.z;
                                frontier_phi_88_pred_1 = _3880 * _3725.y;
                                frontier_phi_88_pred_2 = _3880 * _3725.x;
                                frontier_phi_88_pred_3 = _3954 * _3737.z;
                                frontier_phi_88_pred_4 = _3954 * _3737.y;
                                frontier_phi_88_pred_5 = _3954 * _3737.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3963 = frontier_phi_88_pred;
                            _3962 = frontier_phi_88_pred_1;
                            _3961 = frontier_phi_88_pred_2;
                            _3960 = frontier_phi_88_pred_3;
                            _3959 = frontier_phi_88_pred_4;
                            _3958 = frontier_phi_88_pred_5;
                            _3667 = _3961 + _3680;
                            _3668 = _3962 + _3681;
                            _3669 = _3963 + _3682;
                            _3664 = _3958 + _3677;
                            _3665 = _3959 + _3678;
                            _3666 = _3960 + _3679;
                            if (_3684 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3677 = _3664;
                                _3678 = _3665;
                                _3679 = _3666;
                                _3680 = _3667;
                                _3681 = _3668;
                                _3682 = _3669;
                                _3683 = _3684;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3669;
                        frontier_phi_82_pred_1 = _3668;
                        frontier_phi_82_pred_2 = _3667;
                        frontier_phi_82_pred_3 = _3666;
                        frontier_phi_82_pred_4 = _3665;
                        frontier_phi_82_pred_5 = _3664;
                    }
                    _3307 = frontier_phi_82_pred;
                    _3305 = frontier_phi_82_pred_1;
                    _3303 = frontier_phi_82_pred_2;
                    _3301 = frontier_phi_82_pred_3;
                    _3299 = frontier_phi_82_pred_4;
                    _3297 = frontier_phi_82_pred_5;
                    uint _3463 = _3462 + 1u;
                    if (_3463 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3456 = _3297;
                        _3457 = _3299;
                        _3458 = _3301;
                        _3459 = _3303;
                        _3460 = _3305;
                        _3461 = _3307;
                        _3462 = _3463;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3303;
                frontier_phi_63_64_ladder_1 = _3307;
                frontier_phi_63_64_ladder_2 = _3305;
                frontier_phi_63_64_ladder_3 = _3301;
                frontier_phi_63_64_ladder_4 = _3299;
                frontier_phi_63_64_ladder_5 = _3297;
            }
            else
            {
                frontier_phi_63_64_ladder = _3181;
                frontier_phi_63_64_ladder_1 = _3185;
                frontier_phi_63_64_ladder_2 = _3183;
                frontier_phi_63_64_ladder_3 = _3179;
                frontier_phi_63_64_ladder_4 = _3177;
                frontier_phi_63_64_ladder_5 = _3175;
            }
            _3296 = frontier_phi_63_64_ladder_5;
            _3298 = frontier_phi_63_64_ladder_4;
            _3300 = frontier_phi_63_64_ladder_3;
            _3302 = frontier_phi_63_64_ladder;
            _3304 = frontier_phi_63_64_ladder_2;
            _3306 = frontier_phi_63_64_ladder_1;
        }
        float _3311 = isnan(1.0) ? _1046 : (isnan(_1046) ? 1.0 : min(_1046, 1.0));
        _3108 = (_3311 * _3302) + _2620;
        _3110 = (_3311 * _3304) + _2622;
        _3112 = (_3311 * _3306) + _2624;
        _3114 = ((_3296 * _1031) * _3311) + _2958;
        _3116 = ((_3298 * _1033) * _3311) + _2960;
        _3118 = ((_3300 * _1034) * _3311) + _2962;
    }
    else
    {
        _3108 = _2620;
        _3110 = _2622;
        _3112 = _2624;
        _3114 = _2958;
        _3116 = _2960;
        _3118 = _2962;
    }
    float _5120 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _5131 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _5142 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _3135 = ((isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0))) * (_3108 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1046))) + ((_3114 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1887)) * cbPerFrame._m0[3u].x);
    float _3136 = ((isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0))) * (_3110 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1046))) + ((_3116 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1887)) * cbPerFrame._m0[3u].x);
    float _3137 = ((isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0))) * (_3112 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1046))) + ((_3118 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1887)) * cbPerFrame._m0[3u].x);
    uint _3138 = _1006 + 6u;
    float _3146 = _968 / cbSceneParam._m0[86u].x;
    float _3147 = _969 / cbSceneParam._m0[86u].y;
    vec4 _3161 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3146, _3147, (log2((isnan(cbSceneParam._m0[77u].w) ? _891 : (isnan(_891) ? cbSceneParam._m0[77u].w : min(_891, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3163 = _3161.x;
    float _3164 = _3161.y;
    float _3165 = _3161.z;
    float _3166 = _3161.w;
    float _3238;
    float _3240;
    float _3242;
    float _3244;
    if (_891 > cbSceneParam._m0[78u].w)
    {
        float _3200 = isnan(_891) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _891 : min(cbSceneParam._m0[80u].w, _891));
        float _3201 = _3200 / _891;
        float _3212 = _3201 * _941;
        float _3213 = _942 * _3201;
        float _3214 = (-0.0) - _3213;
        float _3216 = _3201 * _943;
        float _3218 = (cbSceneParam._m0[77u].w * _3214) / _3200;
        float _3219 = _3218 + cbSceneParam._m0[79u].w;
        float _3220 = cbSceneParam._m0[79u].w - _3213;
        float _3226 = sqrt(((_3212 * _3212) + (_3213 * _3213)) + (_3216 * _3216));
        float _3229 = (1.0 - (cbSceneParam._m0[77u].w / _3200)) * _3226;
        float _3234 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3236 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3413;
        if (abs((_3214 - _3218) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3413 = ((((_3219 > 0.0) ? exp2(_3234 * _3219) : (2.0 - exp2(_3236 * _3219))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3229;
        }
        else
        {
            float _3357 = 1.0 / cbSceneParam._m0[80u].x;
            float _3358 = isnan(_3220) ? _3219 : (isnan(_3219) ? _3220 : max(_3219, _3220));
            float _3359 = isnan(_3220) ? _3219 : (isnan(_3219) ? _3220 : min(_3219, _3220));
            float _3368 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : min(_3358, 0.0));
            float _3369 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : min(_3359, 0.0));
            _3413 = ((abs(_3226 / _3214) * cbSceneParam._m0[80u].y) * ((((_3368 - _3369) * 2.0) - ((exp2(_3234 * (isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0)))) - exp2(_3234 * (isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0))))) * _3357)) - ((exp2(_3236 * _3368) - exp2(_3236 * _3369)) * _3357))) + (_3229 * cbSceneParam._m0[80u].z);
        }
        vec4 _3415 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3146, _3147, 1.0), 0.0);
        float _3424 = exp2((_3413 * (-1.44269502162933349609375)) * (1.0 - _3415.w));
        float _3425 = log2(_3424);
        float _3441 = log2(_3166);
        _3238 = (exp2(_3441 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3425 * cbSceneParam._m0[78u].x)) * _3415.x) / cbSceneParam._m0[78u].x)) + _3163;
        _3240 = (exp2(_3441 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3425 * cbSceneParam._m0[78u].y)) * _3415.y) / cbSceneParam._m0[78u].y)) + _3164;
        _3242 = (exp2(_3441 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3425 * cbSceneParam._m0[78u].z)) * _3415.z) / cbSceneParam._m0[78u].z)) + _3165;
        _3244 = _3424 * _3166;
    }
    else
    {
        _3238 = _3163;
        _3240 = _3164;
        _3242 = _3165;
        _3244 = _3166;
    }
    bool _3451;
    vec4 _3254;
    vec4 _3276;
    float _3278;
    float _3282;
    float _3283;
    float _3284;
    float _3285;
    bool _3295;
    for (;;)
    {
        _3254 = cbMatDynParam._m0[0u];
        float _3256 = roundEven(_3254.y);
        bool _3257 = _3256 == 3.0;
        float _3258 = log2(_3244);
        float _3265 = exp2(_3258 * cbSceneParam._m0[78u].x) * _3135;
        float _3266 = exp2(_3258 * cbSceneParam._m0[78u].y) * _3136;
        float _3267 = exp2(_3258 * cbSceneParam._m0[78u].z) * _3137;
        float _3274 = _957 + (-0.5);
        _3276 = cbMtdParam._m0[1u];
        _3278 = _3276.y * _3274;
        float _3281 = (_3256 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3282 = _3281 * (_3257 ? _3265 : (_3265 + (cbSceneParam._m0[72u].w * _3238)));
        _3283 = _3281 * (_3257 ? _3266 : (_3266 + (cbSceneParam._m0[72u].w * _3240)));
        _3284 = _3281 * (_3257 ? _3267 : (_3267 + (cbSceneParam._m0[72u].w * _3242)));
        _3285 = _3274 * 0.999000012874603271484375;
        _3295 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3295)
        {
            if ((cbInstanceData._m0[_1006 + 7u].x + _3285) < 0.5)
            {
                _3451 = true;
                break;
            }
        }
        uint _3392 = _1007 + uint(_3254.w);
        if ((cbInstanceData._m0[_3392].w < 1.0) && ((cbInstanceData._m0[_3392].w + _3285) < 0.5))
        {
            _3451 = true;
            break;
        }
        if ((_3278 + 1.0) < _3276.x)
        {
            _3451 = true;
            break;
        }
        _3451 = false;
        break;
    }
    float _3655;
    if (_3451)
    {
        discard_state = true;
        _3655 = 0.0;
    }
    else
    {
        _3655 = cbInstanceData._m0[_3138].w;
    }
    SV_Target.x = _3282;
    SV_Target.y = _3283;
    SV_Target.z = _3284;
    SV_Target.w = _3655;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3138].w;
    discard_exit();
}


