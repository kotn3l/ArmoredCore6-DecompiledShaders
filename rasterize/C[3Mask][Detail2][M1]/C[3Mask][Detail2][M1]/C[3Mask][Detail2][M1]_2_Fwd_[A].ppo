#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1379;
float _3761;
float _3762;
float _3763;
float _3764;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _264.x * cbMtdParam._m0[10u].x;
    float _271 = _264.y * cbMtdParam._m0[10u].y;
    float _272 = _264.z * cbMtdParam._m0[10u].z;
    vec4 _290 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _340 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _350 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _340)) + 1.0;
    float _3773 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _358 = (_351 * ((_290.x * cbMtdParam._m0[11u].x) - _270)) + _270;
    float _359 = (_351 * ((_290.y * cbMtdParam._m0[11u].y) - _271)) + _271;
    float _360 = (_351 * ((_290.z * cbMtdParam._m0[11u].z) - _272)) + _272;
    vec4 _378 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _409 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _340)) + 1.0;
    float _3784 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _417 = (_410 * ((_378.x * cbMtdParam._m0[12u].x) - _358)) + _358;
    float _418 = (_410 * ((_378.y * cbMtdParam._m0[12u].y) - _359)) + _359;
    float _419 = (_410 * ((_378.z * cbMtdParam._m0[12u].z) - _360)) + _360;
    vec4 _437 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _462 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _340)) + 1.0;
    float _3795 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    vec4 _491 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _499 = ((((_463 * ((_437.x * cbMtdParam._m0[13u].x) - _417)) + _417) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _491.x;
    float _502 = ((((_463 * ((_437.y * cbMtdParam._m0[13u].y) - _418)) + _418) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _491.y;
    float _505 = ((((_463 * ((_437.z * cbMtdParam._m0[13u].z) - _419)) + _419) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _491.z;
    vec4 _525 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _554 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3806 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _562 = (_555 * ((_525.x * cbMtdParam._m0[14u].x) - _499)) + _499;
    float _563 = (_555 * ((_525.y * cbMtdParam._m0[14u].y) - _502)) + _502;
    float _564 = (_555 * ((_525.z * cbMtdParam._m0[14u].z) - _505)) + _505;
    vec4 _577 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _579 = _577.x;
    float _597 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _579) * _351) + _579;
    float _614 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _597) * _410) + _597;
    float _631 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _614) * _463) + _614;
    float _633 = _631 - (_631 * TEXCOORD_5.x);
    vec4 _649 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _671 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _673 = _671.x;
    float _674 = _671.y;
    float _677 = cbMtdParam._m0[18u].y * _671.z;
    vec4 _689 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _698 = (((cbMtdParam._m0[18u].x * _689.z) - _677) * _351) + _677;
    vec4 _711 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _722 = (((cbMtdParam._m0[17u].w * _711.z) - _698) * _410) + _698;
    vec4 _735 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _744 = (((cbMtdParam._m0[17u].z * _735.z) - _722) * _463) + _722;
    float _749 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_649.z * cbMtdParam._m0[18u].z) - _744)) + _744;
    float _754 = ((_689.x - _673) * _351) + _673;
    float _755 = ((_689.y - _674) * _351) + _674;
    float _760 = ((_711.x - _754) * _410) + _754;
    float _761 = ((_711.y - _755) * _410) + _755;
    float _770 = ((((_735.x - _760) * _463) + _760) * 2.0) + (-1.0);
    float _771 = ((((_735.y - _761) * _463) + _761) * 2.0) + (-1.0);
    float _772 = dot(vec2(_770, _771), vec2(_770, _771));
    float _3817 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _777 = sqrt(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))));
    float _783 = ((((_649.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _770;
    float _784 = ((((_649.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _771;
    float _787 = fma(_777, _234 * NORMAL.x, fma(_784, _241 * TANGENT.x, (_227 * _219) * _783));
    float _790 = fma(_777, _234 * NORMAL.y, fma(_784, _241 * TANGENT.y, (_227 * _220) * _783));
    float _793 = fma(_777, _234 * NORMAL.z, fma(_784, _241 * TANGENT.z, (_227 * _221) * _783));
    float _797 = inversesqrt(dot(vec3(_787, _790, _793), vec3(_787, _790, _793)));
    float _798 = _797 * _787;
    float _799 = _797 * _790;
    float _800 = _797 * _793;
    float _3828 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _801 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3850 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3861 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3872 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _805 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _821 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _871 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _861);
    float _872 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _861);
    float _873 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _861);
    float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
    float _878 = _871 * _877;
    float _879 = _872 * _877;
    float _880 = _873 * _877;
    vec4 _885 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _887 = _885.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1059 = sqrt(((_871 * _871) + (_872 * _872)) + (_873 * _873));
        float _1065 = (cbMatDynParam._m0[5u].x * _1059) + cbMatDynParam._m0[5u].y;
        float _3883 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1070 = (cbMatDynParam._m0[5u].z * _1059) + cbMatDynParam._m0[5u].w;
        float _3894 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) - _1066)) + _1066) < ((_887 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _898 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _899 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _917 = fma(_800, cbSceneParam._m0[5u].z, fma(_799, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _798));
    float _920 = fma(_800, cbSceneParam._m0[6u].z, fma(_799, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _798));
    float _923 = fma(_800, cbSceneParam._m0[7u].z, fma(_799, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _798));
    uint _936 = uint(roundEven(NORMAL.w)) * 13u;
    uint _937 = _936 + 9u;
    uint _938 = _937 + uint(cbMatDynParam._m0[0u].w);
    float _944 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * cbInstanceData._m0[_938].x;
    float _945 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) * cbInstanceData._m0[_938].y;
    float _946 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * cbInstanceData._m0[_938].z;
    float _3905 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _3916 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _950 = 1.0 - _805;
    float _951 = _947 * _950;
    float _952 = _948 * _950;
    float _953 = _949 * _950;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _805;
    float _959 = (_948 + (-0.039999999105930328369140625)) * _805;
    float _960 = (_949 + (-0.039999999105930328369140625)) * _805;
    float _961 = _958 + 0.039999999105930328369140625;
    float _963 = _959 + 0.039999999105930328369140625;
    float _964 = _960 + 0.039999999105930328369140625;
    vec4 _973 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _898, cbSceneParam._m0[86u].y * _899));
    float _976 = _973.x * TEXCOORD_5.w;
    float _977 = dot(vec3(_798, _799, _800), vec3(_878, _879, _880));
    float _980 = _977 * 2.0;
    float _984 = (_980 * _798) - _878;
    float _985 = (_980 * _799) - _879;
    float _986 = (_980 * _800) - _880;
    float _990 = abs(dot(vec3(_878, _879, _880), vec3(_798, _799, _800)));
    float _3938 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _992 = sqrt(_801);
    float _1005 = exp2((_992 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_992 * 3.0));
    float _1011 = (1.0 - _1005) * ((_992 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1012 = _1005 * _992;
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1378;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1103 = fma(_1048, cbModelParam._m0[26u].z, fma(_1044, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1040));
        float _1107 = fma(_1048, cbModelParam._m0[27u].z, fma(_1044, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1040));
        float _1111 = fma(_1048, cbModelParam._m0[28u].z, fma(_1044, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1040));
        float _1136 = _1040 + _798;
        float _1137 = _1044 + _799;
        float _1138 = _1048 + _800;
        float _1148 = fma(_1138, cbModelParam._m0[26u].z, fma(_1137, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1136)) - _1103;
        float _1149 = fma(_1138, cbModelParam._m0[27u].z, fma(_1137, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1136)) - _1107;
        float _1150 = fma(_1138, cbModelParam._m0[28u].z, fma(_1137, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1136)) - _1111;
        float _1154 = inversesqrt(dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150)));
        float _1167 = ((_1154 * _1148) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1103 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1154 * _1149) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1107 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1154 * _1150) / cbModelParam._m0[34u].z) + ((((((_1111 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        float _1206 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1172.x + (-0.5));
        float _1208 = _1206 * (_1172.y + (-0.5));
        float _1209 = _1206 * (_1172.z + (-0.5));
        float _1216 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1179.x + (-0.5));
        float _1218 = _1216 * (_1179.y + (-0.5));
        float _1219 = _1216 * (_1179.z + (-0.5));
        float _1226 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1186.x + (-0.5));
        float _1228 = _1226 * (_1186.y + (-0.5));
        float _1229 = _1226 * (_1186.z + (-0.5));
        float _1236 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1193.x + (-0.5));
        float _1238 = _1236 * (_1193.y + (-0.5));
        float _1239 = _1236 * (_1193.z + (-0.5));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = _1207 * 0.5;
        float _1244 = _1217 * 0.5;
        float _1245 = _1227 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1260 = (dot(vec3(_798, _799, _800), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1270 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3986 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1272 + 1.0))) + _1277) * _1240;
        float _1287 = _1208 * 0.5;
        float _1288 = _1218 * 0.5;
        float _1289 = _1228 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_798, _799, _800), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4019 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1314 + 1.0))) + _1319) * _1241;
        float _1329 = _1209 * 0.5;
        float _1330 = _1219 * 0.5;
        float _1331 = _1229 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_798, _799, _800), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4052 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1356 + 1.0))) + _1361) * _1242;
        _1378 = _1209;
        _1380 = _1208;
        _1381 = _1207;
        _1382 = _1219;
        _1383 = _1218;
        _1384 = _1217;
        _1385 = _1229;
        _1386 = _1228;
        _1387 = _1227;
        _1388 = _1242;
        _1389 = _1241;
        _1390 = _1240;
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
    }
    else
    {
        _1378 = _1379;
        _1380 = _1379;
        _1381 = _1379;
        _1382 = _1379;
        _1383 = _1379;
        _1384 = _1379;
        _1385 = _1379;
        _1386 = _1379;
        _1387 = _1379;
        _1388 = _1379;
        _1389 = _1379;
        _1390 = _1379;
        _1391 = 0.0;
        _1392 = 0.0;
        _1393 = 0.0;
    }
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1422 = fma(_1048, cbModelParam._m0[30u].z, fma(_1044, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1040));
        float _1426 = fma(_1048, cbModelParam._m0[31u].z, fma(_1044, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1040));
        float _1430 = fma(_1048, cbModelParam._m0[32u].z, fma(_1044, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1040));
        float _1453 = _1040 + _798;
        float _1454 = _1044 + _799;
        float _1455 = _1048 + _800;
        float _1465 = fma(_1455, cbModelParam._m0[30u].z, fma(_1454, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1453)) - _1422;
        float _1466 = fma(_1455, cbModelParam._m0[31u].z, fma(_1454, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1453)) - _1426;
        float _1467 = fma(_1455, cbModelParam._m0[32u].z, fma(_1454, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1453)) - _1430;
        float _1471 = inversesqrt(dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467)));
        float _1484 = ((_1471 * _1465) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1422 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1471 * _1466) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1426 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1471 * _1467) / cbModelParam._m0[35u].z) + ((((((_1430 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        float _1521 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1488.x + (-0.5));
        float _1523 = _1521 * (_1488.y + (-0.5));
        float _1524 = _1521 * (_1488.z + (-0.5));
        float _1531 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1495.x + (-0.5));
        float _1533 = _1531 * (_1495.y + (-0.5));
        float _1534 = _1531 * (_1495.z + (-0.5));
        float _1541 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1502.x + (-0.5));
        float _1543 = _1541 * (_1502.y + (-0.5));
        float _1544 = _1541 * (_1502.z + (-0.5));
        float _1551 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1509.x + (-0.5));
        float _1553 = _1551 * (_1509.y + (-0.5));
        float _1554 = _1551 * (_1509.z + (-0.5));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = _1522 * 0.5;
        float _1559 = _1532 * 0.5;
        float _1560 = _1542 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_798, _799, _800), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4115 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1585 + 1.0))) + _1590) * _1555;
        float _1600 = _1523 * 0.5;
        float _1601 = _1533 * 0.5;
        float _1602 = _1543 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_798, _799, _800), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4148 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1627 + 1.0))) + _1632) * _1556;
        float _1642 = _1524 * 0.5;
        float _1643 = _1534 * 0.5;
        float _1644 = _1544 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_798, _799, _800), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4181 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1669 + 1.0))) + _1674) * _1557;
        _1691 = _1524;
        _1692 = _1523;
        _1693 = _1522;
        _1694 = _1534;
        _1695 = _1533;
        _1696 = _1532;
        _1697 = _1544;
        _1698 = _1543;
        _1699 = _1542;
        _1700 = _1557;
        _1701 = _1556;
        _1702 = _1555;
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
    }
    else
    {
        _1691 = _1379;
        _1692 = _1379;
        _1693 = _1379;
        _1694 = _1379;
        _1695 = _1379;
        _1696 = _1379;
        _1697 = _1379;
        _1698 = _1379;
        _1699 = _1379;
        _1700 = _1379;
        _1701 = _1379;
        _1702 = _1379;
        _1703 = 0.0;
        _1704 = 0.0;
        _1705 = 0.0;
    }
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1391)) + _1391;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1392)) + _1392;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1393)) + _1393;
    float _1738 = fma(_1717, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1715 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1717, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1715 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1717, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1715));
    float _1759 = _984 * 0.5;
    float _1760 = _985 * 0.5;
    float _1761 = _986 * 0.5;
    float _1762 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1765 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1768 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1802;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1775 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1378, _1382, _1385, _1388));
        float _1779 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1783 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1790 = dot(vec4(cbModelParam._m0[39u]), vec4(_1759, _1760, _1761, 1.0));
        _1802 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1802 = 1.0;
    }
    float _1813;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1804 = dot(vec4(cbModelParam._m0[40u]), vec4(_1759, _1760, _1761, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1817 = (_1813 * cbModelParam._m0[1u].x) + (_1802 * (1.0 - cbModelParam._m0[1u].x));
    float _1827 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _801);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1827 : min(cbModelParam._m0[25u].z, _1827));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1876 = fma(_1048, cbModelParam._m0[13u].z, fma(_1044, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1040)) + cbModelParam._m0[13u].w;
        float _1880 = fma(_1048, cbModelParam._m0[14u].z, fma(_1044, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1040)) + cbModelParam._m0[14u].w;
        float _1884 = fma(_1048, cbModelParam._m0[15u].z, fma(_1044, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1040)) + cbModelParam._m0[15u].w;
        float _1887 = fma(_986, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _984));
        float _1890 = fma(_986, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _984));
        float _1893 = fma(_986, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _984));
        float _1921;
        if (_1887 > 0.0)
        {
            _1921 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1921 = frontier_phi_17_15_ladder;
        }
        float _2123;
        if (_1890 > 0.0)
        {
            _2123 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2123 = frontier_phi_26_22_ladder;
        }
        float _2377;
        if (_1893 > 0.0)
        {
            _2377 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2377 = frontier_phi_38_33_ladder;
        }
        float _2379 = isnan(_2123) ? _1921 : (isnan(_1921) ? _2123 : min(_1921, _2123));
        float _2380 = isnan(_2377) ? _2379 : (isnan(_2379) ? _2377 : min(_2379, _2377));
        float _2384 = (_2380 * _1887) + _1876;
        float _2385 = (_2380 * _1890) + _1880;
        float _2386 = (_2380 * _1893) + _1884;
        float _2387 = _2380 * 9.9999997473787516355514526367188e-05;
        float _2389 = (-1.0) - _2387;
        float _2391 = _2387 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2386 > _2391) || ((_2386 < _2389) || ((_2385 > _2391) || ((_2385 < _2389) || ((_2384 < _2389) || (_2384 > _2391))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2386, cbModelParam._m0[9u].z, fma(_2385, cbModelParam._m0[9u].y, _2384 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2386, cbModelParam._m0[10u].z, fma(_2385, cbModelParam._m0[10u].y, _2384 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2386, cbModelParam._m0[11u].z, fma(_2385, cbModelParam._m0[11u].y, _2384 * cbModelParam._m0[11u].x))), _1828);
            frontier_phi_16_38_ladder = _2514.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2514.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2514.x * cbModelParam._m0[1u].y;
        }
        _1909 = frontier_phi_16_38_ladder_2;
        _1911 = frontier_phi_16_38_ladder_1;
        _1913 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_984, _985, _986), _1828);
        _1909 = _1897.x * cbModelParam._m0[1u].y;
        _1911 = _1897.y * cbModelParam._m0[1u].y;
        _1913 = _1897.z * cbModelParam._m0[1u].y;
    }
    float _1917 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _801);
    float _1918 = isnan(_1917) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1917 : min(cbModelParam._m0[25u].w, _1917));
    float _2007;
    float _2009;
    float _2011;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1971 = fma(_1048, cbModelParam._m0[21u].z, fma(_1044, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1040)) + cbModelParam._m0[21u].w;
        float _1975 = fma(_1048, cbModelParam._m0[22u].z, fma(_1044, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1040)) + cbModelParam._m0[22u].w;
        float _1979 = fma(_1048, cbModelParam._m0[23u].z, fma(_1044, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1040)) + cbModelParam._m0[23u].w;
        float _1982 = fma(_986, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _984));
        float _1985 = fma(_986, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _984));
        float _1988 = fma(_986, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _984));
        float _2128;
        if (_1982 > 0.0)
        {
            _2128 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2128 = frontier_phi_28_24_ladder;
        }
        float _2404;
        if (_1985 > 0.0)
        {
            _2404 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2404 = frontier_phi_40_35_ladder;
        }
        float _2617;
        if (_1988 > 0.0)
        {
            _2617 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2617 = frontier_phi_49_46_ladder;
        }
        float _2619 = isnan(_2404) ? _2128 : (isnan(_2128) ? _2404 : min(_2128, _2404));
        float _2620 = isnan(_2617) ? _2619 : (isnan(_2619) ? _2617 : min(_2619, _2617));
        float _2624 = (_2620 * _1982) + _1971;
        float _2625 = (_2620 * _1985) + _1975;
        float _2626 = (_2620 * _1988) + _1979;
        float _2627 = _2620 * 9.9999997473787516355514526367188e-05;
        float _2628 = (-1.0) - _2627;
        float _2630 = _2627 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2626 > _2630) || ((_2626 < _2628) || ((_2625 > _2630) || ((_2625 < _2628) || ((_2624 < _2628) || (_2624 > _2630))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2825 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2626, cbModelParam._m0[17u].z, fma(_2625, cbModelParam._m0[17u].y, _2624 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2626, cbModelParam._m0[18u].z, fma(_2625, cbModelParam._m0[18u].y, _2624 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2626, cbModelParam._m0[19u].z, fma(_2625, cbModelParam._m0[19u].y, _2624 * cbModelParam._m0[19u].x))), _1918);
            frontier_phi_25_49_ladder = _2825.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2825.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2825.x * cbModelParam._m0[1u].z;
        }
        _2007 = frontier_phi_25_49_ladder_2;
        _2009 = frontier_phi_25_49_ladder_1;
        _2011 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1991 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_984, _985, _986), _1918);
        _2007 = _1991.x * cbModelParam._m0[1u].z;
        _2009 = _1991.y * cbModelParam._m0[1u].z;
        _2011 = _1991.z * cbModelParam._m0[1u].z;
    }
    float _2024 = (((_1011 * _961) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2007 - _1909)) + _1909);
    float _2026 = (((_1011 * _963) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2009 - _1911)) + _1911);
    float _2028 = (((_1011 * _964) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2011 - _1913)) + _1913);
    float _2031 = fma(_2028, cbSceneParam._m0[89u].z, fma(_2026, cbSceneParam._m0[89u].y, _2024 * cbSceneParam._m0[89u].x));
    float _2034 = fma(_2028, cbSceneParam._m0[90u].z, fma(_2026, cbSceneParam._m0[90u].y, _2024 * cbSceneParam._m0[90u].x));
    float _2037 = fma(_2028, cbSceneParam._m0[91u].z, fma(_2026, cbSceneParam._m0[91u].y, _2024 * cbSceneParam._m0[91u].x));
    uvec4 _2047 = floatBitsToUint(cbInstanceData._m0[_936 + 5u]);
    uint _2049 = _2047.x * 14u;
    uint _2050 = _2049 + 13u;
    float _2057 = _976 + (-1.0);
    float _2062 = (cbLight._m0[_2050].x * _2057) + 1.0;
    float _2063 = (cbLight._m0[_2050].y * _2057) + 1.0;
    float _2064 = (cbLight._m0[_2050].z * _2057) + 1.0;
    float _2065 = (cbLight._m0[_2050].w * _2057) + 1.0;
    uint _2066 = _2049 + 5u;
    float _2072 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
    uint _2076 = _2049 + 4u;
    float _2082 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
    uint _2086 = _2049 | 1u;
    float _2097 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_798, _799, _800));
    float _2100 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_798, _799, _800));
    float _4317 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _4328 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2105 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * 0.3183098733425140380859375;
    float _2107 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * 0.3183098733425140380859375;
    float _2114 = ((cbLight._m0[_2066].x * _2072) * _2107) + ((cbLight._m0[_2076].x * _2082) * _2105);
    float _2115 = ((_2072 * cbLight._m0[_2066].y) * _2107) + ((_2082 * cbLight._m0[_2076].y) * _2105);
    float _2116 = ((_2072 * cbLight._m0[_2066].z) * _2107) + ((_2082 * cbLight._m0[_2076].z) * _2105);
    uvec4 _2120 = floatBitsToUint(cbLight._m0[_2049 + 12u]);
    bool _2122 = _2120.x == 0u;
    float _2133;
    float _2135;
    float _2137;
    if (_2122)
    {
        _2133 = _2114;
        _2135 = _2115;
        _2137 = _2116;
    }
    else
    {
        uint _2141 = _2049 + 6u;
        float _2157 = (dot(vec3(cbLight._m0[_2049 + 2u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2158 = _2157 * _2157;
        float _4339 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2159 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2160 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2133 = (((cbLight._m0[_2141].x * 0.3183098733425140380859375) * _2159) * _2160) + _2114;
        _2135 = (((cbLight._m0[_2141].y * 0.3183098733425140380859375) * _2159) * _2160) + _2115;
        _2137 = (((cbLight._m0[_2141].z * 0.3183098733425140380859375) * _2159) * _2160) + _2116;
    }
    bool _2140 = _2120.y == 0u;
    float _2178;
    float _2180;
    float _2182;
    if (_2140)
    {
        _2178 = _2133;
        _2180 = _2135;
        _2182 = _2137;
    }
    else
    {
        uint _2348 = _2049 + 7u;
        float _2364 = (dot(vec3(cbLight._m0[_2049 + 3u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2365 = _2364 * _2364;
        float _4355 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2366 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2367 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
        _2178 = (((cbLight._m0[_2348].x * 0.3183098733425140380859375) * _2366) * _2367) + _2133;
        _2180 = (((cbLight._m0[_2348].y * 0.3183098733425140380859375) * _2366) * _2367) + _2135;
        _2182 = (((cbLight._m0[_2348].z * 0.3183098733425140380859375) * _2366) * _2367) + _2137;
    }
    uint _2185 = _2049 + 8u;
    float _2198 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2049].w)) * _801) * 0.949999988079071044921875);
    float _2199 = _2198 * _2198;
    float _2200 = cbLight._m0[_2049].x + _878;
    float _2201 = cbLight._m0[_2049].y + _879;
    float _2202 = cbLight._m0[_2049].z + _880;
    float _2206 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
    float _2207 = _2206 * _2200;
    float _2208 = _2206 * _2201;
    float _2209 = _2206 * _2202;
    float _2210 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2049].xyz));
    float _4371 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _4382 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _2214 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _2215 = dot(vec3(_798, _799, _800), vec3(_2207, _2208, _2209));
    float _4393 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _2219 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2207, _2208, _2209));
    float _4404 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2223 = _2199 * _2199;
    float _2227 = ((_2218 * _2218) * (_2223 + (-1.0))) + 1.0;
    float _2235 = exp2(log2(1.0 - (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) * 5.0);
    float _2236 = 0.959999978542327880859375 - _958;
    float _2238 = 0.959999978542327880859375 - _959;
    float _2239 = 0.959999978542327880859375 - _960;
    float _2246 = 1.0 - _2199;
    float _2257 = (0.5 / (((_2214 * ((_2213 * _2246) + _2199)) + 9.9999999392252902907785028219223e-09) + (((_2214 * _2246) + _2199) * _2213))) * _2213;
    float _4415 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2259 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2223 / ((_2227 * _2227) * 3.141590118408203125));
    uint _2270 = _2049 + 9u;
    float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _801) * 0.949999988079071044921875);
    float _2282 = _2281 * _2281;
    float _2283 = cbLight._m0[_2086].x + _878;
    float _2284 = cbLight._m0[_2086].y + _879;
    float _2285 = cbLight._m0[_2086].z + _880;
    float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
    float _2290 = _2289 * _2283;
    float _2291 = _2289 * _2284;
    float _2292 = _2289 * _2285;
    float _2293 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2086].xyz));
    float _4426 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2297 = dot(vec3(_798, _799, _800), vec3(_2290, _2291, _2292));
    float _4437 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2301 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2290, _2291, _2292));
    float _4448 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2305 = _2282 * _2282;
    float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
    float _2316 = exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0);
    float _2323 = 1.0 - _2282;
    float _2333 = (0.5 / (((_2214 * ((_2296 * _2323) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_2214 * _2323) + _2282) * _2296))) * _2296;
    float _4459 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2335 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
    float _2345 = (((((_2316 * _2236) + _961) * cbLight._m0[_2270].x) * _2335) * _2072) + (((((_2235 * _2236) + _961) * cbLight._m0[_2185].x) * _2259) * _2082);
    float _2346 = (((((_2316 * _2238) + _963) * cbLight._m0[_2270].y) * _2335) * _2072) + (((((_2235 * _2238) + _963) * cbLight._m0[_2185].y) * _2259) * _2082);
    float _2347 = (((((_2316 * _2239) + _964) * cbLight._m0[_2270].z) * _2335) * _2072) + (((((_2235 * _2239) + _964) * cbLight._m0[_2185].z) * _2259) * _2082);
    float _2409;
    float _2411;
    float _2413;
    if (_2122)
    {
        _2409 = _2345;
        _2411 = _2346;
        _2413 = _2347;
    }
    else
    {
        uint _2415 = _2049 + 2u;
        uint _2419 = _2049 + 10u;
        float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2415].w)) * _801) * 0.949999988079071044921875);
        float _2434 = _2433 * _2433;
        float _2435 = cbLight._m0[_2415].x + _878;
        float _2436 = cbLight._m0[_2415].y + _879;
        float _2437 = cbLight._m0[_2415].z + _880;
        float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
        float _2442 = _2441 * _2435;
        float _2443 = _2441 * _2436;
        float _2444 = _2441 * _2437;
        float _2445 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2415].xyz));
        float _4470 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2449 = dot(vec3(_798, _799, _800), vec3(_2442, _2443, _2444));
        float _4481 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2453 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_2442, _2443, _2444));
        float _4492 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2457 = _2434 * _2434;
        float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
        float _2468 = exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0);
        float _2475 = 1.0 - _2434;
        float _2485 = (0.5 / (((_2214 * ((_2448 * _2475) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2214 * _2475) + _2434) * _2448))) * _2448;
        float _4503 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2409 = (((((_2468 * _2236) + _961) * cbLight._m0[_2419].x) * _2487) * _2488) + _2345;
        _2411 = (((((_2468 * _2238) + _963) * cbLight._m0[_2419].y) * _2487) * _2488) + _2346;
        _2413 = (((((_2468 * _2239) + _964) * cbLight._m0[_2419].z) * _2487) * _2488) + _2347;
    }
    float _2523;
    float _2525;
    float _2527;
    if (_2140)
    {
        _2523 = _2409;
        _2525 = _2411;
        _2527 = _2413;
    }
    else
    {
        uint _2534 = _2049 + 3u;
        uint _2538 = _2049 + 11u;
        float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2534].w)) * _801) * 0.949999988079071044921875);
        float _2553 = _2552 * _2552;
        float _2554 = cbLight._m0[_2534].x + _878;
        float _2555 = cbLight._m0[_2534].y + _879;
        float _2556 = cbLight._m0[_2534].z + _880;
        float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
        float _2561 = _2560 * _2554;
        float _2562 = _2560 * _2555;
        float _2563 = _2560 * _2556;
        float _2564 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2534].xyz));
        float _4519 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2568 = dot(vec3(_798, _799, _800), vec3(_2561, _2562, _2563));
        float _4530 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2572 = dot(vec3(cbLight._m0[_2534].xyz), vec3(_2561, _2562, _2563));
        float _4541 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2576 = _2553 * _2553;
        float _2580 = ((_2571 * _2571) * (_2576 + (-1.0))) + 1.0;
        float _2587 = exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0);
        float _2594 = 1.0 - _2553;
        float _2604 = (0.5 / (((_2214 * ((_2567 * _2594) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2214 * _2594) + _2553) * _2567))) * _2567;
        float _4552 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2606 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2576 / ((_2580 * _2580) * 3.141590118408203125));
        float _2607 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
        _2523 = (((((_2587 * _2236) + _961) * cbLight._m0[_2538].x) * _2606) * _2607) + _2409;
        _2525 = (((((_2587 * _2238) + _963) * cbLight._m0[_2538].y) * _2606) * _2607) + _2411;
        _2527 = (((((_2587 * _2239) + _964) * cbLight._m0[_2538].z) * _2606) * _2607) + _2413;
    }
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    if (_2047.y == 0u)
    {
        float _2682 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2683 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2682;
        float _2684 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2682;
        float _2685 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2682;
        uvec4 _2697 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2698 = _2697.x;
        uint _2709 = uint((float(_2697.y) * floor(float(uint(cbSceneParam._m0[85u].y * _899) / _2698))) + floor(float(uint(cbSceneParam._m0[85u].x * _898) / _2698)));
        float _2719 = (log2(_2685 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2720 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        uint _2723 = uint(isnan(14.0) ? _2720 : (isnan(_2720) ? 14.0 : min(_2720, 14.0)));
        uvec4 _2728 = texelFetch(g_lightClusterGridBuffer, int(((_2723 << 2u) + (_2709 << 6u)) >> 2u));
        uint _2729 = _2728.x;
        uint _2730 = _2697.z;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        if (((((1u << ((_2730 >> 4u) & 15u)) + 4294967295u) & _2729) == 0u) || ((_2730 & 240u) == 0u))
        {
            _2830 = 0.0;
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
        }
        else
        {
            float _2831;
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            uint _2989 = 0u;
            uint _2998;
            bool _2999;
            for (;;)
            {
                _2998 = texelFetch(g_lightClassification, int((((_2723 << 5u) + (_2709 << 9u)) + (_2989 << 2u)) >> 2u)).x;
                _2999 = _2998 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2999)
                {
                    frontier_phi_66_pred = _2983;
                    frontier_phi_66_pred_1 = _2988;
                    frontier_phi_66_pred_2 = _2987;
                    frontier_phi_66_pred_3 = _2986;
                    frontier_phi_66_pred_4 = _2985;
                    frontier_phi_66_pred_5 = _2984;
                }
                else
                {
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    uint _3134;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2998;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    for (;;)
                    {
                        uint _3138 = uint(findLSB(_3134)) + (_2989 << 5u);
                        uint _3135 = (_3134 + 4294967295u) & _3134;
                        uint _3140 = _3138 * 48u;
                        vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3140)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 3u)).x));
                        uint _3160 = (_3138 * 48u) + 4u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3160)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 3u)).x));
                        uint _3179 = (_3138 * 48u) + 8u;
                        vec3 _3190 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x));
                        float _3194 = _3154.x - _2683;
                        float _3195 = _3154.y - _2684;
                        float _3196 = _3154.z - _2685;
                        float _3197 = dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196));
                        float _3200 = inversesqrt(_3197);
                        float _3201 = _3200 * _3194;
                        float _3202 = _3200 * _3195;
                        float _3203 = _3200 * _3196;
                        float _3204 = dot(vec3(_917, _920, _923), vec3(_3201, _3202, _3203));
                        float _3209 = 1.0 - (_3197 * _3154.w);
                        float _4578 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3210 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3211 = sqrt(_3197) * _3173.w;
                        float _3214 = 1.39999997615814208984375 / (_3211 + 1.39999997615814208984375);
                        float _3215 = _3214 * _3214;
                        float _3218 = ((1.0 - _3215) * _3204) + _3215;
                        float _3221 = _3211 * _3211;
                        float _3225 = ((isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))) * _3210) / ((_3221 * 0.699999988079071044921875) + 1.0);
                        float _3229 = (-0.0) - _2683;
                        float _3230 = (-0.0) - _2684;
                        float _3231 = (-0.0) - _2685;
                        float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3246 = exp2(log2(1.0 / ((_3221 * 3.5) + 5.0)) * 0.25);
                        float _3247 = 1.0 - _992;
                        float _3254 = sqrt(1.0 - ((1.0 - (_3247 * _3247)) * (1.0 - (_3246 * _3246))));
                        float _3255 = _3254 * _3254;
                        float _3256 = _3255 * _3255;
                        float _3257 = _3236 + _3201;
                        float _3258 = _3237 + _3202;
                        float _3259 = _3238 + _3203;
                        float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                        float _3267 = dot(vec3(_917, _920, _923), vec3(_3236, _3237, _3238));
                        float _4594 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                        float _3271 = dot(vec3(_917, _920, _923), vec3(_3263 * _3257, _3263 * _3258, _3263 * _3259));
                        float _4605 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                        float _3278 = ((_3274 * _3274) * (_3256 + (-1.0))) + 1.0;
                        float _3279 = _3214 * _3255;
                        float _3280 = _3279 * _3279;
                        float _3283 = ((1.0 - _3280) * _3204) + _3280;
                        float _4616 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3284 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3285 = 1.0 - _3255;
                        float _3295 = (0.5 / (((_3284 * ((_3270 * _3285) + _3255)) + 9.9999999392252902907785028219223e-09) + (((_3284 * _3285) + _3255) * _3270))) * _3284;
                        float _4627 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3306 = (((_3256 * 3.1415927410125732421875) * (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) / ((_3278 * _3278) * ((_3221 * 2.1991131305694580078125) + 3.141590118408203125))) * _3210;
                        _3058 = (_3225 * _3173.x) + _3131;
                        _3059 = (_3225 * _3173.y) + _3132;
                        _3060 = (_3225 * _3173.z) + _3133;
                        _3055 = (_3306 * _3190.x) + _3128;
                        _3056 = (_3306 * _3190.y) + _3129;
                        _3057 = (_3306 * _3190.z) + _3130;
                        if (_3135 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3135;
                        }
                    }
                    frontier_phi_66_pred = _3055;
                    frontier_phi_66_pred_1 = _3060;
                    frontier_phi_66_pred_2 = _3059;
                    frontier_phi_66_pred_3 = _3058;
                    frontier_phi_66_pred_4 = _3057;
                    frontier_phi_66_pred_5 = _3056;
                }
                _2831 = frontier_phi_66_pred;
                _2841 = frontier_phi_66_pred_1;
                _2839 = frontier_phi_66_pred_2;
                _2837 = frontier_phi_66_pred_3;
                _2835 = frontier_phi_66_pred_4;
                _2833 = frontier_phi_66_pred_5;
                uint _2990 = _2989 + 1u;
                if (_2990 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2983 = _2831;
                    _2984 = _2833;
                    _2985 = _2835;
                    _2986 = _2837;
                    _2987 = _2839;
                    _2988 = _2841;
                    _2989 = _2990;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2830 = _2831;
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
        }
        uvec4 _2844 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2845 = _2844.z;
        uint _2847 = (_2845 >> 8u) & 15u;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        if (((4294967295u << _2847) & _2729) == 0u)
        {
            _2951 = _2830;
            _2953 = _2832;
            _2955 = _2834;
            _2957 = _2836;
            _2959 = _2838;
            _2961 = _2840;
        }
        else
        {
            float _2976 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
            float _2977 = _2976 * _2683;
            float _2978 = _2976 * _2684;
            float _2979 = _2976 * _2685;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2847 < ((_2845 >> 12u) & 15u))
            {
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _3111 = _2830;
                float _3112 = _2832;
                float _3113 = _2834;
                float _3114 = _2836;
                float _3115 = _2838;
                float _3116 = _2840;
                uint _3117 = _2847;
                uint _3126;
                bool _3127;
                for (;;)
                {
                    _3126 = texelFetch(g_lightClassification, int((((_2723 << 5u) + (_2709 << 9u)) + (_3117 << 2u)) >> 2u)).x;
                    _3127 = _3126 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3127)
                    {
                        frontier_phi_77_pred = _3116;
                        frontier_phi_77_pred_1 = _3115;
                        frontier_phi_77_pred_2 = _3114;
                        frontier_phi_77_pred_3 = _3113;
                        frontier_phi_77_pred_4 = _3112;
                        frontier_phi_77_pred_5 = _3111;
                    }
                    else
                    {
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3333 = _3111;
                        float _3334 = _3112;
                        float _3335 = _3113;
                        float _3336 = _3114;
                        float _3337 = _3115;
                        float _3338 = _3116;
                        uint _3339 = _3126;
                        uint _3340;
                        vec4 _3365;
                        float _3366;
                        vec4 _3381;
                        vec3 _3393;
                        vec4 _3408;
                        vec4 _3423;
                        float _3470;
                        bool _3471;
                        for (;;)
                        {
                            uint _3350 = ((_3117 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3339));
                            _3340 = (_3339 + 4294967295u) & _3339;
                            uint _3352 = _3350 * 40u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            _3366 = _3365.w;
                            uint _3368 = (_3350 * 40u) + 4u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3383 = (_3350 * 40u) + 8u;
                            _3393 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x));
                            uint _3395 = (_3350 * 40u) + 16u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3410 = (_3350 * 40u) + 20u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3426 = (_3350 * 40u) + 24u;
                            vec4 _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3445 = (_3350 * 40u) + 28u;
                            vec4 _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            _3470 = fma(_2685, _3458.z, fma(_2684, _3458.y, _3458.x * _2683)) + _3458.w;
                            _3471 = !((fma(_2685, _3439.z, fma(_2684, _3439.y, _3439.x * _2683)) + _3439.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3471)
                            {
                                float _3498 = _3365.x - _2683;
                                float _3499 = _3365.y - _2684;
                                float _3500 = _3365.z - _2685;
                                float _3501 = dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500));
                                float _3504 = inversesqrt(_3501);
                                float _3505 = _3504 * _3498;
                                float _3506 = _3504 * _3499;
                                float _3507 = _3504 * _3500;
                                float _3511 = 1.0 - (_3501 / (_3366 * _3366));
                                float _4638 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3512 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3516 = sqrt(_3501) * _3381.w;
                                float _3518 = 1.39999997615814208984375 / (_3516 + 1.39999997615814208984375);
                                float _3519 = _3518 * _3518;
                                float _3522 = ((1.0 - _3519) * dot(vec3(_3505, _3506, _3507), vec3(_917, _920, _923))) + _3519;
                                float _3525 = _3516 * _3516;
                                float _3529 = (fma(_2685, _3408.z, fma(_2684, _3408.y, _3408.x * _2683)) + _3408.w) / _3470;
                                float _3530 = (fma(_2685, _3423.z, fma(_2684, _3423.y, _3423.x * _2683)) + _3423.w) / _3470;
                                float _3534 = 1.0 - dot(vec2(_3529, _3530), vec2(_3529, _3530));
                                float _4654 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3535 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                                float _3536 = _3535 * (((isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0))) * _3512) / ((_3525 * 0.699999988079071044921875) + 1.0));
                                float _3548 = exp2(log2(1.0 / ((_3525 * 3.5) + 5.0)) * 0.25);
                                float _3549 = 1.0 - _992;
                                float _3556 = sqrt(1.0 - ((1.0 - (_3549 * _3549)) * (1.0 - (_3548 * _3548))));
                                float _3557 = _3556 * _3556;
                                float _3558 = _3557 * _3557;
                                float _3559 = _3505 - _2977;
                                float _3560 = _3506 - _2978;
                                float _3561 = _3507 - _2979;
                                float _3565 = inversesqrt(dot(vec3(_3559, _3560, _3561), vec3(_3559, _3560, _3561)));
                                float _3569 = dot(vec3(_917, _920, _923), vec3((-0.0) - _2977, (-0.0) - _2978, (-0.0) - _2979));
                                float _4665 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3572 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                                float _3573 = dot(vec3(_917, _920, _923), vec3(_3565 * _3559, _3565 * _3560, _3565 * _3561));
                                float _4676 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3576 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3580 = ((_3576 * _3576) * (_3558 + (-1.0))) + 1.0;
                                float _3581 = _3518 * _3557;
                                float _3582 = _3581 * _3581;
                                float _3588 = ((1.0 - _3582) * dot(vec3(_917, _920, _923), vec3(_3505, _3506, _3507))) + _3582;
                                float _4687 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3590 = 1.0 - _3557;
                                float _3600 = (0.5 / (((_3589 * ((_3572 * _3590) + _3557)) + 9.9999999392252902907785028219223e-09) + (((_3589 * _3590) + _3557) * _3572))) * _3589;
                                float _4698 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3610 = (_3535 * _3512) * (((_3558 * 3.1415927410125732421875) * (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) / ((_3580 * _3580) * ((_3525 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3536 * _3381.y;
                                frontier_phi_83_pred_1 = _3536 * _3381.x;
                                frontier_phi_83_pred_2 = _3610 * _3393.z;
                                frontier_phi_83_pred_3 = _3610 * _3393.y;
                                frontier_phi_83_pred_4 = _3610 * _3393.x;
                                frontier_phi_83_pred_5 = _3536 * _3381.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3618 = frontier_phi_83_pred;
                            _3617 = frontier_phi_83_pred_1;
                            _3616 = frontier_phi_83_pred_2;
                            _3615 = frontier_phi_83_pred_3;
                            _3614 = frontier_phi_83_pred_4;
                            _3619 = frontier_phi_83_pred_5;
                            _3323 = _3617 + _3336;
                            _3324 = _3618 + _3337;
                            _3325 = _3619 + _3338;
                            _3320 = _3614 + _3333;
                            _3321 = _3615 + _3334;
                            _3322 = _3616 + _3335;
                            if (_3340 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3340;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3325;
                        frontier_phi_77_pred_1 = _3324;
                        frontier_phi_77_pred_2 = _3323;
                        frontier_phi_77_pred_3 = _3322;
                        frontier_phi_77_pred_4 = _3321;
                        frontier_phi_77_pred_5 = _3320;
                    }
                    _2962 = frontier_phi_77_pred;
                    _2960 = frontier_phi_77_pred_1;
                    _2958 = frontier_phi_77_pred_2;
                    _2956 = frontier_phi_77_pred_3;
                    _2954 = frontier_phi_77_pred_4;
                    _2952 = frontier_phi_77_pred_5;
                    uint _3118 = _3117 + 1u;
                    if (_3118 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3111 = _2952;
                        _3112 = _2954;
                        _3113 = _2956;
                        _3114 = _2958;
                        _3115 = _2960;
                        _3116 = _2962;
                        _3117 = _3118;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2956;
                frontier_phi_58_59_ladder_1 = _2962;
                frontier_phi_58_59_ladder_2 = _2960;
                frontier_phi_58_59_ladder_3 = _2958;
                frontier_phi_58_59_ladder_4 = _2954;
                frontier_phi_58_59_ladder_5 = _2952;
            }
            else
            {
                frontier_phi_58_59_ladder = _2834;
                frontier_phi_58_59_ladder_1 = _2840;
                frontier_phi_58_59_ladder_2 = _2838;
                frontier_phi_58_59_ladder_3 = _2836;
                frontier_phi_58_59_ladder_4 = _2832;
                frontier_phi_58_59_ladder_5 = _2830;
            }
            _2951 = frontier_phi_58_59_ladder_5;
            _2953 = frontier_phi_58_59_ladder_4;
            _2955 = frontier_phi_58_59_ladder;
            _2957 = frontier_phi_58_59_ladder_3;
            _2959 = frontier_phi_58_59_ladder_2;
            _2961 = frontier_phi_58_59_ladder_1;
        }
        float _2966 = isnan(1.0) ? _976 : (isnan(_976) ? 1.0 : min(_976, 1.0));
        _2742 = (_2966 * _2957) + _2178;
        _2744 = (_2966 * _2959) + _2180;
        _2746 = (_2966 * _2961) + _2182;
        _2748 = ((_2951 * _961) * _2966) + _2523;
        _2750 = ((_2953 * _963) * _2966) + _2525;
        _2752 = ((_2955 * _964) * _2966) + _2527;
    }
    else
    {
        _2742 = _2178;
        _2744 = _2180;
        _2746 = _2182;
        _2748 = _2523;
        _2750 = _2525;
        _2752 = _2527;
    }
    float _4714 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _4725 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _4736 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _2769 = ((isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2742 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _976))) + ((_2748 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    float _2770 = ((isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2744 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _976))) + ((_2750 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    float _2771 = ((isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2746 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _976))) + ((_2752 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    uint _2772 = _936 + 6u;
    float _2780 = _898 / cbSceneParam._m0[86u].x;
    float _2781 = _899 / cbSceneParam._m0[86u].y;
    vec4 _2795 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2780, _2781, (log2((isnan(cbSceneParam._m0[77u].w) ? _821 : (isnan(_821) ? cbSceneParam._m0[77u].w : min(_821, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2797 = _2795.x;
    float _2798 = _2795.y;
    float _2799 = _2795.z;
    float _2800 = _2795.w;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    if (_821 > cbSceneParam._m0[78u].w)
    {
        float _2855 = isnan(_821) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _821 : min(cbSceneParam._m0[80u].w, _821));
        float _2856 = _2855 / _821;
        float _2867 = _2856 * _871;
        float _2868 = _872 * _2856;
        float _2869 = (-0.0) - _2868;
        float _2871 = _2856 * _873;
        float _2873 = (cbSceneParam._m0[77u].w * _2869) / _2855;
        float _2874 = _2873 + cbSceneParam._m0[79u].w;
        float _2875 = cbSceneParam._m0[79u].w - _2868;
        float _2881 = sqrt(((_2867 * _2867) + (_2868 * _2868)) + (_2871 * _2871));
        float _2884 = (1.0 - (cbSceneParam._m0[77u].w / _2855)) * _2881;
        float _2889 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2891 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3068;
        if (abs((_2869 - _2873) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3068 = ((((_2874 > 0.0) ? exp2(_2889 * _2874) : (2.0 - exp2(_2891 * _2874))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2884;
        }
        else
        {
            float _3012 = 1.0 / cbSceneParam._m0[80u].x;
            float _3013 = isnan(_2875) ? _2874 : (isnan(_2874) ? _2875 : max(_2874, _2875));
            float _3014 = isnan(_2875) ? _2874 : (isnan(_2874) ? _2875 : min(_2874, _2875));
            float _3023 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : min(_3013, 0.0));
            float _3024 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : min(_3014, 0.0));
            _3068 = ((abs(_2881 / _2869) * cbSceneParam._m0[80u].y) * ((((_3023 - _3024) * 2.0) - ((exp2(_2889 * (isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0)))) - exp2(_2889 * (isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0))))) * _3012)) - ((exp2(_2891 * _3023) - exp2(_2891 * _3024)) * _3012))) + (_2884 * cbSceneParam._m0[80u].z);
        }
        vec4 _3070 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2780, _2781, 1.0), 0.0);
        float _3079 = exp2((_3068 * (-1.44269502162933349609375)) * (1.0 - _3070.w));
        float _3080 = log2(_3079);
        float _3096 = log2(_2800);
        _2893 = (exp2(_3096 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].x)) * _3070.x) / cbSceneParam._m0[78u].x)) + _2797;
        _2895 = (exp2(_3096 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].y)) * _3070.y) / cbSceneParam._m0[78u].y)) + _2798;
        _2897 = (exp2(_3096 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].z)) * _3070.z) / cbSceneParam._m0[78u].z)) + _2799;
        _2899 = _3079 * _2800;
    }
    else
    {
        _2893 = _2797;
        _2895 = _2798;
        _2897 = _2799;
        _2899 = _2800;
    }
    bool _3106;
    vec4 _2909;
    vec4 _2931;
    float _2933;
    float _2937;
    float _2938;
    float _2939;
    float _2940;
    bool _2950;
    for (;;)
    {
        _2909 = cbMatDynParam._m0[0u];
        float _2911 = roundEven(_2909.y);
        bool _2912 = _2911 == 3.0;
        float _2913 = log2(_2899);
        float _2920 = exp2(_2913 * cbSceneParam._m0[78u].x) * _2769;
        float _2921 = exp2(_2913 * cbSceneParam._m0[78u].y) * _2770;
        float _2922 = exp2(_2913 * cbSceneParam._m0[78u].z) * _2771;
        float _2929 = _887 + (-0.5);
        _2931 = cbMtdParam._m0[1u];
        _2933 = _2931.y * _2929;
        float _2936 = (_2911 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2937 = _2936 * (_2912 ? _2920 : (_2920 + (cbSceneParam._m0[72u].w * _2893)));
        _2938 = _2936 * (_2912 ? _2921 : (_2921 + (cbSceneParam._m0[72u].w * _2895)));
        _2939 = _2936 * (_2912 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2897)));
        _2940 = _2929 * 0.999000012874603271484375;
        _2950 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2950)
        {
            if ((cbInstanceData._m0[_936 + 7u].x + _2940) < 0.5)
            {
                _3106 = true;
                break;
            }
        }
        uint _3047 = _937 + uint(_2909.w);
        if ((cbInstanceData._m0[_3047].w < 1.0) && ((cbInstanceData._m0[_3047].w + _2940) < 0.5))
        {
            _3106 = true;
            break;
        }
        if ((_2933 + 1.0) < _2931.x)
        {
            _3106 = true;
            break;
        }
        _3106 = false;
        break;
    }
    float _3311;
    if (_3106)
    {
        discard_state = true;
        _3311 = 0.0;
    }
    else
    {
        _3311 = cbInstanceData._m0[_2772].w;
    }
    SV_Target.x = _2937;
    SV_Target.y = _2938;
    SV_Target.z = _2939;
    SV_Target.w = _3311;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2772].w;
    discard_exit();
}


